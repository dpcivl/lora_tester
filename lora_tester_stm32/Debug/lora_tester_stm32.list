
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a534  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f4c  0801a704  0801a704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c650  0801c650  0001e208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c650  0801c650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c658  0801c658  0001e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c658  0801c658  0001d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c65c  0801c65c  0001d65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0801c660  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  0801c728  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  0801c7c8  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a08c  20000208  0801c868  0001e208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a294  0801c868  0001e294  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045b35  00000000  00000000  0001e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009c25  00000000  00000000  00063d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003958  00000000  00000000  0006d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c84  00000000  00000000  000712f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000394ea  00000000  00000000  00073f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000505a7  00000000  00000000  000ad45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d455  00000000  00000000  000fda05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022ae5a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f7e0  00000000  00000000  0022aea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a6ec 	.word	0x0801a6ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0801a6ec 	.word	0x0801a6ec

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 f8e4 	bl	80047f8 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f019 fc5a 	bl	8019ef8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f019 fbae 	bl	8019dd0 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 f8b4 	bl	80047f8 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 f985 	bl	80049a0 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 f8a6 	bl	80047f8 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 f89e 	bl	80047f8 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 f899 	bl	80047f8 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801a704 	.word	0x0801a704
 80006d4:	0801a720 	.word	0x0801a720
 80006d8:	0801a728 	.word	0x0801a728
 80006dc:	0801a740 	.word	0x0801a740
 80006e0:	0801a770 	.word	0x0801a770
 80006e4:	0801a7a8 	.word	0x0801a7a8

080006e8 <get_state_name>:
#include <stddef.h>
#include <stdio.h>
#include <string.h>

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801a7d8 	.word	0x0801a7d8
 800076c:	0801a7e0 	.word	0x0801a7e0
 8000770:	0801a7ec 	.word	0x0801a7ec
 8000774:	0801a7f4 	.word	0x0801a7f4
 8000778:	0801a800 	.word	0x0801a800
 800077c:	0801a810 	.word	0x0801a810
 8000780:	0801a820 	.word	0x0801a820
 8000784:	0801a834 	.word	0x0801a834
 8000788:	0801a848 	.word	0x0801a848
 800078c:	0801a854 	.word	0x0801a854
 8000790:	0801a85c 	.word	0x0801a85c
 8000794:	0801a864 	.word	0x0801a864

08000798 <LoraStarter_Process>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b0bf      	sub	sp, #252	@ 0xfc
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 8283 	beq.w	8000cb0 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	f200 825b 	bhi.w	8000c72 <LoraStarter_Process+0x4da>
 80007bc:	a201      	add	r2, pc, #4	@ (adr r2, 80007c4 <LoraStarter_Process+0x2c>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007e9 	.word	0x080007e9
 80007c8:	08000837 	.word	0x08000837
 80007cc:	0800088d 	.word	0x0800088d
 80007d0:	08000947 	.word	0x08000947
 80007d4:	0800095d 	.word	0x0800095d
 80007d8:	080009ab 	.word	0x080009ab
 80007dc:	08000a69 	.word	0x08000a69
 80007e0:	08000b99 	.word	0x08000b99
 80007e4:	08000bff 	.word	0x08000bff
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <LoraStarter_Process+0x70>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <LoraStarter_Process+0x7e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4aaa      	ldr	r2, [pc, #680]	@ (8000abc <LoraStarter_Process+0x324>)
 8000814:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082c:	49a4      	ldr	r1, [pc, #656]	@ (8000ac0 <LoraStarter_Process+0x328>)
 800082e:	2001      	movs	r0, #1
 8000830:	f003 ffe2 	bl	80047f8 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000834:	e224      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	da20      	bge.n	8000884 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	1c59      	adds	r1, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68d8      	ldr	r0, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	460a      	mov	r2, r1
 8000860:	4998      	ldr	r1, [pc, #608]	@ (8000ac4 <LoraStarter_Process+0x32c>)
 8000862:	2000      	movs	r0, #0
 8000864:	f003 ffc8 	bl	80047f8 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fec8 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000882:	e1fd      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
            break;
 800088a:	e1f9      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 81f1 	beq.w	8000c76 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f000 fa91 	bl	8000dbc <is_response_ok>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d010      	beq.n	80008c2 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	4987      	ldr	r1, [pc, #540]	@ (8000ac8 <LoraStarter_Process+0x330>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f003 ffa4 	bl	80047f8 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80008c0:	e1d9      	b.n	8000c76 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80008c2:	4982      	ldr	r1, [pc, #520]	@ (8000acc <LoraStarter_Process+0x334>)
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f019 fb32 	bl	8019f2e <strstr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <LoraStarter_Process+0x148>
 80008d0:	497f      	ldr	r1, [pc, #508]	@ (8000ad0 <LoraStarter_Process+0x338>)
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f019 fb2b 	bl	8019f2e <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 81cb 	beq.w	8000c76 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	497a      	ldr	r1, [pc, #488]	@ (8000ad4 <LoraStarter_Process+0x33c>)
 80008ea:	2002      	movs	r0, #2
 80008ec:	f003 ff84 	bl	80047f8 <LOGGER_SendFormatted>
                    ctx->error_count++;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	dc0d      	bgt.n	800091e <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	3301      	adds	r3, #1
 800090e:	4972      	ldr	r1, [pc, #456]	@ (8000ad8 <LoraStarter_Process+0x340>)
 8000910:	2001      	movs	r0, #1
 8000912:	f003 ff71 	bl	80047f8 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
            break;
 800091c:	e1ab      	b.n	8000c76 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	461a      	mov	r2, r3
 8000926:	496d      	ldr	r1, [pc, #436]	@ (8000adc <LoraStarter_Process+0x344>)
 8000928:	2002      	movs	r0, #2
 800092a:	f003 ff65 	bl	80047f8 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
            break;
 8000944:	e197      	b.n	8000c76 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000946:	4966      	ldr	r1, [pc, #408]	@ (8000ae0 <LoraStarter_Process+0x348>)
 8000948:	2001      	movs	r0, #1
 800094a:	f003 ff55 	bl	80047f8 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 800094e:	4865      	ldr	r0, [pc, #404]	@ (8000ae4 <LoraStarter_Process+0x34c>)
 8000950:	f7ff fe5c 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e191      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 818b 	beq.w	8000c7a <LoraStarter_Process+0x4e2>
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 fa91 	bl	8000e8c <is_join_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 8184 	beq.w	8000c7a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000972:	495d      	ldr	r1, [pc, #372]	@ (8000ae8 <LoraStarter_Process+0x350>)
 8000974:	2001      	movs	r0, #1
 8000976:	f003 ff3f 	bl	80047f8 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2205      	movs	r2, #5
 800097e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	461a      	mov	r2, r3
 80009a0:	4952      	ldr	r1, [pc, #328]	@ (8000aec <LoraStarter_Process+0x354>)
 80009a2:	2001      	movs	r0, #1
 80009a4:	f003 ff28 	bl	80047f8 <LOGGER_SendFormatted>
            }
            break;
 80009a8:	e167      	b.n	8000c7a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <LoraStarter_Process+0x220>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	e000      	b.n	80009ba <LoraStarter_Process+0x222>
 80009b8:	4b40      	ldr	r3, [pc, #256]	@ (8000abc <LoraStarter_Process+0x324>)
 80009ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 80009be:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009d2:	e014      	b.n	80009fe <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 80009d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009e4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4940      	ldr	r1, [pc, #256]	@ (8000af0 <LoraStarter_Process+0x358>)
 80009f0:	f019 fa24 	bl	8019e3c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009f8:	3301      	adds	r3, #1
 80009fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a06:	429a      	cmp	r2, r3
 8000a08:	da03      	bge.n	8000a12 <LoraStarter_Process+0x27a>
 8000a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a0e:	2b1e      	cmp	r3, #30
 8000a10:	dde0      	ble.n	80009d4 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	33f0      	adds	r3, #240	@ 0xf0
 8000a1a:	443b      	add	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <LoraStarter_Process+0x35c>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	f019 f9cf 	bl	8019dd0 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <LoraStarter_Process+0x360>)
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f003 fedd 	bl	80047f8 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fde2 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4927      	ldr	r1, [pc, #156]	@ (8000afc <LoraStarter_Process+0x364>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f003 fec9 	bl	80047f8 <LOGGER_SendFormatted>
            }
            break;
 8000a66:	e10b      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8107 	beq.w	8000c7e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f000 fa8f 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000a7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d03f      	beq.n	8000b04 <LoraStarter_Process+0x36c>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	f300 8080 	bgt.w	8000b8a <LoraStarter_Process+0x3f2>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <LoraStarter_Process+0x2fc>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d04c      	beq.n	8000b2c <LoraStarter_Process+0x394>
 8000a92:	e07a      	b.n	8000b8a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000a94:	491a      	ldr	r1, [pc, #104]	@ (8000b00 <LoraStarter_Process+0x368>)
 8000a96:	2001      	movs	r0, #1
 8000a98:	f003 feae 	bl	80047f8 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000ab0:	f003 fe38 	bl	8004724 <TIME_GetCurrentMs>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]
                        break;
 8000aba:	e06c      	b.n	8000b96 <LoraStarter_Process+0x3fe>
 8000abc:	0801a888 	.word	0x0801a888
 8000ac0:	0801a890 	.word	0x0801a890
 8000ac4:	0801a8c8 	.word	0x0801a8c8
 8000ac8:	0801a8ec 	.word	0x0801a8ec
 8000acc:	0801a85c 	.word	0x0801a85c
 8000ad0:	0801a90c 	.word	0x0801a90c
 8000ad4:	0801a924 	.word	0x0801a924
 8000ad8:	0801a944 	.word	0x0801a944
 8000adc:	0801a970 	.word	0x0801a970
 8000ae0:	0801a9ac 	.word	0x0801a9ac
 8000ae4:	0801a9c8 	.word	0x0801a9c8
 8000ae8:	0801a9d4 	.word	0x0801a9d4
 8000aec:	0801a9ec 	.word	0x0801a9ec
 8000af0:	0801aa1c 	.word	0x0801aa1c
 8000af4:	0801aa24 	.word	0x0801aa24
 8000af8:	0801aa34 	.word	0x0801aa34
 8000afc:	0801aa4c 	.word	0x0801aa4c
 8000b00:	0801aa64 	.word	0x0801aa64
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b04:	496c      	ldr	r1, [pc, #432]	@ (8000cb8 <LoraStarter_Process+0x520>)
 8000b06:	2002      	movs	r0, #2
 8000b08:	f003 fe76 	bl	80047f8 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2207      	movs	r2, #7
 8000b10:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b20:	f003 fe00 	bl	8004724 <TIME_GetCurrentMs>
 8000b24:	4602      	mov	r2, r0
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	611a      	str	r2, [r3, #16]
                        break;
 8000b2a:	e034      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000b2c:	4a63      	ldr	r2, [pc, #396]	@ (8000cbc <LoraStarter_Process+0x524>)
 8000b2e:	4964      	ldr	r1, [pc, #400]	@ (8000cc0 <LoraStarter_Process+0x528>)
 8000b30:	2002      	movs	r0, #2
 8000b32:	f003 fe61 	bl	80047f8 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	461a      	mov	r2, r3
 8000b46:	495f      	ldr	r1, [pc, #380]	@ (8000cc4 <LoraStarter_Process+0x52c>)
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f003 fe55 	bl	80047f8 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <LoraStarter_Process+0x3ca>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1a      	ldr	r2, [r3, #32]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	da0b      	bge.n	8000b7a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6a:	4957      	ldr	r1, [pc, #348]	@ (8000cc8 <LoraStarter_Process+0x530>)
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f003 fe43 	bl	80047f8 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2208      	movs	r2, #8
 8000b76:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000b78:	e00d      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000b7a:	4954      	ldr	r1, [pc, #336]	@ (8000ccc <LoraStarter_Process+0x534>)
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f003 fe3b 	bl	80047f8 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	220a      	movs	r2, #10
 8000b86:	701a      	strb	r2, [r3, #0]
                        break;
 8000b88:	e005      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4950      	ldr	r1, [pc, #320]	@ (8000cd0 <LoraStarter_Process+0x538>)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f003 fe32 	bl	80047f8 <LOGGER_SendFormatted>
                        break;
 8000b94:	bf00      	nop
                }
            }
            break;
 8000b96:	e072      	b.n	8000c7e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000b98:	f003 fdc4 	bl	8004724 <TIME_GetCurrentMs>
 8000b9c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <LoraStarter_Process+0x416>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	e001      	b.n	8000bb2 <LoraStarter_Process+0x41a>
 8000bae:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d809      	bhi.n	8000bdc <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000bc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bcc:	4941      	ldr	r1, [pc, #260]	@ (8000cd4 <LoraStarter_Process+0x53c>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f003 fe12 	bl	80047f8 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000bda:	e051      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bea:	4413      	add	r3, r2
 8000bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000bf0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000bf4:	4938      	ldr	r1, [pc, #224]	@ (8000cd8 <LoraStarter_Process+0x540>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f003 fdfe 	bl	80047f8 <LOGGER_SendFormatted>
            break;
 8000bfc:	e040      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000bfe:	f003 fd91 	bl	8004724 <TIME_GetCurrentMs>
 8000c02:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10b      	bne.n	8000c26 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c0e:	4933      	ldr	r1, [pc, #204]	@ (8000cdc <LoraStarter_Process+0x544>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f003 fdf1 	bl	80047f8 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000c24:	e02c      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c2e:	1ad2      	subs	r2, r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d30e      	bcc.n	8000c56 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4928      	ldr	r1, [pc, #160]	@ (8000ce0 <LoraStarter_Process+0x548>)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f003 fdd9 	bl	80047f8 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	701a      	strb	r2, [r3, #0]
            break;
 8000c54:	e014      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	491e      	ldr	r1, [pc, #120]	@ (8000ce4 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f003 fdc4 	bl	80047f8 <LOGGER_SendFormatted>
            break;
 8000c70:	e006      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000c72:	bf00      	nop
 8000c74:	e004      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c76:	bf00      	nop
 8000c78:	e002      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c7e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d012      	beq.n	8000cb2 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000c8c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fd29 	bl	80006e8 <get_state_name>
 8000c96:	4604      	mov	r4, r0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd23 	bl	80006e8 <get_state_name>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	4910      	ldr	r1, [pc, #64]	@ (8000ce8 <LoraStarter_Process+0x550>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fda5 	bl	80047f8 <LOGGER_SendFormatted>
 8000cae:	e000      	b.n	8000cb2 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000cb0:	bf00      	nop
    }
}
 8000cb2:	37f4      	adds	r7, #244	@ 0xf4
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	0801aa7c 	.word	0x0801aa7c
 8000cbc:	0801aa90 	.word	0x0801aa90
 8000cc0:	0801aaa0 	.word	0x0801aaa0
 8000cc4:	0801aab8 	.word	0x0801aab8
 8000cc8:	0801aad0 	.word	0x0801aad0
 8000ccc:	0801aaec 	.word	0x0801aaec
 8000cd0:	0801ab10 	.word	0x0801ab10
 8000cd4:	0801ab2c 	.word	0x0801ab2c
 8000cd8:	0801ab68 	.word	0x0801ab68
 8000cdc:	0801ab9c 	.word	0x0801ab9c
 8000ce0:	0801abb4 	.word	0x0801abb4
 8000ce4:	0801abdc 	.word	0x0801abdc
 8000ce8:	0801ac10 	.word	0x0801ac10

08000cec <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <Network_SendBinary+0x8c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d04:	f06f 0301 	mvn.w	r3, #1
 8000d08:	e032      	b.n	8000d70 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <Network_SendBinary+0x2a>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000d16:	f06f 0303 	mvn.w	r3, #3
 8000d1a:	e029      	b.n	8000d70 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <Network_SendBinary+0x90>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <Network_SendBinary+0x3e>
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d002      	beq.n	8000d2e <Network_SendBinary+0x42>
 8000d28:	e020      	b.n	8000d6c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e020      	b.n	8000d70 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f9df 	bl	80010f4 <SDStorage_WriteLog>
 8000d36:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <Network_SendBinary+0x6a>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dc10      	bgt.n	8000d66 <Network_SendBinary+0x7a>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f113 0f05 	cmn.w	r3, #5
 8000d4a:	d009      	beq.n	8000d60 <Network_SendBinary+0x74>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f113 0f02 	cmn.w	r3, #2
 8000d52:	d002      	beq.n	8000d5a <Network_SendBinary+0x6e>
 8000d54:	e007      	b.n	8000d66 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e00a      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000d5a:	f06f 0301 	mvn.w	r3, #1
 8000d5e:	e007      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000d60:	f06f 0303 	mvn.w	r3, #3
 8000d64:	e004      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e001      	b.n	8000d70 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	20000225 	.word	0x20000225

08000d80 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <Network_IsConnected+0x34>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <Network_IsConnected+0x38>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <Network_IsConnected+0x22>
 8000d94:	f000 fa1a 	bl	80011cc <SDStorage_IsReady>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <Network_IsConnected+0x22>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <Network_IsConnected+0x24>
 8000da2:	2300      	movs	r3, #0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e001      	b.n	8000db0 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <Network_IsConnected+0x38>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000225 	.word	0x20000225
 8000db8:	20000224 	.word	0x20000224

08000dbc <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000dca:	4925      	ldr	r1, [pc, #148]	@ (8000e60 <is_response_ok+0xa4>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f003 fd13 	bl	80047f8 <LOGGER_SendFormatted>
        return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e03f      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4922      	ldr	r1, [pc, #136]	@ (8000e64 <is_response_ok+0xa8>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f003 fd0c 	bl	80047f8 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000de0:	4921      	ldr	r1, [pc, #132]	@ (8000e68 <is_response_ok+0xac>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fa14 	bl	8000210 <strcmp>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d105      	bne.n	8000dfa <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000dee:	491f      	ldr	r1, [pc, #124]	@ (8000e6c <is_response_ok+0xb0>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f003 fd01 	bl	80047f8 <LOGGER_SendFormatted>
        return true;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e02d      	b.n	8000e56 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000dfa:	491d      	ldr	r1, [pc, #116]	@ (8000e70 <is_response_ok+0xb4>)
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fa07 	bl	8000210 <strcmp>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d105      	bne.n	8000e14 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e08:	491a      	ldr	r1, [pc, #104]	@ (8000e74 <is_response_ok+0xb8>)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f003 fcf4 	bl	80047f8 <LOGGER_SendFormatted>
        return true;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e020      	b.n	8000e56 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000e14:	4918      	ldr	r1, [pc, #96]	@ (8000e78 <is_response_ok+0xbc>)
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff f9fa 	bl	8000210 <strcmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000e22:	4916      	ldr	r1, [pc, #88]	@ (8000e7c <is_response_ok+0xc0>)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f003 fce7 	bl	80047f8 <LOGGER_SendFormatted>
        return true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e013      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000e2e:	4914      	ldr	r1, [pc, #80]	@ (8000e80 <is_response_ok+0xc4>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f019 f87c 	bl	8019f2e <strstr>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4911      	ldr	r1, [pc, #68]	@ (8000e84 <is_response_ok+0xc8>)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f003 fcd9 	bl	80047f8 <LOGGER_SendFormatted>
        return true;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e005      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	490e      	ldr	r1, [pc, #56]	@ (8000e88 <is_response_ok+0xcc>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f003 fcd2 	bl	80047f8 <LOGGER_SendFormatted>
    return false;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0801ac30 	.word	0x0801ac30
 8000e64:	0801ac60 	.word	0x0801ac60
 8000e68:	0801ac90 	.word	0x0801ac90
 8000e6c:	0801ac94 	.word	0x0801ac94
 8000e70:	0801acbc 	.word	0x0801acbc
 8000e74:	0801acc4 	.word	0x0801acc4
 8000e78:	0801acf8 	.word	0x0801acf8
 8000e7c:	0801acfc 	.word	0x0801acfc
 8000e80:	0801ad30 	.word	0x0801ad30
 8000e84:	0801ad38 	.word	0x0801ad38
 8000e88:	0801ad6c 	.word	0x0801ad6c

08000e8c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e9c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000e9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ea2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000eac:	4934      	ldr	r1, [pc, #208]	@ (8000f80 <is_join_response_ok+0xf4>)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f003 fca2 	bl	80047f8 <LOGGER_SendFormatted>
        return false;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e05e      	b.n	8000f76 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000eb8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ebc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4930      	ldr	r1, [pc, #192]	@ (8000f84 <is_join_response_ok+0xf8>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f003 fc97 	bl	80047f8 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000eca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ece:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ed2:	f107 0008 	add.w	r0, r7, #8
 8000ed6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	f019 f814 	bl	8019f08 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000ee0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ee4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ef6:	e013      	b.n	8000f20 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ef8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b0d      	cmp	r3, #13
 8000f00:	d004      	beq.n	8000f0c <is_join_response_ok+0x80>
 8000f02:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b0a      	cmp	r3, #10
 8000f0a:	d104      	bne.n	8000f16 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
            break;
 8000f14:	e009      	b.n	8000f2a <is_join_response_ok+0x9e>
        }
        pos++;
 8000f16:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f20:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e6      	bne.n	8000ef8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4916      	ldr	r1, [pc, #88]	@ (8000f88 <is_join_response_ok+0xfc>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f96d 	bl	8000210 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000f44:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000f4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f50:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <is_join_response_ok+0x100>)
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f003 fc4d 	bl	80047f8 <LOGGER_SendFormatted>
 8000f5e:	e008      	b.n	8000f72 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000f60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f64:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4909      	ldr	r1, [pc, #36]	@ (8000f90 <is_join_response_ok+0x104>)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f003 fc43 	bl	80047f8 <LOGGER_SendFormatted>
    }
    
    return result;
 8000f72:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0801ad98 	.word	0x0801ad98
 8000f84:	0801add0 	.word	0x0801add0
 8000f88:	0801ae00 	.word	0x0801ae00
 8000f8c:	0801ae0c 	.word	0x0801ae0c
 8000f90:	0801ae3c 	.word	0x0801ae3c

08000f94 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000fa2:	491e      	ldr	r1, [pc, #120]	@ (800101c <ResponseHandler_ParseSendResponse+0x88>)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f003 fc27 	bl	80047f8 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e031      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	491b      	ldr	r1, [pc, #108]	@ (8001020 <ResponseHandler_ParseSendResponse+0x8c>)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f003 fc20 	bl	80047f8 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000fb8:	491a      	ldr	r1, [pc, #104]	@ (8001024 <ResponseHandler_ParseSendResponse+0x90>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f018 ffb7 	bl	8019f2e <strstr>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8000fc6:	4918      	ldr	r1, [pc, #96]	@ (8001028 <ResponseHandler_ParseSendResponse+0x94>)
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f003 fc15 	bl	80047f8 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01f      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000fd2:	4916      	ldr	r1, [pc, #88]	@ (800102c <ResponseHandler_ParseSendResponse+0x98>)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f018 ffaa 	bl	8019f2e <strstr>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000fe0:	4913      	ldr	r1, [pc, #76]	@ (8001030 <ResponseHandler_ParseSendResponse+0x9c>)
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f003 fc08 	bl	80047f8 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e012      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000fec:	4911      	ldr	r1, [pc, #68]	@ (8001034 <ResponseHandler_ParseSendResponse+0xa0>)
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff f90e 	bl	8000210 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000ffa:	490f      	ldr	r1, [pc, #60]	@ (8001038 <ResponseHandler_ParseSendResponse+0xa4>)
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f003 fbfb 	bl	80047f8 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001002:	2302      	movs	r3, #2
 8001004:	e005      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <ResponseHandler_ParseSendResponse+0xa8>)
 800100a:	2000      	movs	r0, #0
 800100c:	f003 fbf4 	bl	80047f8 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001010:	2303      	movs	r3, #3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0801ae68 	.word	0x0801ae68
 8001020:	0801ae9c 	.word	0x0801ae9c
 8001024:	0801aecc 	.word	0x0801aecc
 8001028:	0801aee4 	.word	0x0801aee4
 800102c:	0801af14 	.word	0x0801af14
 8001030:	0801af30 	.word	0x0801af30
 8001034:	0801af64 	.word	0x0801af64
 8001038:	0801af6c 	.word	0x0801af6c
 800103c:	0801af98 	.word	0x0801af98

08001040 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
static uint32_t _get_current_timestamp(void);

int SDStorage_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 (즉시 마운트로 변경)
    FRESULT mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	491f      	ldr	r1, [pc, #124]	@ (80010c8 <SDStorage_Init+0x88>)
 800104a:	4820      	ldr	r0, [pc, #128]	@ (80010cc <SDStorage_Init+0x8c>)
 800104c:	f014 fc98 	bl	8015980 <f_mount>
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
    if (mount_result != FR_OK) {
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d008      	beq.n	800106c <SDStorage_Init+0x2c>
        LOG_ERROR("[SDStorage] f_mount failed: %d", mount_result);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	461a      	mov	r2, r3
 800105e:	491c      	ldr	r1, [pc, #112]	@ (80010d0 <SDStorage_Init+0x90>)
 8001060:	2003      	movs	r0, #3
 8001062:	f003 fbc9 	bl	80047f8 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e028      	b.n	80010be <SDStorage_Init+0x7e>
    }
    
    LOG_INFO("[SDStorage] f_mount successful");
 800106c:	4919      	ldr	r1, [pc, #100]	@ (80010d4 <SDStorage_Init+0x94>)
 800106e:	2001      	movs	r0, #1
 8001070:	f003 fbc2 	bl	80047f8 <LOGGER_SendFormatted>
    
    // SD 카드 상태 확인 생략 (f_getfree는 FreeRTOS 환경에서 시스템 멈춤 유발)
    // 실제 파일 작업 시에 오류로 SD 상태 확인
    LOG_INFO("[SDStorage] Skipping capacity check - will verify during file operations");
 8001074:	4918      	ldr	r1, [pc, #96]	@ (80010d8 <SDStorage_Init+0x98>)
 8001076:	2001      	movs	r0, #1
 8001078:	f003 fbbe 	bl	80047f8 <LOGGER_SendFormatted>
    // PC/테스트 환경: 시뮬레이션
    // 실제로는 파일 시스템이 준비되었다고 가정
#endif

    // 로그 디렉토리 생성
    LOG_INFO("[SDStorage] Creating log directory...");
 800107c:	4917      	ldr	r1, [pc, #92]	@ (80010dc <SDStorage_Init+0x9c>)
 800107e:	2001      	movs	r0, #1
 8001080:	f003 fbba 	bl	80047f8 <LOGGER_SendFormatted>
    if (_create_log_directory() != SDSTORAGE_OK) {
 8001084:	f000 f8f0 	bl	8001268 <_create_log_directory>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <SDStorage_Init+0x5c>
        LOG_ERROR("[SDStorage] Failed to create log directory");
 800108e:	4914      	ldr	r1, [pc, #80]	@ (80010e0 <SDStorage_Init+0xa0>)
 8001090:	2003      	movs	r0, #3
 8001092:	f003 fbb1 	bl	80047f8 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e010      	b.n	80010be <SDStorage_Init+0x7e>
    }
    
    g_sd_ready = true;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <SDStorage_Init+0xa4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <SDStorage_Init+0xa8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 80010a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ac:	2100      	movs	r1, #0
 80010ae:	480f      	ldr	r0, [pc, #60]	@ (80010ec <SDStorage_Init+0xac>)
 80010b0:	f018 ff22 	bl	8019ef8 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 80010b4:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <SDStorage_Init+0xb0>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f003 fb9e 	bl	80047f8 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20001588 	.word	0x20001588
 80010cc:	2000158c 	.word	0x2000158c
 80010d0:	0801afc8 	.word	0x0801afc8
 80010d4:	0801afe8 	.word	0x0801afe8
 80010d8:	0801b008 	.word	0x0801b008
 80010dc:	0801b054 	.word	0x0801b054
 80010e0:	0801b07c 	.word	0x0801b07c
 80010e4:	20000226 	.word	0x20000226
 80010e8:	20000328 	.word	0x20000328
 80010ec:	20000228 	.word	0x20000228
 80010f0:	0801b0a8 	.word	0x0801b0a8

080010f4 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 80010fe:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <SDStorage_WriteLog+0xc4>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f083 0301 	eor.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 800110c:	f06f 0301 	mvn.w	r3, #1
 8001110:	e04e      	b.n	80011b0 <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <SDStorage_WriteLog+0x2a>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 800111e:	f06f 0304 	mvn.w	r3, #4
 8001122:	e045      	b.n	80011b0 <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001124:	4b25      	ldr	r3, [pc, #148]	@ (80011bc <SDStorage_WriteLog+0xc8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <SDStorage_WriteLog+0xcc>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001138:	d907      	bls.n	800114a <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 800113a:	f000 f853 	bl	80011e4 <SDStorage_CreateNewLogFile>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001144:	f06f 0302 	mvn.w	r3, #2
 8001148:	e032      	b.n	80011b0 <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <SDStorage_WriteLog+0xd0>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	f083 0301 	eor.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00d      	beq.n	8001174 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 8001158:	2232      	movs	r2, #50	@ 0x32
 800115a:	4918      	ldr	r1, [pc, #96]	@ (80011bc <SDStorage_WriteLog+0xc8>)
 800115c:	481a      	ldr	r0, [pc, #104]	@ (80011c8 <SDStorage_WriteLog+0xd4>)
 800115e:	f014 fc73 	bl	8015a48 <f_open>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 8001168:	f06f 0302 	mvn.w	r3, #2
 800116c:	e020      	b.n	80011b0 <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <SDStorage_WriteLog+0xd0>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <SDStorage_WriteLog+0xd4>)
 800117e:	f014 fe24 	bl	8015dca <f_write>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 8001188:	f06f 0302 	mvn.w	r3, #2
 800118c:	e010      	b.n	80011b0 <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d002      	beq.n	800119c <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 8001196:	f06f 0303 	mvn.w	r3, #3
 800119a:	e009      	b.n	80011b0 <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <SDStorage_WriteLog+0xd4>)
 800119e:	f014 ffb8 	bl	8016112 <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <SDStorage_WriteLog+0xcc>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <SDStorage_WriteLog+0xcc>)
 80011ac:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000226 	.word	0x20000226
 80011bc:	20000228 	.word	0x20000228
 80011c0:	20000328 	.word	0x20000328
 80011c4:	2000055c 	.word	0x2000055c
 80011c8:	2000032c 	.word	0x2000032c

080011cc <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    return g_sd_ready;
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <SDStorage_IsReady+0x14>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000226 	.word	0x20000226

080011e4 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <SDStorage_CreateNewLogFile+0x70>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <SDStorage_CreateNewLogFile+0x18>
        return SDSTORAGE_NOT_READY;
 80011f6:	f06f 0301 	mvn.w	r3, #1
 80011fa:	e029      	b.n	8001250 <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <SDStorage_CreateNewLogFile+0x74>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <SDStorage_CreateNewLogFile+0x2c>
        f_close(&g_log_file);
 8001204:	4815      	ldr	r0, [pc, #84]	@ (800125c <SDStorage_CreateNewLogFile+0x78>)
 8001206:	f015 f80d 	bl	8016224 <f_close>
        g_file_open = false;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <SDStorage_CreateNewLogFile+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001210:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001214:	4812      	ldr	r0, [pc, #72]	@ (8001260 <SDStorage_CreateNewLogFile+0x7c>)
 8001216:	f000 f831 	bl	800127c <_generate_log_filename>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <SDStorage_CreateNewLogFile+0x42>
        return SDSTORAGE_ERROR;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	e014      	b.n	8001250 <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 파일 생성 확인
#ifdef STM32F746xx
    if (f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE) != FR_OK) {
 8001226:	2206      	movs	r2, #6
 8001228:	490d      	ldr	r1, [pc, #52]	@ (8001260 <SDStorage_CreateNewLogFile+0x7c>)
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <SDStorage_CreateNewLogFile+0x78>)
 800122c:	f014 fc0c 	bl	8015a48 <f_open>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <SDStorage_CreateNewLogFile+0x58>
        return SDSTORAGE_FILE_ERROR;
 8001236:	f06f 0302 	mvn.w	r3, #2
 800123a:	e009      	b.n	8001250 <SDStorage_CreateNewLogFile+0x6c>
    }
    f_close(&g_log_file);
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <SDStorage_CreateNewLogFile+0x78>)
 800123e:	f014 fff1 	bl	8016224 <f_close>
    g_file_open = false;
 8001242:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <SDStorage_CreateNewLogFile+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    // 실제 파일 생성 없이 성공으로 처리
#endif
    
    g_current_log_size = 0;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <SDStorage_CreateNewLogFile+0x80>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000226 	.word	0x20000226
 8001258:	2000055c 	.word	0x2000055c
 800125c:	2000032c 	.word	0x2000032c
 8001260:	20000228 	.word	0x20000228
 8001264:	20000328 	.word	0x20000328

08001268 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // STM32: FatFs 디렉토리 생성
    f_mkdir(SDSTORAGE_LOG_DIR);  // 이미 존재해도 에러 무시
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <_create_log_directory+0x10>)
 800126e:	f015 f808 	bl	8016282 <f_mkdir>
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    // 실제로는 디렉토리 생성 시뮬레이션
#endif
    return SDSTORAGE_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0801b0dc 	.word	0x0801b0dc

0800127c <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b095      	sub	sp, #84	@ 0x54
 8001280:	af08      	add	r7, sp, #32
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 8001286:	f000 f86f 	bl	8001368 <_get_current_timestamp>
 800128a:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 800128c:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8001290:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001298:	2301      	movs	r3, #1
 800129a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4826      	ldr	r0, [pc, #152]	@ (8001354 <_generate_log_filename+0xd8>)
 80012ba:	f00a f8f9 	bl	800b4b0 <HAL_RTC_GetTime>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11c      	bne.n	80012fe <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4821      	ldr	r0, [pc, #132]	@ (8001354 <_generate_log_filename+0xd8>)
 80012ce:	f00a f9d1 	bl	800b674 <HAL_RTC_GetDate>
 80012d2:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d112      	bne.n	80012fe <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80012de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 80012e0:	7a7b      	ldrb	r3, [r7, #9]
 80012e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 80012f2:	7b7b      	ldrb	r3, [r7, #13]
 80012f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    hour = 10;
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    int result = snprintf(filename, max_len, 
 80012fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001300:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001304:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001308:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 800130c:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 8001310:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 8001314:	4e10      	ldr	r6, [pc, #64]	@ (8001358 <_generate_log_filename+0xdc>)
 8001316:	9607      	str	r6, [sp, #28]
 8001318:	9506      	str	r5, [sp, #24]
 800131a:	9405      	str	r4, [sp, #20]
 800131c:	9004      	str	r0, [sp, #16]
 800131e:	9103      	str	r1, [sp, #12]
 8001320:	9202      	str	r2, [sp, #8]
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <_generate_log_filename+0xe0>)
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <_generate_log_filename+0xe4>)
 800132a:	4a0e      	ldr	r2, [pc, #56]	@ (8001364 <_generate_log_filename+0xe8>)
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f018 fd4e 	bl	8019dd0 <sniprintf>
 8001334:	6238      	str	r0, [r7, #32]
                         SDSTORAGE_LOG_DIR,
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db03      	blt.n	8001344 <_generate_log_filename+0xc8>
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d802      	bhi.n	800134a <_generate_log_filename+0xce>
        return SDSTORAGE_ERROR;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	e000      	b.n	800134c <_generate_log_filename+0xd0>
    }
    
    return SDSTORAGE_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3734      	adds	r7, #52	@ 0x34
 8001350:	46bd      	mov	sp, r7
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001354:	20000b38 	.word	0x20000b38
 8001358:	0801b10c 	.word	0x0801b10c
 800135c:	0801b114 	.word	0x0801b114
 8001360:	0801b0dc 	.word	0x0801b0dc
 8001364:	0801b0e8 	.word	0x0801b0e8

08001368 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 800136c:	f003 fe72 	bl	8005054 <HAL_GetTick>
 8001370:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}

08001376 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80013b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <vApplicationGetIdleTaskMemory+0x30>)
 80013be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2280      	movs	r2, #128	@ 0x80
 80013c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000560 	.word	0x20000560
 80013d8:	200005b8 	.word	0x200005b8

080013dc <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART DMA 콜백 함수들
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <HAL_UART_RxCpltCallback+0x38>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d10e      	bne.n	800140c <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_UART_RxCpltCallback+0x3c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_UART_RxCpltCallback+0x40>)
 80013f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fa:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_UART_RxCpltCallback+0x40>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	4906      	ldr	r1, [pc, #24]	@ (8001420 <HAL_UART_RxCpltCallback+0x44>)
 8001406:	2001      	movs	r0, #1
 8001408:	f003 f9f6 	bl	80047f8 <LOGGER_SendFormatted>
  }
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40011400 	.word	0x40011400
 8001418:	20001510 	.word	0x20001510
 800141c:	20001512 	.word	0x20001512
 8001420:	0801b120 	.word	0x0801b120

08001424 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d103      	bne.n	800143e <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8001436:	4905      	ldr	r1, [pc, #20]	@ (800144c <HAL_UART_RxHalfCpltCallback+0x28>)
 8001438:	2002      	movs	r0, #2
 800143a:	f003 f9dd 	bl	80047f8 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40011400 	.word	0x40011400
 800144c:	0801b158 	.word	0x0801b158

08001450 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a3c      	ldr	r2, [pc, #240]	@ (8001550 <HAL_UART_ErrorCallback+0x100>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d171      	bne.n	8001546 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8001462:	4b3c      	ldr	r3, [pc, #240]	@ (8001554 <HAL_UART_ErrorCallback+0x104>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8001468:	493b      	ldr	r1, [pc, #236]	@ (8001558 <HAL_UART_ErrorCallback+0x108>)
 800146a:	2002      	movs	r0, #2
 800146c:	f003 f9c4 	bl	80047f8 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b08      	cmp	r3, #8
 800147c:	d107      	bne.n	800148e <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2208      	movs	r2, #8
 8001484:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8001486:	4935      	ldr	r1, [pc, #212]	@ (800155c <HAL_UART_ErrorCallback+0x10c>)
 8001488:	2002      	movs	r0, #2
 800148a:	f003 f9b5 	bl	80047f8 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b04      	cmp	r3, #4
 800149a:	d107      	bne.n	80014ac <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2204      	movs	r2, #4
 80014a2:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80014a4:	492e      	ldr	r1, [pc, #184]	@ (8001560 <HAL_UART_ErrorCallback+0x110>)
 80014a6:	2002      	movs	r0, #2
 80014a8:	f003 f9a6 	bl	80047f8 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d107      	bne.n	80014ca <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80014c2:	4928      	ldr	r1, [pc, #160]	@ (8001564 <HAL_UART_ErrorCallback+0x114>)
 80014c4:	2002      	movs	r0, #2
 80014c6:	f003 f997 	bl	80047f8 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 80014e0:	4921      	ldr	r1, [pc, #132]	@ (8001568 <HAL_UART_ErrorCallback+0x118>)
 80014e2:	2002      	movs	r0, #2
 80014e4:	f003 f988 	bl	80047f8 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f00c ffc8 	bl	800e47e <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2220      	movs	r2, #32
 80014f2:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001500:	2b00      	cmp	r3, #0
 8001502:	d004      	beq.n	800150e <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800150e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001512:	2100      	movs	r1, #0
 8001514:	4815      	ldr	r0, [pc, #84]	@ (800156c <HAL_UART_ErrorCallback+0x11c>)
 8001516:	f018 fcef 	bl	8019ef8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800151a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800151e:	4913      	ldr	r1, [pc, #76]	@ (800156c <HAL_UART_ErrorCallback+0x11c>)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f00c ff68 	bl	800e3f6 <HAL_UART_Receive_DMA>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8001530:	490f      	ldr	r1, [pc, #60]	@ (8001570 <HAL_UART_ErrorCallback+0x120>)
 8001532:	2001      	movs	r0, #1
 8001534:	f003 f960 	bl	80047f8 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8001538:	e005      	b.n	8001546 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	461a      	mov	r2, r3
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <HAL_UART_ErrorCallback+0x124>)
 8001540:	2003      	movs	r0, #3
 8001542:	f003 f959 	bl	80047f8 <LOGGER_SendFormatted>
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40011400 	.word	0x40011400
 8001554:	20001511 	.word	0x20001511
 8001558:	0801b1a4 	.word	0x0801b1a4
 800155c:	0801b1d0 	.word	0x0801b1d0
 8001560:	0801b1ec 	.word	0x0801b1ec
 8001564:	0801b208 	.word	0x0801b208
 8001568:	0801b224 	.word	0x0801b224
 800156c:	200010a8 	.word	0x200010a8
 8001570:	0801b240 	.word	0x0801b240
 8001574:	0801b274 	.word	0x0801b274

08001578 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3e      	ldr	r2, [pc, #248]	@ (8001680 <USER_UART_IDLECallback+0x108>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d175      	bne.n	8001676 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b08      	cmp	r3, #8
 800159a:	d103      	bne.n	80015a4 <USER_UART_IDLECallback+0x2c>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d103      	bne.n	80015ba <USER_UART_IDLECallback+0x42>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d103      	bne.n	80015d0 <USER_UART_IDLECallback+0x58>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d103      	bne.n	80015e6 <USER_UART_IDLECallback+0x6e>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 80015f0:	897b      	ldrh	r3, [r7, #10]
 80015f2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <USER_UART_IDLECallback+0x10c>)
 80015fa:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <USER_UART_IDLECallback+0x10c>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d033      	beq.n	800166e <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <USER_UART_IDLECallback+0x110>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <USER_UART_IDLECallback+0x10c>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	491b      	ldr	r1, [pc, #108]	@ (800168c <USER_UART_IDLECallback+0x114>)
 800161e:	2002      	movs	r0, #2
 8001620:	f003 f8ea 	bl	80047f8 <LOGGER_SendFormatted>
 8001624:	e007      	b.n	8001636 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <USER_UART_IDLECallback+0x10c>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4918      	ldr	r1, [pc, #96]	@ (8001690 <USER_UART_IDLECallback+0x118>)
 8001630:	2001      	movs	r0, #1
 8001632:	f003 f8e1 	bl	80047f8 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <USER_UART_IDLECallback+0x10c>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d912      	bls.n	8001666 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <USER_UART_IDLECallback+0x11c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <USER_UART_IDLECallback+0x11c>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	4618      	mov	r0, r3
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <USER_UART_IDLECallback+0x11c>)
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	461a      	mov	r2, r3
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <USER_UART_IDLECallback+0x11c>)
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	490e      	ldr	r1, [pc, #56]	@ (8001698 <USER_UART_IDLECallback+0x120>)
 8001660:	2000      	movs	r0, #0
 8001662:	f003 f8c9 	bl	80047f8 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f00c ff09 	bl	800e47e <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 800166c:	e003      	b.n	8001676 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 800166e:	490b      	ldr	r1, [pc, #44]	@ (800169c <USER_UART_IDLECallback+0x124>)
 8001670:	2000      	movs	r0, #0
 8001672:	f003 f8c1 	bl	80047f8 <LOGGER_SendFormatted>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40011400 	.word	0x40011400
 8001684:	20001512 	.word	0x20001512
 8001688:	20001510 	.word	0x20001510
 800168c:	0801b2ac 	.word	0x0801b2ac
 8001690:	0801b2ec 	.word	0x0801b2ec
 8001694:	200010a8 	.word	0x200010a8
 8001698:	0801b314 	.word	0x0801b314
 800169c:	0801b340 	.word	0x0801b340

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b08e      	sub	sp, #56	@ 0x38
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 80016a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001858 <main+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001858 <main+0x1b8>)
 80016ae:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b0:	f003 fcaf 	bl	8005012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b4:	f000 f8f4 	bl	80018a0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016b8:	f000 f964 	bl	8001984 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f001 f926 	bl	800290c <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 80016c0:	f001 fe0c 	bl	80032dc <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 80016c4:	f000 f990 	bl	80019e8 <MX_ADC3_Init>
  MX_CRC_Init();
 80016c8:	f000 f9e0 	bl	8001a8c <MX_CRC_Init>
  MX_DCMI_Init();
 80016cc:	f000 fa00 	bl	8001ad0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80016d0:	f000 fa32 	bl	8001b38 <MX_DMA2D_Init>
  MX_ETH_Init();
 80016d4:	f000 fa62 	bl	8001b9c <MX_ETH_Init>
  MX_FMC_Init();
 80016d8:	f001 f8c8 	bl	800286c <MX_FMC_Init>
  MX_I2C1_Init();
 80016dc:	f000 faac 	bl	8001c38 <MX_I2C1_Init>
  MX_I2C3_Init();
 80016e0:	f000 faea 	bl	8001cb8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80016e4:	f000 fb28 	bl	8001d38 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80016e8:	f000 fba8 	bl	8001e3c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80016ec:	f000 fbd2 	bl	8001e94 <MX_RTC_Init>
  MX_SAI2_Init();
 80016f0:	f000 fc74 	bl	8001fdc <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80016f4:	f000 fd1a 	bl	800212c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80016f8:	f000 fd3e 	bl	8002178 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80016fc:	f000 fd6c 	bl	80021d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001700:	f000 fda8 	bl	8002254 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001704:	f000 fe52 	bl	80023ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001708:	f000 fec6 	bl	8002498 <MX_TIM3_Init>
  MX_TIM5_Init();
 800170c:	f000 ff3c 	bl	8002588 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001710:	f000 ffb2 	bl	8002678 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001714:	f001 f804 	bl	8002720 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001718:	f001 f848 	bl	80027ac <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800171c:	f001 f876 	bl	800280c <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001720:	4b4e      	ldr	r3, [pc, #312]	@ (800185c <main+0x1bc>)
 8001722:	4a4f      	ldr	r2, [pc, #316]	@ (8001860 <main+0x1c0>)
 8001724:	675a      	str	r2, [r3, #116]	@ 0x74
 8001726:	4b4e      	ldr	r3, [pc, #312]	@ (8001860 <main+0x1c0>)
 8001728:	4a4c      	ldr	r2, [pc, #304]	@ (800185c <main+0x1bc>)
 800172a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800172c:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <main+0x1bc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <main+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0210 	orr.w	r2, r2, #16
 800173a:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 800173c:	f00f ffc4 	bl	80116c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001740:	2100      	movs	r1, #0
 8001742:	4848      	ldr	r0, [pc, #288]	@ (8001864 <main+0x1c4>)
 8001744:	f002 fffc 	bl	8004740 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001748:	4b43      	ldr	r3, [pc, #268]	@ (8001858 <main+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4946      	ldr	r1, [pc, #280]	@ (8001868 <main+0x1c8>)
 8001750:	2001      	movs	r0, #1
 8001752:	f003 f851 	bl	80047f8 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001756:	4b45      	ldr	r3, [pc, #276]	@ (800186c <main+0x1cc>)
 8001758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <main+0xca>
 8001762:	4943      	ldr	r1, [pc, #268]	@ (8001870 <main+0x1d0>)
 8001764:	2002      	movs	r0, #2
 8001766:	f003 f847 	bl	80047f8 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 800176a:	4b40      	ldr	r3, [pc, #256]	@ (800186c <main+0x1cc>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800176e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <main+0xde>
 8001776:	493f      	ldr	r1, [pc, #252]	@ (8001874 <main+0x1d4>)
 8001778:	2002      	movs	r0, #2
 800177a:	f003 f83d 	bl	80047f8 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 800177e:	4b3b      	ldr	r3, [pc, #236]	@ (800186c <main+0x1cc>)
 8001780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <main+0xf2>
 800178a:	493b      	ldr	r1, [pc, #236]	@ (8001878 <main+0x1d8>)
 800178c:	2002      	movs	r0, #2
 800178e:	f003 f833 	bl	80047f8 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001792:	4b36      	ldr	r3, [pc, #216]	@ (800186c <main+0x1cc>)
 8001794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <main+0x106>
 800179e:	4937      	ldr	r1, [pc, #220]	@ (800187c <main+0x1dc>)
 80017a0:	2002      	movs	r0, #2
 80017a2:	f003 f829 	bl	80047f8 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <main+0x1cc>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <main+0x11a>
 80017b2:	4933      	ldr	r1, [pc, #204]	@ (8001880 <main+0x1e0>)
 80017b4:	2002      	movs	r0, #2
 80017b6:	f003 f81f 	bl	80047f8 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80017ba:	4b2c      	ldr	r3, [pc, #176]	@ (800186c <main+0x1cc>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <main+0x12e>
 80017c6:	492f      	ldr	r1, [pc, #188]	@ (8001884 <main+0x1e4>)
 80017c8:	2002      	movs	r0, #2
 80017ca:	f003 f815 	bl	80047f8 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 80017ce:	4b27      	ldr	r3, [pc, #156]	@ (800186c <main+0x1cc>)
 80017d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da03      	bge.n	80017de <main+0x13e>
 80017d6:	492c      	ldr	r1, [pc, #176]	@ (8001888 <main+0x1e8>)
 80017d8:	2002      	movs	r0, #2
 80017da:	f003 f80d 	bl	80047f8 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80017de:	4b23      	ldr	r3, [pc, #140]	@ (800186c <main+0x1cc>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e2:	4a22      	ldr	r2, [pc, #136]	@ (800186c <main+0x1cc>)
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e8:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // SD 카드 하드웨어 초기화 완료 - SDStorage 모듈에서 파일시스템 처리
  LOG_INFO("SD hardware ready - file system initialization delegated to SDStorage module");
 80017ea:	4928      	ldr	r1, [pc, #160]	@ (800188c <main+0x1ec>)
 80017ec:	2001      	movs	r0, #1
 80017ee:	f003 f803 	bl	80047f8 <LOGGER_SendFormatted>
  
  // UART6 DMA 초기화 (UART 초기화 후)
  MX_USART6_DMA_Init();
 80017f2:	f001 fd99 	bl	8003328 <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <main+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b17      	ldr	r3, [pc, #92]	@ (800185c <main+0x1bc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0210 	orr.w	r2, r2, #16
 8001804:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001806:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <main+0x1f0>)
 8001808:	f107 041c 	add.w	r4, r7, #28
 800180c:	461d      	mov	r5, r3
 800180e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001812:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f014 ff31 	bl	8016688 <osThreadCreate>
 8001826:	4603      	mov	r3, r0
 8001828:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <main+0x1f4>)
 800182a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <main+0x1f8>)
 800182e:	463c      	mov	r4, r7
 8001830:	461d      	mov	r5, r3
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800183a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800183e:	463b      	mov	r3, r7
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f014 ff20 	bl	8016688 <osThreadCreate>
 8001848:	4603      	mov	r3, r0
 800184a:	4a14      	ldr	r2, [pc, #80]	@ (800189c <main+0x1fc>)
 800184c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800184e:	f014 fef8 	bl	8016642 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001852:	bf00      	nop
 8001854:	e7fd      	b.n	8001852 <main+0x1b2>
 8001856:	bf00      	nop
 8001858:	20001514 	.word	0x20001514
 800185c:	20000fe4 	.word	0x20000fe4
 8001860:	200014b0 	.word	0x200014b0
 8001864:	0801b360 	.word	0x0801b360
 8001868:	0801b368 	.word	0x0801b368
 800186c:	40023800 	.word	0x40023800
 8001870:	0801b38c 	.word	0x0801b38c
 8001874:	0801b3a4 	.word	0x0801b3a4
 8001878:	0801b3bc 	.word	0x0801b3bc
 800187c:	0801b3d4 	.word	0x0801b3d4
 8001880:	0801b3e4 	.word	0x0801b3e4
 8001884:	0801b3fc 	.word	0x0801b3fc
 8001888:	0801b41c 	.word	0x0801b41c
 800188c:	0801b434 	.word	0x0801b434
 8001890:	0801b490 	.word	0x0801b490
 8001894:	200010a0 	.word	0x200010a0
 8001898:	0801b4b8 	.word	0x0801b4b8
 800189c:	200010a4 	.word	0x200010a4

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	@ 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2230      	movs	r2, #48	@ 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f018 fb22 	bl	8019ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018c4:	f008 f9ca 	bl	8009c5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	4b2c      	ldr	r3, [pc, #176]	@ (800197c <SystemClock_Config+0xdc>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	4a2b      	ldr	r2, [pc, #172]	@ (800197c <SystemClock_Config+0xdc>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d4:	4b29      	ldr	r3, [pc, #164]	@ (800197c <SystemClock_Config+0xdc>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <SystemClock_Config+0xe0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <SystemClock_Config+0xe0>)
 80018e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <SystemClock_Config+0xe0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018f8:	2309      	movs	r3, #9
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001902:	2301      	movs	r3, #1
 8001904:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001906:	2302      	movs	r3, #2
 8001908:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001910:	2319      	movs	r3, #25
 8001912:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001914:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001918:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191a:	2302      	movs	r3, #2
 800191c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800191e:	2309      	movs	r3, #9
 8001920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	4618      	mov	r0, r3
 8001928:	f008 faba 	bl	8009ea0 <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001932:	f001 fccd 	bl	80032d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001936:	f008 f9a1 	bl	8009c7c <HAL_PWREx_EnableOverDrive>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001940:	f001 fcc6 	bl	80032d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
 8001946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001950:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2106      	movs	r1, #6
 8001962:	4618      	mov	r0, r3
 8001964:	f008 fd40 	bl	800a3e8 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800196e:	f001 fcaf 	bl	80032d0 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	@ 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000

08001984 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0a2      	sub	sp, #136	@ 0x88
 8001988:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2284      	movs	r2, #132	@ 0x84
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f018 fab1 	bl	8019ef8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <PeriphCommonClock_Config+0x60>)
 8001998:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800199a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800199e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80019a0:	2305      	movs	r3, #5
 80019a2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80019a8:	2303      	movs	r3, #3
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80019b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80019b6:	2300      	movs	r3, #0
 80019b8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80019ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80019be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4618      	mov	r0, r3
 80019cc:	f008 ff24 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80019d6:	f001 fc7b 	bl	80032d0 <Error_Handler>
  }
}
 80019da:	bf00      	nop
 80019dc:	3788      	adds	r7, #136	@ 0x88
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	00b00008 	.word	0x00b00008

080019e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <MX_ADC3_Init+0x98>)
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <MX_ADC3_Init+0x9c>)
 80019fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a06:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a22:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <MX_ADC3_Init+0xa0>)
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a48:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a4a:	f003 fb33 	bl	80050b4 <HAL_ADC_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001a54:	f001 fc3c 	bl	80032d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_ADC3_Init+0x98>)
 8001a6a:	f003 fb67 	bl	800513c <HAL_ADC_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001a74:	f001 fc2c 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200007f0 	.word	0x200007f0
 8001a84:	40012200 	.word	0x40012200
 8001a88:	0f000001 	.word	0x0f000001

08001a8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <MX_CRC_Init+0x40>)
 8001a94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_CRC_Init+0x3c>)
 8001ab6:	f003 fe77 	bl	80057a8 <HAL_CRC_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001ac0:	f001 fc06 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000838 	.word	0x20000838
 8001acc:	40023000 	.word	0x40023000

08001ad0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <MX_DCMI_Init+0x64>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001af8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <MX_DCMI_Init+0x60>)
 8001b1e:	f003 ff35 	bl	800598c <HAL_DCMI_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001b28:	f001 fbd2 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000085c 	.word	0x2000085c
 8001b34:	50050000 	.word	0x50050000

08001b38 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b3e:	4a16      	ldr	r2, [pc, #88]	@ (8001b98 <MX_DMA2D_Init+0x60>)
 8001b40:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b6c:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b6e:	f004 fbfb 	bl	8006368 <HAL_DMA2D_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001b78:	f001 fbaa 	bl	80032d0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_DMA2D_Init+0x5c>)
 8001b80:	f004 fd4c 	bl	800661c <HAL_DMA2D_ConfigLayer>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001b8a:	f001 fba1 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200008ac 	.word	0x200008ac
 8001b98:	4002b000 	.word	0x4002b000

08001b9c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001ba2:	4a20      	ldr	r2, [pc, #128]	@ (8001c24 <MX_ETH_Init+0x88>)
 8001ba4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001bae:	2280      	movs	r2, #128	@ 0x80
 8001bb0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001bb4:	22e1      	movs	r2, #225	@ 0xe1
 8001bb6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001bcc:	4a16      	ldr	r2, [pc, #88]	@ (8001c28 <MX_ETH_Init+0x8c>)
 8001bce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001bd2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bd6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001bda:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <MX_ETH_Init+0x90>)
 8001bdc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001be0:	4a13      	ldr	r2, [pc, #76]	@ (8001c30 <MX_ETH_Init+0x94>)
 8001be2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001be6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001bea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <MX_ETH_Init+0x84>)
 8001bee:	f004 fda7 	bl	8006740 <HAL_ETH_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f001 fb6a 	bl	80032d0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001bfc:	2238      	movs	r2, #56	@ 0x38
 8001bfe:	2100      	movs	r1, #0
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <MX_ETH_Init+0x98>)
 8001c02:	f018 f979 	bl	8019ef8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <MX_ETH_Init+0x98>)
 8001c08:	2221      	movs	r2, #33	@ 0x21
 8001c0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MX_ETH_Init+0x98>)
 8001c0e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001c12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <MX_ETH_Init+0x98>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200008ec 	.word	0x200008ec
 8001c24:	40028000 	.word	0x40028000
 8001c28:	20001518 	.word	0x20001518
 8001c2c:	20000168 	.word	0x20000168
 8001c30:	200000c8 	.word	0x200000c8
 8001c34:	200007b8 	.word	0x200007b8

08001c38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <MX_I2C1_Init+0x78>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c44:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <MX_I2C1_Init+0x7c>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c72:	480e      	ldr	r0, [pc, #56]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c74:	f007 fbac 	bl	80093d0 <HAL_I2C_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c7e:	f001 fb27 	bl	80032d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4809      	ldr	r0, [pc, #36]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c86:	f007 fc3f 	bl	8009508 <HAL_I2CEx_ConfigAnalogFilter>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c90:	f001 fb1e 	bl	80032d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c94:	2100      	movs	r1, #0
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_I2C1_Init+0x74>)
 8001c98:	f007 fc81 	bl	800959e <HAL_I2CEx_ConfigDigitalFilter>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f001 fb15 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000099c 	.word	0x2000099c
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	00c0eaff 	.word	0x00c0eaff

08001cb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <MX_I2C3_Init+0x78>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <MX_I2C3_Init+0x7c>)
 8001cc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cf2:	480e      	ldr	r0, [pc, #56]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001cf4:	f007 fb6c 	bl	80093d0 <HAL_I2C_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001cfe:	f001 fae7 	bl	80032d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4809      	ldr	r0, [pc, #36]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001d06:	f007 fbff 	bl	8009508 <HAL_I2CEx_ConfigAnalogFilter>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f001 fade 	bl	80032d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_I2C3_Init+0x74>)
 8001d18:	f007 fc41 	bl	800959e <HAL_I2CEx_ConfigDigitalFilter>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f001 fad5 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200009f0 	.word	0x200009f0
 8001d30:	40005c00 	.word	0x40005c00
 8001d34:	00c0eaff 	.word	0x00c0eaff

08001d38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	@ 0x38
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2234      	movs	r2, #52	@ 0x34
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f018 f8d7 	bl	8019ef8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e38 <MX_LTDC_Init+0x100>)
 8001d4e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d50:	4b38      	ldr	r3, [pc, #224]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d56:	4b37      	ldr	r3, [pc, #220]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d5c:	4b35      	ldr	r3, [pc, #212]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d62:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001d68:	4b32      	ldr	r3, [pc, #200]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d6a:	2228      	movs	r2, #40	@ 0x28
 8001d6c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d70:	2209      	movs	r2, #9
 8001d72:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001d74:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d76:	2235      	movs	r2, #53	@ 0x35
 8001d78:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d7c:	220b      	movs	r2, #11
 8001d7e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d82:	f240 2215 	movw	r2, #533	@ 0x215
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001d88:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d8a:	f240 121b 	movw	r2, #283	@ 0x11b
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001d90:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d92:	f240 2235 	movw	r2, #565	@ 0x235
 8001d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001d98:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001d9a:	f240 121d 	movw	r2, #285	@ 0x11d
 8001d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001da0:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001da8:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001db0:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001db8:	481e      	ldr	r0, [pc, #120]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001dba:	f007 fc3c 	bl	8009636 <HAL_LTDC_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001dc4:	f001 fa84 	bl	80032d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001dcc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001dd0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001dd6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001dda:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001de0:	23ff      	movs	r3, #255	@ 0xff
 8001de2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001de8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001dee:	2307      	movs	r3, #7
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001df2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001df8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001dfe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001e02:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_LTDC_Init+0xfc>)
 8001e1e:	f007 fd69 	bl	80098f4 <HAL_LTDC_ConfigLayer>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001e28:	f001 fa52 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	@ 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000a44 	.word	0x20000a44
 8001e38:	40016800 	.word	0x40016800

08001e3c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e42:	4a13      	ldr	r2, [pc, #76]	@ (8001e90 <MX_QUADSPI_Init+0x54>)
 8001e44:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e54:	2210      	movs	r2, #16
 8001e56:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e5a:	2218      	movs	r2, #24
 8001e5c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e60:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001e64:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001e78:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <MX_QUADSPI_Init+0x50>)
 8001e7a:	f007 ff4f 	bl	8009d1c <HAL_QSPI_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001e84:	f001 fa24 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000aec 	.word	0x20000aec
 8001e90:	a0001000 	.word	0xa0001000

08001e94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b090      	sub	sp, #64	@ 0x40
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001eae:	463b      	mov	r3, r7
 8001eb0:	2228      	movs	r2, #40	@ 0x28
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f018 f81f 	bl	8019ef8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eba:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ebc:	4a46      	ldr	r2, [pc, #280]	@ (8001fd8 <MX_RTC_Init+0x144>)
 8001ebe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ec0:	4b44      	ldr	r3, [pc, #272]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ec6:	4b43      	ldr	r3, [pc, #268]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ec8:	227f      	movs	r2, #127	@ 0x7f
 8001eca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ecc:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ece:	22ff      	movs	r2, #255	@ 0xff
 8001ed0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ed2:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ede:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ee4:	483b      	ldr	r0, [pc, #236]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001ee6:	f009 f9c7 	bl	800b278 <HAL_RTC_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001ef0:	f001 f9ee 	bl	80032d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	482f      	ldr	r0, [pc, #188]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001f18:	f009 fa30 	bl	800b37c <HAL_RTC_SetTime>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001f22:	f001 f9d5 	bl	80032d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	4823      	ldr	r0, [pc, #140]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001f48:	f009 fb10 	bl	800b56c <HAL_RTC_SetDate>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001f52:	f001 f9bd 	bl	80032d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4811      	ldr	r0, [pc, #68]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001f8e:	f009 fbc1 	bl	800b714 <HAL_RTC_SetAlarm>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001f98:	f001 f99a 	bl	80032d0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001f9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480a      	ldr	r0, [pc, #40]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001faa:	f009 fbb3 	bl	800b714 <HAL_RTC_SetAlarm>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001fb4:	f001 f98c 	bl	80032d0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001fb8:	2202      	movs	r2, #2
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4805      	ldr	r0, [pc, #20]	@ (8001fd4 <MX_RTC_Init+0x140>)
 8001fbe:	f009 fd91 	bl	800bae4 <HAL_RTCEx_SetTimeStamp>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001fc8:	f001 f982 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	3740      	adds	r7, #64	@ 0x40
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000b38 	.word	0x20000b38
 8001fd8:	40002800 	.word	0x40002800

08001fdc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8001fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800211c <MX_SAI2_Init+0x140>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001fec:	4b4a      	ldr	r3, [pc, #296]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001ff2:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8001ff4:	2240      	movs	r2, #64	@ 0x40
 8001ff6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ff8:	4b47      	ldr	r3, [pc, #284]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001ffe:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002000:	2200      	movs	r2, #0
 8002002:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002004:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800200a:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002010:	4b41      	ldr	r3, [pc, #260]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002016:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800201c:	4b3e      	ldr	r3, [pc, #248]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800201e:	4a40      	ldr	r2, [pc, #256]	@ (8002120 <MX_SAI2_Init+0x144>)
 8002020:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002022:	4b3d      	ldr	r3, [pc, #244]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002028:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800202e:	4b3a      	ldr	r3, [pc, #232]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002034:	4b38      	ldr	r3, [pc, #224]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800203a:	4b37      	ldr	r3, [pc, #220]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800203c:	2208      	movs	r2, #8
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002040:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002042:	2201      	movs	r2, #1
 8002044:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002046:	4b34      	ldr	r3, [pc, #208]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002048:	2200      	movs	r2, #0
 800204a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800204c:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800204e:	2200      	movs	r2, #0
 8002050:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002052:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002054:	2200      	movs	r2, #0
 8002056:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002058:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800205e:	4b2e      	ldr	r3, [pc, #184]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002060:	2200      	movs	r2, #0
 8002062:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002064:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002066:	2201      	movs	r2, #1
 8002068:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800206a:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <MX_SAI2_Init+0x13c>)
 800206c:	2200      	movs	r2, #0
 800206e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002070:	4829      	ldr	r0, [pc, #164]	@ (8002118 <MX_SAI2_Init+0x13c>)
 8002072:	f009 fd9f 	bl	800bbb4 <HAL_SAI_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800207c:	f001 f928 	bl	80032d0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <MX_SAI2_Init+0x148>)
 8002082:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <MX_SAI2_Init+0x14c>)
 8002084:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002086:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <MX_SAI2_Init+0x148>)
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <MX_SAI2_Init+0x148>)
 800208e:	2203      	movs	r2, #3
 8002090:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002092:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <MX_SAI2_Init+0x148>)
 8002094:	2240      	movs	r2, #64	@ 0x40
 8002096:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002098:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <MX_SAI2_Init+0x148>)
 800209a:	2200      	movs	r2, #0
 800209c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80020a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80020c2:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80020c8:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020d0:	2208      	movs	r2, #8
 80020d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020dc:	2200      	movs	r2, #0
 80020de:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80020e0:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80020ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <MX_SAI2_Init+0x148>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <MX_SAI2_Init+0x148>)
 8002100:	2200      	movs	r2, #0
 8002102:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002104:	4807      	ldr	r0, [pc, #28]	@ (8002124 <MX_SAI2_Init+0x148>)
 8002106:	f009 fd55 	bl	800bbb4 <HAL_SAI_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002110:	f001 f8de 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000b58 	.word	0x20000b58
 800211c:	40015c04 	.word	0x40015c04
 8002120:	0002ee00 	.word	0x0002ee00
 8002124:	20000bdc 	.word	0x20000bdc
 8002128:	40015c24 	.word	0x40015c24

0800212c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <MX_SDMMC1_SD_Init+0x48>)
 8002134:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002148:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 800214a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800214e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002150:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800215c:	4804      	ldr	r0, [pc, #16]	@ (8002170 <MX_SDMMC1_SD_Init+0x44>)
 800215e:	f009 fedf 	bl	800bf20 <HAL_SD_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8002168:	f001 f8b2 	bl	80032d0 <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000c60 	.word	0x20000c60
 8002174:	40012c00 	.word	0x40012c00

08002178 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800217c:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 800217e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002182:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002196:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800219c:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80021c0:	4804      	ldr	r0, [pc, #16]	@ (80021d4 <MX_SPDIFRX_Init+0x5c>)
 80021c2:	f00a fd77 	bl	800ccb4 <HAL_SPDIFRX_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80021cc:	f001 f880 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000ce4 	.word	0x20000ce4

080021d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <MX_SPI2_Init+0x74>)
 80021de:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <MX_SPI2_Init+0x78>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <MX_SPI2_Init+0x74>)
 80021e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <MX_SPI2_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <MX_SPI2_Init+0x74>)
 80021f2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80021f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f8:	4b14      	ldr	r3, [pc, #80]	@ (800224c <MX_SPI2_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <MX_SPI2_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_SPI2_Init+0x74>)
 8002206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800220a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <MX_SPI2_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_SPI2_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <MX_SPI2_Init+0x74>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <MX_SPI2_Init+0x74>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_SPI2_Init+0x74>)
 8002226:	2207      	movs	r2, #7
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <MX_SPI2_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_SPI2_Init+0x74>)
 8002232:	2208      	movs	r2, #8
 8002234:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	@ (800224c <MX_SPI2_Init+0x74>)
 8002238:	f00a fd98 	bl	800cd6c <HAL_SPI_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002242:	f001 f845 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000d30 	.word	0x20000d30
 8002250:	40003800 	.word	0x40003800

08002254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b09a      	sub	sp, #104	@ 0x68
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002268:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002274:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	222c      	movs	r2, #44	@ 0x2c
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f017 fe32 	bl	8019ef8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002294:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <MX_TIM1_Init+0x150>)
 8002296:	4a44      	ldr	r2, [pc, #272]	@ (80023a8 <MX_TIM1_Init+0x154>)
 8002298:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800229a:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <MX_TIM1_Init+0x150>)
 800229c:	2200      	movs	r2, #0
 800229e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a0:	4b40      	ldr	r3, [pc, #256]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022a6:	4b3f      	ldr	r3, [pc, #252]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022b4:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ba:	4b3a      	ldr	r3, [pc, #232]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022c0:	4838      	ldr	r0, [pc, #224]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022c2:	f00a fdfe 	bl	800cec2 <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80022cc:	f001 f800 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022da:	4619      	mov	r1, r3
 80022dc:	4831      	ldr	r0, [pc, #196]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022de:	f00b f931 	bl	800d544 <HAL_TIM_ConfigClockSource>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80022e8:	f000 fff2 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ec:	482d      	ldr	r0, [pc, #180]	@ (80023a4 <MX_TIM1_Init+0x150>)
 80022ee:	f00a feb7 	bl	800d060 <HAL_TIM_PWM_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80022f8:	f000 ffea 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002308:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800230c:	4619      	mov	r1, r3
 800230e:	4825      	ldr	r0, [pc, #148]	@ (80023a4 <MX_TIM1_Init+0x150>)
 8002310:	f00b fda8 	bl	800de64 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800231a:	f000 ffd9 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800231e:	2360      	movs	r3, #96	@ 0x60
 8002320:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002326:	2300      	movs	r3, #0
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800232a:	2300      	movs	r3, #0
 800232c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800233a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800233e:	2200      	movs	r2, #0
 8002340:	4619      	mov	r1, r3
 8002342:	4818      	ldr	r0, [pc, #96]	@ (80023a4 <MX_TIM1_Init+0x150>)
 8002344:	f00a ffea 	bl	800d31c <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800234e:	f000 ffbf 	bl	80032d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800236a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002374:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4807      	ldr	r0, [pc, #28]	@ (80023a4 <MX_TIM1_Init+0x150>)
 8002388:	f00b fdfa 	bl	800df80 <HAL_TIMEx_ConfigBreakDeadTime>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002392:	f000 ff9d 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002396:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <MX_TIM1_Init+0x150>)
 8002398:	f001 fe02 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 800239c:	bf00      	nop
 800239e:	3768      	adds	r7, #104	@ 0x68
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000d94 	.word	0x20000d94
 80023a8:	40010000 	.word	0x40010000

080023ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	@ 0x38
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023cc:	463b      	mov	r3, r7
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	615a      	str	r2, [r3, #20]
 80023dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023de:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <MX_TIM2_Init+0xe8>)
 80023e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002494 <MX_TIM2_Init+0xe8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <MX_TIM2_Init+0xe8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023f2:	4b28      	ldr	r3, [pc, #160]	@ (8002494 <MX_TIM2_Init+0xe8>)
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <MX_TIM2_Init+0xe8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002406:	4823      	ldr	r0, [pc, #140]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002408:	f00a fd5b 	bl	800cec2 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002412:	f000 ff5d 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002420:	4619      	mov	r1, r3
 8002422:	481c      	ldr	r0, [pc, #112]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002424:	f00b f88e 	bl	800d544 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800242e:	f000 ff4f 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002432:	4818      	ldr	r0, [pc, #96]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002434:	f00a fe14 	bl	800d060 <HAL_TIM_PWM_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800243e:	f000 ff47 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	4810      	ldr	r0, [pc, #64]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002452:	f00b fd07 	bl	800de64 <HAL_TIMEx_MasterConfigSynchronization>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800245c:	f000 ff38 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002460:	2360      	movs	r3, #96	@ 0x60
 8002462:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002470:	463b      	mov	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	4619      	mov	r1, r3
 8002476:	4807      	ldr	r0, [pc, #28]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002478:	f00a ff50 	bl	800d31c <HAL_TIM_PWM_ConfigChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002482:	f000 ff25 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002486:	4803      	ldr	r0, [pc, #12]	@ (8002494 <MX_TIM2_Init+0xe8>)
 8002488:	f001 fd8a 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 800248c:	bf00      	nop
 800248e:	3738      	adds	r7, #56	@ 0x38
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000de0 	.word	0x20000de0

08002498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	@ 0x38
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <MX_TIM3_Init+0xec>)
 80024ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024dc:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e4:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ea:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024f0:	4823      	ldr	r0, [pc, #140]	@ (8002580 <MX_TIM3_Init+0xe8>)
 80024f2:	f00a fce6 	bl	800cec2 <HAL_TIM_Base_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80024fc:	f000 fee8 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002504:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800250a:	4619      	mov	r1, r3
 800250c:	481c      	ldr	r0, [pc, #112]	@ (8002580 <MX_TIM3_Init+0xe8>)
 800250e:	f00b f819 	bl	800d544 <HAL_TIM_ConfigClockSource>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002518:	f000 feda 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800251c:	4818      	ldr	r0, [pc, #96]	@ (8002580 <MX_TIM3_Init+0xe8>)
 800251e:	f00a fd9f 	bl	800d060 <HAL_TIM_PWM_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002528:	f000 fed2 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	4619      	mov	r1, r3
 800253a:	4811      	ldr	r0, [pc, #68]	@ (8002580 <MX_TIM3_Init+0xe8>)
 800253c:	f00b fc92 	bl	800de64 <HAL_TIMEx_MasterConfigSynchronization>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002546:	f000 fec3 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254a:	2360      	movs	r3, #96	@ 0x60
 800254c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800255a:	463b      	mov	r3, r7
 800255c:	2200      	movs	r2, #0
 800255e:	4619      	mov	r1, r3
 8002560:	4807      	ldr	r0, [pc, #28]	@ (8002580 <MX_TIM3_Init+0xe8>)
 8002562:	f00a fedb 	bl	800d31c <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800256c:	f000 feb0 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002570:	4803      	ldr	r0, [pc, #12]	@ (8002580 <MX_TIM3_Init+0xe8>)
 8002572:	f001 fd15 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8002576:	bf00      	nop
 8002578:	3738      	adds	r7, #56	@ 0x38
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000e2c 	.word	0x20000e2c
 8002584:	40000400 	.word	0x40000400

08002588 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	@ 0x38
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259c:	f107 031c 	add.w	r3, r7, #28
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a8:	463b      	mov	r3, r7
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	615a      	str	r2, [r3, #20]
 80025b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <MX_TIM5_Init+0xec>)
 80025be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025ce:	f04f 32ff 	mov.w	r2, #4294967295
 80025d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025e0:	4823      	ldr	r0, [pc, #140]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025e2:	f00a fc6e 	bl	800cec2 <HAL_TIM_Base_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80025ec:	f000 fe70 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025fa:	4619      	mov	r1, r3
 80025fc:	481c      	ldr	r0, [pc, #112]	@ (8002670 <MX_TIM5_Init+0xe8>)
 80025fe:	f00a ffa1 	bl	800d544 <HAL_TIM_ConfigClockSource>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002608:	f000 fe62 	bl	80032d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800260c:	4818      	ldr	r0, [pc, #96]	@ (8002670 <MX_TIM5_Init+0xe8>)
 800260e:	f00a fd27 	bl	800d060 <HAL_TIM_PWM_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002618:	f000 fe5a 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	4811      	ldr	r0, [pc, #68]	@ (8002670 <MX_TIM5_Init+0xe8>)
 800262c:	f00b fc1a 	bl	800de64 <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002636:	f000 fe4b 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263a:	2360      	movs	r3, #96	@ 0x60
 800263c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800264a:	463b      	mov	r3, r7
 800264c:	220c      	movs	r2, #12
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	@ (8002670 <MX_TIM5_Init+0xe8>)
 8002652:	f00a fe63 	bl	800d31c <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800265c:	f000 fe38 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002660:	4803      	ldr	r0, [pc, #12]	@ (8002670 <MX_TIM5_Init+0xe8>)
 8002662:	f001 fc9d 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8002666:	bf00      	nop
 8002668:	3738      	adds	r7, #56	@ 0x38
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000e78 	.word	0x20000e78
 8002674:	40000c00 	.word	0x40000c00

08002678 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <MX_TIM8_Init+0xa0>)
 8002698:	4a20      	ldr	r2, [pc, #128]	@ (800271c <MX_TIM8_Init+0xa4>)
 800269a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800269c:	4b1e      	ldr	r3, [pc, #120]	@ (8002718 <MX_TIM8_Init+0xa0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026b6:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026c2:	4815      	ldr	r0, [pc, #84]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026c4:	f00a fbfd 	bl	800cec2 <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80026ce:	f000 fdff 	bl	80032d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	480e      	ldr	r0, [pc, #56]	@ (8002718 <MX_TIM8_Init+0xa0>)
 80026e0:	f00a ff30 	bl	800d544 <HAL_TIM_ConfigClockSource>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80026ea:	f000 fdf1 	bl	80032d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4806      	ldr	r0, [pc, #24]	@ (8002718 <MX_TIM8_Init+0xa0>)
 8002700:	f00b fbb0 	bl	800de64 <HAL_TIMEx_MasterConfigSynchronization>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800270a:	f000 fde1 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800270e:	bf00      	nop
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000ec4 	.word	0x20000ec4
 800271c:	40010400 	.word	0x40010400

08002720 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MX_TIM12_Init+0x84>)
 800273a:	4a1b      	ldr	r2, [pc, #108]	@ (80027a8 <MX_TIM12_Init+0x88>)
 800273c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <MX_TIM12_Init+0x84>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002744:	4b17      	ldr	r3, [pc, #92]	@ (80027a4 <MX_TIM12_Init+0x84>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800274a:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <MX_TIM12_Init+0x84>)
 800274c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002750:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002752:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <MX_TIM12_Init+0x84>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <MX_TIM12_Init+0x84>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800275e:	4811      	ldr	r0, [pc, #68]	@ (80027a4 <MX_TIM12_Init+0x84>)
 8002760:	f00a fc7e 	bl	800d060 <HAL_TIM_PWM_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800276a:	f000 fdb1 	bl	80032d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276e:	2360      	movs	r3, #96	@ 0x60
 8002770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_TIM12_Init+0x84>)
 8002786:	f00a fdc9 	bl	800d31c <HAL_TIM_PWM_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002790:	f000 fd9e 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002794:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <MX_TIM12_Init+0x84>)
 8002796:	f001 fc03 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 800279a:	bf00      	nop
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000f10 	.word	0x20000f10
 80027a8:	40001800 	.word	0x40001800

080027ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027b2:	4a15      	ldr	r2, [pc, #84]	@ (8002808 <MX_USART1_UART_Init+0x5c>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <MX_USART1_UART_Init+0x58>)
 80027f0:	f00b fc62 	bl	800e0b8 <HAL_UART_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80027fa:	f000 fd69 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000f5c 	.word	0x20000f5c
 8002808:	40011000 	.word	0x40011000

0800280c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002810:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002812:	4a15      	ldr	r2, [pc, #84]	@ (8002868 <MX_USART6_UART_Init+0x5c>)
 8002814:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800281c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002832:	220c      	movs	r2, #12
 8002834:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002836:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800283c:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	@ (8002864 <MX_USART6_UART_Init+0x58>)
 8002850:	f00b fc32 	bl	800e0b8 <HAL_UART_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800285a:	f000 fd39 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000fe4 	.word	0x20000fe4
 8002868:	40011400 	.word	0x40011400

0800286c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
 8002880:	615a      	str	r2, [r3, #20]
 8002882:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <MX_FMC_Init+0x98>)
 8002886:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <MX_FMC_Init+0x9c>)
 8002888:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <MX_FMC_Init+0x98>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002890:	4b1c      	ldr	r3, [pc, #112]	@ (8002904 <MX_FMC_Init+0x98>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <MX_FMC_Init+0x98>)
 8002898:	2204      	movs	r2, #4
 800289a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800289c:	4b19      	ldr	r3, [pc, #100]	@ (8002904 <MX_FMC_Init+0x98>)
 800289e:	2210      	movs	r2, #16
 80028a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028a2:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <MX_FMC_Init+0x98>)
 80028a4:	2240      	movs	r2, #64	@ 0x40
 80028a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <MX_FMC_Init+0x98>)
 80028aa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <MX_FMC_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <MX_FMC_Init+0x98>)
 80028b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <MX_FMC_Init+0x98>)
 80028c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <MX_FMC_Init+0x98>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80028d0:	2307      	movs	r3, #7
 80028d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80028d4:	2304      	movs	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80028d8:	2307      	movs	r3, #7
 80028da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80028dc:	2303      	movs	r3, #3
 80028de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4805      	ldr	r0, [pc, #20]	@ (8002904 <MX_FMC_Init+0x98>)
 80028ee:	f00a f9ad 	bl	800cc4c <HAL_SDRAM_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80028f8:	f000 fcea 	bl	80032d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80028fc:	bf00      	nop
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000106c 	.word	0x2000106c
 8002908:	a0000140 	.word	0xa0000140

0800290c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b090      	sub	sp, #64	@ 0x40
 8002910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002922:	4bb0      	ldr	r3, [pc, #704]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4aaf      	ldr	r2, [pc, #700]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002928:	f043 0310 	orr.w	r3, r3, #16
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4bad      	ldr	r3, [pc, #692]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800293a:	4baa      	ldr	r3, [pc, #680]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4aa9      	ldr	r2, [pc, #676]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4ba7      	ldr	r3, [pc, #668]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002952:	4ba4      	ldr	r3, [pc, #656]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4aa3      	ldr	r2, [pc, #652]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4ba1      	ldr	r3, [pc, #644]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800296a:	4b9e      	ldr	r3, [pc, #632]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a9d      	ldr	r2, [pc, #628]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b9b      	ldr	r3, [pc, #620]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002982:	4b98      	ldr	r3, [pc, #608]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a97      	ldr	r2, [pc, #604]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b95      	ldr	r3, [pc, #596]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b92      	ldr	r3, [pc, #584]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a91      	ldr	r2, [pc, #580]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b8f      	ldr	r3, [pc, #572]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029b2:	4b8c      	ldr	r3, [pc, #560]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4a8b      	ldr	r2, [pc, #556]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4b89      	ldr	r3, [pc, #548]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029ca:	4b86      	ldr	r3, [pc, #536]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a85      	ldr	r2, [pc, #532]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b83      	ldr	r3, [pc, #524]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80029e2:	4b80      	ldr	r3, [pc, #512]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a7f      	ldr	r2, [pc, #508]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b7d      	ldr	r3, [pc, #500]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029fa:	4b7a      	ldr	r3, [pc, #488]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	4a79      	ldr	r2, [pc, #484]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a06:	4b77      	ldr	r3, [pc, #476]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a12:	4b74      	ldr	r3, [pc, #464]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4a73      	ldr	r2, [pc, #460]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1e:	4b71      	ldr	r3, [pc, #452]	@ (8002be4 <MX_GPIO_Init+0x2d8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	486e      	ldr	r0, [pc, #440]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002a30:	f004 fb80 	bl	8007134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002a34:	2200      	movs	r2, #0
 8002a36:	210c      	movs	r1, #12
 8002a38:	486c      	ldr	r0, [pc, #432]	@ (8002bec <MX_GPIO_Init+0x2e0>)
 8002a3a:	f004 fb7b 	bl	8007134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2108      	movs	r1, #8
 8002a42:	486b      	ldr	r0, [pc, #428]	@ (8002bf0 <MX_GPIO_Init+0x2e4>)
 8002a44:	f004 fb76 	bl	8007134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a4e:	4867      	ldr	r0, [pc, #412]	@ (8002bec <MX_GPIO_Init+0x2e0>)
 8002a50:	f004 fb70 	bl	8007134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a5a:	4866      	ldr	r0, [pc, #408]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002a5c:	f004 fb6a 	bl	8007134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	21c8      	movs	r1, #200	@ 0xc8
 8002a64:	4864      	ldr	r0, [pc, #400]	@ (8002bf8 <MX_GPIO_Init+0x2ec>)
 8002a66:	f004 fb65 	bl	8007134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	485f      	ldr	r0, [pc, #380]	@ (8002bfc <MX_GPIO_Init+0x2f0>)
 8002a7e:	f004 f9ad 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002a82:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002a94:	230a      	movs	r3, #10
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4858      	ldr	r0, [pc, #352]	@ (8002c00 <MX_GPIO_Init+0x2f4>)
 8002aa0:	f004 f99c 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4852      	ldr	r0, [pc, #328]	@ (8002c04 <MX_GPIO_Init+0x2f8>)
 8002aba:	f004 f98f 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002abe:	2340      	movs	r3, #64	@ 0x40
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ac2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4845      	ldr	r0, [pc, #276]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002ad4:	f004 f982 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	2301      	movs	r3, #1
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aec:	4619      	mov	r1, r3
 8002aee:	483e      	ldr	r0, [pc, #248]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002af0:	f004 f974 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002af4:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4837      	ldr	r0, [pc, #220]	@ (8002bec <MX_GPIO_Init+0x2e0>)
 8002b0e:	f004 f965 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b24:	4619      	mov	r1, r3
 8002b26:	4838      	ldr	r0, [pc, #224]	@ (8002c08 <MX_GPIO_Init+0x2fc>)
 8002b28:	f004 f958 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b30:	2301      	movs	r3, #1
 8002b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b40:	4619      	mov	r1, r3
 8002b42:	482b      	ldr	r0, [pc, #172]	@ (8002bf0 <MX_GPIO_Init+0x2e4>)
 8002b44:	f004 f94a 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b48:	2310      	movs	r3, #16
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4823      	ldr	r0, [pc, #140]	@ (8002be8 <MX_GPIO_Init+0x2dc>)
 8002b5c:	f004 f93e 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002b60:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b66:	2300      	movs	r3, #0
 8002b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b72:	4619      	mov	r1, r3
 8002b74:	481f      	ldr	r0, [pc, #124]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002b76:	f004 f931 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b90:	4619      	mov	r1, r3
 8002b92:	4818      	ldr	r0, [pc, #96]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002b94:	f004 f922 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b9e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bac:	4619      	mov	r1, r3
 8002bae:	480f      	ldr	r0, [pc, #60]	@ (8002bec <MX_GPIO_Init+0x2e0>)
 8002bb0:	f004 f914 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002bc4:	230a      	movs	r3, #10
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4809      	ldr	r0, [pc, #36]	@ (8002bf4 <MX_GPIO_Init+0x2e8>)
 8002bd0:	f004 f904 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002bd4:	23c8      	movs	r3, #200	@ 0xc8
 8002bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002be0:	e014      	b.n	8002c0c <MX_GPIO_Init+0x300>
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40022800 	.word	0x40022800
 8002bf4:	40021c00 	.word	0x40021c00
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c14:	4619      	mov	r1, r3
 8002c16:	4819      	ldr	r0, [pc, #100]	@ (8002c7c <MX_GPIO_Init+0x370>)
 8002c18:	f004 f8e0 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c2c:	230a      	movs	r3, #10
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c34:	4619      	mov	r1, r3
 8002c36:	4812      	ldr	r0, [pc, #72]	@ (8002c80 <MX_GPIO_Init+0x374>)
 8002c38:	f004 f8d0 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c40:	2300      	movs	r3, #0
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	480b      	ldr	r0, [pc, #44]	@ (8002c7c <MX_GPIO_Init+0x370>)
 8002c50:	f004 f8c4 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002c54:	2328      	movs	r3, #40	@ 0x28
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c64:	230a      	movs	r3, #10
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_GPIO_Init+0x378>)
 8002c70:	f004 f8b4 	bl	8006ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c74:	bf00      	nop
 8002c76:	3740      	adds	r7, #64	@ 0x40
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	40020800 	.word	0x40020800
 8002c84:	40020000 	.word	0x40020000

08002c88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b09a      	sub	sp, #104	@ 0x68
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002c90:	f016 fce8 	bl	8019664 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화 (TDD 검증된 SDStorage 사용)
  LOG_INFO("🔄 Initializing SD card storage...");
 8002c94:	499b      	ldr	r1, [pc, #620]	@ (8002f04 <StartDefaultTask+0x27c>)
 8002c96:	2001      	movs	r0, #1
 8002c98:	f001 fdae 	bl	80047f8 <LOGGER_SendFormatted>
  int sd_result = SDStorage_Init();
 8002c9c:	f7fe f9d0 	bl	8001040 <SDStorage_Init>
 8002ca0:	6578      	str	r0, [r7, #84]	@ 0x54
  if (sd_result == SDSTORAGE_OK) {
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <StartDefaultTask+0x2a>
    LOG_INFO("✅ SD card initialized successfully");
 8002ca8:	4997      	ldr	r1, [pc, #604]	@ (8002f08 <StartDefaultTask+0x280>)
 8002caa:	2001      	movs	r0, #1
 8002cac:	f001 fda4 	bl	80047f8 <LOGGER_SendFormatted>
 8002cb0:	e004      	b.n	8002cbc <StartDefaultTask+0x34>
  } else {
    LOG_WARN("⚠️ SD card init failed (code: %d)", sd_result);
 8002cb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cb4:	4995      	ldr	r1, [pc, #596]	@ (8002f0c <StartDefaultTask+0x284>)
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f001 fd9e 	bl	80047f8 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002cbc:	4994      	ldr	r1, [pc, #592]	@ (8002f10 <StartDefaultTask+0x288>)
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f001 fd9a 	bl	80047f8 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002cc4:	4b93      	ldr	r3, [pc, #588]	@ (8002f14 <StartDefaultTask+0x28c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a93      	ldr	r2, [pc, #588]	@ (8002f18 <StartDefaultTask+0x290>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4992      	ldr	r1, [pc, #584]	@ (8002f1c <StartDefaultTask+0x294>)
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f001 fd8f 	bl	80047f8 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002cda:	4991      	ldr	r1, [pc, #580]	@ (8002f20 <StartDefaultTask+0x298>)
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f001 fd8b 	bl	80047f8 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002ce2:	4990      	ldr	r1, [pc, #576]	@ (8002f24 <StartDefaultTask+0x29c>)
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f001 fd87 	bl	80047f8 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002cea:	498f      	ldr	r1, [pc, #572]	@ (8002f28 <StartDefaultTask+0x2a0>)
 8002cec:	2001      	movs	r0, #1
 8002cee:	f001 fd83 	bl	80047f8 <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002cf2:	498e      	ldr	r1, [pc, #568]	@ (8002f2c <StartDefaultTask+0x2a4>)
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f001 fd7f 	bl	80047f8 <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002cfa:	488d      	ldr	r0, [pc, #564]	@ (8002f30 <StartDefaultTask+0x2a8>)
 8002cfc:	f001 fe18 	bl	8004930 <UART_Connect>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  if (uart_status == UART_STATUS_OK) {
 8002d06:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <StartDefaultTask+0x9a>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002d0e:	4989      	ldr	r1, [pc, #548]	@ (8002f34 <StartDefaultTask+0x2ac>)
 8002d10:	2001      	movs	r0, #1
 8002d12:	f001 fd71 	bl	80047f8 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002d16:	f001 fee1 	bl	8004adc <UART_IsConnected>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d04a      	beq.n	8002db6 <StartDefaultTask+0x12e>
 8002d20:	e00b      	b.n	8002d3a <StartDefaultTask+0xb2>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002d22:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002d26:	461a      	mov	r2, r3
 8002d28:	4983      	ldr	r1, [pc, #524]	@ (8002f38 <StartDefaultTask+0x2b0>)
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	f001 fd64 	bl	80047f8 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002d30:	4982      	ldr	r1, [pc, #520]	@ (8002f3c <StartDefaultTask+0x2b4>)
 8002d32:	2003      	movs	r0, #3
 8002d34:	f001 fd60 	bl	80047f8 <LOGGER_SendFormatted>
    goto idle_loop;
 8002d38:	e0cd      	b.n	8002ed6 <StartDefaultTask+0x24e>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002d3a:	4981      	ldr	r1, [pc, #516]	@ (8002f40 <StartDefaultTask+0x2b8>)
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f001 fd5b 	bl	80047f8 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002d42:	4980      	ldr	r1, [pc, #512]	@ (8002f44 <StartDefaultTask+0x2bc>)
 8002d44:	2001      	movs	r0, #1
 8002d46:	f001 fd57 	bl	80047f8 <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002d4a:	497f      	ldr	r1, [pc, #508]	@ (8002f48 <StartDefaultTask+0x2c0>)
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f001 fd53 	bl	80047f8 <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002d52:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002d56:	f013 fce3 	bl	8016720 <osDelay>
  
  // LoRa 기본 연결 테스트 + 초기 설정 명령어들
  const char* lora_init_commands[] = {
 8002d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f4c <StartDefaultTask+0x2c4>)
 8002d5c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002d60:	461d      	mov	r5, r3
 8002d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d66:	682b      	ldr	r3, [r5, #0]
 8002d68:	6023      	str	r3, [r4, #0]
    "AT+CLASS=A\r\n",   // Class A 설정
    "AT+BAND=7\r\n"     // Asia 923 MHz 대역 설정
  };
  
  // LoraStarter 컨텍스트 초기화
  LoraStarterContext lora_ctx = {
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	2230      	movs	r2, #48	@ 0x30
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f017 f8c0 	bl	8019ef8 <memset>
 8002d78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	2305      	movs	r3, #5
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	4b73      	ldr	r3, [pc, #460]	@ (8002f50 <StartDefaultTask+0x2c8>)
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	4b73      	ldr	r3, [pc, #460]	@ (8002f54 <StartDefaultTask+0x2cc>)
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
    .send_message = "TEST",
    .max_retry_count = 3,
    .send_interval_ms = 300000  // 5분 간격
  };
  
  LOG_INFO("=== LoRa Initialization ===");
 8002d8e:	4972      	ldr	r1, [pc, #456]	@ (8002f58 <StartDefaultTask+0x2d0>)
 8002d90:	2001      	movs	r0, #1
 8002d92:	f001 fd31 	bl	80047f8 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	496e      	ldr	r1, [pc, #440]	@ (8002f5c <StartDefaultTask+0x2d4>)
 8002da2:	2001      	movs	r0, #1
 8002da4:	f001 fd28 	bl	80047f8 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // LoRa 로그를 SD카드에 저장하기 시작
  LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8002da8:	496d      	ldr	r1, [pc, #436]	@ (8002f60 <StartDefaultTask+0x2d8>)
 8002daa:	2001      	movs	r0, #1
 8002dac:	f001 fd24 	bl	80047f8 <LOGGER_SendFormatted>
  
  // SD카드 로그 파일 생성
  SDStorage_CreateNewLogFile();
 8002db0:	f7fe fa18 	bl	80011e4 <SDStorage_CreateNewLogFile>
 8002db4:	e008      	b.n	8002dc8 <StartDefaultTask+0x140>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002db6:	496b      	ldr	r1, [pc, #428]	@ (8002f64 <StartDefaultTask+0x2dc>)
 8002db8:	2003      	movs	r0, #3
 8002dba:	f001 fd1d 	bl	80047f8 <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002dbe:	495f      	ldr	r1, [pc, #380]	@ (8002f3c <StartDefaultTask+0x2b4>)
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f001 fd19 	bl	80047f8 <LOGGER_SendFormatted>
    goto idle_loop;
 8002dc6:	e086      	b.n	8002ed6 <StartDefaultTask+0x24e>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (lora_new_response) {
 8002dcc:	4b66      	ldr	r3, [pc, #408]	@ (8002f68 <StartDefaultTask+0x2e0>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <StartDefaultTask+0x162>
      rx_data = lora_rx_response;
 8002dd6:	4b65      	ldr	r3, [pc, #404]	@ (8002f6c <StartDefaultTask+0x2e4>)
 8002dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
      lora_new_response = false; // 플래그 클리어
 8002dda:	4b63      	ldr	r3, [pc, #396]	@ (8002f68 <StartDefaultTask+0x2e0>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8002de0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002de2:	4963      	ldr	r1, [pc, #396]	@ (8002f70 <StartDefaultTask+0x2e8>)
 8002de4:	2000      	movs	r0, #0
 8002de6:	f001 fd07 	bl	80047f8 <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fcd1 	bl	8000798 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8002df6:	7b3b      	ldrb	r3, [r7, #12]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	460a      	mov	r2, r1
 8002e04:	495b      	ldr	r1, [pc, #364]	@ (8002f74 <StartDefaultTask+0x2ec>)
 8002e06:	2000      	movs	r0, #0
 8002e08:	f001 fcf6 	bl	80047f8 <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8002e0c:	7b3b      	ldrb	r3, [r7, #12]
 8002e0e:	2b0a      	cmp	r3, #10
 8002e10:	d85b      	bhi.n	8002eca <StartDefaultTask+0x242>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <StartDefaultTask+0x190>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	08002e4f 	.word	0x08002e4f
 8002e20:	08002e67 	.word	0x08002e67
 8002e24:	08002e7f 	.word	0x08002e7f
 8002e28:	08002e89 	.word	0x08002e89
 8002e2c:	08002e7f 	.word	0x08002e7f
 8002e30:	08002e89 	.word	0x08002e89
 8002e34:	08002e93 	.word	0x08002e93
 8002e38:	08002ea9 	.word	0x08002ea9
 8002e3c:	08002eb3 	.word	0x08002eb3
 8002e40:	08002eb3 	.word	0x08002eb3
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8002e44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e48:	f013 fc6a 	bl	8016720 <osDelay>
        break;
 8002e4c:	e042      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4948      	ldr	r1, [pc, #288]	@ (8002f78 <StartDefaultTask+0x2f0>)
 8002e56:	2001      	movs	r0, #1
 8002e58:	f001 fcce 	bl	80047f8 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8002e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e60:	f013 fc5e 	bl	8016720 <osDelay>
        break;
 8002e64:	e036      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4943      	ldr	r1, [pc, #268]	@ (8002f7c <StartDefaultTask+0x2f4>)
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f001 fcc2 	bl	80047f8 <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8002e74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e78:	f013 fc52 	bl	8016720 <osDelay>
        break;
 8002e7c:	e02a      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8002e7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002e82:	f013 fc4d 	bl	8016720 <osDelay>
        break;
 8002e86:	e025      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8002e88:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e8c:	f013 fc48 	bl	8016720 <osDelay>
        break;
 8002e90:	e020      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	461a      	mov	r2, r3
 8002e96:	493a      	ldr	r1, [pc, #232]	@ (8002f80 <StartDefaultTask+0x2f8>)
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f001 fcad 	bl	80047f8 <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8002e9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002ea2:	f013 fc3d 	bl	8016720 <osDelay>
        break;
 8002ea6:	e015      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8002ea8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002eac:	f013 fc38 	bl	8016720 <osDelay>
        break;
 8002eb0:	e010      	b.n	8002ed4 <StartDefaultTask+0x24c>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8002eb2:	7b3b      	ldrb	r3, [r7, #12]
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	d101      	bne.n	8002ebc <StartDefaultTask+0x234>
 8002eb8:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <StartDefaultTask+0x2fc>)
 8002eba:	e000      	b.n	8002ebe <StartDefaultTask+0x236>
 8002ebc:	4b32      	ldr	r3, [pc, #200]	@ (8002f88 <StartDefaultTask+0x300>)
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4932      	ldr	r1, [pc, #200]	@ (8002f8c <StartDefaultTask+0x304>)
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f001 fc98 	bl	80047f8 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8002ec8:	e005      	b.n	8002ed6 <StartDefaultTask+0x24e>
      default:
        osDelay(1000);
 8002eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ece:	f013 fc27 	bl	8016720 <osDelay>
        break;
 8002ed2:	bf00      	nop
  {
 8002ed4:	e778      	b.n	8002dc8 <StartDefaultTask+0x140>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8002ed6:	492e      	ldr	r1, [pc, #184]	@ (8002f90 <StartDefaultTask+0x308>)
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f001 fc8d 	bl	80047f8 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8002ee2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002ee6:	f013 fc1b 	bl	8016720 <osDelay>
    idle_counter++;
 8002eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eec:	3301      	adds	r3, #1
 8002eee:	65bb      	str	r3, [r7, #88]	@ 0x58
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8002ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4927      	ldr	r1, [pc, #156]	@ (8002f94 <StartDefaultTask+0x30c>)
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f001 fc7d 	bl	80047f8 <LOGGER_SendFormatted>
    osDelay(30000);
 8002efe:	bf00      	nop
 8002f00:	e7ef      	b.n	8002ee2 <StartDefaultTask+0x25a>
 8002f02:	bf00      	nop
 8002f04:	0801b4d4 	.word	0x0801b4d4
 8002f08:	0801b4fc 	.word	0x0801b4fc
 8002f0c:	0801b524 	.word	0x0801b524
 8002f10:	0801b54c 	.word	0x0801b54c
 8002f14:	20000000 	.word	0x20000000
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	0801b578 	.word	0x0801b578
 8002f20:	0801b590 	.word	0x0801b590
 8002f24:	0801b5b8 	.word	0x0801b5b8
 8002f28:	0801b604 	.word	0x0801b604
 8002f2c:	0801b640 	.word	0x0801b640
 8002f30:	0801b66c 	.word	0x0801b66c
 8002f34:	0801b674 	.word	0x0801b674
 8002f38:	0801b6a0 	.word	0x0801b6a0
 8002f3c:	0801b6d8 	.word	0x0801b6d8
 8002f40:	0801b71c 	.word	0x0801b71c
 8002f44:	0801b778 	.word	0x0801b778
 8002f48:	0801b7b0 	.word	0x0801b7b0
 8002f4c:	0801ba40 	.word	0x0801ba40
 8002f50:	000493e0 	.word	0x000493e0
 8002f54:	0801b7f0 	.word	0x0801b7f0
 8002f58:	0801b7f8 	.word	0x0801b7f8
 8002f5c:	0801b814 	.word	0x0801b814
 8002f60:	0801b844 	.word	0x0801b844
 8002f64:	0801b74c 	.word	0x0801b74c
 8002f68:	200014ac 	.word	0x200014ac
 8002f6c:	200012ac 	.word	0x200012ac
 8002f70:	0801b87c 	.word	0x0801b87c
 8002f74:	0801b8ac 	.word	0x0801b8ac
 8002f78:	0801b8d8 	.word	0x0801b8d8
 8002f7c:	0801b900 	.word	0x0801b900
 8002f80:	0801b934 	.word	0x0801b934
 8002f84:	0801b964 	.word	0x0801b964
 8002f88:	0801b96c 	.word	0x0801b96c
 8002f8c:	0801b974 	.word	0x0801b974
 8002f90:	0801b9ac 	.word	0x0801b9ac
 8002f94:	0801b9d4 	.word	0x0801b9d4

08002f98 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8002f9e:	af04      	add	r7, sp, #16
 8002fa0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002fa4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002fa8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8002faa:	49a8      	ldr	r1, [pc, #672]	@ (800324c <StartReceiveTask+0x2b4>)
 8002fac:	2001      	movs	r0, #1
 8002fae:	f001 fc23 	bl	80047f8 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8002fb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002fb6:	f013 fbb3 	bl	8016720 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8002fba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002fbe:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8002fc6:	f107 0208 	add.w	r2, r7, #8
 8002fca:	f107 030c 	add.w	r3, r7, #12
 8002fce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fd28 	bl	8004a28 <UART_Receive>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8002fde:	4b9c      	ldr	r3, [pc, #624]	@ (8003250 <StartReceiveTask+0x2b8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a9a      	ldr	r2, [pc, #616]	@ (8003250 <StartReceiveTask+0x2b8>)
 8002fe6:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8002fe8:	4b99      	ldr	r3, [pc, #612]	@ (8003250 <StartReceiveTask+0x2b8>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b99      	ldr	r3, [pc, #612]	@ (8003254 <StartReceiveTask+0x2bc>)
 8002fee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	21c8      	movs	r1, #200	@ 0xc8
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11f      	bne.n	8003040 <StartReceiveTask+0xa8>
 8003000:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003004:	2b02      	cmp	r3, #2
 8003006:	d01b      	beq.n	8003040 <StartReceiveTask+0xa8>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d, flags: rx_complete=%d, rx_error=%d", 
 8003008:	4b91      	ldr	r3, [pc, #580]	@ (8003250 <StartReceiveTask+0x2b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a91      	ldr	r2, [pc, #580]	@ (8003254 <StartReceiveTask+0x2bc>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	099a      	lsrs	r2, r3, #6
 8003014:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003018:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800301c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	488d      	ldr	r0, [pc, #564]	@ (8003258 <StartReceiveTask+0x2c0>)
 8003024:	7800      	ldrb	r0, [r0, #0]
 8003026:	b2c0      	uxtb	r0, r0
 8003028:	4604      	mov	r4, r0
 800302a:	488c      	ldr	r0, [pc, #560]	@ (800325c <StartReceiveTask+0x2c4>)
 800302c:	7800      	ldrb	r0, [r0, #0]
 800302e:	b2c0      	uxtb	r0, r0
 8003030:	9002      	str	r0, [sp, #8]
 8003032:	9401      	str	r4, [sp, #4]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	460b      	mov	r3, r1
 8003038:	4989      	ldr	r1, [pc, #548]	@ (8003260 <StartReceiveTask+0x2c8>)
 800303a:	2001      	movs	r0, #1
 800303c:	f001 fbdc 	bl	80047f8 <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received, uart_rx_complete_flag, uart_rx_error_flag);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003040:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 80fc 	bne.w	8003242 <StartReceiveTask+0x2aa>
 800304a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800304e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f340 80f4 	ble.w	8003242 <StartReceiveTask+0x2aa>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 800305a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800305e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f107 020c 	add.w	r2, r7, #12
 8003068:	497e      	ldr	r1, [pc, #504]	@ (8003264 <StartReceiveTask+0x2cc>)
 800306a:	2001      	movs	r0, #1
 800306c:	f001 fbc4 	bl	80047f8 <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fea1 	bl	8000dbc <is_response_ok>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <StartReceiveTask+0xf2>
        LOG_INFO("✅ OK response");
 8003080:	4979      	ldr	r1, [pc, #484]	@ (8003268 <StartReceiveTask+0x2d0>)
 8003082:	2001      	movs	r0, #1
 8003084:	f001 fbb8 	bl	80047f8 <LOGGER_SendFormatted>
 8003088:	e049      	b.n	800311e <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4977      	ldr	r1, [pc, #476]	@ (800326c <StartReceiveTask+0x2d4>)
 8003090:	4618      	mov	r0, r3
 8003092:	f016 ff4c 	bl	8019f2e <strstr>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <StartReceiveTask+0x10e>
        LOG_INFO("✅ JOIN response");
 800309c:	4974      	ldr	r1, [pc, #464]	@ (8003270 <StartReceiveTask+0x2d8>)
 800309e:	2001      	movs	r0, #1
 80030a0:	f001 fbaa 	bl	80047f8 <LOGGER_SendFormatted>
 80030a4:	e03b      	b.n	800311e <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	4972      	ldr	r1, [pc, #456]	@ (8003274 <StartReceiveTask+0x2dc>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f016 ff3e 	bl	8019f2e <strstr>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <StartReceiveTask+0x12a>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 80030b8:	496f      	ldr	r1, [pc, #444]	@ (8003278 <StartReceiveTask+0x2e0>)
 80030ba:	2001      	movs	r0, #1
 80030bc:	f001 fb9c 	bl	80047f8 <LOGGER_SendFormatted>
 80030c0:	e02d      	b.n	800311e <StartReceiveTask+0x186>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd ff64 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 80030d2:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d821      	bhi.n	800311e <StartReceiveTask+0x186>
 80030da:	a201      	add	r2, pc, #4	@ (adr r2, 80030e0 <StartReceiveTask+0x148>)
 80030dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	080030fb 	.word	0x080030fb
 80030e8:	08003105 	.word	0x08003105
 80030ec:	0800310f 	.word	0x0800310f
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 80030f0:	4962      	ldr	r1, [pc, #392]	@ (800327c <StartReceiveTask+0x2e4>)
 80030f2:	2001      	movs	r0, #1
 80030f4:	f001 fb80 	bl	80047f8 <LOGGER_SendFormatted>
            break;
 80030f8:	e011      	b.n	800311e <StartReceiveTask+0x186>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 80030fa:	4961      	ldr	r1, [pc, #388]	@ (8003280 <StartReceiveTask+0x2e8>)
 80030fc:	2002      	movs	r0, #2
 80030fe:	f001 fb7b 	bl	80047f8 <LOGGER_SendFormatted>
            break;
 8003102:	e00c      	b.n	800311e <StartReceiveTask+0x186>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 8003104:	495f      	ldr	r1, [pc, #380]	@ (8003284 <StartReceiveTask+0x2ec>)
 8003106:	2002      	movs	r0, #2
 8003108:	f001 fb76 	bl	80047f8 <LOGGER_SendFormatted>
            break;
 800310c:	e007      	b.n	800311e <StartReceiveTask+0x186>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	461a      	mov	r2, r3
 8003114:	495c      	ldr	r1, [pc, #368]	@ (8003288 <StartReceiveTask+0x2f0>)
 8003116:	2001      	movs	r0, #1
 8003118:	f001 fb6e 	bl	80047f8 <LOGGER_SendFormatted>
            break;
 800311c:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 800311e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003122:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	4619      	mov	r1, r3
 8003130:	4856      	ldr	r0, [pc, #344]	@ (800328c <StartReceiveTask+0x2f4>)
 8003132:	f016 ff4f 	bl	8019fd4 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003136:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800313a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a53      	ldr	r2, [pc, #332]	@ (8003290 <StartReceiveTask+0x2f8>)
 8003142:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fe34 	bl	8000dbc <is_response_ok>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <StartReceiveTask+0x1ca>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003160:	e03f      	b.n	80031e2 <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	4941      	ldr	r1, [pc, #260]	@ (800326c <StartReceiveTask+0x2d4>)
 8003168:	4618      	mov	r0, r3
 800316a:	f016 fee0 	bl	8019f2e <strstr>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <StartReceiveTask+0x1e4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800317a:	e032      	b.n	80031e2 <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 800317c:	f107 030c 	add.w	r3, r7, #12
 8003180:	4944      	ldr	r1, [pc, #272]	@ (8003294 <StartReceiveTask+0x2fc>)
 8003182:	4618      	mov	r0, r3
 8003184:	f016 fed3 	bl	8019f2e <strstr>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <StartReceiveTask+0x1fe>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003194:	e025      	b.n	80031e2 <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	4936      	ldr	r1, [pc, #216]	@ (8003274 <StartReceiveTask+0x2dc>)
 800319c:	4618      	mov	r0, r3
 800319e:	f016 fec6 	bl	8019f2e <strstr>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <StartReceiveTask+0x222>
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	493a      	ldr	r1, [pc, #232]	@ (8003298 <StartReceiveTask+0x300>)
 80031ae:	4618      	mov	r0, r3
 80031b0:	f016 febd 	bl	8019f2e <strstr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <StartReceiveTask+0x22c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 80031ba:	4938      	ldr	r1, [pc, #224]	@ (800329c <StartReceiveTask+0x304>)
 80031bc:	2000      	movs	r0, #0
 80031be:	f001 fb1b 	bl	80047f8 <LOGGER_SendFormatted>
 80031c2:	e00e      	b.n	80031e2 <StartReceiveTask+0x24a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd fee3 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 80031d4:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d002      	beq.n	80031e2 <StartReceiveTask+0x24a>
          is_lora_command_response = true;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 80031e2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01d      	beq.n	8003226 <StartReceiveTask+0x28e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 80031ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031ee:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f107 030c 	add.w	r3, r7, #12
 80031fa:	4619      	mov	r1, r3
 80031fc:	4828      	ldr	r0, [pc, #160]	@ (80032a0 <StartReceiveTask+0x308>)
 80031fe:	f016 fee9 	bl	8019fd4 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8003202:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003206:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a24      	ldr	r2, [pc, #144]	@ (80032a0 <StartReceiveTask+0x308>)
 800320e:	2100      	movs	r1, #0
 8003210:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <StartReceiveTask+0x30c>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	461a      	mov	r2, r3
 800321e:	4922      	ldr	r1, [pc, #136]	@ (80032a8 <StartReceiveTask+0x310>)
 8003220:	2000      	movs	r0, #0
 8003222:	f001 fae9 	bl	80047f8 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f016 fe61 	bl	8019ef8 <memset>
      local_bytes_received = 0;
 8003236:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800323a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003242:	2032      	movs	r0, #50	@ 0x32
 8003244:	f013 fa6c 	bl	8016720 <osDelay>
  {
 8003248:	e6bd      	b.n	8002fc6 <StartReceiveTask+0x2e>
 800324a:	bf00      	nop
 800324c:	0801ba54 	.word	0x0801ba54
 8003250:	20001520 	.word	0x20001520
 8003254:	51eb851f 	.word	0x51eb851f
 8003258:	20001510 	.word	0x20001510
 800325c:	20001511 	.word	0x20001511
 8003260:	0801ba7c 	.word	0x0801ba7c
 8003264:	0801bad4 	.word	0x0801bad4
 8003268:	0801baf0 	.word	0x0801baf0
 800326c:	0801bb00 	.word	0x0801bb00
 8003270:	0801bb0c 	.word	0x0801bb0c
 8003274:	0801bb20 	.word	0x0801bb20
 8003278:	0801bb2c 	.word	0x0801bb2c
 800327c:	0801bb54 	.word	0x0801bb54
 8003280:	0801bb5c 	.word	0x0801bb5c
 8003284:	0801bb6c 	.word	0x0801bb6c
 8003288:	0801bb7c 	.word	0x0801bb7c
 800328c:	200010a8 	.word	0x200010a8
 8003290:	200012a8 	.word	0x200012a8
 8003294:	0801bb9c 	.word	0x0801bb9c
 8003298:	0801bba4 	.word	0x0801bba4
 800329c:	0801bbb4 	.word	0x0801bbb4
 80032a0:	200012ac 	.word	0x200012ac
 80032a4:	200014ac 	.word	0x200014ac
 80032a8:	0801bbf0 	.word	0x0801bbf0

080032ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80032be:	f001 feb5 	bl	800502c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40001000 	.word	0x40001000

080032d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032d4:	b672      	cpsid	i
}
 80032d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <Error_Handler+0x8>

080032dc <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032e2:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <MX_DMA_Init+0x48>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003324 <MX_DMA_Init+0x48>)
 80032e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <MX_DMA_Init+0x48>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2105      	movs	r1, #5
 80032fe:	2039      	movs	r0, #57	@ 0x39
 8003300:	f002 fa28 	bl	8005754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003304:	2039      	movs	r0, #57	@ 0x39
 8003306:	f002 fa41 	bl	800578c <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2105      	movs	r1, #5
 800330e:	2047      	movs	r0, #71	@ 0x47
 8003310:	f002 fa20 	bl	8005754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003314:	2047      	movs	r0, #71	@ 0x47
 8003316:	f002 fa39 	bl	800578c <HAL_NVIC_EnableIRQ>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800

08003328 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800332c:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 800332e:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <MX_USART6_DMA_Init+0x6c>)
 8003330:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003332:	4b17      	ldr	r3, [pc, #92]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003334:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003338:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003340:	4b13      	ldr	r3, [pc, #76]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003346:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003348:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800334c:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003354:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003356:	2200      	movs	r2, #0
 8003358:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 800335c:	2200      	movs	r2, #0
 800335e:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003362:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003366:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800336e:	4808      	ldr	r0, [pc, #32]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003370:	f002 fb86 	bl	8005a80 <HAL_DMA_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 800337a:	f7ff ffa9 	bl	80032d0 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <MX_USART6_DMA_Init+0x70>)
 8003380:	4a03      	ldr	r2, [pc, #12]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003382:	675a      	str	r2, [r3, #116]	@ 0x74
 8003384:	4b02      	ldr	r3, [pc, #8]	@ (8003390 <MX_USART6_DMA_Init+0x68>)
 8003386:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <MX_USART6_DMA_Init+0x70>)
 8003388:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200014b0 	.word	0x200014b0
 8003394:	40026428 	.word	0x40026428
 8003398:	20000fe4 	.word	0x20000fe4

0800339c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_MspInit+0x4c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	4a10      	ldr	r2, [pc, #64]	@ (80033e8 <HAL_MspInit+0x4c>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <HAL_MspInit+0x4c>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_MspInit+0x4c>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_MspInit+0x4c>)
 80033c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <HAL_MspInit+0x4c>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	210f      	movs	r1, #15
 80033d6:	f06f 0001 	mvn.w	r0, #1
 80033da:	f002 f9bb 	bl	8005754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_ADC_MspInit+0xa4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d13c      	bne.n	8003488 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800340e:	4b21      	ldr	r3, [pc, #132]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	4a20      	ldr	r2, [pc, #128]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 8003414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003418:	6453      	str	r3, [r2, #68]	@ 0x44
 800341a:	4b1e      	ldr	r3, [pc, #120]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003426:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 800342c:	f043 0320 	orr.w	r3, r3, #32
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b18      	ldr	r3, [pc, #96]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	4a14      	ldr	r2, [pc, #80]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6313      	str	r3, [r2, #48]	@ 0x30
 800344a:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_ADC_MspInit+0xa8>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003456:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800345a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345c:	2303      	movs	r3, #3
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	480b      	ldr	r0, [pc, #44]	@ (8003498 <HAL_ADC_MspInit+0xac>)
 800346c:	f003 fcb6 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003474:	2303      	movs	r3, #3
 8003476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4619      	mov	r1, r3
 8003482:	4806      	ldr	r0, [pc, #24]	@ (800349c <HAL_ADC_MspInit+0xb0>)
 8003484:	f003 fcaa 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	@ 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40012200 	.word	0x40012200
 8003494:	40023800 	.word	0x40023800
 8003498:	40021400 	.word	0x40021400
 800349c:	40020000 	.word	0x40020000

080034a0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <HAL_CRC_MspInit+0x38>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10b      	bne.n	80034ca <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_CRC_MspInit+0x3c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a09      	ldr	r2, [pc, #36]	@ (80034dc <HAL_CRC_MspInit+0x3c>)
 80034b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <HAL_CRC_MspInit+0x3c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40023000 	.word	0x40023000
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	@ 0x38
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a50      	ldr	r2, [pc, #320]	@ (8003640 <HAL_DCMI_MspInit+0x160>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f040 809a 	bne.w	8003638 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003504:	4b4f      	ldr	r3, [pc, #316]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003508:	4a4e      	ldr	r2, [pc, #312]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003510:	4b4c      	ldr	r3, [pc, #304]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	623b      	str	r3, [r7, #32]
 800351a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800351c:	4b49      	ldr	r3, [pc, #292]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a48      	ldr	r2, [pc, #288]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003522:	f043 0310 	orr.w	r3, r3, #16
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b46      	ldr	r3, [pc, #280]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003534:	4b43      	ldr	r3, [pc, #268]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	4a42      	ldr	r2, [pc, #264]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800353a:	f043 0308 	orr.w	r3, r3, #8
 800353e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003540:	4b40      	ldr	r3, [pc, #256]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800354c:	4b3d      	ldr	r3, [pc, #244]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	4a3c      	ldr	r2, [pc, #240]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003556:	6313      	str	r3, [r2, #48]	@ 0x30
 8003558:	4b3a      	ldr	r3, [pc, #232]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003564:	4b37      	ldr	r3, [pc, #220]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	4a36      	ldr	r2, [pc, #216]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800356a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003570:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	4a30      	ldr	r2, [pc, #192]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6313      	str	r3, [r2, #48]	@ 0x30
 8003588:	4b2e      	ldr	r3, [pc, #184]	@ (8003644 <HAL_DCMI_MspInit+0x164>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003594:	2360      	movs	r3, #96	@ 0x60
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035a4:	230d      	movs	r3, #13
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ac:	4619      	mov	r1, r3
 80035ae:	4826      	ldr	r0, [pc, #152]	@ (8003648 <HAL_DCMI_MspInit+0x168>)
 80035b0:	f003 fc14 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80035b4:	2308      	movs	r3, #8
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	2300      	movs	r3, #0
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035c4:	230d      	movs	r3, #13
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80035c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035cc:	4619      	mov	r1, r3
 80035ce:	481f      	ldr	r0, [pc, #124]	@ (800364c <HAL_DCMI_MspInit+0x16c>)
 80035d0:	f003 fc04 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80035d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80035e6:	230d      	movs	r3, #13
 80035e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80035ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ee:	4619      	mov	r1, r3
 80035f0:	4817      	ldr	r0, [pc, #92]	@ (8003650 <HAL_DCMI_MspInit+0x170>)
 80035f2:	f003 fbf3 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80035f6:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003608:	230d      	movs	r3, #13
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800360c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003610:	4619      	mov	r1, r3
 8003612:	4810      	ldr	r0, [pc, #64]	@ (8003654 <HAL_DCMI_MspInit+0x174>)
 8003614:	f003 fbe2 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003618:	2350      	movs	r3, #80	@ 0x50
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003624:	2300      	movs	r3, #0
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003628:	230d      	movs	r3, #13
 800362a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003630:	4619      	mov	r1, r3
 8003632:	4809      	ldr	r0, [pc, #36]	@ (8003658 <HAL_DCMI_MspInit+0x178>)
 8003634:	f003 fbd2 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003638:	bf00      	nop
 800363a:	3738      	adds	r7, #56	@ 0x38
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	50050000 	.word	0x50050000
 8003644:	40023800 	.word	0x40023800
 8003648:	40021000 	.word	0x40021000
 800364c:	40020c00 	.word	0x40020c00
 8003650:	40021800 	.word	0x40021800
 8003654:	40021c00 	.word	0x40021c00
 8003658:	40020000 	.word	0x40020000

0800365c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <HAL_DMA2D_MspInit+0x44>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_DMA2D_MspInit+0x48>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <HAL_DMA2D_MspInit+0x48>)
 8003674:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003678:	6313      	str	r3, [r2, #48]	@ 0x30
 800367a:	4b0a      	ldr	r3, [pc, #40]	@ (80036a4 <HAL_DMA2D_MspInit+0x48>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2105      	movs	r1, #5
 800368a:	205a      	movs	r0, #90	@ 0x5a
 800368c:	f002 f862 	bl	8005754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003690:	205a      	movs	r0, #90	@ 0x5a
 8003692:	f002 f87b 	bl	800578c <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	4002b000 	.word	0x4002b000
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08e      	sub	sp, #56	@ 0x38
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3f      	ldr	r2, [pc, #252]	@ (80037c4 <HAL_ETH_MspInit+0x11c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d178      	bne.n	80037bc <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036ca:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4a3e      	ldr	r2, [pc, #248]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d6:	4b3c      	ldr	r3, [pc, #240]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	623b      	str	r3, [r7, #32]
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	4a38      	ldr	r2, [pc, #224]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ee:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a32      	ldr	r2, [pc, #200]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003712:	4b2d      	ldr	r3, [pc, #180]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a2c      	ldr	r2, [pc, #176]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a26      	ldr	r2, [pc, #152]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	4b21      	ldr	r3, [pc, #132]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	@ 0x30
 800374e:	4b1e      	ldr	r3, [pc, #120]	@ (80037c8 <HAL_ETH_MspInit+0x120>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800375a:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800376c:	230b      	movs	r3, #11
 800376e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003774:	4619      	mov	r1, r3
 8003776:	4815      	ldr	r0, [pc, #84]	@ (80037cc <HAL_ETH_MspInit+0x124>)
 8003778:	f003 fb30 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800377c:	2332      	movs	r3, #50	@ 0x32
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800378c:	230b      	movs	r3, #11
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003794:	4619      	mov	r1, r3
 8003796:	480e      	ldr	r0, [pc, #56]	@ (80037d0 <HAL_ETH_MspInit+0x128>)
 8003798:	f003 fb20 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800379c:	2386      	movs	r3, #134	@ 0x86
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037ac:	230b      	movs	r3, #11
 80037ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b4:	4619      	mov	r1, r3
 80037b6:	4807      	ldr	r0, [pc, #28]	@ (80037d4 <HAL_ETH_MspInit+0x12c>)
 80037b8:	f003 fb10 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80037bc:	bf00      	nop
 80037be:	3738      	adds	r7, #56	@ 0x38
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40028000 	.word	0x40028000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40021800 	.word	0x40021800
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40020000 	.word	0x40020000

080037d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b0ac      	sub	sp, #176	@ 0xb0
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037f0:	f107 0318 	add.w	r3, r7, #24
 80037f4:	2284      	movs	r2, #132	@ 0x84
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f016 fb7d 	bl	8019ef8 <memset>
  if(hi2c->Instance==I2C1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a44      	ldr	r2, [pc, #272]	@ (8003914 <HAL_I2C_MspInit+0x13c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d13d      	bne.n	8003884 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003808:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800380c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800380e:	2300      	movs	r3, #0
 8003810:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003812:	f107 0318 	add.w	r3, r7, #24
 8003816:	4618      	mov	r0, r3
 8003818:	f006 fffe 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003822:	f7ff fd55 	bl	80032d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	4b3c      	ldr	r3, [pc, #240]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a3b      	ldr	r2, [pc, #236]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b39      	ldr	r3, [pc, #228]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800383e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003846:	2312      	movs	r3, #18
 8003848:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384c:	2301      	movs	r3, #1
 800384e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003858:	2304      	movs	r3, #4
 800385a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003862:	4619      	mov	r1, r3
 8003864:	482d      	ldr	r0, [pc, #180]	@ (800391c <HAL_I2C_MspInit+0x144>)
 8003866:	f003 fab9 	bl	8006ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800386a:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	4a2a      	ldr	r2, [pc, #168]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 8003870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003874:	6413      	str	r3, [r2, #64]	@ 0x40
 8003876:	4b28      	ldr	r3, [pc, #160]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003882:	e042      	b.n	800390a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a25      	ldr	r2, [pc, #148]	@ (8003920 <HAL_I2C_MspInit+0x148>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d13d      	bne.n	800390a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800388e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003892:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389a:	f107 0318 	add.w	r3, r7, #24
 800389e:	4618      	mov	r0, r3
 80038a0:	f006 ffba 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80038aa:	f7ff fd11 	bl	80032d0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 80038b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ba:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80038c6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80038ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ce:	2312      	movs	r3, #18
 80038d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038da:	2303      	movs	r3, #3
 80038dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038e0:	2304      	movs	r3, #4
 80038e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80038e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038ea:	4619      	mov	r1, r3
 80038ec:	480d      	ldr	r0, [pc, #52]	@ (8003924 <HAL_I2C_MspInit+0x14c>)
 80038ee:	f003 fa75 	bl	8006ddc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 80038f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_I2C_MspInit+0x140>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
}
 800390a:	bf00      	nop
 800390c:	37b0      	adds	r7, #176	@ 0xb0
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40005400 	.word	0x40005400
 8003918:	40023800 	.word	0x40023800
 800391c:	40020400 	.word	0x40020400
 8003920:	40005c00 	.word	0x40005c00
 8003924:	40021c00 	.word	0x40021c00

08003928 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	@ 0x38
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a55      	ldr	r2, [pc, #340]	@ (8003a9c <HAL_LTDC_MspInit+0x174>)
 8003946:	4293      	cmp	r3, r2
 8003948:	f040 80a3 	bne.w	8003a92 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800394c:	4b54      	ldr	r3, [pc, #336]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 800394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003950:	4a53      	ldr	r2, [pc, #332]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 8003952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003956:	6453      	str	r3, [r2, #68]	@ 0x44
 8003958:	4b51      	ldr	r3, [pc, #324]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003964:	4b4e      	ldr	r3, [pc, #312]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 800396a:	f043 0310 	orr.w	r3, r3, #16
 800396e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003970:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800397c:	4b48      	ldr	r3, [pc, #288]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	4a47      	ldr	r2, [pc, #284]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 8003982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003986:	6313      	str	r3, [r2, #48]	@ 0x30
 8003988:	4b45      	ldr	r3, [pc, #276]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003994:	4b42      	ldr	r3, [pc, #264]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003998:	4a41      	ldr	r2, [pc, #260]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 800399a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800399e:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a0:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039ac:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b8:	4b39      	ldr	r3, [pc, #228]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80039c4:	4b36      	ldr	r3, [pc, #216]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	4a35      	ldr	r2, [pc, #212]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d0:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <HAL_LTDC_MspInit+0x178>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80039dc:	2310      	movs	r3, #16
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039ec:	230e      	movs	r3, #14
 80039ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80039f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039f4:	4619      	mov	r1, r3
 80039f6:	482b      	ldr	r0, [pc, #172]	@ (8003aa4 <HAL_LTDC_MspInit+0x17c>)
 80039f8:	f003 f9f0 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80039fc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2302      	movs	r3, #2
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a0e:	230e      	movs	r3, #14
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a16:	4619      	mov	r1, r3
 8003a18:	4823      	ldr	r0, [pc, #140]	@ (8003aa8 <HAL_LTDC_MspInit+0x180>)
 8003a1a:	f003 f9df 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003a1e:	23f7      	movs	r3, #247	@ 0xf7
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a2e:	230e      	movs	r3, #14
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a36:	4619      	mov	r1, r3
 8003a38:	481c      	ldr	r0, [pc, #112]	@ (8003aac <HAL_LTDC_MspInit+0x184>)
 8003a3a:	f003 f9cf 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a50:	2309      	movs	r3, #9
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4815      	ldr	r0, [pc, #84]	@ (8003ab0 <HAL_LTDC_MspInit+0x188>)
 8003a5c:	f003 f9be 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003a60:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a72:	230e      	movs	r3, #14
 8003a74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	480d      	ldr	r0, [pc, #52]	@ (8003ab4 <HAL_LTDC_MspInit+0x18c>)
 8003a7e:	f003 f9ad 	bl	8006ddc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2105      	movs	r1, #5
 8003a86:	2058      	movs	r0, #88	@ 0x58
 8003a88:	f001 fe64 	bl	8005754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a8c:	2058      	movs	r0, #88	@ 0x58
 8003a8e:	f001 fe7d 	bl	800578c <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003a92:	bf00      	nop
 8003a94:	3738      	adds	r7, #56	@ 0x38
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40016800 	.word	0x40016800
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40022400 	.word	0x40022400
 8003aac:	40022800 	.word	0x40022800
 8003ab0:	40021800 	.word	0x40021800
 8003ab4:	40022000 	.word	0x40022000

08003ab8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08c      	sub	sp, #48	@ 0x30
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc4 <HAL_QSPI_MspInit+0x10c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d170      	bne.n	8003bbc <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ade:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6393      	str	r3, [r2, #56]	@ 0x38
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003af2:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	4a34      	ldr	r2, [pc, #208]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003af8:	f043 0310 	orr.w	r3, r3, #16
 8003afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003afe:	4b32      	ldr	r3, [pc, #200]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b22:	4b29      	ldr	r3, [pc, #164]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	4a28      	ldr	r2, [pc, #160]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2e:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <HAL_QSPI_MspInit+0x110>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b46:	2303      	movs	r3, #3
 8003b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b4a:	2309      	movs	r3, #9
 8003b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	4619      	mov	r1, r3
 8003b54:	481d      	ldr	r0, [pc, #116]	@ (8003bcc <HAL_QSPI_MspInit+0x114>)
 8003b56:	f003 f941 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003b5a:	2340      	movs	r3, #64	@ 0x40
 8003b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b66:	2303      	movs	r3, #3
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003b6e:	f107 031c 	add.w	r3, r7, #28
 8003b72:	4619      	mov	r1, r3
 8003b74:	4816      	ldr	r0, [pc, #88]	@ (8003bd0 <HAL_QSPI_MspInit+0x118>)
 8003b76:	f003 f931 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b86:	2303      	movs	r3, #3
 8003b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	480e      	ldr	r0, [pc, #56]	@ (8003bd0 <HAL_QSPI_MspInit+0x118>)
 8003b96:	f003 f921 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003b9a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003bac:	2309      	movs	r3, #9
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4807      	ldr	r0, [pc, #28]	@ (8003bd4 <HAL_QSPI_MspInit+0x11c>)
 8003bb8:	f003 f910 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003bbc:	bf00      	nop
 8003bbe:	3730      	adds	r7, #48	@ 0x30
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	a0001000 	.word	0xa0001000
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020c00 	.word	0x40020c00

08003bd8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0a4      	sub	sp, #144	@ 0x90
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	2284      	movs	r2, #132	@ 0x84
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f016 f985 	bl	8019ef8 <memset>
  if(hrtc->Instance==RTC)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8003c2c <HAL_RTC_MspInit+0x54>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d114      	bne.n	8003c22 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	4618      	mov	r0, r3
 8003c08:	f006 fe06 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003c12:	f7ff fb5d 	bl	80032d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_RTC_MspInit+0x58>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	4a05      	ldr	r2, [pc, #20]	@ (8003c30 <HAL_RTC_MspInit+0x58>)
 8003c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c20:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003c22:	bf00      	nop
 8003c24:	3790      	adds	r7, #144	@ 0x90
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40002800 	.word	0x40002800
 8003c30:	40023800 	.word	0x40023800

08003c34 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a25      	ldr	r2, [pc, #148]	@ (8003ce8 <HAL_SD_MspInit+0xb4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d144      	bne.n	8003ce0 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c56:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	4a24      	ldr	r2, [pc, #144]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c86:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c92:	4b16      	ldr	r3, [pc, #88]	@ (8003cec <HAL_SD_MspInit+0xb8>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c9e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003ca2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cac:	2303      	movs	r3, #3
 8003cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb4:	f107 0314 	add.w	r3, r7, #20
 8003cb8:	4619      	mov	r1, r3
 8003cba:	480d      	ldr	r0, [pc, #52]	@ (8003cf0 <HAL_SD_MspInit+0xbc>)
 8003cbc:	f003 f88e 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4806      	ldr	r0, [pc, #24]	@ (8003cf4 <HAL_SD_MspInit+0xc0>)
 8003cdc:	f003 f87e 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003ce0:	bf00      	nop
 8003ce2:	3728      	adds	r7, #40	@ 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020c00 	.word	0x40020c00

08003cf8 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b0aa      	sub	sp, #168	@ 0xa8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	2284      	movs	r2, #132	@ 0x84
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f016 f8ed 	bl	8019ef8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003d26:	d143      	bne.n	8003db0 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003d28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003d2e:	2364      	movs	r3, #100	@ 0x64
 8003d30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003d32:	2302      	movs	r3, #2
 8003d34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003d36:	2302      	movs	r3, #2
 8003d38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d42:	f107 0310 	add.w	r3, r7, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f006 fd66 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003d52:	f7ff fabd 	bl	80032d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003d56:	4b18      	ldr	r3, [pc, #96]	@ (8003db8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d62:	4b15      	ldr	r3, [pc, #84]	@ (8003db8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d72:	4a11      	ldr	r2, [pc, #68]	@ (8003db8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003db8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003d9e:	2308      	movs	r3, #8
 8003da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003da4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003da8:	4619      	mov	r1, r3
 8003daa:	4804      	ldr	r0, [pc, #16]	@ (8003dbc <HAL_SPDIFRX_MspInit+0xc4>)
 8003dac:	f003 f816 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8003db0:	bf00      	nop
 8003db2:	37a8      	adds	r7, #168	@ 0xa8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020c00 	.word	0x40020c00

08003dc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	@ 0x28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	@ (8003e74 <HAL_SPI_MspInit+0xb4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d144      	bne.n	8003e6c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003de2:	4b25      	ldr	r3, [pc, #148]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	4a24      	ldr	r2, [pc, #144]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dee:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e06:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	4b19      	ldr	r3, [pc, #100]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e16:	4a18      	ldr	r2, [pc, #96]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e1e:	4b16      	ldr	r3, [pc, #88]	@ (8003e78 <HAL_SPI_MspInit+0xb8>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	4619      	mov	r1, r3
 8003e44:	480d      	ldr	r0, [pc, #52]	@ (8003e7c <HAL_SPI_MspInit+0xbc>)
 8003e46:	f002 ffc9 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003e4a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4619      	mov	r1, r3
 8003e66:	4806      	ldr	r0, [pc, #24]	@ (8003e80 <HAL_SPI_MspInit+0xc0>)
 8003e68:	f002 ffb8 	bl	8006ddc <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003e6c:	bf00      	nop
 8003e6e:	3728      	adds	r7, #40	@ 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40003800 	.word	0x40003800
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40020400 	.word	0x40020400

08003e84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	@ 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2e      	ldr	r2, [pc, #184]	@ (8003f4c <HAL_TIM_Base_MspInit+0xc8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10c      	bne.n	8003eb0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e96:	4b2e      	ldr	r3, [pc, #184]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003eae:	e046      	b.n	8003f3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eba:	4b25      	ldr	r3, [pc, #148]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a24      	ldr	r2, [pc, #144]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b22      	ldr	r3, [pc, #136]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
}
 8003ed2:	e034      	b.n	8003f3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f54 <HAL_TIM_Base_MspInit+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ede:	4b1c      	ldr	r3, [pc, #112]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eea:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
}
 8003ef6:	e022      	b.n	8003f3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <HAL_TIM_Base_MspInit+0xd4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10c      	bne.n	8003f1c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f02:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0e:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
}
 8003f1a:	e010      	b.n	8003f3e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <HAL_TIM_Base_MspInit+0xd8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10b      	bne.n	8003f3e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f26:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	4a09      	ldr	r2, [pc, #36]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f32:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <HAL_TIM_Base_MspInit+0xcc>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	bf00      	nop
 8003f40:	3724      	adds	r7, #36	@ 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000c00 	.word	0x40000c00
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f98 <HAL_TIM_PWM_MspInit+0x38>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10b      	bne.n	8003f8a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003f72:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <HAL_TIM_PWM_MspInit+0x3c>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	4a09      	ldr	r2, [pc, #36]	@ (8003f9c <HAL_TIM_PWM_MspInit+0x3c>)
 8003f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7e:	4b07      	ldr	r3, [pc, #28]	@ (8003f9c <HAL_TIM_PWM_MspInit+0x3c>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40001800 	.word	0x40001800
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	@ 0x30
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a56      	ldr	r2, [pc, #344]	@ (8004118 <HAL_TIM_MspPostInit+0x178>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d11d      	bne.n	8003ffe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc2:	4b56      	ldr	r3, [pc, #344]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	4a55      	ldr	r2, [pc, #340]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fce:	4b53      	ldr	r3, [pc, #332]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003ff0:	f107 031c 	add.w	r3, r7, #28
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	484a      	ldr	r0, [pc, #296]	@ (8004120 <HAL_TIM_MspPostInit+0x180>)
 8003ff8:	f002 fef0 	bl	8006ddc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003ffc:	e087      	b.n	800410e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004006:	d11d      	bne.n	8004044 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004008:	4b44      	ldr	r3, [pc, #272]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	4a43      	ldr	r2, [pc, #268]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6313      	str	r3, [r2, #48]	@ 0x30
 8004014:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004032:	2301      	movs	r3, #1
 8004034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	4619      	mov	r1, r3
 800403c:	4838      	ldr	r0, [pc, #224]	@ (8004120 <HAL_TIM_MspPostInit+0x180>)
 800403e:	f002 fecd 	bl	8006ddc <HAL_GPIO_Init>
}
 8004042:	e064      	b.n	800410e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a36      	ldr	r2, [pc, #216]	@ (8004124 <HAL_TIM_MspPostInit+0x184>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d11c      	bne.n	8004088 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404e:	4b33      	ldr	r3, [pc, #204]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	4a32      	ldr	r2, [pc, #200]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	6313      	str	r3, [r2, #48]	@ 0x30
 800405a:	4b30      	ldr	r3, [pc, #192]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004066:	2310      	movs	r3, #16
 8004068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2300      	movs	r3, #0
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004076:	2302      	movs	r3, #2
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800407a:	f107 031c 	add.w	r3, r7, #28
 800407e:	4619      	mov	r1, r3
 8004080:	4829      	ldr	r0, [pc, #164]	@ (8004128 <HAL_TIM_MspPostInit+0x188>)
 8004082:	f002 feab 	bl	8006ddc <HAL_GPIO_Init>
}
 8004086:	e042      	b.n	800410e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a27      	ldr	r2, [pc, #156]	@ (800412c <HAL_TIM_MspPostInit+0x18c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d11c      	bne.n	80040cc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004092:	4b22      	ldr	r3, [pc, #136]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4a21      	ldr	r2, [pc, #132]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800409c:	6313      	str	r3, [r2, #48]	@ 0x30
 800409e:	4b1f      	ldr	r3, [pc, #124]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ae:	2302      	movs	r3, #2
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80040ba:	2302      	movs	r3, #2
 80040bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80040be:	f107 031c 	add.w	r3, r7, #28
 80040c2:	4619      	mov	r1, r3
 80040c4:	481a      	ldr	r0, [pc, #104]	@ (8004130 <HAL_TIM_MspPostInit+0x190>)
 80040c6:	f002 fe89 	bl	8006ddc <HAL_GPIO_Init>
}
 80040ca:	e020      	b.n	800410e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	@ (8004134 <HAL_TIM_MspPostInit+0x194>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d11b      	bne.n	800410e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80040d6:	4b11      	ldr	r3, [pc, #68]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	4a10      	ldr	r2, [pc, #64]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 80040dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e2:	4b0e      	ldr	r3, [pc, #56]	@ (800411c <HAL_TIM_MspPostInit+0x17c>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80040ee:	2340      	movs	r3, #64	@ 0x40
 80040f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80040fe:	2309      	movs	r3, #9
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004102:	f107 031c 	add.w	r3, r7, #28
 8004106:	4619      	mov	r1, r3
 8004108:	480b      	ldr	r0, [pc, #44]	@ (8004138 <HAL_TIM_MspPostInit+0x198>)
 800410a:	f002 fe67 	bl	8006ddc <HAL_GPIO_Init>
}
 800410e:	bf00      	nop
 8004110:	3730      	adds	r7, #48	@ 0x30
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40023800 	.word	0x40023800
 8004120:	40020000 	.word	0x40020000
 8004124:	40000400 	.word	0x40000400
 8004128:	40020400 	.word	0x40020400
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40022000 	.word	0x40022000
 8004134:	40001800 	.word	0x40001800
 8004138:	40021c00 	.word	0x40021c00

0800413c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b0ae      	sub	sp, #184	@ 0xb8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004154:	f107 0320 	add.w	r3, r7, #32
 8004158:	2284      	movs	r2, #132	@ 0x84
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f015 fecb 	bl	8019ef8 <memset>
  if(huart->Instance==USART1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a53      	ldr	r2, [pc, #332]	@ (80042b4 <HAL_UART_MspInit+0x178>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d15d      	bne.n	8004228 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800416c:	2340      	movs	r3, #64	@ 0x40
 800416e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004170:	2300      	movs	r3, #0
 8004172:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004174:	f107 0320 	add.w	r3, r7, #32
 8004178:	4618      	mov	r0, r3
 800417a:	f006 fb4d 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004184:	f7ff f8a4 	bl	80032d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 800418a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418c:	4a4a      	ldr	r2, [pc, #296]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 800418e:	f043 0310 	orr.w	r3, r3, #16
 8004192:	6453      	str	r3, [r2, #68]	@ 0x44
 8004194:	4b48      	ldr	r3, [pc, #288]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a0:	4b45      	ldr	r3, [pc, #276]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	4a44      	ldr	r2, [pc, #272]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ac:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b8:	4b3f      	ldr	r3, [pc, #252]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	4a3e      	ldr	r2, [pc, #248]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80041c4:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	2302      	movs	r3, #2
 80041d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041e8:	2307      	movs	r3, #7
 80041ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80041ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4831      	ldr	r0, [pc, #196]	@ (80042bc <HAL_UART_MspInit+0x180>)
 80041f6:	f002 fdf1 	bl	8006ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80041fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004214:	2307      	movs	r3, #7
 8004216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800421a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800421e:	4619      	mov	r1, r3
 8004220:	4827      	ldr	r0, [pc, #156]	@ (80042c0 <HAL_UART_MspInit+0x184>)
 8004222:	f002 fddb 	bl	8006ddc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004226:	e040      	b.n	80042aa <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a25      	ldr	r2, [pc, #148]	@ (80042c4 <HAL_UART_MspInit+0x188>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d13b      	bne.n	80042aa <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004236:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004238:	2300      	movs	r3, #0
 800423a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800423c:	f107 0320 	add.w	r3, r7, #32
 8004240:	4618      	mov	r0, r3
 8004242:	f006 fae9 	bl	800a818 <HAL_RCCEx_PeriphCLKConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800424c:	f7ff f840 	bl	80032d0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004250:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	4a18      	ldr	r2, [pc, #96]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	6453      	str	r3, [r2, #68]	@ 0x44
 800425c:	4b16      	ldr	r3, [pc, #88]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 800425e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6313      	str	r3, [r2, #48]	@ 0x30
 8004274:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <HAL_UART_MspInit+0x17c>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004280:	23c0      	movs	r3, #192	@ 0xc0
 8004282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004292:	2303      	movs	r3, #3
 8004294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004298:	2308      	movs	r3, #8
 800429a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800429e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4808      	ldr	r0, [pc, #32]	@ (80042c8 <HAL_UART_MspInit+0x18c>)
 80042a6:	f002 fd99 	bl	8006ddc <HAL_GPIO_Init>
}
 80042aa:	bf00      	nop
 80042ac:	37b8      	adds	r7, #184	@ 0xb8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40011000 	.word	0x40011000
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020400 	.word	0x40020400
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40011400 	.word	0x40011400
 80042c8:	40020800 	.word	0x40020800

080042cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80042e0:	4b3a      	ldr	r3, [pc, #232]	@ (80043cc <HAL_FMC_MspInit+0x100>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d16d      	bne.n	80043c4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80042e8:	4b38      	ldr	r3, [pc, #224]	@ (80043cc <HAL_FMC_MspInit+0x100>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80042ee:	4b38      	ldr	r3, [pc, #224]	@ (80043d0 <HAL_FMC_MspInit+0x104>)
 80042f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f2:	4a37      	ldr	r2, [pc, #220]	@ (80043d0 <HAL_FMC_MspInit+0x104>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80042fa:	4b35      	ldr	r3, [pc, #212]	@ (80043d0 <HAL_FMC_MspInit+0x104>)
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004306:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800430a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004314:	2303      	movs	r3, #3
 8004316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004318:	230c      	movs	r3, #12
 800431a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	4619      	mov	r1, r3
 8004320:	482c      	ldr	r0, [pc, #176]	@ (80043d4 <HAL_FMC_MspInit+0x108>)
 8004322:	f002 fd5b 	bl	8006ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004326:	f248 1333 	movw	r3, #33075	@ 0x8133
 800432a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004334:	2303      	movs	r3, #3
 8004336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004338:	230c      	movs	r3, #12
 800433a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	4619      	mov	r1, r3
 8004340:	4825      	ldr	r0, [pc, #148]	@ (80043d8 <HAL_FMC_MspInit+0x10c>)
 8004342:	f002 fd4b 	bl	8006ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004346:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800434a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	2303      	movs	r3, #3
 8004356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004358:	230c      	movs	r3, #12
 800435a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	4619      	mov	r1, r3
 8004360:	481e      	ldr	r0, [pc, #120]	@ (80043dc <HAL_FMC_MspInit+0x110>)
 8004362:	f002 fd3b 	bl	8006ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004366:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800436a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	2302      	movs	r3, #2
 800436e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004374:	2303      	movs	r3, #3
 8004376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004378:	230c      	movs	r3, #12
 800437a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800437c:	1d3b      	adds	r3, r7, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4817      	ldr	r0, [pc, #92]	@ (80043e0 <HAL_FMC_MspInit+0x114>)
 8004382:	f002 fd2b 	bl	8006ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004386:	2328      	movs	r3, #40	@ 0x28
 8004388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004392:	2303      	movs	r3, #3
 8004394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004396:	230c      	movs	r3, #12
 8004398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4811      	ldr	r0, [pc, #68]	@ (80043e4 <HAL_FMC_MspInit+0x118>)
 80043a0:	f002 fd1c 	bl	8006ddc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80043a4:	2308      	movs	r3, #8
 80043a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b0:	2303      	movs	r3, #3
 80043b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80043b4:	230c      	movs	r3, #12
 80043b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	480a      	ldr	r0, [pc, #40]	@ (80043e8 <HAL_FMC_MspInit+0x11c>)
 80043be:	f002 fd0d 	bl	8006ddc <HAL_GPIO_Init>
 80043c2:	e000      	b.n	80043c6 <HAL_FMC_MspInit+0xfa>
    return;
 80043c4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20001524 	.word	0x20001524
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40021800 	.word	0x40021800
 80043dc:	40020c00 	.word	0x40020c00
 80043e0:	40021400 	.word	0x40021400
 80043e4:	40021c00 	.word	0x40021c00
 80043e8:	40020800 	.word	0x40020800

080043ec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80043f4:	f7ff ff6a 	bl	80042cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2b      	ldr	r2, [pc, #172]	@ (80044bc <HAL_SAI_MspInit+0xbc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d124      	bne.n	800445c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004412:	4b2b      	ldr	r3, [pc, #172]	@ (80044c0 <HAL_SAI_MspInit+0xc0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800441a:	4b2a      	ldr	r3, [pc, #168]	@ (80044c4 <HAL_SAI_MspInit+0xc4>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <HAL_SAI_MspInit+0xc4>)
 8004420:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004424:	6453      	str	r3, [r2, #68]	@ 0x44
 8004426:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <HAL_SAI_MspInit+0xc4>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004432:	4b23      	ldr	r3, [pc, #140]	@ (80044c0 <HAL_SAI_MspInit+0xc0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_SAI_MspInit+0xc0>)
 800443a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800443c:	23f0      	movs	r3, #240	@ 0xf0
 800443e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004440:	2302      	movs	r3, #2
 8004442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800444c:	230a      	movs	r3, #10
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4619      	mov	r1, r3
 8004456:	481c      	ldr	r0, [pc, #112]	@ (80044c8 <HAL_SAI_MspInit+0xc8>)
 8004458:	f002 fcc0 	bl	8006ddc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <HAL_SAI_MspInit+0xcc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d125      	bne.n	80044b2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004466:	4b16      	ldr	r3, [pc, #88]	@ (80044c0 <HAL_SAI_MspInit+0xc0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <HAL_SAI_MspInit+0xc4>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004472:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <HAL_SAI_MspInit+0xc4>)
 8004474:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004478:	6453      	str	r3, [r2, #68]	@ 0x44
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <HAL_SAI_MspInit+0xc4>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004486:	4b0e      	ldr	r3, [pc, #56]	@ (80044c0 <HAL_SAI_MspInit+0xc0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	4a0c      	ldr	r2, [pc, #48]	@ (80044c0 <HAL_SAI_MspInit+0xc0>)
 800448e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80044a2:	230a      	movs	r3, #10
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	4619      	mov	r1, r3
 80044ac:	4808      	ldr	r0, [pc, #32]	@ (80044d0 <HAL_SAI_MspInit+0xd0>)
 80044ae:	f002 fc95 	bl	8006ddc <HAL_GPIO_Init>

    }
}
 80044b2:	bf00      	nop
 80044b4:	3728      	adds	r7, #40	@ 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40015c04 	.word	0x40015c04
 80044c0:	20001528 	.word	0x20001528
 80044c4:	40023800 	.word	0x40023800
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40015c24 	.word	0x40015c24
 80044d0:	40021800 	.word	0x40021800

080044d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08e      	sub	sp, #56	@ 0x38
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80044e4:	4b33      	ldr	r3, [pc, #204]	@ (80045b4 <HAL_InitTick+0xe0>)
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	4a32      	ldr	r2, [pc, #200]	@ (80045b4 <HAL_InitTick+0xe0>)
 80044ea:	f043 0310 	orr.w	r3, r3, #16
 80044ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80044f0:	4b30      	ldr	r3, [pc, #192]	@ (80045b4 <HAL_InitTick+0xe0>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044fc:	f107 0210 	add.w	r2, r7, #16
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f006 f954 	bl	800a7b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004516:	f006 f925 	bl	800a764 <HAL_RCC_GetPCLK1Freq>
 800451a:	6378      	str	r0, [r7, #52]	@ 0x34
 800451c:	e004      	b.n	8004528 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800451e:	f006 f921 	bl	800a764 <HAL_RCC_GetPCLK1Freq>
 8004522:	4603      	mov	r3, r0
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <HAL_InitTick+0xe4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	0c9b      	lsrs	r3, r3, #18
 8004532:	3b01      	subs	r3, #1
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004536:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <HAL_InitTick+0xe8>)
 8004538:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <HAL_InitTick+0xec>)
 800453a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800453c:	4b1f      	ldr	r3, [pc, #124]	@ (80045bc <HAL_InitTick+0xe8>)
 800453e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004542:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004544:	4a1d      	ldr	r2, [pc, #116]	@ (80045bc <HAL_InitTick+0xe8>)
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800454a:	4b1c      	ldr	r3, [pc, #112]	@ (80045bc <HAL_InitTick+0xe8>)
 800454c:	2200      	movs	r2, #0
 800454e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004550:	4b1a      	ldr	r3, [pc, #104]	@ (80045bc <HAL_InitTick+0xe8>)
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004556:	4b19      	ldr	r3, [pc, #100]	@ (80045bc <HAL_InitTick+0xe8>)
 8004558:	2200      	movs	r2, #0
 800455a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800455c:	4817      	ldr	r0, [pc, #92]	@ (80045bc <HAL_InitTick+0xe8>)
 800455e:	f008 fcb0 	bl	800cec2 <HAL_TIM_Base_Init>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004568:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11b      	bne.n	80045a8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004570:	4812      	ldr	r0, [pc, #72]	@ (80045bc <HAL_InitTick+0xe8>)
 8004572:	f008 fcfd 	bl	800cf70 <HAL_TIM_Base_Start_IT>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800457c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004580:	2b00      	cmp	r3, #0
 8004582:	d111      	bne.n	80045a8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004584:	2036      	movs	r0, #54	@ 0x36
 8004586:	f001 f901 	bl	800578c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d808      	bhi.n	80045a2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004590:	2200      	movs	r2, #0
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	2036      	movs	r0, #54	@ 0x36
 8004596:	f001 f8dd 	bl	8005754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800459a:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <HAL_InitTick+0xf0>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	e002      	b.n	80045a8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80045a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3738      	adds	r7, #56	@ 0x38
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800
 80045b8:	431bde83 	.word	0x431bde83
 80045bc:	2000152c 	.word	0x2000152c
 80045c0:	40001000 	.word	0x40001000
 80045c4:	2000004c 	.word	0x2000004c

080045c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <NMI_Handler+0x4>

080045d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <HardFault_Handler+0x4>

080045d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <MemManage_Handler+0x4>

080045e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <BusFault_Handler+0x4>

080045e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <UsageFault_Handler+0x4>

080045f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004604:	4802      	ldr	r0, [pc, #8]	@ (8004610 <TIM6_DAC_IRQHandler+0x10>)
 8004606:	f008 fd82 	bl	800d10e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000152c 	.word	0x2000152c

08004614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004618:	4802      	ldr	r0, [pc, #8]	@ (8004624 <OTG_FS_IRQHandler+0x10>)
 800461a:	f003 f885 	bl	8007728 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20009d6c 	.word	0x20009d6c

08004628 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800462c:	4802      	ldr	r0, [pc, #8]	@ (8004638 <LTDC_IRQHandler+0x10>)
 800462e:	f005 f89f 	bl	8009770 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000a44 	.word	0x20000a44

0800463c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004640:	4802      	ldr	r0, [pc, #8]	@ (800464c <DMA2D_IRQHandler+0x10>)
 8004642:	f001 fedb 	bl	80063fc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	200008ac 	.word	0x200008ac

08004650 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004654:	4802      	ldr	r0, [pc, #8]	@ (8004660 <DMA2_Stream1_IRQHandler+0x10>)
 8004656:	f001 fc11 	bl	8005e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200014b0 	.word	0x200014b0

08004664 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004668:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <USART6_IRQHandler+0x2c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b10      	cmp	r3, #16
 8004674:	d106      	bne.n	8004684 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004676:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <USART6_IRQHandler+0x2c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2210      	movs	r2, #16
 800467c:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 800467e:	4804      	ldr	r0, [pc, #16]	@ (8004690 <USART6_IRQHandler+0x2c>)
 8004680:	f7fc ff7a 	bl	8001578 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004684:	4802      	ldr	r0, [pc, #8]	@ (8004690 <USART6_IRQHandler+0x2c>)
 8004686:	f009 ff8d 	bl	800e5a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000fe4 	.word	0x20000fe4

08004694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800469c:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <_sbrk+0x5c>)
 800469e:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <_sbrk+0x60>)
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046a8:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <_sbrk+0x64>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046b0:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <_sbrk+0x64>)
 80046b2:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <_sbrk+0x68>)
 80046b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046b6:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <_sbrk+0x64>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d207      	bcs.n	80046d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046c4:	f015 fc5a 	bl	8019f7c <__errno>
 80046c8:	4603      	mov	r3, r0
 80046ca:	220c      	movs	r2, #12
 80046cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	e009      	b.n	80046e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046d4:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <_sbrk+0x64>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046da:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <_sbrk+0x64>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	4a05      	ldr	r2, [pc, #20]	@ (80046f8 <_sbrk+0x64>)
 80046e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20050000 	.word	0x20050000
 80046f4:	00000400 	.word	0x00000400
 80046f8:	20001578 	.word	0x20001578
 80046fc:	2000a298 	.word	0x2000a298

08004700 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <SystemInit+0x20>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470a:	4a05      	ldr	r2, [pc, #20]	@ (8004720 <SystemInit+0x20>)
 800470c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004728:	f000 f803 	bl	8004732 <TIME_Platform_GetCurrentMs>
 800472c:	4603      	mov	r3, r0
}
 800472e:	4618      	mov	r0, r3
 8004730:	bd80      	pop	{r7, pc}

08004732 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004736:	f000 fc8d 	bl	8005054 <HAL_GetTick>
 800473a:	4603      	mov	r3, r0
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}

08004740 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <LOGGER_Connect+0x16>
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e016      	b.n	8004784 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004756:	223f      	movs	r2, #63	@ 0x3f
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	480c      	ldr	r0, [pc, #48]	@ (800478c <LOGGER_Connect+0x4c>)
 800475c:	f015 fbd4 	bl	8019f08 <strncpy>
    current_config.server_port = port;
 8004760:	4a0b      	ldr	r2, [pc, #44]	@ (8004790 <LOGGER_Connect+0x50>)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004766:	6839      	ldr	r1, [r7, #0]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8a5 	bl	80048b8 <LOGGER_Platform_Connect>
 800476e:	4603      	mov	r3, r0
 8004770:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <LOGGER_Connect+0x40>
        logger_connected = true;
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <LOGGER_Connect+0x54>)
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000007 	.word	0x20000007
 8004790:	20000004 	.word	0x20000004
 8004794:	2000157c 	.word	0x2000157c

08004798 <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 80047a0:	4b14      	ldr	r3, [pc, #80]	@ (80047f4 <LOGGER_Send+0x5c>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f083 0301 	eor.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <LOGGER_Send+0x1c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <LOGGER_Send+0x22>
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	e017      	b.n	80047ea <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 80047ba:	f7fc fae1 	bl	8000d80 <Network_IsConnected>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fb fd2d 	bl	8000224 <strlen>
 80047ca:	4603      	mov	r3, r0
 80047cc:	3301      	adds	r3, #1
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fc fa8b 	bl	8000cec <Network_SendBinary>
 80047d6:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e003      	b.n	80047ea <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f874 	bl	80048d0 <LOGGER_Platform_Send>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000157c 	.word	0x2000157c

080047f8 <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 80047f8:	b40e      	push	{r1, r2, r3}
 80047fa:	b590      	push	{r4, r7, lr}
 80047fc:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004800:	af00      	add	r7, sp, #0
 8004802:	4602      	mov	r2, r0
 8004804:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004808:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800480c:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <LOGGER_SendFormatted+0xb4>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004816:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d33c      	bcc.n	800489a <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004820:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004824:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004828:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <LOGGER_SendFormatted+0xb8>)
 800482a:	461c      	mov	r4, r3
 800482c:	4613      	mov	r3, r2
 800482e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004834:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004838:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004842:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484a:	f107 001c 	add.w	r0, r7, #28
 800484e:	4a19      	ldr	r2, [pc, #100]	@ (80048b4 <LOGGER_SendFormatted+0xbc>)
 8004850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004854:	f015 fabc 	bl	8019dd0 <sniprintf>
 8004858:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 800485c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004860:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004864:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004868:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 800486a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800486e:	f107 021c 	add.w	r2, r7, #28
 8004872:	18d0      	adds	r0, r2, r3
 8004874:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004878:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 800487c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004880:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800488a:	f015 fb27 	bl	8019edc <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 800488e:	f107 031c 	add.w	r3, r7, #28
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ff80 	bl	8004798 <LOGGER_Send>
 8004898:	e000      	b.n	800489c <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 800489a:	bf00      	nop
}
 800489c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80048a6:	b003      	add	sp, #12
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000004 	.word	0x20000004
 80048b0:	0801bc5c 	.word	0x0801bc5c
 80048b4:	0801bc6c 	.word	0x0801bc6c

080048b8 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <LOGGER_Platform_Send+0x14>
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	e01c      	b.n	800491e <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fb fc9d 	bl	8000224 <strlen>
 80048ea:	4603      	mov	r3, r0
 80048ec:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	dd12      	ble.n	800491a <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	480a      	ldr	r0, [pc, #40]	@ (8004928 <LOGGER_Platform_Send+0x58>)
 8004900:	f009 fc28 	bl	800e154 <HAL_UART_Transmit>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 800490a:	2364      	movs	r3, #100	@ 0x64
 800490c:	2202      	movs	r2, #2
 800490e:	4907      	ldr	r1, [pc, #28]	@ (800492c <LOGGER_Platform_Send+0x5c>)
 8004910:	4805      	ldr	r0, [pc, #20]	@ (8004928 <LOGGER_Platform_Send+0x58>)
 8004912:	f009 fc1f 	bl	800e154 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e001      	b.n	800491e <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000f5c 	.word	0x20000f5c
 800492c:	0801bc70 	.word	0x0801bc70

08004930 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d105      	bne.n	800494a <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 800493e:	4913      	ldr	r1, [pc, #76]	@ (800498c <UART_Connect+0x5c>)
 8004940:	2003      	movs	r0, #3
 8004942:	f7ff ff59 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e01c      	b.n	8004984 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4910      	ldr	r1, [pc, #64]	@ (8004990 <UART_Connect+0x60>)
 800494e:	2001      	movs	r0, #1
 8004950:	f7ff ff52 	bl	80047f8 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8fb 	bl	8004b50 <UART_Platform_Connect>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <UART_Connect+0x46>
        uart_connected = true;
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <UART_Connect+0x64>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	490a      	ldr	r1, [pc, #40]	@ (8004998 <UART_Connect+0x68>)
 800496e:	2001      	movs	r0, #1
 8004970:	f7ff ff42 	bl	80047f8 <LOGGER_SendFormatted>
 8004974:	e005      	b.n	8004982 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4908      	ldr	r1, [pc, #32]	@ (800499c <UART_Connect+0x6c>)
 800497c:	2003      	movs	r0, #3
 800497e:	f7ff ff3b 	bl	80047f8 <LOGGER_SendFormatted>
    }

    return status;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	0801bc74 	.word	0x0801bc74
 8004990:	0801bc98 	.word	0x0801bc98
 8004994:	2000157d 	.word	0x2000157d
 8004998:	0801bcb0 	.word	0x0801bcb0
 800499c:	0801bcd4 	.word	0x0801bcd4

080049a0 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 80049a8:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <UART_Send+0x70>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f083 0301 	eor.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 80049b6:	4917      	ldr	r1, [pc, #92]	@ (8004a14 <UART_Send+0x74>)
 80049b8:	2003      	movs	r0, #3
 80049ba:	f7ff ff1d 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e022      	b.n	8004a08 <UART_Send+0x68>
    }

    if (data == NULL) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 80049c8:	4913      	ldr	r1, [pc, #76]	@ (8004a18 <UART_Send+0x78>)
 80049ca:	2003      	movs	r0, #3
 80049cc:	f7ff ff14 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e019      	b.n	8004a08 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4911      	ldr	r1, [pc, #68]	@ (8004a1c <UART_Send+0x7c>)
 80049d8:	2000      	movs	r0, #0
 80049da:	f7ff ff0d 	bl	80047f8 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f99e 	bl	8004d20 <UART_Platform_Send>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d105      	bne.n	80049fa <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	490b      	ldr	r1, [pc, #44]	@ (8004a20 <UART_Send+0x80>)
 80049f2:	2000      	movs	r0, #0
 80049f4:	f7ff ff00 	bl	80047f8 <LOGGER_SendFormatted>
 80049f8:	e005      	b.n	8004a06 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4909      	ldr	r1, [pc, #36]	@ (8004a24 <UART_Send+0x84>)
 8004a00:	2003      	movs	r0, #3
 8004a02:	f7ff fef9 	bl	80047f8 <LOGGER_SendFormatted>
    }

    return status;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	2000157d 	.word	0x2000157d
 8004a14:	0801bd00 	.word	0x0801bd00
 8004a18:	0801bd24 	.word	0x0801bd24
 8004a1c:	0801bd44 	.word	0x0801bd44
 8004a20:	0801bd5c 	.word	0x0801bd5c
 8004a24:	0801bd78 	.word	0x0801bd78

08004a28 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8004a34:	4b22      	ldr	r3, [pc, #136]	@ (8004ac0 <UART_Receive+0x98>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f083 0301 	eor.w	r3, r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8004a42:	4920      	ldr	r1, [pc, #128]	@ (8004ac4 <UART_Receive+0x9c>)
 8004a44:	2003      	movs	r0, #3
 8004a46:	f7ff fed7 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e034      	b.n	8004ab8 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <UART_Receive+0x38>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	dd02      	ble.n	8004a60 <UART_Receive+0x38>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004a60:	4919      	ldr	r1, [pc, #100]	@ (8004ac8 <UART_Receive+0xa0>)
 8004a62:	2003      	movs	r0, #3
 8004a64:	f7ff fec8 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e025      	b.n	8004ab8 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	4917      	ldr	r1, [pc, #92]	@ (8004acc <UART_Receive+0xa4>)
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7ff fec1 	bl	80047f8 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f98c 	bl	8004d98 <UART_Platform_Receive>
 8004a80:	4603      	mov	r3, r0
 8004a82:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	490f      	ldr	r1, [pc, #60]	@ (8004ad0 <UART_Receive+0xa8>)
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7ff feb0 	bl	80047f8 <LOGGER_SendFormatted>
 8004a98:	e00d      	b.n	8004ab6 <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d104      	bne.n	8004aaa <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004aa0:	490c      	ldr	r1, [pc, #48]	@ (8004ad4 <UART_Receive+0xac>)
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7ff fea8 	bl	80047f8 <LOGGER_SendFormatted>
 8004aa8:	e005      	b.n	8004ab6 <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	461a      	mov	r2, r3
 8004aae:	490a      	ldr	r1, [pc, #40]	@ (8004ad8 <UART_Receive+0xb0>)
 8004ab0:	2003      	movs	r0, #3
 8004ab2:	f7ff fea1 	bl	80047f8 <LOGGER_SendFormatted>
    }

    return status;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	2000157d 	.word	0x2000157d
 8004ac4:	0801bd9c 	.word	0x0801bd9c
 8004ac8:	0801bdc4 	.word	0x0801bdc4
 8004acc:	0801bdf0 	.word	0x0801bdf0
 8004ad0:	0801be18 	.word	0x0801be18
 8004ad4:	0801be38 	.word	0x0801be38
 8004ad8:	0801be50 	.word	0x0801be50

08004adc <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
    return uart_connected;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <UART_IsConnected+0x14>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	2000157d 	.word	0x2000157d

08004af4 <flush_rx_buffer>:
// 전역 변수
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004afe:	e007      	b.n	8004b10 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8004b00:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <flush_rx_buffer+0x58>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004b10:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <flush_rx_buffer+0x58>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d106      	bne.n	8004b2c <flush_rx_buffer+0x38>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b63      	cmp	r3, #99	@ 0x63
 8004b22:	dded      	ble.n	8004b00 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004b24:	e002      	b.n	8004b2c <flush_rx_buffer+0x38>
        flush_count++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004b2c:	1cf9      	adds	r1, r7, #3
 8004b2e:	2301      	movs	r3, #1
 8004b30:	2201      	movs	r2, #1
 8004b32:	4806      	ldr	r0, [pc, #24]	@ (8004b4c <flush_rx_buffer+0x58>)
 8004b34:	f009 fb97 	bl	800e266 <HAL_UART_Receive>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <flush_rx_buffer+0x50>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b63      	cmp	r3, #99	@ 0x63
 8004b42:	ddf0      	ble.n	8004b26 <flush_rx_buffer+0x32>
    }
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000fe4 	.word	0x20000fe4

08004b50 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004b58:	4b5b      	ldr	r3, [pc, #364]	@ (8004cc8 <UART_Platform_Connect+0x178>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004b60:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004b62:	4b5a      	ldr	r3, [pc, #360]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b68:	4959      	ldr	r1, [pc, #356]	@ (8004cd0 <UART_Platform_Connect+0x180>)
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f7ff fe44 	bl	80047f8 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004b70:	4b56      	ldr	r3, [pc, #344]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004b78:	4956      	ldr	r1, [pc, #344]	@ (8004cd4 <UART_Platform_Connect+0x184>)
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f7ff fe3c 	bl	80047f8 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004b80:	4b52      	ldr	r3, [pc, #328]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4952      	ldr	r1, [pc, #328]	@ (8004cd8 <UART_Platform_Connect+0x188>)
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7ff fe32 	bl	80047f8 <LOGGER_SendFormatted>
 8004b94:	e018      	b.n	8004bc8 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8004b96:	4951      	ldr	r1, [pc, #324]	@ (8004cdc <UART_Platform_Connect+0x18c>)
 8004b98:	2003      	movs	r0, #3
 8004b9a:	f7ff fe2d 	bl	80047f8 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8004ce0 <UART_Platform_Connect+0x190>)
 8004ba2:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8004ce0 <UART_Platform_Connect+0x190>)
 8004ba6:	4a49      	ldr	r2, [pc, #292]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004baa:	4b48      	ldr	r3, [pc, #288]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004bb2:	494c      	ldr	r1, [pc, #304]	@ (8004ce4 <UART_Platform_Connect+0x194>)
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f7ff fe1f 	bl	80047f8 <LOGGER_SendFormatted>
 8004bba:	e005      	b.n	8004bc8 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004bbc:	494a      	ldr	r1, [pc, #296]	@ (8004ce8 <UART_Platform_Connect+0x198>)
 8004bbe:	2003      	movs	r0, #3
 8004bc0:	f7ff fe1a 	bl	80047f8 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e07a      	b.n	8004cbe <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8004bc8:	4b48      	ldr	r3, [pc, #288]	@ (8004cec <UART_Platform_Connect+0x19c>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004bd0:	483e      	ldr	r0, [pc, #248]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004bd2:	f009 fc54 	bl	800e47e <HAL_UART_DMAStop>
        dma_receiving = false;
 8004bd6:	4b45      	ldr	r3, [pc, #276]	@ (8004cec <UART_Platform_Connect+0x19c>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004bdc:	4944      	ldr	r1, [pc, #272]	@ (8004cf0 <UART_Platform_Connect+0x1a0>)
 8004bde:	2001      	movs	r0, #1
 8004be0:	f7ff fe0a 	bl	80047f8 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004be4:	4b39      	ldr	r3, [pc, #228]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004be6:	2220      	movs	r2, #32
 8004be8:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8004bea:	4b38      	ldr	r3, [pc, #224]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8004bf2:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d026      	beq.n	8004c48 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8004bfa:	4b34      	ldr	r3, [pc, #208]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d01a      	beq.n	8004c3e <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8004c08:	493a      	ldr	r1, [pc, #232]	@ (8004cf4 <UART_Platform_Connect+0x1a4>)
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7ff fdf4 	bl	80047f8 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8004c10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 ffe1 	bl	8005bdc <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ff2e 	bl	8005a80 <HAL_DMA_Init>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8004c2a:	4933      	ldr	r1, [pc, #204]	@ (8004cf8 <UART_Platform_Connect+0x1a8>)
 8004c2c:	2003      	movs	r0, #3
 8004c2e:	f7ff fde3 	bl	80047f8 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e043      	b.n	8004cbe <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8004c36:	4931      	ldr	r1, [pc, #196]	@ (8004cfc <UART_Platform_Connect+0x1ac>)
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f7ff fddd 	bl	80047f8 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004c3e:	4b23      	ldr	r3, [pc, #140]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8004c48:	f7ff ff54 	bl	8004af4 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8004c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d00 <UART_Platform_Connect+0x1b0>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8004c52:	4b2c      	ldr	r3, [pc, #176]	@ (8004d04 <UART_Platform_Connect+0x1b4>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8004c58:	4b2b      	ldr	r3, [pc, #172]	@ (8004d08 <UART_Platform_Connect+0x1b8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c62:	2100      	movs	r1, #0
 8004c64:	4829      	ldr	r0, [pc, #164]	@ (8004d0c <UART_Platform_Connect+0x1bc>)
 8004c66:	f015 f947 	bl	8019ef8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8004c6a:	4929      	ldr	r1, [pc, #164]	@ (8004d10 <UART_Platform_Connect+0x1c0>)
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f7ff fdc3 	bl	80047f8 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c76:	4925      	ldr	r1, [pc, #148]	@ (8004d0c <UART_Platform_Connect+0x1bc>)
 8004c78:	4814      	ldr	r0, [pc, #80]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004c7a:	f009 fbbc 	bl	800e3f6 <HAL_UART_Receive_DMA>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8004c88:	4b18      	ldr	r3, [pc, #96]	@ (8004cec <UART_Platform_Connect+0x19c>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8004c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c92:	4920      	ldr	r1, [pc, #128]	@ (8004d14 <UART_Platform_Connect+0x1c4>)
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7ff fdaf 	bl	80047f8 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e00f      	b.n	8004cbe <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	491d      	ldr	r1, [pc, #116]	@ (8004d18 <UART_Platform_Connect+0x1c8>)
 8004ca4:	2003      	movs	r0, #3
 8004ca6:	f7ff fda7 	bl	80047f8 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8004caa:	4b08      	ldr	r3, [pc, #32]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004cac:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004cae:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <UART_Platform_Connect+0x17c>)
 8004cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cb4:	4919      	ldr	r1, [pc, #100]	@ (8004d1c <UART_Platform_Connect+0x1cc>)
 8004cb6:	2003      	movs	r0, #3
 8004cb8:	f7ff fd9e 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004cbc:	2301      	movs	r3, #1
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000157e 	.word	0x2000157e
 8004ccc:	20000fe4 	.word	0x20000fe4
 8004cd0:	0801c04c 	.word	0x0801c04c
 8004cd4:	0801c078 	.word	0x0801c078
 8004cd8:	0801c0a0 	.word	0x0801c0a0
 8004cdc:	0801c0bc 	.word	0x0801c0bc
 8004ce0:	200014b0 	.word	0x200014b0
 8004ce4:	0801c0f8 	.word	0x0801c0f8
 8004ce8:	0801c124 	.word	0x0801c124
 8004cec:	2000157f 	.word	0x2000157f
 8004cf0:	0801c150 	.word	0x0801c150
 8004cf4:	0801c17c 	.word	0x0801c17c
 8004cf8:	0801c1ac 	.word	0x0801c1ac
 8004cfc:	0801c1d8 	.word	0x0801c1d8
 8004d00:	20001510 	.word	0x20001510
 8004d04:	20001511 	.word	0x20001511
 8004d08:	20001512 	.word	0x20001512
 8004d0c:	200010a8 	.word	0x200010a8
 8004d10:	0801c204 	.word	0x0801c204
 8004d14:	0801c22c 	.word	0x0801c22c
 8004d18:	0801c270 	.word	0x0801c270
 8004d1c:	0801c2ac 	.word	0x0801c2ac

08004d20 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d006      	beq.n	8004d3c <UART_Platform_Send+0x1c>
 8004d2e:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <UART_Platform_Send+0x6c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	f083 0301 	eor.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <UART_Platform_Send+0x20>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e021      	b.n	8004d84 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fb fa6f 	bl	8000224 <strlen>
 8004d46:	4603      	mov	r3, r0
 8004d48:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <UART_Platform_Send+0x34>
 8004d50:	2300      	movs	r3, #0
 8004d52:	e017      	b.n	8004d84 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004d54:	f7ff fece 	bl	8004af4 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	480b      	ldr	r0, [pc, #44]	@ (8004d90 <UART_Platform_Send+0x70>)
 8004d64:	f009 f9f6 	bl	800e154 <HAL_UART_Transmit>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e006      	b.n	8004d84 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4906      	ldr	r1, [pc, #24]	@ (8004d94 <UART_Platform_Send+0x74>)
 8004d7c:	2003      	movs	r0, #3
 8004d7e:	f7ff fd3b 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004d82:	2301      	movs	r3, #1
    }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	2000157e 	.word	0x2000157e
 8004d90:	20000fe4 	.word	0x20000fe4
 8004d94:	0801c30c 	.word	0x0801c30c

08004d98 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	@ 0x28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <UART_Platform_Receive+0x26>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <UART_Platform_Receive+0x26>
 8004db0:	4b74      	ldr	r3, [pc, #464]	@ (8004f84 <UART_Platform_Receive+0x1ec>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f083 0301 	eor.w	r3, r3, #1
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0dc      	b.n	8004f7c <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dc04      	bgt.n	8004dd2 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0d4      	b.n	8004f7c <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8004dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f88 <UART_Platform_Receive+0x1f0>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f083 0301 	eor.w	r3, r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0c8      	b.n	8004f7c <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8004dea:	4b68      	ldr	r3, [pc, #416]	@ (8004f8c <UART_Platform_Receive+0x1f4>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8004df4:	4b65      	ldr	r3, [pc, #404]	@ (8004f8c <UART_Platform_Receive+0x1f4>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8004dfa:	4965      	ldr	r1, [pc, #404]	@ (8004f90 <UART_Platform_Receive+0x1f8>)
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	f7ff fcfb 	bl	80047f8 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e0ba      	b.n	8004f7c <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8004e06:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <UART_Platform_Receive+0x1fc>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80b4 	beq.w	8004f7a <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8004e12:	4b60      	ldr	r3, [pc, #384]	@ (8004f94 <UART_Platform_Receive+0x1fc>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8004e18:	4b5f      	ldr	r3, [pc, #380]	@ (8004f98 <UART_Platform_Receive+0x200>)
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 8004e1e:	8b7b      	ldrh	r3, [r7, #26]
 8004e20:	461a      	mov	r2, r3
 8004e22:	495e      	ldr	r1, [pc, #376]	@ (8004f9c <UART_Platform_Receive+0x204>)
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7ff fce7 	bl	80047f8 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8004e2a:	8b7b      	ldrh	r3, [r7, #26]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 809e 	beq.w	8004f6e <UART_Platform_Receive+0x1d6>
 8004e32:	8b7b      	ldrh	r3, [r7, #26]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f340 8099 	ble.w	8004f6e <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8004e3c:	8b7b      	ldrh	r3, [r7, #26]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4957      	ldr	r1, [pc, #348]	@ (8004fa0 <UART_Platform_Receive+0x208>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f015 f8c6 	bl	8019fd4 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8004e48:	8b7b      	ldrh	r3, [r7, #26]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8004e52:	8b7a      	ldrh	r2, [r7, #26]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8004e58:	8b7a      	ldrh	r2, [r7, #26]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4951      	ldr	r1, [pc, #324]	@ (8004fa4 <UART_Platform_Receive+0x20c>)
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f7ff fcca 	bl	80047f8 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8004e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e68:	2100      	movs	r1, #0
 8004e6a:	484d      	ldr	r0, [pc, #308]	@ (8004fa0 <UART_Platform_Receive+0x208>)
 8004e6c:	f015 f844 	bl	8019ef8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8004e70:	484d      	ldr	r0, [pc, #308]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004e72:	f009 fb04 	bl	800e47e <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8004e76:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8004e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2202      	movs	r2, #2
 8004e84:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8004e86:	4b48      	ldr	r3, [pc, #288]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8004e8e:	4b46      	ldr	r3, [pc, #280]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2208      	movs	r2, #8
 8004e94:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8004e96:	4b44      	ldr	r3, [pc, #272]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8004e9e:	4b42      	ldr	r3, [pc, #264]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d025      	beq.n	8004ef2 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8004ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004eaa:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004eac:	e00b      	b.n	8004ec6 <UART_Platform_Receive+0x12e>
                    timeout--;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e002      	b.n	8004ec0 <UART_Platform_Receive+0x128>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b63      	cmp	r3, #99	@ 0x63
 8004ec4:	ddf9      	ble.n	8004eba <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004ec6:	4b38      	ldr	r3, [pc, #224]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d002      	beq.n	8004eda <UART_Platform_Receive+0x142>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dce9      	bgt.n	8004eae <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8004ee0:	4932      	ldr	r1, [pc, #200]	@ (8004fac <UART_Platform_Receive+0x214>)
 8004ee2:	2002      	movs	r0, #2
 8004ee4:	f7ff fc88 	bl	80047f8 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8004efa:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004efc:	2220      	movs	r2, #32
 8004efe:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e002      	b.n	8004f0c <UART_Platform_Receive+0x174>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004f12:	4293      	cmp	r3, r2
 8004f14:	ddf7      	ble.n	8004f06 <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f1a:	4921      	ldr	r1, [pc, #132]	@ (8004fa0 <UART_Platform_Receive+0x208>)
 8004f1c:	4822      	ldr	r0, [pc, #136]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004f1e:	f009 fa6a 	bl	800e3f6 <HAL_UART_Receive_DMA>
 8004f22:	4603      	mov	r3, r0
 8004f24:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8004f26:	7e7b      	ldrb	r3, [r7, #25]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8004f2c:	4920      	ldr	r1, [pc, #128]	@ (8004fb0 <UART_Platform_Receive+0x218>)
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f7ff fc62 	bl	80047f8 <LOGGER_SendFormatted>
 8004f34:	e019      	b.n	8004f6a <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8004f36:	7e7a      	ldrb	r2, [r7, #25]
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004f3a:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	460b      	mov	r3, r1
 8004f46:	491b      	ldr	r1, [pc, #108]	@ (8004fb4 <UART_Platform_Receive+0x21c>)
 8004f48:	2002      	movs	r0, #2
 8004f4a:	f7ff fc55 	bl	80047f8 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8004f56:	4b14      	ldr	r3, [pc, #80]	@ (8004fa8 <UART_Platform_Receive+0x210>)
 8004f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	4915      	ldr	r1, [pc, #84]	@ (8004fb8 <UART_Platform_Receive+0x220>)
 8004f64:	2002      	movs	r0, #2
 8004f66:	f7ff fc47 	bl	80047f8 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e006      	b.n	8004f7c <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8004f6e:	8b7a      	ldrh	r2, [r7, #26]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4912      	ldr	r1, [pc, #72]	@ (8004fbc <UART_Platform_Receive+0x224>)
 8004f74:	2002      	movs	r0, #2
 8004f76:	f7ff fc3f 	bl	80047f8 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8004f7a:	2302      	movs	r3, #2
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	2000157e 	.word	0x2000157e
 8004f88:	2000157f 	.word	0x2000157f
 8004f8c:	20001511 	.word	0x20001511
 8004f90:	0801c344 	.word	0x0801c344
 8004f94:	20001510 	.word	0x20001510
 8004f98:	20001512 	.word	0x20001512
 8004f9c:	0801c374 	.word	0x0801c374
 8004fa0:	200010a8 	.word	0x200010a8
 8004fa4:	0801c398 	.word	0x0801c398
 8004fa8:	20000fe4 	.word	0x20000fe4
 8004fac:	0801c3c4 	.word	0x0801c3c4
 8004fb0:	0801c400 	.word	0x0801c400
 8004fb4:	0801c430 	.word	0x0801c430
 8004fb8:	0801c478 	.word	0x0801c478
 8004fbc:	0801c494 	.word	0x0801c494

08004fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ff8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fc4:	f7ff fb9c 	bl	8004700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fc8:	480c      	ldr	r0, [pc, #48]	@ (8004ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fca:	490d      	ldr	r1, [pc, #52]	@ (8005000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fd0:	e002      	b.n	8004fd8 <LoopCopyDataInit>

08004fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fd6:	3304      	adds	r3, #4

08004fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fdc:	d3f9      	bcc.n	8004fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fde:	4a0a      	ldr	r2, [pc, #40]	@ (8005008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800500c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fe4:	e001      	b.n	8004fea <LoopFillZerobss>

08004fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fe8:	3204      	adds	r2, #4

08004fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fec:	d3fb      	bcc.n	8004fe6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004fee:	f014 ffcb 	bl	8019f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ff2:	f7fc fb55 	bl	80016a0 <main>
  bx  lr    
 8004ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ff8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005000:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8005004:	0801c660 	.word	0x0801c660
  ldr r2, =_sbss
 8005008:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800500c:	2000a294 	.word	0x2000a294

08005010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005010:	e7fe      	b.n	8005010 <ADC_IRQHandler>

08005012 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005016:	2003      	movs	r0, #3
 8005018:	f000 fb91 	bl	800573e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800501c:	2000      	movs	r0, #0
 800501e:	f7ff fa59 	bl	80044d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005022:	f7fe f9bb 	bl	800339c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_IncTick+0x20>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <HAL_IncTick+0x24>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4413      	add	r3, r2
 800503c:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <HAL_IncTick+0x24>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000050 	.word	0x20000050
 8005050:	20001580 	.word	0x20001580

08005054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return uwTick;
 8005058:	4b03      	ldr	r3, [pc, #12]	@ (8005068 <HAL_GetTick+0x14>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	20001580 	.word	0x20001580

0800506c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7ff ffee 	bl	8005054 <HAL_GetTick>
 8005078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d005      	beq.n	8005092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <HAL_Delay+0x44>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005092:	bf00      	nop
 8005094:	f7ff ffde 	bl	8005054 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d8f7      	bhi.n	8005094 <HAL_Delay+0x28>
  {
  }
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000050 	.word	0x20000050

080050b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e031      	b.n	800512e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fe f98a 	bl	80033ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d116      	bne.n	8005120 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050f6:	4b10      	ldr	r3, [pc, #64]	@ (8005138 <HAL_ADC_Init+0x84>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f974 	bl	80053f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	f043 0201 	orr.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	641a      	str	r2, [r3, #64]	@ 0x40
 800511e:	e001      	b.n	8005124 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	ffffeefd 	.word	0xffffeefd

0800513c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x1c>
 8005154:	2302      	movs	r3, #2
 8005156:	e13a      	b.n	80053ce <HAL_ADC_ConfigChannel+0x292>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b09      	cmp	r3, #9
 8005166:	d93a      	bls.n	80051de <HAL_ADC_ConfigChannel+0xa2>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005170:	d035      	beq.n	80051de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68d9      	ldr	r1, [r3, #12]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	4613      	mov	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4413      	add	r3, r2
 8005186:	3b1e      	subs	r3, #30
 8005188:	2207      	movs	r2, #7
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43da      	mvns	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	400a      	ands	r2, r1
 8005196:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a8f      	ldr	r2, [pc, #572]	@ (80053dc <HAL_ADC_ConfigChannel+0x2a0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10a      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68d9      	ldr	r1, [r3, #12]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	061a      	lsls	r2, r3, #24
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051b6:	e039      	b.n	800522c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4618      	mov	r0, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4403      	add	r3, r0
 80051d0:	3b1e      	subs	r3, #30
 80051d2:	409a      	lsls	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051dc:	e026      	b.n	800522c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6919      	ldr	r1, [r3, #16]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2207      	movs	r2, #7
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43da      	mvns	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	400a      	ands	r2, r1
 8005204:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6919      	ldr	r1, [r3, #16]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	4618      	mov	r0, r3
 8005218:	4603      	mov	r3, r0
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4403      	add	r3, r0
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	409a      	lsls	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b06      	cmp	r3, #6
 8005232:	d824      	bhi.n	800527e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	3b05      	subs	r3, #5
 8005246:	221f      	movs	r2, #31
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43da      	mvns	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	400a      	ands	r2, r1
 8005254:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	4618      	mov	r0, r3
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	3b05      	subs	r3, #5
 8005270:	fa00 f203 	lsl.w	r2, r0, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	635a      	str	r2, [r3, #52]	@ 0x34
 800527c:	e04c      	b.n	8005318 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d824      	bhi.n	80052d0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	3b23      	subs	r3, #35	@ 0x23
 8005298:	221f      	movs	r2, #31
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43da      	mvns	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	400a      	ands	r2, r1
 80052a6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4618      	mov	r0, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	3b23      	subs	r3, #35	@ 0x23
 80052c2:	fa00 f203 	lsl.w	r2, r0, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ce:	e023      	b.n	8005318 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	3b41      	subs	r3, #65	@ 0x41
 80052e2:	221f      	movs	r2, #31
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43da      	mvns	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	400a      	ands	r2, r1
 80052f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4618      	mov	r0, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	3b41      	subs	r3, #65	@ 0x41
 800530c:	fa00 f203 	lsl.w	r2, r0, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	@ (80053e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10a      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x1fc>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800532a:	d105      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800532c:	4b2d      	ldr	r3, [pc, #180]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a2c      	ldr	r2, [pc, #176]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005332:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005336:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10f      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x226>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b12      	cmp	r3, #18
 8005348:	d10b      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800534a:	4b26      	ldr	r3, [pc, #152]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4a25      	ldr	r2, [pc, #148]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005350:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005354:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005356:	4b23      	ldr	r3, [pc, #140]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4a22      	ldr	r2, [pc, #136]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800535c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005360:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	@ (80053e0 <HAL_ADC_ConfigChannel+0x2a4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d12b      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x288>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <HAL_ADC_ConfigChannel+0x2a0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <HAL_ADC_ConfigChannel+0x242>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b11      	cmp	r3, #17
 800537c:	d122      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800537e:	4b19      	ldr	r3, [pc, #100]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005384:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005388:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800538a:	4b16      	ldr	r3, [pc, #88]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4a15      	ldr	r2, [pc, #84]	@ (80053e4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005394:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a10      	ldr	r2, [pc, #64]	@ (80053dc <HAL_ADC_ConfigChannel+0x2a0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d111      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_ADC_ConfigChannel+0x2ac>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a11      	ldr	r2, [pc, #68]	@ (80053ec <HAL_ADC_ConfigChannel+0x2b0>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0c9a      	lsrs	r2, r3, #18
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053b6:	e002      	b.n	80053be <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f9      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	10000012 	.word	0x10000012
 80053e0:	40012000 	.word	0x40012000
 80053e4:	40012300 	.word	0x40012300
 80053e8:	20000000 	.word	0x20000000
 80053ec:	431bde83 	.word	0x431bde83

080053f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80053f8:	4b78      	ldr	r3, [pc, #480]	@ (80055dc <ADC_Init+0x1ec>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a77      	ldr	r2, [pc, #476]	@ (80055dc <ADC_Init+0x1ec>)
 80053fe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005402:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005404:	4b75      	ldr	r3, [pc, #468]	@ (80055dc <ADC_Init+0x1ec>)
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4973      	ldr	r1, [pc, #460]	@ (80055dc <ADC_Init+0x1ec>)
 800540e:	4313      	orrs	r3, r2
 8005410:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	4a58      	ldr	r2, [pc, #352]	@ (80055e0 <ADC_Init+0x1f0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d022      	beq.n	80054ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6899      	ldr	r1, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	e00f      	b.n	80054ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0202 	bic.w	r2, r2, #2
 80054f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6899      	ldr	r1, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	005a      	lsls	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	3b01      	subs	r3, #1
 8005544:	035a      	lsls	r2, r3, #13
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	e007      	b.n	8005560 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800555e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800556e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	3b01      	subs	r3, #1
 800557c:	051a      	lsls	r2, r3, #20
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6899      	ldr	r1, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055a2:	025a      	lsls	r2, r3, #9
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	029a      	lsls	r2, r3, #10
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012300 	.word	0x40012300
 80055e0:	0f000001 	.word	0x0f000001

080055e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <__NVIC_SetPriorityGrouping+0x40>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005600:	4013      	ands	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <__NVIC_SetPriorityGrouping+0x44>)
 800560e:	4313      	orrs	r3, r2
 8005610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005612:	4a04      	ldr	r2, [pc, #16]	@ (8005624 <__NVIC_SetPriorityGrouping+0x40>)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	60d3      	str	r3, [r2, #12]
}
 8005618:	bf00      	nop
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	e000ed00 	.word	0xe000ed00
 8005628:	05fa0000 	.word	0x05fa0000

0800562c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <__NVIC_GetPriorityGrouping+0x18>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	f003 0307 	and.w	r3, r3, #7
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	e000ed00 	.word	0xe000ed00

08005648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005656:	2b00      	cmp	r3, #0
 8005658:	db0b      	blt.n	8005672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	f003 021f 	and.w	r2, r3, #31
 8005660:	4907      	ldr	r1, [pc, #28]	@ (8005680 <__NVIC_EnableIRQ+0x38>)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	2001      	movs	r0, #1
 800566a:	fa00 f202 	lsl.w	r2, r0, r2
 800566e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	e000e100 	.word	0xe000e100

08005684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	6039      	str	r1, [r7, #0]
 800568e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005694:	2b00      	cmp	r3, #0
 8005696:	db0a      	blt.n	80056ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	b2da      	uxtb	r2, r3
 800569c:	490c      	ldr	r1, [pc, #48]	@ (80056d0 <__NVIC_SetPriority+0x4c>)
 800569e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a2:	0112      	lsls	r2, r2, #4
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	440b      	add	r3, r1
 80056a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056ac:	e00a      	b.n	80056c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4908      	ldr	r1, [pc, #32]	@ (80056d4 <__NVIC_SetPriority+0x50>)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	3b04      	subs	r3, #4
 80056bc:	0112      	lsls	r2, r2, #4
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	440b      	add	r3, r1
 80056c2:	761a      	strb	r2, [r3, #24]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	e000e100 	.word	0xe000e100
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	@ 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f1c3 0307 	rsb	r3, r3, #7
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	bf28      	it	cs
 80056f6:	2304      	movcs	r3, #4
 80056f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	3304      	adds	r3, #4
 80056fe:	2b06      	cmp	r3, #6
 8005700:	d902      	bls.n	8005708 <NVIC_EncodePriority+0x30>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3b03      	subs	r3, #3
 8005706:	e000      	b.n	800570a <NVIC_EncodePriority+0x32>
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800570c:	f04f 32ff 	mov.w	r2, #4294967295
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43da      	mvns	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	401a      	ands	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005720:	f04f 31ff 	mov.w	r1, #4294967295
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	fa01 f303 	lsl.w	r3, r1, r3
 800572a:	43d9      	mvns	r1, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005730:	4313      	orrs	r3, r2
         );
}
 8005732:	4618      	mov	r0, r3
 8005734:	3724      	adds	r7, #36	@ 0x24
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ff4c 	bl	80055e4 <__NVIC_SetPriorityGrouping>
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005766:	f7ff ff61 	bl	800562c <__NVIC_GetPriorityGrouping>
 800576a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6978      	ldr	r0, [r7, #20]
 8005772:	f7ff ffb1 	bl	80056d8 <NVIC_EncodePriority>
 8005776:	4602      	mov	r2, r0
 8005778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff80 	bl	8005684 <__NVIC_SetPriority>
}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff ff54 	bl	8005648 <__NVIC_EnableIRQ>
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e054      	b.n	8005864 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7f5b      	ldrb	r3, [r3, #29]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fd fe68 	bl	80034a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	791b      	ldrb	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10c      	bne.n	80057f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a22      	ldr	r2, [pc, #136]	@ (800586c <HAL_CRC_Init+0xc4>)
 80057e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0218 	bic.w	r2, r2, #24
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	e00c      	b.n	8005812 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	461a      	mov	r2, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f834 	bl	8005870 <HAL_CRCEx_Polynomial_Set>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e028      	b.n	8005864 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	795b      	ldrb	r3, [r3, #5]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f04f 32ff 	mov.w	r2, #4294967295
 8005822:	611a      	str	r2, [r3, #16]
 8005824:	e004      	b.n	8005830 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6912      	ldr	r2, [r2, #16]
 800582e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	04c11db7 	.word	0x04c11db7

08005870 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005880:	231f      	movs	r3, #31
 8005882:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
 8005892:	e063      	b.n	800595c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005894:	bf00      	nop
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1e5a      	subs	r2, r3, #1
 800589a:	613a      	str	r2, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <HAL_CRCEx_Polynomial_Set+0x44>
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b18      	cmp	r3, #24
 80058b8:	d846      	bhi.n	8005948 <HAL_CRCEx_Polynomial_Set+0xd8>
 80058ba:	a201      	add	r2, pc, #4	@ (adr r2, 80058c0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	0800594f 	.word	0x0800594f
 80058c4:	08005949 	.word	0x08005949
 80058c8:	08005949 	.word	0x08005949
 80058cc:	08005949 	.word	0x08005949
 80058d0:	08005949 	.word	0x08005949
 80058d4:	08005949 	.word	0x08005949
 80058d8:	08005949 	.word	0x08005949
 80058dc:	08005949 	.word	0x08005949
 80058e0:	0800593d 	.word	0x0800593d
 80058e4:	08005949 	.word	0x08005949
 80058e8:	08005949 	.word	0x08005949
 80058ec:	08005949 	.word	0x08005949
 80058f0:	08005949 	.word	0x08005949
 80058f4:	08005949 	.word	0x08005949
 80058f8:	08005949 	.word	0x08005949
 80058fc:	08005949 	.word	0x08005949
 8005900:	08005931 	.word	0x08005931
 8005904:	08005949 	.word	0x08005949
 8005908:	08005949 	.word	0x08005949
 800590c:	08005949 	.word	0x08005949
 8005910:	08005949 	.word	0x08005949
 8005914:	08005949 	.word	0x08005949
 8005918:	08005949 	.word	0x08005949
 800591c:	08005949 	.word	0x08005949
 8005920:	08005925 	.word	0x08005925
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b06      	cmp	r3, #6
 8005928:	d913      	bls.n	8005952 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800592e:	e010      	b.n	8005952 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b07      	cmp	r3, #7
 8005934:	d90f      	bls.n	8005956 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800593a:	e00c      	b.n	8005956 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b0f      	cmp	r3, #15
 8005940:	d90b      	bls.n	800595a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005946:	e008      	b.n	800595a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75fb      	strb	r3, [r7, #23]
        break;
 800594c:	e006      	b.n	800595c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800594e:	bf00      	nop
 8005950:	e004      	b.n	800595c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800595a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 0118 	bic.w	r1, r3, #24
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	430a      	orrs	r2, r1
 800597c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e069      	b.n	8005a72 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fd fd98 	bl	80034e0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <HAL_DCMI_Init+0xf0>)
 80059d2:	400b      	ands	r3, r1
 80059d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6819      	ldr	r1, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80059ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80059f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005a02:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005a0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005a1a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d112      	bne.n	8005a52 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7f1b      	ldrb	r3, [r3, #28]
 8005a30:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7f5b      	ldrb	r3, [r3, #29]
 8005a36:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a38:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7f9b      	ldrb	r3, [r3, #30]
 8005a3e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005a40:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	7fdb      	ldrb	r3, [r3, #31]
 8005a48:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005a4e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005a50:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 021e 	orr.w	r2, r2, #30
 8005a60:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	ffe0f007 	.word	0xffe0f007

08005a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a8c:	f7ff fae2 	bl	8005054 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e099      	b.n	8005bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005abc:	e00f      	b.n	8005ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005abe:	f7ff fac9 	bl	8005054 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d908      	bls.n	8005ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e078      	b.n	8005bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e8      	bne.n	8005abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4b38      	ldr	r3, [pc, #224]	@ (8005bd8 <HAL_DMA_Init+0x158>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d107      	bne.n	8005b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	4313      	orrs	r3, r2
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0307 	bic.w	r3, r3, #7
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d117      	bne.n	8005ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fb73 	bl	8006270 <DMA_CheckFifoParam>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2240      	movs	r2, #64	@ 0x40
 8005b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e016      	b.n	8005bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fb2a 	bl	8006204 <DMA_CalcBaseAndBitshift>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb8:	223f      	movs	r2, #63	@ 0x3f
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	f010803f 	.word	0xf010803f

08005bdc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e050      	b.n	8005c90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d101      	bne.n	8005bfe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e048      	b.n	8005c90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2221      	movs	r2, #33	@ 0x21
 8005c3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fae0 	bl	8006204 <DMA_CalcBaseAndBitshift>
 8005c44:	4603      	mov	r3, r0
 8005c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4c:	223f      	movs	r2, #63	@ 0x3f
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_DMA_Start_IT+0x26>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e048      	b.n	8005d50 <HAL_DMA_Start_IT+0xb8>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d137      	bne.n	8005d42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa5e 	bl	80061a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf0:	223f      	movs	r2, #63	@ 0x3f
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0216 	orr.w	r2, r2, #22
 8005d06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d16:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0208 	orr.w	r2, r2, #8
 8005d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e005      	b.n	8005d4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d66:	f7ff f975 	bl	8005054 <HAL_GetTick>
 8005d6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d008      	beq.n	8005d8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2280      	movs	r2, #128	@ 0x80
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e052      	b.n	8005e30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0216 	bic.w	r2, r2, #22
 8005d98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <HAL_DMA_Abort+0x62>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0208 	bic.w	r2, r2, #8
 8005dc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dda:	e013      	b.n	8005e04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ddc:	f7ff f93a 	bl	8005054 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d90c      	bls.n	8005e04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2203      	movs	r2, #3
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e015      	b.n	8005e30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e4      	bne.n	8005ddc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e16:	223f      	movs	r2, #63	@ 0x3f
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d004      	beq.n	8005e56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2280      	movs	r2, #128	@ 0x80
 8005e50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e00c      	b.n	8005e70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2205      	movs	r2, #5
 8005e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e88:	4b8e      	ldr	r3, [pc, #568]	@ (80060c4 <HAL_DMA_IRQHandler+0x248>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a8e      	ldr	r2, [pc, #568]	@ (80060c8 <HAL_DMA_IRQHandler+0x24c>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0a9b      	lsrs	r3, r3, #10
 8005e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01a      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d013      	beq.n	8005ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0204 	bic.w	r2, r2, #4
 8005ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee0:	f043 0201 	orr.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	f043 0202 	orr.w	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	2204      	movs	r2, #4
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d012      	beq.n	8005f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f40:	2204      	movs	r2, #4
 8005f42:	409a      	lsls	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4c:	f043 0204 	orr.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f58:	2210      	movs	r2, #16
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d043      	beq.n	8005fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d03c      	beq.n	8005fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f76:	2210      	movs	r2, #16
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d018      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d024      	beq.n	8005fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
 8005faa:	e01f      	b.n	8005fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
 8005fbc:	e016      	b.n	8005fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d107      	bne.n	8005fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0208 	bic.w	r2, r2, #8
 8005fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 808f 	beq.w	800611c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8087 	beq.w	800611c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006012:	2220      	movs	r2, #32
 8006014:	409a      	lsls	r2, r3
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b05      	cmp	r3, #5
 8006024:	d136      	bne.n	8006094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0216 	bic.w	r2, r2, #22
 8006034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d103      	bne.n	8006056 <HAL_DMA_IRQHandler+0x1da>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0208 	bic.w	r2, r2, #8
 8006064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800606a:	223f      	movs	r2, #63	@ 0x3f
 800606c:	409a      	lsls	r2, r3
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006086:	2b00      	cmp	r3, #0
 8006088:	d07e      	beq.n	8006188 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
        }
        return;
 8006092:	e079      	b.n	8006188 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01d      	beq.n	80060de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10d      	bne.n	80060cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d031      	beq.n	800611c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
 80060c0:	e02c      	b.n	800611c <HAL_DMA_IRQHandler+0x2a0>
 80060c2:	bf00      	nop
 80060c4:	20000000 	.word	0x20000000
 80060c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d023      	beq.n	800611c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	e01e      	b.n	800611c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10f      	bne.n	800610c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0210 	bic.w	r2, r2, #16
 80060fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006120:	2b00      	cmp	r3, #0
 8006122:	d032      	beq.n	800618a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d022      	beq.n	8006176 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2205      	movs	r2, #5
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	3301      	adds	r3, #1
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	429a      	cmp	r2, r3
 8006152:	d307      	bcc.n	8006164 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f2      	bne.n	8006148 <HAL_DMA_IRQHandler+0x2cc>
 8006162:	e000      	b.n	8006166 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006164:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
 8006186:	e000      	b.n	800618a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006188:	bf00      	nop
    }
  }
}
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d108      	bne.n	80061e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061e6:	e007      	b.n	80061f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	60da      	str	r2, [r3, #12]
}
 80061f8:	bf00      	nop
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	3b10      	subs	r3, #16
 8006214:	4a13      	ldr	r2, [pc, #76]	@ (8006264 <DMA_CalcBaseAndBitshift+0x60>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	091b      	lsrs	r3, r3, #4
 800621c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800621e:	4a12      	ldr	r2, [pc, #72]	@ (8006268 <DMA_CalcBaseAndBitshift+0x64>)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d908      	bls.n	8006244 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	4b0c      	ldr	r3, [pc, #48]	@ (800626c <DMA_CalcBaseAndBitshift+0x68>)
 800623a:	4013      	ands	r3, r2
 800623c:	1d1a      	adds	r2, r3, #4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	659a      	str	r2, [r3, #88]	@ 0x58
 8006242:	e006      	b.n	8006252 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	4b08      	ldr	r3, [pc, #32]	@ (800626c <DMA_CalcBaseAndBitshift+0x68>)
 800624c:	4013      	ands	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	aaaaaaab 	.word	0xaaaaaaab
 8006268:	0801c580 	.word	0x0801c580
 800626c:	fffffc00 	.word	0xfffffc00

08006270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11f      	bne.n	80062ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d856      	bhi.n	800633e <DMA_CheckFifoParam+0xce>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <DMA_CheckFifoParam+0x28>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062bb 	.word	0x080062bb
 80062a0:	080062a9 	.word	0x080062a9
 80062a4:	0800633f 	.word	0x0800633f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d046      	beq.n	8006342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b8:	e043      	b.n	8006342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062c2:	d140      	bne.n	8006346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c8:	e03d      	b.n	8006346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d2:	d121      	bne.n	8006318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d837      	bhi.n	800634a <DMA_CheckFifoParam+0xda>
 80062da:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <DMA_CheckFifoParam+0x70>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	080062f7 	.word	0x080062f7
 80062e8:	080062f1 	.word	0x080062f1
 80062ec:	08006309 	.word	0x08006309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	e030      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d025      	beq.n	800634e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006306:	e022      	b.n	800634e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006310:	d11f      	bne.n	8006352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006316:	e01c      	b.n	8006352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d903      	bls.n	8006326 <DMA_CheckFifoParam+0xb6>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d003      	beq.n	800632c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006324:	e018      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
      break;
 800632a:	e015      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00e      	beq.n	8006356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	e00b      	b.n	8006356 <DMA_CheckFifoParam+0xe6>
      break;
 800633e:	bf00      	nop
 8006340:	e00a      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 8006342:	bf00      	nop
 8006344:	e008      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 8006346:	bf00      	nop
 8006348:	e006      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;   
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <DMA_CheckFifoParam+0xe8>
      break;
 8006356:	bf00      	nop
    }
  } 
  
  return status; 
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop

08006368 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e039      	b.n	80063ee <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fd f964 	bl	800365c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b8:	f023 0107 	bic.w	r1, r3, #7
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ce:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <HAL_DMA2D_Init+0x90>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68d1      	ldr	r1, [r2, #12]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	430b      	orrs	r3, r1
 80063dc:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	ffffc000 	.word	0xffffc000

080063fc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d026      	beq.n	800646c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d021      	beq.n	800646c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006436:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2201      	movs	r2, #1
 800644a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d026      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d021      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800648e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2220      	movs	r2, #32
 8006496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649c:	f043 0202 	orr.w	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d026      	beq.n	800651c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d021      	beq.n	800651c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064e6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2208      	movs	r2, #8
 80064ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	f043 0204 	orr.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2204      	movs	r2, #4
 8006500:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800653e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2204      	movs	r2, #4
 8006546:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f853 	bl	80065f4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d024      	beq.n	80065a2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01f      	beq.n	80065a2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006570:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2202      	movs	r2, #2
 8006578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01f      	beq.n	80065ec <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01a      	beq.n	80065ec <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065c4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2210      	movs	r2, #16
 80065cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f80e 	bl	8006608 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_DMA2D_ConfigLayer+0x20>
 8006638:	2302      	movs	r3, #2
 800663a:	e079      	b.n	8006730 <HAL_DMA2D_ConfigLayer+0x114>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	3318      	adds	r3, #24
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006666:	4b35      	ldr	r3, [pc, #212]	@ (800673c <HAL_DMA2D_ConfigLayer+0x120>)
 8006668:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b0a      	cmp	r3, #10
 8006670:	d003      	beq.n	800667a <HAL_DMA2D_ConfigLayer+0x5e>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b09      	cmp	r3, #9
 8006678:	d107      	bne.n	800668a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e005      	b.n	8006696 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d120      	bne.n	80066de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	43db      	mvns	r3, r3
 80066a6:	ea02 0103 	and.w	r1, r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b0a      	cmp	r3, #10
 80066c4:	d003      	beq.n	80066ce <HAL_DMA2D_ConfigLayer+0xb2>
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d127      	bne.n	800671e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80066da:	629a      	str	r2, [r3, #40]	@ 0x28
 80066dc:	e01f      	b.n	800671e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	43db      	mvns	r3, r3
 80066e8:	ea02 0103 	and.w	r1, r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b0a      	cmp	r3, #10
 8006706:	d003      	beq.n	8006710 <HAL_DMA2D_ConfigLayer+0xf4>
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d106      	bne.n	800671e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800671c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	ff03000f 	.word	0xff03000f

08006740 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e086      	b.n	8006860 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7fc ff9f 	bl	80036a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800676a:	4b3f      	ldr	r3, [pc, #252]	@ (8006868 <HAL_ETH_Init+0x128>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676e:	4a3e      	ldr	r2, [pc, #248]	@ (8006868 <HAL_ETH_Init+0x128>)
 8006770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006774:	6453      	str	r3, [r2, #68]	@ 0x44
 8006776:	4b3c      	ldr	r3, [pc, #240]	@ (8006868 <HAL_ETH_Init+0x128>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006782:	4b3a      	ldr	r3, [pc, #232]	@ (800686c <HAL_ETH_Init+0x12c>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4a39      	ldr	r2, [pc, #228]	@ (800686c <HAL_ETH_Init+0x12c>)
 8006788:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800678c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800678e:	4b37      	ldr	r3, [pc, #220]	@ (800686c <HAL_ETH_Init+0x12c>)
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4935      	ldr	r1, [pc, #212]	@ (800686c <HAL_ETH_Init+0x12c>)
 8006798:	4313      	orrs	r3, r2
 800679a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800679c:	4b33      	ldr	r3, [pc, #204]	@ (800686c <HAL_ETH_Init+0x12c>)
 800679e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067b8:	f7fe fc4c 	bl	8005054 <HAL_GetTick>
 80067bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80067be:	e011      	b.n	80067e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80067c0:	f7fe fc48 	bl	8005054 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80067ce:	d909      	bls.n	80067e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2204      	movs	r2, #4
 80067d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	22e0      	movs	r2, #224	@ 0xe0
 80067dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e03d      	b.n	8006860 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e4      	bne.n	80067c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f97a 	bl	8006af0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa25 	bl	8006c4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa7b 	bl	8006cfe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	461a      	mov	r2, r3
 800680e:	2100      	movs	r1, #0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9e3 	bl	8006bdc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b0f      	ldr	r3, [pc, #60]	@ (8006870 <HAL_ETH_Init+0x130>)
 8006834:	430b      	orrs	r3, r1
 8006836:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800684a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2210      	movs	r2, #16
 800685a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40023800 	.word	0x40023800
 800686c:	40013800 	.word	0x40013800
 8006870:	00020060 	.word	0x00020060

08006874 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4b53      	ldr	r3, [pc, #332]	@ (80069d8 <ETH_SetMACConfig+0x164>)
 800688a:	4013      	ands	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	7b9b      	ldrb	r3, [r3, #14]
 8006892:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	2a00      	cmp	r2, #0
 800689a:	d102      	bne.n	80068a2 <ETH_SetMACConfig+0x2e>
 800689c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80068a0:	e000      	b.n	80068a4 <ETH_SetMACConfig+0x30>
 80068a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80068a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	7c52      	ldrb	r2, [r2, #17]
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d102      	bne.n	80068b4 <ETH_SetMACConfig+0x40>
 80068ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80068b2:	e000      	b.n	80068b6 <ETH_SetMACConfig+0x42>
 80068b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80068b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80068bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	7fdb      	ldrb	r3, [r3, #31]
 80068c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80068c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80068ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	7f92      	ldrb	r2, [r2, #30]
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d102      	bne.n	80068da <ETH_SetMACConfig+0x66>
 80068d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80068d8:	e000      	b.n	80068dc <ETH_SetMACConfig+0x68>
 80068da:	2200      	movs	r2, #0
                        macconf->Speed |
 80068dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	7f1b      	ldrb	r3, [r3, #28]
 80068e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80068e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80068ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	791b      	ldrb	r3, [r3, #4]
 80068f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80068f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	d102      	bne.n	8006904 <ETH_SetMACConfig+0x90>
 80068fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006902:	e000      	b.n	8006906 <ETH_SetMACConfig+0x92>
 8006904:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006906:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	7bdb      	ldrb	r3, [r3, #15]
 800690c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800690e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006914:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800691c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800691e:	4313      	orrs	r3, r2
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006936:	2001      	movs	r0, #1
 8006938:	f7fe fb98 	bl	800506c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006952:	4013      	ands	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006962:	2a00      	cmp	r2, #0
 8006964:	d101      	bne.n	800696a <ETH_SetMACConfig+0xf6>
 8006966:	2280      	movs	r2, #128	@ 0x80
 8006968:	e000      	b.n	800696c <ETH_SetMACConfig+0xf8>
 800696a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800696c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006972:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800697a:	2a01      	cmp	r2, #1
 800697c:	d101      	bne.n	8006982 <ETH_SetMACConfig+0x10e>
 800697e:	2208      	movs	r2, #8
 8006980:	e000      	b.n	8006984 <ETH_SetMACConfig+0x110>
 8006982:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006984:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800698c:	2a01      	cmp	r2, #1
 800698e:	d101      	bne.n	8006994 <ETH_SetMACConfig+0x120>
 8006990:	2204      	movs	r2, #4
 8006992:	e000      	b.n	8006996 <ETH_SetMACConfig+0x122>
 8006994:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006996:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800699e:	2a01      	cmp	r2, #1
 80069a0:	d101      	bne.n	80069a6 <ETH_SetMACConfig+0x132>
 80069a2:	2202      	movs	r2, #2
 80069a4:	e000      	b.n	80069a8 <ETH_SetMACConfig+0x134>
 80069a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80069a8:	4313      	orrs	r3, r2
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80069c0:	2001      	movs	r0, #1
 80069c2:	f7fe fb53 	bl	800506c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	619a      	str	r2, [r3, #24]
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	fd20810f 	.word	0xfd20810f

080069dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4b3d      	ldr	r3, [pc, #244]	@ (8006aec <ETH_SetDMAConfig+0x110>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	7b1b      	ldrb	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <ETH_SetDMAConfig+0x2c>
 8006a02:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006a06:	e000      	b.n	8006a0a <ETH_SetDMAConfig+0x2e>
 8006a08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	7b5b      	ldrb	r3, [r3, #13]
 8006a0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	7f52      	ldrb	r2, [r2, #29]
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d102      	bne.n	8006a20 <ETH_SetDMAConfig+0x44>
 8006a1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a1e:	e000      	b.n	8006a22 <ETH_SetDMAConfig+0x46>
 8006a20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006a22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	7b9b      	ldrb	r3, [r3, #14]
 8006a28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006a2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006a30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	7f1b      	ldrb	r3, [r3, #28]
 8006a36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006a38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	7f9b      	ldrb	r3, [r3, #30]
 8006a3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006a40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006a46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006a50:	4313      	orrs	r3, r2
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a60:	461a      	mov	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006a72:	2001      	movs	r0, #1
 8006a74:	f7fe fafa 	bl	800506c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a80:	461a      	mov	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006a90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8006a96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006a9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006aa4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8006aa6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006aae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8006ab4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006abe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ac2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	f7fe facb 	bl	800506c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6013      	str	r3, [r2, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	f8de3f23 	.word	0xf8de3f23

08006af0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b0a6      	sub	sp, #152	@ 0x98
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006b32:	2300      	movs	r3, #0
 8006b34:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006b58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006b5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006b6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fe7f 	bl	8006874 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006b76:	2301      	movs	r3, #1
 8006b78:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006ba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006baa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006bac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006bb0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006bb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bb6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff ff05 	bl	80069dc <ETH_SetDMAConfig>
}
 8006bd2:	bf00      	nop
 8006bd4:	3798      	adds	r7, #152	@ 0x98
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3305      	adds	r3, #5
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	3204      	adds	r2, #4
 8006bf4:	7812      	ldrb	r2, [r2, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <ETH_MACAddressConfig+0x68>)
 8006bfe:	4413      	add	r3, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3303      	adds	r3, #3
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	061a      	lsls	r2, r3, #24
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	3302      	adds	r3, #2
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	4313      	orrs	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	7812      	ldrb	r2, [r2, #0]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <ETH_MACAddressConfig+0x6c>)
 8006c2e:	4413      	add	r3, r2
 8006c30:	461a      	mov	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6013      	str	r3, [r2, #0]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40028040 	.word	0x40028040
 8006c48:	40028044 	.word	0x40028044

08006c4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e03e      	b.n	8006cd8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68d9      	ldr	r1, [r3, #12]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	440b      	add	r3, r1
 8006c6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	3206      	adds	r2, #6
 8006c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d80c      	bhi.n	8006cbc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	440b      	add	r3, r1
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	e004      	b.n	8006cc6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d9bd      	bls.n	8006c5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf0:	611a      	str	r2, [r3, #16]
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e048      	b.n	8006d9e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6919      	ldr	r1, [r3, #16]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	440b      	add	r3, r1
 8006d1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	3212      	adds	r2, #18
 8006d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d80c      	bhi.n	8006d8e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6919      	ldr	r1, [r3, #16]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	440b      	add	r3, r1
 8006d86:	461a      	mov	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	e004      	b.n	8006d98 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	461a      	mov	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d9b3      	bls.n	8006d0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dce:	60da      	str	r2, [r3, #12]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b089      	sub	sp, #36	@ 0x24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006dea:	2300      	movs	r3, #0
 8006dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006dee:	2300      	movs	r3, #0
 8006df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	e175      	b.n	80070e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	f040 8164 	bne.w	80070e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d005      	beq.n	8006e32 <HAL_GPIO_Init+0x56>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d130      	bne.n	8006e94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e42:	43db      	mvns	r3, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4013      	ands	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e68:	2201      	movs	r2, #1
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e70:	43db      	mvns	r3, r3
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4013      	ands	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	091b      	lsrs	r3, r3, #4
 8006e7e:	f003 0201 	and.w	r2, r3, #1
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	fa02 f303 	lsl.w	r3, r2, r3
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d017      	beq.n	8006ed0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	2203      	movs	r2, #3
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d123      	bne.n	8006f24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	08da      	lsrs	r2, r3, #3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3208      	adds	r2, #8
 8006ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	220f      	movs	r2, #15
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	4013      	ands	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	08da      	lsrs	r2, r3, #3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3208      	adds	r2, #8
 8006f1e:	69b9      	ldr	r1, [r7, #24]
 8006f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	2203      	movs	r2, #3
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 0203 	and.w	r2, r3, #3
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80be 	beq.w	80070e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f66:	4b66      	ldr	r3, [pc, #408]	@ (8007100 <HAL_GPIO_Init+0x324>)
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	4a65      	ldr	r2, [pc, #404]	@ (8007100 <HAL_GPIO_Init+0x324>)
 8006f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f72:	4b63      	ldr	r3, [pc, #396]	@ (8007100 <HAL_GPIO_Init+0x324>)
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006f7e:	4a61      	ldr	r2, [pc, #388]	@ (8007104 <HAL_GPIO_Init+0x328>)
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	3302      	adds	r3, #2
 8006f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	220f      	movs	r2, #15
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a58      	ldr	r2, [pc, #352]	@ (8007108 <HAL_GPIO_Init+0x32c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d037      	beq.n	800701a <HAL_GPIO_Init+0x23e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a57      	ldr	r2, [pc, #348]	@ (800710c <HAL_GPIO_Init+0x330>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d031      	beq.n	8007016 <HAL_GPIO_Init+0x23a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a56      	ldr	r2, [pc, #344]	@ (8007110 <HAL_GPIO_Init+0x334>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d02b      	beq.n	8007012 <HAL_GPIO_Init+0x236>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a55      	ldr	r2, [pc, #340]	@ (8007114 <HAL_GPIO_Init+0x338>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d025      	beq.n	800700e <HAL_GPIO_Init+0x232>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a54      	ldr	r2, [pc, #336]	@ (8007118 <HAL_GPIO_Init+0x33c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d01f      	beq.n	800700a <HAL_GPIO_Init+0x22e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a53      	ldr	r2, [pc, #332]	@ (800711c <HAL_GPIO_Init+0x340>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d019      	beq.n	8007006 <HAL_GPIO_Init+0x22a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a52      	ldr	r2, [pc, #328]	@ (8007120 <HAL_GPIO_Init+0x344>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <HAL_GPIO_Init+0x226>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a51      	ldr	r2, [pc, #324]	@ (8007124 <HAL_GPIO_Init+0x348>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00d      	beq.n	8006ffe <HAL_GPIO_Init+0x222>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a50      	ldr	r2, [pc, #320]	@ (8007128 <HAL_GPIO_Init+0x34c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d007      	beq.n	8006ffa <HAL_GPIO_Init+0x21e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a4f      	ldr	r2, [pc, #316]	@ (800712c <HAL_GPIO_Init+0x350>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d101      	bne.n	8006ff6 <HAL_GPIO_Init+0x21a>
 8006ff2:	2309      	movs	r3, #9
 8006ff4:	e012      	b.n	800701c <HAL_GPIO_Init+0x240>
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	e010      	b.n	800701c <HAL_GPIO_Init+0x240>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	e00e      	b.n	800701c <HAL_GPIO_Init+0x240>
 8006ffe:	2307      	movs	r3, #7
 8007000:	e00c      	b.n	800701c <HAL_GPIO_Init+0x240>
 8007002:	2306      	movs	r3, #6
 8007004:	e00a      	b.n	800701c <HAL_GPIO_Init+0x240>
 8007006:	2305      	movs	r3, #5
 8007008:	e008      	b.n	800701c <HAL_GPIO_Init+0x240>
 800700a:	2304      	movs	r3, #4
 800700c:	e006      	b.n	800701c <HAL_GPIO_Init+0x240>
 800700e:	2303      	movs	r3, #3
 8007010:	e004      	b.n	800701c <HAL_GPIO_Init+0x240>
 8007012:	2302      	movs	r3, #2
 8007014:	e002      	b.n	800701c <HAL_GPIO_Init+0x240>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <HAL_GPIO_Init+0x240>
 800701a:	2300      	movs	r3, #0
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	f002 0203 	and.w	r2, r2, #3
 8007022:	0092      	lsls	r2, r2, #2
 8007024:	4093      	lsls	r3, r2
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800702c:	4935      	ldr	r1, [pc, #212]	@ (8007104 <HAL_GPIO_Init+0x328>)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	3302      	adds	r3, #2
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703a:	4b3d      	ldr	r3, [pc, #244]	@ (8007130 <HAL_GPIO_Init+0x354>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	43db      	mvns	r3, r3
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4013      	ands	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800705e:	4a34      	ldr	r2, [pc, #208]	@ (8007130 <HAL_GPIO_Init+0x354>)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007064:	4b32      	ldr	r3, [pc, #200]	@ (8007130 <HAL_GPIO_Init+0x354>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007088:	4a29      	ldr	r2, [pc, #164]	@ (8007130 <HAL_GPIO_Init+0x354>)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800708e:	4b28      	ldr	r3, [pc, #160]	@ (8007130 <HAL_GPIO_Init+0x354>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007130 <HAL_GPIO_Init+0x354>)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007130 <HAL_GPIO_Init+0x354>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	4013      	ands	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070dc:	4a14      	ldr	r2, [pc, #80]	@ (8007130 <HAL_GPIO_Init+0x354>)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b0f      	cmp	r3, #15
 80070ec:	f67f ae86 	bls.w	8006dfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	3724      	adds	r7, #36	@ 0x24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40023800 	.word	0x40023800
 8007104:	40013800 	.word	0x40013800
 8007108:	40020000 	.word	0x40020000
 800710c:	40020400 	.word	0x40020400
 8007110:	40020800 	.word	0x40020800
 8007114:	40020c00 	.word	0x40020c00
 8007118:	40021000 	.word	0x40021000
 800711c:	40021400 	.word	0x40021400
 8007120:	40021800 	.word	0x40021800
 8007124:	40021c00 	.word	0x40021c00
 8007128:	40022000 	.word	0x40022000
 800712c:	40022400 	.word	0x40022400
 8007130:	40013c00 	.word	0x40013c00

08007134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	807b      	strh	r3, [r7, #2]
 8007140:	4613      	mov	r3, r2
 8007142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007144:	787b      	ldrb	r3, [r7, #1]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800714a:	887a      	ldrh	r2, [r7, #2]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007150:	e003      	b.n	800715a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007152:	887b      	ldrh	r3, [r7, #2]
 8007154:	041a      	lsls	r2, r3, #16
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	619a      	str	r2, [r3, #24]
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b086      	sub	sp, #24
 800716a:	af02      	add	r7, sp, #8
 800716c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e059      	b.n	800722c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f012 faba 	bl	801970c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2203      	movs	r2, #3
 800719c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071a6:	d102      	bne.n	80071ae <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f009 f995 	bl	80104e2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	7c1a      	ldrb	r2, [r3, #16]
 80071c0:	f88d 2000 	strb.w	r2, [sp]
 80071c4:	3304      	adds	r3, #4
 80071c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071c8:	f009 f920 	bl	801040c <USB_CoreInit>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e026      	b.n	800722c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2101      	movs	r1, #1
 80071e4:	4618      	mov	r0, r3
 80071e6:	f009 f98d 	bl	8010504 <USB_SetCurrentMode>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e017      	b.n	800722c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7c1a      	ldrb	r2, [r3, #16]
 8007204:	f88d 2000 	strb.w	r2, [sp]
 8007208:	3304      	adds	r3, #4
 800720a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800720c:	f009 fb36 	bl	801087c <USB_HostInit>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e004      	b.n	800722c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b08b      	sub	sp, #44	@ 0x2c
 8007238:	af04      	add	r7, sp, #16
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4603      	mov	r3, r0
 8007244:	70fb      	strb	r3, [r7, #3]
 8007246:	460b      	mov	r3, r1
 8007248:	70bb      	strb	r3, [r7, #2]
 800724a:	4613      	mov	r3, r2
 800724c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800724e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007250:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_HCD_HC_Init+0x2c>
 800725c:	2302      	movs	r3, #2
 800725e:	e09d      	b.n	800739c <HAL_HCD_HC_Init+0x168>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	3319      	adds	r3, #25
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	3314      	adds	r3, #20
 800728c:	787a      	ldrb	r2, [r7, #1]
 800728e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007290:	78fa      	ldrb	r2, [r7, #3]
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	4613      	mov	r3, r2
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	3315      	adds	r3, #21
 80072a0:	78fa      	ldrb	r2, [r7, #3]
 80072a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	3326      	adds	r3, #38	@ 0x26
 80072b4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80072b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80072ba:	78fa      	ldrb	r2, [r7, #3]
 80072bc:	78bb      	ldrb	r3, [r7, #2]
 80072be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c2:	b2d8      	uxtb	r0, r3
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	3316      	adds	r3, #22
 80072d2:	4602      	mov	r2, r0
 80072d4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fbc8 	bl	8007a70 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80072e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da0a      	bge.n	80072fe <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	3317      	adds	r3, #23
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e009      	b.n	8007312 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	3317      	adds	r3, #23
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f009 fc08 	bl	8010b2c <USB_GetHostSpeed>
 800731c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800731e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d10b      	bne.n	800733e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8007326:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800732a:	2b01      	cmp	r3, #1
 800732c:	d107      	bne.n	800733e <HAL_HCD_HC_Init+0x10a>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2bbc      	cmp	r3, #188	@ 0xbc
 8007338:	d901      	bls.n	800733e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800733a:	23bc      	movs	r3, #188	@ 0xbc
 800733c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3318      	adds	r3, #24
 800734e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007352:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	b298      	uxth	r0, r3
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	3328      	adds	r3, #40	@ 0x28
 8007368:	4602      	mov	r2, r0
 800736a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6818      	ldr	r0, [r3, #0]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	b29b      	uxth	r3, r3
 8007374:	787c      	ldrb	r4, [r7, #1]
 8007376:	78ba      	ldrb	r2, [r7, #2]
 8007378:	78f9      	ldrb	r1, [r7, #3]
 800737a:	9302      	str	r3, [sp, #8]
 800737c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	4623      	mov	r3, r4
 800738a:	f009 fbf7 	bl	8010b7c <USB_HC_Init>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}

080073a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_HCD_HC_Halt+0x1e>
 80073be:	2302      	movs	r3, #2
 80073c0:	e00f      	b.n	80073e2 <HAL_HCD_HC_Halt+0x3e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f009 ff89 	bl	80112ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	70fb      	strb	r3, [r7, #3]
 80073fe:	460b      	mov	r3, r1
 8007400:	70bb      	strb	r3, [r7, #2]
 8007402:	4613      	mov	r3, r2
 8007404:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	3317      	adds	r3, #23
 8007416:	78ba      	ldrb	r2, [r7, #2]
 8007418:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	3326      	adds	r3, #38	@ 0x26
 800742a:	787a      	ldrb	r2, [r7, #1]
 800742c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800742e:	7c3b      	ldrb	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d114      	bne.n	800745e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	332a      	adds	r3, #42	@ 0x2a
 8007444:	2203      	movs	r2, #3
 8007446:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	3319      	adds	r3, #25
 8007458:	7f3a      	ldrb	r2, [r7, #28]
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	e009      	b.n	8007472 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	1a9b      	subs	r3, r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	332a      	adds	r3, #42	@ 0x2a
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007472:	787b      	ldrb	r3, [r7, #1]
 8007474:	2b03      	cmp	r3, #3
 8007476:	f200 8102 	bhi.w	800767e <HAL_HCD_HC_SubmitRequest+0x292>
 800747a:	a201      	add	r2, pc, #4	@ (adr r2, 8007480 <HAL_HCD_HC_SubmitRequest+0x94>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	08007491 	.word	0x08007491
 8007484:	08007669 	.word	0x08007669
 8007488:	08007555 	.word	0x08007555
 800748c:	080075df 	.word	0x080075df
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8007490:	7c3b      	ldrb	r3, [r7, #16]
 8007492:	2b01      	cmp	r3, #1
 8007494:	f040 80f5 	bne.w	8007682 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8007498:	78bb      	ldrb	r3, [r7, #2]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d12d      	bne.n	80074fa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800749e:	8b3b      	ldrh	r3, [r7, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	333d      	adds	r3, #61	@ 0x3d
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	333d      	adds	r3, #61	@ 0x3d
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	332a      	adds	r3, #42	@ 0x2a
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80074e2:	e0ce      	b.n	8007682 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	332a      	adds	r3, #42	@ 0x2a
 80074f4:	2202      	movs	r2, #2
 80074f6:	701a      	strb	r2, [r3, #0]
      break;
 80074f8:	e0c3      	b.n	8007682 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	011b      	lsls	r3, r3, #4
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	331a      	adds	r3, #26
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 80b8 	bne.w	8007682 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	333c      	adds	r3, #60	@ 0x3c
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	4613      	mov	r3, r2
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	332a      	adds	r3, #42	@ 0x2a
 8007538:	2200      	movs	r2, #0
 800753a:	701a      	strb	r2, [r3, #0]
      break;
 800753c:	e0a1      	b.n	8007682 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	332a      	adds	r3, #42	@ 0x2a
 800754e:	2202      	movs	r2, #2
 8007550:	701a      	strb	r2, [r3, #0]
      break;
 8007552:	e096      	b.n	8007682 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007554:	78bb      	ldrb	r3, [r7, #2]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d120      	bne.n	800759c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	333d      	adds	r3, #61	@ 0x3d
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	1a9b      	subs	r3, r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	332a      	adds	r3, #42	@ 0x2a
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007584:	e07e      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	4613      	mov	r3, r2
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	332a      	adds	r3, #42	@ 0x2a
 8007596:	2202      	movs	r2, #2
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e073      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	333c      	adds	r3, #60	@ 0x3c
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	332a      	adds	r3, #42	@ 0x2a
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
      break;
 80075c6:	e05d      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80075c8:	78fa      	ldrb	r2, [r7, #3]
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	1a9b      	subs	r3, r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	332a      	adds	r3, #42	@ 0x2a
 80075d8:	2202      	movs	r2, #2
 80075da:	701a      	strb	r2, [r3, #0]
      break;
 80075dc:	e052      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80075de:	78bb      	ldrb	r3, [r7, #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d120      	bne.n	8007626 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	333d      	adds	r3, #61	@ 0x3d
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	332a      	adds	r3, #42	@ 0x2a
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800760e:	e039      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	332a      	adds	r3, #42	@ 0x2a
 8007620:	2202      	movs	r2, #2
 8007622:	701a      	strb	r2, [r3, #0]
      break;
 8007624:	e02e      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	4613      	mov	r3, r2
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	333c      	adds	r3, #60	@ 0x3c
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	4613      	mov	r3, r2
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	332a      	adds	r3, #42	@ 0x2a
 800764c:	2200      	movs	r2, #0
 800764e:	701a      	strb	r2, [r3, #0]
      break;
 8007650:	e018      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	4613      	mov	r3, r2
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	1a9b      	subs	r3, r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	332a      	adds	r3, #42	@ 0x2a
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e00d      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	332a      	adds	r3, #42	@ 0x2a
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
      break;
 800767c:	e002      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007682:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4613      	mov	r3, r2
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	332c      	adds	r3, #44	@ 0x2c
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	8b39      	ldrh	r1, [r7, #24]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4403      	add	r3, r0
 80076a8:	3334      	adds	r3, #52	@ 0x34
 80076aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	334c      	adds	r3, #76	@ 0x4c
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	3338      	adds	r3, #56	@ 0x38
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4613      	mov	r3, r2
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	1a9b      	subs	r3, r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	3315      	adds	r3, #21
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	334d      	adds	r3, #77	@ 0x4d
 80076f8:	2200      	movs	r2, #0
 80076fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	4613      	mov	r3, r2
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	3310      	adds	r3, #16
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	4413      	add	r3, r2
 8007710:	1d19      	adds	r1, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	799b      	ldrb	r3, [r3, #6]
 8007716:	461a      	mov	r2, r3
 8007718:	f009 fb5c 	bl	8010dd4 <USB_HC_StartXfer>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f009 f856 	bl	80107f0 <USB_GetMode>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	f040 80fb 	bne.w	8007942 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f009 f819 	bl	8010788 <USB_ReadInterrupts>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80f1 	beq.w	8007940 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f009 f810 	bl	8010788 <USB_ReadInterrupts>
 8007768:	4603      	mov	r3, r0
 800776a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800776e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007772:	d104      	bne.n	800777e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800777c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f009 f800 	bl	8010788 <USB_ReadInterrupts>
 8007788:	4603      	mov	r3, r0
 800778a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800778e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007792:	d104      	bne.n	800779e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800779c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f008 fff0 	bl	8010788 <USB_ReadInterrupts>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077b2:	d104      	bne.n	80077be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80077bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f008 ffe0 	bl	8010788 <USB_ReadInterrupts>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d103      	bne.n	80077da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2202      	movs	r2, #2
 80077d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f008 ffd2 	bl	8010788 <USB_ReadInterrupts>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ee:	d120      	bne.n	8007832 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80077f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d113      	bne.n	8007832 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800780a:	2110      	movs	r1, #16
 800780c:	6938      	ldr	r0, [r7, #16]
 800780e:	f008 fec5 	bl	801059c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007812:	6938      	ldr	r0, [r7, #16]
 8007814:	f008 fef4 	bl	8010600 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	7a5b      	ldrb	r3, [r3, #9]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d105      	bne.n	800782c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2101      	movs	r1, #1
 8007826:	4618      	mov	r0, r3
 8007828:	f009 f8e0 	bl	80109ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f011 ffdf 	bl	80197f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f008 ffa6 	bl	8010788 <USB_ReadInterrupts>
 800783c:	4603      	mov	r3, r0
 800783e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007846:	d102      	bne.n	800784e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fd4d 	bl	80092e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f008 ff98 	bl	8010788 <USB_ReadInterrupts>
 8007858:	4603      	mov	r3, r0
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b08      	cmp	r3, #8
 8007860:	d106      	bne.n	8007870 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f011 ffa8 	bl	80197b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2208      	movs	r2, #8
 800786e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	f008 ff87 	bl	8010788 <USB_ReadInterrupts>
 800787a:	4603      	mov	r3, r0
 800787c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007884:	d139      	bne.n	80078fa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f009 fd1c 	bl	80112c8 <USB_HC_ReadInterrupt>
 8007890:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
 8007896:	e025      	b.n	80078e4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d018      	beq.n	80078de <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c2:	d106      	bne.n	80078d2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f905 	bl	8007ada <HCD_HC_IN_IRQHandler>
 80078d0:	e005      	b.n	80078de <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 ff67 	bl	80087ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	3301      	adds	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	795b      	ldrb	r3, [r3, #5]
 80078e8:	461a      	mov	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d3d3      	bcc.n	8007898 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80078f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f008 ff42 	bl	8010788 <USB_ReadInterrupts>
 8007904:	4603      	mov	r3, r0
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b10      	cmp	r3, #16
 800790c:	d101      	bne.n	8007912 <HAL_HCD_IRQHandler+0x1ea>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <HAL_HCD_IRQHandler+0x1ec>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d014      	beq.n	8007942 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0210 	bic.w	r2, r2, #16
 8007926:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fbfe 	bl	800912a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0210 	orr.w	r2, r2, #16
 800793c:	619a      	str	r2, [r3, #24]
 800793e:	e000      	b.n	8007942 <HAL_HCD_IRQHandler+0x21a>
      return;
 8007940:	bf00      	nop
    }
  }
}
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_HCD_Start+0x16>
 800795a:	2302      	movs	r3, #2
 800795c:	e013      	b.n	8007986 <HAL_HCD_Start+0x3e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2101      	movs	r1, #1
 800796c:	4618      	mov	r0, r3
 800796e:	f009 f8a4 	bl	8010aba <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f008 fda2 	bl	80104c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_HCD_Stop+0x16>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e00d      	b.n	80079c0 <HAL_HCD_Stop+0x32>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f009 fdf7 	bl	80115a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f009 f846 	bl	8010a66 <USB_ResetPort>
 80079da:	4603      	mov	r3, r0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	334c      	adds	r3, #76	@ 0x4c
 8007a00:	781b      	ldrb	r3, [r3, #0]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	1a9b      	subs	r3, r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3338      	adds	r3, #56	@ 0x38
 8007a2a:	681b      	ldr	r3, [r3, #0]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f009 f888 	bl	8010b5a <USB_GetCurrentFrame>
 8007a4a:	4603      	mov	r3, r0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f009 f863 	bl	8010b2c <USB_GetHostSpeed>
 8007a66:	4603      	mov	r3, r0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4613      	mov	r3, r2
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	331a      	adds	r3, #26
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	331b      	adds	r3, #27
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3325      	adds	r3, #37	@ 0x25
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	3324      	adds	r3, #36	@ 0x24
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f008 fe58 	bl	80107ae <USB_ReadChInterrupts>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d11a      	bne.n	8007b3e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b14:	461a      	mov	r2, r3
 8007b16:	2304      	movs	r3, #4
 8007b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	1a9b      	subs	r3, r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	334d      	adds	r3, #77	@ 0x4d
 8007b2a:	2207      	movs	r2, #7
 8007b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f009 fbd7 	bl	80112ea <USB_HC_Halt>
 8007b3c:	e09e      	b.n	8007c7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f008 fe31 	bl	80107ae <USB_ReadChInterrupts>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b56:	d11b      	bne.n	8007b90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b64:	461a      	mov	r2, r3
 8007b66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4613      	mov	r3, r2
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	1a9b      	subs	r3, r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	334d      	adds	r3, #77	@ 0x4d
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	78fa      	ldrb	r2, [r7, #3]
 8007b86:	4611      	mov	r1, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f009 fbae 	bl	80112ea <USB_HC_Halt>
 8007b8e:	e075      	b.n	8007c7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f008 fe08 	bl	80107ae <USB_ReadChInterrupts>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d11a      	bne.n	8007bde <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	1a9b      	subs	r3, r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	334d      	adds	r3, #77	@ 0x4d
 8007bca:	2206      	movs	r2, #6
 8007bcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f009 fb87 	bl	80112ea <USB_HC_Halt>
 8007bdc:	e04e      	b.n	8007c7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f008 fde1 	bl	80107ae <USB_ReadChInterrupts>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf6:	d11b      	bne.n	8007c30 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c04:	461a      	mov	r2, r3
 8007c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	334d      	adds	r3, #77	@ 0x4d
 8007c1c:	2209      	movs	r2, #9
 8007c1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	4611      	mov	r1, r2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f009 fb5e 	bl	80112ea <USB_HC_Halt>
 8007c2e:	e025      	b.n	8007c7c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	78fa      	ldrb	r2, [r7, #3]
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f008 fdb8 	bl	80107ae <USB_ReadChInterrupts>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c44:	2b80      	cmp	r3, #128	@ 0x80
 8007c46:	d119      	bne.n	8007c7c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c54:	461a      	mov	r2, r3
 8007c56:	2380      	movs	r3, #128	@ 0x80
 8007c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	334d      	adds	r3, #77	@ 0x4d
 8007c6a:	2207      	movs	r2, #7
 8007c6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	4611      	mov	r1, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f009 fb37 	bl	80112ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f008 fd92 	bl	80107ae <USB_ReadChInterrupts>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c94:	d112      	bne.n	8007cbc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f009 fb23 	bl	80112ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cb6:	6093      	str	r3, [r2, #8]
 8007cb8:	f000 bd75 	b.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f008 fd72 	bl	80107ae <USB_ReadChInterrupts>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 8128 	bne.w	8007f26 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	331b      	adds	r3, #27
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d119      	bne.n	8007d32 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	331b      	adds	r3, #27
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d30:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	799b      	ldrb	r3, [r3, #6]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01b      	beq.n	8007d72 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	1a9b      	subs	r3, r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3330      	adds	r3, #48	@ 0x30
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	1ac9      	subs	r1, r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4403      	add	r3, r0
 8007d6e:	3338      	adds	r3, #56	@ 0x38
 8007d70:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	334d      	adds	r3, #77	@ 0x4d
 8007d82:	2201      	movs	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3344      	adds	r3, #68	@ 0x44
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da6:	461a      	mov	r2, r3
 8007da8:	2301      	movs	r3, #1
 8007daa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	4613      	mov	r3, r2
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	3326      	adds	r3, #38	@ 0x26
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	3326      	adds	r3, #38	@ 0x26
 8007dd2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d110      	bne.n	8007dfa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f009 fa82 	bl	80112ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df2:	461a      	mov	r2, r3
 8007df4:	2310      	movs	r3, #16
 8007df6:	6093      	str	r3, [r2, #8]
 8007df8:	e03d      	b.n	8007e76 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	3326      	adds	r3, #38	@ 0x26
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d00a      	beq.n	8007e26 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	3326      	adds	r3, #38	@ 0x26
 8007e20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d127      	bne.n	8007e76 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e44:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	440b      	add	r3, r1
 8007e54:	334c      	adds	r3, #76	@ 0x4c
 8007e56:	2201      	movs	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	440b      	add	r3, r1
 8007e68:	334c      	adds	r3, #76	@ 0x4c
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f011 fccb 	bl	801980c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	799b      	ldrb	r3, [r3, #6]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d13b      	bne.n	8007ef6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	3338      	adds	r3, #56	@ 0x38
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4403      	add	r3, r0
 8007e9e:	3328      	adds	r3, #40	@ 0x28
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	440b      	add	r3, r1
 8007ea4:	1e59      	subs	r1, r3, #1
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	1a9b      	subs	r3, r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4403      	add	r3, r0
 8007eb4:	3328      	adds	r3, #40	@ 0x28
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8470 	beq.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	333c      	adds	r3, #60	@ 0x3c
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	f083 0301 	eor.w	r3, r3, #1
 8007ede:	b2d8      	uxtb	r0, r3
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	333c      	adds	r3, #60	@ 0x3c
 8007eee:	4602      	mov	r2, r0
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	f000 bc58 	b.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	333c      	adds	r3, #60	@ 0x3c
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	f083 0301 	eor.w	r3, r3, #1
 8007f0e:	b2d8      	uxtb	r0, r3
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	333c      	adds	r3, #60	@ 0x3c
 8007f1e:	4602      	mov	r2, r0
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	f000 bc40 	b.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f008 fc3d 	bl	80107ae <USB_ReadChInterrupts>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	d131      	bne.n	8007fa2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	331a      	adds	r3, #26
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	f040 841f 	bne.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	331b      	adds	r3, #27
 8007f78:	2201      	movs	r2, #1
 8007f7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007f7c:	78fa      	ldrb	r2, [r7, #3]
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4613      	mov	r3, r2
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	334d      	adds	r3, #77	@ 0x4d
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f009 f9a6 	bl	80112ea <USB_HC_Halt>
 8007f9e:	f000 bc02 	b.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f008 fbff 	bl	80107ae <USB_ReadChInterrupts>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	f040 8305 	bne.w	80085c6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2302      	movs	r3, #2
 8007fcc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	334d      	adds	r3, #77	@ 0x4d
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d114      	bne.n	800800e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	334d      	adds	r3, #77	@ 0x4d
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	334c      	adds	r3, #76	@ 0x4c
 8008008:	2201      	movs	r2, #1
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e2cc      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	334d      	adds	r3, #77	@ 0x4d
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b06      	cmp	r3, #6
 8008022:	d114      	bne.n	800804e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	4613      	mov	r3, r2
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	334d      	adds	r3, #77	@ 0x4d
 8008034:	2202      	movs	r2, #2
 8008036:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	4613      	mov	r3, r2
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	334c      	adds	r3, #76	@ 0x4c
 8008048:	2205      	movs	r2, #5
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	e2ac      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	4613      	mov	r3, r2
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	1a9b      	subs	r3, r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	440b      	add	r3, r1
 800805c:	334d      	adds	r3, #77	@ 0x4d
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b07      	cmp	r3, #7
 8008062:	d00b      	beq.n	800807c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	334d      	adds	r3, #77	@ 0x4d
 8008074:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008076:	2b09      	cmp	r3, #9
 8008078:	f040 80a6 	bne.w	80081c8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	1a9b      	subs	r3, r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	334d      	adds	r3, #77	@ 0x4d
 800808c:	2202      	movs	r2, #2
 800808e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3344      	adds	r3, #68	@ 0x44
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4403      	add	r3, r0
 80080b0:	3344      	adds	r3, #68	@ 0x44
 80080b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	4613      	mov	r3, r2
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	3344      	adds	r3, #68	@ 0x44
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d943      	bls.n	8008152 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80080ca:	78fa      	ldrb	r2, [r7, #3]
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
 80080d8:	3344      	adds	r3, #68	@ 0x44
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	331a      	adds	r3, #26
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d123      	bne.n	800813c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4613      	mov	r3, r2
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	1a9b      	subs	r3, r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	331b      	adds	r3, #27
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008108:	78fa      	ldrb	r2, [r7, #3]
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	4613      	mov	r3, r2
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	331c      	adds	r3, #28
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	440a      	add	r2, r1
 8008132:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800813a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	334c      	adds	r3, #76	@ 0x4c
 800814c:	2204      	movs	r2, #4
 800814e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008150:	e229      	b.n	80085a6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	334c      	adds	r3, #76	@ 0x4c
 8008162:	2202      	movs	r2, #2
 8008164:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	3326      	adds	r3, #38	@ 0x26
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3326      	adds	r3, #38	@ 0x26
 800818c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800818e:	2b02      	cmp	r3, #2
 8008190:	f040 8209 	bne.w	80085a6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	4413      	add	r3, r2
 800819c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c0:	461a      	mov	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80081c6:	e1ee      	b.n	80085a6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	334d      	adds	r3, #77	@ 0x4d
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	f040 80c8 	bne.w	8008370 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	334d      	adds	r3, #77	@ 0x4d
 80081f0:	2202      	movs	r2, #2
 80081f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	331b      	adds	r3, #27
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b01      	cmp	r3, #1
 8008208:	f040 81ce 	bne.w	80085a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3326      	adds	r3, #38	@ 0x26
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b03      	cmp	r3, #3
 8008220:	d16b      	bne.n	80082fa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	3348      	adds	r3, #72	@ 0x48
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	1c59      	adds	r1, r3, #1
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4403      	add	r3, r0
 8008242:	3348      	adds	r3, #72	@ 0x48
 8008244:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	3348      	adds	r3, #72	@ 0x48
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d943      	bls.n	80082e4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	3348      	adds	r3, #72	@ 0x48
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	440b      	add	r3, r1
 800827e:	331b      	adds	r3, #27
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	3344      	adds	r3, #68	@ 0x44
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d809      	bhi.n	80082ae <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	331c      	adds	r3, #28
 80082aa:	2201      	movs	r2, #1
 80082ac:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082cc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	4613      	mov	r3, r2
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	440b      	add	r3, r1
 80082dc:	334c      	adds	r3, #76	@ 0x4c
 80082de:	2204      	movs	r2, #4
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e014      	b.n	800830e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082e4:	78fa      	ldrb	r2, [r7, #3]
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	334c      	adds	r3, #76	@ 0x4c
 80082f4:	2202      	movs	r2, #2
 80082f6:	701a      	strb	r2, [r3, #0]
 80082f8:	e009      	b.n	800830e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	334c      	adds	r3, #76	@ 0x4c
 800830a:	2202      	movs	r2, #2
 800830c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3326      	adds	r3, #38	@ 0x26
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	3326      	adds	r3, #38	@ 0x26
 8008334:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008336:	2b02      	cmp	r3, #2
 8008338:	f040 8136 	bne.w	80085a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4413      	add	r3, r2
 8008344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008352:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800835a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4413      	add	r3, r2
 8008364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008368:	461a      	mov	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	e11b      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	1a9b      	subs	r3, r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	334d      	adds	r3, #77	@ 0x4d
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b03      	cmp	r3, #3
 8008384:	f040 8081 	bne.w	800848a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008388:	78fa      	ldrb	r2, [r7, #3]
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	334d      	adds	r3, #77	@ 0x4d
 8008398:	2202      	movs	r2, #2
 800839a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	331b      	adds	r3, #27
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	f040 80fa 	bne.w	80085a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	334c      	adds	r3, #76	@ 0x4c
 80083c4:	2202      	movs	r2, #2
 80083c6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	78fa      	ldrb	r2, [r7, #3]
 80083f8:	0151      	lsls	r1, r2, #5
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	440a      	add	r2, r1
 80083fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008406:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008408:	78fb      	ldrb	r3, [r7, #3]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	78fa      	ldrb	r2, [r7, #3]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	440a      	add	r2, r1
 800841e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008422:	f023 0320 	bic.w	r3, r3, #32
 8008426:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008428:	78fa      	ldrb	r2, [r7, #3]
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	3326      	adds	r3, #38	@ 0x26
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3326      	adds	r3, #38	@ 0x26
 800844e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008450:	2b02      	cmp	r3, #2
 8008452:	f040 80a9 	bne.w	80085a8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800846c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008474:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	4413      	add	r3, r2
 800847e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008482:	461a      	mov	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e08e      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	334d      	adds	r3, #77	@ 0x4d
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d143      	bne.n	8008528 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	6879      	ldr	r1, [r7, #4]
 80084a4:	4613      	mov	r3, r2
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	1a9b      	subs	r3, r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	334d      	adds	r3, #77	@ 0x4d
 80084b0:	2202      	movs	r2, #2
 80084b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	440b      	add	r3, r1
 80084c2:	334c      	adds	r3, #76	@ 0x4c
 80084c4:	2202      	movs	r2, #2
 80084c6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	3326      	adds	r3, #38	@ 0x26
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	3326      	adds	r3, #38	@ 0x26
 80084ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d159      	bne.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800850a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008512:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008520:	461a      	mov	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	e03f      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	334d      	adds	r3, #77	@ 0x4d
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b08      	cmp	r3, #8
 800853c:	d126      	bne.n	800858c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	334d      	adds	r3, #77	@ 0x4d
 800854e:	2202      	movs	r2, #2
 8008550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	3344      	adds	r3, #68	@ 0x44
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	1c59      	adds	r1, r3, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4613      	mov	r3, r2
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4403      	add	r3, r0
 8008572:	3344      	adds	r3, #68	@ 0x44
 8008574:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	334c      	adds	r3, #76	@ 0x4c
 8008586:	2204      	movs	r2, #4
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e00d      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	334d      	adds	r3, #77	@ 0x4d
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	f000 8100 	beq.w	80087a4 <HCD_HC_IN_IRQHandler+0xcca>
 80085a4:	e000      	b.n	80085a8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80085a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	4613      	mov	r3, r2
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	1a9b      	subs	r3, r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	334c      	adds	r3, #76	@ 0x4c
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f011 f924 	bl	801980c <HAL_HCD_HC_NotifyURBChange_Callback>
 80085c4:	e0ef      	b.n	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f008 f8ed 	bl	80107ae <USB_ReadChInterrupts>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085da:	2b40      	cmp	r3, #64	@ 0x40
 80085dc:	d12f      	bne.n	800863e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ea:	461a      	mov	r2, r3
 80085ec:	2340      	movs	r3, #64	@ 0x40
 80085ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	334d      	adds	r3, #77	@ 0x4d
 8008600:	2205      	movs	r2, #5
 8008602:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	331a      	adds	r3, #26
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	3344      	adds	r3, #68	@ 0x44
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f008 fe57 	bl	80112ea <USB_HC_Halt>
 800863c:	e0b3      	b.n	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f008 f8b1 	bl	80107ae <USB_ReadChInterrupts>
 800864c:	4603      	mov	r3, r0
 800864e:	f003 0310 	and.w	r3, r3, #16
 8008652:	2b10      	cmp	r3, #16
 8008654:	f040 80a7 	bne.w	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	4613      	mov	r3, r2
 800865e:	011b      	lsls	r3, r3, #4
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	440b      	add	r3, r1
 8008666:	3326      	adds	r3, #38	@ 0x26
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b03      	cmp	r3, #3
 800866c:	d11b      	bne.n	80086a6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	3344      	adds	r3, #68	@ 0x44
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	334d      	adds	r3, #77	@ 0x4d
 8008692:	2204      	movs	r2, #4
 8008694:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f008 fe23 	bl	80112ea <USB_HC_Halt>
 80086a4:	e03f      	b.n	8008726 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	440b      	add	r3, r1
 80086b4:	3326      	adds	r3, #38	@ 0x26
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	3326      	adds	r3, #38	@ 0x26
 80086cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d129      	bne.n	8008726 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	3344      	adds	r3, #68	@ 0x44
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	799b      	ldrb	r3, [r3, #6]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <HCD_HC_IN_IRQHandler+0xc2a>
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	011b      	lsls	r3, r3, #4
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	331b      	adds	r3, #27
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d110      	bne.n	8008726 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	334d      	adds	r3, #77	@ 0x4d
 8008714:	2204      	movs	r2, #4
 8008716:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f008 fde2 	bl	80112ea <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	331b      	adds	r3, #27
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d129      	bne.n	8008790 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800873c:	78fa      	ldrb	r2, [r7, #3]
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	331b      	adds	r3, #27
 800874c:	2200      	movs	r2, #0
 800874e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4413      	add	r3, r2
 8008758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	440a      	add	r2, r1
 8008766:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800876a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800876e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	0151      	lsls	r1, r2, #5
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	440a      	add	r2, r1
 8008786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800878a:	f043 0320 	orr.w	r3, r3, #32
 800878e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	4413      	add	r3, r2
 8008798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879c:	461a      	mov	r2, r3
 800879e:	2310      	movs	r3, #16
 80087a0:	6093      	str	r3, [r2, #8]
 80087a2:	e000      	b.n	80087a6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80087a4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f007 ffef 	bl	80107ae <USB_ReadChInterrupts>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d11b      	bne.n	8008812 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e6:	461a      	mov	r2, r3
 80087e8:	2304      	movs	r3, #4
 80087ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	4613      	mov	r3, r2
 80087f2:	011b      	lsls	r3, r3, #4
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	334d      	adds	r3, #77	@ 0x4d
 80087fc:	2207      	movs	r2, #7
 80087fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f008 fd6e 	bl	80112ea <USB_HC_Halt>
 800880e:	f000 bc89 	b.w	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f007 ffc7 	bl	80107ae <USB_ReadChInterrupts>
 8008820:	4603      	mov	r3, r0
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b20      	cmp	r3, #32
 8008828:	f040 8082 	bne.w	8008930 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008838:	461a      	mov	r2, r3
 800883a:	2320      	movs	r3, #32
 800883c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	3319      	adds	r3, #25
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d124      	bne.n	800889e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	1a9b      	subs	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	3319      	adds	r3, #25
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4613      	mov	r3, r2
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	334c      	adds	r3, #76	@ 0x4c
 8008878:	2202      	movs	r2, #2
 800887a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	4613      	mov	r3, r2
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	334d      	adds	r3, #77	@ 0x4d
 800888c:	2203      	movs	r2, #3
 800888e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f008 fd26 	bl	80112ea <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	1a9b      	subs	r3, r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	440b      	add	r3, r1
 80088ac:	331a      	adds	r3, #26
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	f040 8437 	bne.w	8009124 <HCD_HC_OUT_IRQHandler+0x978>
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	331b      	adds	r3, #27
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f040 842b 	bne.w	8009124 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	440b      	add	r3, r1
 80088dc:	3326      	adds	r3, #38	@ 0x26
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d009      	beq.n	80088f8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	331b      	adds	r3, #27
 80088f4:	2201      	movs	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	334d      	adds	r3, #77	@ 0x4d
 8008908:	2203      	movs	r2, #3
 800890a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f008 fce8 	bl	80112ea <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	3344      	adds	r3, #68	@ 0x44
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e3f9      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	4611      	mov	r1, r2
 8008938:	4618      	mov	r0, r3
 800893a:	f007 ff38 	bl	80107ae <USB_ReadChInterrupts>
 800893e:	4603      	mov	r3, r0
 8008940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008948:	d111      	bne.n	800896e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008956:	461a      	mov	r2, r3
 8008958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800895c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f008 fcbf 	bl	80112ea <USB_HC_Halt>
 800896c:	e3da      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	78fa      	ldrb	r2, [r7, #3]
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f007 ff19 	bl	80107ae <USB_ReadChInterrupts>
 800897c:	4603      	mov	r3, r0
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b01      	cmp	r3, #1
 8008984:	d168      	bne.n	8008a58 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	011b      	lsls	r3, r3, #4
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	3344      	adds	r3, #68	@ 0x44
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f007 ff03 	bl	80107ae <USB_ReadChInterrupts>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ae:	2b40      	cmp	r3, #64	@ 0x40
 80089b0:	d112      	bne.n	80089d8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80089b2:	78fa      	ldrb	r2, [r7, #3]
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	440b      	add	r3, r1
 80089c0:	3319      	adds	r3, #25
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089d2:	461a      	mov	r2, r3
 80089d4:	2340      	movs	r3, #64	@ 0x40
 80089d6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	4613      	mov	r3, r2
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	331b      	adds	r3, #27
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d019      	beq.n	8008a22 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	331b      	adds	r3, #27
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a20:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008a22:	78fb      	ldrb	r3, [r7, #3]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a2e:	461a      	mov	r2, r3
 8008a30:	2301      	movs	r3, #1
 8008a32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	1a9b      	subs	r3, r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	334d      	adds	r3, #77	@ 0x4d
 8008a44:	2201      	movs	r2, #1
 8008a46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f008 fc4a 	bl	80112ea <USB_HC_Halt>
 8008a56:	e365      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	78fa      	ldrb	r2, [r7, #3]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f007 fea4 	bl	80107ae <USB_ReadChInterrupts>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6c:	2b40      	cmp	r3, #64	@ 0x40
 8008a6e:	d139      	bne.n	8008ae4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008a70:	78fa      	ldrb	r2, [r7, #3]
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	011b      	lsls	r3, r3, #4
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	334d      	adds	r3, #77	@ 0x4d
 8008a80:	2205      	movs	r2, #5
 8008a82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	011b      	lsls	r3, r3, #4
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	331a      	adds	r3, #26
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d109      	bne.n	8008aae <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3319      	adds	r3, #25
 8008aaa:	2201      	movs	r2, #1
 8008aac:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	3344      	adds	r3, #68	@ 0x44
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f008 fc0d 	bl	80112ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008adc:	461a      	mov	r2, r3
 8008ade:	2340      	movs	r3, #64	@ 0x40
 8008ae0:	6093      	str	r3, [r2, #8]
 8008ae2:	e31f      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f007 fe5e 	bl	80107ae <USB_ReadChInterrupts>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d11a      	bne.n	8008b32 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	334d      	adds	r3, #77	@ 0x4d
 8008b1e:	2206      	movs	r2, #6
 8008b20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f008 fbdd 	bl	80112ea <USB_HC_Halt>
 8008b30:	e2f8      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f007 fe37 	bl	80107ae <USB_ReadChInterrupts>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d144      	bne.n	8008bd4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	1a9b      	subs	r3, r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	440b      	add	r3, r1
 8008b58:	3344      	adds	r3, #68	@ 0x44
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	334d      	adds	r3, #77	@ 0x4d
 8008b6e:	2204      	movs	r2, #4
 8008b70:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	3319      	adds	r3, #25
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d114      	bne.n	8008bb2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	3318      	adds	r3, #24
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	3319      	adds	r3, #25
 8008bae:	2201      	movs	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f008 fb95 	bl	80112ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2310      	movs	r3, #16
 8008bd0:	6093      	str	r3, [r2, #8]
 8008bd2:	e2a7      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	78fa      	ldrb	r2, [r7, #3]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f007 fde6 	bl	80107ae <USB_ReadChInterrupts>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be8:	2b80      	cmp	r3, #128	@ 0x80
 8008bea:	f040 8083 	bne.w	8008cf4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	799b      	ldrb	r3, [r3, #6]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d111      	bne.n	8008c1a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	334d      	adds	r3, #77	@ 0x4d
 8008c06:	2207      	movs	r2, #7
 8008c08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f008 fb69 	bl	80112ea <USB_HC_Halt>
 8008c18:	e062      	b.n	8008ce0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	3344      	adds	r3, #68	@ 0x44
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	1c59      	adds	r1, r3, #1
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4613      	mov	r3, r2
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4403      	add	r3, r0
 8008c3a:	3344      	adds	r3, #68	@ 0x44
 8008c3c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3344      	adds	r3, #68	@ 0x44
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d922      	bls.n	8008c9a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	3344      	adds	r3, #68	@ 0x44
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008c68:	78fa      	ldrb	r2, [r7, #3]
 8008c6a:	6879      	ldr	r1, [r7, #4]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	334c      	adds	r3, #76	@ 0x4c
 8008c78:	2204      	movs	r2, #4
 8008c7a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4613      	mov	r3, r2
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	440b      	add	r3, r1
 8008c8a:	334c      	adds	r3, #76	@ 0x4c
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f010 fdba 	bl	801980c <HAL_HCD_HC_NotifyURBChange_Callback>
 8008c98:	e022      	b.n	8008ce0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	334c      	adds	r3, #76	@ 0x4c
 8008caa:	2202      	movs	r2, #2
 8008cac:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008cc4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ccc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cec:	461a      	mov	r2, r3
 8008cee:	2380      	movs	r3, #128	@ 0x80
 8008cf0:	6093      	str	r3, [r2, #8]
 8008cf2:	e217      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	78fa      	ldrb	r2, [r7, #3]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f007 fd56 	bl	80107ae <USB_ReadChInterrupts>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d0c:	d11b      	bne.n	8008d46 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	1a9b      	subs	r3, r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	334d      	adds	r3, #77	@ 0x4d
 8008d1e:	2209      	movs	r2, #9
 8008d20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f008 fadd 	bl	80112ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d42:	6093      	str	r3, [r2, #8]
 8008d44:	e1ee      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f007 fd2d 	bl	80107ae <USB_ReadChInterrupts>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	f040 81df 	bne.w	800911e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	2302      	movs	r3, #2
 8008d70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	334d      	adds	r3, #77	@ 0x4d
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	f040 8093 	bne.w	8008eb0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	334d      	adds	r3, #77	@ 0x4d
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	334c      	adds	r3, #76	@ 0x4c
 8008dae:	2201      	movs	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	4613      	mov	r3, r2
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	3326      	adds	r3, #38	@ 0x26
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d00b      	beq.n	8008de0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	440b      	add	r3, r1
 8008dd6:	3326      	adds	r3, #38	@ 0x26
 8008dd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	f040 8190 	bne.w	8009100 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	799b      	ldrb	r3, [r3, #6]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d115      	bne.n	8008e14 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	333d      	adds	r3, #61	@ 0x3d
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	f083 0301 	eor.w	r3, r3, #1
 8008e00:	b2d8      	uxtb	r0, r3
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	333d      	adds	r3, #61	@ 0x3d
 8008e10:	4602      	mov	r2, r0
 8008e12:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	799b      	ldrb	r3, [r3, #6]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	f040 8171 	bne.w	8009100 <HCD_HC_OUT_IRQHandler+0x954>
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3334      	adds	r3, #52	@ 0x34
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8165 	beq.w	8009100 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008e36:	78fa      	ldrb	r2, [r7, #3]
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	3334      	adds	r3, #52	@ 0x34
 8008e46:	6819      	ldr	r1, [r3, #0]
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4403      	add	r3, r0
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	440b      	add	r3, r1
 8008e5c:	1e59      	subs	r1, r3, #1
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	1a9b      	subs	r3, r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4403      	add	r3, r0
 8008e6c:	3328      	adds	r3, #40	@ 0x28
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e74:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 813f 	beq.w	8009100 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	333d      	adds	r3, #61	@ 0x3d
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	f083 0301 	eor.w	r3, r3, #1
 8008e9a:	b2d8      	uxtb	r0, r3
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	333d      	adds	r3, #61	@ 0x3d
 8008eaa:	4602      	mov	r2, r0
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	e127      	b.n	8009100 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008eb0:	78fa      	ldrb	r2, [r7, #3]
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	334d      	adds	r3, #77	@ 0x4d
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d120      	bne.n	8008f08 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	6879      	ldr	r1, [r7, #4]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	334d      	adds	r3, #77	@ 0x4d
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	440b      	add	r3, r1
 8008ee8:	331b      	adds	r3, #27
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	f040 8107 	bne.w	8009100 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	334c      	adds	r3, #76	@ 0x4c
 8008f02:	2202      	movs	r2, #2
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e0fb      	b.n	8009100 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	334d      	adds	r3, #77	@ 0x4d
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d13a      	bne.n	8008f94 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	334d      	adds	r3, #77	@ 0x4d
 8008f2e:	2202      	movs	r2, #2
 8008f30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	334c      	adds	r3, #76	@ 0x4c
 8008f42:	2202      	movs	r2, #2
 8008f44:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	331b      	adds	r3, #27
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	f040 80d1 	bne.w	8009100 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	331b      	adds	r3, #27
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f90:	6053      	str	r3, [r2, #4]
 8008f92:	e0b5      	b.n	8009100 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	334d      	adds	r3, #77	@ 0x4d
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	d114      	bne.n	8008fd4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	334d      	adds	r3, #77	@ 0x4d
 8008fba:	2202      	movs	r2, #2
 8008fbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	1a9b      	subs	r3, r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	334c      	adds	r3, #76	@ 0x4c
 8008fce:	2202      	movs	r2, #2
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	e095      	b.n	8009100 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	334d      	adds	r3, #77	@ 0x4d
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b06      	cmp	r3, #6
 8008fe8:	d114      	bne.n	8009014 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	440b      	add	r3, r1
 8008ff8:	334d      	adds	r3, #77	@ 0x4d
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	334c      	adds	r3, #76	@ 0x4c
 800900e:	2205      	movs	r2, #5
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e075      	b.n	8009100 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4613      	mov	r3, r2
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	334d      	adds	r3, #77	@ 0x4d
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b07      	cmp	r3, #7
 8009028:	d00a      	beq.n	8009040 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4613      	mov	r3, r2
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	334d      	adds	r3, #77	@ 0x4d
 800903a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800903c:	2b09      	cmp	r3, #9
 800903e:	d170      	bne.n	8009122 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	4613      	mov	r3, r2
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	440b      	add	r3, r1
 800904e:	334d      	adds	r3, #77	@ 0x4d
 8009050:	2202      	movs	r2, #2
 8009052:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009054:	78fa      	ldrb	r2, [r7, #3]
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	4613      	mov	r3, r2
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	3344      	adds	r3, #68	@ 0x44
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	1c59      	adds	r1, r3, #1
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4403      	add	r3, r0
 8009074:	3344      	adds	r3, #68	@ 0x44
 8009076:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4613      	mov	r3, r2
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	1a9b      	subs	r3, r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	3344      	adds	r3, #68	@ 0x44
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d914      	bls.n	80090b8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	3344      	adds	r3, #68	@ 0x44
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80090a2:	78fa      	ldrb	r2, [r7, #3]
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	4613      	mov	r3, r2
 80090a8:	011b      	lsls	r3, r3, #4
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	440b      	add	r3, r1
 80090b0:	334c      	adds	r3, #76	@ 0x4c
 80090b2:	2204      	movs	r2, #4
 80090b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090b6:	e022      	b.n	80090fe <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80090b8:	78fa      	ldrb	r2, [r7, #3]
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	4613      	mov	r3, r2
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	334c      	adds	r3, #76	@ 0x4c
 80090c8:	2202      	movs	r2, #2
 80090ca:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090f8:	461a      	mov	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009100:	78fa      	ldrb	r2, [r7, #3]
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	334c      	adds	r3, #76	@ 0x4c
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f010 fb78 	bl	801980c <HAL_HCD_HC_NotifyURBChange_Callback>
 800911c:	e002      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800911e:	bf00      	nop
 8009120:	e000      	b.n	8009124 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009122:	bf00      	nop
  }
}
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b08a      	sub	sp, #40	@ 0x28
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	0c5b      	lsrs	r3, r3, #17
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	091b      	lsrs	r3, r3, #4
 800915a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800915e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b02      	cmp	r3, #2
 8009164:	d004      	beq.n	8009170 <HCD_RXQLVL_IRQHandler+0x46>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b05      	cmp	r3, #5
 800916a:	f000 80b6 	beq.w	80092da <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800916e:	e0b7      	b.n	80092e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 80b3 	beq.w	80092de <HCD_RXQLVL_IRQHandler+0x1b4>
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	4613      	mov	r3, r2
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	332c      	adds	r3, #44	@ 0x2c
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 80a7 	beq.w	80092de <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	4613      	mov	r3, r2
 8009196:	011b      	lsls	r3, r3, #4
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	3338      	adds	r3, #56	@ 0x38
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	18d1      	adds	r1, r2, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	4613      	mov	r3, r2
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	1a9b      	subs	r3, r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4403      	add	r3, r0
 80091b4:	3334      	adds	r3, #52	@ 0x34
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4299      	cmp	r1, r3
 80091ba:	f200 8083 	bhi.w	80092c4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	4613      	mov	r3, r2
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	332c      	adds	r3, #44	@ 0x2c
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	b292      	uxth	r2, r2
 80091d8:	4619      	mov	r1, r3
 80091da:	f007 fa7d 	bl	80106d8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	4613      	mov	r3, r2
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	332c      	adds	r3, #44	@ 0x2c
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	18d1      	adds	r1, r2, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	4613      	mov	r3, r2
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4403      	add	r3, r0
 8009202:	332c      	adds	r3, #44	@ 0x2c
 8009204:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	4613      	mov	r3, r2
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3338      	adds	r3, #56	@ 0x38
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	18d1      	adds	r1, r2, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	4613      	mov	r3, r2
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4403      	add	r3, r0
 800922a:	3338      	adds	r3, #56	@ 0x38
 800922c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	4413      	add	r3, r2
 8009236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	0cdb      	lsrs	r3, r3, #19
 800923e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009242:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	4613      	mov	r3, r2
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	440b      	add	r3, r1
 8009252:	3328      	adds	r3, #40	@ 0x28
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	4293      	cmp	r3, r2
 800925c:	d13f      	bne.n	80092de <HCD_RXQLVL_IRQHandler+0x1b4>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d03c      	beq.n	80092de <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	4413      	add	r3, r2
 800926c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800927a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009282:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	4413      	add	r3, r2
 800928c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009290:	461a      	mov	r2, r3
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	69ba      	ldr	r2, [r7, #24]
 800929a:	4613      	mov	r3, r2
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	333c      	adds	r3, #60	@ 0x3c
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f083 0301 	eor.w	r3, r3, #1
 80092ac:	b2d8      	uxtb	r0, r3
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	4613      	mov	r3, r2
 80092b4:	011b      	lsls	r3, r3, #4
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	333c      	adds	r3, #60	@ 0x3c
 80092be:	4602      	mov	r2, r0
 80092c0:	701a      	strb	r2, [r3, #0]
      break;
 80092c2:	e00c      	b.n	80092de <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	4613      	mov	r3, r2
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	1a9b      	subs	r3, r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	334c      	adds	r3, #76	@ 0x4c
 80092d4:	2204      	movs	r2, #4
 80092d6:	701a      	strb	r2, [r3, #0]
      break;
 80092d8:	e001      	b.n	80092de <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80092da:	bf00      	nop
 80092dc:	e000      	b.n	80092e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80092de:	bf00      	nop
  }
}
 80092e0:	bf00      	nop
 80092e2:	3728      	adds	r7, #40	@ 0x28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009314:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d10b      	bne.n	8009338 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b01      	cmp	r3, #1
 8009328:	d102      	bne.n	8009330 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f010 fa52 	bl	80197d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f043 0302 	orr.w	r3, r3, #2
 8009336:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 0308 	and.w	r3, r3, #8
 800933e:	2b08      	cmp	r3, #8
 8009340:	d132      	bne.n	80093a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f043 0308 	orr.w	r3, r3, #8
 8009348:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b04      	cmp	r3, #4
 8009352:	d126      	bne.n	80093a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7a5b      	ldrb	r3, [r3, #9]
 8009358:	2b02      	cmp	r3, #2
 800935a:	d113      	bne.n	8009384 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009362:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009366:	d106      	bne.n	8009376 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2102      	movs	r1, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f007 fb3c 	bl	80109ec <USB_InitFSLSPClkSel>
 8009374:	e011      	b.n	800939a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2101      	movs	r1, #1
 800937c:	4618      	mov	r0, r3
 800937e:	f007 fb35 	bl	80109ec <USB_InitFSLSPClkSel>
 8009382:	e00a      	b.n	800939a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	79db      	ldrb	r3, [r3, #7]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d106      	bne.n	800939a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009392:	461a      	mov	r2, r3
 8009394:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009398:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f010 fa48 	bl	8019830 <HAL_HCD_PortEnabled_Callback>
 80093a0:	e002      	b.n	80093a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f010 fa52 	bl	801984c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d103      	bne.n	80093ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f043 0320 	orr.w	r3, r3, #32
 80093b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80093c0:	461a      	mov	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6013      	str	r3, [r2, #0]
}
 80093c6:	bf00      	nop
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
	...

080093d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e08b      	b.n	80094fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d106      	bne.n	80093fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7fa f9ee 	bl	80037d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2224      	movs	r2, #36	@ 0x24
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 0201 	bic.w	r2, r2, #1
 8009412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009420:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009430:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d107      	bne.n	800944a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009446:	609a      	str	r2, [r3, #8]
 8009448:	e006      	b.n	8009458 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009456:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	2b02      	cmp	r3, #2
 800945e:	d108      	bne.n	8009472 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800946e:	605a      	str	r2, [r3, #4]
 8009470:	e007      	b.n	8009482 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009480:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6859      	ldr	r1, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4b1d      	ldr	r3, [pc, #116]	@ (8009504 <HAL_I2C_Init+0x134>)
 800948e:	430b      	orrs	r3, r1
 8009490:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80094a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691a      	ldr	r2, [r3, #16]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	69d9      	ldr	r1, [r3, #28]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a1a      	ldr	r2, [r3, #32]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	02008000 	.word	0x02008000

08009508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b20      	cmp	r3, #32
 800951c:	d138      	bne.n	8009590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009528:	2302      	movs	r3, #2
 800952a:	e032      	b.n	8009592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2224      	movs	r2, #36	@ 0x24
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800955a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6819      	ldr	r1, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0201 	orr.w	r2, r2, #1
 800957a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	e000      	b.n	8009592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009590:	2302      	movs	r3, #2
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800959e:	b480      	push	{r7}
 80095a0:	b085      	sub	sp, #20
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d139      	bne.n	8009628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80095be:	2302      	movs	r3, #2
 80095c0:	e033      	b.n	800962a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2224      	movs	r2, #36	@ 0x24
 80095ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f022 0201 	bic.w	r2, r2, #1
 80095e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80095f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
  }
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e08f      	b.n	8009768 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fa f963 	bl	8003928 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009678:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6999      	ldr	r1, [r3, #24]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800968e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	041b      	lsls	r3, r3, #16
 80096a4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6999      	ldr	r1, [r3, #24]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a19      	ldr	r1, [r3, #32]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ce:	041b      	lsls	r3, r3, #16
 80096d0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	430a      	orrs	r2, r1
 80096de:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009706:	041b      	lsls	r3, r3, #16
 8009708:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009718:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0206 	orr.w	r2, r2, #6
 8009744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0201 	orr.w	r2, r2, #1
 8009754:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009786:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f003 0304 	and.w	r3, r3, #4
 800978e:	2b00      	cmp	r3, #0
 8009790:	d023      	beq.n	80097da <HAL_LTDC_IRQHandler+0x6a>
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01e      	beq.n	80097da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0204 	bic.w	r2, r2, #4
 80097aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2204      	movs	r2, #4
 80097b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097ba:	f043 0201 	orr.w	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2204      	movs	r2, #4
 80097c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f86f 	bl	80098b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d023      	beq.n	800982c <HAL_LTDC_IRQHandler+0xbc>
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	f003 0302 	and.w	r3, r3, #2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01e      	beq.n	800982c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0202 	bic.w	r2, r2, #2
 80097fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2202      	movs	r2, #2
 8009804:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800980c:	f043 0202 	orr.w	r2, r3, #2
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2204      	movs	r2, #4
 800981a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f846 	bl	80098b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d01b      	beq.n	800986e <HAL_LTDC_IRQHandler+0xfe>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d016      	beq.n	800986e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0201 	bic.w	r2, r2, #1
 800984e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2201      	movs	r2, #1
 8009856:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f82f 	bl	80098cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f003 0308 	and.w	r3, r3, #8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01b      	beq.n	80098b0 <HAL_LTDC_IRQHandler+0x140>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0208 	bic.w	r2, r2, #8
 8009890:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2208      	movs	r2, #8
 8009898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f818 	bl	80098e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80098f4:	b5b0      	push	{r4, r5, r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_LTDC_ConfigLayer+0x1a>
 800990a:	2302      	movs	r3, #2
 800990c:	e02c      	b.n	8009968 <HAL_LTDC_ConfigLayer+0x74>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2202      	movs	r2, #2
 800991a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2134      	movs	r1, #52	@ 0x34
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	4413      	add	r3, r2
 800992a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	4614      	mov	r4, r2
 8009932:	461d      	mov	r5, r3
 8009934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800993a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800993c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800993e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f811 	bl	8009970 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2201      	movs	r2, #1
 8009954:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bdb0      	pop	{r4, r5, r7, pc}

08009970 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009970:	b480      	push	{r7}
 8009972:	b089      	sub	sp, #36	@ 0x24
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800998c:	4413      	add	r3, r2
 800998e:	041b      	lsls	r3, r3, #16
 8009990:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	01db      	lsls	r3, r3, #7
 800999c:	4413      	add	r3, r2
 800999e:	3384      	adds	r3, #132	@ 0x84
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	4611      	mov	r1, r2
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	01d2      	lsls	r2, r2, #7
 80099ac:	440a      	add	r2, r1
 80099ae:	3284      	adds	r2, #132	@ 0x84
 80099b0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80099b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	0c1b      	lsrs	r3, r3, #16
 80099c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80099c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80099c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4619      	mov	r1, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	01db      	lsls	r3, r3, #7
 80099d4:	440b      	add	r3, r1
 80099d6:	3384      	adds	r3, #132	@ 0x84
 80099d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80099de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099ee:	4413      	add	r3, r2
 80099f0:	041b      	lsls	r3, r3, #16
 80099f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	01db      	lsls	r3, r3, #7
 80099fe:	4413      	add	r3, r2
 8009a00:	3384      	adds	r3, #132	@ 0x84
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	4611      	mov	r1, r2
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	01d2      	lsls	r2, r2, #7
 8009a0e:	440a      	add	r2, r1
 8009a10:	3284      	adds	r2, #132	@ 0x84
 8009a12:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009a16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a26:	4413      	add	r3, r2
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	01db      	lsls	r3, r3, #7
 8009a34:	440b      	add	r3, r1
 8009a36:	3384      	adds	r3, #132	@ 0x84
 8009a38:	4619      	mov	r1, r3
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	01db      	lsls	r3, r3, #7
 8009a4a:	4413      	add	r3, r2
 8009a4c:	3384      	adds	r3, #132	@ 0x84
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	4611      	mov	r1, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	01d2      	lsls	r2, r2, #7
 8009a5a:	440a      	add	r2, r1
 8009a5c:	3284      	adds	r2, #132	@ 0x84
 8009a5e:	f023 0307 	bic.w	r3, r3, #7
 8009a62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	01db      	lsls	r3, r3, #7
 8009a6e:	4413      	add	r3, r2
 8009a70:	3384      	adds	r3, #132	@ 0x84
 8009a72:	461a      	mov	r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	061b      	lsls	r3, r3, #24
 8009a94:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	01db      	lsls	r3, r3, #7
 8009ab0:	440b      	add	r3, r1
 8009ab2:	3384      	adds	r3, #132	@ 0x84
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	01db      	lsls	r3, r3, #7
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3384      	adds	r3, #132	@ 0x84
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	6812      	ldr	r2, [r2, #0]
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	01d2      	lsls	r2, r2, #7
 8009ad6:	440a      	add	r2, r1
 8009ad8:	3284      	adds	r2, #132	@ 0x84
 8009ada:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009ade:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	01db      	lsls	r3, r3, #7
 8009aea:	4413      	add	r3, r2
 8009aec:	3384      	adds	r3, #132	@ 0x84
 8009aee:	461a      	mov	r2, r3
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	01db      	lsls	r3, r3, #7
 8009b00:	4413      	add	r3, r2
 8009b02:	3384      	adds	r3, #132	@ 0x84
 8009b04:	69da      	ldr	r2, [r3, #28]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	01db      	lsls	r3, r3, #7
 8009b10:	440b      	add	r3, r1
 8009b12:	3384      	adds	r3, #132	@ 0x84
 8009b14:	4619      	mov	r1, r3
 8009b16:	4b4f      	ldr	r3, [pc, #316]	@ (8009c54 <LTDC_SetConfig+0x2e4>)
 8009b18:	4013      	ands	r3, r2
 8009b1a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	6809      	ldr	r1, [r1, #0]
 8009b28:	4608      	mov	r0, r1
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	01c9      	lsls	r1, r1, #7
 8009b2e:	4401      	add	r1, r0
 8009b30:	3184      	adds	r1, #132	@ 0x84
 8009b32:	4313      	orrs	r3, r2
 8009b34:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	01db      	lsls	r3, r3, #7
 8009b40:	4413      	add	r3, r2
 8009b42:	3384      	adds	r3, #132	@ 0x84
 8009b44:	461a      	mov	r2, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009b54:	2304      	movs	r3, #4
 8009b56:	61fb      	str	r3, [r7, #28]
 8009b58:	e01b      	b.n	8009b92 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d102      	bne.n	8009b68 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009b62:	2303      	movs	r3, #3
 8009b64:	61fb      	str	r3, [r7, #28]
 8009b66:	e014      	b.n	8009b92 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d00b      	beq.n	8009b88 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d007      	beq.n	8009b88 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d003      	beq.n	8009b88 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009b84:	2b07      	cmp	r3, #7
 8009b86:	d102      	bne.n	8009b8e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	e001      	b.n	8009b92 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	01db      	lsls	r3, r3, #7
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3384      	adds	r3, #132	@ 0x84
 8009ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	6812      	ldr	r2, [r2, #0]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	01d2      	lsls	r2, r2, #7
 8009bac:	440a      	add	r2, r1
 8009bae:	3284      	adds	r2, #132	@ 0x84
 8009bb0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	fb02 f303 	mul.w	r3, r2, r3
 8009bc0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6859      	ldr	r1, [r3, #4]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	1acb      	subs	r3, r1, r3
 8009bcc:	69f9      	ldr	r1, [r7, #28]
 8009bce:	fb01 f303 	mul.w	r3, r1, r3
 8009bd2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009bd4:	68f9      	ldr	r1, [r7, #12]
 8009bd6:	6809      	ldr	r1, [r1, #0]
 8009bd8:	4608      	mov	r0, r1
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	01c9      	lsls	r1, r1, #7
 8009bde:	4401      	add	r1, r0
 8009be0:	3184      	adds	r1, #132	@ 0x84
 8009be2:	4313      	orrs	r3, r2
 8009be4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	01db      	lsls	r3, r3, #7
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3384      	adds	r3, #132	@ 0x84
 8009bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	01db      	lsls	r3, r3, #7
 8009c00:	440b      	add	r3, r1
 8009c02:	3384      	adds	r3, #132	@ 0x84
 8009c04:	4619      	mov	r1, r3
 8009c06:	4b14      	ldr	r3, [pc, #80]	@ (8009c58 <LTDC_SetConfig+0x2e8>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	01db      	lsls	r3, r3, #7
 8009c16:	4413      	add	r3, r2
 8009c18:	3384      	adds	r3, #132	@ 0x84
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	01db      	lsls	r3, r3, #7
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3384      	adds	r3, #132	@ 0x84
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	4611      	mov	r1, r2
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	01d2      	lsls	r2, r2, #7
 8009c3c:	440a      	add	r2, r1
 8009c3e:	3284      	adds	r2, #132	@ 0x84
 8009c40:	f043 0301 	orr.w	r3, r3, #1
 8009c44:	6013      	str	r3, [r2, #0]
}
 8009c46:	bf00      	nop
 8009c48:	3724      	adds	r7, #36	@ 0x24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	fffff8f8 	.word	0xfffff8f8
 8009c58:	fffff800 	.word	0xfffff800

08009c5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c60:	4b05      	ldr	r3, [pc, #20]	@ (8009c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a04      	ldr	r2, [pc, #16]	@ (8009c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c6a:	6013      	str	r3, [r2, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	40007000 	.word	0x40007000

08009c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c86:	4b23      	ldr	r3, [pc, #140]	@ (8009d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8a:	4a22      	ldr	r2, [pc, #136]	@ (8009d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8009c92:	4b20      	ldr	r3, [pc, #128]	@ (8009d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ca8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009caa:	f7fb f9d3 	bl	8005054 <HAL_GetTick>
 8009cae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009cb0:	e009      	b.n	8009cc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009cb2:	f7fb f9cf 	bl	8005054 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cc0:	d901      	bls.n	8009cc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e022      	b.n	8009d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009cc6:	4b14      	ldr	r3, [pc, #80]	@ (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd2:	d1ee      	bne.n	8009cb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009cd4:	4b10      	ldr	r3, [pc, #64]	@ (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ce0:	f7fb f9b8 	bl	8005054 <HAL_GetTick>
 8009ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ce6:	e009      	b.n	8009cfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ce8:	f7fb f9b4 	bl	8005054 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cf6:	d901      	bls.n	8009cfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e007      	b.n	8009d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009cfc:	4b06      	ldr	r3, [pc, #24]	@ (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d08:	d1ee      	bne.n	8009ce8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40023800 	.word	0x40023800
 8009d18:	40007000 	.word	0x40007000

08009d1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009d24:	f7fb f996 	bl	8005054 <HAL_GetTick>
 8009d28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e067      	b.n	8009e04 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7f9 feb5 	bl	8003ab8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009d4e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f85e 	bl	8009e14 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	021a      	lsls	r2, r3, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2120      	movs	r1, #32
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f856 	bl	8009e30 <QSPI_WaitFlagStateUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d135      	bne.n	8009dfa <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	4b1d      	ldr	r3, [pc, #116]	@ (8009e0c <HAL_QSPI_Init+0xf0>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	6852      	ldr	r2, [r2, #4]
 8009d9c:	0611      	lsls	r1, r2, #24
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68d2      	ldr	r2, [r2, #12]
 8009da2:	4311      	orrs	r1, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	69d2      	ldr	r2, [r2, #28]
 8009da8:	4311      	orrs	r1, r2
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6a12      	ldr	r2, [r2, #32]
 8009dae:	4311      	orrs	r1, r2
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6812      	ldr	r2, [r2, #0]
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	4b14      	ldr	r3, [pc, #80]	@ (8009e10 <HAL_QSPI_Init+0xf4>)
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6912      	ldr	r2, [r2, #16]
 8009dc6:	0411      	lsls	r1, r2, #16
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6952      	ldr	r2, [r2, #20]
 8009dcc:	4311      	orrs	r1, r2
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	6992      	ldr	r2, [r2, #24]
 8009dd2:	4311      	orrs	r1, r2
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6812      	ldr	r2, [r2, #0]
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009e02:	7afb      	ldrb	r3, [r7, #11]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	00ffff2f 	.word	0x00ffff2f
 8009e10:	ffe0f8fe 	.word	0xffe0f8fe

08009e14 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e40:	e01a      	b.n	8009e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d016      	beq.n	8009e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4a:	f7fb f903 	bl	8005054 <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d302      	bcc.n	8009e60 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2204      	movs	r2, #4
 8009e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e6c:	f043 0201 	orr.w	r2, r3, #1
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e00e      	b.n	8009e96 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d1d6      	bne.n	8009e42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e291      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8087 	beq.w	8009fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ec4:	4b96      	ldr	r3, [pc, #600]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f003 030c 	and.w	r3, r3, #12
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d00c      	beq.n	8009eea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ed0:	4b93      	ldr	r3, [pc, #588]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f003 030c 	and.w	r3, r3, #12
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d112      	bne.n	8009f02 <HAL_RCC_OscConfig+0x62>
 8009edc:	4b90      	ldr	r3, [pc, #576]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ee4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ee8:	d10b      	bne.n	8009f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eea:	4b8d      	ldr	r3, [pc, #564]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d06c      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x130>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d168      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e26b      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f0a:	d106      	bne.n	8009f1a <HAL_RCC_OscConfig+0x7a>
 8009f0c:	4b84      	ldr	r3, [pc, #528]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a83      	ldr	r2, [pc, #524]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	e02e      	b.n	8009f78 <HAL_RCC_OscConfig+0xd8>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10c      	bne.n	8009f3c <HAL_RCC_OscConfig+0x9c>
 8009f22:	4b7f      	ldr	r3, [pc, #508]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a7e      	ldr	r2, [pc, #504]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	4b7c      	ldr	r3, [pc, #496]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a7b      	ldr	r2, [pc, #492]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	e01d      	b.n	8009f78 <HAL_RCC_OscConfig+0xd8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f44:	d10c      	bne.n	8009f60 <HAL_RCC_OscConfig+0xc0>
 8009f46:	4b76      	ldr	r3, [pc, #472]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a75      	ldr	r2, [pc, #468]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4b73      	ldr	r3, [pc, #460]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a72      	ldr	r2, [pc, #456]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	e00b      	b.n	8009f78 <HAL_RCC_OscConfig+0xd8>
 8009f60:	4b6f      	ldr	r3, [pc, #444]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a6e      	ldr	r2, [pc, #440]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	4b6c      	ldr	r3, [pc, #432]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a6b      	ldr	r2, [pc, #428]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d013      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f80:	f7fb f868 	bl	8005054 <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f88:	f7fb f864 	bl	8005054 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b64      	cmp	r3, #100	@ 0x64
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e21f      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f9a:	4b61      	ldr	r3, [pc, #388]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0xe8>
 8009fa6:	e014      	b.n	8009fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa8:	f7fb f854 	bl	8005054 <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fb0:	f7fb f850 	bl	8005054 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b64      	cmp	r3, #100	@ 0x64
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e20b      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fc2:	4b57      	ldr	r3, [pc, #348]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x110>
 8009fce:	e000      	b.n	8009fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d069      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fde:	4b50      	ldr	r3, [pc, #320]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 030c 	and.w	r3, r3, #12
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fea:	4b4d      	ldr	r3, [pc, #308]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 030c 	and.w	r3, r3, #12
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d11c      	bne.n	800a030 <HAL_RCC_OscConfig+0x190>
 8009ff6:	4b4a      	ldr	r3, [pc, #296]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d116      	bne.n	800a030 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a002:	4b47      	ldr	r3, [pc, #284]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_RCC_OscConfig+0x17a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e1df      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a01a:	4b41      	ldr	r3, [pc, #260]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	493d      	ldr	r1, [pc, #244]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a02e:	e040      	b.n	800a0b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d023      	beq.n	800a080 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a038:	4b39      	ldr	r3, [pc, #228]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a38      	ldr	r2, [pc, #224]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a044:	f7fb f806 	bl	8005054 <HAL_GetTick>
 800a048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a04a:	e008      	b.n	800a05e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a04c:	f7fb f802 	bl	8005054 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e1bd      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a05e:	4b30      	ldr	r3, [pc, #192]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0f0      	beq.n	800a04c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a06a:	4b2d      	ldr	r3, [pc, #180]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4929      	ldr	r1, [pc, #164]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	600b      	str	r3, [r1, #0]
 800a07e:	e018      	b.n	800a0b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a080:	4b27      	ldr	r3, [pc, #156]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a26      	ldr	r2, [pc, #152]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08c:	f7fa ffe2 	bl	8005054 <HAL_GetTick>
 800a090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a094:	f7fa ffde 	bl	8005054 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e199      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f0      	bne.n	800a094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0308 	and.w	r3, r3, #8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d038      	beq.n	800a130 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d019      	beq.n	800a0fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0c6:	4b16      	ldr	r3, [pc, #88]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0ca:	4a15      	ldr	r2, [pc, #84]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0cc:	f043 0301 	orr.w	r3, r3, #1
 800a0d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d2:	f7fa ffbf 	bl	8005054 <HAL_GetTick>
 800a0d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0d8:	e008      	b.n	800a0ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0da:	f7fa ffbb 	bl	8005054 <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e176      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0f0      	beq.n	800a0da <HAL_RCC_OscConfig+0x23a>
 800a0f8:	e01a      	b.n	800a130 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0fa:	4b09      	ldr	r3, [pc, #36]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0fe:	4a08      	ldr	r2, [pc, #32]	@ (800a120 <HAL_RCC_OscConfig+0x280>)
 800a100:	f023 0301 	bic.w	r3, r3, #1
 800a104:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a106:	f7fa ffa5 	bl	8005054 <HAL_GetTick>
 800a10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a10c:	e00a      	b.n	800a124 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a10e:	f7fa ffa1 	bl	8005054 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d903      	bls.n	800a124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e15c      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
 800a120:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a124:	4b91      	ldr	r3, [pc, #580]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ee      	bne.n	800a10e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80a4 	beq.w	800a286 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a13e:	4b8b      	ldr	r3, [pc, #556]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10d      	bne.n	800a166 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a14a:	4b88      	ldr	r3, [pc, #544]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14e:	4a87      	ldr	r2, [pc, #540]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a154:	6413      	str	r3, [r2, #64]	@ 0x40
 800a156:	4b85      	ldr	r3, [pc, #532]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a15e:	60bb      	str	r3, [r7, #8]
 800a160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a162:	2301      	movs	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a166:	4b82      	ldr	r3, [pc, #520]	@ (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d118      	bne.n	800a1a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a172:	4b7f      	ldr	r3, [pc, #508]	@ (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a7e      	ldr	r2, [pc, #504]	@ (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a17e:	f7fa ff69 	bl	8005054 <HAL_GetTick>
 800a182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a184:	e008      	b.n	800a198 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a186:	f7fa ff65 	bl	8005054 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b64      	cmp	r3, #100	@ 0x64
 800a192:	d901      	bls.n	800a198 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e120      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a198:	4b75      	ldr	r3, [pc, #468]	@ (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0f0      	beq.n	800a186 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d106      	bne.n	800a1ba <HAL_RCC_OscConfig+0x31a>
 800a1ac:	4b6f      	ldr	r3, [pc, #444]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1b0:	4a6e      	ldr	r2, [pc, #440]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1b8:	e02d      	b.n	800a216 <HAL_RCC_OscConfig+0x376>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10c      	bne.n	800a1dc <HAL_RCC_OscConfig+0x33c>
 800a1c2:	4b6a      	ldr	r3, [pc, #424]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1c6:	4a69      	ldr	r2, [pc, #420]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1ce:	4b67      	ldr	r3, [pc, #412]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1d2:	4a66      	ldr	r2, [pc, #408]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1d4:	f023 0304 	bic.w	r3, r3, #4
 800a1d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1da:	e01c      	b.n	800a216 <HAL_RCC_OscConfig+0x376>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	d10c      	bne.n	800a1fe <HAL_RCC_OscConfig+0x35e>
 800a1e4:	4b61      	ldr	r3, [pc, #388]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1e8:	4a60      	ldr	r2, [pc, #384]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1ea:	f043 0304 	orr.w	r3, r3, #4
 800a1ee:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1f0:	4b5e      	ldr	r3, [pc, #376]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1f4:	4a5d      	ldr	r2, [pc, #372]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1fc:	e00b      	b.n	800a216 <HAL_RCC_OscConfig+0x376>
 800a1fe:	4b5b      	ldr	r3, [pc, #364]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a202:	4a5a      	ldr	r2, [pc, #360]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a204:	f023 0301 	bic.w	r3, r3, #1
 800a208:	6713      	str	r3, [r2, #112]	@ 0x70
 800a20a:	4b58      	ldr	r3, [pc, #352]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a20c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a20e:	4a57      	ldr	r2, [pc, #348]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a210:	f023 0304 	bic.w	r3, r3, #4
 800a214:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d015      	beq.n	800a24a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21e:	f7fa ff19 	bl	8005054 <HAL_GetTick>
 800a222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a224:	e00a      	b.n	800a23c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a226:	f7fa ff15 	bl	8005054 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a234:	4293      	cmp	r3, r2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0ce      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a23c:	4b4b      	ldr	r3, [pc, #300]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a23e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ee      	beq.n	800a226 <HAL_RCC_OscConfig+0x386>
 800a248:	e014      	b.n	800a274 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a24a:	f7fa ff03 	bl	8005054 <HAL_GetTick>
 800a24e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a250:	e00a      	b.n	800a268 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a252:	f7fa feff 	bl	8005054 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a260:	4293      	cmp	r3, r2
 800a262:	d901      	bls.n	800a268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e0b8      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a268:	4b40      	ldr	r3, [pc, #256]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a26a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1ee      	bne.n	800a252 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d105      	bne.n	800a286 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a27a:	4b3c      	ldr	r3, [pc, #240]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a27e:	4a3b      	ldr	r2, [pc, #236]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a284:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 80a4 	beq.w	800a3d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a290:	4b36      	ldr	r3, [pc, #216]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 030c 	and.w	r3, r3, #12
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d06b      	beq.n	800a374 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d149      	bne.n	800a338 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2a4:	4b31      	ldr	r3, [pc, #196]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a30      	ldr	r2, [pc, #192]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b0:	f7fa fed0 	bl	8005054 <HAL_GetTick>
 800a2b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2b6:	e008      	b.n	800a2ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2b8:	f7fa fecc 	bl	8005054 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e087      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2ca:	4b28      	ldr	r3, [pc, #160]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1f0      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69da      	ldr	r2, [r3, #28]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e4:	019b      	lsls	r3, r3, #6
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ec:	085b      	lsrs	r3, r3, #1
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	041b      	lsls	r3, r3, #16
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f8:	061b      	lsls	r3, r3, #24
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a302:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a304:	4b19      	ldr	r3, [pc, #100]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a18      	ldr	r2, [pc, #96]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a30a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a30e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a310:	f7fa fea0 	bl	8005054 <HAL_GetTick>
 800a314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a318:	f7fa fe9c 	bl	8005054 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e057      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a32a:	4b10      	ldr	r3, [pc, #64]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f0      	beq.n	800a318 <HAL_RCC_OscConfig+0x478>
 800a336:	e04f      	b.n	800a3d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a338:	4b0c      	ldr	r3, [pc, #48]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a0b      	ldr	r2, [pc, #44]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a33e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a344:	f7fa fe86 	bl	8005054 <HAL_GetTick>
 800a348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a34a:	e008      	b.n	800a35e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a34c:	f7fa fe82 	bl	8005054 <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b02      	cmp	r3, #2
 800a358:	d901      	bls.n	800a35e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e03d      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a35e:	4b03      	ldr	r3, [pc, #12]	@ (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1f0      	bne.n	800a34c <HAL_RCC_OscConfig+0x4ac>
 800a36a:	e035      	b.n	800a3d8 <HAL_RCC_OscConfig+0x538>
 800a36c:	40023800 	.word	0x40023800
 800a370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a374:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e4 <HAL_RCC_OscConfig+0x544>)
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d028      	beq.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d121      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d11a      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a3aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d111      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d107      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40023800 	.word	0x40023800

0800a3e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e0d0      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a400:	4b6a      	ldr	r3, [pc, #424]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 030f 	and.w	r3, r3, #15
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d910      	bls.n	800a430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a40e:	4b67      	ldr	r3, [pc, #412]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f023 020f 	bic.w	r2, r3, #15
 800a416:	4965      	ldr	r1, [pc, #404]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a41e:	4b63      	ldr	r3, [pc, #396]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 030f 	and.w	r3, r3, #15
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d001      	beq.n	800a430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0b8      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0302 	and.w	r3, r3, #2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d020      	beq.n	800a47e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d005      	beq.n	800a454 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a448:	4b59      	ldr	r3, [pc, #356]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	4a58      	ldr	r2, [pc, #352]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a44e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d005      	beq.n	800a46c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a460:	4b53      	ldr	r3, [pc, #332]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	4a52      	ldr	r2, [pc, #328]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a466:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a46a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a46c:	4b50      	ldr	r3, [pc, #320]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	494d      	ldr	r1, [pc, #308]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d040      	beq.n	800a50c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d107      	bne.n	800a4a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a492:	4b47      	ldr	r3, [pc, #284]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d115      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e07f      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d107      	bne.n	800a4ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4aa:	4b41      	ldr	r3, [pc, #260]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d109      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e073      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4ba:	4b3d      	ldr	r3, [pc, #244]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e06b      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a4ca:	4b39      	ldr	r3, [pc, #228]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f023 0203 	bic.w	r2, r3, #3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4936      	ldr	r1, [pc, #216]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4dc:	f7fa fdba 	bl	8005054 <HAL_GetTick>
 800a4e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4e2:	e00a      	b.n	800a4fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4e4:	f7fa fdb6 	bl	8005054 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e053      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f003 020c 	and.w	r2, r3, #12
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	429a      	cmp	r2, r3
 800a50a:	d1eb      	bne.n	800a4e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a50c:	4b27      	ldr	r3, [pc, #156]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d210      	bcs.n	800a53c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a51a:	4b24      	ldr	r3, [pc, #144]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f023 020f 	bic.w	r2, r3, #15
 800a522:	4922      	ldr	r1, [pc, #136]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	4313      	orrs	r3, r2
 800a528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a52a:	4b20      	ldr	r3, [pc, #128]	@ (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d001      	beq.n	800a53c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e032      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a548:	4b19      	ldr	r3, [pc, #100]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	4916      	ldr	r1, [pc, #88]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a556:	4313      	orrs	r3, r2
 800a558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a566:	4b12      	ldr	r3, [pc, #72]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	490e      	ldr	r1, [pc, #56]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a576:	4313      	orrs	r3, r2
 800a578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a57a:	f000 f821 	bl	800a5c0 <HAL_RCC_GetSysClockFreq>
 800a57e:	4602      	mov	r2, r0
 800a580:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	091b      	lsrs	r3, r3, #4
 800a586:	f003 030f 	and.w	r3, r3, #15
 800a58a:	490a      	ldr	r1, [pc, #40]	@ (800a5b4 <HAL_RCC_ClockConfig+0x1cc>)
 800a58c:	5ccb      	ldrb	r3, [r1, r3]
 800a58e:	fa22 f303 	lsr.w	r3, r2, r3
 800a592:	4a09      	ldr	r2, [pc, #36]	@ (800a5b8 <HAL_RCC_ClockConfig+0x1d0>)
 800a594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a596:	4b09      	ldr	r3, [pc, #36]	@ (800a5bc <HAL_RCC_ClockConfig+0x1d4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f9 ff9a 	bl	80044d4 <HAL_InitTick>

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40023c00 	.word	0x40023c00
 800a5b0:	40023800 	.word	0x40023800
 800a5b4:	0801c568 	.word	0x0801c568
 800a5b8:	20000000 	.word	0x20000000
 800a5bc:	2000004c 	.word	0x2000004c

0800a5c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5c4:	b090      	sub	sp, #64	@ 0x40
 800a5c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5d8:	4b59      	ldr	r3, [pc, #356]	@ (800a740 <HAL_RCC_GetSysClockFreq+0x180>)
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f003 030c 	and.w	r3, r3, #12
 800a5e0:	2b08      	cmp	r3, #8
 800a5e2:	d00d      	beq.n	800a600 <HAL_RCC_GetSysClockFreq+0x40>
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	f200 80a1 	bhi.w	800a72c <HAL_RCC_GetSysClockFreq+0x16c>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <HAL_RCC_GetSysClockFreq+0x34>
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d003      	beq.n	800a5fa <HAL_RCC_GetSysClockFreq+0x3a>
 800a5f2:	e09b      	b.n	800a72c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5f4:	4b53      	ldr	r3, [pc, #332]	@ (800a744 <HAL_RCC_GetSysClockFreq+0x184>)
 800a5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a5f8:	e09b      	b.n	800a732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5fa:	4b53      	ldr	r3, [pc, #332]	@ (800a748 <HAL_RCC_GetSysClockFreq+0x188>)
 800a5fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a5fe:	e098      	b.n	800a732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a600:	4b4f      	ldr	r3, [pc, #316]	@ (800a740 <HAL_RCC_GetSysClockFreq+0x180>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a608:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a60a:	4b4d      	ldr	r3, [pc, #308]	@ (800a740 <HAL_RCC_GetSysClockFreq+0x180>)
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d028      	beq.n	800a668 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a616:	4b4a      	ldr	r3, [pc, #296]	@ (800a740 <HAL_RCC_GetSysClockFreq+0x180>)
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	099b      	lsrs	r3, r3, #6
 800a61c:	2200      	movs	r2, #0
 800a61e:	623b      	str	r3, [r7, #32]
 800a620:	627a      	str	r2, [r7, #36]	@ 0x24
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a628:	2100      	movs	r1, #0
 800a62a:	4b47      	ldr	r3, [pc, #284]	@ (800a748 <HAL_RCC_GetSysClockFreq+0x188>)
 800a62c:	fb03 f201 	mul.w	r2, r3, r1
 800a630:	2300      	movs	r3, #0
 800a632:	fb00 f303 	mul.w	r3, r0, r3
 800a636:	4413      	add	r3, r2
 800a638:	4a43      	ldr	r2, [pc, #268]	@ (800a748 <HAL_RCC_GetSysClockFreq+0x188>)
 800a63a:	fba0 1202 	umull	r1, r2, r0, r2
 800a63e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a640:	460a      	mov	r2, r1
 800a642:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a646:	4413      	add	r3, r2
 800a648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64c:	2200      	movs	r2, #0
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	61fa      	str	r2, [r7, #28]
 800a652:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a656:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a65a:	f7f5 fe41 	bl	80002e0 <__aeabi_uldivmod>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	4613      	mov	r3, r2
 800a664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a666:	e053      	b.n	800a710 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a668:	4b35      	ldr	r3, [pc, #212]	@ (800a740 <HAL_RCC_GetSysClockFreq+0x180>)
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	099b      	lsrs	r3, r3, #6
 800a66e:	2200      	movs	r2, #0
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	617a      	str	r2, [r7, #20]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a67a:	f04f 0b00 	mov.w	fp, #0
 800a67e:	4652      	mov	r2, sl
 800a680:	465b      	mov	r3, fp
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f04f 0100 	mov.w	r1, #0
 800a68a:	0159      	lsls	r1, r3, #5
 800a68c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a690:	0150      	lsls	r0, r2, #5
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	ebb2 080a 	subs.w	r8, r2, sl
 800a69a:	eb63 090b 	sbc.w	r9, r3, fp
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	f04f 0300 	mov.w	r3, #0
 800a6a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a6aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a6ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a6b2:	ebb2 0408 	subs.w	r4, r2, r8
 800a6b6:	eb63 0509 	sbc.w	r5, r3, r9
 800a6ba:	f04f 0200 	mov.w	r2, #0
 800a6be:	f04f 0300 	mov.w	r3, #0
 800a6c2:	00eb      	lsls	r3, r5, #3
 800a6c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6c8:	00e2      	lsls	r2, r4, #3
 800a6ca:	4614      	mov	r4, r2
 800a6cc:	461d      	mov	r5, r3
 800a6ce:	eb14 030a 	adds.w	r3, r4, sl
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	eb45 030b 	adc.w	r3, r5, fp
 800a6d8:	607b      	str	r3, [r7, #4]
 800a6da:	f04f 0200 	mov.w	r2, #0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	028b      	lsls	r3, r1, #10
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	028a      	lsls	r2, r1, #10
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	60bb      	str	r3, [r7, #8]
 800a6fe:	60fa      	str	r2, [r7, #12]
 800a700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a704:	f7f5 fdec 	bl	80002e0 <__aeabi_uldivmod>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4613      	mov	r3, r2
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a710:	4b0b      	ldr	r3, [pc, #44]	@ (800a740 <HAL_RCC_GetSysClockFreq+0x180>)
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	0c1b      	lsrs	r3, r3, #16
 800a716:	f003 0303 	and.w	r3, r3, #3
 800a71a:	3301      	adds	r3, #1
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a720:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	fbb2 f3f3 	udiv	r3, r2, r3
 800a728:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a72a:	e002      	b.n	800a732 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a72c:	4b05      	ldr	r3, [pc, #20]	@ (800a744 <HAL_RCC_GetSysClockFreq+0x184>)
 800a72e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a730:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a734:	4618      	mov	r0, r3
 800a736:	3740      	adds	r7, #64	@ 0x40
 800a738:	46bd      	mov	sp, r7
 800a73a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a73e:	bf00      	nop
 800a740:	40023800 	.word	0x40023800
 800a744:	00f42400 	.word	0x00f42400
 800a748:	017d7840 	.word	0x017d7840

0800a74c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a750:	4b03      	ldr	r3, [pc, #12]	@ (800a760 <HAL_RCC_GetHCLKFreq+0x14>)
 800a752:	681b      	ldr	r3, [r3, #0]
}
 800a754:	4618      	mov	r0, r3
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	20000000 	.word	0x20000000

0800a764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a768:	f7ff fff0 	bl	800a74c <HAL_RCC_GetHCLKFreq>
 800a76c:	4602      	mov	r2, r0
 800a76e:	4b05      	ldr	r3, [pc, #20]	@ (800a784 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	0a9b      	lsrs	r3, r3, #10
 800a774:	f003 0307 	and.w	r3, r3, #7
 800a778:	4903      	ldr	r1, [pc, #12]	@ (800a788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a77a:	5ccb      	ldrb	r3, [r1, r3]
 800a77c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a780:	4618      	mov	r0, r3
 800a782:	bd80      	pop	{r7, pc}
 800a784:	40023800 	.word	0x40023800
 800a788:	0801c578 	.word	0x0801c578

0800a78c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a790:	f7ff ffdc 	bl	800a74c <HAL_RCC_GetHCLKFreq>
 800a794:	4602      	mov	r2, r0
 800a796:	4b05      	ldr	r3, [pc, #20]	@ (800a7ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	0b5b      	lsrs	r3, r3, #13
 800a79c:	f003 0307 	and.w	r3, r3, #7
 800a7a0:	4903      	ldr	r1, [pc, #12]	@ (800a7b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7a2:	5ccb      	ldrb	r3, [r1, r3]
 800a7a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	40023800 	.word	0x40023800
 800a7b0:	0801c578 	.word	0x0801c578

0800a7b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	220f      	movs	r2, #15
 800a7c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a7c4:	4b12      	ldr	r3, [pc, #72]	@ (800a810 <HAL_RCC_GetClockConfig+0x5c>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f003 0203 	and.w	r2, r3, #3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <HAL_RCC_GetClockConfig+0x5c>)
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a810 <HAL_RCC_GetClockConfig+0x5c>)
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a7e8:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <HAL_RCC_GetClockConfig+0x5c>)
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	08db      	lsrs	r3, r3, #3
 800a7ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a7f6:	4b07      	ldr	r3, [pc, #28]	@ (800a814 <HAL_RCC_GetClockConfig+0x60>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 020f 	and.w	r2, r3, #15
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	601a      	str	r2, [r3, #0]
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	40023800 	.word	0x40023800
 800a814:	40023c00 	.word	0x40023c00

0800a818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d012      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a840:	4b69      	ldr	r3, [pc, #420]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	4a68      	ldr	r2, [pc, #416]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a846:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a84a:	6093      	str	r3, [r2, #8]
 800a84c:	4b66      	ldr	r3, [pc, #408]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a84e:	689a      	ldr	r2, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a854:	4964      	ldr	r1, [pc, #400]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a856:	4313      	orrs	r3, r2
 800a858:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a862:	2301      	movs	r3, #1
 800a864:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d017      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a872:	4b5d      	ldr	r3, [pc, #372]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a878:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a880:	4959      	ldr	r1, [pc, #356]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a882:	4313      	orrs	r3, r2
 800a884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a890:	d101      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a892:	2301      	movs	r3, #1
 800a894:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d017      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a8ae:	4b4e      	ldr	r3, [pc, #312]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a8b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8bc:	494a      	ldr	r1, [pc, #296]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a8cc:	d101      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 808b 	beq.w	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a8fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a900:	4a39      	ldr	r2, [pc, #228]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a906:	6413      	str	r3, [r2, #64]	@ 0x40
 800a908:	4b37      	ldr	r3, [pc, #220]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a90a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a910:	60bb      	str	r3, [r7, #8]
 800a912:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a914:	4b35      	ldr	r3, [pc, #212]	@ (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a34      	ldr	r2, [pc, #208]	@ (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a91a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a91e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a920:	f7fa fb98 	bl	8005054 <HAL_GetTick>
 800a924:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a926:	e008      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a928:	f7fa fb94 	bl	8005054 <HAL_GetTick>
 800a92c:	4602      	mov	r2, r0
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	2b64      	cmp	r3, #100	@ 0x64
 800a934:	d901      	bls.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e357      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a93a:	4b2c      	ldr	r3, [pc, #176]	@ (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0f0      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a946:	4b28      	ldr	r3, [pc, #160]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a94a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a94e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d035      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	429a      	cmp	r2, r3
 800a962:	d02e      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a964:	4b20      	ldr	r3, [pc, #128]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a96c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a96e:	4b1e      	ldr	r3, [pc, #120]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a972:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a978:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a97a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a97e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a984:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a986:	4a18      	ldr	r2, [pc, #96]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a98c:	4b16      	ldr	r3, [pc, #88]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a98e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b01      	cmp	r3, #1
 800a996:	d114      	bne.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a998:	f7fa fb5c 	bl	8005054 <HAL_GetTick>
 800a99c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a99e:	e00a      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9a0:	f7fa fb58 	bl	8005054 <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d901      	bls.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e319      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0ee      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a9ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9ce:	d111      	bne.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a9d0:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a9dc:	4b04      	ldr	r3, [pc, #16]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a9de:	400b      	ands	r3, r1
 800a9e0:	4901      	ldr	r1, [pc, #4]	@ (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	608b      	str	r3, [r1, #8]
 800a9e6:	e00b      	b.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a9e8:	40023800 	.word	0x40023800
 800a9ec:	40007000 	.word	0x40007000
 800a9f0:	0ffffcff 	.word	0x0ffffcff
 800a9f4:	4baa      	ldr	r3, [pc, #680]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	4aa9      	ldr	r2, [pc, #676]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a9fe:	6093      	str	r3, [r2, #8]
 800aa00:	4ba7      	ldr	r3, [pc, #668]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa0c:	49a4      	ldr	r1, [pc, #656]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0310 	and.w	r3, r3, #16
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d010      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa1e:	4ba0      	ldr	r3, [pc, #640]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa24:	4a9e      	ldr	r2, [pc, #632]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800aa2e:	4b9c      	ldr	r3, [pc, #624]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa30:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa38:	4999      	ldr	r1, [pc, #612]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa4c:	4b94      	ldr	r3, [pc, #592]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa5a:	4991      	ldr	r1, [pc, #580]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aa6e:	4b8c      	ldr	r3, [pc, #560]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa7c:	4988      	ldr	r1, [pc, #544]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00a      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aa90:	4b83      	ldr	r3, [pc, #524]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa9e:	4980      	ldr	r1, [pc, #512]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aab2:	4b7b      	ldr	r3, [pc, #492]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac0:	4977      	ldr	r1, [pc, #476]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00a      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aad4:	4b72      	ldr	r3, [pc, #456]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aada:	f023 0203 	bic.w	r2, r3, #3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae2:	496f      	ldr	r1, [pc, #444]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aaf6:	4b6a      	ldr	r3, [pc, #424]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aafc:	f023 020c 	bic.w	r2, r3, #12
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab04:	4966      	ldr	r1, [pc, #408]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00a      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab18:	4b61      	ldr	r3, [pc, #388]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab1e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab26:	495e      	ldr	r1, [pc, #376]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00a      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab3a:	4b59      	ldr	r3, [pc, #356]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab40:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab48:	4955      	ldr	r1, [pc, #340]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00a      	beq.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab5c:	4b50      	ldr	r3, [pc, #320]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab6a:	494d      	ldr	r1, [pc, #308]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ab7e:	4b48      	ldr	r3, [pc, #288]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab8c:	4944      	ldr	r1, [pc, #272]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00a      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800aba0:	4b3f      	ldr	r3, [pc, #252]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aba6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abae:	493c      	ldr	r1, [pc, #240]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abb0:	4313      	orrs	r3, r2
 800abb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800abc2:	4b37      	ldr	r3, [pc, #220]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abd0:	4933      	ldr	r1, [pc, #204]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800abe4:	4b2e      	ldr	r3, [pc, #184]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abf2:	492b      	ldr	r1, [pc, #172]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d011      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ac06:	4b26      	ldr	r3, [pc, #152]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac14:	4922      	ldr	r1, [pc, #136]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac24:	d101      	bne.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ac26:	2301      	movs	r3, #1
 800ac28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0308 	and.w	r3, r3, #8
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac46:	4b16      	ldr	r3, [pc, #88]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac54:	4912      	ldr	r1, [pc, #72]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00b      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ac68:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac6e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac78:	4909      	ldr	r1, [pc, #36]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d006      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 80d9 	beq.w	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ac94:	4b02      	ldr	r3, [pc, #8]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a01      	ldr	r2, [pc, #4]	@ (800aca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac9e:	e001      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800aca0:	40023800 	.word	0x40023800
 800aca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aca6:	f7fa f9d5 	bl	8005054 <HAL_GetTick>
 800acaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800acac:	e008      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800acae:	f7fa f9d1 	bl	8005054 <HAL_GetTick>
 800acb2:	4602      	mov	r2, r0
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	2b64      	cmp	r3, #100	@ 0x64
 800acba:	d901      	bls.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e194      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800acc0:	4b6c      	ldr	r3, [pc, #432]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1f0      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d021      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11d      	bne.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ace0:	4b64      	ldr	r3, [pc, #400]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ace2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ace6:	0c1b      	lsrs	r3, r3, #16
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800acee:	4b61      	ldr	r3, [pc, #388]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800acf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acf4:	0e1b      	lsrs	r3, r3, #24
 800acf6:	f003 030f 	and.w	r3, r3, #15
 800acfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	019a      	lsls	r2, r3, #6
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	041b      	lsls	r3, r3, #16
 800ad06:	431a      	orrs	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	061b      	lsls	r3, r3, #24
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	071b      	lsls	r3, r3, #28
 800ad14:	4957      	ldr	r1, [pc, #348]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d004      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad30:	d00a      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d02e      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad46:	d129      	bne.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad48:	4b4a      	ldr	r3, [pc, #296]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad4e:	0c1b      	lsrs	r3, r3, #16
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad56:	4b47      	ldr	r3, [pc, #284]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad5c:	0f1b      	lsrs	r3, r3, #28
 800ad5e:	f003 0307 	and.w	r3, r3, #7
 800ad62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	019a      	lsls	r2, r3, #6
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	041b      	lsls	r3, r3, #16
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	061b      	lsls	r3, r3, #24
 800ad76:	431a      	orrs	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	071b      	lsls	r3, r3, #28
 800ad7c:	493d      	ldr	r1, [pc, #244]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ad84:	4b3b      	ldr	r3, [pc, #236]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad8a:	f023 021f 	bic.w	r2, r3, #31
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad92:	3b01      	subs	r3, #1
 800ad94:	4937      	ldr	r1, [pc, #220]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01d      	beq.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ada8:	4b32      	ldr	r3, [pc, #200]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adae:	0e1b      	lsrs	r3, r3, #24
 800adb0:	f003 030f 	and.w	r3, r3, #15
 800adb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800adb6:	4b2f      	ldr	r3, [pc, #188]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adbc:	0f1b      	lsrs	r3, r3, #28
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	019a      	lsls	r2, r3, #6
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	041b      	lsls	r3, r3, #16
 800add0:	431a      	orrs	r2, r3
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	061b      	lsls	r3, r3, #24
 800add6:	431a      	orrs	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	071b      	lsls	r3, r3, #28
 800addc:	4925      	ldr	r1, [pc, #148]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d011      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	019a      	lsls	r2, r3, #6
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	041b      	lsls	r3, r3, #16
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	061b      	lsls	r3, r3, #24
 800ae04:	431a      	orrs	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	071b      	lsls	r3, r3, #28
 800ae0c:	4919      	ldr	r1, [pc, #100]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ae14:	4b17      	ldr	r3, [pc, #92]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a16      	ldr	r2, [pc, #88]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae20:	f7fa f918 	bl	8005054 <HAL_GetTick>
 800ae24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae26:	e008      	b.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ae28:	f7fa f914 	bl	8005054 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	2b64      	cmp	r3, #100	@ 0x64
 800ae34:	d901      	bls.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e0d7      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0f0      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	f040 80cd 	bne.w	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ae4e:	4b09      	ldr	r3, [pc, #36]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a08      	ldr	r2, [pc, #32]	@ (800ae74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ae54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae5a:	f7fa f8fb 	bl	8005054 <HAL_GetTick>
 800ae5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae60:	e00a      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ae62:	f7fa f8f7 	bl	8005054 <HAL_GetTick>
 800ae66:	4602      	mov	r2, r0
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	2b64      	cmp	r3, #100	@ 0x64
 800ae6e:	d903      	bls.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e0ba      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ae74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae78:	4b5e      	ldr	r3, [pc, #376]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae84:	d0ed      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d003      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d02e      	beq.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d12a      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aeae:	4b51      	ldr	r3, [pc, #324]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aeb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb4:	0c1b      	lsrs	r3, r3, #16
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aebc:	4b4d      	ldr	r3, [pc, #308]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec2:	0f1b      	lsrs	r3, r3, #28
 800aec4:	f003 0307 	and.w	r3, r3, #7
 800aec8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	019a      	lsls	r2, r3, #6
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	041b      	lsls	r3, r3, #16
 800aed4:	431a      	orrs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	061b      	lsls	r3, r3, #24
 800aedc:	431a      	orrs	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	071b      	lsls	r3, r3, #28
 800aee2:	4944      	ldr	r1, [pc, #272]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aee4:	4313      	orrs	r3, r2
 800aee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aeea:	4b42      	ldr	r3, [pc, #264]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aeec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aef0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef8:	3b01      	subs	r3, #1
 800aefa:	021b      	lsls	r3, r3, #8
 800aefc:	493d      	ldr	r1, [pc, #244]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aefe:	4313      	orrs	r3, r2
 800af00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d022      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af18:	d11d      	bne.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af1a:	4b36      	ldr	r3, [pc, #216]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af20:	0e1b      	lsrs	r3, r3, #24
 800af22:	f003 030f 	and.w	r3, r3, #15
 800af26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af28:	4b32      	ldr	r3, [pc, #200]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af2e:	0f1b      	lsrs	r3, r3, #28
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	019a      	lsls	r2, r3, #6
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	041b      	lsls	r3, r3, #16
 800af42:	431a      	orrs	r2, r3
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	061b      	lsls	r3, r3, #24
 800af48:	431a      	orrs	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	071b      	lsls	r3, r3, #28
 800af4e:	4929      	ldr	r1, [pc, #164]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af50:	4313      	orrs	r3, r2
 800af52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0308 	and.w	r3, r3, #8
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d028      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af62:	4b24      	ldr	r3, [pc, #144]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af68:	0e1b      	lsrs	r3, r3, #24
 800af6a:	f003 030f 	and.w	r3, r3, #15
 800af6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800af70:	4b20      	ldr	r3, [pc, #128]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af76:	0c1b      	lsrs	r3, r3, #16
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	019a      	lsls	r2, r3, #6
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	041b      	lsls	r3, r3, #16
 800af88:	431a      	orrs	r2, r3
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	061b      	lsls	r3, r3, #24
 800af8e:	431a      	orrs	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	4917      	ldr	r1, [pc, #92]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af98:	4313      	orrs	r3, r2
 800af9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800af9e:	4b15      	ldr	r3, [pc, #84]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afac:	4911      	ldr	r1, [pc, #68]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afae:	4313      	orrs	r3, r2
 800afb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800afb4:	4b0f      	ldr	r3, [pc, #60]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a0e      	ldr	r2, [pc, #56]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc0:	f7fa f848 	bl	8005054 <HAL_GetTick>
 800afc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800afc6:	e008      	b.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800afc8:	f7fa f844 	bl	8005054 <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	2b64      	cmp	r3, #100	@ 0x64
 800afd4:	d901      	bls.n	800afda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e007      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800afda:	4b06      	ldr	r3, [pc, #24]	@ (800aff4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe6:	d1ef      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	40023800 	.word	0x40023800

0800aff8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b016:	f040 808d 	bne.w	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b01a:	4b93      	ldr	r3, [pc, #588]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b020:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b028:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b030:	d07c      	beq.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b038:	d87b      	bhi.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d004      	beq.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b046:	d039      	beq.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b048:	e073      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b04a:	4b87      	ldr	r3, [pc, #540]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d108      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b056:	4b84      	ldr	r3, [pc, #528]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b05e:	4a83      	ldr	r2, [pc, #524]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b060:	fbb2 f3f3 	udiv	r3, r2, r3
 800b064:	613b      	str	r3, [r7, #16]
 800b066:	e007      	b.n	800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b068:	4b7f      	ldr	r3, [pc, #508]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b070:	4a7f      	ldr	r2, [pc, #508]	@ (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b072:	fbb2 f3f3 	udiv	r3, r2, r3
 800b076:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b078:	4b7b      	ldr	r3, [pc, #492]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b07e:	0e1b      	lsrs	r3, r3, #24
 800b080:	f003 030f 	and.w	r3, r3, #15
 800b084:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b086:	4b78      	ldr	r3, [pc, #480]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b08c:	099b      	lsrs	r3, r3, #6
 800b08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	fb03 f202 	mul.w	r2, r3, r2
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b09e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b0a0:	4b71      	ldr	r3, [pc, #452]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	f003 031f 	and.w	r3, r3, #31
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0b8:	617b      	str	r3, [r7, #20]
        break;
 800b0ba:	e03b      	b.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b0bc:	4b6a      	ldr	r3, [pc, #424]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d108      	bne.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b0c8:	4b67      	ldr	r3, [pc, #412]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0d0:	4a66      	ldr	r2, [pc, #408]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d6:	613b      	str	r3, [r7, #16]
 800b0d8:	e007      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b0da:	4b63      	ldr	r3, [pc, #396]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0e2:	4a63      	ldr	r2, [pc, #396]	@ (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b0ea:	4b5f      	ldr	r3, [pc, #380]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0f0:	0e1b      	lsrs	r3, r3, #24
 800b0f2:	f003 030f 	and.w	r3, r3, #15
 800b0f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b0f8:	4b5b      	ldr	r3, [pc, #364]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0fe:	099b      	lsrs	r3, r3, #6
 800b100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	fb03 f202 	mul.w	r2, r3, r2
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b110:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b112:	4b55      	ldr	r3, [pc, #340]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b118:	f003 031f 	and.w	r3, r3, #31
 800b11c:	3301      	adds	r3, #1
 800b11e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	fbb2 f3f3 	udiv	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
        break;
 800b12a:	e003      	b.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b12c:	4b51      	ldr	r3, [pc, #324]	@ (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b12e:	617b      	str	r3, [r7, #20]
        break;
 800b130:	e000      	b.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b132:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b13a:	f040 808d 	bne.w	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b13e:	4b4a      	ldr	r3, [pc, #296]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b144:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b14c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b154:	d07c      	beq.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b15c:	d87b      	bhi.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d004      	beq.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b16a:	d039      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b16c:	e073      	b.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b16e:	4b3e      	ldr	r3, [pc, #248]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d108      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b17a:	4b3b      	ldr	r3, [pc, #236]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b182:	4a3a      	ldr	r2, [pc, #232]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b184:	fbb2 f3f3 	udiv	r3, r2, r3
 800b188:	613b      	str	r3, [r7, #16]
 800b18a:	e007      	b.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b18c:	4b36      	ldr	r3, [pc, #216]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b194:	4a36      	ldr	r2, [pc, #216]	@ (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b196:	fbb2 f3f3 	udiv	r3, r2, r3
 800b19a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b19c:	4b32      	ldr	r3, [pc, #200]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1a2:	0e1b      	lsrs	r3, r3, #24
 800b1a4:	f003 030f 	and.w	r3, r3, #15
 800b1a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b1aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1b0:	099b      	lsrs	r3, r3, #6
 800b1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	fb03 f202 	mul.w	r2, r3, r2
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b1c4:	4b28      	ldr	r3, [pc, #160]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1ca:	0a1b      	lsrs	r3, r3, #8
 800b1cc:	f003 031f 	and.w	r3, r3, #31
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1dc:	617b      	str	r3, [r7, #20]
        break;
 800b1de:	e03b      	b.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b1e0:	4b21      	ldr	r3, [pc, #132]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d108      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b1ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	e007      	b.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b206:	4a1a      	ldr	r2, [pc, #104]	@ (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b208:	fbb2 f3f3 	udiv	r3, r2, r3
 800b20c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b20e:	4b16      	ldr	r3, [pc, #88]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b214:	0e1b      	lsrs	r3, r3, #24
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b21c:	4b12      	ldr	r3, [pc, #72]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b222:	099b      	lsrs	r3, r3, #6
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	fb03 f202 	mul.w	r2, r3, r2
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	fbb2 f3f3 	udiv	r3, r2, r3
 800b234:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b236:	4b0c      	ldr	r3, [pc, #48]	@ (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b23c:	f003 031f 	and.w	r3, r3, #31
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24c:	617b      	str	r3, [r7, #20]
        break;
 800b24e:	e003      	b.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b250:	4b08      	ldr	r3, [pc, #32]	@ (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b252:	617b      	str	r3, [r7, #20]
        break;
 800b254:	e000      	b.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b256:	bf00      	nop
      }
    }
  }

  return frequency;
 800b258:	697b      	ldr	r3, [r7, #20]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40023800 	.word	0x40023800
 800b26c:	00f42400 	.word	0x00f42400
 800b270:	017d7840 	.word	0x017d7840
 800b274:	00bb8000 	.word	0x00bb8000

0800b278 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e071      	b.n	800b36e <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7f5b      	ldrb	r3, [r3, #29]
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7f8 fc9c 	bl	8003bd8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	f003 0310 	and.w	r3, r3, #16
 800b2b0:	2b10      	cmp	r3, #16
 800b2b2:	d053      	beq.n	800b35c <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	22ca      	movs	r2, #202	@ 0xca
 800b2ba:	625a      	str	r2, [r3, #36]	@ 0x24
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2253      	movs	r2, #83	@ 0x53
 800b2c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fb75 	bl	800b9b4 <RTC_EnterInitMode>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d12a      	bne.n	800b32a <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6899      	ldr	r1, [r3, #8]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	4b26      	ldr	r3, [pc, #152]	@ (800b378 <HAL_RTC_Init+0x100>)
 800b2e0:	400b      	ands	r3, r1
 800b2e2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6899      	ldr	r1, [r3, #8]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	68d2      	ldr	r2, [r2, #12]
 800b30a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6919      	ldr	r1, [r3, #16]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	041a      	lsls	r2, r3, #16
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fb7e 	bl	800ba22 <RTC_ExitInitMode>
 800b326:	4603      	mov	r3, r0
 800b328:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d110      	bne.n	800b352 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f022 0208 	bic.w	r2, r2, #8
 800b33e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	430a      	orrs	r2, r1
 800b350:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	22ff      	movs	r2, #255	@ 0xff
 800b358:	625a      	str	r2, [r3, #36]	@ 0x24
 800b35a:	e001      	b.n	800b360 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	ff8fffbf 	.word	0xff8fffbf

0800b37c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b37c:	b590      	push	{r4, r7, lr}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	7f1b      	ldrb	r3, [r3, #28]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d101      	bne.n	800b398 <HAL_RTC_SetTime+0x1c>
 800b394:	2302      	movs	r3, #2
 800b396:	e085      	b.n	800b4a4 <HAL_RTC_SetTime+0x128>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2201      	movs	r2, #1
 800b39c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d126      	bne.n	800b3f8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 fb52 	bl	800ba6c <RTC_ByteToBcd2>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	785b      	ldrb	r3, [r3, #1]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fb4b 	bl	800ba6c <RTC_ByteToBcd2>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b3da:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	789b      	ldrb	r3, [r3, #2]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fb43 	bl	800ba6c <RTC_ByteToBcd2>
 800b3e6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b3e8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	78db      	ldrb	r3, [r3, #3]
 800b3f0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	e018      	b.n	800b42a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b402:	2b00      	cmp	r3, #0
 800b404:	d102      	bne.n	800b40c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2200      	movs	r2, #0
 800b40a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b418:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b41e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	78db      	ldrb	r3, [r3, #3]
 800b424:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b426:	4313      	orrs	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	22ca      	movs	r2, #202	@ 0xca
 800b430:	625a      	str	r2, [r3, #36]	@ 0x24
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2253      	movs	r2, #83	@ 0x53
 800b438:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 faba 	bl	800b9b4 <RTC_EnterInitMode>
 800b440:	4603      	mov	r3, r0
 800b442:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b444:	7cfb      	ldrb	r3, [r7, #19]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d11e      	bne.n	800b488 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	6979      	ldr	r1, [r7, #20]
 800b450:	4b16      	ldr	r3, [pc, #88]	@ (800b4ac <HAL_RTC_SetTime+0x130>)
 800b452:	400b      	ands	r3, r1
 800b454:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b464:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6899      	ldr	r1, [r3, #8]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	68da      	ldr	r2, [r3, #12]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	431a      	orrs	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	430a      	orrs	r2, r1
 800b47c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 facf 	bl	800ba22 <RTC_ExitInitMode>
 800b484:	4603      	mov	r3, r0
 800b486:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b488:	7cfb      	ldrb	r3, [r7, #19]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2201      	movs	r2, #1
 800b492:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	22ff      	movs	r2, #255	@ 0xff
 800b49a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	771a      	strb	r2, [r3, #28]

  return status;
 800b4a2:	7cfb      	ldrb	r3, [r7, #19]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd90      	pop	{r4, r7, pc}
 800b4ac:	007f7f7f 	.word	0x007f7f7f

0800b4b0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	4b22      	ldr	r3, [pc, #136]	@ (800b568 <HAL_RTC_GetTime+0xb8>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	0c1b      	lsrs	r3, r3, #16
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	0d9b      	lsrs	r3, r3, #22
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d11a      	bne.n	800b55e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fabb 	bl	800baa8 <RTC_Bcd2ToByte>
 800b532:	4603      	mov	r3, r0
 800b534:	461a      	mov	r2, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fab2 	bl	800baa8 <RTC_Bcd2ToByte>
 800b544:	4603      	mov	r3, r0
 800b546:	461a      	mov	r2, r3
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	789b      	ldrb	r3, [r3, #2]
 800b550:	4618      	mov	r0, r3
 800b552:	f000 faa9 	bl	800baa8 <RTC_Bcd2ToByte>
 800b556:	4603      	mov	r3, r0
 800b558:	461a      	mov	r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	007f7f7f 	.word	0x007f7f7f

0800b56c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b56c:	b590      	push	{r4, r7, lr}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	7f1b      	ldrb	r3, [r3, #28]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d101      	bne.n	800b588 <HAL_RTC_SetDate+0x1c>
 800b584:	2302      	movs	r3, #2
 800b586:	e06f      	b.n	800b668 <HAL_RTC_SetDate+0xfc>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2202      	movs	r2, #2
 800b592:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10e      	bne.n	800b5b8 <HAL_RTC_SetDate+0x4c>
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d008      	beq.n	800b5b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	785b      	ldrb	r3, [r3, #1]
 800b5aa:	f023 0310 	bic.w	r3, r3, #16
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	330a      	adds	r3, #10
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d11c      	bne.n	800b5f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	78db      	ldrb	r3, [r3, #3]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fa52 	bl	800ba6c <RTC_ByteToBcd2>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	785b      	ldrb	r3, [r3, #1]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 fa4b 	bl	800ba6c <RTC_ByteToBcd2>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b5da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	789b      	ldrb	r3, [r3, #2]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fa43 	bl	800ba6c <RTC_ByteToBcd2>
 800b5e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b5e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	617b      	str	r3, [r7, #20]
 800b5f6:	e00e      	b.n	800b616 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	78db      	ldrb	r3, [r3, #3]
 800b5fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	785b      	ldrb	r3, [r3, #1]
 800b602:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b604:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b60a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	22ca      	movs	r2, #202	@ 0xca
 800b61c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2253      	movs	r2, #83	@ 0x53
 800b624:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f9c4 	bl	800b9b4 <RTC_EnterInitMode>
 800b62c:	4603      	mov	r3, r0
 800b62e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b630:	7cfb      	ldrb	r3, [r7, #19]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	6979      	ldr	r1, [r7, #20]
 800b63c:	4b0c      	ldr	r3, [pc, #48]	@ (800b670 <HAL_RTC_SetDate+0x104>)
 800b63e:	400b      	ands	r3, r1
 800b640:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 f9ed 	bl	800ba22 <RTC_ExitInitMode>
 800b648:	4603      	mov	r3, r0
 800b64a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b64c:	7cfb      	ldrb	r3, [r7, #19]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2201      	movs	r2, #1
 800b656:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	22ff      	movs	r2, #255	@ 0xff
 800b65e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	771a      	strb	r2, [r3, #28]

  return status;
 800b666:	7cfb      	ldrb	r3, [r7, #19]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd90      	pop	{r4, r7, pc}
 800b670:	00ffff3f 	.word	0x00ffff3f

0800b674 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	4b21      	ldr	r3, [pc, #132]	@ (800b710 <HAL_RTC_GetDate+0x9c>)
 800b68c:	4013      	ands	r3, r2
 800b68e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	0c1b      	lsrs	r3, r3, #16
 800b694:	b2da      	uxtb	r2, r3
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	0a1b      	lsrs	r3, r3, #8
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	f003 031f 	and.w	r3, r3, #31
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6b2:	b2da      	uxtb	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	0b5b      	lsrs	r3, r3, #13
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d11a      	bne.n	800b704 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	78db      	ldrb	r3, [r3, #3]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 f9e8 	bl	800baa8 <RTC_Bcd2ToByte>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f9df 	bl	800baa8 <RTC_Bcd2ToByte>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	789b      	ldrb	r3, [r3, #2]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f9d6 	bl	800baa8 <RTC_Bcd2ToByte>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	461a      	mov	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	00ffff3f 	.word	0x00ffff3f

0800b714 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b714:	b590      	push	{r4, r7, lr}
 800b716:	b089      	sub	sp, #36	@ 0x24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	7f1b      	ldrb	r3, [r3, #28]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_RTC_SetAlarm+0x24>
 800b734:	2302      	movs	r3, #2
 800b736:	e113      	b.n	800b960 <HAL_RTC_SetAlarm+0x24c>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2201      	movs	r2, #1
 800b73c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2202      	movs	r2, #2
 800b742:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d137      	bne.n	800b7ba <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2200      	movs	r2, #0
 800b75c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f000 f982 	bl	800ba6c <RTC_ByteToBcd2>
 800b768:	4603      	mov	r3, r0
 800b76a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 f97b 	bl	800ba6c <RTC_ByteToBcd2>
 800b776:	4603      	mov	r3, r0
 800b778:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b77a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	789b      	ldrb	r3, [r3, #2]
 800b780:	4618      	mov	r0, r3
 800b782:	f000 f973 	bl	800ba6c <RTC_ByteToBcd2>
 800b786:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b788:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	78db      	ldrb	r3, [r3, #3]
 800b790:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b792:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f965 	bl	800ba6c <RTC_ByteToBcd2>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b7a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b7ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	e023      	b.n	800b802 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	785b      	ldrb	r3, [r3, #1]
 800b7d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b7da:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b7e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	78db      	ldrb	r3, [r3, #3]
 800b7e6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b7e8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b7f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b7f2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b7f8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b7fe:	4313      	orrs	r3, r2
 800b800:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b80a:	4313      	orrs	r3, r2
 800b80c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	22ca      	movs	r2, #202	@ 0xca
 800b814:	625a      	str	r2, [r3, #36]	@ 0x24
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2253      	movs	r2, #83	@ 0x53
 800b81c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b826:	d148      	bne.n	800b8ba <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689a      	ldr	r2, [r3, #8]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b836:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b846:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b858:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b85a:	f7f9 fbfb 	bl	8005054 <HAL_GetTick>
 800b85e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b860:	e013      	b.n	800b88a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b862:	f7f9 fbf7 	bl	8005054 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b870:	d90b      	bls.n	800b88a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	22ff      	movs	r2, #255	@ 0xff
 800b878:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2203      	movs	r2, #3
 800b87e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e06a      	b.n	800b960 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	d0e4      	beq.n	800b862 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	69fa      	ldr	r2, [r7, #28]
 800b89e:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	697a      	ldr	r2, [r7, #20]
 800b8a6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689a      	ldr	r2, [r3, #8]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8b6:	609a      	str	r2, [r3, #8]
 800b8b8:	e047      	b.n	800b94a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	689a      	ldr	r2, [r3, #8]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b8c8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b8d8:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b8ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b8ec:	f7f9 fbb2 	bl	8005054 <HAL_GetTick>
 800b8f0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b8f2:	e013      	b.n	800b91c <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8f4:	f7f9 fbae 	bl	8005054 <HAL_GetTick>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b902:	d90b      	bls.n	800b91c <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	22ff      	movs	r2, #255	@ 0xff
 800b90a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2203      	movs	r2, #3
 800b910:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	e021      	b.n	800b960 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0e4      	beq.n	800b8f4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689a      	ldr	r2, [r3, #8]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b948:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	22ff      	movs	r2, #255	@ 0xff
 800b950:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3724      	adds	r7, #36	@ 0x24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd90      	pop	{r4, r7, pc}

0800b968 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b970:	2300      	movs	r3, #0
 800b972:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a0d      	ldr	r2, [pc, #52]	@ (800b9b0 <HAL_RTC_WaitForSynchro+0x48>)
 800b97a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b97c:	f7f9 fb6a 	bl	8005054 <HAL_GetTick>
 800b980:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b982:	e009      	b.n	800b998 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b984:	f7f9 fb66 	bl	8005054 <HAL_GetTick>
 800b988:	4602      	mov	r2, r0
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b992:	d901      	bls.n	800b998 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b994:	2303      	movs	r3, #3
 800b996:	e007      	b.n	800b9a8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0ee      	beq.n	800b984 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	0001ff5f 	.word	0x0001ff5f

0800b9b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d122      	bne.n	800ba18 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b9e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9e2:	f7f9 fb37 	bl	8005054 <HAL_GetTick>
 800b9e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b9e8:	e00c      	b.n	800ba04 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b9ea:	f7f9 fb33 	bl	8005054 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9f8:	d904      	bls.n	800ba04 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2204      	movs	r2, #4
 800b9fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <RTC_EnterInitMode+0x64>
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d1e8      	bne.n	800b9ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	f003 0320 	and.w	r3, r3, #32
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10a      	bne.n	800ba62 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff ff8b 	bl	800b968 <HAL_RTC_WaitForSynchro>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d004      	beq.n	800ba62 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	4603      	mov	r3, r0
 800ba74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800ba7a:	e005      	b.n	800ba88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	3b0a      	subs	r3, #10
 800ba86:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	2b09      	cmp	r3, #9
 800ba8c:	d8f6      	bhi.n	800ba7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	011b      	lsls	r3, r3, #4
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	b2db      	uxtb	r3, r3
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	091b      	lsrs	r3, r3, #4
 800baba:	b2db      	uxtb	r3, r3
 800babc:	461a      	mov	r2, r3
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	79fb      	ldrb	r3, [r7, #7]
 800bace:	f003 030f 	and.w	r3, r3, #15
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	4413      	add	r3, r2
 800bad6:	b2db      	uxtb	r3, r3
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	7f1b      	ldrb	r3, [r3, #28]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e050      	b.n	800bba2 <HAL_RTCEx_SetTimeStamp+0xbe>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2201      	movs	r2, #1
 800bb04:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f022 0206 	bic.w	r2, r2, #6
 800bb1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689a      	ldr	r2, [r3, #8]
 800bb32:	4b1f      	ldr	r3, [pc, #124]	@ (800bbb0 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	22ca      	movs	r2, #202	@ 0xca
 800bb46:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2253      	movs	r2, #83	@ 0x53
 800bb4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	697a      	ldr	r2, [r7, #20]
 800bb56:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800bb68:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800bb7a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689a      	ldr	r2, [r3, #8]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb8a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	22ff      	movs	r2, #255	@ 0xff
 800bb92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2201      	movs	r2, #1
 800bb98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	371c      	adds	r7, #28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	fffff7f7 	.word	0xfffff7f7

0800bbb4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e156      	b.n	800be80 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7f8 fc0a 	bl	8004400 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f95b 	bl	800beb0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d00c      	beq.n	800bc1c <HAL_SAI_Init+0x68>
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d80d      	bhi.n	800bc22 <HAL_SAI_Init+0x6e>
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <HAL_SAI_Init+0x5c>
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d003      	beq.n	800bc16 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bc0e:	e008      	b.n	800bc22 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	61fb      	str	r3, [r7, #28]
      break;
 800bc14:	e006      	b.n	800bc24 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc16:	2310      	movs	r3, #16
 800bc18:	61fb      	str	r3, [r7, #28]
      break;
 800bc1a:	e003      	b.n	800bc24 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc1c:	2320      	movs	r3, #32
 800bc1e:	61fb      	str	r3, [r7, #28]
      break;
 800bc20:	e000      	b.n	800bc24 <HAL_SAI_Init+0x70>
      break;
 800bc22:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d81e      	bhi.n	800bc6a <HAL_SAI_Init+0xb6>
 800bc2c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc34 <HAL_SAI_Init+0x80>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc4b 	.word	0x0800bc4b
 800bc3c:	0800bc53 	.word	0x0800bc53
 800bc40:	0800bc5b 	.word	0x0800bc5b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	617b      	str	r3, [r7, #20]
    }
    break;
 800bc48:	e010      	b.n	800bc6c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bc4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc4e:	617b      	str	r3, [r7, #20]
    }
    break;
 800bc50:	e00c      	b.n	800bc6c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc56:	617b      	str	r3, [r7, #20]
    }
    break;
 800bc58:	e008      	b.n	800bc6c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc5e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	f043 0301 	orr.w	r3, r3, #1
 800bc66:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bc68:	e000      	b.n	800bc6c <HAL_SAI_Init+0xb8>
    default:
      break;
 800bc6a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a85      	ldr	r2, [pc, #532]	@ (800be88 <HAL_SAI_Init+0x2d4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d004      	beq.n	800bc80 <HAL_SAI_Init+0xcc>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a84      	ldr	r2, [pc, #528]	@ (800be8c <HAL_SAI_Init+0x2d8>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d103      	bne.n	800bc88 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bc80:	4a83      	ldr	r2, [pc, #524]	@ (800be90 <HAL_SAI_Init+0x2dc>)
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	e002      	b.n	800bc8e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bc88:	4a82      	ldr	r2, [pc, #520]	@ (800be94 <HAL_SAI_Init+0x2e0>)
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d04c      	beq.n	800bd30 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a7a      	ldr	r2, [pc, #488]	@ (800be88 <HAL_SAI_Init+0x2d4>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d004      	beq.n	800bcae <HAL_SAI_Init+0xfa>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a78      	ldr	r2, [pc, #480]	@ (800be8c <HAL_SAI_Init+0x2d8>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d104      	bne.n	800bcb8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bcae:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bcb2:	f7ff f9a1 	bl	800aff8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcb6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a76      	ldr	r2, [pc, #472]	@ (800be98 <HAL_SAI_Init+0x2e4>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d004      	beq.n	800bccc <HAL_SAI_Init+0x118>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a75      	ldr	r2, [pc, #468]	@ (800be9c <HAL_SAI_Init+0x2e8>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d104      	bne.n	800bcd6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bccc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bcd0:	f7ff f992 	bl	800aff8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcd4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	461a      	mov	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	025b      	lsls	r3, r3, #9
 800bce8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcec:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4a6b      	ldr	r2, [pc, #428]	@ (800bea0 <HAL_SAI_Init+0x2ec>)
 800bcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf6:	08da      	lsrs	r2, r3, #3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bcfc:	68f9      	ldr	r1, [r7, #12]
 800bcfe:	4b68      	ldr	r3, [pc, #416]	@ (800bea0 <HAL_SAI_Init+0x2ec>)
 800bd00:	fba3 2301 	umull	r2, r3, r3, r1
 800bd04:	08da      	lsrs	r2, r3, #3
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	1aca      	subs	r2, r1, r3
 800bd10:	2a08      	cmp	r2, #8
 800bd12:	d904      	bls.n	800bd1e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	1c5a      	adds	r2, r3, #1
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd22:	2b04      	cmp	r3, #4
 800bd24:	d104      	bne.n	800bd30 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	085a      	lsrs	r2, r3, #1
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <HAL_SAI_Init+0x18c>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d109      	bne.n	800bd54 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d101      	bne.n	800bd4c <HAL_SAI_Init+0x198>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	e001      	b.n	800bd50 <HAL_SAI_Init+0x19c>
 800bd4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd50:	61bb      	str	r3, [r7, #24]
 800bd52:	e008      	b.n	800bd66 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d102      	bne.n	800bd62 <HAL_SAI_Init+0x1ae>
 800bd5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd60:	e000      	b.n	800bd64 <HAL_SAI_Init+0x1b0>
 800bd62:	2300      	movs	r3, #0
 800bd64:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6819      	ldr	r1, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	4b4c      	ldr	r3, [pc, #304]	@ (800bea4 <HAL_SAI_Init+0x2f0>)
 800bd72:	400b      	ands	r3, r1
 800bd74:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6819      	ldr	r1, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd84:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bd8a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd90:	431a      	orrs	r2, r3
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800bd9e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bdaa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	051b      	lsls	r3, r3, #20
 800bdb2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6859      	ldr	r1, [r3, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	4b38      	ldr	r3, [pc, #224]	@ (800bea8 <HAL_SAI_Init+0x2f4>)
 800bdc8:	400b      	ands	r3, r1
 800bdca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6859      	ldr	r1, [r3, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	699a      	ldr	r2, [r3, #24]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde0:	431a      	orrs	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	430a      	orrs	r2, r1
 800bde8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6899      	ldr	r1, [r3, #8]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	4b2d      	ldr	r3, [pc, #180]	@ (800beac <HAL_SAI_Init+0x2f8>)
 800bdf6:	400b      	ands	r3, r1
 800bdf8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6899      	ldr	r1, [r3, #8]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be04:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be0a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800be10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800be16:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be1c:	3b01      	subs	r3, #1
 800be1e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800be20:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68d9      	ldr	r1, [r3, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800be38:	400b      	ands	r3, r1
 800be3a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68d9      	ldr	r1, [r3, #12]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be4a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be50:	041b      	lsls	r3, r3, #16
 800be52:	431a      	orrs	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be58:	3b01      	subs	r3, #1
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3720      	adds	r7, #32
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	40015804 	.word	0x40015804
 800be8c:	40015824 	.word	0x40015824
 800be90:	40015800 	.word	0x40015800
 800be94:	40015c00 	.word	0x40015c00
 800be98:	40015c04 	.word	0x40015c04
 800be9c:	40015c24 	.word	0x40015c24
 800bea0:	cccccccd 	.word	0xcccccccd
 800bea4:	ff05c010 	.word	0xff05c010
 800bea8:	ffff1ff0 	.word	0xffff1ff0
 800beac:	fff88000 	.word	0xfff88000

0800beb0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800beb8:	4b17      	ldr	r3, [pc, #92]	@ (800bf18 <SAI_Disable+0x68>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a17      	ldr	r2, [pc, #92]	@ (800bf1c <SAI_Disable+0x6c>)
 800bebe:	fba2 2303 	umull	r2, r3, r2, r3
 800bec2:	0b1b      	lsrs	r3, r3, #12
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800beda:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	1e5a      	subs	r2, r3, #1
 800bee0:	60fa      	str	r2, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10a      	bne.n	800befc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800beec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800bef6:	2303      	movs	r3, #3
 800bef8:	72fb      	strb	r3, [r7, #11]
      break;
 800befa:	e006      	b.n	800bf0a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e8      	bne.n	800bedc <SAI_Disable+0x2c>

  return status;
 800bf0a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	20000000 	.word	0x20000000
 800bf1c:	95cbec1b 	.word	0x95cbec1b

0800bf20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e022      	b.n	800bf78 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d105      	bne.n	800bf4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7f7 fe75 	bl	8003c34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2203      	movs	r2, #3
 800bf4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f814 	bl	800bf80 <HAL_SD_InitCard>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e00a      	b.n	800bf78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf80:	b5b0      	push	{r4, r5, r7, lr}
 800bf82:	b08e      	sub	sp, #56	@ 0x38
 800bf84:	af04      	add	r7, sp, #16
 800bf86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bf90:	2300      	movs	r3, #0
 800bf92:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bf94:	2300      	movs	r3, #0
 800bf96:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bf9c:	2376      	movs	r3, #118	@ 0x76
 800bf9e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681d      	ldr	r5, [r3, #0]
 800bfa4:	466c      	mov	r4, sp
 800bfa6:	f107 0318 	add.w	r3, r7, #24
 800bfaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bfae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bfb2:	f107 030c 	add.w	r3, r7, #12
 800bfb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f003 fd13 	bl	800f9e4 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bfcc:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f003 fd32 	bl	800fa3c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfe6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800bfe8:	2002      	movs	r0, #2
 800bfea:	f7f9 f83f 	bl	800506c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fd76 	bl	800cae0 <SD_PowerON>
 800bff4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00b      	beq.n	800c014 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e02e      	b.n	800c072 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fc95 	bl	800c944 <SD_InitCard>
 800c01a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c030:	431a      	orrs	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c036:	2301      	movs	r3, #1
 800c038:	e01b      	b.n	800c072 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c042:	4618      	mov	r0, r3
 800c044:	f003 fd8c 	bl	800fb60 <SDMMC_CmdBlockLength>
 800c048:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00f      	beq.n	800c070 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a09      	ldr	r2, [pc, #36]	@ (800c07c <HAL_SD_InitCard+0xfc>)
 800c056:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c06c:	2301      	movs	r3, #1
 800c06e:	e000      	b.n	800c072 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3728      	adds	r7, #40	@ 0x28
 800c076:	46bd      	mov	sp, r7
 800c078:	bdb0      	pop	{r4, r5, r7, pc}
 800c07a:	bf00      	nop
 800c07c:	004005ff 	.word	0x004005ff

0800c080 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08c      	sub	sp, #48	@ 0x30
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d107      	bne.n	800c0a8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c09c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e0c3      	b.n	800c230 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	f040 80bc 	bne.w	800c22e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c0bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d907      	bls.n	800c0da <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ce:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e0aa      	b.n	800c230 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2203      	movs	r2, #3
 800c0de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c0f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fe:	4a4e      	ldr	r2, [pc, #312]	@ (800c238 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c100:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c106:	4a4d      	ldr	r2, [pc, #308]	@ (800c23c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c108:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c10e:	2200      	movs	r2, #0
 800c110:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c116:	2200      	movs	r2, #0
 800c118:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3380      	adds	r3, #128	@ 0x80
 800c140:	4619      	mov	r1, r3
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	025b      	lsls	r3, r3, #9
 800c148:	089b      	lsrs	r3, r3, #2
 800c14a:	f7f9 fda5 	bl	8005c98 <HAL_DMA_Start_IT>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d017      	beq.n	800c184 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800c162:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a35      	ldr	r2, [pc, #212]	@ (800c240 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c16a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c170:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e055      	b.n	800c230 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f042 0208 	orr.w	r2, r2, #8
 800c192:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d002      	beq.n	800c1a2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19e:	025b      	lsls	r3, r3, #9
 800c1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	025b      	lsls	r3, r3, #9
 800c1ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c1ae:	2390      	movs	r3, #144	@ 0x90
 800c1b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f107 0210 	add.w	r2, r7, #16
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f003 fc9d 	bl	800fb08 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d90a      	bls.n	800c1ea <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2282      	movs	r2, #130	@ 0x82
 800c1d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f003 fd01 	bl	800fbe8 <SDMMC_CmdReadMultiBlock>
 800c1e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c1e8:	e009      	b.n	800c1fe <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2281      	movs	r2, #129	@ 0x81
 800c1ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f003 fcd4 	bl	800fba4 <SDMMC_CmdReadSingleBlock>
 800c1fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c200:	2b00      	cmp	r3, #0
 800c202:	d012      	beq.n	800c22a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a0d      	ldr	r2, [pc, #52]	@ (800c240 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c20a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c212:	431a      	orrs	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e002      	b.n	800c230 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c22a:	2300      	movs	r3, #0
 800c22c:	e000      	b.n	800c230 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c22e:	2302      	movs	r3, #2
  }
}
 800c230:	4618      	mov	r0, r3
 800c232:	3730      	adds	r7, #48	@ 0x30
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	0800c82f 	.word	0x0800c82f
 800c23c:	0800c8a1 	.word	0x0800c8a1
 800c240:	004005ff 	.word	0x004005ff

0800c244 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08c      	sub	sp, #48	@ 0x30
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d107      	bne.n	800c26c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c260:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e0c6      	b.n	800c3fa <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b01      	cmp	r3, #1
 800c276:	f040 80bf 	bne.w	800c3f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	441a      	add	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d907      	bls.n	800c29e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c292:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e0ad      	b.n	800c3fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2203      	movs	r2, #3
 800c2a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 021a 	orr.w	r2, r2, #26
 800c2bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2c2:	4a50      	ldr	r2, [pc, #320]	@ (800c404 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c2c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ca:	4a4f      	ldr	r2, [pc, #316]	@ (800c408 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c2cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d002      	beq.n	800c2e4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e0:	025b      	lsls	r3, r3, #9
 800c2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d90a      	bls.n	800c300 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	22a0      	movs	r2, #160	@ 0xa0
 800c2ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f003 fcba 	bl	800fc70 <SDMMC_CmdWriteMultiBlock>
 800c2fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2fe:	e009      	b.n	800c314 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2290      	movs	r2, #144	@ 0x90
 800c304:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c30c:	4618      	mov	r0, r3
 800c30e:	f003 fc8d 	bl	800fc2c <SDMMC_CmdWriteSingleBlock>
 800c312:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c316:	2b00      	cmp	r3, #0
 800c318:	d012      	beq.n	800c340 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a3b      	ldr	r2, [pc, #236]	@ (800c40c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c320:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c328:	431a      	orrs	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e05c      	b.n	800c3fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f042 0208 	orr.w	r2, r2, #8
 800c34e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c354:	2240      	movs	r2, #64	@ 0x40
 800c356:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c368:	689a      	ldr	r2, [r3, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3380      	adds	r3, #128	@ 0x80
 800c380:	461a      	mov	r2, r3
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	025b      	lsls	r3, r3, #9
 800c386:	089b      	lsrs	r3, r3, #2
 800c388:	f7f9 fc86 	bl	8005c98 <HAL_DMA_Start_IT>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d01a      	beq.n	800c3c8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 021a 	bic.w	r2, r2, #26
 800c3a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a19      	ldr	r2, [pc, #100]	@ (800c40c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c3a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e018      	b.n	800c3fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	025b      	lsls	r3, r3, #9
 800c3d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3d4:	2390      	movs	r3, #144	@ 0x90
 800c3d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f107 0210 	add.w	r2, r7, #16
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f003 fb8a 	bl	800fb08 <SDMMC_ConfigData>

      return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e000      	b.n	800c3fa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c3f8:	2302      	movs	r3, #2
  }
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3730      	adds	r7, #48	@ 0x30
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	0800c805 	.word	0x0800c805
 800c408:	0800c8a1 	.word	0x0800c8a1
 800c40c:	004005ff 	.word	0x004005ff

0800c410 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c432:	0f9b      	lsrs	r3, r3, #30
 800c434:	b2da      	uxtb	r2, r3
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c43e:	0e9b      	lsrs	r3, r3, #26
 800c440:	b2db      	uxtb	r3, r3
 800c442:	f003 030f 	and.w	r3, r3, #15
 800c446:	b2da      	uxtb	r2, r3
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c450:	0e1b      	lsrs	r3, r3, #24
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 0303 	and.w	r3, r3, #3
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c462:	0c1b      	lsrs	r3, r3, #16
 800c464:	b2da      	uxtb	r2, r3
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c46e:	0a1b      	lsrs	r3, r3, #8
 800c470:	b2da      	uxtb	r2, r3
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c484:	0d1b      	lsrs	r3, r3, #20
 800c486:	b29a      	uxth	r2, r3
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c490:	0c1b      	lsrs	r3, r3, #16
 800c492:	b2db      	uxtb	r3, r3
 800c494:	f003 030f 	and.w	r3, r3, #15
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4a2:	0bdb      	lsrs	r3, r3, #15
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4b4:	0b9b      	lsrs	r3, r3, #14
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4c6:	0b5b      	lsrs	r3, r3, #13
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4d8:	0b1b      	lsrs	r3, r3, #12
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	f003 0301 	and.w	r3, r3, #1
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d163      	bne.n	800c5bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4f8:	009a      	lsls	r2, r3, #2
 800c4fa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c4fe:	4013      	ands	r3, r2
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c504:	0f92      	lsrs	r2, r2, #30
 800c506:	431a      	orrs	r2, r3
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c510:	0edb      	lsrs	r3, r3, #27
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0307 	and.w	r3, r3, #7
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c522:	0e1b      	lsrs	r3, r3, #24
 800c524:	b2db      	uxtb	r3, r3
 800c526:	f003 0307 	and.w	r3, r3, #7
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c534:	0d5b      	lsrs	r3, r3, #21
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f003 0307 	and.w	r3, r3, #7
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c546:	0c9b      	lsrs	r3, r3, #18
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c558:	0bdb      	lsrs	r3, r3, #15
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	f003 0307 	and.w	r3, r3, #7
 800c560:	b2da      	uxtb	r2, r3
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	7e1b      	ldrb	r3, [r3, #24]
 800c574:	b2db      	uxtb	r3, r3
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	3302      	adds	r3, #2
 800c57c:	2201      	movs	r2, #1
 800c57e:	fa02 f303 	lsl.w	r3, r2, r3
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c586:	fb03 f202 	mul.w	r2, r3, r2
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	7a1b      	ldrb	r3, [r3, #8]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	f003 030f 	and.w	r3, r3, #15
 800c598:	2201      	movs	r2, #1
 800c59a:	409a      	lsls	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c5a8:	0a52      	lsrs	r2, r2, #9
 800c5aa:	fb03 f202 	mul.w	r2, r3, r2
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5b8:	661a      	str	r2, [r3, #96]	@ 0x60
 800c5ba:	e031      	b.n	800c620 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d11d      	bne.n	800c600 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c5c8:	041b      	lsls	r3, r3, #16
 800c5ca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5d2:	0c1b      	lsrs	r3, r3, #16
 800c5d4:	431a      	orrs	r2, r3
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	691b      	ldr	r3, [r3, #16]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	029a      	lsls	r2, r3, #10
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5f4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	661a      	str	r2, [r3, #96]	@ 0x60
 800c5fe:	e00f      	b.n	800c620 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a58      	ldr	r2, [pc, #352]	@ (800c768 <HAL_SD_GetCardCSD+0x344>)
 800c606:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c60c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e09d      	b.n	800c75c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c624:	0b9b      	lsrs	r3, r3, #14
 800c626:	b2db      	uxtb	r3, r3
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c636:	09db      	lsrs	r3, r3, #7
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c658:	0fdb      	lsrs	r3, r3, #31
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c664:	0f5b      	lsrs	r3, r3, #29
 800c666:	b2db      	uxtb	r3, r3
 800c668:	f003 0303 	and.w	r3, r3, #3
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c676:	0e9b      	lsrs	r3, r3, #26
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	f003 0307 	and.w	r3, r3, #7
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c688:	0d9b      	lsrs	r3, r3, #22
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	b2da      	uxtb	r2, r3
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c69a:	0d5b      	lsrs	r3, r3, #21
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6b6:	0c1b      	lsrs	r3, r3, #16
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6ca:	0bdb      	lsrs	r3, r3, #15
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6de:	0b9b      	lsrs	r3, r3, #14
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	b2da      	uxtb	r2, r3
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6f2:	0b5b      	lsrs	r3, r3, #13
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c706:	0b1b      	lsrs	r3, r3, #12
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c71a:	0a9b      	lsrs	r3, r3, #10
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	b2da      	uxtb	r2, r3
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c72e:	0a1b      	lsrs	r3, r3, #8
 800c730:	b2db      	uxtb	r3, r3
 800c732:	f003 0303 	and.w	r3, r3, #3
 800c736:	b2da      	uxtb	r2, r3
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c742:	085b      	lsrs	r3, r3, #1
 800c744:	b2db      	uxtb	r3, r3
 800c746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	004005ff 	.word	0x004005ff

0800c76c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c7d0:	f107 030c 	add.w	r3, r7, #12
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fa10 	bl	800cbfc <SD_SendStatus>
 800c7dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d005      	beq.n	800c7f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	431a      	orrs	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	0a5b      	lsrs	r3, r3, #9
 800c7f4:	f003 030f 	and.w	r3, r3, #15
 800c7f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c7fa:	693b      	ldr	r3, [r7, #16]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c810:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c820:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c822:	bf00      	nop
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b084      	sub	sp, #16
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c83a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c840:	2b82      	cmp	r3, #130	@ 0x82
 800c842:	d111      	bne.n	800c868 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4618      	mov	r0, r3
 800c84a:	f003 fa33 	bl	800fcb4 <SDMMC_CmdStopTransfer>
 800c84e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d008      	beq.n	800c868 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	431a      	orrs	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f7ff fdd4 	bl	800c410 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0208 	bic.w	r2, r2, #8
 800c876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c880:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f004 ff85 	bl	80117a0 <HAL_SD_RxCpltCallback>
#endif
}
 800c896:	bf00      	nop
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f9 fc6e 	bl	8006190 <HAL_DMA_GetError>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d03e      	beq.n	800c938 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d002      	beq.n	800c8d6 <SD_DMAError+0x36>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d12d      	bne.n	800c932 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a19      	ldr	r2, [pc, #100]	@ (800c940 <SD_DMAError+0xa0>)
 800c8dc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c8ec:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c8fa:	6978      	ldr	r0, [r7, #20]
 800c8fc:	f7ff ff62 	bl	800c7c4 <HAL_SD_GetCardState>
 800c900:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2b06      	cmp	r3, #6
 800c906:	d002      	beq.n	800c90e <SD_DMAError+0x6e>
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b05      	cmp	r3, #5
 800c90c:	d10a      	bne.n	800c924 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	f003 f9ce 	bl	800fcb4 <SDMMC_CmdStopTransfer>
 800c918:	4602      	mov	r2, r0
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c91e:	431a      	orrs	r2, r3
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2200      	movs	r2, #0
 800c930:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f7ff fd6c 	bl	800c410 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c938:	bf00      	nop
 800c93a:	3718      	adds	r7, #24
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	004005ff 	.word	0x004005ff

0800c944 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c944:	b5b0      	push	{r4, r5, r7, lr}
 800c946:	b094      	sub	sp, #80	@ 0x50
 800c948:	af04      	add	r7, sp, #16
 800c94a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c94c:	2301      	movs	r3, #1
 800c94e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4618      	mov	r0, r3
 800c956:	f003 f87f 	bl	800fa58 <SDMMC_GetPowerState>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c960:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c964:	e0b8      	b.n	800cad8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	d02f      	beq.n	800c9ce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f003 fa66 	bl	800fe44 <SDMMC_CmdSendCID>
 800c978:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <SD_InitCard+0x40>
    {
      return errorstate;
 800c980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c982:	e0a9      	b.n	800cad8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2100      	movs	r1, #0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f003 f8a9 	bl	800fae2 <SDMMC_GetResponse>
 800c990:	4602      	mov	r2, r0
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2104      	movs	r1, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f003 f8a0 	bl	800fae2 <SDMMC_GetResponse>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2108      	movs	r1, #8
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f003 f897 	bl	800fae2 <SDMMC_GetResponse>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	210c      	movs	r1, #12
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f003 f88e 	bl	800fae2 <SDMMC_GetResponse>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d00d      	beq.n	800c9f2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f107 020e 	add.w	r2, r7, #14
 800c9de:	4611      	mov	r1, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f003 fa6c 	bl	800febe <SDMMC_CmdSetRelAdd>
 800c9e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <SD_InitCard+0xae>
    {
      return errorstate;
 800c9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f0:	e072      	b.n	800cad8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f6:	2b03      	cmp	r3, #3
 800c9f8:	d036      	beq.n	800ca68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c9fa:	89fb      	ldrh	r3, [r7, #14]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca0a:	041b      	lsls	r3, r3, #16
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	4610      	mov	r0, r2
 800ca10:	f003 fa36 	bl	800fe80 <SDMMC_CmdSendCSD>
 800ca14:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1e:	e05b      	b.n	800cad8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2100      	movs	r1, #0
 800ca26:	4618      	mov	r0, r3
 800ca28:	f003 f85b 	bl	800fae2 <SDMMC_GetResponse>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2104      	movs	r1, #4
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f003 f852 	bl	800fae2 <SDMMC_GetResponse>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2108      	movs	r1, #8
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f003 f849 	bl	800fae2 <SDMMC_GetResponse>
 800ca50:	4602      	mov	r2, r0
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	210c      	movs	r1, #12
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f003 f840 	bl	800fae2 <SDMMC_GetResponse>
 800ca62:	4602      	mov	r2, r0
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2104      	movs	r1, #4
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f003 f837 	bl	800fae2 <SDMMC_GetResponse>
 800ca74:	4603      	mov	r3, r0
 800ca76:	0d1a      	lsrs	r2, r3, #20
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ca7c:	f107 0310 	add.w	r3, r7, #16
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fcce 	bl	800c424 <HAL_SD_GetCardCSD>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ca92:	e021      	b.n	800cad8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6819      	ldr	r1, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9c:	041b      	lsls	r3, r3, #16
 800ca9e:	2200      	movs	r2, #0
 800caa0:	461c      	mov	r4, r3
 800caa2:	4615      	mov	r5, r2
 800caa4:	4622      	mov	r2, r4
 800caa6:	462b      	mov	r3, r5
 800caa8:	4608      	mov	r0, r1
 800caaa:	f003 f925 	bl	800fcf8 <SDMMC_CmdSelDesel>
 800caae:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <SD_InitCard+0x176>
  {
    return errorstate;
 800cab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab8:	e00e      	b.n	800cad8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681d      	ldr	r5, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	466c      	mov	r4, sp
 800cac2:	f103 0210 	add.w	r2, r3, #16
 800cac6:	ca07      	ldmia	r2, {r0, r1, r2}
 800cac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cacc:	3304      	adds	r3, #4
 800cace:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cad0:	4628      	mov	r0, r5
 800cad2:	f002 ff87 	bl	800f9e4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3740      	adds	r7, #64	@ 0x40
 800cadc:	46bd      	mov	sp, r7
 800cade:	bdb0      	pop	{r4, r5, r7, pc}

0800cae0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
 800caf0:	2300      	movs	r3, #0
 800caf2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f003 f920 	bl	800fd3e <SDMMC_CmdGoIdleState>
 800cafe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	e072      	b.n	800cbf0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f003 f933 	bl	800fd7a <SDMMC_CmdOperCond>
 800cb14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00d      	beq.n	800cb38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f003 f909 	bl	800fd3e <SDMMC_CmdGoIdleState>
 800cb2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d004      	beq.n	800cb3e <SD_PowerON+0x5e>
    {
      return errorstate;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	e05b      	b.n	800cbf0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d137      	bne.n	800cbb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f003 f933 	bl	800fdb8 <SDMMC_CmdAppCommand>
 800cb52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d02d      	beq.n	800cbb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cb5e:	e047      	b.n	800cbf0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2100      	movs	r1, #0
 800cb66:	4618      	mov	r0, r3
 800cb68:	f003 f926 	bl	800fdb8 <SDMMC_CmdAppCommand>
 800cb6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <SD_PowerON+0x98>
    {
      return errorstate;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	e03b      	b.n	800cbf0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	491e      	ldr	r1, [pc, #120]	@ (800cbf8 <SD_PowerON+0x118>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f003 f93c 	bl	800fdfc <SDMMC_CmdAppOperCommand>
 800cb84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb8c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cb90:	e02e      	b.n	800cbf0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2100      	movs	r1, #0
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f002 ffa2 	bl	800fae2 <SDMMC_GetResponse>
 800cb9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	0fdb      	lsrs	r3, r3, #31
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d101      	bne.n	800cbac <SD_PowerON+0xcc>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e000      	b.n	800cbae <SD_PowerON+0xce>
 800cbac:	2300      	movs	r3, #0
 800cbae:	613b      	str	r3, [r7, #16]

    count++;
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d802      	bhi.n	800cbc6 <SD_PowerON+0xe6>
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0cc      	beq.n	800cb60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d902      	bls.n	800cbd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cbd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cbd4:	e00c      	b.n	800cbf0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	645a      	str	r2, [r3, #68]	@ 0x44
 800cbe6:	e002      	b.n	800cbee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3718      	adds	r7, #24
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	c1100000 	.word	0xc1100000

0800cbfc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc10:	e018      	b.n	800cc44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc1a:	041b      	lsls	r3, r3, #16
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4610      	mov	r0, r2
 800cc20:	f003 f96e 	bl	800ff00 <SDMMC_CmdSendStatus>
 800cc24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	e009      	b.n	800cc44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f002 ff53 	bl	800fae2 <SDMMC_GetResponse>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d101      	bne.n	800cc60 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e025      	b.n	800ccac <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7f7 fbb9 	bl	80043ec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2202      	movs	r2, #2
 800cc7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	f002 fde3 	bl	800f858 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6818      	ldr	r0, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	f002 fe37 	bl	800f910 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e04c      	b.n	800cd60 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7f7 f80c 	bl	8003cf8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2202      	movs	r2, #2
 800cce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f022 0203 	bic.w	r2, r2, #3
 800ccf6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	4b19      	ldr	r3, [pc, #100]	@ (800cd68 <HAL_SPDIFRX_Init+0xb4>)
 800cd04:	4013      	ands	r3, r2
 800cd06:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800cd10:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800cd16:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800cd1c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800cd22:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800cd28:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800cd2e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800cd34:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800cd3a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800cd40:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	fff88407 	.word	0xfff88407

0800cd6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e09d      	b.n	800ceba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d108      	bne.n	800cd98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cd8e:	d009      	beq.n	800cda4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	61da      	str	r2, [r3, #28]
 800cd96:	e005      	b.n	800cda4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7f6 fffe 	bl	8003dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cde4:	d902      	bls.n	800cdec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]
 800cdea:	e002      	b.n	800cdf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cdec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cdf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cdfa:	d007      	beq.n	800ce0c <HAL_SPI_Init+0xa0>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ce04:	d002      	beq.n	800ce0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ce1c:	431a      	orrs	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	f003 0302 	and.w	r3, r3, #2
 800ce26:	431a      	orrs	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	431a      	orrs	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce44:	431a      	orrs	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce4e:	ea42 0103 	orr.w	r1, r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	699b      	ldr	r3, [r3, #24]
 800ce66:	0c1b      	lsrs	r3, r3, #16
 800ce68:	f003 0204 	and.w	r2, r3, #4
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce70:	f003 0310 	and.w	r3, r3, #16
 800ce74:	431a      	orrs	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce7a:	f003 0308 	and.w	r3, r3, #8
 800ce7e:	431a      	orrs	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ce88:	ea42 0103 	orr.w	r1, r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	69da      	ldr	r2, [r3, #28]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b082      	sub	sp, #8
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	e049      	b.n	800cf68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f6 ffcb 	bl	8003e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2202      	movs	r2, #2
 800cef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f000 fc11 	bl	800d728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d001      	beq.n	800cf88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e054      	b.n	800d032 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	68da      	ldr	r2, [r3, #12]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f042 0201 	orr.w	r2, r2, #1
 800cf9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a26      	ldr	r2, [pc, #152]	@ (800d040 <HAL_TIM_Base_Start_IT+0xd0>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d022      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfb2:	d01d      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a22      	ldr	r2, [pc, #136]	@ (800d044 <HAL_TIM_Base_Start_IT+0xd4>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d018      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a21      	ldr	r2, [pc, #132]	@ (800d048 <HAL_TIM_Base_Start_IT+0xd8>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d013      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a1f      	ldr	r2, [pc, #124]	@ (800d04c <HAL_TIM_Base_Start_IT+0xdc>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d00e      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a1e      	ldr	r2, [pc, #120]	@ (800d050 <HAL_TIM_Base_Start_IT+0xe0>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d009      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a1c      	ldr	r2, [pc, #112]	@ (800d054 <HAL_TIM_Base_Start_IT+0xe4>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d004      	beq.n	800cff0 <HAL_TIM_Base_Start_IT+0x80>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1b      	ldr	r2, [pc, #108]	@ (800d058 <HAL_TIM_Base_Start_IT+0xe8>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d115      	bne.n	800d01c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689a      	ldr	r2, [r3, #8]
 800cff6:	4b19      	ldr	r3, [pc, #100]	@ (800d05c <HAL_TIM_Base_Start_IT+0xec>)
 800cff8:	4013      	ands	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b06      	cmp	r3, #6
 800d000:	d015      	beq.n	800d02e <HAL_TIM_Base_Start_IT+0xbe>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d008:	d011      	beq.n	800d02e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f042 0201 	orr.w	r2, r2, #1
 800d018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d01a:	e008      	b.n	800d02e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f042 0201 	orr.w	r2, r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	e000      	b.n	800d030 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d02e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	40010000 	.word	0x40010000
 800d044:	40000400 	.word	0x40000400
 800d048:	40000800 	.word	0x40000800
 800d04c:	40000c00 	.word	0x40000c00
 800d050:	40010400 	.word	0x40010400
 800d054:	40014000 	.word	0x40014000
 800d058:	40001800 	.word	0x40001800
 800d05c:	00010007 	.word	0x00010007

0800d060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d101      	bne.n	800d072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e049      	b.n	800d106 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d106      	bne.n	800d08c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7f6 ff6a 	bl	8003f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2202      	movs	r2, #2
 800d090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3304      	adds	r3, #4
 800d09c:	4619      	mov	r1, r3
 800d09e:	4610      	mov	r0, r2
 800d0a0:	f000 fb42 	bl	800d728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f003 0302 	and.w	r3, r3, #2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d020      	beq.n	800d172 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f003 0302 	and.w	r3, r3, #2
 800d136:	2b00      	cmp	r3, #0
 800d138:	d01b      	beq.n	800d172 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f06f 0202 	mvn.w	r2, #2
 800d142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	f003 0303 	and.w	r3, r3, #3
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fac7 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d15e:	e005      	b.n	800d16c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fab9 	bl	800d6d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 faca 	bl	800d700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d020      	beq.n	800d1be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f003 0304 	and.w	r3, r3, #4
 800d182:	2b00      	cmp	r3, #0
 800d184:	d01b      	beq.n	800d1be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f06f 0204 	mvn.w	r2, #4
 800d18e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2202      	movs	r2, #2
 800d194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d003      	beq.n	800d1ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 faa1 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d1aa:	e005      	b.n	800d1b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fa93 	bl	800d6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 faa4 	bl	800d700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f003 0308 	and.w	r3, r3, #8
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d020      	beq.n	800d20a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f003 0308 	and.w	r3, r3, #8
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01b      	beq.n	800d20a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f06f 0208 	mvn.w	r2, #8
 800d1da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2204      	movs	r2, #4
 800d1e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	f003 0303 	and.w	r3, r3, #3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fa7b 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d1f6:	e005      	b.n	800d204 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fa6d 	bl	800d6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fa7e 	bl	800d700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f003 0310 	and.w	r3, r3, #16
 800d210:	2b00      	cmp	r3, #0
 800d212:	d020      	beq.n	800d256 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f003 0310 	and.w	r3, r3, #16
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d01b      	beq.n	800d256 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f06f 0210 	mvn.w	r2, #16
 800d226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2208      	movs	r2, #8
 800d22c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fa55 	bl	800d6ec <HAL_TIM_IC_CaptureCallback>
 800d242:	e005      	b.n	800d250 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fa47 	bl	800d6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fa58 	bl	800d700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	f003 0301 	and.w	r3, r3, #1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00c      	beq.n	800d27a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f06f 0201 	mvn.w	r2, #1
 800d272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7f6 f819 	bl	80032ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d280:	2b00      	cmp	r3, #0
 800d282:	d104      	bne.n	800d28e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00c      	beq.n	800d2a8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d294:	2b00      	cmp	r3, #0
 800d296:	d007      	beq.n	800d2a8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fef4 	bl	800e090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00c      	beq.n	800d2cc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d007      	beq.n	800d2cc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 feec 	bl	800e0a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00c      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fa12 	bl	800d714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f003 0320 	and.w	r3, r3, #32
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00c      	beq.n	800d314 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b00      	cmp	r3, #0
 800d302:	d007      	beq.n	800d314 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f06f 0220 	mvn.w	r2, #32
 800d30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 feb4 	bl	800e07c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d314:	bf00      	nop
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d332:	2b01      	cmp	r3, #1
 800d334:	d101      	bne.n	800d33a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d336:	2302      	movs	r3, #2
 800d338:	e0ff      	b.n	800d53a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2201      	movs	r2, #1
 800d33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b14      	cmp	r3, #20
 800d346:	f200 80f0 	bhi.w	800d52a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d34a:	a201      	add	r2, pc, #4	@ (adr r2, 800d350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d350:	0800d3a5 	.word	0x0800d3a5
 800d354:	0800d52b 	.word	0x0800d52b
 800d358:	0800d52b 	.word	0x0800d52b
 800d35c:	0800d52b 	.word	0x0800d52b
 800d360:	0800d3e5 	.word	0x0800d3e5
 800d364:	0800d52b 	.word	0x0800d52b
 800d368:	0800d52b 	.word	0x0800d52b
 800d36c:	0800d52b 	.word	0x0800d52b
 800d370:	0800d427 	.word	0x0800d427
 800d374:	0800d52b 	.word	0x0800d52b
 800d378:	0800d52b 	.word	0x0800d52b
 800d37c:	0800d52b 	.word	0x0800d52b
 800d380:	0800d467 	.word	0x0800d467
 800d384:	0800d52b 	.word	0x0800d52b
 800d388:	0800d52b 	.word	0x0800d52b
 800d38c:	0800d52b 	.word	0x0800d52b
 800d390:	0800d4a9 	.word	0x0800d4a9
 800d394:	0800d52b 	.word	0x0800d52b
 800d398:	0800d52b 	.word	0x0800d52b
 800d39c:	0800d52b 	.word	0x0800d52b
 800d3a0:	0800d4e9 	.word	0x0800d4e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fa62 	bl	800d874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	699a      	ldr	r2, [r3, #24]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0208 	orr.w	r2, r2, #8
 800d3be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	699a      	ldr	r2, [r3, #24]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f022 0204 	bic.w	r2, r2, #4
 800d3ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6999      	ldr	r1, [r3, #24]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	691a      	ldr	r2, [r3, #16]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	619a      	str	r2, [r3, #24]
      break;
 800d3e2:	e0a5      	b.n	800d530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68b9      	ldr	r1, [r7, #8]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fab4 	bl	800d958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	699a      	ldr	r2, [r3, #24]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	699a      	ldr	r2, [r3, #24]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6999      	ldr	r1, [r3, #24]
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	021a      	lsls	r2, r3, #8
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	430a      	orrs	r2, r1
 800d422:	619a      	str	r2, [r3, #24]
      break;
 800d424:	e084      	b.n	800d530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fb0b 	bl	800da48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	69da      	ldr	r2, [r3, #28]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f042 0208 	orr.w	r2, r2, #8
 800d440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	69da      	ldr	r2, [r3, #28]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f022 0204 	bic.w	r2, r2, #4
 800d450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	69d9      	ldr	r1, [r3, #28]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	691a      	ldr	r2, [r3, #16]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	61da      	str	r2, [r3, #28]
      break;
 800d464:	e064      	b.n	800d530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 fb61 	bl	800db34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	69da      	ldr	r2, [r3, #28]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	69da      	ldr	r2, [r3, #28]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	69d9      	ldr	r1, [r3, #28]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	021a      	lsls	r2, r3, #8
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	61da      	str	r2, [r3, #28]
      break;
 800d4a6:	e043      	b.n	800d530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68b9      	ldr	r1, [r7, #8]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 fb98 	bl	800dbe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f042 0208 	orr.w	r2, r2, #8
 800d4c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f022 0204 	bic.w	r2, r2, #4
 800d4d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	691a      	ldr	r2, [r3, #16]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d4e6:	e023      	b.n	800d530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68b9      	ldr	r1, [r7, #8]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 fbca 	bl	800dc88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d502:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d512:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	021a      	lsls	r2, r3, #8
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	430a      	orrs	r2, r1
 800d526:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d528:	e002      	b.n	800d530 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	75fb      	strb	r3, [r7, #23]
      break;
 800d52e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d538:	7dfb      	ldrb	r3, [r7, #23]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3718      	adds	r7, #24
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop

0800d544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d101      	bne.n	800d560 <HAL_TIM_ConfigClockSource+0x1c>
 800d55c:	2302      	movs	r3, #2
 800d55e:	e0b4      	b.n	800d6ca <HAL_TIM_ConfigClockSource+0x186>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	4b56      	ldr	r3, [pc, #344]	@ (800d6d4 <HAL_TIM_ConfigClockSource+0x190>)
 800d57c:	4013      	ands	r3, r2
 800d57e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d598:	d03e      	beq.n	800d618 <HAL_TIM_ConfigClockSource+0xd4>
 800d59a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d59e:	f200 8087 	bhi.w	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5a6:	f000 8086 	beq.w	800d6b6 <HAL_TIM_ConfigClockSource+0x172>
 800d5aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5ae:	d87f      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5b0:	2b70      	cmp	r3, #112	@ 0x70
 800d5b2:	d01a      	beq.n	800d5ea <HAL_TIM_ConfigClockSource+0xa6>
 800d5b4:	2b70      	cmp	r3, #112	@ 0x70
 800d5b6:	d87b      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5b8:	2b60      	cmp	r3, #96	@ 0x60
 800d5ba:	d050      	beq.n	800d65e <HAL_TIM_ConfigClockSource+0x11a>
 800d5bc:	2b60      	cmp	r3, #96	@ 0x60
 800d5be:	d877      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5c0:	2b50      	cmp	r3, #80	@ 0x50
 800d5c2:	d03c      	beq.n	800d63e <HAL_TIM_ConfigClockSource+0xfa>
 800d5c4:	2b50      	cmp	r3, #80	@ 0x50
 800d5c6:	d873      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5c8:	2b40      	cmp	r3, #64	@ 0x40
 800d5ca:	d058      	beq.n	800d67e <HAL_TIM_ConfigClockSource+0x13a>
 800d5cc:	2b40      	cmp	r3, #64	@ 0x40
 800d5ce:	d86f      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d0:	2b30      	cmp	r3, #48	@ 0x30
 800d5d2:	d064      	beq.n	800d69e <HAL_TIM_ConfigClockSource+0x15a>
 800d5d4:	2b30      	cmp	r3, #48	@ 0x30
 800d5d6:	d86b      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d8:	2b20      	cmp	r3, #32
 800d5da:	d060      	beq.n	800d69e <HAL_TIM_ConfigClockSource+0x15a>
 800d5dc:	2b20      	cmp	r3, #32
 800d5de:	d867      	bhi.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d05c      	beq.n	800d69e <HAL_TIM_ConfigClockSource+0x15a>
 800d5e4:	2b10      	cmp	r3, #16
 800d5e6:	d05a      	beq.n	800d69e <HAL_TIM_ConfigClockSource+0x15a>
 800d5e8:	e062      	b.n	800d6b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d5fa:	f000 fc13 	bl	800de24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d60c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	609a      	str	r2, [r3, #8]
      break;
 800d616:	e04f      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d628:	f000 fbfc 	bl	800de24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689a      	ldr	r2, [r3, #8]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d63a:	609a      	str	r2, [r3, #8]
      break;
 800d63c:	e03c      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d64a:	461a      	mov	r2, r3
 800d64c:	f000 fb70 	bl	800dd30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2150      	movs	r1, #80	@ 0x50
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fbc9 	bl	800ddee <TIM_ITRx_SetConfig>
      break;
 800d65c:	e02c      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d66a:	461a      	mov	r2, r3
 800d66c:	f000 fb8f 	bl	800dd8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2160      	movs	r1, #96	@ 0x60
 800d676:	4618      	mov	r0, r3
 800d678:	f000 fbb9 	bl	800ddee <TIM_ITRx_SetConfig>
      break;
 800d67c:	e01c      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d68a:	461a      	mov	r2, r3
 800d68c:	f000 fb50 	bl	800dd30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2140      	movs	r1, #64	@ 0x40
 800d696:	4618      	mov	r0, r3
 800d698:	f000 fba9 	bl	800ddee <TIM_ITRx_SetConfig>
      break;
 800d69c:	e00c      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	f000 fba0 	bl	800ddee <TIM_ITRx_SetConfig>
      break;
 800d6ae:	e003      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6b4:	e000      	b.n	800d6b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d6b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	fffeff88 	.word	0xfffeff88

0800d6d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d728:	b480      	push	{r7}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a43      	ldr	r2, [pc, #268]	@ (800d848 <TIM_Base_SetConfig+0x120>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d013      	beq.n	800d768 <TIM_Base_SetConfig+0x40>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d746:	d00f      	beq.n	800d768 <TIM_Base_SetConfig+0x40>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a40      	ldr	r2, [pc, #256]	@ (800d84c <TIM_Base_SetConfig+0x124>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d00b      	beq.n	800d768 <TIM_Base_SetConfig+0x40>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a3f      	ldr	r2, [pc, #252]	@ (800d850 <TIM_Base_SetConfig+0x128>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d007      	beq.n	800d768 <TIM_Base_SetConfig+0x40>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a3e      	ldr	r2, [pc, #248]	@ (800d854 <TIM_Base_SetConfig+0x12c>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d003      	beq.n	800d768 <TIM_Base_SetConfig+0x40>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a3d      	ldr	r2, [pc, #244]	@ (800d858 <TIM_Base_SetConfig+0x130>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d108      	bne.n	800d77a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d76e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	4313      	orrs	r3, r2
 800d778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4a32      	ldr	r2, [pc, #200]	@ (800d848 <TIM_Base_SetConfig+0x120>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d02b      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d788:	d027      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4a2f      	ldr	r2, [pc, #188]	@ (800d84c <TIM_Base_SetConfig+0x124>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d023      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4a2e      	ldr	r2, [pc, #184]	@ (800d850 <TIM_Base_SetConfig+0x128>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d01f      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4a2d      	ldr	r2, [pc, #180]	@ (800d854 <TIM_Base_SetConfig+0x12c>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d01b      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a2c      	ldr	r2, [pc, #176]	@ (800d858 <TIM_Base_SetConfig+0x130>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d017      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800d85c <TIM_Base_SetConfig+0x134>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d013      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4a2a      	ldr	r2, [pc, #168]	@ (800d860 <TIM_Base_SetConfig+0x138>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d00f      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4a29      	ldr	r2, [pc, #164]	@ (800d864 <TIM_Base_SetConfig+0x13c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d00b      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4a28      	ldr	r2, [pc, #160]	@ (800d868 <TIM_Base_SetConfig+0x140>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d007      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4a27      	ldr	r2, [pc, #156]	@ (800d86c <TIM_Base_SetConfig+0x144>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d003      	beq.n	800d7da <TIM_Base_SetConfig+0xb2>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a26      	ldr	r2, [pc, #152]	@ (800d870 <TIM_Base_SetConfig+0x148>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d108      	bne.n	800d7ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d7e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	695b      	ldr	r3, [r3, #20]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	689a      	ldr	r2, [r3, #8]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a0e      	ldr	r2, [pc, #56]	@ (800d848 <TIM_Base_SetConfig+0x120>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d003      	beq.n	800d81a <TIM_Base_SetConfig+0xf2>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a10      	ldr	r2, [pc, #64]	@ (800d858 <TIM_Base_SetConfig+0x130>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d103      	bne.n	800d822 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	691a      	ldr	r2, [r3, #16]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f043 0204 	orr.w	r2, r3, #4
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	601a      	str	r2, [r3, #0]
}
 800d83a:	bf00      	nop
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	40010000 	.word	0x40010000
 800d84c:	40000400 	.word	0x40000400
 800d850:	40000800 	.word	0x40000800
 800d854:	40000c00 	.word	0x40000c00
 800d858:	40010400 	.word	0x40010400
 800d85c:	40014000 	.word	0x40014000
 800d860:	40014400 	.word	0x40014400
 800d864:	40014800 	.word	0x40014800
 800d868:	40001800 	.word	0x40001800
 800d86c:	40001c00 	.word	0x40001c00
 800d870:	40002000 	.word	0x40002000

0800d874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d874:	b480      	push	{r7}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a1b      	ldr	r3, [r3, #32]
 800d882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6a1b      	ldr	r3, [r3, #32]
 800d888:	f023 0201 	bic.w	r2, r3, #1
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	4b2b      	ldr	r3, [pc, #172]	@ (800d94c <TIM_OC1_SetConfig+0xd8>)
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 0303 	bic.w	r3, r3, #3
 800d8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f023 0302 	bic.w	r3, r3, #2
 800d8bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a21      	ldr	r2, [pc, #132]	@ (800d950 <TIM_OC1_SetConfig+0xdc>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d003      	beq.n	800d8d8 <TIM_OC1_SetConfig+0x64>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a20      	ldr	r2, [pc, #128]	@ (800d954 <TIM_OC1_SetConfig+0xe0>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d10c      	bne.n	800d8f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	f023 0308 	bic.w	r3, r3, #8
 800d8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f023 0304 	bic.w	r3, r3, #4
 800d8f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4a16      	ldr	r2, [pc, #88]	@ (800d950 <TIM_OC1_SetConfig+0xdc>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d003      	beq.n	800d902 <TIM_OC1_SetConfig+0x8e>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4a15      	ldr	r2, [pc, #84]	@ (800d954 <TIM_OC1_SetConfig+0xe0>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d111      	bne.n	800d926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	4313      	orrs	r3, r2
 800d91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	4313      	orrs	r3, r2
 800d924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	621a      	str	r2, [r3, #32]
}
 800d940:	bf00      	nop
 800d942:	371c      	adds	r7, #28
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	fffeff8f 	.word	0xfffeff8f
 800d950:	40010000 	.word	0x40010000
 800d954:	40010400 	.word	0x40010400

0800d958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d958:	b480      	push	{r7}
 800d95a:	b087      	sub	sp, #28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a1b      	ldr	r3, [r3, #32]
 800d96c:	f023 0210 	bic.w	r2, r3, #16
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4b2e      	ldr	r3, [pc, #184]	@ (800da3c <TIM_OC2_SetConfig+0xe4>)
 800d984:	4013      	ands	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d98e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	021b      	lsls	r3, r3, #8
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4313      	orrs	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	f023 0320 	bic.w	r3, r3, #32
 800d9a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	011b      	lsls	r3, r3, #4
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a23      	ldr	r2, [pc, #140]	@ (800da40 <TIM_OC2_SetConfig+0xe8>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d003      	beq.n	800d9c0 <TIM_OC2_SetConfig+0x68>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a22      	ldr	r2, [pc, #136]	@ (800da44 <TIM_OC2_SetConfig+0xec>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d10d      	bne.n	800d9dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	011b      	lsls	r3, r3, #4
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4a18      	ldr	r2, [pc, #96]	@ (800da40 <TIM_OC2_SetConfig+0xe8>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d003      	beq.n	800d9ec <TIM_OC2_SetConfig+0x94>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a17      	ldr	r2, [pc, #92]	@ (800da44 <TIM_OC2_SetConfig+0xec>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d113      	bne.n	800da14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d9f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	695b      	ldr	r3, [r3, #20]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	4313      	orrs	r3, r2
 800da06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4313      	orrs	r3, r2
 800da12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	697a      	ldr	r2, [r7, #20]
 800da2c:	621a      	str	r2, [r3, #32]
}
 800da2e:	bf00      	nop
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	feff8fff 	.word	0xfeff8fff
 800da40:	40010000 	.word	0x40010000
 800da44:	40010400 	.word	0x40010400

0800da48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4b2d      	ldr	r3, [pc, #180]	@ (800db28 <TIM_OC3_SetConfig+0xe0>)
 800da74:	4013      	ands	r3, r2
 800da76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f023 0303 	bic.w	r3, r3, #3
 800da7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4313      	orrs	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800da90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	021b      	lsls	r3, r3, #8
 800da98:	697a      	ldr	r2, [r7, #20]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a22      	ldr	r2, [pc, #136]	@ (800db2c <TIM_OC3_SetConfig+0xe4>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d003      	beq.n	800daae <TIM_OC3_SetConfig+0x66>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a21      	ldr	r2, [pc, #132]	@ (800db30 <TIM_OC3_SetConfig+0xe8>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d10d      	bne.n	800daca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	021b      	lsls	r3, r3, #8
 800dabc:	697a      	ldr	r2, [r7, #20]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a17      	ldr	r2, [pc, #92]	@ (800db2c <TIM_OC3_SetConfig+0xe4>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d003      	beq.n	800dada <TIM_OC3_SetConfig+0x92>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a16      	ldr	r2, [pc, #88]	@ (800db30 <TIM_OC3_SetConfig+0xe8>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d113      	bne.n	800db02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	011b      	lsls	r3, r3, #4
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	011b      	lsls	r3, r3, #4
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4313      	orrs	r3, r2
 800db00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	621a      	str	r2, [r3, #32]
}
 800db1c:	bf00      	nop
 800db1e:	371c      	adds	r7, #28
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	fffeff8f 	.word	0xfffeff8f
 800db2c:	40010000 	.word	0x40010000
 800db30:	40010400 	.word	0x40010400

0800db34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	69db      	ldr	r3, [r3, #28]
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dbd8 <TIM_OC4_SetConfig+0xa4>)
 800db60:	4013      	ands	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	021b      	lsls	r3, r3, #8
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	4313      	orrs	r3, r2
 800db76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800db7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	031b      	lsls	r3, r3, #12
 800db86:	693a      	ldr	r2, [r7, #16]
 800db88:	4313      	orrs	r3, r2
 800db8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	4a13      	ldr	r2, [pc, #76]	@ (800dbdc <TIM_OC4_SetConfig+0xa8>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d003      	beq.n	800db9c <TIM_OC4_SetConfig+0x68>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	4a12      	ldr	r2, [pc, #72]	@ (800dbe0 <TIM_OC4_SetConfig+0xac>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d109      	bne.n	800dbb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	019b      	lsls	r3, r3, #6
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	4313      	orrs	r3, r2
 800dbae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	693a      	ldr	r2, [r7, #16]
 800dbc8:	621a      	str	r2, [r3, #32]
}
 800dbca:	bf00      	nop
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	feff8fff 	.word	0xfeff8fff
 800dbdc:	40010000 	.word	0x40010000
 800dbe0:	40010400 	.word	0x40010400

0800dbe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	4b1b      	ldr	r3, [pc, #108]	@ (800dc7c <TIM_OC5_SetConfig+0x98>)
 800dc10:	4013      	ands	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dc24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	041b      	lsls	r3, r3, #16
 800dc2c:	693a      	ldr	r2, [r7, #16]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a12      	ldr	r2, [pc, #72]	@ (800dc80 <TIM_OC5_SetConfig+0x9c>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d003      	beq.n	800dc42 <TIM_OC5_SetConfig+0x5e>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a11      	ldr	r2, [pc, #68]	@ (800dc84 <TIM_OC5_SetConfig+0xa0>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d109      	bne.n	800dc56 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	021b      	lsls	r3, r3, #8
 800dc50:	697a      	ldr	r2, [r7, #20]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	68fa      	ldr	r2, [r7, #12]
 800dc60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	693a      	ldr	r2, [r7, #16]
 800dc6e:	621a      	str	r2, [r3, #32]
}
 800dc70:	bf00      	nop
 800dc72:	371c      	adds	r7, #28
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	fffeff8f 	.word	0xfffeff8f
 800dc80:	40010000 	.word	0x40010000
 800dc84:	40010400 	.word	0x40010400

0800dc88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4b1c      	ldr	r3, [pc, #112]	@ (800dd24 <TIM_OC6_SetConfig+0x9c>)
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	021b      	lsls	r3, r3, #8
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dcca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	051b      	lsls	r3, r3, #20
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a13      	ldr	r2, [pc, #76]	@ (800dd28 <TIM_OC6_SetConfig+0xa0>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d003      	beq.n	800dce8 <TIM_OC6_SetConfig+0x60>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a12      	ldr	r2, [pc, #72]	@ (800dd2c <TIM_OC6_SetConfig+0xa4>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d109      	bne.n	800dcfc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dcee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	695b      	ldr	r3, [r3, #20]
 800dcf4:	029b      	lsls	r3, r3, #10
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	685a      	ldr	r2, [r3, #4]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	693a      	ldr	r2, [r7, #16]
 800dd14:	621a      	str	r2, [r3, #32]
}
 800dd16:	bf00      	nop
 800dd18:	371c      	adds	r7, #28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	feff8fff 	.word	0xfeff8fff
 800dd28:	40010000 	.word	0x40010000
 800dd2c:	40010400 	.word	0x40010400

0800dd30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b087      	sub	sp, #28
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6a1b      	ldr	r3, [r3, #32]
 800dd40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	f023 0201 	bic.w	r2, r3, #1
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	699b      	ldr	r3, [r3, #24]
 800dd52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	011b      	lsls	r3, r3, #4
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f023 030a 	bic.w	r3, r3, #10
 800dd6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	621a      	str	r2, [r3, #32]
}
 800dd82:	bf00      	nop
 800dd84:	371c      	adds	r7, #28
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b087      	sub	sp, #28
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	60f8      	str	r0, [r7, #12]
 800dd96:	60b9      	str	r1, [r7, #8]
 800dd98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
 800dda4:	f023 0210 	bic.w	r2, r3, #16
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ddb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	031b      	lsls	r3, r3, #12
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ddca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	011b      	lsls	r3, r3, #4
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	693a      	ldr	r2, [r7, #16]
 800ddda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	697a      	ldr	r2, [r7, #20]
 800dde0:	621a      	str	r2, [r3, #32]
}
 800dde2:	bf00      	nop
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ddee:	b480      	push	{r7}
 800ddf0:	b085      	sub	sp, #20
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
 800ddf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de06:	683a      	ldr	r2, [r7, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	f043 0307 	orr.w	r3, r3, #7
 800de10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	609a      	str	r2, [r3, #8]
}
 800de18:	bf00      	nop
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	607a      	str	r2, [r7, #4]
 800de30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	021a      	lsls	r2, r3, #8
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	431a      	orrs	r2, r3
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	4313      	orrs	r3, r2
 800de4c:	697a      	ldr	r2, [r7, #20]
 800de4e:	4313      	orrs	r3, r2
 800de50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	609a      	str	r2, [r3, #8]
}
 800de58:	bf00      	nop
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de74:	2b01      	cmp	r3, #1
 800de76:	d101      	bne.n	800de7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de78:	2302      	movs	r3, #2
 800de7a:	e06d      	b.n	800df58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2202      	movs	r2, #2
 800de88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a30      	ldr	r2, [pc, #192]	@ (800df64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d004      	beq.n	800deb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a2f      	ldr	r2, [pc, #188]	@ (800df68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d108      	bne.n	800dec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800deb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	4313      	orrs	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a20      	ldr	r2, [pc, #128]	@ (800df64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d022      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deee:	d01d      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a1d      	ldr	r2, [pc, #116]	@ (800df6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d018      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a1c      	ldr	r2, [pc, #112]	@ (800df70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d013      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a1a      	ldr	r2, [pc, #104]	@ (800df74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d00e      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a15      	ldr	r2, [pc, #84]	@ (800df68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d009      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a16      	ldr	r2, [pc, #88]	@ (800df78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d004      	beq.n	800df2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a15      	ldr	r2, [pc, #84]	@ (800df7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d10c      	bne.n	800df46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	4313      	orrs	r3, r2
 800df3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	40010000 	.word	0x40010000
 800df68:	40010400 	.word	0x40010400
 800df6c:	40000400 	.word	0x40000400
 800df70:	40000800 	.word	0x40000800
 800df74:	40000c00 	.word	0x40000c00
 800df78:	40014000 	.word	0x40014000
 800df7c:	40001800 	.word	0x40001800

0800df80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800df8a:	2300      	movs	r3, #0
 800df8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df94:	2b01      	cmp	r3, #1
 800df96:	d101      	bne.n	800df9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800df98:	2302      	movs	r3, #2
 800df9a:	e065      	b.n	800e068 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	695b      	ldr	r3, [r3, #20]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e002:	4313      	orrs	r3, r2
 800e004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	041b      	lsls	r3, r3, #16
 800e012:	4313      	orrs	r3, r2
 800e014:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4a16      	ldr	r2, [pc, #88]	@ (800e074 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d004      	beq.n	800e02a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4a14      	ldr	r2, [pc, #80]	@ (800e078 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d115      	bne.n	800e056 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e034:	051b      	lsls	r3, r3, #20
 800e036:	4313      	orrs	r3, r2
 800e038:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	69db      	ldr	r3, [r3, #28]
 800e044:	4313      	orrs	r3, r2
 800e046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	4313      	orrs	r3, r2
 800e054:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	40010000 	.word	0x40010000
 800e078:	40010400 	.word	0x40010400

0800e07c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d101      	bne.n	800e0ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e040      	b.n	800e14c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d106      	bne.n	800e0e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f6 f82e 	bl	800413c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2224      	movs	r2, #36	@ 0x24
 800e0e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f022 0201 	bic.w	r2, r2, #1
 800e0f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 ffb6 	bl	800f070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 fd4f 	bl	800eba8 <UART_SetConfig>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d101      	bne.n	800e114 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e01b      	b.n	800e14c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	689a      	ldr	r2, [r3, #8]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f042 0201 	orr.w	r2, r2, #1
 800e142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f001 f835 	bl	800f1b4 <UART_CheckIdleState>
 800e14a:	4603      	mov	r3, r0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08a      	sub	sp, #40	@ 0x28
 800e158:	af02      	add	r7, sp, #8
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	4613      	mov	r3, r2
 800e162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e168:	2b20      	cmp	r3, #32
 800e16a:	d177      	bne.n	800e25c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d002      	beq.n	800e178 <HAL_UART_Transmit+0x24>
 800e172:	88fb      	ldrh	r3, [r7, #6]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e070      	b.n	800e25e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2221      	movs	r2, #33	@ 0x21
 800e188:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e18a:	f7f6 ff63 	bl	8005054 <HAL_GetTick>
 800e18e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	88fa      	ldrh	r2, [r7, #6]
 800e194:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	88fa      	ldrh	r2, [r7, #6]
 800e19c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	689b      	ldr	r3, [r3, #8]
 800e1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1a8:	d108      	bne.n	800e1bc <HAL_UART_Transmit+0x68>
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d104      	bne.n	800e1bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	61bb      	str	r3, [r7, #24]
 800e1ba:	e003      	b.n	800e1c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e1c4:	e02f      	b.n	800e226 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	9300      	str	r3, [sp, #0]
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	2180      	movs	r1, #128	@ 0x80
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f001 f846 	bl	800f262 <UART_WaitOnFlagUntilTimeout>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d004      	beq.n	800e1e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	e03b      	b.n	800e25e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10b      	bne.n	800e204 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	881b      	ldrh	r3, [r3, #0]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	3302      	adds	r3, #2
 800e200:	61bb      	str	r3, [r7, #24]
 800e202:	e007      	b.n	800e214 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	3301      	adds	r3, #1
 800e212:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	3b01      	subs	r3, #1
 800e21e:	b29a      	uxth	r2, r3
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1c9      	bne.n	800e1c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2200      	movs	r2, #0
 800e23a:	2140      	movs	r1, #64	@ 0x40
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f001 f810 	bl	800f262 <UART_WaitOnFlagUntilTimeout>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d004      	beq.n	800e252 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2220      	movs	r2, #32
 800e24c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e24e:	2303      	movs	r3, #3
 800e250:	e005      	b.n	800e25e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2220      	movs	r2, #32
 800e256:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e258:	2300      	movs	r3, #0
 800e25a:	e000      	b.n	800e25e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e25c:	2302      	movs	r3, #2
  }
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3720      	adds	r7, #32
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b08a      	sub	sp, #40	@ 0x28
 800e26a:	af02      	add	r7, sp, #8
 800e26c:	60f8      	str	r0, [r7, #12]
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	603b      	str	r3, [r7, #0]
 800e272:	4613      	mov	r3, r2
 800e274:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e27c:	2b20      	cmp	r3, #32
 800e27e:	f040 80b5 	bne.w	800e3ec <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d002      	beq.n	800e28e <HAL_UART_Receive+0x28>
 800e288:	88fb      	ldrh	r3, [r7, #6]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e0ad      	b.n	800e3ee <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2200      	movs	r2, #0
 800e296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2222      	movs	r2, #34	@ 0x22
 800e29e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e2a8:	f7f6 fed4 	bl	8005054 <HAL_GetTick>
 800e2ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	88fa      	ldrh	r2, [r7, #6]
 800e2b2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	88fa      	ldrh	r2, [r7, #6]
 800e2ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2c6:	d10e      	bne.n	800e2e6 <HAL_UART_Receive+0x80>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d105      	bne.n	800e2dc <HAL_UART_Receive+0x76>
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e2d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e2da:	e02d      	b.n	800e338 <HAL_UART_Receive+0xd2>
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	22ff      	movs	r2, #255	@ 0xff
 800e2e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e2e4:	e028      	b.n	800e338 <HAL_UART_Receive+0xd2>
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10d      	bne.n	800e30a <HAL_UART_Receive+0xa4>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d104      	bne.n	800e300 <HAL_UART_Receive+0x9a>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	22ff      	movs	r2, #255	@ 0xff
 800e2fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e2fe:	e01b      	b.n	800e338 <HAL_UART_Receive+0xd2>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	227f      	movs	r2, #127	@ 0x7f
 800e304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e308:	e016      	b.n	800e338 <HAL_UART_Receive+0xd2>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e312:	d10d      	bne.n	800e330 <HAL_UART_Receive+0xca>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d104      	bne.n	800e326 <HAL_UART_Receive+0xc0>
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	227f      	movs	r2, #127	@ 0x7f
 800e320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e324:	e008      	b.n	800e338 <HAL_UART_Receive+0xd2>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	223f      	movs	r2, #63	@ 0x3f
 800e32a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e32e:	e003      	b.n	800e338 <HAL_UART_Receive+0xd2>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2200      	movs	r2, #0
 800e334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e33e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e348:	d108      	bne.n	800e35c <HAL_UART_Receive+0xf6>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e352:	2300      	movs	r3, #0
 800e354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	61bb      	str	r3, [r7, #24]
 800e35a:	e003      	b.n	800e364 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e360:	2300      	movs	r3, #0
 800e362:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e364:	e036      	b.n	800e3d4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	2200      	movs	r2, #0
 800e36e:	2120      	movs	r1, #32
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 ff76 	bl	800f262 <UART_WaitOnFlagUntilTimeout>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2220      	movs	r2, #32
 800e380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e384:	2303      	movs	r3, #3
 800e386:	e032      	b.n	800e3ee <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10c      	bne.n	800e3a8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e394:	b29a      	uxth	r2, r3
 800e396:	8a7b      	ldrh	r3, [r7, #18]
 800e398:	4013      	ands	r3, r2
 800e39a:	b29a      	uxth	r2, r3
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	3302      	adds	r3, #2
 800e3a4:	61bb      	str	r3, [r7, #24]
 800e3a6:	e00c      	b.n	800e3c2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	8a7b      	ldrh	r3, [r7, #18]
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1c2      	bne.n	800e366 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2220      	movs	r2, #32
 800e3e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	e000      	b.n	800e3ee <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e3ec:	2302      	movs	r3, #2
  }
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3720      	adds	r7, #32
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b08a      	sub	sp, #40	@ 0x28
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	60f8      	str	r0, [r7, #12]
 800e3fe:	60b9      	str	r1, [r7, #8]
 800e400:	4613      	mov	r3, r2
 800e402:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e40a:	2b20      	cmp	r3, #32
 800e40c:	d132      	bne.n	800e474 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <HAL_UART_Receive_DMA+0x24>
 800e414:	88fb      	ldrh	r3, [r7, #6]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e02b      	b.n	800e476 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d018      	beq.n	800e464 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	e853 3f00 	ldrex	r3, [r3]
 800e43e:	613b      	str	r3, [r7, #16]
   return(result);
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e446:	627b      	str	r3, [r7, #36]	@ 0x24
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	461a      	mov	r2, r3
 800e44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e450:	623b      	str	r3, [r7, #32]
 800e452:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e454:	69f9      	ldr	r1, [r7, #28]
 800e456:	6a3a      	ldr	r2, [r7, #32]
 800e458:	e841 2300 	strex	r3, r2, [r1]
 800e45c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1e6      	bne.n	800e432 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e464:	88fb      	ldrh	r3, [r7, #6]
 800e466:	461a      	mov	r2, r3
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f000 ff66 	bl	800f33c <UART_Start_Receive_DMA>
 800e470:	4603      	mov	r3, r0
 800e472:	e000      	b.n	800e476 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e474:	2302      	movs	r3, #2
  }
}
 800e476:	4618      	mov	r0, r3
 800e478:	3728      	adds	r7, #40	@ 0x28
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b090      	sub	sp, #64	@ 0x40
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e492:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e49e:	2b80      	cmp	r3, #128	@ 0x80
 800e4a0:	d139      	bne.n	800e516 <HAL_UART_DMAStop+0x98>
 800e4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4a4:	2b21      	cmp	r3, #33	@ 0x21
 800e4a6:	d136      	bne.n	800e516 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	e853 3f00 	ldrex	r3, [r3]
 800e4b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4d0:	e841 2300 	strex	r3, r2, [r1]
 800e4d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1e5      	bne.n	800e4a8 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d015      	beq.n	800e510 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f7 fc35 	bl	8005d58 <HAL_DMA_Abort>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00d      	beq.n	800e510 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7f7 fe49 	bl	8006190 <HAL_DMA_GetError>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b20      	cmp	r3, #32
 800e502:	d105      	bne.n	800e510 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2210      	movs	r2, #16
 800e508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e50c:	2303      	movs	r3, #3
 800e50e:	e044      	b.n	800e59a <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 ffb3 	bl	800f47c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e520:	2b40      	cmp	r3, #64	@ 0x40
 800e522:	d139      	bne.n	800e598 <HAL_UART_DMAStop+0x11a>
 800e524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e526:	2b22      	cmp	r3, #34	@ 0x22
 800e528:	d136      	bne.n	800e598 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3308      	adds	r3, #8
 800e530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	e853 3f00 	ldrex	r3, [r3]
 800e538:	60bb      	str	r3, [r7, #8]
   return(result);
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e540:	633b      	str	r3, [r7, #48]	@ 0x30
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3308      	adds	r3, #8
 800e548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e54a:	61ba      	str	r2, [r7, #24]
 800e54c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54e:	6979      	ldr	r1, [r7, #20]
 800e550:	69ba      	ldr	r2, [r7, #24]
 800e552:	e841 2300 	strex	r3, r2, [r1]
 800e556:	613b      	str	r3, [r7, #16]
   return(result);
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1e5      	bne.n	800e52a <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e562:	2b00      	cmp	r3, #0
 800e564:	d015      	beq.n	800e592 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f7 fbf4 	bl	8005d58 <HAL_DMA_Abort>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00d      	beq.n	800e592 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f7 fe08 	bl	8006190 <HAL_DMA_GetError>
 800e580:	4603      	mov	r3, r0
 800e582:	2b20      	cmp	r3, #32
 800e584:	d105      	bne.n	800e592 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2210      	movs	r2, #16
 800e58a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e58e:	2303      	movs	r3, #3
 800e590:	e003      	b.n	800e59a <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 ff98 	bl	800f4c8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3740      	adds	r7, #64	@ 0x40
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
	...

0800e5a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b0ba      	sub	sp, #232	@ 0xe8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	69db      	ldr	r3, [r3, #28]
 800e5b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e5ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e5ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e5d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d115      	bne.n	800e60c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5e4:	f003 0320 	and.w	r3, r3, #32
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00f      	beq.n	800e60c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5f0:	f003 0320 	and.w	r3, r3, #32
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 82b1 	beq.w	800eb64 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	4798      	blx	r3
      }
      return;
 800e60a:	e2ab      	b.n	800eb64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e60c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e610:	2b00      	cmp	r3, #0
 800e612:	f000 8117 	beq.w	800e844 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e626:	4b85      	ldr	r3, [pc, #532]	@ (800e83c <HAL_UART_IRQHandler+0x298>)
 800e628:	4013      	ands	r3, r2
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 810a 	beq.w	800e844 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d011      	beq.n	800e660 <HAL_UART_IRQHandler+0xbc>
 800e63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00b      	beq.n	800e660 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2201      	movs	r2, #1
 800e64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e656:	f043 0201 	orr.w	r2, r3, #1
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e664:	f003 0302 	and.w	r3, r3, #2
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d011      	beq.n	800e690 <HAL_UART_IRQHandler+0xec>
 800e66c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e670:	f003 0301 	and.w	r3, r3, #1
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00b      	beq.n	800e690 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2202      	movs	r2, #2
 800e67e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e686:	f043 0204 	orr.w	r2, r3, #4
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e694:	f003 0304 	and.w	r3, r3, #4
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d011      	beq.n	800e6c0 <HAL_UART_IRQHandler+0x11c>
 800e69c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00b      	beq.n	800e6c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2204      	movs	r2, #4
 800e6ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6b6:	f043 0202 	orr.w	r2, r3, #2
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6c4:	f003 0308 	and.w	r3, r3, #8
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d017      	beq.n	800e6fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6d0:	f003 0320 	and.w	r3, r3, #32
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d105      	bne.n	800e6e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d00b      	beq.n	800e6fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2208      	movs	r2, #8
 800e6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6f2:	f043 0208 	orr.w	r2, r3, #8
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e704:	2b00      	cmp	r3, #0
 800e706:	d012      	beq.n	800e72e <HAL_UART_IRQHandler+0x18a>
 800e708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e70c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00c      	beq.n	800e72e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e71c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e724:	f043 0220 	orr.w	r2, r3, #32
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 8217 	beq.w	800eb68 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e73e:	f003 0320 	and.w	r3, r3, #32
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00d      	beq.n	800e762 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e74a:	f003 0320 	and.w	r3, r3, #32
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d007      	beq.n	800e762 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e756:	2b00      	cmp	r3, #0
 800e758:	d003      	beq.n	800e762 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e768:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e776:	2b40      	cmp	r3, #64	@ 0x40
 800e778:	d005      	beq.n	800e786 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e77a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e77e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e782:	2b00      	cmp	r3, #0
 800e784:	d04f      	beq.n	800e826 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fe9e 	bl	800f4c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e796:	2b40      	cmp	r3, #64	@ 0x40
 800e798:	d141      	bne.n	800e81e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	3308      	adds	r3, #8
 800e7a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e7a8:	e853 3f00 	ldrex	r3, [r3]
 800e7ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e7b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e7b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e7c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e7ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e7d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e7d6:	e841 2300 	strex	r3, r2, [r1]
 800e7da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e7de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1d9      	bne.n	800e79a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d013      	beq.n	800e816 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7f2:	4a13      	ldr	r2, [pc, #76]	@ (800e840 <HAL_UART_IRQHandler+0x29c>)
 800e7f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f7 fb1c 	bl	8005e38 <HAL_DMA_Abort_IT>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d017      	beq.n	800e836 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800e810:	4610      	mov	r0, r2
 800e812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e814:	e00f      	b.n	800e836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7f2 fe1a 	bl	8001450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e81c:	e00b      	b.n	800e836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7f2 fe16 	bl	8001450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e824:	e007      	b.n	800e836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7f2 fe12 	bl	8001450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800e834:	e198      	b.n	800eb68 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e836:	bf00      	nop
    return;
 800e838:	e196      	b.n	800eb68 <HAL_UART_IRQHandler+0x5c4>
 800e83a:	bf00      	nop
 800e83c:	04000120 	.word	0x04000120
 800e840:	0800f7df 	.word	0x0800f7df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e848:	2b01      	cmp	r3, #1
 800e84a:	f040 8166 	bne.w	800eb1a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e852:	f003 0310 	and.w	r3, r3, #16
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 815f 	beq.w	800eb1a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e860:	f003 0310 	and.w	r3, r3, #16
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 8158 	beq.w	800eb1a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2210      	movs	r2, #16
 800e870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e87c:	2b40      	cmp	r3, #64	@ 0x40
 800e87e:	f040 80d0 	bne.w	800ea22 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e88e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 80ab 	beq.w	800e9ee <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e89e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	f080 80a3 	bcs.w	800e9ee <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8b6:	69db      	ldr	r3, [r3, #28]
 800e8b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8bc:	f000 8086 	beq.w	800e9cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e8cc:	e853 3f00 	ldrex	r3, [r3]
 800e8d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e8d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e8d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e8ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e8ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e8f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e8fa:	e841 2300 	strex	r3, r2, [r1]
 800e8fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1da      	bne.n	800e8c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3308      	adds	r3, #8
 800e910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e914:	e853 3f00 	ldrex	r3, [r3]
 800e918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e91a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e91c:	f023 0301 	bic.w	r3, r3, #1
 800e920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	3308      	adds	r3, #8
 800e92a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e92e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e932:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e93a:	e841 2300 	strex	r3, r2, [r1]
 800e93e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1e1      	bne.n	800e90a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3308      	adds	r3, #8
 800e94c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e950:	e853 3f00 	ldrex	r3, [r3]
 800e954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e95c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	3308      	adds	r3, #8
 800e966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e96a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e96c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e972:	e841 2300 	strex	r3, r2, [r1]
 800e976:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1e3      	bne.n	800e946 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2220      	movs	r2, #32
 800e982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e994:	e853 3f00 	ldrex	r3, [r3]
 800e998:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e99a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e99c:	f023 0310 	bic.w	r3, r3, #16
 800e9a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e9ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e9b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9b6:	e841 2300 	strex	r3, r2, [r1]
 800e9ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e9bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1e4      	bne.n	800e98c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7f7 f9c6 	bl	8005d58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 f8d2 	bl	800eb90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e9ec:	e0be      	b.n	800eb6c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e9f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	f040 80b7 	bne.w	800eb6c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea02:	69db      	ldr	r3, [r3, #28]
 800ea04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea08:	f040 80b0 	bne.w	800eb6c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2202      	movs	r2, #2
 800ea10:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea18:	4619      	mov	r1, r3
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f8b8 	bl	800eb90 <HAL_UARTEx_RxEventCallback>
      return;
 800ea20:	e0a4      	b.n	800eb6c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 8096 	beq.w	800eb70 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ea44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 8091 	beq.w	800eb70 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea56:	e853 3f00 	ldrex	r3, [r3]
 800ea5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ea5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea70:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ea76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea78:	e841 2300 	strex	r3, r2, [r1]
 800ea7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ea7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1e4      	bne.n	800ea4e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3308      	adds	r3, #8
 800ea8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8e:	e853 3f00 	ldrex	r3, [r3]
 800ea92:	623b      	str	r3, [r7, #32]
   return(result);
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	f023 0301 	bic.w	r3, r3, #1
 800ea9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eaa8:	633a      	str	r2, [r7, #48]	@ 0x30
 800eaaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eaae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eab0:	e841 2300 	strex	r3, r2, [r1]
 800eab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1e3      	bne.n	800ea84 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2220      	movs	r2, #32
 800eac0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	e853 3f00 	ldrex	r3, [r3]
 800eadc:	60fb      	str	r3, [r7, #12]
   return(result);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f023 0310 	bic.w	r3, r3, #16
 800eae4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	461a      	mov	r2, r3
 800eaee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eaf2:	61fb      	str	r3, [r7, #28]
 800eaf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf6:	69b9      	ldr	r1, [r7, #24]
 800eaf8:	69fa      	ldr	r2, [r7, #28]
 800eafa:	e841 2300 	strex	r3, r2, [r1]
 800eafe:	617b      	str	r3, [r7, #20]
   return(result);
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1e4      	bne.n	800ead0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2202      	movs	r2, #2
 800eb0a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb10:	4619      	mov	r1, r3
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f83c 	bl	800eb90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb18:	e02a      	b.n	800eb70 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eb1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00e      	beq.n	800eb44 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eb26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d008      	beq.n	800eb44 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d01c      	beq.n	800eb74 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	4798      	blx	r3
    }
    return;
 800eb42:	e017      	b.n	800eb74 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d012      	beq.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
 800eb50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00c      	beq.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fe50 	bl	800f802 <UART_EndTransmit_IT>
    return;
 800eb62:	e008      	b.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
      return;
 800eb64:	bf00      	nop
 800eb66:	e006      	b.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
    return;
 800eb68:	bf00      	nop
 800eb6a:	e004      	b.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
      return;
 800eb6c:	bf00      	nop
 800eb6e:	e002      	b.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
      return;
 800eb70:	bf00      	nop
 800eb72:	e000      	b.n	800eb76 <HAL_UART_IRQHandler+0x5d2>
    return;
 800eb74:	bf00      	nop
  }

}
 800eb76:	37e8      	adds	r7, #232	@ 0xe8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb84:	bf00      	nop
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b088      	sub	sp, #32
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	689a      	ldr	r2, [r3, #8]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	695b      	ldr	r3, [r3, #20]
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	69db      	ldr	r3, [r3, #28]
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	4ba6      	ldr	r3, [pc, #664]	@ (800ee6c <UART_SetConfig+0x2c4>)
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	6812      	ldr	r2, [r2, #0]
 800ebda:	6979      	ldr	r1, [r7, #20]
 800ebdc:	430b      	orrs	r3, r1
 800ebde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	68da      	ldr	r2, [r3, #12]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	430a      	orrs	r2, r1
 800ebf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	699b      	ldr	r3, [r3, #24]
 800ebfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a1b      	ldr	r3, [r3, #32]
 800ec00:	697a      	ldr	r2, [r7, #20]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	430a      	orrs	r2, r1
 800ec18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	4a94      	ldr	r2, [pc, #592]	@ (800ee70 <UART_SetConfig+0x2c8>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d120      	bne.n	800ec66 <UART_SetConfig+0xbe>
 800ec24:	4b93      	ldr	r3, [pc, #588]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800ec26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec2a:	f003 0303 	and.w	r3, r3, #3
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d816      	bhi.n	800ec60 <UART_SetConfig+0xb8>
 800ec32:	a201      	add	r2, pc, #4	@ (adr r2, 800ec38 <UART_SetConfig+0x90>)
 800ec34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec38:	0800ec49 	.word	0x0800ec49
 800ec3c:	0800ec55 	.word	0x0800ec55
 800ec40:	0800ec4f 	.word	0x0800ec4f
 800ec44:	0800ec5b 	.word	0x0800ec5b
 800ec48:	2301      	movs	r3, #1
 800ec4a:	77fb      	strb	r3, [r7, #31]
 800ec4c:	e150      	b.n	800eef0 <UART_SetConfig+0x348>
 800ec4e:	2302      	movs	r3, #2
 800ec50:	77fb      	strb	r3, [r7, #31]
 800ec52:	e14d      	b.n	800eef0 <UART_SetConfig+0x348>
 800ec54:	2304      	movs	r3, #4
 800ec56:	77fb      	strb	r3, [r7, #31]
 800ec58:	e14a      	b.n	800eef0 <UART_SetConfig+0x348>
 800ec5a:	2308      	movs	r3, #8
 800ec5c:	77fb      	strb	r3, [r7, #31]
 800ec5e:	e147      	b.n	800eef0 <UART_SetConfig+0x348>
 800ec60:	2310      	movs	r3, #16
 800ec62:	77fb      	strb	r3, [r7, #31]
 800ec64:	e144      	b.n	800eef0 <UART_SetConfig+0x348>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a83      	ldr	r2, [pc, #524]	@ (800ee78 <UART_SetConfig+0x2d0>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d132      	bne.n	800ecd6 <UART_SetConfig+0x12e>
 800ec70:	4b80      	ldr	r3, [pc, #512]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800ec72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec76:	f003 030c 	and.w	r3, r3, #12
 800ec7a:	2b0c      	cmp	r3, #12
 800ec7c:	d828      	bhi.n	800ecd0 <UART_SetConfig+0x128>
 800ec7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec84 <UART_SetConfig+0xdc>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800ecb9 	.word	0x0800ecb9
 800ec88:	0800ecd1 	.word	0x0800ecd1
 800ec8c:	0800ecd1 	.word	0x0800ecd1
 800ec90:	0800ecd1 	.word	0x0800ecd1
 800ec94:	0800ecc5 	.word	0x0800ecc5
 800ec98:	0800ecd1 	.word	0x0800ecd1
 800ec9c:	0800ecd1 	.word	0x0800ecd1
 800eca0:	0800ecd1 	.word	0x0800ecd1
 800eca4:	0800ecbf 	.word	0x0800ecbf
 800eca8:	0800ecd1 	.word	0x0800ecd1
 800ecac:	0800ecd1 	.word	0x0800ecd1
 800ecb0:	0800ecd1 	.word	0x0800ecd1
 800ecb4:	0800eccb 	.word	0x0800eccb
 800ecb8:	2300      	movs	r3, #0
 800ecba:	77fb      	strb	r3, [r7, #31]
 800ecbc:	e118      	b.n	800eef0 <UART_SetConfig+0x348>
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	77fb      	strb	r3, [r7, #31]
 800ecc2:	e115      	b.n	800eef0 <UART_SetConfig+0x348>
 800ecc4:	2304      	movs	r3, #4
 800ecc6:	77fb      	strb	r3, [r7, #31]
 800ecc8:	e112      	b.n	800eef0 <UART_SetConfig+0x348>
 800ecca:	2308      	movs	r3, #8
 800eccc:	77fb      	strb	r3, [r7, #31]
 800ecce:	e10f      	b.n	800eef0 <UART_SetConfig+0x348>
 800ecd0:	2310      	movs	r3, #16
 800ecd2:	77fb      	strb	r3, [r7, #31]
 800ecd4:	e10c      	b.n	800eef0 <UART_SetConfig+0x348>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4a68      	ldr	r2, [pc, #416]	@ (800ee7c <UART_SetConfig+0x2d4>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d120      	bne.n	800ed22 <UART_SetConfig+0x17a>
 800ece0:	4b64      	ldr	r3, [pc, #400]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800ece2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ece6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ecea:	2b30      	cmp	r3, #48	@ 0x30
 800ecec:	d013      	beq.n	800ed16 <UART_SetConfig+0x16e>
 800ecee:	2b30      	cmp	r3, #48	@ 0x30
 800ecf0:	d814      	bhi.n	800ed1c <UART_SetConfig+0x174>
 800ecf2:	2b20      	cmp	r3, #32
 800ecf4:	d009      	beq.n	800ed0a <UART_SetConfig+0x162>
 800ecf6:	2b20      	cmp	r3, #32
 800ecf8:	d810      	bhi.n	800ed1c <UART_SetConfig+0x174>
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <UART_SetConfig+0x15c>
 800ecfe:	2b10      	cmp	r3, #16
 800ed00:	d006      	beq.n	800ed10 <UART_SetConfig+0x168>
 800ed02:	e00b      	b.n	800ed1c <UART_SetConfig+0x174>
 800ed04:	2300      	movs	r3, #0
 800ed06:	77fb      	strb	r3, [r7, #31]
 800ed08:	e0f2      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	77fb      	strb	r3, [r7, #31]
 800ed0e:	e0ef      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed10:	2304      	movs	r3, #4
 800ed12:	77fb      	strb	r3, [r7, #31]
 800ed14:	e0ec      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed16:	2308      	movs	r3, #8
 800ed18:	77fb      	strb	r3, [r7, #31]
 800ed1a:	e0e9      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	77fb      	strb	r3, [r7, #31]
 800ed20:	e0e6      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a56      	ldr	r2, [pc, #344]	@ (800ee80 <UART_SetConfig+0x2d8>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d120      	bne.n	800ed6e <UART_SetConfig+0x1c6>
 800ed2c:	4b51      	ldr	r3, [pc, #324]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800ed2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ed36:	2bc0      	cmp	r3, #192	@ 0xc0
 800ed38:	d013      	beq.n	800ed62 <UART_SetConfig+0x1ba>
 800ed3a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ed3c:	d814      	bhi.n	800ed68 <UART_SetConfig+0x1c0>
 800ed3e:	2b80      	cmp	r3, #128	@ 0x80
 800ed40:	d009      	beq.n	800ed56 <UART_SetConfig+0x1ae>
 800ed42:	2b80      	cmp	r3, #128	@ 0x80
 800ed44:	d810      	bhi.n	800ed68 <UART_SetConfig+0x1c0>
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <UART_SetConfig+0x1a8>
 800ed4a:	2b40      	cmp	r3, #64	@ 0x40
 800ed4c:	d006      	beq.n	800ed5c <UART_SetConfig+0x1b4>
 800ed4e:	e00b      	b.n	800ed68 <UART_SetConfig+0x1c0>
 800ed50:	2300      	movs	r3, #0
 800ed52:	77fb      	strb	r3, [r7, #31]
 800ed54:	e0cc      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed56:	2302      	movs	r3, #2
 800ed58:	77fb      	strb	r3, [r7, #31]
 800ed5a:	e0c9      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed5c:	2304      	movs	r3, #4
 800ed5e:	77fb      	strb	r3, [r7, #31]
 800ed60:	e0c6      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed62:	2308      	movs	r3, #8
 800ed64:	77fb      	strb	r3, [r7, #31]
 800ed66:	e0c3      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed68:	2310      	movs	r3, #16
 800ed6a:	77fb      	strb	r3, [r7, #31]
 800ed6c:	e0c0      	b.n	800eef0 <UART_SetConfig+0x348>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a44      	ldr	r2, [pc, #272]	@ (800ee84 <UART_SetConfig+0x2dc>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d125      	bne.n	800edc4 <UART_SetConfig+0x21c>
 800ed78:	4b3e      	ldr	r3, [pc, #248]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800ed7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ed82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed86:	d017      	beq.n	800edb8 <UART_SetConfig+0x210>
 800ed88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed8c:	d817      	bhi.n	800edbe <UART_SetConfig+0x216>
 800ed8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed92:	d00b      	beq.n	800edac <UART_SetConfig+0x204>
 800ed94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed98:	d811      	bhi.n	800edbe <UART_SetConfig+0x216>
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <UART_SetConfig+0x1fe>
 800ed9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eda2:	d006      	beq.n	800edb2 <UART_SetConfig+0x20a>
 800eda4:	e00b      	b.n	800edbe <UART_SetConfig+0x216>
 800eda6:	2300      	movs	r3, #0
 800eda8:	77fb      	strb	r3, [r7, #31]
 800edaa:	e0a1      	b.n	800eef0 <UART_SetConfig+0x348>
 800edac:	2302      	movs	r3, #2
 800edae:	77fb      	strb	r3, [r7, #31]
 800edb0:	e09e      	b.n	800eef0 <UART_SetConfig+0x348>
 800edb2:	2304      	movs	r3, #4
 800edb4:	77fb      	strb	r3, [r7, #31]
 800edb6:	e09b      	b.n	800eef0 <UART_SetConfig+0x348>
 800edb8:	2308      	movs	r3, #8
 800edba:	77fb      	strb	r3, [r7, #31]
 800edbc:	e098      	b.n	800eef0 <UART_SetConfig+0x348>
 800edbe:	2310      	movs	r3, #16
 800edc0:	77fb      	strb	r3, [r7, #31]
 800edc2:	e095      	b.n	800eef0 <UART_SetConfig+0x348>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ee88 <UART_SetConfig+0x2e0>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d125      	bne.n	800ee1a <UART_SetConfig+0x272>
 800edce:	4b29      	ldr	r3, [pc, #164]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800edd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800edd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eddc:	d017      	beq.n	800ee0e <UART_SetConfig+0x266>
 800edde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ede2:	d817      	bhi.n	800ee14 <UART_SetConfig+0x26c>
 800ede4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ede8:	d00b      	beq.n	800ee02 <UART_SetConfig+0x25a>
 800edea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800edee:	d811      	bhi.n	800ee14 <UART_SetConfig+0x26c>
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d003      	beq.n	800edfc <UART_SetConfig+0x254>
 800edf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800edf8:	d006      	beq.n	800ee08 <UART_SetConfig+0x260>
 800edfa:	e00b      	b.n	800ee14 <UART_SetConfig+0x26c>
 800edfc:	2301      	movs	r3, #1
 800edfe:	77fb      	strb	r3, [r7, #31]
 800ee00:	e076      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee02:	2302      	movs	r3, #2
 800ee04:	77fb      	strb	r3, [r7, #31]
 800ee06:	e073      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee08:	2304      	movs	r3, #4
 800ee0a:	77fb      	strb	r3, [r7, #31]
 800ee0c:	e070      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee0e:	2308      	movs	r3, #8
 800ee10:	77fb      	strb	r3, [r7, #31]
 800ee12:	e06d      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee14:	2310      	movs	r3, #16
 800ee16:	77fb      	strb	r3, [r7, #31]
 800ee18:	e06a      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ee8c <UART_SetConfig+0x2e4>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d138      	bne.n	800ee96 <UART_SetConfig+0x2ee>
 800ee24:	4b13      	ldr	r3, [pc, #76]	@ (800ee74 <UART_SetConfig+0x2cc>)
 800ee26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ee2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee32:	d017      	beq.n	800ee64 <UART_SetConfig+0x2bc>
 800ee34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ee38:	d82a      	bhi.n	800ee90 <UART_SetConfig+0x2e8>
 800ee3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee3e:	d00b      	beq.n	800ee58 <UART_SetConfig+0x2b0>
 800ee40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee44:	d824      	bhi.n	800ee90 <UART_SetConfig+0x2e8>
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d003      	beq.n	800ee52 <UART_SetConfig+0x2aa>
 800ee4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee4e:	d006      	beq.n	800ee5e <UART_SetConfig+0x2b6>
 800ee50:	e01e      	b.n	800ee90 <UART_SetConfig+0x2e8>
 800ee52:	2300      	movs	r3, #0
 800ee54:	77fb      	strb	r3, [r7, #31]
 800ee56:	e04b      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee58:	2302      	movs	r3, #2
 800ee5a:	77fb      	strb	r3, [r7, #31]
 800ee5c:	e048      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee5e:	2304      	movs	r3, #4
 800ee60:	77fb      	strb	r3, [r7, #31]
 800ee62:	e045      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee64:	2308      	movs	r3, #8
 800ee66:	77fb      	strb	r3, [r7, #31]
 800ee68:	e042      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee6a:	bf00      	nop
 800ee6c:	efff69f3 	.word	0xefff69f3
 800ee70:	40011000 	.word	0x40011000
 800ee74:	40023800 	.word	0x40023800
 800ee78:	40004400 	.word	0x40004400
 800ee7c:	40004800 	.word	0x40004800
 800ee80:	40004c00 	.word	0x40004c00
 800ee84:	40005000 	.word	0x40005000
 800ee88:	40011400 	.word	0x40011400
 800ee8c:	40007800 	.word	0x40007800
 800ee90:	2310      	movs	r3, #16
 800ee92:	77fb      	strb	r3, [r7, #31]
 800ee94:	e02c      	b.n	800eef0 <UART_SetConfig+0x348>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a72      	ldr	r2, [pc, #456]	@ (800f064 <UART_SetConfig+0x4bc>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d125      	bne.n	800eeec <UART_SetConfig+0x344>
 800eea0:	4b71      	ldr	r3, [pc, #452]	@ (800f068 <UART_SetConfig+0x4c0>)
 800eea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eea6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800eeaa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800eeae:	d017      	beq.n	800eee0 <UART_SetConfig+0x338>
 800eeb0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800eeb4:	d817      	bhi.n	800eee6 <UART_SetConfig+0x33e>
 800eeb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eeba:	d00b      	beq.n	800eed4 <UART_SetConfig+0x32c>
 800eebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eec0:	d811      	bhi.n	800eee6 <UART_SetConfig+0x33e>
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d003      	beq.n	800eece <UART_SetConfig+0x326>
 800eec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eeca:	d006      	beq.n	800eeda <UART_SetConfig+0x332>
 800eecc:	e00b      	b.n	800eee6 <UART_SetConfig+0x33e>
 800eece:	2300      	movs	r3, #0
 800eed0:	77fb      	strb	r3, [r7, #31]
 800eed2:	e00d      	b.n	800eef0 <UART_SetConfig+0x348>
 800eed4:	2302      	movs	r3, #2
 800eed6:	77fb      	strb	r3, [r7, #31]
 800eed8:	e00a      	b.n	800eef0 <UART_SetConfig+0x348>
 800eeda:	2304      	movs	r3, #4
 800eedc:	77fb      	strb	r3, [r7, #31]
 800eede:	e007      	b.n	800eef0 <UART_SetConfig+0x348>
 800eee0:	2308      	movs	r3, #8
 800eee2:	77fb      	strb	r3, [r7, #31]
 800eee4:	e004      	b.n	800eef0 <UART_SetConfig+0x348>
 800eee6:	2310      	movs	r3, #16
 800eee8:	77fb      	strb	r3, [r7, #31]
 800eeea:	e001      	b.n	800eef0 <UART_SetConfig+0x348>
 800eeec:	2310      	movs	r3, #16
 800eeee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	69db      	ldr	r3, [r3, #28]
 800eef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eef8:	d15b      	bne.n	800efb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800eefa:	7ffb      	ldrb	r3, [r7, #31]
 800eefc:	2b08      	cmp	r3, #8
 800eefe:	d828      	bhi.n	800ef52 <UART_SetConfig+0x3aa>
 800ef00:	a201      	add	r2, pc, #4	@ (adr r2, 800ef08 <UART_SetConfig+0x360>)
 800ef02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef06:	bf00      	nop
 800ef08:	0800ef2d 	.word	0x0800ef2d
 800ef0c:	0800ef35 	.word	0x0800ef35
 800ef10:	0800ef3d 	.word	0x0800ef3d
 800ef14:	0800ef53 	.word	0x0800ef53
 800ef18:	0800ef43 	.word	0x0800ef43
 800ef1c:	0800ef53 	.word	0x0800ef53
 800ef20:	0800ef53 	.word	0x0800ef53
 800ef24:	0800ef53 	.word	0x0800ef53
 800ef28:	0800ef4b 	.word	0x0800ef4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef2c:	f7fb fc1a 	bl	800a764 <HAL_RCC_GetPCLK1Freq>
 800ef30:	61b8      	str	r0, [r7, #24]
        break;
 800ef32:	e013      	b.n	800ef5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef34:	f7fb fc2a 	bl	800a78c <HAL_RCC_GetPCLK2Freq>
 800ef38:	61b8      	str	r0, [r7, #24]
        break;
 800ef3a:	e00f      	b.n	800ef5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef3c:	4b4b      	ldr	r3, [pc, #300]	@ (800f06c <UART_SetConfig+0x4c4>)
 800ef3e:	61bb      	str	r3, [r7, #24]
        break;
 800ef40:	e00c      	b.n	800ef5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef42:	f7fb fb3d 	bl	800a5c0 <HAL_RCC_GetSysClockFreq>
 800ef46:	61b8      	str	r0, [r7, #24]
        break;
 800ef48:	e008      	b.n	800ef5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef4e:	61bb      	str	r3, [r7, #24]
        break;
 800ef50:	e004      	b.n	800ef5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ef52:	2300      	movs	r3, #0
 800ef54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	77bb      	strb	r3, [r7, #30]
        break;
 800ef5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d074      	beq.n	800f04c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	005a      	lsls	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	085b      	lsrs	r3, r3, #1
 800ef6c:	441a      	add	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	2b0f      	cmp	r3, #15
 800ef7c:	d916      	bls.n	800efac <UART_SetConfig+0x404>
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef84:	d212      	bcs.n	800efac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	f023 030f 	bic.w	r3, r3, #15
 800ef8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	085b      	lsrs	r3, r3, #1
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	f003 0307 	and.w	r3, r3, #7
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	89fb      	ldrh	r3, [r7, #14]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	89fa      	ldrh	r2, [r7, #14]
 800efa8:	60da      	str	r2, [r3, #12]
 800efaa:	e04f      	b.n	800f04c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800efac:	2301      	movs	r3, #1
 800efae:	77bb      	strb	r3, [r7, #30]
 800efb0:	e04c      	b.n	800f04c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800efb2:	7ffb      	ldrb	r3, [r7, #31]
 800efb4:	2b08      	cmp	r3, #8
 800efb6:	d828      	bhi.n	800f00a <UART_SetConfig+0x462>
 800efb8:	a201      	add	r2, pc, #4	@ (adr r2, 800efc0 <UART_SetConfig+0x418>)
 800efba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbe:	bf00      	nop
 800efc0:	0800efe5 	.word	0x0800efe5
 800efc4:	0800efed 	.word	0x0800efed
 800efc8:	0800eff5 	.word	0x0800eff5
 800efcc:	0800f00b 	.word	0x0800f00b
 800efd0:	0800effb 	.word	0x0800effb
 800efd4:	0800f00b 	.word	0x0800f00b
 800efd8:	0800f00b 	.word	0x0800f00b
 800efdc:	0800f00b 	.word	0x0800f00b
 800efe0:	0800f003 	.word	0x0800f003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efe4:	f7fb fbbe 	bl	800a764 <HAL_RCC_GetPCLK1Freq>
 800efe8:	61b8      	str	r0, [r7, #24]
        break;
 800efea:	e013      	b.n	800f014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efec:	f7fb fbce 	bl	800a78c <HAL_RCC_GetPCLK2Freq>
 800eff0:	61b8      	str	r0, [r7, #24]
        break;
 800eff2:	e00f      	b.n	800f014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eff4:	4b1d      	ldr	r3, [pc, #116]	@ (800f06c <UART_SetConfig+0x4c4>)
 800eff6:	61bb      	str	r3, [r7, #24]
        break;
 800eff8:	e00c      	b.n	800f014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800effa:	f7fb fae1 	bl	800a5c0 <HAL_RCC_GetSysClockFreq>
 800effe:	61b8      	str	r0, [r7, #24]
        break;
 800f000:	e008      	b.n	800f014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f006:	61bb      	str	r3, [r7, #24]
        break;
 800f008:	e004      	b.n	800f014 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	77bb      	strb	r3, [r7, #30]
        break;
 800f012:	bf00      	nop
    }

    if (pclk != 0U)
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d018      	beq.n	800f04c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	085a      	lsrs	r2, r3, #1
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	441a      	add	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	fbb2 f3f3 	udiv	r3, r2, r3
 800f02c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	2b0f      	cmp	r3, #15
 800f032:	d909      	bls.n	800f048 <UART_SetConfig+0x4a0>
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f03a:	d205      	bcs.n	800f048 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	b29a      	uxth	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	60da      	str	r2, [r3, #12]
 800f046:	e001      	b.n	800f04c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f058:	7fbb      	ldrb	r3, [r7, #30]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3720      	adds	r7, #32
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	40007c00 	.word	0x40007c00
 800f068:	40023800 	.word	0x40023800
 800f06c:	00f42400 	.word	0x00f42400

0800f070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f07c:	f003 0308 	and.w	r3, r3, #8
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	430a      	orrs	r2, r1
 800f098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00a      	beq.n	800f0bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	430a      	orrs	r2, r1
 800f0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c0:	f003 0302 	and.w	r3, r3, #2
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00a      	beq.n	800f0de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0e2:	f003 0304 	and.w	r3, r3, #4
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00a      	beq.n	800f100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	430a      	orrs	r2, r1
 800f0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f104:	f003 0310 	and.w	r3, r3, #16
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00a      	beq.n	800f122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	430a      	orrs	r2, r1
 800f120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f126:	f003 0320 	and.w	r3, r3, #32
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d00a      	beq.n	800f144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	430a      	orrs	r2, r1
 800f142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d01a      	beq.n	800f186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	430a      	orrs	r2, r1
 800f164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f16a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f16e:	d10a      	bne.n	800f186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	430a      	orrs	r2, r1
 800f184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00a      	beq.n	800f1a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	430a      	orrs	r2, r1
 800f1a6:	605a      	str	r2, [r3, #4]
  }
}
 800f1a8:	bf00      	nop
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b08c      	sub	sp, #48	@ 0x30
 800f1b8:	af02      	add	r7, sp, #8
 800f1ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1c4:	f7f5 ff46 	bl	8005054 <HAL_GetTick>
 800f1c8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f003 0308 	and.w	r3, r3, #8
 800f1d4:	2b08      	cmp	r3, #8
 800f1d6:	d12e      	bne.n	800f236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f1dc:	9300      	str	r3, [sp, #0]
 800f1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f83b 	bl	800f262 <UART_WaitOnFlagUntilTimeout>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d021      	beq.n	800f236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	e853 3f00 	ldrex	r3, [r3]
 800f1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f206:	623b      	str	r3, [r7, #32]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	461a      	mov	r2, r3
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	61fb      	str	r3, [r7, #28]
 800f212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f214:	69b9      	ldr	r1, [r7, #24]
 800f216:	69fa      	ldr	r2, [r7, #28]
 800f218:	e841 2300 	strex	r3, r2, [r1]
 800f21c:	617b      	str	r3, [r7, #20]
   return(result);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1e6      	bne.n	800f1f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2220      	movs	r2, #32
 800f228:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f232:	2303      	movs	r3, #3
 800f234:	e011      	b.n	800f25a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2220      	movs	r2, #32
 800f23a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2220      	movs	r2, #32
 800f240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3728      	adds	r7, #40	@ 0x28
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b084      	sub	sp, #16
 800f266:	af00      	add	r7, sp, #0
 800f268:	60f8      	str	r0, [r7, #12]
 800f26a:	60b9      	str	r1, [r7, #8]
 800f26c:	603b      	str	r3, [r7, #0]
 800f26e:	4613      	mov	r3, r2
 800f270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f272:	e04f      	b.n	800f314 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27a:	d04b      	beq.n	800f314 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f27c:	f7f5 feea 	bl	8005054 <HAL_GetTick>
 800f280:	4602      	mov	r2, r0
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	69ba      	ldr	r2, [r7, #24]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d302      	bcc.n	800f292 <UART_WaitOnFlagUntilTimeout+0x30>
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d101      	bne.n	800f296 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f292:	2303      	movs	r3, #3
 800f294:	e04e      	b.n	800f334 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f003 0304 	and.w	r3, r3, #4
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d037      	beq.n	800f314 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	2b80      	cmp	r3, #128	@ 0x80
 800f2a8:	d034      	beq.n	800f314 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b40      	cmp	r3, #64	@ 0x40
 800f2ae:	d031      	beq.n	800f314 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	69db      	ldr	r3, [r3, #28]
 800f2b6:	f003 0308 	and.w	r3, r3, #8
 800f2ba:	2b08      	cmp	r3, #8
 800f2bc:	d110      	bne.n	800f2e0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2208      	movs	r2, #8
 800f2c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 f8fe 	bl	800f4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2208      	movs	r2, #8
 800f2d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e029      	b.n	800f334 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	69db      	ldr	r3, [r3, #28]
 800f2e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2ee:	d111      	bne.n	800f314 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f2f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f000 f8e4 	bl	800f4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2220      	movs	r2, #32
 800f304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f310:	2303      	movs	r3, #3
 800f312:	e00f      	b.n	800f334 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	69da      	ldr	r2, [r3, #28]
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	4013      	ands	r3, r2
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	429a      	cmp	r2, r3
 800f322:	bf0c      	ite	eq
 800f324:	2301      	moveq	r3, #1
 800f326:	2300      	movne	r3, #0
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	461a      	mov	r2, r3
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d0a0      	beq.n	800f274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3710      	adds	r7, #16
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b096      	sub	sp, #88	@ 0x58
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	4613      	mov	r3, r2
 800f348:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	88fa      	ldrh	r2, [r7, #6]
 800f354:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2222      	movs	r2, #34	@ 0x22
 800f364:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d028      	beq.n	800f3c2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f374:	4a3e      	ldr	r2, [pc, #248]	@ (800f470 <UART_Start_Receive_DMA+0x134>)
 800f376:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f37c:	4a3d      	ldr	r2, [pc, #244]	@ (800f474 <UART_Start_Receive_DMA+0x138>)
 800f37e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f384:	4a3c      	ldr	r2, [pc, #240]	@ (800f478 <UART_Start_Receive_DMA+0x13c>)
 800f386:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f38c:	2200      	movs	r2, #0
 800f38e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3324      	adds	r3, #36	@ 0x24
 800f39a:	4619      	mov	r1, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	88fb      	ldrh	r3, [r7, #6]
 800f3a4:	f7f6 fc78 	bl	8005c98 <HAL_DMA_Start_IT>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d009      	beq.n	800f3c2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2210      	movs	r2, #16
 800f3b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2220      	movs	r2, #32
 800f3ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	e051      	b.n	800f466 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d018      	beq.n	800f3fc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d2:	e853 3f00 	ldrex	r3, [r3]
 800f3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3de:	657b      	str	r3, [r7, #84]	@ 0x54
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3ea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3f0:	e841 2300 	strex	r3, r2, [r1]
 800f3f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1e6      	bne.n	800f3ca <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3308      	adds	r3, #8
 800f402:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f406:	e853 3f00 	ldrex	r3, [r3]
 800f40a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40e:	f043 0301 	orr.w	r3, r3, #1
 800f412:	653b      	str	r3, [r7, #80]	@ 0x50
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	3308      	adds	r3, #8
 800f41a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f41c:	637a      	str	r2, [r7, #52]	@ 0x34
 800f41e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f420:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f424:	e841 2300 	strex	r3, r2, [r1]
 800f428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d1e5      	bne.n	800f3fc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3308      	adds	r3, #8
 800f436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	e853 3f00 	ldrex	r3, [r3]
 800f43e:	613b      	str	r3, [r7, #16]
   return(result);
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	3308      	adds	r3, #8
 800f44e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f450:	623a      	str	r2, [r7, #32]
 800f452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f454:	69f9      	ldr	r1, [r7, #28]
 800f456:	6a3a      	ldr	r2, [r7, #32]
 800f458:	e841 2300 	strex	r3, r2, [r1]
 800f45c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e5      	bne.n	800f430 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	3758      	adds	r7, #88	@ 0x58
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	0800f591 	.word	0x0800f591
 800f474:	0800f6ef 	.word	0x0800f6ef
 800f478:	0800f761 	.word	0x0800f761

0800f47c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b089      	sub	sp, #36	@ 0x24
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	e853 3f00 	ldrex	r3, [r3]
 800f490:	60bb      	str	r3, [r7, #8]
   return(result);
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f498:	61fb      	str	r3, [r7, #28]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	61bb      	str	r3, [r7, #24]
 800f4a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a6:	6979      	ldr	r1, [r7, #20]
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	e841 2300 	strex	r3, r2, [r1]
 800f4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d1e6      	bne.n	800f484 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2220      	movs	r2, #32
 800f4ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f4bc:	bf00      	nop
 800f4be:	3724      	adds	r7, #36	@ 0x24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b095      	sub	sp, #84	@ 0x54
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4d8:	e853 3f00 	ldrex	r3, [r3]
 800f4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4f6:	e841 2300 	strex	r3, r2, [r1]
 800f4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1e6      	bne.n	800f4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3308      	adds	r3, #8
 800f508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	e853 3f00 	ldrex	r3, [r3]
 800f510:	61fb      	str	r3, [r7, #28]
   return(result);
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	f023 0301 	bic.w	r3, r3, #1
 800f518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	3308      	adds	r3, #8
 800f520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f52a:	e841 2300 	strex	r3, r2, [r1]
 800f52e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1e5      	bne.n	800f502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d118      	bne.n	800f570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	e853 3f00 	ldrex	r3, [r3]
 800f54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f023 0310 	bic.w	r3, r3, #16
 800f552:	647b      	str	r3, [r7, #68]	@ 0x44
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f55c:	61bb      	str	r3, [r7, #24]
 800f55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f560:	6979      	ldr	r1, [r7, #20]
 800f562:	69ba      	ldr	r2, [r7, #24]
 800f564:	e841 2300 	strex	r3, r2, [r1]
 800f568:	613b      	str	r3, [r7, #16]
   return(result);
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1e6      	bne.n	800f53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2220      	movs	r2, #32
 800f574:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f584:	bf00      	nop
 800f586:	3754      	adds	r7, #84	@ 0x54
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b09c      	sub	sp, #112	@ 0x70
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f59c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	69db      	ldr	r3, [r3, #28]
 800f5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5a6:	d071      	beq.n	800f68c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f5c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800f5d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f5d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e6      	bne.n	800f5b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ec:	e853 3f00 	ldrex	r3, [r3]
 800f5f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f4:	f023 0301 	bic.w	r3, r3, #1
 800f5f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800f5fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3308      	adds	r3, #8
 800f600:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f602:	643a      	str	r2, [r7, #64]	@ 0x40
 800f604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f60a:	e841 2300 	strex	r3, r2, [r1]
 800f60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1e5      	bne.n	800f5e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3308      	adds	r3, #8
 800f61c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	e853 3f00 	ldrex	r3, [r3]
 800f624:	61fb      	str	r3, [r7, #28]
   return(result);
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f62c:	663b      	str	r3, [r7, #96]	@ 0x60
 800f62e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3308      	adds	r3, #8
 800f634:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f638:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f63c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f63e:	e841 2300 	strex	r3, r2, [r1]
 800f642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1e5      	bne.n	800f616 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f64c:	2220      	movs	r2, #32
 800f64e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f656:	2b01      	cmp	r3, #1
 800f658:	d118      	bne.n	800f68c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f65a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	e853 3f00 	ldrex	r3, [r3]
 800f666:	60bb      	str	r3, [r7, #8]
   return(result);
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	f023 0310 	bic.w	r3, r3, #16
 800f66e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	461a      	mov	r2, r3
 800f676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f678:	61bb      	str	r3, [r7, #24]
 800f67a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67c:	6979      	ldr	r1, [r7, #20]
 800f67e:	69ba      	ldr	r2, [r7, #24]
 800f680:	e841 2300 	strex	r3, r2, [r1]
 800f684:	613b      	str	r3, [r7, #16]
   return(result);
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1e6      	bne.n	800f65a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f68c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f68e:	2200      	movs	r2, #0
 800f690:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f696:	2b01      	cmp	r3, #1
 800f698:	d122      	bne.n	800f6e0 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f69c:	2200      	movs	r2, #0
 800f69e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f6ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f6b2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d204      	bcs.n	800f6c4 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f6ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6bc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f6c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f6c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f6ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f6da:	f7ff fa59 	bl	800eb90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6de:	e002      	b.n	800f6e6 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800f6e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f6e2:	f7f1 fe7b 	bl	80013dc <HAL_UART_RxCpltCallback>
}
 800f6e6:	bf00      	nop
 800f6e8:	3770      	adds	r7, #112	@ 0x70
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b084      	sub	sp, #16
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2201      	movs	r2, #1
 800f700:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f706:	2b01      	cmp	r3, #1
 800f708:	d123      	bne.n	800f752 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f710:	085b      	lsrs	r3, r3, #1
 800f712:	b29a      	uxth	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f728:	897a      	ldrh	r2, [r7, #10]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d803      	bhi.n	800f736 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	897a      	ldrh	r2, [r7, #10]
 800f732:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f742:	b29b      	uxth	r3, r3
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	4619      	mov	r1, r3
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f7ff fa20 	bl	800eb90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f750:	e002      	b.n	800f758 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7f1 fe66 	bl	8001424 <HAL_UART_RxHalfCpltCallback>
}
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f76c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f772:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f77a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f786:	2b80      	cmp	r3, #128	@ 0x80
 800f788:	d109      	bne.n	800f79e <UART_DMAError+0x3e>
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	2b21      	cmp	r3, #33	@ 0x21
 800f78e:	d106      	bne.n	800f79e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	2200      	movs	r2, #0
 800f794:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800f798:	6978      	ldr	r0, [r7, #20]
 800f79a:	f7ff fe6f 	bl	800f47c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7a8:	2b40      	cmp	r3, #64	@ 0x40
 800f7aa:	d109      	bne.n	800f7c0 <UART_DMAError+0x60>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b22      	cmp	r3, #34	@ 0x22
 800f7b0:	d106      	bne.n	800f7c0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800f7ba:	6978      	ldr	r0, [r7, #20]
 800f7bc:	f7ff fe84 	bl	800f4c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f7c6:	f043 0210 	orr.w	r2, r3, #16
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f7d0:	6978      	ldr	r0, [r7, #20]
 800f7d2:	f7f1 fe3d 	bl	8001450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7d6:	bf00      	nop
 800f7d8:	3718      	adds	r7, #24
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b084      	sub	sp, #16
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7f1 fe2b 	bl	8001450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7fa:	bf00      	nop
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b088      	sub	sp, #32
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	e853 3f00 	ldrex	r3, [r3]
 800f816:	60bb      	str	r3, [r7, #8]
   return(result);
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f81e:	61fb      	str	r3, [r7, #28]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	461a      	mov	r2, r3
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	61bb      	str	r3, [r7, #24]
 800f82a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82c:	6979      	ldr	r1, [r7, #20]
 800f82e:	69ba      	ldr	r2, [r7, #24]
 800f830:	e841 2300 	strex	r3, r2, [r1]
 800f834:	613b      	str	r3, [r7, #16]
   return(result);
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1e6      	bne.n	800f80a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2220      	movs	r2, #32
 800f840:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff f997 	bl	800eb7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f84e:	bf00      	nop
 800f850:	3720      	adds	r7, #32
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
	...

0800f858 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d121      	bne.n	800f8ae <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	4b27      	ldr	r3, [pc, #156]	@ (800f90c <FMC_SDRAM_Init+0xb4>)
 800f870:	4013      	ands	r3, r2
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	6851      	ldr	r1, [r2, #4]
 800f876:	683a      	ldr	r2, [r7, #0]
 800f878:	6892      	ldr	r2, [r2, #8]
 800f87a:	4311      	orrs	r1, r2
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	68d2      	ldr	r2, [r2, #12]
 800f880:	4311      	orrs	r1, r2
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	6912      	ldr	r2, [r2, #16]
 800f886:	4311      	orrs	r1, r2
 800f888:	683a      	ldr	r2, [r7, #0]
 800f88a:	6952      	ldr	r2, [r2, #20]
 800f88c:	4311      	orrs	r1, r2
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	6992      	ldr	r2, [r2, #24]
 800f892:	4311      	orrs	r1, r2
 800f894:	683a      	ldr	r2, [r7, #0]
 800f896:	69d2      	ldr	r2, [r2, #28]
 800f898:	4311      	orrs	r1, r2
 800f89a:	683a      	ldr	r2, [r7, #0]
 800f89c:	6a12      	ldr	r2, [r2, #32]
 800f89e:	4311      	orrs	r1, r2
 800f8a0:	683a      	ldr	r2, [r7, #0]
 800f8a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f8a4:	430a      	orrs	r2, r1
 800f8a6:	431a      	orrs	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	e026      	b.n	800f8fc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	69d9      	ldr	r1, [r3, #28]
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	4319      	orrs	r1, r3
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c4:	430b      	orrs	r3, r1
 800f8c6:	431a      	orrs	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800f90c <FMC_SDRAM_Init+0xb4>)
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	683a      	ldr	r2, [r7, #0]
 800f8d6:	6851      	ldr	r1, [r2, #4]
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	6892      	ldr	r2, [r2, #8]
 800f8dc:	4311      	orrs	r1, r2
 800f8de:	683a      	ldr	r2, [r7, #0]
 800f8e0:	68d2      	ldr	r2, [r2, #12]
 800f8e2:	4311      	orrs	r1, r2
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	6912      	ldr	r2, [r2, #16]
 800f8e8:	4311      	orrs	r1, r2
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	6952      	ldr	r2, [r2, #20]
 800f8ee:	4311      	orrs	r1, r2
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	6992      	ldr	r2, [r2, #24]
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	431a      	orrs	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	ffff8000 	.word	0xffff8000

0800f910 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d128      	bne.n	800f974 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	1e59      	subs	r1, r3, #1
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	3b01      	subs	r3, #1
 800f936:	011b      	lsls	r3, r3, #4
 800f938:	4319      	orrs	r1, r3
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	3b01      	subs	r3, #1
 800f940:	021b      	lsls	r3, r3, #8
 800f942:	4319      	orrs	r1, r3
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	3b01      	subs	r3, #1
 800f94a:	031b      	lsls	r3, r3, #12
 800f94c:	4319      	orrs	r1, r3
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	691b      	ldr	r3, [r3, #16]
 800f952:	3b01      	subs	r3, #1
 800f954:	041b      	lsls	r3, r3, #16
 800f956:	4319      	orrs	r1, r3
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	695b      	ldr	r3, [r3, #20]
 800f95c:	3b01      	subs	r3, #1
 800f95e:	051b      	lsls	r3, r3, #20
 800f960:	4319      	orrs	r1, r3
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	699b      	ldr	r3, [r3, #24]
 800f966:	3b01      	subs	r3, #1
 800f968:	061b      	lsls	r3, r3, #24
 800f96a:	430b      	orrs	r3, r1
 800f96c:	431a      	orrs	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	609a      	str	r2, [r3, #8]
 800f972:	e02d      	b.n	800f9d0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	689a      	ldr	r2, [r3, #8]
 800f978:	4b19      	ldr	r3, [pc, #100]	@ (800f9e0 <FMC_SDRAM_Timing_Init+0xd0>)
 800f97a:	4013      	ands	r3, r2
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	68d2      	ldr	r2, [r2, #12]
 800f980:	3a01      	subs	r2, #1
 800f982:	0311      	lsls	r1, r2, #12
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	6952      	ldr	r2, [r2, #20]
 800f988:	3a01      	subs	r2, #1
 800f98a:	0512      	lsls	r2, r2, #20
 800f98c:	430a      	orrs	r2, r1
 800f98e:	431a      	orrs	r2, r3
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	1e59      	subs	r1, r3, #1
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	011b      	lsls	r3, r3, #4
 800f9aa:	4319      	orrs	r1, r3
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	021b      	lsls	r3, r3, #8
 800f9b4:	4319      	orrs	r1, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	041b      	lsls	r3, r3, #16
 800f9be:	4319      	orrs	r1, r3
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	699b      	ldr	r3, [r3, #24]
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	061b      	lsls	r3, r3, #24
 800f9c8:	430b      	orrs	r3, r1
 800f9ca:	431a      	orrs	r2, r3
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f9d0:	2300      	movs	r3, #0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	ff0f0fff 	.word	0xff0f0fff

0800f9e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	b480      	push	{r7}
 800f9e8:	b085      	sub	sp, #20
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
 800f9ee:	f107 001c 	add.w	r0, r7, #28
 800f9f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f9fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f9fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f9fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fa02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800fa06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fa08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fa0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fa0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	4b07      	ldr	r3, [pc, #28]	@ (800fa38 <SDMMC_Init+0x54>)
 800fa1c:	4013      	ands	r3, r2
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	431a      	orrs	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3714      	adds	r7, #20
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	b004      	add	sp, #16
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	ffff8100 	.word	0xffff8100

0800fa3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2203      	movs	r2, #3
 800fa48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f003 0303 	and.w	r3, r3, #3
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fa92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fa98:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fa9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	68da      	ldr	r2, [r3, #12]
 800faaa:	4b06      	ldr	r3, [pc, #24]	@ (800fac4 <SDMMC_SendCommand+0x50>)
 800faac:	4013      	ands	r3, r2
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	431a      	orrs	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fab6:	2300      	movs	r3, #0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3714      	adds	r7, #20
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	fffff000 	.word	0xfffff000

0800fac8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	691b      	ldr	r3, [r3, #16]
 800fad4:	b2db      	uxtb	r3, r3
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	370c      	adds	r7, #12
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fae2:	b480      	push	{r7}
 800fae4:	b085      	sub	sp, #20
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	3314      	adds	r3, #20
 800faf0:	461a      	mov	r2, r3
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	4413      	add	r3, r2
 800faf6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
}  
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	685a      	ldr	r2, [r3, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fb34:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fb3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb46:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	431a      	orrs	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fb52:	2300      	movs	r3, #0

}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b088      	sub	sp, #32
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fb6e:	2310      	movs	r3, #16
 800fb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb72:	2340      	movs	r3, #64	@ 0x40
 800fb74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb76:	2300      	movs	r3, #0
 800fb78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb80:	f107 0308 	add.w	r3, r7, #8
 800fb84:	4619      	mov	r1, r3
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ff74 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fb8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb90:	2110      	movs	r1, #16
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f9d6 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fb98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb9a:	69fb      	ldr	r3, [r7, #28]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3720      	adds	r7, #32
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b088      	sub	sp, #32
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fbb2:	2311      	movs	r3, #17
 800fbb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbb6:	2340      	movs	r3, #64	@ 0x40
 800fbb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbc4:	f107 0308 	add.w	r3, r7, #8
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7ff ff52 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fbd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbd4:	2111      	movs	r1, #17
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 f9b4 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fbdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbde:	69fb      	ldr	r3, [r7, #28]
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3720      	adds	r7, #32
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b088      	sub	sp, #32
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fbf6:	2312      	movs	r3, #18
 800fbf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbfa:	2340      	movs	r3, #64	@ 0x40
 800fbfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc08:	f107 0308 	add.w	r3, r7, #8
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7ff ff30 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fc14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc18:	2112      	movs	r1, #18
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 f992 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fc20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc22:	69fb      	ldr	r3, [r7, #28]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3720      	adds	r7, #32
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b088      	sub	sp, #32
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fc3a:	2318      	movs	r3, #24
 800fc3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc3e:	2340      	movs	r3, #64	@ 0x40
 800fc40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc42:	2300      	movs	r3, #0
 800fc44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc4c:	f107 0308 	add.w	r3, r7, #8
 800fc50:	4619      	mov	r1, r3
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7ff ff0e 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fc58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc5c:	2118      	movs	r1, #24
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 f970 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fc64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc66:	69fb      	ldr	r3, [r7, #28]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3720      	adds	r7, #32
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b088      	sub	sp, #32
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fc7e:	2319      	movs	r3, #25
 800fc80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc82:	2340      	movs	r3, #64	@ 0x40
 800fc84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc86:	2300      	movs	r3, #0
 800fc88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc90:	f107 0308 	add.w	r3, r7, #8
 800fc94:	4619      	mov	r1, r3
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff feec 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fc9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fca0:	2119      	movs	r1, #25
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f94e 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcaa:	69fb      	ldr	r3, [r7, #28]
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3720      	adds	r7, #32
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b088      	sub	sp, #32
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fcc0:	230c      	movs	r3, #12
 800fcc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcc4:	2340      	movs	r3, #64	@ 0x40
 800fcc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcd2:	f107 0308 	add.w	r3, r7, #8
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7ff fecb 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fcde:	4a05      	ldr	r2, [pc, #20]	@ (800fcf4 <SDMMC_CmdStopTransfer+0x40>)
 800fce0:	210c      	movs	r1, #12
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 f92e 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcea:	69fb      	ldr	r3, [r7, #28]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3720      	adds	r7, #32
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	05f5e100 	.word	0x05f5e100

0800fcf8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08a      	sub	sp, #40	@ 0x28
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fd08:	2307      	movs	r3, #7
 800fd0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd0c:	2340      	movs	r3, #64	@ 0x40
 800fd0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd10:	2300      	movs	r3, #0
 800fd12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd18:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	4619      	mov	r1, r3
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f7ff fea7 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fd26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd2a:	2107      	movs	r1, #7
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 f909 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fd32:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800fd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3728      	adds	r7, #40	@ 0x28
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b088      	sub	sp, #32
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fd46:	2300      	movs	r3, #0
 800fd48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd52:	2300      	movs	r3, #0
 800fd54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd5c:	f107 0308 	add.w	r3, r7, #8
 800fd60:	4619      	mov	r1, r3
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7ff fe86 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fb23 	bl	80103b4 <SDMMC_GetCmdError>
 800fd6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd70:	69fb      	ldr	r3, [r7, #28]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3720      	adds	r7, #32
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b088      	sub	sp, #32
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fd82:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fd86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fd88:	2308      	movs	r3, #8
 800fd8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd8c:	2340      	movs	r3, #64	@ 0x40
 800fd8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd90:	2300      	movs	r3, #0
 800fd92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd9a:	f107 0308 	add.w	r3, r7, #8
 800fd9e:	4619      	mov	r1, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7ff fe67 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fab6 	bl	8010318 <SDMMC_GetCmdResp7>
 800fdac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdae:	69fb      	ldr	r3, [r7, #28]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3720      	adds	r7, #32
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b088      	sub	sp, #32
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fdc6:	2337      	movs	r3, #55	@ 0x37
 800fdc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdca:	2340      	movs	r3, #64	@ 0x40
 800fdcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdd8:	f107 0308 	add.w	r3, r7, #8
 800fddc:	4619      	mov	r1, r3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f7ff fe48 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fde4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fde8:	2137      	movs	r1, #55	@ 0x37
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f8aa 	bl	800ff44 <SDMMC_GetCmdResp1>
 800fdf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdf2:	69fb      	ldr	r3, [r7, #28]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3720      	adds	r7, #32
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b088      	sub	sp, #32
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	4b0d      	ldr	r3, [pc, #52]	@ (800fe40 <SDMMC_CmdAppOperCommand+0x44>)
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fe0e:	2329      	movs	r3, #41	@ 0x29
 800fe10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe12:	2340      	movs	r3, #64	@ 0x40
 800fe14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe16:	2300      	movs	r3, #0
 800fe18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe20:	f107 0308 	add.w	r3, r7, #8
 800fe24:	4619      	mov	r1, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff fe24 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 f9bf 	bl	80101b0 <SDMMC_GetCmdResp3>
 800fe32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe34:	69fb      	ldr	r3, [r7, #28]
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3720      	adds	r7, #32
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	80100000 	.word	0x80100000

0800fe44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b088      	sub	sp, #32
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fe50:	2302      	movs	r3, #2
 800fe52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe54:	23c0      	movs	r3, #192	@ 0xc0
 800fe56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe62:	f107 0308 	add.w	r3, r7, #8
 800fe66:	4619      	mov	r1, r3
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff fe03 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f956 	bl	8010120 <SDMMC_GetCmdResp2>
 800fe74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe76:	69fb      	ldr	r3, [r7, #28]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3720      	adds	r7, #32
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fe8e:	2309      	movs	r3, #9
 800fe90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe92:	23c0      	movs	r3, #192	@ 0xc0
 800fe94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe96:	2300      	movs	r3, #0
 800fe98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fea0:	f107 0308 	add.w	r3, r7, #8
 800fea4:	4619      	mov	r1, r3
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff fde4 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f937 	bl	8010120 <SDMMC_GetCmdResp2>
 800feb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feb4:	69fb      	ldr	r3, [r7, #28]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3720      	adds	r7, #32
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b088      	sub	sp, #32
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fec8:	2300      	movs	r3, #0
 800feca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fecc:	2303      	movs	r3, #3
 800fece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fed0:	2340      	movs	r3, #64	@ 0x40
 800fed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fed4:	2300      	movs	r3, #0
 800fed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fedc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fede:	f107 0308 	add.w	r3, r7, #8
 800fee2:	4619      	mov	r1, r3
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff fdc5 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800feea:	683a      	ldr	r2, [r7, #0]
 800feec:	2103      	movs	r1, #3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 f99c 	bl	801022c <SDMMC_GetCmdResp6>
 800fef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fef6:	69fb      	ldr	r3, [r7, #28]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3720      	adds	r7, #32
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b088      	sub	sp, #32
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff0e:	230d      	movs	r3, #13
 800ff10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff12:	2340      	movs	r3, #64	@ 0x40
 800ff14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff16:	2300      	movs	r3, #0
 800ff18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff20:	f107 0308 	add.w	r3, r7, #8
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f7ff fda4 	bl	800fa74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ff2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff30:	210d      	movs	r1, #13
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f806 	bl	800ff44 <SDMMC_GetCmdResp1>
 800ff38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff3a:	69fb      	ldr	r3, [r7, #28]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3720      	adds	r7, #32
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b088      	sub	sp, #32
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	607a      	str	r2, [r7, #4]
 800ff50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ff52:	4b70      	ldr	r3, [pc, #448]	@ (8010114 <SDMMC_GetCmdResp1+0x1d0>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a70      	ldr	r2, [pc, #448]	@ (8010118 <SDMMC_GetCmdResp1+0x1d4>)
 800ff58:	fba2 2303 	umull	r2, r3, r2, r3
 800ff5c:	0a5a      	lsrs	r2, r3, #9
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	fb02 f303 	mul.w	r3, r2, r3
 800ff64:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	1e5a      	subs	r2, r3, #1
 800ff6a:	61fa      	str	r2, [r7, #28]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d102      	bne.n	800ff76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ff74:	e0c9      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff7a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0ef      	beq.n	800ff66 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1ea      	bne.n	800ff66 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff94:	f003 0304 	and.w	r3, r3, #4
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d004      	beq.n	800ffa6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2204      	movs	r2, #4
 800ffa0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ffa2:	2304      	movs	r3, #4
 800ffa4:	e0b1      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffaa:	f003 0301 	and.w	r3, r3, #1
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d004      	beq.n	800ffbc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e0a6      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	22c5      	movs	r2, #197	@ 0xc5
 800ffc0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f7ff fd80 	bl	800fac8 <SDMMC_GetCommandResponse>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	7afb      	ldrb	r3, [r7, #11]
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d001      	beq.n	800ffd6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e099      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	f7ff fd82 	bl	800fae2 <SDMMC_GetResponse>
 800ffde:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	4b4e      	ldr	r3, [pc, #312]	@ (801011c <SDMMC_GetCmdResp1+0x1d8>)
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d101      	bne.n	800ffee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ffea:	2300      	movs	r3, #0
 800ffec:	e08d      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	da02      	bge.n	800fffa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fff4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fff8:	e087      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010000:	2b00      	cmp	r3, #0
 8010002:	d001      	beq.n	8010008 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010004:	2340      	movs	r3, #64	@ 0x40
 8010006:	e080      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801000e:	2b00      	cmp	r3, #0
 8010010:	d001      	beq.n	8010016 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010012:	2380      	movs	r3, #128	@ 0x80
 8010014:	e079      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010024:	e071      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801002c:	2b00      	cmp	r3, #0
 801002e:	d002      	beq.n	8010036 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010034:	e069      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801003c:	2b00      	cmp	r3, #0
 801003e:	d002      	beq.n	8010046 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010044:	e061      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801004c:	2b00      	cmp	r3, #0
 801004e:	d002      	beq.n	8010056 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010050:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010054:	e059      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801005c:	2b00      	cmp	r3, #0
 801005e:	d002      	beq.n	8010066 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010064:	e051      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010074:	e049      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801007c:	2b00      	cmp	r3, #0
 801007e:	d002      	beq.n	8010086 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010080:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010084:	e041      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010094:	e039      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80100a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80100a4:	e031      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80100b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80100b4:	e029      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d002      	beq.n	80100c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80100c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80100c4:	e021      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80100d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80100d4:	e019      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d002      	beq.n	80100e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80100e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80100e4:	e011      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d002      	beq.n	80100f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80100f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80100f4:	e009      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f003 0308 	and.w	r3, r3, #8
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010100:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010104:	e001      	b.n	801010a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801010a:	4618      	mov	r0, r3
 801010c:	3720      	adds	r7, #32
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	20000000 	.word	0x20000000
 8010118:	10624dd3 	.word	0x10624dd3
 801011c:	fdffe008 	.word	0xfdffe008

08010120 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010128:	4b1f      	ldr	r3, [pc, #124]	@ (80101a8 <SDMMC_GetCmdResp2+0x88>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a1f      	ldr	r2, [pc, #124]	@ (80101ac <SDMMC_GetCmdResp2+0x8c>)
 801012e:	fba2 2303 	umull	r2, r3, r2, r3
 8010132:	0a5b      	lsrs	r3, r3, #9
 8010134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010138:	fb02 f303 	mul.w	r3, r2, r3
 801013c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	1e5a      	subs	r2, r3, #1
 8010142:	60fa      	str	r2, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d102      	bne.n	801014e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010148:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801014c:	e026      	b.n	801019c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010152:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801015a:	2b00      	cmp	r3, #0
 801015c:	d0ef      	beq.n	801013e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1ea      	bne.n	801013e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801016c:	f003 0304 	and.w	r3, r3, #4
 8010170:	2b00      	cmp	r3, #0
 8010172:	d004      	beq.n	801017e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2204      	movs	r2, #4
 8010178:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801017a:	2304      	movs	r3, #4
 801017c:	e00e      	b.n	801019c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010182:	f003 0301 	and.w	r3, r3, #1
 8010186:	2b00      	cmp	r3, #0
 8010188:	d004      	beq.n	8010194 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2201      	movs	r2, #1
 801018e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010190:	2301      	movs	r3, #1
 8010192:	e003      	b.n	801019c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	22c5      	movs	r2, #197	@ 0xc5
 8010198:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3714      	adds	r7, #20
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr
 80101a8:	20000000 	.word	0x20000000
 80101ac:	10624dd3 	.word	0x10624dd3

080101b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80101b8:	4b1a      	ldr	r3, [pc, #104]	@ (8010224 <SDMMC_GetCmdResp3+0x74>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a1a      	ldr	r2, [pc, #104]	@ (8010228 <SDMMC_GetCmdResp3+0x78>)
 80101be:	fba2 2303 	umull	r2, r3, r2, r3
 80101c2:	0a5b      	lsrs	r3, r3, #9
 80101c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101c8:	fb02 f303 	mul.w	r3, r2, r3
 80101cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	1e5a      	subs	r2, r3, #1
 80101d2:	60fa      	str	r2, [r7, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d102      	bne.n	80101de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101dc:	e01b      	b.n	8010216 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0ef      	beq.n	80101ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1ea      	bne.n	80101ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101fc:	f003 0304 	and.w	r3, r3, #4
 8010200:	2b00      	cmp	r3, #0
 8010202:	d004      	beq.n	801020e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2204      	movs	r2, #4
 8010208:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801020a:	2304      	movs	r3, #4
 801020c:	e003      	b.n	8010216 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	22c5      	movs	r2, #197	@ 0xc5
 8010212:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	20000000 	.word	0x20000000
 8010228:	10624dd3 	.word	0x10624dd3

0801022c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b088      	sub	sp, #32
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	460b      	mov	r3, r1
 8010236:	607a      	str	r2, [r7, #4]
 8010238:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801023a:	4b35      	ldr	r3, [pc, #212]	@ (8010310 <SDMMC_GetCmdResp6+0xe4>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4a35      	ldr	r2, [pc, #212]	@ (8010314 <SDMMC_GetCmdResp6+0xe8>)
 8010240:	fba2 2303 	umull	r2, r3, r2, r3
 8010244:	0a5b      	lsrs	r3, r3, #9
 8010246:	f241 3288 	movw	r2, #5000	@ 0x1388
 801024a:	fb02 f303 	mul.w	r3, r2, r3
 801024e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	1e5a      	subs	r2, r3, #1
 8010254:	61fa      	str	r2, [r7, #28]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d102      	bne.n	8010260 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801025a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801025e:	e052      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010264:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801026c:	2b00      	cmp	r3, #0
 801026e:	d0ef      	beq.n	8010250 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010276:	2b00      	cmp	r3, #0
 8010278:	d1ea      	bne.n	8010250 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801027e:	f003 0304 	and.w	r3, r3, #4
 8010282:	2b00      	cmp	r3, #0
 8010284:	d004      	beq.n	8010290 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2204      	movs	r2, #4
 801028a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801028c:	2304      	movs	r3, #4
 801028e:	e03a      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010294:	f003 0301 	and.w	r3, r3, #1
 8010298:	2b00      	cmp	r3, #0
 801029a:	d004      	beq.n	80102a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2201      	movs	r2, #1
 80102a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102a2:	2301      	movs	r3, #1
 80102a4:	e02f      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f7ff fc0e 	bl	800fac8 <SDMMC_GetCommandResponse>
 80102ac:	4603      	mov	r3, r0
 80102ae:	461a      	mov	r2, r3
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d001      	beq.n	80102ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e025      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	22c5      	movs	r2, #197	@ 0xc5
 80102be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80102c0:	2100      	movs	r1, #0
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f7ff fc0d 	bl	800fae2 <SDMMC_GetResponse>
 80102c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d106      	bne.n	80102e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	0c1b      	lsrs	r3, r3, #16
 80102d8:	b29a      	uxth	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80102de:	2300      	movs	r3, #0
 80102e0:	e011      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80102ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80102f0:	e009      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d002      	beq.n	8010302 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80102fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010300:	e001      	b.n	8010306 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010306:	4618      	mov	r0, r3
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	20000000 	.word	0x20000000
 8010314:	10624dd3 	.word	0x10624dd3

08010318 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010320:	4b22      	ldr	r3, [pc, #136]	@ (80103ac <SDMMC_GetCmdResp7+0x94>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a22      	ldr	r2, [pc, #136]	@ (80103b0 <SDMMC_GetCmdResp7+0x98>)
 8010326:	fba2 2303 	umull	r2, r3, r2, r3
 801032a:	0a5b      	lsrs	r3, r3, #9
 801032c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010330:	fb02 f303 	mul.w	r3, r2, r3
 8010334:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	1e5a      	subs	r2, r3, #1
 801033a:	60fa      	str	r2, [r7, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d102      	bne.n	8010346 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010344:	e02c      	b.n	80103a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801034a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010352:	2b00      	cmp	r3, #0
 8010354:	d0ef      	beq.n	8010336 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1ea      	bne.n	8010336 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010364:	f003 0304 	and.w	r3, r3, #4
 8010368:	2b00      	cmp	r3, #0
 801036a:	d004      	beq.n	8010376 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2204      	movs	r2, #4
 8010370:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010372:	2304      	movs	r3, #4
 8010374:	e014      	b.n	80103a0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801037a:	f003 0301 	and.w	r3, r3, #1
 801037e:	2b00      	cmp	r3, #0
 8010380:	d004      	beq.n	801038c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2201      	movs	r2, #1
 8010386:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010388:	2301      	movs	r3, #1
 801038a:	e009      	b.n	80103a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2240      	movs	r2, #64	@ 0x40
 801039c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801039e:	2300      	movs	r3, #0
  
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr
 80103ac:	20000000 	.word	0x20000000
 80103b0:	10624dd3 	.word	0x10624dd3

080103b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b085      	sub	sp, #20
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80103bc:	4b11      	ldr	r3, [pc, #68]	@ (8010404 <SDMMC_GetCmdError+0x50>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a11      	ldr	r2, [pc, #68]	@ (8010408 <SDMMC_GetCmdError+0x54>)
 80103c2:	fba2 2303 	umull	r2, r3, r2, r3
 80103c6:	0a5b      	lsrs	r3, r3, #9
 80103c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103cc:	fb02 f303 	mul.w	r3, r2, r3
 80103d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	1e5a      	subs	r2, r3, #1
 80103d6:	60fa      	str	r2, [r7, #12]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d102      	bne.n	80103e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103e0:	e009      	b.n	80103f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d0f1      	beq.n	80103d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	22c5      	movs	r2, #197	@ 0xc5
 80103f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80103f4:	2300      	movs	r3, #0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3714      	adds	r7, #20
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	20000000 	.word	0x20000000
 8010408:	10624dd3 	.word	0x10624dd3

0801040c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801040c:	b084      	sub	sp, #16
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	f107 001c 	add.w	r0, r7, #28
 801041a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801041e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010422:	2b01      	cmp	r3, #1
 8010424:	d121      	bne.n	801046a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801042a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	68da      	ldr	r2, [r3, #12]
 8010436:	4b21      	ldr	r3, [pc, #132]	@ (80104bc <USB_CoreInit+0xb0>)
 8010438:	4013      	ands	r3, r2
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801044a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801044e:	2b01      	cmp	r3, #1
 8010450:	d105      	bne.n	801045e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 f9d4 	bl	801080c <USB_CoreReset>
 8010464:	4603      	mov	r3, r0
 8010466:	73fb      	strb	r3, [r7, #15]
 8010468:	e010      	b.n	801048c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f9c8 	bl	801080c <USB_CoreReset>
 801047c:	4603      	mov	r3, r0
 801047e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010484:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 801048c:	7fbb      	ldrb	r3, [r7, #30]
 801048e:	2b01      	cmp	r3, #1
 8010490:	d10b      	bne.n	80104aa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	f043 0206 	orr.w	r2, r3, #6
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	f043 0220 	orr.w	r2, r3, #32
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80104aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3710      	adds	r7, #16
 80104b0:	46bd      	mov	sp, r7
 80104b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104b6:	b004      	add	sp, #16
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop
 80104bc:	ffbdffbf 	.word	0xffbdffbf

080104c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	f043 0201 	orr.w	r2, r3, #1
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	370c      	adds	r7, #12
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80104e2:	b480      	push	{r7}
 80104e4:	b083      	sub	sp, #12
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	f023 0201 	bic.w	r2, r3, #1
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010510:	2300      	movs	r3, #0
 8010512:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010520:	78fb      	ldrb	r3, [r7, #3]
 8010522:	2b01      	cmp	r3, #1
 8010524:	d115      	bne.n	8010552 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010532:	200a      	movs	r0, #10
 8010534:	f7f4 fd9a 	bl	800506c <HAL_Delay>
      ms += 10U;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	330a      	adds	r3, #10
 801053c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 f956 	bl	80107f0 <USB_GetMode>
 8010544:	4603      	mov	r3, r0
 8010546:	2b01      	cmp	r3, #1
 8010548:	d01e      	beq.n	8010588 <USB_SetCurrentMode+0x84>
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2bc7      	cmp	r3, #199	@ 0xc7
 801054e:	d9f0      	bls.n	8010532 <USB_SetCurrentMode+0x2e>
 8010550:	e01a      	b.n	8010588 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010552:	78fb      	ldrb	r3, [r7, #3]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d115      	bne.n	8010584 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010564:	200a      	movs	r0, #10
 8010566:	f7f4 fd81 	bl	800506c <HAL_Delay>
      ms += 10U;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	330a      	adds	r3, #10
 801056e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f93d 	bl	80107f0 <USB_GetMode>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d005      	beq.n	8010588 <USB_SetCurrentMode+0x84>
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2bc7      	cmp	r3, #199	@ 0xc7
 8010580:	d9f0      	bls.n	8010564 <USB_SetCurrentMode+0x60>
 8010582:	e001      	b.n	8010588 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010584:	2301      	movs	r3, #1
 8010586:	e005      	b.n	8010594 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2bc8      	cmp	r3, #200	@ 0xc8
 801058c:	d101      	bne.n	8010592 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801058e:	2301      	movs	r3, #1
 8010590:	e000      	b.n	8010594 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	3301      	adds	r3, #1
 80105ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80105b6:	d901      	bls.n	80105bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80105b8:	2303      	movs	r3, #3
 80105ba:	e01b      	b.n	80105f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	daf2      	bge.n	80105aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80105c4:	2300      	movs	r3, #0
 80105c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	019b      	lsls	r3, r3, #6
 80105cc:	f043 0220 	orr.w	r2, r3, #32
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	3301      	adds	r3, #1
 80105d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80105e0:	d901      	bls.n	80105e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80105e2:	2303      	movs	r3, #3
 80105e4:	e006      	b.n	80105f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	f003 0320 	and.w	r3, r3, #32
 80105ee:	2b20      	cmp	r3, #32
 80105f0:	d0f0      	beq.n	80105d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3714      	adds	r7, #20
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010608:	2300      	movs	r3, #0
 801060a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3301      	adds	r3, #1
 8010610:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010618:	d901      	bls.n	801061e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801061a:	2303      	movs	r3, #3
 801061c:	e018      	b.n	8010650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	691b      	ldr	r3, [r3, #16]
 8010622:	2b00      	cmp	r3, #0
 8010624:	daf2      	bge.n	801060c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010626:	2300      	movs	r3, #0
 8010628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2210      	movs	r2, #16
 801062e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3301      	adds	r3, #1
 8010634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801063c:	d901      	bls.n	8010642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801063e:	2303      	movs	r3, #3
 8010640:	e006      	b.n	8010650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	f003 0310 	and.w	r3, r3, #16
 801064a:	2b10      	cmp	r3, #16
 801064c:	d0f0      	beq.n	8010630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3714      	adds	r7, #20
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801065c:	b480      	push	{r7}
 801065e:	b089      	sub	sp, #36	@ 0x24
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	4611      	mov	r1, r2
 8010668:	461a      	mov	r2, r3
 801066a:	460b      	mov	r3, r1
 801066c:	71fb      	strb	r3, [r7, #7]
 801066e:	4613      	mov	r3, r2
 8010670:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801067a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801067e:	2b00      	cmp	r3, #0
 8010680:	d123      	bne.n	80106ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010682:	88bb      	ldrh	r3, [r7, #4]
 8010684:	3303      	adds	r3, #3
 8010686:	089b      	lsrs	r3, r3, #2
 8010688:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801068a:	2300      	movs	r3, #0
 801068c:	61bb      	str	r3, [r7, #24]
 801068e:	e018      	b.n	80106c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010690:	79fb      	ldrb	r3, [r7, #7]
 8010692:	031a      	lsls	r2, r3, #12
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	4413      	add	r3, r2
 8010698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801069c:	461a      	mov	r2, r3
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	3301      	adds	r3, #1
 80106a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	3301      	adds	r3, #1
 80106ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	3301      	adds	r3, #1
 80106b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	3301      	adds	r3, #1
 80106ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	3301      	adds	r3, #1
 80106c0:	61bb      	str	r3, [r7, #24]
 80106c2:	69ba      	ldr	r2, [r7, #24]
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d3e2      	bcc.n	8010690 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3724      	adds	r7, #36	@ 0x24
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80106d8:	b480      	push	{r7}
 80106da:	b08b      	sub	sp, #44	@ 0x2c
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	4613      	mov	r3, r2
 80106e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80106ee:	88fb      	ldrh	r3, [r7, #6]
 80106f0:	089b      	lsrs	r3, r3, #2
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80106f6:	88fb      	ldrh	r3, [r7, #6]
 80106f8:	f003 0303 	and.w	r3, r3, #3
 80106fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80106fe:	2300      	movs	r3, #0
 8010700:	623b      	str	r3, [r7, #32]
 8010702:	e014      	b.n	801072e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801070e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010712:	3301      	adds	r3, #1
 8010714:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010718:	3301      	adds	r3, #1
 801071a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071e:	3301      	adds	r3, #1
 8010720:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010724:	3301      	adds	r3, #1
 8010726:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	3301      	adds	r3, #1
 801072c:	623b      	str	r3, [r7, #32]
 801072e:	6a3a      	ldr	r2, [r7, #32]
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	429a      	cmp	r2, r3
 8010734:	d3e6      	bcc.n	8010704 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010736:	8bfb      	ldrh	r3, [r7, #30]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d01e      	beq.n	801077a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801073c:	2300      	movs	r3, #0
 801073e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010746:	461a      	mov	r2, r3
 8010748:	f107 0310 	add.w	r3, r7, #16
 801074c:	6812      	ldr	r2, [r2, #0]
 801074e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010750:	693a      	ldr	r2, [r7, #16]
 8010752:	6a3b      	ldr	r3, [r7, #32]
 8010754:	b2db      	uxtb	r3, r3
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	fa22 f303 	lsr.w	r3, r2, r3
 801075c:	b2da      	uxtb	r2, r3
 801075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010760:	701a      	strb	r2, [r3, #0]
      i++;
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	3301      	adds	r3, #1
 8010766:	623b      	str	r3, [r7, #32]
      pDest++;
 8010768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076a:	3301      	adds	r3, #1
 801076c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801076e:	8bfb      	ldrh	r3, [r7, #30]
 8010770:	3b01      	subs	r3, #1
 8010772:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010774:	8bfb      	ldrh	r3, [r7, #30]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1ea      	bne.n	8010750 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801077a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801077c:	4618      	mov	r0, r3
 801077e:	372c      	adds	r7, #44	@ 0x2c
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	695b      	ldr	r3, [r3, #20]
 8010794:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	4013      	ands	r3, r2
 801079e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80107a0:	68fb      	ldr	r3, [r7, #12]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3714      	adds	r7, #20
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr

080107ae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80107ae:	b480      	push	{r7}
 80107b0:	b085      	sub	sp, #20
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	460b      	mov	r3, r1
 80107b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80107be:	78fb      	ldrb	r3, [r7, #3]
 80107c0:	015a      	lsls	r2, r3, #5
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	4413      	add	r3, r2
 80107c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80107ca:	689b      	ldr	r3, [r3, #8]
 80107cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80107ce:	78fb      	ldrb	r3, [r7, #3]
 80107d0:	015a      	lsls	r2, r3, #5
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	4413      	add	r3, r2
 80107d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	4013      	ands	r3, r2
 80107e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80107e2:	68bb      	ldr	r3, [r7, #8]
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3714      	adds	r7, #20
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	695b      	ldr	r3, [r3, #20]
 80107fc:	f003 0301 	and.w	r3, r3, #1
}
 8010800:	4618      	mov	r0, r3
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010814:	2300      	movs	r3, #0
 8010816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	3301      	adds	r3, #1
 801081c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010824:	d901      	bls.n	801082a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010826:	2303      	movs	r3, #3
 8010828:	e022      	b.n	8010870 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	2b00      	cmp	r3, #0
 8010830:	daf2      	bge.n	8010818 <USB_CoreReset+0xc>

  count = 10U;
 8010832:	230a      	movs	r3, #10
 8010834:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8010836:	e002      	b.n	801083e <USB_CoreReset+0x32>
  {
    count--;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	3b01      	subs	r3, #1
 801083c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1f9      	bne.n	8010838 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	f043 0201 	orr.w	r2, r3, #1
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	3301      	adds	r3, #1
 8010854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801085c:	d901      	bls.n	8010862 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 801085e:	2303      	movs	r3, #3
 8010860:	e006      	b.n	8010870 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	2b01      	cmp	r3, #1
 801086c:	d0f0      	beq.n	8010850 <USB_CoreReset+0x44>

  return HAL_OK;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801087c:	b084      	sub	sp, #16
 801087e:	b580      	push	{r7, lr}
 8010880:	b086      	sub	sp, #24
 8010882:	af00      	add	r7, sp, #0
 8010884:	6078      	str	r0, [r7, #4]
 8010886:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801088a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801088e:	2300      	movs	r3, #0
 8010890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801089c:	461a      	mov	r2, r3
 801089e:	2300      	movs	r3, #0
 80108a0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d119      	bne.n	80108ee <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80108ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d10a      	bne.n	80108d8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	68fa      	ldr	r2, [r7, #12]
 80108cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108d0:	f043 0304 	orr.w	r3, r3, #4
 80108d4:	6013      	str	r3, [r2, #0]
 80108d6:	e014      	b.n	8010902 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108e6:	f023 0304 	bic.w	r3, r3, #4
 80108ea:	6013      	str	r3, [r2, #0]
 80108ec:	e009      	b.n	8010902 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108fc:	f023 0304 	bic.w	r3, r3, #4
 8010900:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010902:	2110      	movs	r1, #16
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff fe49 	bl	801059c <USB_FlushTxFifo>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d001      	beq.n	8010914 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8010910:	2301      	movs	r3, #1
 8010912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7ff fe73 	bl	8010600 <USB_FlushRxFifo>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8010920:	2301      	movs	r3, #1
 8010922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8010924:	2300      	movs	r3, #0
 8010926:	613b      	str	r3, [r7, #16]
 8010928:	e015      	b.n	8010956 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	015a      	lsls	r2, r3, #5
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	4413      	add	r3, r2
 8010932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010936:	461a      	mov	r2, r3
 8010938:	f04f 33ff 	mov.w	r3, #4294967295
 801093c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	015a      	lsls	r2, r3, #5
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	4413      	add	r3, r2
 8010946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801094a:	461a      	mov	r2, r3
 801094c:	2300      	movs	r3, #0
 801094e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	3301      	adds	r3, #1
 8010954:	613b      	str	r3, [r7, #16]
 8010956:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801095a:	461a      	mov	r2, r3
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	4293      	cmp	r3, r2
 8010960:	d3e3      	bcc.n	801092a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2200      	movs	r2, #0
 8010966:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f04f 32ff 	mov.w	r2, #4294967295
 801096e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4a18      	ldr	r2, [pc, #96]	@ (80109d4 <USB_HostInit+0x158>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d10b      	bne.n	8010990 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801097e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a15      	ldr	r2, [pc, #84]	@ (80109d8 <USB_HostInit+0x15c>)
 8010984:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4a14      	ldr	r2, [pc, #80]	@ (80109dc <USB_HostInit+0x160>)
 801098a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 801098e:	e009      	b.n	80109a4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2280      	movs	r2, #128	@ 0x80
 8010994:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4a11      	ldr	r2, [pc, #68]	@ (80109e0 <USB_HostInit+0x164>)
 801099a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4a11      	ldr	r2, [pc, #68]	@ (80109e4 <USB_HostInit+0x168>)
 80109a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80109a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d105      	bne.n	80109b8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	699b      	ldr	r3, [r3, #24]
 80109b0:	f043 0210 	orr.w	r2, r3, #16
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	699a      	ldr	r2, [r3, #24]
 80109bc:	4b0a      	ldr	r3, [pc, #40]	@ (80109e8 <USB_HostInit+0x16c>)
 80109be:	4313      	orrs	r3, r2
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80109c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109d0:	b004      	add	sp, #16
 80109d2:	4770      	bx	lr
 80109d4:	40040000 	.word	0x40040000
 80109d8:	01000200 	.word	0x01000200
 80109dc:	00e00300 	.word	0x00e00300
 80109e0:	00600080 	.word	0x00600080
 80109e4:	004000e0 	.word	0x004000e0
 80109e8:	a3200008 	.word	0xa3200008

080109ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	460b      	mov	r3, r1
 80109f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010a0a:	f023 0303 	bic.w	r3, r3, #3
 8010a0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a16:	681a      	ldr	r2, [r3, #0]
 8010a18:	78fb      	ldrb	r3, [r7, #3]
 8010a1a:	f003 0303 	and.w	r3, r3, #3
 8010a1e:	68f9      	ldr	r1, [r7, #12]
 8010a20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010a24:	4313      	orrs	r3, r2
 8010a26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010a28:	78fb      	ldrb	r3, [r7, #3]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	d107      	bne.n	8010a3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a34:	461a      	mov	r2, r3
 8010a36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010a3a:	6053      	str	r3, [r2, #4]
 8010a3c:	e00c      	b.n	8010a58 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010a3e:	78fb      	ldrb	r3, [r7, #3]
 8010a40:	2b02      	cmp	r3, #2
 8010a42:	d107      	bne.n	8010a54 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010a50:	6053      	str	r3, [r2, #4]
 8010a52:	e001      	b.n	8010a58 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010a54:	2301      	movs	r3, #1
 8010a56:	e000      	b.n	8010a5a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3714      	adds	r7, #20
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b084      	sub	sp, #16
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010a72:	2300      	movs	r3, #0
 8010a74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010a86:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	68fa      	ldr	r2, [r7, #12]
 8010a8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a94:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010a96:	2064      	movs	r0, #100	@ 0x64
 8010a98:	f7f4 fae8 	bl	800506c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010aa8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010aaa:	200a      	movs	r0, #10
 8010aac:	f7f4 fade 	bl	800506c <HAL_Delay>

  return HAL_OK;
 8010ab0:	2300      	movs	r3, #0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b085      	sub	sp, #20
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010aca:	2300      	movs	r3, #0
 8010acc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010ade:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d109      	bne.n	8010afe <USB_DriveVbus+0x44>
 8010aea:	78fb      	ldrb	r3, [r7, #3]
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d106      	bne.n	8010afe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010af8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010afc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b08:	d109      	bne.n	8010b1e <USB_DriveVbus+0x64>
 8010b0a:	78fb      	ldrb	r3, [r7, #3]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d106      	bne.n	8010b1e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010b1c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3714      	adds	r7, #20
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	0c5b      	lsrs	r3, r3, #17
 8010b4a:	f003 0303 	and.w	r3, r3, #3
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3714      	adds	r7, #20
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr

08010b5a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8010b5a:	b480      	push	{r7}
 8010b5c:	b085      	sub	sp, #20
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b6c:	689b      	ldr	r3, [r3, #8]
 8010b6e:	b29b      	uxth	r3, r3
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3714      	adds	r7, #20
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	4608      	mov	r0, r1
 8010b86:	4611      	mov	r1, r2
 8010b88:	461a      	mov	r2, r3
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	70fb      	strb	r3, [r7, #3]
 8010b8e:	460b      	mov	r3, r1
 8010b90:	70bb      	strb	r3, [r7, #2]
 8010b92:	4613      	mov	r3, r2
 8010b94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010b96:	2300      	movs	r3, #0
 8010b98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8010b9e:	78fb      	ldrb	r3, [r7, #3]
 8010ba0:	015a      	lsls	r2, r3, #5
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010baa:	461a      	mov	r2, r3
 8010bac:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010bb6:	2b03      	cmp	r3, #3
 8010bb8:	d87c      	bhi.n	8010cb4 <USB_HC_Init+0x138>
 8010bba:	a201      	add	r2, pc, #4	@ (adr r2, 8010bc0 <USB_HC_Init+0x44>)
 8010bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc0:	08010bd1 	.word	0x08010bd1
 8010bc4:	08010c77 	.word	0x08010c77
 8010bc8:	08010bd1 	.word	0x08010bd1
 8010bcc:	08010c39 	.word	0x08010c39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010bd0:	78fb      	ldrb	r3, [r7, #3]
 8010bd2:	015a      	lsls	r2, r3, #5
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010bdc:	461a      	mov	r2, r3
 8010bde:	f240 439d 	movw	r3, #1181	@ 0x49d
 8010be2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	da10      	bge.n	8010c0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010bec:	78fb      	ldrb	r3, [r7, #3]
 8010bee:	015a      	lsls	r2, r3, #5
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	78fa      	ldrb	r2, [r7, #3]
 8010bfc:	0151      	lsls	r1, r2, #5
 8010bfe:	693a      	ldr	r2, [r7, #16]
 8010c00:	440a      	add	r2, r1
 8010c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c0a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8010c0c:	e055      	b.n	8010cba <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4a6f      	ldr	r2, [pc, #444]	@ (8010dd0 <USB_HC_Init+0x254>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d151      	bne.n	8010cba <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8010c16:	78fb      	ldrb	r3, [r7, #3]
 8010c18:	015a      	lsls	r2, r3, #5
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	78fa      	ldrb	r2, [r7, #3]
 8010c26:	0151      	lsls	r1, r2, #5
 8010c28:	693a      	ldr	r2, [r7, #16]
 8010c2a:	440a      	add	r2, r1
 8010c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010c34:	60d3      	str	r3, [r2, #12]
      break;
 8010c36:	e040      	b.n	8010cba <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	015a      	lsls	r2, r3, #5
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	4413      	add	r3, r2
 8010c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c44:	461a      	mov	r2, r3
 8010c46:	f240 639d 	movw	r3, #1693	@ 0x69d
 8010c4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010c4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	da34      	bge.n	8010cbe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010c54:	78fb      	ldrb	r3, [r7, #3]
 8010c56:	015a      	lsls	r2, r3, #5
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	78fa      	ldrb	r2, [r7, #3]
 8010c64:	0151      	lsls	r1, r2, #5
 8010c66:	693a      	ldr	r2, [r7, #16]
 8010c68:	440a      	add	r2, r1
 8010c6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010c74:	e023      	b.n	8010cbe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010c76:	78fb      	ldrb	r3, [r7, #3]
 8010c78:	015a      	lsls	r2, r3, #5
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c82:	461a      	mov	r2, r3
 8010c84:	f240 2325 	movw	r3, #549	@ 0x225
 8010c88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010c8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	da17      	bge.n	8010cc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010c92:	78fb      	ldrb	r3, [r7, #3]
 8010c94:	015a      	lsls	r2, r3, #5
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	4413      	add	r3, r2
 8010c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	78fa      	ldrb	r2, [r7, #3]
 8010ca2:	0151      	lsls	r1, r2, #5
 8010ca4:	693a      	ldr	r2, [r7, #16]
 8010ca6:	440a      	add	r2, r1
 8010ca8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cac:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8010cb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010cb2:	e006      	b.n	8010cc2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	77fb      	strb	r3, [r7, #31]
      break;
 8010cb8:	e004      	b.n	8010cc4 <USB_HC_Init+0x148>
      break;
 8010cba:	bf00      	nop
 8010cbc:	e002      	b.n	8010cc4 <USB_HC_Init+0x148>
      break;
 8010cbe:	bf00      	nop
 8010cc0:	e000      	b.n	8010cc4 <USB_HC_Init+0x148>
      break;
 8010cc2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8010cc4:	78fb      	ldrb	r3, [r7, #3]
 8010cc6:	015a      	lsls	r2, r3, #5
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	4413      	add	r3, r2
 8010ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8010cd6:	78fb      	ldrb	r3, [r7, #3]
 8010cd8:	015a      	lsls	r2, r3, #5
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	4413      	add	r3, r2
 8010cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	78fa      	ldrb	r2, [r7, #3]
 8010ce6:	0151      	lsls	r1, r2, #5
 8010ce8:	693a      	ldr	r2, [r7, #16]
 8010cea:	440a      	add	r2, r1
 8010cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cf0:	f043 0302 	orr.w	r3, r3, #2
 8010cf4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010cfc:	699a      	ldr	r2, [r3, #24]
 8010cfe:	78fb      	ldrb	r3, [r7, #3]
 8010d00:	f003 030f 	and.w	r3, r3, #15
 8010d04:	2101      	movs	r1, #1
 8010d06:	fa01 f303 	lsl.w	r3, r1, r3
 8010d0a:	6939      	ldr	r1, [r7, #16]
 8010d0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010d10:	4313      	orrs	r3, r2
 8010d12:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	699b      	ldr	r3, [r3, #24]
 8010d18:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010d20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	da03      	bge.n	8010d30 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d2c:	61bb      	str	r3, [r7, #24]
 8010d2e:	e001      	b.n	8010d34 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8010d30:	2300      	movs	r3, #0
 8010d32:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff fef9 	bl	8010b2c <USB_GetHostSpeed>
 8010d3a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8010d3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010d40:	2b02      	cmp	r3, #2
 8010d42:	d106      	bne.n	8010d52 <USB_HC_Init+0x1d6>
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d003      	beq.n	8010d52 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010d4e:	617b      	str	r3, [r7, #20]
 8010d50:	e001      	b.n	8010d56 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010d52:	2300      	movs	r3, #0
 8010d54:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010d56:	787b      	ldrb	r3, [r7, #1]
 8010d58:	059b      	lsls	r3, r3, #22
 8010d5a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010d5e:	78bb      	ldrb	r3, [r7, #2]
 8010d60:	02db      	lsls	r3, r3, #11
 8010d62:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010d66:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010d68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010d6c:	049b      	lsls	r3, r3, #18
 8010d6e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010d72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8010d74:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010d7a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	431a      	orrs	r2, r3
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010d84:	78fa      	ldrb	r2, [r7, #3]
 8010d86:	0151      	lsls	r1, r2, #5
 8010d88:	693a      	ldr	r2, [r7, #16]
 8010d8a:	440a      	add	r2, r1
 8010d8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8010d90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010d94:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8010d96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010d9a:	2b03      	cmp	r3, #3
 8010d9c:	d003      	beq.n	8010da6 <USB_HC_Init+0x22a>
 8010d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	d10f      	bne.n	8010dc6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8010da6:	78fb      	ldrb	r3, [r7, #3]
 8010da8:	015a      	lsls	r2, r3, #5
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	4413      	add	r3, r2
 8010dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	78fa      	ldrb	r2, [r7, #3]
 8010db6:	0151      	lsls	r1, r2, #5
 8010db8:	693a      	ldr	r2, [r7, #16]
 8010dba:	440a      	add	r2, r1
 8010dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010dc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010dc4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3720      	adds	r7, #32
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	40040000 	.word	0x40040000

08010dd4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08c      	sub	sp, #48	@ 0x30
 8010dd8:	af02      	add	r7, sp, #8
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	4613      	mov	r3, r2
 8010de0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	785b      	ldrb	r3, [r3, #1]
 8010dea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8010dec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010df0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	4a5d      	ldr	r2, [pc, #372]	@ (8010f6c <USB_HC_StartXfer+0x198>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d12f      	bne.n	8010e5a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8010dfa:	79fb      	ldrb	r3, [r7, #7]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d11c      	bne.n	8010e3a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	7c9b      	ldrb	r3, [r3, #18]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d003      	beq.n	8010e10 <USB_HC_StartXfer+0x3c>
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	7c9b      	ldrb	r3, [r3, #18]
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d124      	bne.n	8010e5a <USB_HC_StartXfer+0x86>
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	799b      	ldrb	r3, [r3, #6]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d120      	bne.n	8010e5a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	6a3b      	ldr	r3, [r7, #32]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	69fa      	ldr	r2, [r7, #28]
 8010e28:	0151      	lsls	r1, r2, #5
 8010e2a:	6a3a      	ldr	r2, [r7, #32]
 8010e2c:	440a      	add	r2, r1
 8010e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e36:	60d3      	str	r3, [r2, #12]
 8010e38:	e00f      	b.n	8010e5a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	791b      	ldrb	r3, [r3, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d10b      	bne.n	8010e5a <USB_HC_StartXfer+0x86>
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	795b      	ldrb	r3, [r3, #5]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d107      	bne.n	8010e5a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	785b      	ldrb	r3, [r3, #1]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	68f8      	ldr	r0, [r7, #12]
 8010e52:	f000 fb6b 	bl	801152c <USB_DoPing>
        return HAL_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e232      	b.n	80112c0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	799b      	ldrb	r3, [r3, #6]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d158      	bne.n	8010f14 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8010e62:	2301      	movs	r3, #1
 8010e64:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	78db      	ldrb	r3, [r3, #3]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d007      	beq.n	8010e7e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010e6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010e70:	68ba      	ldr	r2, [r7, #8]
 8010e72:	8a92      	ldrh	r2, [r2, #20]
 8010e74:	fb03 f202 	mul.w	r2, r3, r2
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	61da      	str	r2, [r3, #28]
 8010e7c:	e07c      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	7c9b      	ldrb	r3, [r3, #18]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d130      	bne.n	8010ee8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	6a1b      	ldr	r3, [r3, #32]
 8010e8a:	2bbc      	cmp	r3, #188	@ 0xbc
 8010e8c:	d918      	bls.n	8010ec0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	8a9b      	ldrh	r3, [r3, #20]
 8010e92:	461a      	mov	r2, r3
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	69da      	ldr	r2, [r3, #28]
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d003      	beq.n	8010eb0 <USB_HC_StartXfer+0xdc>
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	d103      	bne.n	8010eb8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	2202      	movs	r2, #2
 8010eb4:	60da      	str	r2, [r3, #12]
 8010eb6:	e05f      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	2201      	movs	r2, #1
 8010ebc:	60da      	str	r2, [r3, #12]
 8010ebe:	e05b      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	6a1a      	ldr	r2, [r3, #32]
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d007      	beq.n	8010ee0 <USB_HC_StartXfer+0x10c>
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	2b02      	cmp	r3, #2
 8010ed6:	d003      	beq.n	8010ee0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2204      	movs	r2, #4
 8010edc:	60da      	str	r2, [r3, #12]
 8010ede:	e04b      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2203      	movs	r2, #3
 8010ee4:	60da      	str	r2, [r3, #12]
 8010ee6:	e047      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8010ee8:	79fb      	ldrb	r3, [r7, #7]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d10d      	bne.n	8010f0a <USB_HC_StartXfer+0x136>
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	6a1b      	ldr	r3, [r3, #32]
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	8a92      	ldrh	r2, [r2, #20]
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d907      	bls.n	8010f0a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010efa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	8a92      	ldrh	r2, [r2, #20]
 8010f00:	fb03 f202 	mul.w	r2, r3, r2
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	61da      	str	r2, [r3, #28]
 8010f08:	e036      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	6a1a      	ldr	r2, [r3, #32]
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	61da      	str	r2, [r3, #28]
 8010f12:	e031      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	6a1b      	ldr	r3, [r3, #32]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d018      	beq.n	8010f4e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	6a1b      	ldr	r3, [r3, #32]
 8010f20:	68ba      	ldr	r2, [r7, #8]
 8010f22:	8a92      	ldrh	r2, [r2, #20]
 8010f24:	4413      	add	r3, r2
 8010f26:	3b01      	subs	r3, #1
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	8a92      	ldrh	r2, [r2, #20]
 8010f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f30:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8010f32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010f34:	8b7b      	ldrh	r3, [r7, #26]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d90b      	bls.n	8010f52 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8010f3a:	8b7b      	ldrh	r3, [r7, #26]
 8010f3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010f3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	8a92      	ldrh	r2, [r2, #20]
 8010f44:	fb03 f202 	mul.w	r2, r3, r2
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	61da      	str	r2, [r3, #28]
 8010f4c:	e001      	b.n	8010f52 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	78db      	ldrb	r3, [r3, #3]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00a      	beq.n	8010f70 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8010f5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	8a92      	ldrh	r2, [r2, #20]
 8010f60:	fb03 f202 	mul.w	r2, r3, r2
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	61da      	str	r2, [r3, #28]
 8010f68:	e006      	b.n	8010f78 <USB_HC_StartXfer+0x1a4>
 8010f6a:	bf00      	nop
 8010f6c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	6a1a      	ldr	r2, [r3, #32]
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010f80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010f82:	04d9      	lsls	r1, r3, #19
 8010f84:	4ba3      	ldr	r3, [pc, #652]	@ (8011214 <USB_HC_StartXfer+0x440>)
 8010f86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010f88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	7d9b      	ldrb	r3, [r3, #22]
 8010f8e:	075b      	lsls	r3, r3, #29
 8010f90:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010f94:	69f9      	ldr	r1, [r7, #28]
 8010f96:	0148      	lsls	r0, r1, #5
 8010f98:	6a39      	ldr	r1, [r7, #32]
 8010f9a:	4401      	add	r1, r0
 8010f9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010fa0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8010fa2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d009      	beq.n	8010fbe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	6999      	ldr	r1, [r3, #24]
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	015a      	lsls	r2, r3, #5
 8010fb2:	6a3b      	ldr	r3, [r7, #32]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010fba:	460a      	mov	r2, r1
 8010fbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	f003 0301 	and.w	r3, r3, #1
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	bf0c      	ite	eq
 8010fce:	2301      	moveq	r3, #1
 8010fd0:	2300      	movne	r3, #0
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	015a      	lsls	r2, r3, #5
 8010fda:	6a3b      	ldr	r3, [r7, #32]
 8010fdc:	4413      	add	r3, r2
 8010fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	69fa      	ldr	r2, [r7, #28]
 8010fe6:	0151      	lsls	r1, r2, #5
 8010fe8:	6a3a      	ldr	r2, [r7, #32]
 8010fea:	440a      	add	r2, r1
 8010fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010ff0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010ff4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	015a      	lsls	r2, r3, #5
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	7e7b      	ldrb	r3, [r7, #25]
 8011006:	075b      	lsls	r3, r3, #29
 8011008:	69f9      	ldr	r1, [r7, #28]
 801100a:	0148      	lsls	r0, r1, #5
 801100c:	6a39      	ldr	r1, [r7, #32]
 801100e:	4401      	add	r1, r0
 8011010:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8011014:	4313      	orrs	r3, r2
 8011016:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	799b      	ldrb	r3, [r3, #6]
 801101c:	2b01      	cmp	r3, #1
 801101e:	f040 80c3 	bne.w	80111a8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	7c5b      	ldrb	r3, [r3, #17]
 8011026:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801102c:	4313      	orrs	r3, r2
 801102e:	69fa      	ldr	r2, [r7, #28]
 8011030:	0151      	lsls	r1, r2, #5
 8011032:	6a3a      	ldr	r2, [r7, #32]
 8011034:	440a      	add	r2, r1
 8011036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 801103a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801103e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	015a      	lsls	r2, r3, #5
 8011044:	6a3b      	ldr	r3, [r7, #32]
 8011046:	4413      	add	r3, r2
 8011048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	69fa      	ldr	r2, [r7, #28]
 8011050:	0151      	lsls	r1, r2, #5
 8011052:	6a3a      	ldr	r2, [r7, #32]
 8011054:	440a      	add	r2, r1
 8011056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801105a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801105e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	79db      	ldrb	r3, [r3, #7]
 8011064:	2b01      	cmp	r3, #1
 8011066:	d123      	bne.n	80110b0 <USB_HC_StartXfer+0x2dc>
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	78db      	ldrb	r3, [r3, #3]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d11f      	bne.n	80110b0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	015a      	lsls	r2, r3, #5
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	4413      	add	r3, r2
 8011078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	69fa      	ldr	r2, [r7, #28]
 8011080:	0151      	lsls	r1, r2, #5
 8011082:	6a3a      	ldr	r2, [r7, #32]
 8011084:	440a      	add	r2, r1
 8011086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801108a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801108e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	015a      	lsls	r2, r3, #5
 8011094:	6a3b      	ldr	r3, [r7, #32]
 8011096:	4413      	add	r3, r2
 8011098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	69fa      	ldr	r2, [r7, #28]
 80110a0:	0151      	lsls	r1, r2, #5
 80110a2:	6a3a      	ldr	r2, [r7, #32]
 80110a4:	440a      	add	r2, r1
 80110a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110ae:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	7c9b      	ldrb	r3, [r3, #18]
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d003      	beq.n	80110c0 <USB_HC_StartXfer+0x2ec>
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	7c9b      	ldrb	r3, [r3, #18]
 80110bc:	2b03      	cmp	r3, #3
 80110be:	d117      	bne.n	80110f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80110c4:	2b01      	cmp	r3, #1
 80110c6:	d113      	bne.n	80110f0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	78db      	ldrb	r3, [r3, #3]
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d10f      	bne.n	80110f0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	015a      	lsls	r2, r3, #5
 80110d4:	6a3b      	ldr	r3, [r7, #32]
 80110d6:	4413      	add	r3, r2
 80110d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	69fa      	ldr	r2, [r7, #28]
 80110e0:	0151      	lsls	r1, r2, #5
 80110e2:	6a3a      	ldr	r2, [r7, #32]
 80110e4:	440a      	add	r2, r1
 80110e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80110ee:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	7c9b      	ldrb	r3, [r3, #18]
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	d162      	bne.n	80111be <USB_HC_StartXfer+0x3ea>
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	78db      	ldrb	r3, [r3, #3]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d15e      	bne.n	80111be <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	3b01      	subs	r3, #1
 8011106:	2b03      	cmp	r3, #3
 8011108:	d858      	bhi.n	80111bc <USB_HC_StartXfer+0x3e8>
 801110a:	a201      	add	r2, pc, #4	@ (adr r2, 8011110 <USB_HC_StartXfer+0x33c>)
 801110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011110:	08011121 	.word	0x08011121
 8011114:	08011143 	.word	0x08011143
 8011118:	08011165 	.word	0x08011165
 801111c:	08011187 	.word	0x08011187
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	015a      	lsls	r2, r3, #5
 8011124:	6a3b      	ldr	r3, [r7, #32]
 8011126:	4413      	add	r3, r2
 8011128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	69fa      	ldr	r2, [r7, #28]
 8011130:	0151      	lsls	r1, r2, #5
 8011132:	6a3a      	ldr	r2, [r7, #32]
 8011134:	440a      	add	r2, r1
 8011136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801113a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801113e:	6053      	str	r3, [r2, #4]
          break;
 8011140:	e03d      	b.n	80111be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	015a      	lsls	r2, r3, #5
 8011146:	6a3b      	ldr	r3, [r7, #32]
 8011148:	4413      	add	r3, r2
 801114a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	69fa      	ldr	r2, [r7, #28]
 8011152:	0151      	lsls	r1, r2, #5
 8011154:	6a3a      	ldr	r2, [r7, #32]
 8011156:	440a      	add	r2, r1
 8011158:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801115c:	f043 030e 	orr.w	r3, r3, #14
 8011160:	6053      	str	r3, [r2, #4]
          break;
 8011162:	e02c      	b.n	80111be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	015a      	lsls	r2, r3, #5
 8011168:	6a3b      	ldr	r3, [r7, #32]
 801116a:	4413      	add	r3, r2
 801116c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	69fa      	ldr	r2, [r7, #28]
 8011174:	0151      	lsls	r1, r2, #5
 8011176:	6a3a      	ldr	r2, [r7, #32]
 8011178:	440a      	add	r2, r1
 801117a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011182:	6053      	str	r3, [r2, #4]
          break;
 8011184:	e01b      	b.n	80111be <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	015a      	lsls	r2, r3, #5
 801118a:	6a3b      	ldr	r3, [r7, #32]
 801118c:	4413      	add	r3, r2
 801118e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	69fa      	ldr	r2, [r7, #28]
 8011196:	0151      	lsls	r1, r2, #5
 8011198:	6a3a      	ldr	r2, [r7, #32]
 801119a:	440a      	add	r2, r1
 801119c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80111a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80111a4:	6053      	str	r3, [r2, #4]
          break;
 80111a6:	e00a      	b.n	80111be <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	015a      	lsls	r2, r3, #5
 80111ac:	6a3b      	ldr	r3, [r7, #32]
 80111ae:	4413      	add	r3, r2
 80111b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111b4:	461a      	mov	r2, r3
 80111b6:	2300      	movs	r3, #0
 80111b8:	6053      	str	r3, [r2, #4]
 80111ba:	e000      	b.n	80111be <USB_HC_StartXfer+0x3ea>
          break;
 80111bc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	015a      	lsls	r2, r3, #5
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	4413      	add	r3, r2
 80111c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80111d4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	78db      	ldrb	r3, [r3, #3]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d004      	beq.n	80111e8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80111e4:	613b      	str	r3, [r7, #16]
 80111e6:	e003      	b.n	80111f0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80111ee:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80111f6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	015a      	lsls	r2, r3, #5
 80111fc:	6a3b      	ldr	r3, [r7, #32]
 80111fe:	4413      	add	r3, r2
 8011200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011204:	461a      	mov	r2, r3
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801120a:	79fb      	ldrb	r3, [r7, #7]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d003      	beq.n	8011218 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	e055      	b.n	80112c0 <USB_HC_StartXfer+0x4ec>
 8011214:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	78db      	ldrb	r3, [r3, #3]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d14e      	bne.n	80112be <USB_HC_StartXfer+0x4ea>
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	6a1b      	ldr	r3, [r3, #32]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d04a      	beq.n	80112be <USB_HC_StartXfer+0x4ea>
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	79db      	ldrb	r3, [r3, #7]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d146      	bne.n	80112be <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	7c9b      	ldrb	r3, [r3, #18]
 8011234:	2b03      	cmp	r3, #3
 8011236:	d831      	bhi.n	801129c <USB_HC_StartXfer+0x4c8>
 8011238:	a201      	add	r2, pc, #4	@ (adr r2, 8011240 <USB_HC_StartXfer+0x46c>)
 801123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123e:	bf00      	nop
 8011240:	08011251 	.word	0x08011251
 8011244:	08011275 	.word	0x08011275
 8011248:	08011251 	.word	0x08011251
 801124c:	08011275 	.word	0x08011275
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	6a1b      	ldr	r3, [r3, #32]
 8011254:	3303      	adds	r3, #3
 8011256:	089b      	lsrs	r3, r3, #2
 8011258:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801125a:	8afa      	ldrh	r2, [r7, #22]
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011260:	b29b      	uxth	r3, r3
 8011262:	429a      	cmp	r2, r3
 8011264:	d91c      	bls.n	80112a0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	699b      	ldr	r3, [r3, #24]
 801126a:	f043 0220 	orr.w	r2, r3, #32
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	619a      	str	r2, [r3, #24]
        }
        break;
 8011272:	e015      	b.n	80112a0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	6a1b      	ldr	r3, [r3, #32]
 8011278:	3303      	adds	r3, #3
 801127a:	089b      	lsrs	r3, r3, #2
 801127c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801127e:	8afa      	ldrh	r2, [r7, #22]
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	b29b      	uxth	r3, r3
 801128a:	429a      	cmp	r2, r3
 801128c:	d90a      	bls.n	80112a4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	699b      	ldr	r3, [r3, #24]
 8011292:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	619a      	str	r2, [r3, #24]
        }
        break;
 801129a:	e003      	b.n	80112a4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 801129c:	bf00      	nop
 801129e:	e002      	b.n	80112a6 <USB_HC_StartXfer+0x4d2>
        break;
 80112a0:	bf00      	nop
 80112a2:	e000      	b.n	80112a6 <USB_HC_StartXfer+0x4d2>
        break;
 80112a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	6999      	ldr	r1, [r3, #24]
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	785a      	ldrb	r2, [r3, #1]
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	6a1b      	ldr	r3, [r3, #32]
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	2000      	movs	r0, #0
 80112b6:	9000      	str	r0, [sp, #0]
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f7ff f9cf 	bl	801065c <USB_WritePacket>
  }

  return HAL_OK;
 80112be:	2300      	movs	r3, #0
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3728      	adds	r7, #40	@ 0x28
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b085      	sub	sp, #20
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112da:	695b      	ldr	r3, [r3, #20]
 80112dc:	b29b      	uxth	r3, r3
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3714      	adds	r7, #20
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80112ea:	b480      	push	{r7}
 80112ec:	b089      	sub	sp, #36	@ 0x24
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
 80112f2:	460b      	mov	r3, r1
 80112f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80112fa:	78fb      	ldrb	r3, [r7, #3]
 80112fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80112fe:	2300      	movs	r3, #0
 8011300:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	015a      	lsls	r2, r3, #5
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	4413      	add	r3, r2
 801130a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	0c9b      	lsrs	r3, r3, #18
 8011312:	f003 0303 	and.w	r3, r3, #3
 8011316:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	015a      	lsls	r2, r3, #5
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	4413      	add	r3, r2
 8011320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	0fdb      	lsrs	r3, r3, #31
 8011328:	f003 0301 	and.w	r3, r3, #1
 801132c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801132e:	69bb      	ldr	r3, [r7, #24]
 8011330:	015a      	lsls	r2, r3, #5
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	4413      	add	r3, r2
 8011336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	0fdb      	lsrs	r3, r3, #31
 801133e:	f003 0301 	and.w	r3, r3, #1
 8011342:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	689b      	ldr	r3, [r3, #8]
 8011348:	f003 0320 	and.w	r3, r3, #32
 801134c:	2b20      	cmp	r3, #32
 801134e:	d10d      	bne.n	801136c <USB_HC_Halt+0x82>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d10a      	bne.n	801136c <USB_HC_Halt+0x82>
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d005      	beq.n	8011368 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	2b01      	cmp	r3, #1
 8011360:	d002      	beq.n	8011368 <USB_HC_Halt+0x7e>
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2b03      	cmp	r3, #3
 8011366:	d101      	bne.n	801136c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011368:	2300      	movs	r3, #0
 801136a:	e0d8      	b.n	801151e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d002      	beq.n	8011378 <USB_HC_Halt+0x8e>
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	2b02      	cmp	r3, #2
 8011376:	d173      	bne.n	8011460 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	015a      	lsls	r2, r3, #5
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	4413      	add	r3, r2
 8011380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	69ba      	ldr	r2, [r7, #24]
 8011388:	0151      	lsls	r1, r2, #5
 801138a:	69fa      	ldr	r2, [r7, #28]
 801138c:	440a      	add	r2, r1
 801138e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011392:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011396:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	f003 0320 	and.w	r3, r3, #32
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d14a      	bne.n	801143a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d133      	bne.n	8011418 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	015a      	lsls	r2, r3, #5
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	4413      	add	r3, r2
 80113b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	69ba      	ldr	r2, [r7, #24]
 80113c0:	0151      	lsls	r1, r2, #5
 80113c2:	69fa      	ldr	r2, [r7, #28]
 80113c4:	440a      	add	r2, r1
 80113c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80113ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80113ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	015a      	lsls	r2, r3, #5
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	4413      	add	r3, r2
 80113d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	69ba      	ldr	r2, [r7, #24]
 80113e0:	0151      	lsls	r1, r2, #5
 80113e2:	69fa      	ldr	r2, [r7, #28]
 80113e4:	440a      	add	r2, r1
 80113e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80113ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80113ee:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	3301      	adds	r3, #1
 80113f4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80113fc:	d82e      	bhi.n	801145c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80113fe:	69bb      	ldr	r3, [r7, #24]
 8011400:	015a      	lsls	r2, r3, #5
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	4413      	add	r3, r2
 8011406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011414:	d0ec      	beq.n	80113f0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011416:	e081      	b.n	801151c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	015a      	lsls	r2, r3, #5
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	4413      	add	r3, r2
 8011420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	0151      	lsls	r1, r2, #5
 801142a:	69fa      	ldr	r2, [r7, #28]
 801142c:	440a      	add	r2, r1
 801142e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011436:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011438:	e070      	b.n	801151c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	015a      	lsls	r2, r3, #5
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	4413      	add	r3, r2
 8011442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	69ba      	ldr	r2, [r7, #24]
 801144a:	0151      	lsls	r1, r2, #5
 801144c:	69fa      	ldr	r2, [r7, #28]
 801144e:	440a      	add	r2, r1
 8011450:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011454:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011458:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801145a:	e05f      	b.n	801151c <USB_HC_Halt+0x232>
            break;
 801145c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801145e:	e05d      	b.n	801151c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011460:	69bb      	ldr	r3, [r7, #24]
 8011462:	015a      	lsls	r2, r3, #5
 8011464:	69fb      	ldr	r3, [r7, #28]
 8011466:	4413      	add	r3, r2
 8011468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	69ba      	ldr	r2, [r7, #24]
 8011470:	0151      	lsls	r1, r2, #5
 8011472:	69fa      	ldr	r2, [r7, #28]
 8011474:	440a      	add	r2, r1
 8011476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801147a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801147e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011486:	691b      	ldr	r3, [r3, #16]
 8011488:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801148c:	2b00      	cmp	r3, #0
 801148e:	d133      	bne.n	80114f8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	015a      	lsls	r2, r3, #5
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	4413      	add	r3, r2
 8011498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	69ba      	ldr	r2, [r7, #24]
 80114a0:	0151      	lsls	r1, r2, #5
 80114a2:	69fa      	ldr	r2, [r7, #28]
 80114a4:	440a      	add	r2, r1
 80114a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	015a      	lsls	r2, r3, #5
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	4413      	add	r3, r2
 80114b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	69ba      	ldr	r2, [r7, #24]
 80114c0:	0151      	lsls	r1, r2, #5
 80114c2:	69fa      	ldr	r2, [r7, #28]
 80114c4:	440a      	add	r2, r1
 80114c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	3301      	adds	r3, #1
 80114d4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80114dc:	d81d      	bhi.n	801151a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	015a      	lsls	r2, r3, #5
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	4413      	add	r3, r2
 80114e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80114f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80114f4:	d0ec      	beq.n	80114d0 <USB_HC_Halt+0x1e6>
 80114f6:	e011      	b.n	801151c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	015a      	lsls	r2, r3, #5
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	4413      	add	r3, r2
 8011500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	69ba      	ldr	r2, [r7, #24]
 8011508:	0151      	lsls	r1, r2, #5
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	440a      	add	r2, r1
 801150e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011516:	6013      	str	r3, [r2, #0]
 8011518:	e000      	b.n	801151c <USB_HC_Halt+0x232>
          break;
 801151a:	bf00      	nop
    }
  }

  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3724      	adds	r7, #36	@ 0x24
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr
	...

0801152c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 801152c:	b480      	push	{r7}
 801152e:	b087      	sub	sp, #28
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	460b      	mov	r3, r1
 8011536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801153c:	78fb      	ldrb	r3, [r7, #3]
 801153e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8011540:	2301      	movs	r3, #1
 8011542:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	04da      	lsls	r2, r3, #19
 8011548:	4b15      	ldr	r3, [pc, #84]	@ (80115a0 <USB_DoPing+0x74>)
 801154a:	4013      	ands	r3, r2
 801154c:	693a      	ldr	r2, [r7, #16]
 801154e:	0151      	lsls	r1, r2, #5
 8011550:	697a      	ldr	r2, [r7, #20]
 8011552:	440a      	add	r2, r1
 8011554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011558:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801155c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	015a      	lsls	r2, r3, #5
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	4413      	add	r3, r2
 8011566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011574:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801157c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	015a      	lsls	r2, r3, #5
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	4413      	add	r3, r2
 8011586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801158a:	461a      	mov	r2, r3
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	371c      	adds	r7, #28
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	1ff80000 	.word	0x1ff80000

080115a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b088      	sub	sp, #32
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7fe ff92 	bl	80104e2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80115be:	2110      	movs	r1, #16
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f7fe ffeb 	bl	801059c <USB_FlushTxFifo>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80115cc:	2301      	movs	r3, #1
 80115ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff f815 	bl	8010600 <USB_FlushRxFifo>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d001      	beq.n	80115e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80115dc:	2301      	movs	r3, #1
 80115de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80115e0:	2300      	movs	r3, #0
 80115e2:	61bb      	str	r3, [r7, #24]
 80115e4:	e01f      	b.n	8011626 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	015a      	lsls	r2, r3, #5
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	4413      	add	r3, r2
 80115ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80115fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011604:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801160c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	015a      	lsls	r2, r3, #5
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	4413      	add	r3, r2
 8011616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801161a:	461a      	mov	r2, r3
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	3301      	adds	r3, #1
 8011624:	61bb      	str	r3, [r7, #24]
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	2b0f      	cmp	r3, #15
 801162a:	d9dc      	bls.n	80115e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 801162c:	2300      	movs	r3, #0
 801162e:	61bb      	str	r3, [r7, #24]
 8011630:	e034      	b.n	801169c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	015a      	lsls	r2, r3, #5
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	4413      	add	r3, r2
 801163a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011648:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011650:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011658:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	015a      	lsls	r2, r3, #5
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	4413      	add	r3, r2
 8011662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011666:	461a      	mov	r2, r3
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	3301      	adds	r3, #1
 8011670:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011678:	d80c      	bhi.n	8011694 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	015a      	lsls	r2, r3, #5
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	4413      	add	r3, r2
 8011682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801168c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011690:	d0ec      	beq.n	801166c <USB_StopHost+0xc8>
 8011692:	e000      	b.n	8011696 <USB_StopHost+0xf2>
        break;
 8011694:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	3301      	adds	r3, #1
 801169a:	61bb      	str	r3, [r7, #24]
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	2b0f      	cmp	r3, #15
 80116a0:	d9c7      	bls.n	8011632 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116a8:	461a      	mov	r2, r3
 80116aa:	f04f 33ff 	mov.w	r3, #4294967295
 80116ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f04f 32ff 	mov.w	r2, #4294967295
 80116b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7fe ff01 	bl	80104c0 <USB_EnableGlobalInt>

  return ret;
 80116be:	7ffb      	ldrb	r3, [r7, #31]
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3720      	adds	r7, #32
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80116cc:	4904      	ldr	r1, [pc, #16]	@ (80116e0 <MX_FATFS_Init+0x18>)
 80116ce:	4805      	ldr	r0, [pc, #20]	@ (80116e4 <MX_FATFS_Init+0x1c>)
 80116d0:	f004 ff32 	bl	8016538 <FATFS_LinkDriver>
 80116d4:	4603      	mov	r3, r0
 80116d6:	461a      	mov	r2, r3
 80116d8:	4b03      	ldr	r3, [pc, #12]	@ (80116e8 <MX_FATFS_Init+0x20>)
 80116da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80116dc:	bf00      	nop
 80116de:	bd80      	pop	{r7, pc}
 80116e0:	20001588 	.word	0x20001588
 80116e4:	0801c588 	.word	0x0801c588
 80116e8:	20001584 	.word	0x20001584

080116ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80116ec:	b480      	push	{r7}
 80116ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80116f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	46bd      	mov	sp, r7
 80116f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fa:	4770      	bx	lr

080116fc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b086      	sub	sp, #24
 8011700:	af00      	add	r7, sp, #0
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011708:	2300      	movs	r3, #0
 801170a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	68ba      	ldr	r2, [r7, #8]
 8011710:	68f9      	ldr	r1, [r7, #12]
 8011712:	4806      	ldr	r0, [pc, #24]	@ (801172c <BSP_SD_ReadBlocks_DMA+0x30>)
 8011714:	f7fa fcb4 	bl	800c080 <HAL_SD_ReadBlocks_DMA>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801171e:	2301      	movs	r3, #1
 8011720:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011722:	7dfb      	ldrb	r3, [r7, #23]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3718      	adds	r7, #24
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	20000c60 	.word	0x20000c60

08011730 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801173c:	2300      	movs	r3, #0
 801173e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	68ba      	ldr	r2, [r7, #8]
 8011744:	68f9      	ldr	r1, [r7, #12]
 8011746:	4806      	ldr	r0, [pc, #24]	@ (8011760 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011748:	f7fa fd7c 	bl	800c244 <HAL_SD_WriteBlocks_DMA>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d001      	beq.n	8011756 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011752:	2301      	movs	r3, #1
 8011754:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011756:	7dfb      	ldrb	r3, [r7, #23]
}
 8011758:	4618      	mov	r0, r3
 801175a:	3718      	adds	r7, #24
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	20000c60 	.word	0x20000c60

08011764 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011768:	4805      	ldr	r0, [pc, #20]	@ (8011780 <BSP_SD_GetCardState+0x1c>)
 801176a:	f7fb f82b 	bl	800c7c4 <HAL_SD_GetCardState>
 801176e:	4603      	mov	r3, r0
 8011770:	2b04      	cmp	r3, #4
 8011772:	bf14      	ite	ne
 8011774:	2301      	movne	r3, #1
 8011776:	2300      	moveq	r3, #0
 8011778:	b2db      	uxtb	r3, r3
}
 801177a:	4618      	mov	r0, r3
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	20000c60 	.word	0x20000c60

08011784 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801178c:	6879      	ldr	r1, [r7, #4]
 801178e:	4803      	ldr	r0, [pc, #12]	@ (801179c <BSP_SD_GetCardInfo+0x18>)
 8011790:	f7fa ffec 	bl	800c76c <HAL_SD_GetCardInfo>
}
 8011794:	bf00      	nop
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}
 801179c:	20000c60 	.word	0x20000c60

080117a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80117a8:	f000 f988 	bl	8011abc <BSP_SD_ReadCpltCallback>
}
 80117ac:	bf00      	nop
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80117bc:	f004 ff54 	bl	8016668 <osKernelSysTick>
 80117c0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80117c2:	e006      	b.n	80117d2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80117c4:	f7ff ffce 	bl	8011764 <BSP_SD_GetCardState>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d101      	bne.n	80117d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	e009      	b.n	80117e6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80117d2:	f004 ff49 	bl	8016668 <osKernelSysTick>
 80117d6:	4602      	mov	r2, r0
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d8f0      	bhi.n	80117c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80117e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3710      	adds	r7, #16
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
	...

080117f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80117fa:	4b0c      	ldr	r3, [pc, #48]	@ (801182c <SD_CheckStatus+0x3c>)
 80117fc:	2201      	movs	r2, #1
 80117fe:	701a      	strb	r2, [r3, #0]

  // Use HAL function directly instead of BSP
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 8011800:	480b      	ldr	r0, [pc, #44]	@ (8011830 <SD_CheckStatus+0x40>)
 8011802:	f7fa ffdf 	bl	800c7c4 <HAL_SD_GetCardState>
 8011806:	60f8      	str	r0, [r7, #12]
  if(cardState == HAL_SD_CARD_TRANSFER)
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2b04      	cmp	r3, #4
 801180c:	d107      	bne.n	801181e <SD_CheckStatus+0x2e>
  {
    Stat &= ~STA_NOINIT;
 801180e:	4b07      	ldr	r3, [pc, #28]	@ (801182c <SD_CheckStatus+0x3c>)
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	f023 0301 	bic.w	r3, r3, #1
 8011818:	b2da      	uxtb	r2, r3
 801181a:	4b04      	ldr	r3, [pc, #16]	@ (801182c <SD_CheckStatus+0x3c>)
 801181c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801181e:	4b03      	ldr	r3, [pc, #12]	@ (801182c <SD_CheckStatus+0x3c>)
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	b2db      	uxtb	r3, r3
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	20000051 	.word	0x20000051
 8011830:	20000c60 	.word	0x20000c60

08011834 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011834:	b590      	push	{r4, r7, lr}
 8011836:	b087      	sub	sp, #28
 8011838:	af00      	add	r7, sp, #0
 801183a:	4603      	mov	r3, r0
 801183c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801183e:	4b1d      	ldr	r3, [pc, #116]	@ (80118b4 <SD_initialize+0x80>)
 8011840:	2201      	movs	r2, #1
 8011842:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011844:	f004 ff04 	bl	8016650 <osKernelRunning>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d02b      	beq.n	80118a6 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 801184e:	79fb      	ldrb	r3, [r7, #7]
 8011850:	4618      	mov	r0, r3
 8011852:	f7ff ffcd 	bl	80117f0 <SD_CheckStatus>
 8011856:	4603      	mov	r3, r0
 8011858:	461a      	mov	r2, r3
 801185a:	4b16      	ldr	r3, [pc, #88]	@ (80118b4 <SD_initialize+0x80>)
 801185c:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801185e:	4b15      	ldr	r3, [pc, #84]	@ (80118b4 <SD_initialize+0x80>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	b2db      	uxtb	r3, r3
 8011864:	2b01      	cmp	r3, #1
 8011866:	d01e      	beq.n	80118a6 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011868:	4b13      	ldr	r3, [pc, #76]	@ (80118b8 <SD_initialize+0x84>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d10e      	bne.n	801188e <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011870:	4b12      	ldr	r3, [pc, #72]	@ (80118bc <SD_initialize+0x88>)
 8011872:	f107 0408 	add.w	r4, r7, #8
 8011876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801187c:	f107 0308 	add.w	r3, r7, #8
 8011880:	2100      	movs	r1, #0
 8011882:	4618      	mov	r0, r3
 8011884:	f005 f837 	bl	80168f6 <osMessageCreate>
 8011888:	4603      	mov	r3, r0
 801188a:	4a0b      	ldr	r2, [pc, #44]	@ (80118b8 <SD_initialize+0x84>)
 801188c:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 801188e:	4b0a      	ldr	r3, [pc, #40]	@ (80118b8 <SD_initialize+0x84>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d107      	bne.n	80118a6 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011896:	4b07      	ldr	r3, [pc, #28]	@ (80118b4 <SD_initialize+0x80>)
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	f043 0301 	orr.w	r3, r3, #1
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	4b04      	ldr	r3, [pc, #16]	@ (80118b4 <SD_initialize+0x80>)
 80118a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80118a6:	4b03      	ldr	r3, [pc, #12]	@ (80118b4 <SD_initialize+0x80>)
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	b2db      	uxtb	r3, r3

}
 80118ac:	4618      	mov	r0, r3
 80118ae:	371c      	adds	r7, #28
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd90      	pop	{r4, r7, pc}
 80118b4:	20000051 	.word	0x20000051
 80118b8:	200017c0 	.word	0x200017c0
 80118bc:	0801c4d0 	.word	0x0801c4d0

080118c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80118ca:	79fb      	ldrb	r3, [r7, #7]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff ff8f 	bl	80117f0 <SD_CheckStatus>
 80118d2:	4603      	mov	r3, r0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b08a      	sub	sp, #40	@ 0x28
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60b9      	str	r1, [r7, #8]
 80118e4:	607a      	str	r2, [r7, #4]
 80118e6:	603b      	str	r3, [r7, #0]
 80118e8:	4603      	mov	r3, r0
 80118ea:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80118ec:	2301      	movs	r3, #1
 80118ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80118f2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80118f6:	f7ff ff5d 	bl	80117b4 <SD_CheckStatusWithTimeout>
 80118fa:	4603      	mov	r3, r0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	da02      	bge.n	8011906 <SD_read+0x2a>
  {
    return res;
 8011900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011904:	e032      	b.n	801196c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011906:	683a      	ldr	r2, [r7, #0]
 8011908:	6879      	ldr	r1, [r7, #4]
 801190a:	68b8      	ldr	r0, [r7, #8]
 801190c:	f7ff fef6 	bl	80116fc <BSP_SD_ReadBlocks_DMA>
 8011910:	4603      	mov	r3, r0
 8011912:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8011916:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801191a:	2b00      	cmp	r3, #0
 801191c:	d124      	bne.n	8011968 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801191e:	4b15      	ldr	r3, [pc, #84]	@ (8011974 <SD_read+0x98>)
 8011920:	6819      	ldr	r1, [r3, #0]
 8011922:	f107 0314 	add.w	r3, r7, #20
 8011926:	f247 5230 	movw	r2, #30000	@ 0x7530
 801192a:	4618      	mov	r0, r3
 801192c:	f005 f84c 	bl	80169c8 <osMessageGet>

    if (event.status == osEventMessage)
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	2b10      	cmp	r3, #16
 8011934:	d118      	bne.n	8011968 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8011936:	69bb      	ldr	r3, [r7, #24]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d115      	bne.n	8011968 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 801193c:	f004 fe94 	bl	8016668 <osKernelSysTick>
 8011940:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011942:	e008      	b.n	8011956 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011944:	f7ff ff0e 	bl	8011764 <BSP_SD_GetCardState>
 8011948:	4603      	mov	r3, r0
 801194a:	2b00      	cmp	r3, #0
 801194c:	d103      	bne.n	8011956 <SD_read+0x7a>
              {
                res = RES_OK;
 801194e:	2300      	movs	r3, #0
 8011950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8011954:	e008      	b.n	8011968 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011956:	f004 fe87 	bl	8016668 <osKernelSysTick>
 801195a:	4602      	mov	r2, r0
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011964:	4293      	cmp	r3, r2
 8011966:	d9ed      	bls.n	8011944 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801196c:	4618      	mov	r0, r3
 801196e:	3728      	adds	r7, #40	@ 0x28
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}
 8011974:	200017c0 	.word	0x200017c0

08011978 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b08a      	sub	sp, #40	@ 0x28
 801197c:	af00      	add	r7, sp, #0
 801197e:	60b9      	str	r1, [r7, #8]
 8011980:	607a      	str	r2, [r7, #4]
 8011982:	603b      	str	r3, [r7, #0]
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011988:	2301      	movs	r3, #1
 801198a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801198e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011992:	f7ff ff0f 	bl	80117b4 <SD_CheckStatusWithTimeout>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	da02      	bge.n	80119a2 <SD_write+0x2a>
  {
    return res;
 801199c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119a0:	e02e      	b.n	8011a00 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80119a2:	683a      	ldr	r2, [r7, #0]
 80119a4:	6879      	ldr	r1, [r7, #4]
 80119a6:	68b8      	ldr	r0, [r7, #8]
 80119a8:	f7ff fec2 	bl	8011730 <BSP_SD_WriteBlocks_DMA>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d124      	bne.n	80119fc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80119b2:	4b15      	ldr	r3, [pc, #84]	@ (8011a08 <SD_write+0x90>)
 80119b4:	6819      	ldr	r1, [r3, #0]
 80119b6:	f107 0314 	add.w	r3, r7, #20
 80119ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80119be:	4618      	mov	r0, r3
 80119c0:	f005 f802 	bl	80169c8 <osMessageGet>

    if (event.status == osEventMessage)
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2b10      	cmp	r3, #16
 80119c8:	d118      	bne.n	80119fc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d115      	bne.n	80119fc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80119d0:	f004 fe4a 	bl	8016668 <osKernelSysTick>
 80119d4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80119d6:	e008      	b.n	80119ea <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119d8:	f7ff fec4 	bl	8011764 <BSP_SD_GetCardState>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d103      	bne.n	80119ea <SD_write+0x72>
          {
            res = RES_OK;
 80119e2:	2300      	movs	r3, #0
 80119e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80119e8:	e008      	b.n	80119fc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80119ea:	f004 fe3d 	bl	8016668 <osKernelSysTick>
 80119ee:	4602      	mov	r2, r0
 80119f0:	6a3b      	ldr	r3, [r7, #32]
 80119f2:	1ad3      	subs	r3, r2, r3
 80119f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d9ed      	bls.n	80119d8 <SD_write+0x60>
    }

  }
#endif

  return res;
 80119fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3728      	adds	r7, #40	@ 0x28
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	200017c0 	.word	0x200017c0

08011a0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b08c      	sub	sp, #48	@ 0x30
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	4603      	mov	r3, r0
 8011a14:	603a      	str	r2, [r7, #0]
 8011a16:	71fb      	strb	r3, [r7, #7]
 8011a18:	460b      	mov	r3, r1
 8011a1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011a22:	4b25      	ldr	r3, [pc, #148]	@ (8011ab8 <SD_ioctl+0xac>)
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	f003 0301 	and.w	r3, r3, #1
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d001      	beq.n	8011a34 <SD_ioctl+0x28>
 8011a30:	2303      	movs	r3, #3
 8011a32:	e03c      	b.n	8011aae <SD_ioctl+0xa2>

  switch (cmd)
 8011a34:	79bb      	ldrb	r3, [r7, #6]
 8011a36:	2b03      	cmp	r3, #3
 8011a38:	d834      	bhi.n	8011aa4 <SD_ioctl+0x98>
 8011a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a40 <SD_ioctl+0x34>)
 8011a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a40:	08011a51 	.word	0x08011a51
 8011a44:	08011a59 	.word	0x08011a59
 8011a48:	08011a71 	.word	0x08011a71
 8011a4c:	08011a8b 	.word	0x08011a8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011a50:	2300      	movs	r3, #0
 8011a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011a56:	e028      	b.n	8011aaa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a58:	f107 030c 	add.w	r3, r7, #12
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7ff fe91 	bl	8011784 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011a6e:	e01c      	b.n	8011aaa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a70:	f107 030c 	add.w	r3, r7, #12
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7ff fe85 	bl	8011784 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011a82:	2300      	movs	r3, #0
 8011a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011a88:	e00f      	b.n	8011aaa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a8a:	f107 030c 	add.w	r3, r7, #12
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff fe78 	bl	8011784 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a96:	0a5a      	lsrs	r2, r3, #9
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011aa2:	e002      	b.n	8011aaa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011aa4:	2304      	movs	r3, #4
 8011aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3730      	adds	r7, #48	@ 0x30
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	20000051 	.word	0x20000051

08011abc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8011ac0:	4b04      	ldr	r3, [pc, #16]	@ (8011ad4 <BSP_SD_ReadCpltCallback+0x18>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f004 ff3d 	bl	8016948 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8011ace:	bf00      	nop
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	200017c0 	.word	0x200017c0

08011ad8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011ad8:	b590      	push	{r4, r7, lr}
 8011ada:	b089      	sub	sp, #36	@ 0x24
 8011adc:	af04      	add	r7, sp, #16
 8011ade:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	2102      	movs	r1, #2
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 fcbd 	bl	8012466 <USBH_FindInterface>
 8011aec:	4603      	mov	r3, r0
 8011aee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011af0:	7bfb      	ldrb	r3, [r7, #15]
 8011af2:	2bff      	cmp	r3, #255	@ 0xff
 8011af4:	d002      	beq.n	8011afc <USBH_CDC_InterfaceInit+0x24>
 8011af6:	7bfb      	ldrb	r3, [r7, #15]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d901      	bls.n	8011b00 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011afc:	2302      	movs	r3, #2
 8011afe:	e13d      	b.n	8011d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	4619      	mov	r1, r3
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 fc92 	bl	801242e <USBH_SelectInterface>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011b0e:	7bbb      	ldrb	r3, [r7, #14]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011b14:	2302      	movs	r3, #2
 8011b16:	e131      	b.n	8011d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8011b1e:	2050      	movs	r0, #80	@ 0x50
 8011b20:	f008 f898 	bl	8019c54 <malloc>
 8011b24:	4603      	mov	r3, r0
 8011b26:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011b2e:	69db      	ldr	r3, [r3, #28]
 8011b30:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d101      	bne.n	8011b3c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8011b38:	2302      	movs	r3, #2
 8011b3a:	e11f      	b.n	8011d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8011b3c:	2250      	movs	r2, #80	@ 0x50
 8011b3e:	2100      	movs	r1, #0
 8011b40:	68b8      	ldr	r0, [r7, #8]
 8011b42:	f008 f9d9 	bl	8019ef8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011b46:	7bfb      	ldrb	r3, [r7, #15]
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	211a      	movs	r1, #26
 8011b4c:	fb01 f303 	mul.w	r3, r1, r3
 8011b50:	4413      	add	r3, r2
 8011b52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	b25b      	sxtb	r3, r3
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	da15      	bge.n	8011b8a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011b5e:	7bfb      	ldrb	r3, [r7, #15]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	211a      	movs	r1, #26
 8011b64:	fb01 f303 	mul.w	r3, r1, r3
 8011b68:	4413      	add	r3, r2
 8011b6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011b6e:	781a      	ldrb	r2, [r3, #0]
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011b74:	7bfb      	ldrb	r3, [r7, #15]
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	211a      	movs	r1, #26
 8011b7a:	fb01 f303 	mul.w	r3, r1, r3
 8011b7e:	4413      	add	r3, r2
 8011b80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011b84:	881a      	ldrh	r2, [r3, #0]
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	785b      	ldrb	r3, [r3, #1]
 8011b8e:	4619      	mov	r1, r3
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f002 f90c 	bl	8013dae <USBH_AllocPipe>
 8011b96:	4603      	mov	r3, r0
 8011b98:	461a      	mov	r2, r3
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	7819      	ldrb	r1, [r3, #0]
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	7858      	ldrb	r0, [r3, #1]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	8952      	ldrh	r2, [r2, #10]
 8011bb6:	9202      	str	r2, [sp, #8]
 8011bb8:	2203      	movs	r2, #3
 8011bba:	9201      	str	r2, [sp, #4]
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	4623      	mov	r3, r4
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f002 f8c4 	bl	8013d50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	4619      	mov	r1, r3
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f007 ffb9 	bl	8019b48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2200      	movs	r2, #0
 8011bda:	210a      	movs	r1, #10
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fc42 	bl	8012466 <USBH_FindInterface>
 8011be2:	4603      	mov	r3, r0
 8011be4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
 8011be8:	2bff      	cmp	r3, #255	@ 0xff
 8011bea:	d002      	beq.n	8011bf2 <USBH_CDC_InterfaceInit+0x11a>
 8011bec:	7bfb      	ldrb	r3, [r7, #15]
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d901      	bls.n	8011bf6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	e0c2      	b.n	8011d7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011bf6:	7bfb      	ldrb	r3, [r7, #15]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	211a      	movs	r1, #26
 8011bfc:	fb01 f303 	mul.w	r3, r1, r3
 8011c00:	4413      	add	r3, r2
 8011c02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	b25b      	sxtb	r3, r3
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da16      	bge.n	8011c3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011c0e:	7bfb      	ldrb	r3, [r7, #15]
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	211a      	movs	r1, #26
 8011c14:	fb01 f303 	mul.w	r3, r1, r3
 8011c18:	4413      	add	r3, r2
 8011c1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c1e:	781a      	ldrb	r2, [r3, #0]
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011c24:	7bfb      	ldrb	r3, [r7, #15]
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	211a      	movs	r1, #26
 8011c2a:	fb01 f303 	mul.w	r3, r1, r3
 8011c2e:	4413      	add	r3, r2
 8011c30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011c34:	881a      	ldrh	r2, [r3, #0]
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	835a      	strh	r2, [r3, #26]
 8011c3a:	e015      	b.n	8011c68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	211a      	movs	r1, #26
 8011c42:	fb01 f303 	mul.w	r3, r1, r3
 8011c46:	4413      	add	r3, r2
 8011c48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011c4c:	781a      	ldrb	r2, [r3, #0]
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011c52:	7bfb      	ldrb	r3, [r7, #15]
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	211a      	movs	r1, #26
 8011c58:	fb01 f303 	mul.w	r3, r1, r3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011c62:	881a      	ldrh	r2, [r3, #0]
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	211a      	movs	r1, #26
 8011c6e:	fb01 f303 	mul.w	r3, r1, r3
 8011c72:	4413      	add	r3, r2
 8011c74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	b25b      	sxtb	r3, r3
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	da16      	bge.n	8011cae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011c80:	7bfb      	ldrb	r3, [r7, #15]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	211a      	movs	r1, #26
 8011c86:	fb01 f303 	mul.w	r3, r1, r3
 8011c8a:	4413      	add	r3, r2
 8011c8c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011c90:	781a      	ldrb	r2, [r3, #0]
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011c96:	7bfb      	ldrb	r3, [r7, #15]
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	211a      	movs	r1, #26
 8011c9c:	fb01 f303 	mul.w	r3, r1, r3
 8011ca0:	4413      	add	r3, r2
 8011ca2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011ca6:	881a      	ldrh	r2, [r3, #0]
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	835a      	strh	r2, [r3, #26]
 8011cac:	e015      	b.n	8011cda <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011cae:	7bfb      	ldrb	r3, [r7, #15]
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	211a      	movs	r1, #26
 8011cb4:	fb01 f303 	mul.w	r3, r1, r3
 8011cb8:	4413      	add	r3, r2
 8011cba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8011cbe:	781a      	ldrb	r2, [r3, #0]
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011cc4:	7bfb      	ldrb	r3, [r7, #15]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	211a      	movs	r1, #26
 8011cca:	fb01 f303 	mul.w	r3, r1, r3
 8011cce:	4413      	add	r3, r2
 8011cd0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8011cd4:	881a      	ldrh	r2, [r3, #0]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	7b9b      	ldrb	r3, [r3, #14]
 8011cde:	4619      	mov	r1, r3
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f002 f864 	bl	8013dae <USBH_AllocPipe>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	461a      	mov	r2, r3
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	7bdb      	ldrb	r3, [r3, #15]
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f002 f85a 	bl	8013dae <USBH_AllocPipe>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	7b59      	ldrb	r1, [r3, #13]
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	7b98      	ldrb	r0, [r3, #14]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	8b12      	ldrh	r2, [r2, #24]
 8011d1a:	9202      	str	r2, [sp, #8]
 8011d1c:	2202      	movs	r2, #2
 8011d1e:	9201      	str	r2, [sp, #4]
 8011d20:	9300      	str	r3, [sp, #0]
 8011d22:	4623      	mov	r3, r4
 8011d24:	4602      	mov	r2, r0
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f002 f812 	bl	8013d50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	7b19      	ldrb	r1, [r3, #12]
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	7bd8      	ldrb	r0, [r3, #15]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	8b52      	ldrh	r2, [r2, #26]
 8011d44:	9202      	str	r2, [sp, #8]
 8011d46:	2202      	movs	r2, #2
 8011d48:	9201      	str	r2, [sp, #4]
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	4623      	mov	r3, r4
 8011d4e:	4602      	mov	r2, r0
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f001 fffd 	bl	8013d50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	7b5b      	ldrb	r3, [r3, #13]
 8011d62:	2200      	movs	r2, #0
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f007 feee 	bl	8019b48 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	7b1b      	ldrb	r3, [r3, #12]
 8011d70:	2200      	movs	r2, #0
 8011d72:	4619      	mov	r1, r3
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f007 fee7 	bl	8019b48 <USBH_LL_SetToggle>

  return USBH_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3714      	adds	r7, #20
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd90      	pop	{r4, r7, pc}

08011d84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011d92:	69db      	ldr	r3, [r3, #28]
 8011d94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d00e      	beq.n	8011dbc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	4619      	mov	r1, r3
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f001 fff2 	bl	8013d8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f002 f81d 	bl	8013df0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2200      	movs	r2, #0
 8011dba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	7b1b      	ldrb	r3, [r3, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00e      	beq.n	8011de2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	7b1b      	ldrb	r3, [r3, #12]
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f001 ffdf 	bl	8013d8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	7b1b      	ldrb	r3, [r3, #12]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f002 f80a 	bl	8013df0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2200      	movs	r2, #0
 8011de0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	7b5b      	ldrb	r3, [r3, #13]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00e      	beq.n	8011e08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	7b5b      	ldrb	r3, [r3, #13]
 8011dee:	4619      	mov	r1, r3
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f001 ffcc 	bl	8013d8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	7b5b      	ldrb	r3, [r3, #13]
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f001 fff7 	bl	8013df0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2200      	movs	r2, #0
 8011e06:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e0e:	69db      	ldr	r3, [r3, #28]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00b      	beq.n	8011e2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e1a:	69db      	ldr	r3, [r3, #28]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f007 ff21 	bl	8019c64 <free>
    phost->pActiveClass->pData = 0U;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e28:	2200      	movs	r2, #0
 8011e2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8011e2c:	2300      	movs	r3, #0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b084      	sub	sp, #16
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e44:	69db      	ldr	r3, [r3, #28]
 8011e46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	3340      	adds	r3, #64	@ 0x40
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 f8b1 	bl	8011fb6 <GetLineCoding>
 8011e54:	4603      	mov	r3, r0
 8011e56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8011e58:	7afb      	ldrb	r3, [r7, #11]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d105      	bne.n	8011e6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011e64:	2102      	movs	r1, #2
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8011e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3710      	adds	r7, #16
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8011e80:	2300      	movs	r3, #0
 8011e82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011e8a:	69db      	ldr	r3, [r3, #28]
 8011e8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8011e94:	2b04      	cmp	r3, #4
 8011e96:	d877      	bhi.n	8011f88 <USBH_CDC_Process+0x114>
 8011e98:	a201      	add	r2, pc, #4	@ (adr r2, 8011ea0 <USBH_CDC_Process+0x2c>)
 8011e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9e:	bf00      	nop
 8011ea0:	08011eb5 	.word	0x08011eb5
 8011ea4:	08011ebb 	.word	0x08011ebb
 8011ea8:	08011eeb 	.word	0x08011eeb
 8011eac:	08011f5f 	.word	0x08011f5f
 8011eb0:	08011f6d 	.word	0x08011f6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8011eb8:	e06d      	b.n	8011f96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 f897 	bl	8011ff4 <SetLineCoding>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011eca:	7bbb      	ldrb	r3, [r7, #14]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d104      	bne.n	8011eda <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	2202      	movs	r2, #2
 8011ed4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011ed8:	e058      	b.n	8011f8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8011eda:	7bbb      	ldrb	r3, [r7, #14]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d055      	beq.n	8011f8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	2204      	movs	r2, #4
 8011ee4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011ee8:	e050      	b.n	8011f8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	3340      	adds	r3, #64	@ 0x40
 8011eee:	4619      	mov	r1, r3
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f860 	bl	8011fb6 <GetLineCoding>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011efa:	7bbb      	ldrb	r3, [r7, #14]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d126      	bne.n	8011f4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f12:	791b      	ldrb	r3, [r3, #4]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d13b      	bne.n	8011f90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d133      	bne.n	8011f90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d12b      	bne.n	8011f90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d124      	bne.n	8011f90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 f96a 	bl	8012220 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8011f4c:	e020      	b.n	8011f90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8011f4e:	7bbb      	ldrb	r3, [r7, #14]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d01d      	beq.n	8011f90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2204      	movs	r2, #4
 8011f58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8011f5c:	e018      	b.n	8011f90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f867 	bl	8012032 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 f8e6 	bl	8012136 <CDC_ProcessReception>
      break;
 8011f6a:	e014      	b.n	8011f96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f001 f8ff 	bl	8013172 <USBH_ClrFeature>
 8011f74:	4603      	mov	r3, r0
 8011f76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8011f78:	7bbb      	ldrb	r3, [r7, #14]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d10a      	bne.n	8011f94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2200      	movs	r2, #0
 8011f82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8011f86:	e005      	b.n	8011f94 <USBH_CDC_Process+0x120>

    default:
      break;
 8011f88:	bf00      	nop
 8011f8a:	e004      	b.n	8011f96 <USBH_CDC_Process+0x122>
      break;
 8011f8c:	bf00      	nop
 8011f8e:	e002      	b.n	8011f96 <USBH_CDC_Process+0x122>
      break;
 8011f90:	bf00      	nop
 8011f92:	e000      	b.n	8011f96 <USBH_CDC_Process+0x122>
      break;
 8011f94:	bf00      	nop

  }

  return status;
 8011f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	370c      	adds	r7, #12
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr

08011fb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b082      	sub	sp, #8
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
 8011fbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	22a1      	movs	r2, #161	@ 0xa1
 8011fc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2221      	movs	r2, #33	@ 0x21
 8011fca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2207      	movs	r2, #7
 8011fdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	2207      	movs	r2, #7
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f001 fbf9 	bl	80137dc <USBH_CtlReq>
 8011fea:	4603      	mov	r3, r0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3708      	adds	r7, #8
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2221      	movs	r2, #33	@ 0x21
 8012002:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2220      	movs	r2, #32
 8012008:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2200      	movs	r2, #0
 801200e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2200      	movs	r2, #0
 8012014:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2207      	movs	r2, #7
 801201a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	2207      	movs	r2, #7
 8012020:	4619      	mov	r1, r3
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f001 fbda 	bl	80137dc <USBH_CtlReq>
 8012028:	4603      	mov	r3, r0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3708      	adds	r7, #8
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b086      	sub	sp, #24
 8012036:	af02      	add	r7, sp, #8
 8012038:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012040:	69db      	ldr	r3, [r3, #28]
 8012042:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012044:	2300      	movs	r3, #0
 8012046:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 801204e:	2b01      	cmp	r3, #1
 8012050:	d002      	beq.n	8012058 <CDC_ProcessTransmission+0x26>
 8012052:	2b02      	cmp	r3, #2
 8012054:	d023      	beq.n	801209e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012056:	e06a      	b.n	801212e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801205c:	68fa      	ldr	r2, [r7, #12]
 801205e:	8b12      	ldrh	r2, [r2, #24]
 8012060:	4293      	cmp	r3, r2
 8012062:	d90b      	bls.n	801207c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	69d9      	ldr	r1, [r3, #28]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	8b1a      	ldrh	r2, [r3, #24]
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	7b5b      	ldrb	r3, [r3, #13]
 8012070:	2001      	movs	r0, #1
 8012072:	9000      	str	r0, [sp, #0]
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f001 fe28 	bl	8013cca <USBH_BulkSendData>
 801207a:	e00b      	b.n	8012094 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8012084:	b29a      	uxth	r2, r3
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	7b5b      	ldrb	r3, [r3, #13]
 801208a:	2001      	movs	r0, #1
 801208c:	9000      	str	r0, [sp, #0]
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f001 fe1b 	bl	8013cca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2202      	movs	r2, #2
 8012098:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 801209c:	e047      	b.n	801212e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	7b5b      	ldrb	r3, [r3, #13]
 80120a2:	4619      	mov	r1, r3
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f007 fd25 	bl	8019af4 <USBH_LL_GetURBState>
 80120aa:	4603      	mov	r3, r0
 80120ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80120ae:	7afb      	ldrb	r3, [r7, #11]
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d12e      	bne.n	8012112 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b8:	68fa      	ldr	r2, [r7, #12]
 80120ba:	8b12      	ldrh	r2, [r2, #24]
 80120bc:	4293      	cmp	r3, r2
 80120be:	d90e      	bls.n	80120de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	8b12      	ldrh	r2, [r2, #24]
 80120c8:	1a9a      	subs	r2, r3, r2
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	69db      	ldr	r3, [r3, #28]
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	8b12      	ldrh	r2, [r2, #24]
 80120d6:	441a      	add	r2, r3
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	61da      	str	r2, [r3, #28]
 80120dc:	e002      	b.n	80120e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2200      	movs	r2, #0
 80120e2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d004      	beq.n	80120f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2201      	movs	r2, #1
 80120f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80120f4:	e006      	b.n	8012104 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2200      	movs	r2, #0
 80120fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 f87a 	bl	80121f8 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012104:	2300      	movs	r3, #0
 8012106:	2200      	movs	r2, #0
 8012108:	2104      	movs	r1, #4
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 febc 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8012110:	e00c      	b.n	801212c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8012112:	7afb      	ldrb	r3, [r7, #11]
 8012114:	2b02      	cmp	r3, #2
 8012116:	d109      	bne.n	801212c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2201      	movs	r2, #1
 801211c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012120:	2300      	movs	r3, #0
 8012122:	2200      	movs	r2, #0
 8012124:	2104      	movs	r1, #4
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 feae 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 801212c:	bf00      	nop
  }
}
 801212e:	bf00      	nop
 8012130:	3710      	adds	r7, #16
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b086      	sub	sp, #24
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012144:	69db      	ldr	r3, [r3, #28]
 8012146:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012148:	2300      	movs	r3, #0
 801214a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8012152:	2b03      	cmp	r3, #3
 8012154:	d002      	beq.n	801215c <CDC_ProcessReception+0x26>
 8012156:	2b04      	cmp	r3, #4
 8012158:	d00e      	beq.n	8012178 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 801215a:	e049      	b.n	80121f0 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	6a19      	ldr	r1, [r3, #32]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	8b5a      	ldrh	r2, [r3, #26]
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	7b1b      	ldrb	r3, [r3, #12]
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f001 fdd3 	bl	8013d14 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	2204      	movs	r2, #4
 8012172:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8012176:	e03b      	b.n	80121f0 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	7b1b      	ldrb	r3, [r3, #12]
 801217c:	4619      	mov	r1, r3
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f007 fcb8 	bl	8019af4 <USBH_LL_GetURBState>
 8012184:	4603      	mov	r3, r0
 8012186:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012188:	7cfb      	ldrb	r3, [r7, #19]
 801218a:	2b01      	cmp	r3, #1
 801218c:	d12f      	bne.n	80121ee <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	7b1b      	ldrb	r3, [r3, #12]
 8012192:	4619      	mov	r1, r3
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f007 fc1b 	bl	80199d0 <USBH_LL_GetLastXferSize>
 801219a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d016      	beq.n	80121d4 <CDC_ProcessReception+0x9e>
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	8b5b      	ldrh	r3, [r3, #26]
 80121aa:	461a      	mov	r2, r3
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d110      	bne.n	80121d4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	1ad2      	subs	r2, r2, r3
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	6a1a      	ldr	r2, [r3, #32]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	441a      	add	r2, r3
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2203      	movs	r2, #3
 80121ce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80121d2:	e006      	b.n	80121e2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 f815 	bl	801220c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 80121e2:	2300      	movs	r3, #0
 80121e4:	2200      	movs	r2, #0
 80121e6:	2104      	movs	r1, #4
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f000 fe4d 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 80121ee:	bf00      	nop
  }
}
 80121f0:	bf00      	nop
 80121f2:	3718      	adds	r7, #24
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012228:	bf00      	nop
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8012234:	b5b0      	push	{r4, r5, r7, lr}
 8012236:	b090      	sub	sp, #64	@ 0x40
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	4613      	mov	r3, r2
 8012240:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d101      	bne.n	801224c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012248:	2302      	movs	r3, #2
 801224a:	e04d      	b.n	80122e8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	79fa      	ldrb	r2, [r7, #7]
 8012250:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	2200      	movs	r2, #0
 8012258:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2200      	movs	r2, #0
 8012260:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f000 f847 	bl	80122f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2200      	movs	r2, #0
 801226e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2200      	movs	r2, #0
 8012276:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2200      	movs	r2, #0
 801227e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2200      	movs	r2, #0
 8012286:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d003      	beq.n	8012298 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012298:	4b15      	ldr	r3, [pc, #84]	@ (80122f0 <USBH_Init+0xbc>)
 801229a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801229e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80122a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80122a8:	2100      	movs	r1, #0
 80122aa:	4618      	mov	r0, r3
 80122ac:	f004 fb23 	bl	80168f6 <osMessageCreate>
 80122b0:	4602      	mov	r2, r0
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80122b8:	4b0e      	ldr	r3, [pc, #56]	@ (80122f4 <USBH_Init+0xc0>)
 80122ba:	f107 0414 	add.w	r4, r7, #20
 80122be:	461d      	mov	r5, r3
 80122c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80122c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80122cc:	f107 0314 	add.w	r3, r7, #20
 80122d0:	68f9      	ldr	r1, [r7, #12]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f004 f9d8 	bl	8016688 <osThreadCreate>
 80122d8:	4602      	mov	r2, r0
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	f007 fac1 	bl	8019868 <USBH_LL_Init>

  return USBH_OK;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3740      	adds	r7, #64	@ 0x40
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bdb0      	pop	{r4, r5, r7, pc}
 80122f0:	0801c4e4 	.word	0x0801c4e4
 80122f4:	0801c500 	.word	0x0801c500

080122f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012300:	2300      	movs	r3, #0
 8012302:	60fb      	str	r3, [r7, #12]
 8012304:	e009      	b.n	801231a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	33e0      	adds	r3, #224	@ 0xe0
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	4413      	add	r3, r2
 8012310:	2200      	movs	r2, #0
 8012312:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	3301      	adds	r3, #1
 8012318:	60fb      	str	r3, [r7, #12]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	2b0f      	cmp	r3, #15
 801231e:	d9f2      	bls.n	8012306 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012320:	2300      	movs	r3, #0
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	e009      	b.n	801233a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	4413      	add	r3, r2
 801232c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012330:	2200      	movs	r2, #0
 8012332:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	3301      	adds	r3, #1
 8012338:	60fb      	str	r3, [r7, #12]
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012340:	d3f1      	bcc.n	8012326 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2201      	movs	r2, #1
 8012352:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2200      	movs	r2, #0
 8012358:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2201      	movs	r2, #1
 8012360:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2240      	movs	r2, #64	@ 0x40
 8012366:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2200      	movs	r2, #0
 8012372:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2201      	movs	r2, #1
 801237a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2200      	movs	r2, #0
 801238a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	331c      	adds	r3, #28
 8012392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012396:	2100      	movs	r1, #0
 8012398:	4618      	mov	r0, r3
 801239a:	f007 fdad 	bl	8019ef8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80123a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123a8:	2100      	movs	r1, #0
 80123aa:	4618      	mov	r0, r3
 80123ac:	f007 fda4 	bl	8019ef8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80123b6:	2212      	movs	r2, #18
 80123b8:	2100      	movs	r1, #0
 80123ba:	4618      	mov	r0, r3
 80123bc:	f007 fd9c 	bl	8019ef8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80123c6:	223e      	movs	r2, #62	@ 0x3e
 80123c8:	2100      	movs	r1, #0
 80123ca:	4618      	mov	r0, r3
 80123cc:	f007 fd94 	bl	8019ef8 <memset>

  return USBH_OK;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80123da:	b480      	push	{r7}
 80123dc:	b085      	sub	sp, #20
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
 80123e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80123e4:	2300      	movs	r3, #0
 80123e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d016      	beq.n	801241c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d10e      	bne.n	8012416 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80123fe:	1c59      	adds	r1, r3, #1
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	33de      	adds	r3, #222	@ 0xde
 801240a:	6839      	ldr	r1, [r7, #0]
 801240c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012410:	2300      	movs	r3, #0
 8012412:	73fb      	strb	r3, [r7, #15]
 8012414:	e004      	b.n	8012420 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012416:	2302      	movs	r3, #2
 8012418:	73fb      	strb	r3, [r7, #15]
 801241a:	e001      	b.n	8012420 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801241c:	2302      	movs	r3, #2
 801241e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012420:	7bfb      	ldrb	r3, [r7, #15]
}
 8012422:	4618      	mov	r0, r3
 8012424:	3714      	adds	r7, #20
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801242e:	b480      	push	{r7}
 8012430:	b085      	sub	sp, #20
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
 8012436:	460b      	mov	r3, r1
 8012438:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801243a:	2300      	movs	r3, #0
 801243c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8012444:	78fa      	ldrb	r2, [r7, #3]
 8012446:	429a      	cmp	r2, r3
 8012448:	d204      	bcs.n	8012454 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	78fa      	ldrb	r2, [r7, #3]
 801244e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8012452:	e001      	b.n	8012458 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8012454:	2302      	movs	r3, #2
 8012456:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012458:	7bfb      	ldrb	r3, [r7, #15]
}
 801245a:	4618      	mov	r0, r3
 801245c:	3714      	adds	r7, #20
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8012466:	b480      	push	{r7}
 8012468:	b087      	sub	sp, #28
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	4608      	mov	r0, r1
 8012470:	4611      	mov	r1, r2
 8012472:	461a      	mov	r2, r3
 8012474:	4603      	mov	r3, r0
 8012476:	70fb      	strb	r3, [r7, #3]
 8012478:	460b      	mov	r3, r1
 801247a:	70bb      	strb	r3, [r7, #2]
 801247c:	4613      	mov	r3, r2
 801247e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8012480:	2300      	movs	r3, #0
 8012482:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8012484:	2300      	movs	r3, #0
 8012486:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801248e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012490:	e025      	b.n	80124de <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012492:	7dfb      	ldrb	r3, [r7, #23]
 8012494:	221a      	movs	r2, #26
 8012496:	fb02 f303 	mul.w	r3, r2, r3
 801249a:	3308      	adds	r3, #8
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	4413      	add	r3, r2
 80124a0:	3302      	adds	r3, #2
 80124a2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	795b      	ldrb	r3, [r3, #5]
 80124a8:	78fa      	ldrb	r2, [r7, #3]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d002      	beq.n	80124b4 <USBH_FindInterface+0x4e>
 80124ae:	78fb      	ldrb	r3, [r7, #3]
 80124b0:	2bff      	cmp	r3, #255	@ 0xff
 80124b2:	d111      	bne.n	80124d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80124b8:	78ba      	ldrb	r2, [r7, #2]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d002      	beq.n	80124c4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80124be:	78bb      	ldrb	r3, [r7, #2]
 80124c0:	2bff      	cmp	r3, #255	@ 0xff
 80124c2:	d109      	bne.n	80124d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80124c8:	787a      	ldrb	r2, [r7, #1]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d002      	beq.n	80124d4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80124ce:	787b      	ldrb	r3, [r7, #1]
 80124d0:	2bff      	cmp	r3, #255	@ 0xff
 80124d2:	d101      	bne.n	80124d8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80124d4:	7dfb      	ldrb	r3, [r7, #23]
 80124d6:	e006      	b.n	80124e6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	3301      	adds	r3, #1
 80124dc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80124de:	7dfb      	ldrb	r3, [r7, #23]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d9d6      	bls.n	8012492 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80124e4:	23ff      	movs	r3, #255	@ 0xff
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	371c      	adds	r7, #28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr

080124f2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80124f2:	b580      	push	{r7, lr}
 80124f4:	b082      	sub	sp, #8
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f007 f9f0 	bl	80198e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8012500:	2101      	movs	r1, #1
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f007 fb09 	bl	8019b1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012508:	2300      	movs	r3, #0
}
 801250a:	4618      	mov	r0, r3
 801250c:	3708      	adds	r7, #8
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}
	...

08012514 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b088      	sub	sp, #32
 8012518:	af04      	add	r7, sp, #16
 801251a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801251c:	2302      	movs	r3, #2
 801251e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012520:	2300      	movs	r3, #0
 8012522:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b01      	cmp	r3, #1
 801252e:	d102      	bne.n	8012536 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2203      	movs	r2, #3
 8012534:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	b2db      	uxtb	r3, r3
 801253c:	2b0b      	cmp	r3, #11
 801253e:	f200 81f5 	bhi.w	801292c <USBH_Process+0x418>
 8012542:	a201      	add	r2, pc, #4	@ (adr r2, 8012548 <USBH_Process+0x34>)
 8012544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012548:	08012579 	.word	0x08012579
 801254c:	080125b7 	.word	0x080125b7
 8012550:	0801262d 	.word	0x0801262d
 8012554:	080128bb 	.word	0x080128bb
 8012558:	0801292d 	.word	0x0801292d
 801255c:	080126d9 	.word	0x080126d9
 8012560:	08012855 	.word	0x08012855
 8012564:	0801271b 	.word	0x0801271b
 8012568:	08012747 	.word	0x08012747
 801256c:	0801276f 	.word	0x0801276f
 8012570:	080127bd 	.word	0x080127bd
 8012574:	080128a3 	.word	0x080128a3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 801257e:	b2db      	uxtb	r3, r3
 8012580:	2b00      	cmp	r3, #0
 8012582:	f000 81d5 	beq.w	8012930 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2201      	movs	r2, #1
 801258a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801258c:	20c8      	movs	r0, #200	@ 0xc8
 801258e:	f007 fb0e 	bl	8019bae <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f007 fa01 	bl	801999a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2200      	movs	r2, #0
 801259c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2200      	movs	r2, #0
 80125a4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80125a8:	2300      	movs	r3, #0
 80125aa:	2200      	movs	r2, #0
 80125ac:	2101      	movs	r1, #1
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fc6a 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80125b4:	e1bc      	b.n	8012930 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d107      	bne.n	80125d2 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2200      	movs	r2, #0
 80125c6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2202      	movs	r2, #2
 80125ce:	701a      	strb	r2, [r3, #0]
 80125d0:	e025      	b.n	801261e <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80125d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80125dc:	d914      	bls.n	8012608 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80125e4:	3301      	adds	r3, #1
 80125e6:	b2da      	uxtb	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80125f4:	2b03      	cmp	r3, #3
 80125f6:	d903      	bls.n	8012600 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	220d      	movs	r2, #13
 80125fc:	701a      	strb	r2, [r3, #0]
 80125fe:	e00e      	b.n	801261e <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	701a      	strb	r2, [r3, #0]
 8012606:	e00a      	b.n	801261e <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801260e:	f103 020a 	add.w	r2, r3, #10
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8012618:	200a      	movs	r0, #10
 801261a:	f007 fac8 	bl	8019bae <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801261e:	2300      	movs	r3, #0
 8012620:	2200      	movs	r2, #0
 8012622:	2101      	movs	r1, #1
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 fc2f 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801262a:	e188      	b.n	801293e <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012632:	2b00      	cmp	r3, #0
 8012634:	d005      	beq.n	8012642 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801263c:	2104      	movs	r1, #4
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8012642:	2064      	movs	r0, #100	@ 0x64
 8012644:	f007 fab3 	bl	8019bae <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f007 f97f 	bl	801994c <USBH_LL_GetSpeed>
 801264e:	4603      	mov	r3, r0
 8012650:	461a      	mov	r2, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2205      	movs	r2, #5
 801265c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 801265e:	2100      	movs	r1, #0
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f001 fba4 	bl	8013dae <USBH_AllocPipe>
 8012666:	4603      	mov	r3, r0
 8012668:	461a      	mov	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 801266e:	2180      	movs	r1, #128	@ 0x80
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f001 fb9c 	bl	8013dae <USBH_AllocPipe>
 8012676:	4603      	mov	r3, r0
 8012678:	461a      	mov	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	7919      	ldrb	r1, [r3, #4]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801268e:	687a      	ldr	r2, [r7, #4]
 8012690:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012692:	9202      	str	r2, [sp, #8]
 8012694:	2200      	movs	r2, #0
 8012696:	9201      	str	r2, [sp, #4]
 8012698:	9300      	str	r3, [sp, #0]
 801269a:	4603      	mov	r3, r0
 801269c:	2280      	movs	r2, #128	@ 0x80
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f001 fb56 	bl	8013d50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	7959      	ldrb	r1, [r3, #5]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80126b8:	9202      	str	r2, [sp, #8]
 80126ba:	2200      	movs	r2, #0
 80126bc:	9201      	str	r2, [sp, #4]
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	4603      	mov	r3, r0
 80126c2:	2200      	movs	r2, #0
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f001 fb43 	bl	8013d50 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80126ca:	2300      	movs	r3, #0
 80126cc:	2200      	movs	r2, #0
 80126ce:	2101      	movs	r1, #1
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 fbd9 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80126d6:	e132      	b.n	801293e <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 f935 	bl	8012948 <USBH_HandleEnum>
 80126de:	4603      	mov	r3, r0
 80126e0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80126e2:	7bbb      	ldrb	r3, [r7, #14]
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	f040 8124 	bne.w	8012934 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2200      	movs	r2, #0
 80126f0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d103      	bne.n	8012706 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2208      	movs	r2, #8
 8012702:	701a      	strb	r2, [r3, #0]
 8012704:	e002      	b.n	801270c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2207      	movs	r2, #7
 801270a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801270c:	2300      	movs	r3, #0
 801270e:	2200      	movs	r2, #0
 8012710:	2105      	movs	r1, #5
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fbb8 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012718:	e10c      	b.n	8012934 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012720:	2b00      	cmp	r3, #0
 8012722:	f000 8109 	beq.w	8012938 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801272c:	2101      	movs	r1, #1
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2208      	movs	r2, #8
 8012736:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012738:	2300      	movs	r3, #0
 801273a:	2200      	movs	r2, #0
 801273c:	2105      	movs	r1, #5
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fba2 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8012744:	e0f8      	b.n	8012938 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 801274c:	4619      	mov	r1, r3
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 fcc8 	bl	80130e4 <USBH_SetCfg>
 8012754:	4603      	mov	r3, r0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d102      	bne.n	8012760 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2209      	movs	r2, #9
 801275e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012760:	2300      	movs	r3, #0
 8012762:	2200      	movs	r2, #0
 8012764:	2101      	movs	r1, #1
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 fb8e 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801276c:	e0e7      	b.n	801293e <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8012774:	f003 0320 	and.w	r3, r3, #32
 8012778:	2b00      	cmp	r3, #0
 801277a:	d015      	beq.n	80127a8 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801277c:	2101      	movs	r1, #1
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 fcd3 	bl	801312a <USBH_SetFeature>
 8012784:	4603      	mov	r3, r0
 8012786:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012788:	7bbb      	ldrb	r3, [r7, #14]
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b00      	cmp	r3, #0
 801278e:	d103      	bne.n	8012798 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	220a      	movs	r2, #10
 8012794:	701a      	strb	r2, [r3, #0]
 8012796:	e00a      	b.n	80127ae <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8012798:	7bbb      	ldrb	r3, [r7, #14]
 801279a:	b2db      	uxtb	r3, r3
 801279c:	2b03      	cmp	r3, #3
 801279e:	d106      	bne.n	80127ae <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	220a      	movs	r2, #10
 80127a4:	701a      	strb	r2, [r3, #0]
 80127a6:	e002      	b.n	80127ae <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	220a      	movs	r2, #10
 80127ac:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80127ae:	2300      	movs	r3, #0
 80127b0:	2200      	movs	r2, #0
 80127b2:	2101      	movs	r1, #1
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f000 fb67 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80127ba:	e0c0      	b.n	801293e <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d03f      	beq.n	8012846 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80127ce:	2300      	movs	r3, #0
 80127d0:	73fb      	strb	r3, [r7, #15]
 80127d2:	e016      	b.n	8012802 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80127d4:	7bfa      	ldrb	r2, [r7, #15]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	32de      	adds	r2, #222	@ 0xde
 80127da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127de:	791a      	ldrb	r2, [r3, #4]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d108      	bne.n	80127fc <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 80127ea:	7bfa      	ldrb	r2, [r7, #15]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	32de      	adds	r2, #222	@ 0xde
 80127f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80127fa:	e005      	b.n	8012808 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80127fc:	7bfb      	ldrb	r3, [r7, #15]
 80127fe:	3301      	adds	r3, #1
 8012800:	73fb      	strb	r3, [r7, #15]
 8012802:	7bfb      	ldrb	r3, [r7, #15]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d0e5      	beq.n	80127d4 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801280e:	2b00      	cmp	r3, #0
 8012810:	d016      	beq.n	8012840 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	4798      	blx	r3
 801281e:	4603      	mov	r3, r0
 8012820:	2b00      	cmp	r3, #0
 8012822:	d109      	bne.n	8012838 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2206      	movs	r2, #6
 8012828:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012830:	2103      	movs	r1, #3
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	4798      	blx	r3
 8012836:	e006      	b.n	8012846 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	220d      	movs	r2, #13
 801283c:	701a      	strb	r2, [r3, #0]
 801283e:	e002      	b.n	8012846 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	220d      	movs	r2, #13
 8012844:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012846:	2300      	movs	r3, #0
 8012848:	2200      	movs	r2, #0
 801284a:	2105      	movs	r1, #5
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f000 fb1b 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012852:	e074      	b.n	801293e <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801285a:	2b00      	cmp	r3, #0
 801285c:	d017      	beq.n	801288e <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012864:	691b      	ldr	r3, [r3, #16]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	4798      	blx	r3
 801286a:	4603      	mov	r3, r0
 801286c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801286e:	7bbb      	ldrb	r3, [r7, #14]
 8012870:	b2db      	uxtb	r3, r3
 8012872:	2b00      	cmp	r3, #0
 8012874:	d103      	bne.n	801287e <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	220b      	movs	r2, #11
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	e00a      	b.n	8012894 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 801287e:	7bbb      	ldrb	r3, [r7, #14]
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b02      	cmp	r3, #2
 8012884:	d106      	bne.n	8012894 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	220d      	movs	r2, #13
 801288a:	701a      	strb	r2, [r3, #0]
 801288c:	e002      	b.n	8012894 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	220d      	movs	r2, #13
 8012892:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012894:	2300      	movs	r3, #0
 8012896:	2200      	movs	r2, #0
 8012898:	2105      	movs	r1, #5
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f000 faf4 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80128a0:	e04d      	b.n	801293e <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d047      	beq.n	801293c <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128b2:	695b      	ldr	r3, [r3, #20]
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	4798      	blx	r3
      }
      break;
 80128b8:	e040      	b.n	801293c <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f7ff fd18 	bl	80122f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d009      	beq.n	80128e6 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d005      	beq.n	80128fc <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80128f6:	2105      	movs	r1, #5
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8012902:	b2db      	uxtb	r3, r3
 8012904:	2b01      	cmp	r3, #1
 8012906:	d107      	bne.n	8012918 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff fdee 	bl	80124f2 <USBH_Start>
 8012916:	e002      	b.n	801291e <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f006 ffe1 	bl	80198e0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801291e:	2300      	movs	r3, #0
 8012920:	2200      	movs	r2, #0
 8012922:	2101      	movs	r1, #1
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f000 faaf 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801292a:	e008      	b.n	801293e <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 801292c:	bf00      	nop
 801292e:	e006      	b.n	801293e <USBH_Process+0x42a>
      break;
 8012930:	bf00      	nop
 8012932:	e004      	b.n	801293e <USBH_Process+0x42a>
      break;
 8012934:	bf00      	nop
 8012936:	e002      	b.n	801293e <USBH_Process+0x42a>
    break;
 8012938:	bf00      	nop
 801293a:	e000      	b.n	801293e <USBH_Process+0x42a>
      break;
 801293c:	bf00      	nop
  }
  return USBH_OK;
 801293e:	2300      	movs	r3, #0
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af04      	add	r7, sp, #16
 801294e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8012950:	2301      	movs	r3, #1
 8012952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8012954:	2301      	movs	r3, #1
 8012956:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	785b      	ldrb	r3, [r3, #1]
 801295c:	2b07      	cmp	r3, #7
 801295e:	f200 81db 	bhi.w	8012d18 <USBH_HandleEnum+0x3d0>
 8012962:	a201      	add	r2, pc, #4	@ (adr r2, 8012968 <USBH_HandleEnum+0x20>)
 8012964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012968:	08012989 	.word	0x08012989
 801296c:	08012a43 	.word	0x08012a43
 8012970:	08012aad 	.word	0x08012aad
 8012974:	08012b37 	.word	0x08012b37
 8012978:	08012ba1 	.word	0x08012ba1
 801297c:	08012c11 	.word	0x08012c11
 8012980:	08012c7b 	.word	0x08012c7b
 8012984:	08012cd9 	.word	0x08012cd9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012988:	2108      	movs	r1, #8
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f000 fac7 	bl	8012f1e <USBH_Get_DevDesc>
 8012990:	4603      	mov	r3, r0
 8012992:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012994:	7bbb      	ldrb	r3, [r7, #14]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d12e      	bne.n	80129f8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2201      	movs	r2, #1
 80129a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	7919      	ldrb	r1, [r3, #4]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80129ba:	687a      	ldr	r2, [r7, #4]
 80129bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80129be:	9202      	str	r2, [sp, #8]
 80129c0:	2200      	movs	r2, #0
 80129c2:	9201      	str	r2, [sp, #4]
 80129c4:	9300      	str	r3, [sp, #0]
 80129c6:	4603      	mov	r3, r0
 80129c8:	2280      	movs	r2, #128	@ 0x80
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f001 f9c0 	bl	8013d50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7959      	ldrb	r1, [r3, #5]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80129e4:	9202      	str	r2, [sp, #8]
 80129e6:	2200      	movs	r2, #0
 80129e8:	9201      	str	r2, [sp, #4]
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	4603      	mov	r3, r0
 80129ee:	2200      	movs	r2, #0
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f001 f9ad 	bl	8013d50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80129f6:	e191      	b.n	8012d1c <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80129f8:	7bbb      	ldrb	r3, [r7, #14]
 80129fa:	2b03      	cmp	r3, #3
 80129fc:	f040 818e 	bne.w	8012d1c <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a06:	3301      	adds	r3, #1
 8012a08:	b2da      	uxtb	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a16:	2b03      	cmp	r3, #3
 8012a18:	d903      	bls.n	8012a22 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	220d      	movs	r2, #13
 8012a1e:	701a      	strb	r2, [r3, #0]
      break;
 8012a20:	e17c      	b.n	8012d1c <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	795b      	ldrb	r3, [r3, #5]
 8012a26:	4619      	mov	r1, r3
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f001 f9e1 	bl	8013df0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	791b      	ldrb	r3, [r3, #4]
 8012a32:	4619      	mov	r1, r3
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f001 f9db 	bl	8013df0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	701a      	strb	r2, [r3, #0]
      break;
 8012a40:	e16c      	b.n	8012d1c <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012a42:	2112      	movs	r1, #18
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 fa6a 	bl	8012f1e <USBH_Get_DevDesc>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012a4e:	7bbb      	ldrb	r3, [r7, #14]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d103      	bne.n	8012a5c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2202      	movs	r2, #2
 8012a58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012a5a:	e161      	b.n	8012d20 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012a5c:	7bbb      	ldrb	r3, [r7, #14]
 8012a5e:	2b03      	cmp	r3, #3
 8012a60:	f040 815e 	bne.w	8012d20 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	b2da      	uxtb	r2, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012a7a:	2b03      	cmp	r3, #3
 8012a7c:	d903      	bls.n	8012a86 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	220d      	movs	r2, #13
 8012a82:	701a      	strb	r2, [r3, #0]
      break;
 8012a84:	e14c      	b.n	8012d20 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	795b      	ldrb	r3, [r3, #5]
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f001 f9af 	bl	8013df0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	791b      	ldrb	r3, [r3, #4]
 8012a96:	4619      	mov	r1, r3
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f001 f9a9 	bl	8013df0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	701a      	strb	r2, [r3, #0]
      break;
 8012aaa:	e139      	b.n	8012d20 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012aac:	2101      	movs	r1, #1
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 faf4 	bl	801309c <USBH_SetAddress>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012ab8:	7bbb      	ldrb	r3, [r7, #14]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d130      	bne.n	8012b20 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8012abe:	2002      	movs	r0, #2
 8012ac0:	f007 f875 	bl	8019bae <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2203      	movs	r2, #3
 8012ad0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	7919      	ldrb	r1, [r3, #4]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012ae6:	9202      	str	r2, [sp, #8]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	9201      	str	r2, [sp, #4]
 8012aec:	9300      	str	r3, [sp, #0]
 8012aee:	4603      	mov	r3, r0
 8012af0:	2280      	movs	r2, #128	@ 0x80
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f001 f92c 	bl	8013d50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	7959      	ldrb	r1, [r3, #5]
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012b0c:	9202      	str	r2, [sp, #8]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	9201      	str	r2, [sp, #4]
 8012b12:	9300      	str	r3, [sp, #0]
 8012b14:	4603      	mov	r3, r0
 8012b16:	2200      	movs	r2, #0
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f001 f919 	bl	8013d50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012b1e:	e101      	b.n	8012d24 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b20:	7bbb      	ldrb	r3, [r7, #14]
 8012b22:	2b03      	cmp	r3, #3
 8012b24:	f040 80fe 	bne.w	8012d24 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	220d      	movs	r2, #13
 8012b2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2200      	movs	r2, #0
 8012b32:	705a      	strb	r2, [r3, #1]
      break;
 8012b34:	e0f6      	b.n	8012d24 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8012b36:	2109      	movs	r1, #9
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 fa1c 	bl	8012f76 <USBH_Get_CfgDesc>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012b42:	7bbb      	ldrb	r3, [r7, #14]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d103      	bne.n	8012b50 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2204      	movs	r2, #4
 8012b4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012b4e:	e0eb      	b.n	8012d28 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012b50:	7bbb      	ldrb	r3, [r7, #14]
 8012b52:	2b03      	cmp	r3, #3
 8012b54:	f040 80e8 	bne.w	8012d28 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012b5e:	3301      	adds	r3, #1
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012b6e:	2b03      	cmp	r3, #3
 8012b70:	d903      	bls.n	8012b7a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	220d      	movs	r2, #13
 8012b76:	701a      	strb	r2, [r3, #0]
      break;
 8012b78:	e0d6      	b.n	8012d28 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	795b      	ldrb	r3, [r3, #5]
 8012b7e:	4619      	mov	r1, r3
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f001 f935 	bl	8013df0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	791b      	ldrb	r3, [r3, #4]
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f001 f92f 	bl	8013df0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	701a      	strb	r2, [r3, #0]
      break;
 8012b9e:	e0c3      	b.n	8012d28 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f000 f9e4 	bl	8012f76 <USBH_Get_CfgDesc>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012bb2:	7bbb      	ldrb	r3, [r7, #14]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d103      	bne.n	8012bc0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2205      	movs	r2, #5
 8012bbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012bbe:	e0b5      	b.n	8012d2c <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012bc0:	7bbb      	ldrb	r3, [r7, #14]
 8012bc2:	2b03      	cmp	r3, #3
 8012bc4:	f040 80b2 	bne.w	8012d2c <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012bce:	3301      	adds	r3, #1
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012bde:	2b03      	cmp	r3, #3
 8012be0:	d903      	bls.n	8012bea <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	220d      	movs	r2, #13
 8012be6:	701a      	strb	r2, [r3, #0]
      break;
 8012be8:	e0a0      	b.n	8012d2c <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	795b      	ldrb	r3, [r3, #5]
 8012bee:	4619      	mov	r1, r3
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f001 f8fd 	bl	8013df0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	791b      	ldrb	r3, [r3, #4]
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f001 f8f7 	bl	8013df0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2200      	movs	r2, #0
 8012c06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	701a      	strb	r2, [r3, #0]
      break;
 8012c0e:	e08d      	b.n	8012d2c <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d025      	beq.n	8012c66 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012c26:	23ff      	movs	r3, #255	@ 0xff
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 f9ce 	bl	8012fca <USBH_Get_StringDesc>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012c32:	7bbb      	ldrb	r3, [r7, #14]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d109      	bne.n	8012c4c <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2206      	movs	r2, #6
 8012c3c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012c3e:	2300      	movs	r3, #0
 8012c40:	2200      	movs	r2, #0
 8012c42:	2105      	movs	r1, #5
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f000 f91f 	bl	8012e88 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012c4a:	e071      	b.n	8012d30 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012c4c:	7bbb      	ldrb	r3, [r7, #14]
 8012c4e:	2b03      	cmp	r3, #3
 8012c50:	d16e      	bne.n	8012d30 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2206      	movs	r2, #6
 8012c56:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012c58:	2300      	movs	r3, #0
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2105      	movs	r1, #5
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f000 f912 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8012c64:	e064      	b.n	8012d30 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2206      	movs	r2, #6
 8012c6a:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	2200      	movs	r2, #0
 8012c70:	2105      	movs	r1, #5
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 f908 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8012c78:	e05a      	b.n	8012d30 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d01f      	beq.n	8012cc4 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8012c90:	23ff      	movs	r3, #255	@ 0xff
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 f999 	bl	8012fca <USBH_Get_StringDesc>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012c9c:	7bbb      	ldrb	r3, [r7, #14]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d103      	bne.n	8012caa <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2207      	movs	r2, #7
 8012ca6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012ca8:	e044      	b.n	8012d34 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012caa:	7bbb      	ldrb	r3, [r7, #14]
 8012cac:	2b03      	cmp	r3, #3
 8012cae:	d141      	bne.n	8012d34 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2207      	movs	r2, #7
 8012cb4:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	2200      	movs	r2, #0
 8012cba:	2105      	movs	r1, #5
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 f8e3 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8012cc2:	e037      	b.n	8012d34 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2207      	movs	r2, #7
 8012cc8:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cca:	2300      	movs	r3, #0
 8012ccc:	2200      	movs	r2, #0
 8012cce:	2105      	movs	r1, #5
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 f8d9 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8012cd6:	e02d      	b.n	8012d34 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d017      	beq.n	8012d12 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012cee:	23ff      	movs	r3, #255	@ 0xff
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 f96a 	bl	8012fca <USBH_Get_StringDesc>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012cfa:	7bbb      	ldrb	r3, [r7, #14]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d102      	bne.n	8012d06 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8012d00:	2300      	movs	r3, #0
 8012d02:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8012d04:	e018      	b.n	8012d38 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012d06:	7bbb      	ldrb	r3, [r7, #14]
 8012d08:	2b03      	cmp	r3, #3
 8012d0a:	d115      	bne.n	8012d38 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8012d10:	e012      	b.n	8012d38 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8012d12:	2300      	movs	r3, #0
 8012d14:	73fb      	strb	r3, [r7, #15]
      break;
 8012d16:	e00f      	b.n	8012d38 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8012d18:	bf00      	nop
 8012d1a:	e00e      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d1c:	bf00      	nop
 8012d1e:	e00c      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d20:	bf00      	nop
 8012d22:	e00a      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d24:	bf00      	nop
 8012d26:	e008      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d28:	bf00      	nop
 8012d2a:	e006      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d2c:	bf00      	nop
 8012d2e:	e004      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d30:	bf00      	nop
 8012d32:	e002      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d34:	bf00      	nop
 8012d36:	e000      	b.n	8012d3a <USBH_HandleEnum+0x3f2>
      break;
 8012d38:	bf00      	nop
  }
  return Status;
 8012d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	683a      	ldr	r2, [r7, #0]
 8012d52:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8012d56:	bf00      	nop
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr

08012d62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b082      	sub	sp, #8
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012d70:	1c5a      	adds	r2, r3, #1
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f000 f804 	bl	8012d86 <USBH_HandleSof>
}
 8012d7e:	bf00      	nop
 8012d80:	3708      	adds	r7, #8
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b082      	sub	sp, #8
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	2b0b      	cmp	r3, #11
 8012d96:	d10a      	bne.n	8012dae <USBH_HandleSof+0x28>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d005      	beq.n	8012dae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012da8:	699b      	ldr	r3, [r3, #24]
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	4798      	blx	r3
  }
}
 8012dae:	bf00      	nop
 8012db0:	3708      	adds	r7, #8
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b082      	sub	sp, #8
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	2200      	movs	r2, #0
 8012dca:	2101      	movs	r1, #1
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f000 f85b 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012dd2:	bf00      	nop
}
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012dda:	b480      	push	{r7}
 8012ddc:	b083      	sub	sp, #12
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2201      	movs	r2, #1
 8012dee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8012df2:	bf00      	nop
}
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b082      	sub	sp, #8
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2201      	movs	r2, #1
 8012e0a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2200      	movs	r2, #0
 8012e12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e1e:	2300      	movs	r3, #0
 8012e20:	2200      	movs	r2, #0
 8012e22:	2101      	movs	r1, #1
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 f82f 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012e2a:	2300      	movs	r3, #0
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f006 fd5e 	bl	8019916 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	791b      	ldrb	r3, [r3, #4]
 8012e5e:	4619      	mov	r1, r3
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f000 ffc5 	bl	8013df0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	795b      	ldrb	r3, [r3, #5]
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 ffbf 	bl	8013df0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012e72:	2300      	movs	r3, #0
 8012e74:	2200      	movs	r2, #0
 8012e76:	2101      	movs	r1, #1
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 f805 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b086      	sub	sp, #24
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	607a      	str	r2, [r7, #4]
 8012e92:	603b      	str	r3, [r7, #0]
 8012e94:	460b      	mov	r3, r1
 8012e96:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012e98:	7afa      	ldrb	r2, [r7, #11]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f003 fe02 	bl	8016ab0 <osMessageWaiting>
 8012eac:	4603      	mov	r3, r0
 8012eae:	f1c3 0310 	rsb	r3, r3, #16
 8012eb2:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d009      	beq.n	8012ece <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	4619      	mov	r1, r3
 8012eca:	f003 fd3d 	bl	8016948 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012ece:	bf00      	nop
 8012ed0:	3718      	adds	r7, #24
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8012ed6:	b580      	push	{r7, lr}
 8012ed8:	b086      	sub	sp, #24
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8012ee4:	f107 030c 	add.w	r3, r7, #12
 8012ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8012eec:	4618      	mov	r0, r3
 8012eee:	f003 fd6b 	bl	80169c8 <osMessageGet>
    if (event.status == osEventMessage)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2b10      	cmp	r3, #16
 8012ef6:	d1f2      	bne.n	8012ede <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f7ff fb0b 	bl	8012514 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8012efe:	e7ee      	b.n	8012ede <USBH_Process_OS+0x8>

08012f00 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012f08:	2300      	movs	r3, #0
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	2101      	movs	r1, #1
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7ff ffba 	bl	8012e88 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3708      	adds	r7, #8
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b086      	sub	sp, #24
 8012f22:	af02      	add	r7, sp, #8
 8012f24:	6078      	str	r0, [r7, #4]
 8012f26:	460b      	mov	r3, r1
 8012f28:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8012f2a:	887b      	ldrh	r3, [r7, #2]
 8012f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f30:	d901      	bls.n	8012f36 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012f32:	2303      	movs	r3, #3
 8012f34:	e01b      	b.n	8012f6e <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8012f3c:	887b      	ldrh	r3, [r7, #2]
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	4613      	mov	r3, r2
 8012f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012f46:	2100      	movs	r1, #0
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 f872 	bl	8013032 <USBH_GetDescriptor>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8012f52:	7bfb      	ldrb	r3, [r7, #15]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d109      	bne.n	8012f6c <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012f5e:	887a      	ldrh	r2, [r7, #2]
 8012f60:	4619      	mov	r1, r3
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 f92a 	bl	80131bc <USBH_ParseDevDesc>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8012f76:	b580      	push	{r7, lr}
 8012f78:	b086      	sub	sp, #24
 8012f7a:	af02      	add	r7, sp, #8
 8012f7c:	6078      	str	r0, [r7, #4]
 8012f7e:	460b      	mov	r3, r1
 8012f80:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	331c      	adds	r3, #28
 8012f86:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8012f88:	887b      	ldrh	r3, [r7, #2]
 8012f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012f8e:	d901      	bls.n	8012f94 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012f90:	2303      	movs	r3, #3
 8012f92:	e016      	b.n	8012fc2 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8012f94:	887b      	ldrh	r3, [r7, #2]
 8012f96:	9300      	str	r3, [sp, #0]
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f000 f846 	bl	8013032 <USBH_GetDescriptor>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8012faa:	7bfb      	ldrb	r3, [r7, #15]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d107      	bne.n	8012fc0 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8012fb0:	887b      	ldrh	r3, [r7, #2]
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	68b9      	ldr	r1, [r7, #8]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 f9b0 	bl	801331c <USBH_ParseCfgDesc>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3710      	adds	r7, #16
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b088      	sub	sp, #32
 8012fce:	af02      	add	r7, sp, #8
 8012fd0:	60f8      	str	r0, [r7, #12]
 8012fd2:	607a      	str	r2, [r7, #4]
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	72fb      	strb	r3, [r7, #11]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8012fde:	893b      	ldrh	r3, [r7, #8]
 8012fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fe4:	d802      	bhi.n	8012fec <USBH_Get_StringDesc+0x22>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d101      	bne.n	8012ff0 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8012fec:	2303      	movs	r3, #3
 8012fee:	e01c      	b.n	801302a <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8012ff0:	7afb      	ldrb	r3, [r7, #11]
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8012ff8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013000:	893b      	ldrh	r3, [r7, #8]
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	460b      	mov	r3, r1
 8013006:	2100      	movs	r1, #0
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f000 f812 	bl	8013032 <USBH_GetDescriptor>
 801300e:	4603      	mov	r3, r0
 8013010:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013012:	7dfb      	ldrb	r3, [r7, #23]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d107      	bne.n	8013028 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801301e:	893a      	ldrh	r2, [r7, #8]
 8013020:	6879      	ldr	r1, [r7, #4]
 8013022:	4618      	mov	r0, r3
 8013024:	f000 fb8d 	bl	8013742 <USBH_ParseStringDesc>
  }

  return status;
 8013028:	7dfb      	ldrb	r3, [r7, #23]
}
 801302a:	4618      	mov	r0, r3
 801302c:	3718      	adds	r7, #24
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}

08013032 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8013032:	b580      	push	{r7, lr}
 8013034:	b084      	sub	sp, #16
 8013036:	af00      	add	r7, sp, #0
 8013038:	60f8      	str	r0, [r7, #12]
 801303a:	607b      	str	r3, [r7, #4]
 801303c:	460b      	mov	r3, r1
 801303e:	72fb      	strb	r3, [r7, #11]
 8013040:	4613      	mov	r3, r2
 8013042:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	789b      	ldrb	r3, [r3, #2]
 8013048:	2b01      	cmp	r3, #1
 801304a:	d11c      	bne.n	8013086 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801304c:	7afb      	ldrb	r3, [r7, #11]
 801304e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013052:	b2da      	uxtb	r2, r3
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2206      	movs	r2, #6
 801305c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	893a      	ldrh	r2, [r7, #8]
 8013062:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013064:	893b      	ldrh	r3, [r7, #8]
 8013066:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801306a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801306e:	d104      	bne.n	801307a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f240 4209 	movw	r2, #1033	@ 0x409
 8013076:	829a      	strh	r2, [r3, #20]
 8013078:	e002      	b.n	8013080 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2200      	movs	r2, #0
 801307e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	8b3a      	ldrh	r2, [r7, #24]
 8013084:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013086:	8b3b      	ldrh	r3, [r7, #24]
 8013088:	461a      	mov	r2, r3
 801308a:	6879      	ldr	r1, [r7, #4]
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f000 fba5 	bl	80137dc <USBH_CtlReq>
 8013092:	4603      	mov	r3, r0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3710      	adds	r7, #16
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	460b      	mov	r3, r1
 80130a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	789b      	ldrb	r3, [r3, #2]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d10f      	bne.n	80130d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2200      	movs	r2, #0
 80130b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2205      	movs	r2, #5
 80130ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80130bc:	78fb      	ldrb	r3, [r7, #3]
 80130be:	b29a      	uxth	r2, r3
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2200      	movs	r2, #0
 80130c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2200      	movs	r2, #0
 80130ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80130d0:	2200      	movs	r2, #0
 80130d2:	2100      	movs	r1, #0
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 fb81 	bl	80137dc <USBH_CtlReq>
 80130da:	4603      	mov	r3, r0
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	460b      	mov	r3, r1
 80130ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	789b      	ldrb	r3, [r3, #2]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d10e      	bne.n	8013116 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2209      	movs	r2, #9
 8013102:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	887a      	ldrh	r2, [r7, #2]
 8013108:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2200      	movs	r2, #0
 801310e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013116:	2200      	movs	r2, #0
 8013118:	2100      	movs	r1, #0
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f000 fb5e 	bl	80137dc <USBH_CtlReq>
 8013120:	4603      	mov	r3, r0
}
 8013122:	4618      	mov	r0, r3
 8013124:	3708      	adds	r7, #8
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801312a:	b580      	push	{r7, lr}
 801312c:	b082      	sub	sp, #8
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
 8013132:	460b      	mov	r3, r1
 8013134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	789b      	ldrb	r3, [r3, #2]
 801313a:	2b01      	cmp	r3, #1
 801313c:	d10f      	bne.n	801315e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2200      	movs	r2, #0
 8013142:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2203      	movs	r2, #3
 8013148:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801314a:	78fb      	ldrb	r3, [r7, #3]
 801314c:	b29a      	uxth	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2200      	movs	r2, #0
 8013156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2200      	movs	r2, #0
 801315c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801315e:	2200      	movs	r2, #0
 8013160:	2100      	movs	r1, #0
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f000 fb3a 	bl	80137dc <USBH_CtlReq>
 8013168:	4603      	mov	r3, r0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b082      	sub	sp, #8
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	789b      	ldrb	r3, [r3, #2]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d10f      	bne.n	80131a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2202      	movs	r2, #2
 801318a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2201      	movs	r2, #1
 8013190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013198:	78fb      	ldrb	r3, [r7, #3]
 801319a:	b29a      	uxth	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80131a6:	2200      	movs	r2, #0
 80131a8:	2100      	movs	r1, #0
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f000 fb16 	bl	80137dc <USBH_CtlReq>
 80131b0:	4603      	mov	r3, r0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
	...

080131bc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80131bc:	b480      	push	{r7}
 80131be:	b087      	sub	sp, #28
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	4613      	mov	r3, r2
 80131c8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80131d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80131d2:	2300      	movs	r3, #0
 80131d4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d101      	bne.n	80131e0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80131dc:	2302      	movs	r3, #2
 80131de:	e094      	b.n	801330a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	781a      	ldrb	r2, [r3, #0]
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	785a      	ldrb	r2, [r3, #1]
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	3302      	adds	r3, #2
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	461a      	mov	r2, r3
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	3303      	adds	r3, #3
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	021b      	lsls	r3, r3, #8
 8013200:	b29b      	uxth	r3, r3
 8013202:	4313      	orrs	r3, r2
 8013204:	b29a      	uxth	r2, r3
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	791a      	ldrb	r2, [r3, #4]
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	795a      	ldrb	r2, [r3, #5]
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	799a      	ldrb	r2, [r3, #6]
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	79da      	ldrb	r2, [r3, #7]
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013230:	2b00      	cmp	r3, #0
 8013232:	d004      	beq.n	801323e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801323a:	2b01      	cmp	r3, #1
 801323c:	d11b      	bne.n	8013276 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	79db      	ldrb	r3, [r3, #7]
 8013242:	2b20      	cmp	r3, #32
 8013244:	dc0f      	bgt.n	8013266 <USBH_ParseDevDesc+0xaa>
 8013246:	2b08      	cmp	r3, #8
 8013248:	db0f      	blt.n	801326a <USBH_ParseDevDesc+0xae>
 801324a:	3b08      	subs	r3, #8
 801324c:	4a32      	ldr	r2, [pc, #200]	@ (8013318 <USBH_ParseDevDesc+0x15c>)
 801324e:	fa22 f303 	lsr.w	r3, r2, r3
 8013252:	f003 0301 	and.w	r3, r3, #1
 8013256:	2b00      	cmp	r3, #0
 8013258:	bf14      	ite	ne
 801325a:	2301      	movne	r3, #1
 801325c:	2300      	moveq	r3, #0
 801325e:	b2db      	uxtb	r3, r3
 8013260:	2b00      	cmp	r3, #0
 8013262:	d106      	bne.n	8013272 <USBH_ParseDevDesc+0xb6>
 8013264:	e001      	b.n	801326a <USBH_ParseDevDesc+0xae>
 8013266:	2b40      	cmp	r3, #64	@ 0x40
 8013268:	d003      	beq.n	8013272 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	2208      	movs	r2, #8
 801326e:	71da      	strb	r2, [r3, #7]
        break;
 8013270:	e000      	b.n	8013274 <USBH_ParseDevDesc+0xb8>
        break;
 8013272:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8013274:	e00e      	b.n	8013294 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801327c:	2b02      	cmp	r3, #2
 801327e:	d107      	bne.n	8013290 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	79db      	ldrb	r3, [r3, #7]
 8013284:	2b08      	cmp	r3, #8
 8013286:	d005      	beq.n	8013294 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	2208      	movs	r2, #8
 801328c:	71da      	strb	r2, [r3, #7]
 801328e:	e001      	b.n	8013294 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013290:	2303      	movs	r3, #3
 8013292:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8013294:	88fb      	ldrh	r3, [r7, #6]
 8013296:	2b08      	cmp	r3, #8
 8013298:	d936      	bls.n	8013308 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	3308      	adds	r3, #8
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	461a      	mov	r2, r3
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	3309      	adds	r3, #9
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	021b      	lsls	r3, r3, #8
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	4313      	orrs	r3, r2
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	330a      	adds	r3, #10
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	461a      	mov	r2, r3
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	330b      	adds	r3, #11
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	021b      	lsls	r3, r3, #8
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	4313      	orrs	r3, r2
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	330c      	adds	r3, #12
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	461a      	mov	r2, r3
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	330d      	adds	r3, #13
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	021b      	lsls	r3, r3, #8
 80132de:	b29b      	uxth	r3, r3
 80132e0:	4313      	orrs	r3, r2
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	693b      	ldr	r3, [r7, #16]
 80132e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	7b9a      	ldrb	r2, [r3, #14]
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	7bda      	ldrb	r2, [r3, #15]
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	7c1a      	ldrb	r2, [r3, #16]
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	7c5a      	ldrb	r2, [r3, #17]
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8013308:	7dfb      	ldrb	r3, [r7, #23]
}
 801330a:	4618      	mov	r0, r3
 801330c:	371c      	adds	r7, #28
 801330e:	46bd      	mov	sp, r7
 8013310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013314:	4770      	bx	lr
 8013316:	bf00      	nop
 8013318:	01000101 	.word	0x01000101

0801331c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b08c      	sub	sp, #48	@ 0x30
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	4613      	mov	r3, r2
 8013328:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8013330:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8013332:	2300      	movs	r3, #0
 8013334:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8013338:	2300      	movs	r3, #0
 801333a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801333e:	2300      	movs	r3, #0
 8013340:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801334a:	2302      	movs	r3, #2
 801334c:	e0de      	b.n	801350c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8013352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	2b09      	cmp	r3, #9
 8013358:	d002      	beq.n	8013360 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801335c:	2209      	movs	r2, #9
 801335e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	781a      	ldrb	r2, [r3, #0]
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	785a      	ldrb	r2, [r3, #1]
 801336c:	6a3b      	ldr	r3, [r7, #32]
 801336e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	3302      	adds	r3, #2
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	461a      	mov	r2, r3
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	3303      	adds	r3, #3
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	021b      	lsls	r3, r3, #8
 8013380:	b29b      	uxth	r3, r3
 8013382:	4313      	orrs	r3, r2
 8013384:	b29b      	uxth	r3, r3
 8013386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801338a:	bf28      	it	cs
 801338c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8013390:	b29a      	uxth	r2, r3
 8013392:	6a3b      	ldr	r3, [r7, #32]
 8013394:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	791a      	ldrb	r2, [r3, #4]
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	795a      	ldrb	r2, [r3, #5]
 80133a2:	6a3b      	ldr	r3, [r7, #32]
 80133a4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	799a      	ldrb	r2, [r3, #6]
 80133aa:	6a3b      	ldr	r3, [r7, #32]
 80133ac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	79da      	ldrb	r2, [r3, #7]
 80133b2:	6a3b      	ldr	r3, [r7, #32]
 80133b4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	7a1a      	ldrb	r2, [r3, #8]
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80133be:	88fb      	ldrh	r3, [r7, #6]
 80133c0:	2b09      	cmp	r3, #9
 80133c2:	f240 80a1 	bls.w	8013508 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80133c6:	2309      	movs	r3, #9
 80133c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80133ca:	2300      	movs	r3, #0
 80133cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80133ce:	e085      	b.n	80134dc <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80133d0:	f107 0316 	add.w	r3, r7, #22
 80133d4:	4619      	mov	r1, r3
 80133d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133d8:	f000 f9e6 	bl	80137a8 <USBH_GetNextDesc>
 80133dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80133de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e0:	785b      	ldrb	r3, [r3, #1]
 80133e2:	2b04      	cmp	r3, #4
 80133e4:	d17a      	bne.n	80134dc <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80133e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	2b09      	cmp	r3, #9
 80133ec:	d002      	beq.n	80133f4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80133ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f0:	2209      	movs	r2, #9
 80133f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80133f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133f8:	221a      	movs	r2, #26
 80133fa:	fb02 f303 	mul.w	r3, r2, r3
 80133fe:	3308      	adds	r3, #8
 8013400:	6a3a      	ldr	r2, [r7, #32]
 8013402:	4413      	add	r3, r2
 8013404:	3302      	adds	r3, #2
 8013406:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801340a:	69f8      	ldr	r0, [r7, #28]
 801340c:	f000 f882 	bl	8013514 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013410:	2300      	movs	r3, #0
 8013412:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8013416:	2300      	movs	r3, #0
 8013418:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801341a:	e043      	b.n	80134a4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801341c:	f107 0316 	add.w	r3, r7, #22
 8013420:	4619      	mov	r1, r3
 8013422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013424:	f000 f9c0 	bl	80137a8 <USBH_GetNextDesc>
 8013428:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801342c:	785b      	ldrb	r3, [r3, #1]
 801342e:	2b05      	cmp	r3, #5
 8013430:	d138      	bne.n	80134a4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	795b      	ldrb	r3, [r3, #5]
 8013436:	2b01      	cmp	r3, #1
 8013438:	d113      	bne.n	8013462 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801343e:	2b02      	cmp	r3, #2
 8013440:	d003      	beq.n	801344a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	799b      	ldrb	r3, [r3, #6]
 8013446:	2b03      	cmp	r3, #3
 8013448:	d10b      	bne.n	8013462 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	79db      	ldrb	r3, [r3, #7]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d10b      	bne.n	801346a <USBH_ParseCfgDesc+0x14e>
 8013452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	2b09      	cmp	r3, #9
 8013458:	d007      	beq.n	801346a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 801345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801345c:	2209      	movs	r2, #9
 801345e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8013460:	e003      	b.n	801346a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8013462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013464:	2207      	movs	r2, #7
 8013466:	701a      	strb	r2, [r3, #0]
 8013468:	e000      	b.n	801346c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801346a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801346c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013470:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013474:	3201      	adds	r2, #1
 8013476:	00d2      	lsls	r2, r2, #3
 8013478:	211a      	movs	r1, #26
 801347a:	fb01 f303 	mul.w	r3, r1, r3
 801347e:	4413      	add	r3, r2
 8013480:	3308      	adds	r3, #8
 8013482:	6a3a      	ldr	r2, [r7, #32]
 8013484:	4413      	add	r3, r2
 8013486:	3304      	adds	r3, #4
 8013488:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801348a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801348c:	69b9      	ldr	r1, [r7, #24]
 801348e:	68f8      	ldr	r0, [r7, #12]
 8013490:	f000 f86f 	bl	8013572 <USBH_ParseEPDesc>
 8013494:	4603      	mov	r3, r0
 8013496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801349a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801349e:	3301      	adds	r3, #1
 80134a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80134a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d80a      	bhi.n	80134c2 <USBH_ParseCfgDesc+0x1a6>
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	791b      	ldrb	r3, [r3, #4]
 80134b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d204      	bcs.n	80134c2 <USBH_ParseCfgDesc+0x1a6>
 80134b8:	6a3b      	ldr	r3, [r7, #32]
 80134ba:	885a      	ldrh	r2, [r3, #2]
 80134bc:	8afb      	ldrh	r3, [r7, #22]
 80134be:	429a      	cmp	r2, r3
 80134c0:	d8ac      	bhi.n	801341c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80134c2:	69fb      	ldr	r3, [r7, #28]
 80134c4:	791b      	ldrb	r3, [r3, #4]
 80134c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d201      	bcs.n	80134d2 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80134ce:	2303      	movs	r3, #3
 80134d0:	e01c      	b.n	801350c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80134d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134d6:	3301      	adds	r3, #1
 80134d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80134dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d805      	bhi.n	80134f0 <USBH_ParseCfgDesc+0x1d4>
 80134e4:	6a3b      	ldr	r3, [r7, #32]
 80134e6:	885a      	ldrh	r2, [r3, #2]
 80134e8:	8afb      	ldrh	r3, [r7, #22]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	f63f af70 	bhi.w	80133d0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80134f0:	6a3b      	ldr	r3, [r7, #32]
 80134f2:	791b      	ldrb	r3, [r3, #4]
 80134f4:	2b02      	cmp	r3, #2
 80134f6:	bf28      	it	cs
 80134f8:	2302      	movcs	r3, #2
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013500:	429a      	cmp	r2, r3
 8013502:	d201      	bcs.n	8013508 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8013504:	2303      	movs	r3, #3
 8013506:	e001      	b.n	801350c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8013508:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801350c:	4618      	mov	r0, r3
 801350e:	3730      	adds	r7, #48	@ 0x30
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	781a      	ldrb	r2, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	785a      	ldrb	r2, [r3, #1]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	789a      	ldrb	r2, [r3, #2]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	78da      	ldrb	r2, [r3, #3]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	791a      	ldrb	r2, [r3, #4]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	795a      	ldrb	r2, [r3, #5]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	799a      	ldrb	r2, [r3, #6]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	79da      	ldrb	r2, [r3, #7]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	7a1a      	ldrb	r2, [r3, #8]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	721a      	strb	r2, [r3, #8]
}
 8013566:	bf00      	nop
 8013568:	370c      	adds	r7, #12
 801356a:	46bd      	mov	sp, r7
 801356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013570:	4770      	bx	lr

08013572 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8013572:	b480      	push	{r7}
 8013574:	b087      	sub	sp, #28
 8013576:	af00      	add	r7, sp, #0
 8013578:	60f8      	str	r0, [r7, #12]
 801357a:	60b9      	str	r1, [r7, #8]
 801357c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801357e:	2300      	movs	r3, #0
 8013580:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	781a      	ldrb	r2, [r3, #0]
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	785a      	ldrb	r2, [r3, #1]
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	789a      	ldrb	r2, [r3, #2]
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	78da      	ldrb	r2, [r3, #3]
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3304      	adds	r3, #4
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	461a      	mov	r2, r3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	3305      	adds	r3, #5
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	021b      	lsls	r3, r3, #8
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4313      	orrs	r3, r2
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	799a      	ldrb	r2, [r3, #6]
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	889b      	ldrh	r3, [r3, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d009      	beq.n	80135e0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80135d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80135d4:	d804      	bhi.n	80135e0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80135da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80135de:	d901      	bls.n	80135e4 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80135e0:	2303      	movs	r3, #3
 80135e2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d136      	bne.n	801365c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	78db      	ldrb	r3, [r3, #3]
 80135f2:	f003 0303 	and.w	r3, r3, #3
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	d108      	bne.n	801360c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	889b      	ldrh	r3, [r3, #4]
 80135fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013602:	f240 8097 	bls.w	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013606:	2303      	movs	r3, #3
 8013608:	75fb      	strb	r3, [r7, #23]
 801360a:	e093      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	78db      	ldrb	r3, [r3, #3]
 8013610:	f003 0303 	and.w	r3, r3, #3
 8013614:	2b00      	cmp	r3, #0
 8013616:	d107      	bne.n	8013628 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	889b      	ldrh	r3, [r3, #4]
 801361c:	2b40      	cmp	r3, #64	@ 0x40
 801361e:	f240 8089 	bls.w	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013622:	2303      	movs	r3, #3
 8013624:	75fb      	strb	r3, [r7, #23]
 8013626:	e085      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	78db      	ldrb	r3, [r3, #3]
 801362c:	f003 0303 	and.w	r3, r3, #3
 8013630:	2b01      	cmp	r3, #1
 8013632:	d005      	beq.n	8013640 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	78db      	ldrb	r3, [r3, #3]
 8013638:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801363c:	2b03      	cmp	r3, #3
 801363e:	d10a      	bne.n	8013656 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	799b      	ldrb	r3, [r3, #6]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d003      	beq.n	8013650 <USBH_ParseEPDesc+0xde>
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	799b      	ldrb	r3, [r3, #6]
 801364c:	2b10      	cmp	r3, #16
 801364e:	d970      	bls.n	8013732 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8013650:	2303      	movs	r3, #3
 8013652:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013654:	e06d      	b.n	8013732 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013656:	2303      	movs	r3, #3
 8013658:	75fb      	strb	r3, [r7, #23]
 801365a:	e06b      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013662:	2b01      	cmp	r3, #1
 8013664:	d13c      	bne.n	80136e0 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	78db      	ldrb	r3, [r3, #3]
 801366a:	f003 0303 	and.w	r3, r3, #3
 801366e:	2b02      	cmp	r3, #2
 8013670:	d005      	beq.n	801367e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	78db      	ldrb	r3, [r3, #3]
 8013676:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801367a:	2b00      	cmp	r3, #0
 801367c:	d106      	bne.n	801368c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	889b      	ldrh	r3, [r3, #4]
 8013682:	2b40      	cmp	r3, #64	@ 0x40
 8013684:	d956      	bls.n	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013686:	2303      	movs	r3, #3
 8013688:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 801368a:	e053      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	78db      	ldrb	r3, [r3, #3]
 8013690:	f003 0303 	and.w	r3, r3, #3
 8013694:	2b01      	cmp	r3, #1
 8013696:	d10e      	bne.n	80136b6 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	799b      	ldrb	r3, [r3, #6]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d007      	beq.n	80136b0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80136a4:	2b10      	cmp	r3, #16
 80136a6:	d803      	bhi.n	80136b0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80136ac:	2b40      	cmp	r3, #64	@ 0x40
 80136ae:	d941      	bls.n	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80136b0:	2303      	movs	r3, #3
 80136b2:	75fb      	strb	r3, [r7, #23]
 80136b4:	e03e      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	78db      	ldrb	r3, [r3, #3]
 80136ba:	f003 0303 	and.w	r3, r3, #3
 80136be:	2b03      	cmp	r3, #3
 80136c0:	d10b      	bne.n	80136da <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	799b      	ldrb	r3, [r3, #6]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d004      	beq.n	80136d4 <USBH_ParseEPDesc+0x162>
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	889b      	ldrh	r3, [r3, #4]
 80136ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80136d2:	d32f      	bcc.n	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80136d4:	2303      	movs	r3, #3
 80136d6:	75fb      	strb	r3, [r7, #23]
 80136d8:	e02c      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80136da:	2303      	movs	r3, #3
 80136dc:	75fb      	strb	r3, [r7, #23]
 80136de:	e029      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80136e6:	2b02      	cmp	r3, #2
 80136e8:	d120      	bne.n	801372c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	78db      	ldrb	r3, [r3, #3]
 80136ee:	f003 0303 	and.w	r3, r3, #3
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d106      	bne.n	8013704 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	889b      	ldrh	r3, [r3, #4]
 80136fa:	2b08      	cmp	r3, #8
 80136fc:	d01a      	beq.n	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80136fe:	2303      	movs	r3, #3
 8013700:	75fb      	strb	r3, [r7, #23]
 8013702:	e017      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	78db      	ldrb	r3, [r3, #3]
 8013708:	f003 0303 	and.w	r3, r3, #3
 801370c:	2b03      	cmp	r3, #3
 801370e:	d10a      	bne.n	8013726 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	799b      	ldrb	r3, [r3, #6]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d003      	beq.n	8013720 <USBH_ParseEPDesc+0x1ae>
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	889b      	ldrh	r3, [r3, #4]
 801371c:	2b08      	cmp	r3, #8
 801371e:	d909      	bls.n	8013734 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013720:	2303      	movs	r3, #3
 8013722:	75fb      	strb	r3, [r7, #23]
 8013724:	e006      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013726:	2303      	movs	r3, #3
 8013728:	75fb      	strb	r3, [r7, #23]
 801372a:	e003      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801372c:	2303      	movs	r3, #3
 801372e:	75fb      	strb	r3, [r7, #23]
 8013730:	e000      	b.n	8013734 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013732:	bf00      	nop
  }

  return status;
 8013734:	7dfb      	ldrb	r3, [r7, #23]
}
 8013736:	4618      	mov	r0, r3
 8013738:	371c      	adds	r7, #28
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr

08013742 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8013742:	b480      	push	{r7}
 8013744:	b087      	sub	sp, #28
 8013746:	af00      	add	r7, sp, #0
 8013748:	60f8      	str	r0, [r7, #12]
 801374a:	60b9      	str	r1, [r7, #8]
 801374c:	4613      	mov	r3, r2
 801374e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	3301      	adds	r3, #1
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	2b03      	cmp	r3, #3
 8013758:	d120      	bne.n	801379c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	1e9a      	subs	r2, r3, #2
 8013760:	88fb      	ldrh	r3, [r7, #6]
 8013762:	4293      	cmp	r3, r2
 8013764:	bf28      	it	cs
 8013766:	4613      	movcs	r3, r2
 8013768:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	3302      	adds	r3, #2
 801376e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8013770:	2300      	movs	r3, #0
 8013772:	82fb      	strh	r3, [r7, #22]
 8013774:	e00b      	b.n	801378e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013776:	8afb      	ldrh	r3, [r7, #22]
 8013778:	68fa      	ldr	r2, [r7, #12]
 801377a:	4413      	add	r3, r2
 801377c:	781a      	ldrb	r2, [r3, #0]
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	701a      	strb	r2, [r3, #0]
      pdest++;
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	3301      	adds	r3, #1
 8013786:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013788:	8afb      	ldrh	r3, [r7, #22]
 801378a:	3302      	adds	r3, #2
 801378c:	82fb      	strh	r3, [r7, #22]
 801378e:	8afa      	ldrh	r2, [r7, #22]
 8013790:	8abb      	ldrh	r3, [r7, #20]
 8013792:	429a      	cmp	r2, r3
 8013794:	d3ef      	bcc.n	8013776 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	2200      	movs	r2, #0
 801379a:	701a      	strb	r2, [r3, #0]
  }
}
 801379c:	bf00      	nop
 801379e:	371c      	adds	r7, #28
 80137a0:	46bd      	mov	sp, r7
 80137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a6:	4770      	bx	lr

080137a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b085      	sub	sp, #20
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
 80137b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	7812      	ldrb	r2, [r2, #0]
 80137ba:	4413      	add	r3, r2
 80137bc:	b29a      	uxth	r2, r3
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	4413      	add	r3, r2
 80137cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80137ce:	68fb      	ldr	r3, [r7, #12]
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3714      	adds	r7, #20
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	4613      	mov	r3, r2
 80137e8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80137ea:	2301      	movs	r3, #1
 80137ec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	789b      	ldrb	r3, [r3, #2]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d002      	beq.n	80137fc <USBH_CtlReq+0x20>
 80137f6:	2b02      	cmp	r3, #2
 80137f8:	d015      	beq.n	8013826 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80137fa:	e033      	b.n	8013864 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	68ba      	ldr	r2, [r7, #8]
 8013800:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	88fa      	ldrh	r2, [r7, #6]
 8013806:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	2202      	movs	r2, #2
 8013812:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013814:	2301      	movs	r3, #1
 8013816:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013818:	2300      	movs	r3, #0
 801381a:	2200      	movs	r2, #0
 801381c:	2103      	movs	r1, #3
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	f7ff fb32 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013824:	e01e      	b.n	8013864 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f000 f822 	bl	8013870 <USBH_HandleControl>
 801382c:	4603      	mov	r3, r0
 801382e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013830:	7dfb      	ldrb	r3, [r7, #23]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d002      	beq.n	801383c <USBH_CtlReq+0x60>
 8013836:	7dfb      	ldrb	r3, [r7, #23]
 8013838:	2b03      	cmp	r3, #3
 801383a:	d106      	bne.n	801384a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2201      	movs	r2, #1
 8013840:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2200      	movs	r2, #0
 8013846:	761a      	strb	r2, [r3, #24]
 8013848:	e005      	b.n	8013856 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 801384a:	7dfb      	ldrb	r3, [r7, #23]
 801384c:	2b02      	cmp	r3, #2
 801384e:	d102      	bne.n	8013856 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	2201      	movs	r2, #1
 8013854:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013856:	2300      	movs	r3, #0
 8013858:	2200      	movs	r2, #0
 801385a:	2103      	movs	r1, #3
 801385c:	68f8      	ldr	r0, [r7, #12]
 801385e:	f7ff fb13 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013862:	bf00      	nop
  }
  return status;
 8013864:	7dfb      	ldrb	r3, [r7, #23]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3718      	adds	r7, #24
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
	...

08013870 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b086      	sub	sp, #24
 8013874:	af02      	add	r7, sp, #8
 8013876:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013878:	2301      	movs	r3, #1
 801387a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801387c:	2300      	movs	r3, #0
 801387e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7e1b      	ldrb	r3, [r3, #24]
 8013884:	3b01      	subs	r3, #1
 8013886:	2b0a      	cmp	r3, #10
 8013888:	f200 81b2 	bhi.w	8013bf0 <USBH_HandleControl+0x380>
 801388c:	a201      	add	r2, pc, #4	@ (adr r2, 8013894 <USBH_HandleControl+0x24>)
 801388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013892:	bf00      	nop
 8013894:	080138c1 	.word	0x080138c1
 8013898:	080138db 	.word	0x080138db
 801389c:	0801395d 	.word	0x0801395d
 80138a0:	08013983 	.word	0x08013983
 80138a4:	080139e1 	.word	0x080139e1
 80138a8:	08013a0b 	.word	0x08013a0b
 80138ac:	08013a8d 	.word	0x08013a8d
 80138b0:	08013aaf 	.word	0x08013aaf
 80138b4:	08013b11 	.word	0x08013b11
 80138b8:	08013b37 	.word	0x08013b37
 80138bc:	08013b99 	.word	0x08013b99
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f103 0110 	add.w	r1, r3, #16
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	795b      	ldrb	r3, [r3, #5]
 80138ca:	461a      	mov	r2, r3
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 f99f 	bl	8013c10 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2202      	movs	r2, #2
 80138d6:	761a      	strb	r2, [r3, #24]
      break;
 80138d8:	e195      	b.n	8013c06 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	795b      	ldrb	r3, [r3, #5]
 80138de:	4619      	mov	r1, r3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f006 f907 	bl	8019af4 <USBH_LL_GetURBState>
 80138e6:	4603      	mov	r3, r0
 80138e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	d124      	bne.n	801393a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	7c1b      	ldrb	r3, [r3, #16]
 80138f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80138f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	8adb      	ldrh	r3, [r3, #22]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d00a      	beq.n	8013918 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8013902:	7b7b      	ldrb	r3, [r7, #13]
 8013904:	2b80      	cmp	r3, #128	@ 0x80
 8013906:	d103      	bne.n	8013910 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2203      	movs	r2, #3
 801390c:	761a      	strb	r2, [r3, #24]
 801390e:	e00d      	b.n	801392c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2205      	movs	r2, #5
 8013914:	761a      	strb	r2, [r3, #24]
 8013916:	e009      	b.n	801392c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013918:	7b7b      	ldrb	r3, [r7, #13]
 801391a:	2b80      	cmp	r3, #128	@ 0x80
 801391c:	d103      	bne.n	8013926 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2209      	movs	r2, #9
 8013922:	761a      	strb	r2, [r3, #24]
 8013924:	e002      	b.n	801392c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2207      	movs	r2, #7
 801392a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801392c:	2300      	movs	r3, #0
 801392e:	2200      	movs	r2, #0
 8013930:	2103      	movs	r1, #3
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f7ff faa8 	bl	8012e88 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013938:	e15c      	b.n	8013bf4 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801393a:	7bbb      	ldrb	r3, [r7, #14]
 801393c:	2b04      	cmp	r3, #4
 801393e:	d003      	beq.n	8013948 <USBH_HandleControl+0xd8>
 8013940:	7bbb      	ldrb	r3, [r7, #14]
 8013942:	2b02      	cmp	r3, #2
 8013944:	f040 8156 	bne.w	8013bf4 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	220b      	movs	r2, #11
 801394c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801394e:	2300      	movs	r3, #0
 8013950:	2200      	movs	r2, #0
 8013952:	2103      	movs	r1, #3
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7ff fa97 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 801395a:	e14b      	b.n	8013bf4 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013962:	b29a      	uxth	r2, r3
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6899      	ldr	r1, [r3, #8]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	899a      	ldrh	r2, [r3, #12]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	791b      	ldrb	r3, [r3, #4]
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 f98a 	bl	8013c8e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2204      	movs	r2, #4
 801397e:	761a      	strb	r2, [r3, #24]
      break;
 8013980:	e141      	b.n	8013c06 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	791b      	ldrb	r3, [r3, #4]
 8013986:	4619      	mov	r1, r3
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f006 f8b3 	bl	8019af4 <USBH_LL_GetURBState>
 801398e:	4603      	mov	r3, r0
 8013990:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8013992:	7bbb      	ldrb	r3, [r7, #14]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d109      	bne.n	80139ac <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2209      	movs	r2, #9
 801399c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801399e:	2300      	movs	r3, #0
 80139a0:	2200      	movs	r2, #0
 80139a2:	2103      	movs	r1, #3
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f7ff fa6f 	bl	8012e88 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80139aa:	e125      	b.n	8013bf8 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 80139ac:	7bbb      	ldrb	r3, [r7, #14]
 80139ae:	2b05      	cmp	r3, #5
 80139b0:	d108      	bne.n	80139c4 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 80139b2:	2303      	movs	r3, #3
 80139b4:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139b6:	2300      	movs	r3, #0
 80139b8:	2200      	movs	r2, #0
 80139ba:	2103      	movs	r1, #3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7ff fa63 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 80139c2:	e119      	b.n	8013bf8 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 80139c4:	7bbb      	ldrb	r3, [r7, #14]
 80139c6:	2b04      	cmp	r3, #4
 80139c8:	f040 8116 	bne.w	8013bf8 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	220b      	movs	r2, #11
 80139d0:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80139d2:	2300      	movs	r3, #0
 80139d4:	2200      	movs	r2, #0
 80139d6:	2103      	movs	r1, #3
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7ff fa55 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 80139de:	e10b      	b.n	8013bf8 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6899      	ldr	r1, [r3, #8]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	899a      	ldrh	r2, [r3, #12]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	795b      	ldrb	r3, [r3, #5]
 80139ec:	2001      	movs	r0, #1
 80139ee:	9000      	str	r0, [sp, #0]
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 f927 	bl	8013c44 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80139fc:	b29a      	uxth	r2, r3
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2206      	movs	r2, #6
 8013a06:	761a      	strb	r2, [r3, #24]
      break;
 8013a08:	e0fd      	b.n	8013c06 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	795b      	ldrb	r3, [r3, #5]
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f006 f86f 	bl	8019af4 <USBH_LL_GetURBState>
 8013a16:	4603      	mov	r3, r0
 8013a18:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013a1a:	7bbb      	ldrb	r3, [r7, #14]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d109      	bne.n	8013a34 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2207      	movs	r2, #7
 8013a24:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a26:	2300      	movs	r3, #0
 8013a28:	2200      	movs	r2, #0
 8013a2a:	2103      	movs	r1, #3
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7ff fa2b 	bl	8012e88 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013a32:	e0e3      	b.n	8013bfc <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8013a34:	7bbb      	ldrb	r3, [r7, #14]
 8013a36:	2b05      	cmp	r3, #5
 8013a38:	d10b      	bne.n	8013a52 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	220c      	movs	r2, #12
 8013a3e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013a40:	2303      	movs	r3, #3
 8013a42:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a44:	2300      	movs	r3, #0
 8013a46:	2200      	movs	r2, #0
 8013a48:	2103      	movs	r1, #3
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ff fa1c 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013a50:	e0d4      	b.n	8013bfc <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013a52:	7bbb      	ldrb	r3, [r7, #14]
 8013a54:	2b02      	cmp	r3, #2
 8013a56:	d109      	bne.n	8013a6c <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2205      	movs	r2, #5
 8013a5c:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a5e:	2300      	movs	r3, #0
 8013a60:	2200      	movs	r2, #0
 8013a62:	2103      	movs	r1, #3
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7ff fa0f 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013a6a:	e0c7      	b.n	8013bfc <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8013a6c:	7bbb      	ldrb	r3, [r7, #14]
 8013a6e:	2b04      	cmp	r3, #4
 8013a70:	f040 80c4 	bne.w	8013bfc <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	220b      	movs	r2, #11
 8013a78:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013a7a:	2302      	movs	r3, #2
 8013a7c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013a7e:	2300      	movs	r3, #0
 8013a80:	2200      	movs	r2, #0
 8013a82:	2103      	movs	r1, #3
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f7ff f9ff 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013a8a:	e0b7      	b.n	8013bfc <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	791b      	ldrb	r3, [r3, #4]
 8013a90:	2200      	movs	r2, #0
 8013a92:	2100      	movs	r1, #0
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 f8fa 	bl	8013c8e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2208      	movs	r2, #8
 8013aaa:	761a      	strb	r2, [r3, #24]

      break;
 8013aac:	e0ab      	b.n	8013c06 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	791b      	ldrb	r3, [r3, #4]
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f006 f81d 	bl	8019af4 <USBH_LL_GetURBState>
 8013aba:	4603      	mov	r3, r0
 8013abc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013abe:	7bbb      	ldrb	r3, [r7, #14]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d10b      	bne.n	8013adc <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	220d      	movs	r2, #13
 8013ac8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013aca:	2300      	movs	r3, #0
 8013acc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ace:	2300      	movs	r3, #0
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	2103      	movs	r1, #3
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7ff f9d7 	bl	8012e88 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013ada:	e091      	b.n	8013c00 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8013adc:	7bbb      	ldrb	r3, [r7, #14]
 8013ade:	2b04      	cmp	r3, #4
 8013ae0:	d109      	bne.n	8013af6 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	220b      	movs	r2, #11
 8013ae6:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ae8:	2300      	movs	r3, #0
 8013aea:	2200      	movs	r2, #0
 8013aec:	2103      	movs	r1, #3
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f7ff f9ca 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013af4:	e084      	b.n	8013c00 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8013af6:	7bbb      	ldrb	r3, [r7, #14]
 8013af8:	2b05      	cmp	r3, #5
 8013afa:	f040 8081 	bne.w	8013c00 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8013afe:	2303      	movs	r3, #3
 8013b00:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b02:	2300      	movs	r3, #0
 8013b04:	2200      	movs	r2, #0
 8013b06:	2103      	movs	r1, #3
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f7ff f9bd 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013b0e:	e077      	b.n	8013c00 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	795b      	ldrb	r3, [r3, #5]
 8013b14:	2201      	movs	r2, #1
 8013b16:	9200      	str	r2, [sp, #0]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	2100      	movs	r1, #0
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f000 f891 	bl	8013c44 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013b28:	b29a      	uxth	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	220a      	movs	r2, #10
 8013b32:	761a      	strb	r2, [r3, #24]
      break;
 8013b34:	e067      	b.n	8013c06 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	795b      	ldrb	r3, [r3, #5]
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f005 ffd9 	bl	8019af4 <USBH_LL_GetURBState>
 8013b42:	4603      	mov	r3, r0
 8013b44:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013b46:	7bbb      	ldrb	r3, [r7, #14]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d10b      	bne.n	8013b64 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	220d      	movs	r2, #13
 8013b54:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b56:	2300      	movs	r3, #0
 8013b58:	2200      	movs	r2, #0
 8013b5a:	2103      	movs	r1, #3
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff f993 	bl	8012e88 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013b62:	e04f      	b.n	8013c04 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013b64:	7bbb      	ldrb	r3, [r7, #14]
 8013b66:	2b02      	cmp	r3, #2
 8013b68:	d109      	bne.n	8013b7e <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2209      	movs	r2, #9
 8013b6e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b70:	2300      	movs	r3, #0
 8013b72:	2200      	movs	r2, #0
 8013b74:	2103      	movs	r1, #3
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7ff f986 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013b7c:	e042      	b.n	8013c04 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8013b7e:	7bbb      	ldrb	r3, [r7, #14]
 8013b80:	2b04      	cmp	r3, #4
 8013b82:	d13f      	bne.n	8013c04 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	220b      	movs	r2, #11
 8013b88:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	2103      	movs	r1, #3
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff f979 	bl	8012e88 <USBH_OS_PutMessage>
      break;
 8013b96:	e035      	b.n	8013c04 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	7e5b      	ldrb	r3, [r3, #25]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	b2da      	uxtb	r2, r3
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	765a      	strb	r2, [r3, #25]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7e5b      	ldrb	r3, [r3, #25]
 8013ba8:	2b02      	cmp	r3, #2
 8013baa:	d806      	bhi.n	8013bba <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2201      	movs	r2, #1
 8013bb0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013bb8:	e025      	b.n	8013c06 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013bc0:	2106      	movs	r1, #6
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	795b      	ldrb	r3, [r3, #5]
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 f90c 	bl	8013df0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	791b      	ldrb	r3, [r3, #4]
 8013bdc:	4619      	mov	r1, r3
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f000 f906 	bl	8013df0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2200      	movs	r2, #0
 8013be8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013bea:	2302      	movs	r3, #2
 8013bec:	73fb      	strb	r3, [r7, #15]
      break;
 8013bee:	e00a      	b.n	8013c06 <USBH_HandleControl+0x396>

    default:
      break;
 8013bf0:	bf00      	nop
 8013bf2:	e008      	b.n	8013c06 <USBH_HandleControl+0x396>
      break;
 8013bf4:	bf00      	nop
 8013bf6:	e006      	b.n	8013c06 <USBH_HandleControl+0x396>
      break;
 8013bf8:	bf00      	nop
 8013bfa:	e004      	b.n	8013c06 <USBH_HandleControl+0x396>
      break;
 8013bfc:	bf00      	nop
 8013bfe:	e002      	b.n	8013c06 <USBH_HandleControl+0x396>
      break;
 8013c00:	bf00      	nop
 8013c02:	e000      	b.n	8013c06 <USBH_HandleControl+0x396>
      break;
 8013c04:	bf00      	nop
  }

  return status;
 8013c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3710      	adds	r7, #16
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b088      	sub	sp, #32
 8013c14:	af04      	add	r7, sp, #16
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013c1e:	79f9      	ldrb	r1, [r7, #7]
 8013c20:	2300      	movs	r3, #0
 8013c22:	9303      	str	r3, [sp, #12]
 8013c24:	2308      	movs	r3, #8
 8013c26:	9302      	str	r3, [sp, #8]
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	9301      	str	r3, [sp, #4]
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	9300      	str	r3, [sp, #0]
 8013c30:	2300      	movs	r3, #0
 8013c32:	2200      	movs	r2, #0
 8013c34:	68f8      	ldr	r0, [r7, #12]
 8013c36:	f005 ff2c 	bl	8019a92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8013c3a:	2300      	movs	r3, #0
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b088      	sub	sp, #32
 8013c48:	af04      	add	r7, sp, #16
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	4611      	mov	r1, r2
 8013c50:	461a      	mov	r2, r3
 8013c52:	460b      	mov	r3, r1
 8013c54:	80fb      	strh	r3, [r7, #6]
 8013c56:	4613      	mov	r3, r2
 8013c58:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d001      	beq.n	8013c68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8013c64:	2300      	movs	r3, #0
 8013c66:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013c68:	7979      	ldrb	r1, [r7, #5]
 8013c6a:	7e3b      	ldrb	r3, [r7, #24]
 8013c6c:	9303      	str	r3, [sp, #12]
 8013c6e:	88fb      	ldrh	r3, [r7, #6]
 8013c70:	9302      	str	r3, [sp, #8]
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	9301      	str	r3, [sp, #4]
 8013c76:	2301      	movs	r3, #1
 8013c78:	9300      	str	r3, [sp, #0]
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	68f8      	ldr	r0, [r7, #12]
 8013c80:	f005 ff07 	bl	8019a92 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013c84:	2300      	movs	r3, #0
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3710      	adds	r7, #16
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}

08013c8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8013c8e:	b580      	push	{r7, lr}
 8013c90:	b088      	sub	sp, #32
 8013c92:	af04      	add	r7, sp, #16
 8013c94:	60f8      	str	r0, [r7, #12]
 8013c96:	60b9      	str	r1, [r7, #8]
 8013c98:	4611      	mov	r1, r2
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	80fb      	strh	r3, [r7, #6]
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013ca4:	7979      	ldrb	r1, [r7, #5]
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	9303      	str	r3, [sp, #12]
 8013caa:	88fb      	ldrh	r3, [r7, #6]
 8013cac:	9302      	str	r3, [sp, #8]
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	9301      	str	r3, [sp, #4]
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	9300      	str	r3, [sp, #0]
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	2201      	movs	r2, #1
 8013cba:	68f8      	ldr	r0, [r7, #12]
 8013cbc:	f005 fee9 	bl	8019a92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013cc0:	2300      	movs	r3, #0

}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}

08013cca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013cca:	b580      	push	{r7, lr}
 8013ccc:	b088      	sub	sp, #32
 8013cce:	af04      	add	r7, sp, #16
 8013cd0:	60f8      	str	r0, [r7, #12]
 8013cd2:	60b9      	str	r1, [r7, #8]
 8013cd4:	4611      	mov	r1, r2
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	460b      	mov	r3, r1
 8013cda:	80fb      	strh	r3, [r7, #6]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d001      	beq.n	8013cee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013cea:	2300      	movs	r3, #0
 8013cec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013cee:	7979      	ldrb	r1, [r7, #5]
 8013cf0:	7e3b      	ldrb	r3, [r7, #24]
 8013cf2:	9303      	str	r3, [sp, #12]
 8013cf4:	88fb      	ldrh	r3, [r7, #6]
 8013cf6:	9302      	str	r3, [sp, #8]
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	9301      	str	r3, [sp, #4]
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	2302      	movs	r3, #2
 8013d02:	2200      	movs	r2, #0
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f005 fec4 	bl	8019a92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013d0a:	2300      	movs	r3, #0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b088      	sub	sp, #32
 8013d18:	af04      	add	r7, sp, #16
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	4611      	mov	r1, r2
 8013d20:	461a      	mov	r2, r3
 8013d22:	460b      	mov	r3, r1
 8013d24:	80fb      	strh	r3, [r7, #6]
 8013d26:	4613      	mov	r3, r2
 8013d28:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8013d2a:	7979      	ldrb	r1, [r7, #5]
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	9303      	str	r3, [sp, #12]
 8013d30:	88fb      	ldrh	r3, [r7, #6]
 8013d32:	9302      	str	r3, [sp, #8]
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	9301      	str	r3, [sp, #4]
 8013d38:	2301      	movs	r3, #1
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	2302      	movs	r3, #2
 8013d3e:	2201      	movs	r2, #1
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	f005 fea6 	bl	8019a92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8013d46:	2300      	movs	r3, #0
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3710      	adds	r7, #16
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}

08013d50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af04      	add	r7, sp, #16
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	4608      	mov	r0, r1
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	4603      	mov	r3, r0
 8013d60:	70fb      	strb	r3, [r7, #3]
 8013d62:	460b      	mov	r3, r1
 8013d64:	70bb      	strb	r3, [r7, #2]
 8013d66:	4613      	mov	r3, r2
 8013d68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8013d6a:	7878      	ldrb	r0, [r7, #1]
 8013d6c:	78ba      	ldrb	r2, [r7, #2]
 8013d6e:	78f9      	ldrb	r1, [r7, #3]
 8013d70:	8b3b      	ldrh	r3, [r7, #24]
 8013d72:	9302      	str	r3, [sp, #8]
 8013d74:	7d3b      	ldrb	r3, [r7, #20]
 8013d76:	9301      	str	r3, [sp, #4]
 8013d78:	7c3b      	ldrb	r3, [r7, #16]
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f005 fe39 	bl	80199f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013d84:	2300      	movs	r3, #0
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3708      	adds	r7, #8
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b082      	sub	sp, #8
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	6078      	str	r0, [r7, #4]
 8013d96:	460b      	mov	r3, r1
 8013d98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8013d9a:	78fb      	ldrb	r3, [r7, #3]
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f005 fe58 	bl	8019a54 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013da4:	2300      	movs	r3, #0
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3708      	adds	r7, #8
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b084      	sub	sp, #16
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
 8013db6:	460b      	mov	r3, r1
 8013db8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f000 f836 	bl	8013e2c <USBH_GetFreePipe>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013dc4:	89fb      	ldrh	r3, [r7, #14]
 8013dc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d00a      	beq.n	8013de4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8013dce:	78fa      	ldrb	r2, [r7, #3]
 8013dd0:	89fb      	ldrh	r3, [r7, #14]
 8013dd2:	f003 030f 	and.w	r3, r3, #15
 8013dd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013dda:	6879      	ldr	r1, [r7, #4]
 8013ddc:	33e0      	adds	r3, #224	@ 0xe0
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	440b      	add	r3, r1
 8013de2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013de4:	89fb      	ldrh	r3, [r7, #14]
 8013de6:	b2db      	uxtb	r3, r3
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3710      	adds	r7, #16
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	460b      	mov	r3, r1
 8013dfa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8013dfc:	78fb      	ldrb	r3, [r7, #3]
 8013dfe:	2b0f      	cmp	r3, #15
 8013e00:	d80d      	bhi.n	8013e1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8013e02:	78fb      	ldrb	r3, [r7, #3]
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	33e0      	adds	r3, #224	@ 0xe0
 8013e08:	009b      	lsls	r3, r3, #2
 8013e0a:	4413      	add	r3, r2
 8013e0c:	685a      	ldr	r2, [r3, #4]
 8013e0e:	78fb      	ldrb	r3, [r7, #3]
 8013e10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013e14:	6879      	ldr	r1, [r7, #4]
 8013e16:	33e0      	adds	r3, #224	@ 0xe0
 8013e18:	009b      	lsls	r3, r3, #2
 8013e1a:	440b      	add	r3, r1
 8013e1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8013e1e:	2300      	movs	r3, #0
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	370c      	adds	r7, #12
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr

08013e2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b085      	sub	sp, #20
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8013e34:	2300      	movs	r3, #0
 8013e36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013e38:	2300      	movs	r3, #0
 8013e3a:	73fb      	strb	r3, [r7, #15]
 8013e3c:	e00f      	b.n	8013e5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8013e3e:	7bfb      	ldrb	r3, [r7, #15]
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	33e0      	adds	r3, #224	@ 0xe0
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	4413      	add	r3, r2
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d102      	bne.n	8013e58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8013e52:	7bfb      	ldrb	r3, [r7, #15]
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	e007      	b.n	8013e68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8013e58:	7bfb      	ldrb	r3, [r7, #15]
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	73fb      	strb	r3, [r7, #15]
 8013e5e:	7bfb      	ldrb	r3, [r7, #15]
 8013e60:	2b0f      	cmp	r3, #15
 8013e62:	d9ec      	bls.n	8013e3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8013e64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3714      	adds	r7, #20
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e72:	4770      	bx	lr

08013e74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013e7e:	79fb      	ldrb	r3, [r7, #7]
 8013e80:	4a08      	ldr	r2, [pc, #32]	@ (8013ea4 <disk_status+0x30>)
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	79fa      	ldrb	r2, [r7, #7]
 8013e8c:	4905      	ldr	r1, [pc, #20]	@ (8013ea4 <disk_status+0x30>)
 8013e8e:	440a      	add	r2, r1
 8013e90:	7a12      	ldrb	r2, [r2, #8]
 8013e92:	4610      	mov	r0, r2
 8013e94:	4798      	blx	r3
 8013e96:	4603      	mov	r3, r0
 8013e98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3710      	adds	r7, #16
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}
 8013ea4:	200017ec 	.word	0x200017ec

08013ea8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b084      	sub	sp, #16
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	4603      	mov	r3, r0
 8013eb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013eb6:	79fb      	ldrb	r3, [r7, #7]
 8013eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8013ef0 <disk_initialize+0x48>)
 8013eba:	5cd3      	ldrb	r3, [r2, r3]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d111      	bne.n	8013ee4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013ec0:	79fb      	ldrb	r3, [r7, #7]
 8013ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8013ef0 <disk_initialize+0x48>)
 8013ec4:	2101      	movs	r1, #1
 8013ec6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013ec8:	79fb      	ldrb	r3, [r7, #7]
 8013eca:	4a09      	ldr	r2, [pc, #36]	@ (8013ef0 <disk_initialize+0x48>)
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	4413      	add	r3, r2
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	79fa      	ldrb	r2, [r7, #7]
 8013ed6:	4906      	ldr	r1, [pc, #24]	@ (8013ef0 <disk_initialize+0x48>)
 8013ed8:	440a      	add	r2, r1
 8013eda:	7a12      	ldrb	r2, [r2, #8]
 8013edc:	4610      	mov	r0, r2
 8013ede:	4798      	blx	r3
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3710      	adds	r7, #16
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	200017ec 	.word	0x200017ec

08013ef4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013ef4:	b590      	push	{r4, r7, lr}
 8013ef6:	b087      	sub	sp, #28
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	60b9      	str	r1, [r7, #8]
 8013efc:	607a      	str	r2, [r7, #4]
 8013efe:	603b      	str	r3, [r7, #0]
 8013f00:	4603      	mov	r3, r0
 8013f02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013f04:	7bfb      	ldrb	r3, [r7, #15]
 8013f06:	4a0a      	ldr	r2, [pc, #40]	@ (8013f30 <disk_read+0x3c>)
 8013f08:	009b      	lsls	r3, r3, #2
 8013f0a:	4413      	add	r3, r2
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	689c      	ldr	r4, [r3, #8]
 8013f10:	7bfb      	ldrb	r3, [r7, #15]
 8013f12:	4a07      	ldr	r2, [pc, #28]	@ (8013f30 <disk_read+0x3c>)
 8013f14:	4413      	add	r3, r2
 8013f16:	7a18      	ldrb	r0, [r3, #8]
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	68b9      	ldr	r1, [r7, #8]
 8013f1e:	47a0      	blx	r4
 8013f20:	4603      	mov	r3, r0
 8013f22:	75fb      	strb	r3, [r7, #23]
  return res;
 8013f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	371c      	adds	r7, #28
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd90      	pop	{r4, r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	200017ec 	.word	0x200017ec

08013f34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013f34:	b590      	push	{r4, r7, lr}
 8013f36:	b087      	sub	sp, #28
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60b9      	str	r1, [r7, #8]
 8013f3c:	607a      	str	r2, [r7, #4]
 8013f3e:	603b      	str	r3, [r7, #0]
 8013f40:	4603      	mov	r3, r0
 8013f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013f44:	7bfb      	ldrb	r3, [r7, #15]
 8013f46:	4a0a      	ldr	r2, [pc, #40]	@ (8013f70 <disk_write+0x3c>)
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4413      	add	r3, r2
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	68dc      	ldr	r4, [r3, #12]
 8013f50:	7bfb      	ldrb	r3, [r7, #15]
 8013f52:	4a07      	ldr	r2, [pc, #28]	@ (8013f70 <disk_write+0x3c>)
 8013f54:	4413      	add	r3, r2
 8013f56:	7a18      	ldrb	r0, [r3, #8]
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	68b9      	ldr	r1, [r7, #8]
 8013f5e:	47a0      	blx	r4
 8013f60:	4603      	mov	r3, r0
 8013f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8013f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	371c      	adds	r7, #28
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd90      	pop	{r4, r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	200017ec 	.word	0x200017ec

08013f74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	603a      	str	r2, [r7, #0]
 8013f7e:	71fb      	strb	r3, [r7, #7]
 8013f80:	460b      	mov	r3, r1
 8013f82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013f84:	79fb      	ldrb	r3, [r7, #7]
 8013f86:	4a09      	ldr	r2, [pc, #36]	@ (8013fac <disk_ioctl+0x38>)
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	691b      	ldr	r3, [r3, #16]
 8013f90:	79fa      	ldrb	r2, [r7, #7]
 8013f92:	4906      	ldr	r1, [pc, #24]	@ (8013fac <disk_ioctl+0x38>)
 8013f94:	440a      	add	r2, r1
 8013f96:	7a10      	ldrb	r0, [r2, #8]
 8013f98:	79b9      	ldrb	r1, [r7, #6]
 8013f9a:	683a      	ldr	r2, [r7, #0]
 8013f9c:	4798      	blx	r3
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	73fb      	strb	r3, [r7, #15]
  return res;
 8013fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3710      	adds	r7, #16
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	200017ec 	.word	0x200017ec

08013fb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b085      	sub	sp, #20
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013fc4:	021b      	lsls	r3, r3, #8
 8013fc6:	b21a      	sxth	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	b21b      	sxth	r3, r3
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	b21b      	sxth	r3, r3
 8013fd2:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3714      	adds	r7, #20
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013fe2:	b480      	push	{r7}
 8013fe4:	b085      	sub	sp, #20
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	3303      	adds	r3, #3
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	021b      	lsls	r3, r3, #8
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	3202      	adds	r2, #2
 8013ffa:	7812      	ldrb	r2, [r2, #0]
 8013ffc:	4313      	orrs	r3, r2
 8013ffe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	021b      	lsls	r3, r3, #8
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	3201      	adds	r2, #1
 8014008:	7812      	ldrb	r2, [r2, #0]
 801400a:	4313      	orrs	r3, r2
 801400c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	021b      	lsls	r3, r3, #8
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	7812      	ldrb	r2, [r2, #0]
 8014016:	4313      	orrs	r3, r2
 8014018:	60fb      	str	r3, [r7, #12]
	return rv;
 801401a:	68fb      	ldr	r3, [r7, #12]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	460b      	mov	r3, r1
 8014032:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	1c5a      	adds	r2, r3, #1
 8014038:	607a      	str	r2, [r7, #4]
 801403a:	887a      	ldrh	r2, [r7, #2]
 801403c:	b2d2      	uxtb	r2, r2
 801403e:	701a      	strb	r2, [r3, #0]
 8014040:	887b      	ldrh	r3, [r7, #2]
 8014042:	0a1b      	lsrs	r3, r3, #8
 8014044:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	1c5a      	adds	r2, r3, #1
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	887a      	ldrh	r2, [r7, #2]
 801404e:	b2d2      	uxtb	r2, r2
 8014050:	701a      	strb	r2, [r3, #0]
}
 8014052:	bf00      	nop
 8014054:	370c      	adds	r7, #12
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr

0801405e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801405e:	b480      	push	{r7}
 8014060:	b083      	sub	sp, #12
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
 8014066:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	1c5a      	adds	r2, r3, #1
 801406c:	607a      	str	r2, [r7, #4]
 801406e:	683a      	ldr	r2, [r7, #0]
 8014070:	b2d2      	uxtb	r2, r2
 8014072:	701a      	strb	r2, [r3, #0]
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	0a1b      	lsrs	r3, r3, #8
 8014078:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	1c5a      	adds	r2, r3, #1
 801407e:	607a      	str	r2, [r7, #4]
 8014080:	683a      	ldr	r2, [r7, #0]
 8014082:	b2d2      	uxtb	r2, r2
 8014084:	701a      	strb	r2, [r3, #0]
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	0a1b      	lsrs	r3, r3, #8
 801408a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	607a      	str	r2, [r7, #4]
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	b2d2      	uxtb	r2, r2
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	0a1b      	lsrs	r3, r3, #8
 801409c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	1c5a      	adds	r2, r3, #1
 80140a2:	607a      	str	r2, [r7, #4]
 80140a4:	683a      	ldr	r2, [r7, #0]
 80140a6:	b2d2      	uxtb	r2, r2
 80140a8:	701a      	strb	r2, [r3, #0]
}
 80140aa:	bf00      	nop
 80140ac:	370c      	adds	r7, #12
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80140b6:	b480      	push	{r7}
 80140b8:	b087      	sub	sp, #28
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	60f8      	str	r0, [r7, #12]
 80140be:	60b9      	str	r1, [r7, #8]
 80140c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00d      	beq.n	80140ec <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80140d0:	693a      	ldr	r2, [r7, #16]
 80140d2:	1c53      	adds	r3, r2, #1
 80140d4:	613b      	str	r3, [r7, #16]
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	1c59      	adds	r1, r3, #1
 80140da:	6179      	str	r1, [r7, #20]
 80140dc:	7812      	ldrb	r2, [r2, #0]
 80140de:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	3b01      	subs	r3, #1
 80140e4:	607b      	str	r3, [r7, #4]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d1f1      	bne.n	80140d0 <mem_cpy+0x1a>
	}
}
 80140ec:	bf00      	nop
 80140ee:	371c      	adds	r7, #28
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80140f8:	b480      	push	{r7}
 80140fa:	b087      	sub	sp, #28
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	1c5a      	adds	r2, r3, #1
 801410c:	617a      	str	r2, [r7, #20]
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	b2d2      	uxtb	r2, r2
 8014112:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	3b01      	subs	r3, #1
 8014118:	607b      	str	r3, [r7, #4]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d1f3      	bne.n	8014108 <mem_set+0x10>
}
 8014120:	bf00      	nop
 8014122:	bf00      	nop
 8014124:	371c      	adds	r7, #28
 8014126:	46bd      	mov	sp, r7
 8014128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412c:	4770      	bx	lr

0801412e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801412e:	b480      	push	{r7}
 8014130:	b089      	sub	sp, #36	@ 0x24
 8014132:	af00      	add	r7, sp, #0
 8014134:	60f8      	str	r0, [r7, #12]
 8014136:	60b9      	str	r1, [r7, #8]
 8014138:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	61fb      	str	r3, [r7, #28]
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	1c5a      	adds	r2, r3, #1
 801414a:	61fa      	str	r2, [r7, #28]
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	4619      	mov	r1, r3
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	1c5a      	adds	r2, r3, #1
 8014154:	61ba      	str	r2, [r7, #24]
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	1acb      	subs	r3, r1, r3
 801415a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	3b01      	subs	r3, #1
 8014160:	607b      	str	r3, [r7, #4]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d002      	beq.n	801416e <mem_cmp+0x40>
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d0eb      	beq.n	8014146 <mem_cmp+0x18>

	return r;
 801416e:	697b      	ldr	r3, [r7, #20]
}
 8014170:	4618      	mov	r0, r3
 8014172:	3724      	adds	r7, #36	@ 0x24
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr

0801417c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801417c:	b480      	push	{r7}
 801417e:	b083      	sub	sp, #12
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014186:	e002      	b.n	801418e <chk_chr+0x12>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	3301      	adds	r3, #1
 801418c:	607b      	str	r3, [r7, #4]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d005      	beq.n	80141a2 <chk_chr+0x26>
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	461a      	mov	r2, r3
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	4293      	cmp	r3, r2
 80141a0:	d1f2      	bne.n	8014188 <chk_chr+0xc>
	return *str;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	781b      	ldrb	r3, [r3, #0]
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	370c      	adds	r7, #12
 80141aa:	46bd      	mov	sp, r7
 80141ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b0:	4770      	bx	lr

080141b2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80141b2:	b580      	push	{r7, lr}
 80141b4:	b082      	sub	sp, #8
 80141b6:	af00      	add	r7, sp, #0
 80141b8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d009      	beq.n	80141d4 <lock_fs+0x22>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f002 f9f2 	bl	80165ae <ff_req_grant>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d001      	beq.n	80141d4 <lock_fs+0x22>
 80141d0:	2301      	movs	r3, #1
 80141d2:	e000      	b.n	80141d6 <lock_fs+0x24>
 80141d4:	2300      	movs	r3, #0
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}

080141de <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80141de:	b580      	push	{r7, lr}
 80141e0:	b082      	sub	sp, #8
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
 80141e6:	460b      	mov	r3, r1
 80141e8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d00d      	beq.n	801420c <unlock_fs+0x2e>
 80141f0:	78fb      	ldrb	r3, [r7, #3]
 80141f2:	2b0c      	cmp	r3, #12
 80141f4:	d00a      	beq.n	801420c <unlock_fs+0x2e>
 80141f6:	78fb      	ldrb	r3, [r7, #3]
 80141f8:	2b0b      	cmp	r3, #11
 80141fa:	d007      	beq.n	801420c <unlock_fs+0x2e>
 80141fc:	78fb      	ldrb	r3, [r7, #3]
 80141fe:	2b0f      	cmp	r3, #15
 8014200:	d004      	beq.n	801420c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	4618      	mov	r0, r3
 8014208:	f002 f9e6 	bl	80165d8 <ff_rel_grant>
	}
}
 801420c:	bf00      	nop
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014214:	b480      	push	{r7}
 8014216:	b085      	sub	sp, #20
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801421e:	2300      	movs	r3, #0
 8014220:	60bb      	str	r3, [r7, #8]
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	60fb      	str	r3, [r7, #12]
 8014226:	e029      	b.n	801427c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014228:	4a27      	ldr	r2, [pc, #156]	@ (80142c8 <chk_lock+0xb4>)
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	011b      	lsls	r3, r3, #4
 801422e:	4413      	add	r3, r2
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d01d      	beq.n	8014272 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014236:	4a24      	ldr	r2, [pc, #144]	@ (80142c8 <chk_lock+0xb4>)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	011b      	lsls	r3, r3, #4
 801423c:	4413      	add	r3, r2
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	429a      	cmp	r2, r3
 8014246:	d116      	bne.n	8014276 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014248:	4a1f      	ldr	r2, [pc, #124]	@ (80142c8 <chk_lock+0xb4>)
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	011b      	lsls	r3, r3, #4
 801424e:	4413      	add	r3, r2
 8014250:	3304      	adds	r3, #4
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014258:	429a      	cmp	r2, r3
 801425a:	d10c      	bne.n	8014276 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801425c:	4a1a      	ldr	r2, [pc, #104]	@ (80142c8 <chk_lock+0xb4>)
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	011b      	lsls	r3, r3, #4
 8014262:	4413      	add	r3, r2
 8014264:	3308      	adds	r3, #8
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801426c:	429a      	cmp	r2, r3
 801426e:	d102      	bne.n	8014276 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014270:	e007      	b.n	8014282 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014272:	2301      	movs	r3, #1
 8014274:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	3301      	adds	r3, #1
 801427a:	60fb      	str	r3, [r7, #12]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2b01      	cmp	r3, #1
 8014280:	d9d2      	bls.n	8014228 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	2b02      	cmp	r3, #2
 8014286:	d109      	bne.n	801429c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d102      	bne.n	8014294 <chk_lock+0x80>
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	2b02      	cmp	r3, #2
 8014292:	d101      	bne.n	8014298 <chk_lock+0x84>
 8014294:	2300      	movs	r3, #0
 8014296:	e010      	b.n	80142ba <chk_lock+0xa6>
 8014298:	2312      	movs	r3, #18
 801429a:	e00e      	b.n	80142ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d108      	bne.n	80142b4 <chk_lock+0xa0>
 80142a2:	4a09      	ldr	r2, [pc, #36]	@ (80142c8 <chk_lock+0xb4>)
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	011b      	lsls	r3, r3, #4
 80142a8:	4413      	add	r3, r2
 80142aa:	330c      	adds	r3, #12
 80142ac:	881b      	ldrh	r3, [r3, #0]
 80142ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142b2:	d101      	bne.n	80142b8 <chk_lock+0xa4>
 80142b4:	2310      	movs	r3, #16
 80142b6:	e000      	b.n	80142ba <chk_lock+0xa6>
 80142b8:	2300      	movs	r3, #0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3714      	adds	r7, #20
 80142be:	46bd      	mov	sp, r7
 80142c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop
 80142c8:	200017cc 	.word	0x200017cc

080142cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80142d2:	2300      	movs	r3, #0
 80142d4:	607b      	str	r3, [r7, #4]
 80142d6:	e002      	b.n	80142de <enq_lock+0x12>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	3301      	adds	r3, #1
 80142dc:	607b      	str	r3, [r7, #4]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d806      	bhi.n	80142f2 <enq_lock+0x26>
 80142e4:	4a09      	ldr	r2, [pc, #36]	@ (801430c <enq_lock+0x40>)
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	011b      	lsls	r3, r3, #4
 80142ea:	4413      	add	r3, r2
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d1f2      	bne.n	80142d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b02      	cmp	r3, #2
 80142f6:	bf14      	ite	ne
 80142f8:	2301      	movne	r3, #1
 80142fa:	2300      	moveq	r3, #0
 80142fc:	b2db      	uxtb	r3, r3
}
 80142fe:	4618      	mov	r0, r3
 8014300:	370c      	adds	r7, #12
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr
 801430a:	bf00      	nop
 801430c:	200017cc 	.word	0x200017cc

08014310 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801431a:	2300      	movs	r3, #0
 801431c:	60fb      	str	r3, [r7, #12]
 801431e:	e01f      	b.n	8014360 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014320:	4a41      	ldr	r2, [pc, #260]	@ (8014428 <inc_lock+0x118>)
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	011b      	lsls	r3, r3, #4
 8014326:	4413      	add	r3, r2
 8014328:	681a      	ldr	r2, [r3, #0]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	429a      	cmp	r2, r3
 8014330:	d113      	bne.n	801435a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8014332:	4a3d      	ldr	r2, [pc, #244]	@ (8014428 <inc_lock+0x118>)
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	011b      	lsls	r3, r3, #4
 8014338:	4413      	add	r3, r2
 801433a:	3304      	adds	r3, #4
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8014342:	429a      	cmp	r2, r3
 8014344:	d109      	bne.n	801435a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014346:	4a38      	ldr	r2, [pc, #224]	@ (8014428 <inc_lock+0x118>)
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	011b      	lsls	r3, r3, #4
 801434c:	4413      	add	r3, r2
 801434e:	3308      	adds	r3, #8
 8014350:	681a      	ldr	r2, [r3, #0]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014356:	429a      	cmp	r2, r3
 8014358:	d006      	beq.n	8014368 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	3301      	adds	r3, #1
 801435e:	60fb      	str	r3, [r7, #12]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	2b01      	cmp	r3, #1
 8014364:	d9dc      	bls.n	8014320 <inc_lock+0x10>
 8014366:	e000      	b.n	801436a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014368:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2b02      	cmp	r3, #2
 801436e:	d132      	bne.n	80143d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014370:	2300      	movs	r3, #0
 8014372:	60fb      	str	r3, [r7, #12]
 8014374:	e002      	b.n	801437c <inc_lock+0x6c>
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	3301      	adds	r3, #1
 801437a:	60fb      	str	r3, [r7, #12]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	2b01      	cmp	r3, #1
 8014380:	d806      	bhi.n	8014390 <inc_lock+0x80>
 8014382:	4a29      	ldr	r2, [pc, #164]	@ (8014428 <inc_lock+0x118>)
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	011b      	lsls	r3, r3, #4
 8014388:	4413      	add	r3, r2
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d1f2      	bne.n	8014376 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	2b02      	cmp	r3, #2
 8014394:	d101      	bne.n	801439a <inc_lock+0x8a>
 8014396:	2300      	movs	r3, #0
 8014398:	e040      	b.n	801441c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	4922      	ldr	r1, [pc, #136]	@ (8014428 <inc_lock+0x118>)
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	011b      	lsls	r3, r3, #4
 80143a4:	440b      	add	r3, r1
 80143a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	689a      	ldr	r2, [r3, #8]
 80143ac:	491e      	ldr	r1, [pc, #120]	@ (8014428 <inc_lock+0x118>)
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	011b      	lsls	r3, r3, #4
 80143b2:	440b      	add	r3, r1
 80143b4:	3304      	adds	r3, #4
 80143b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	695a      	ldr	r2, [r3, #20]
 80143bc:	491a      	ldr	r1, [pc, #104]	@ (8014428 <inc_lock+0x118>)
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	011b      	lsls	r3, r3, #4
 80143c2:	440b      	add	r3, r1
 80143c4:	3308      	adds	r3, #8
 80143c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80143c8:	4a17      	ldr	r2, [pc, #92]	@ (8014428 <inc_lock+0x118>)
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	011b      	lsls	r3, r3, #4
 80143ce:	4413      	add	r3, r2
 80143d0:	330c      	adds	r3, #12
 80143d2:	2200      	movs	r2, #0
 80143d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d009      	beq.n	80143f0 <inc_lock+0xe0>
 80143dc:	4a12      	ldr	r2, [pc, #72]	@ (8014428 <inc_lock+0x118>)
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	011b      	lsls	r3, r3, #4
 80143e2:	4413      	add	r3, r2
 80143e4:	330c      	adds	r3, #12
 80143e6:	881b      	ldrh	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d001      	beq.n	80143f0 <inc_lock+0xe0>
 80143ec:	2300      	movs	r3, #0
 80143ee:	e015      	b.n	801441c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d108      	bne.n	8014408 <inc_lock+0xf8>
 80143f6:	4a0c      	ldr	r2, [pc, #48]	@ (8014428 <inc_lock+0x118>)
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	011b      	lsls	r3, r3, #4
 80143fc:	4413      	add	r3, r2
 80143fe:	330c      	adds	r3, #12
 8014400:	881b      	ldrh	r3, [r3, #0]
 8014402:	3301      	adds	r3, #1
 8014404:	b29a      	uxth	r2, r3
 8014406:	e001      	b.n	801440c <inc_lock+0xfc>
 8014408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801440c:	4906      	ldr	r1, [pc, #24]	@ (8014428 <inc_lock+0x118>)
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	011b      	lsls	r3, r3, #4
 8014412:	440b      	add	r3, r1
 8014414:	330c      	adds	r3, #12
 8014416:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	3301      	adds	r3, #1
}
 801441c:	4618      	mov	r0, r3
 801441e:	3714      	adds	r7, #20
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr
 8014428:	200017cc 	.word	0x200017cc

0801442c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801442c:	b480      	push	{r7}
 801442e:	b085      	sub	sp, #20
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	3b01      	subs	r3, #1
 8014438:	607b      	str	r3, [r7, #4]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2b01      	cmp	r3, #1
 801443e:	d825      	bhi.n	801448c <dec_lock+0x60>
		n = Files[i].ctr;
 8014440:	4a17      	ldr	r2, [pc, #92]	@ (80144a0 <dec_lock+0x74>)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	011b      	lsls	r3, r3, #4
 8014446:	4413      	add	r3, r2
 8014448:	330c      	adds	r3, #12
 801444a:	881b      	ldrh	r3, [r3, #0]
 801444c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801444e:	89fb      	ldrh	r3, [r7, #14]
 8014450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014454:	d101      	bne.n	801445a <dec_lock+0x2e>
 8014456:	2300      	movs	r3, #0
 8014458:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801445a:	89fb      	ldrh	r3, [r7, #14]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <dec_lock+0x3a>
 8014460:	89fb      	ldrh	r3, [r7, #14]
 8014462:	3b01      	subs	r3, #1
 8014464:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8014466:	4a0e      	ldr	r2, [pc, #56]	@ (80144a0 <dec_lock+0x74>)
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	011b      	lsls	r3, r3, #4
 801446c:	4413      	add	r3, r2
 801446e:	330c      	adds	r3, #12
 8014470:	89fa      	ldrh	r2, [r7, #14]
 8014472:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014474:	89fb      	ldrh	r3, [r7, #14]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d105      	bne.n	8014486 <dec_lock+0x5a>
 801447a:	4a09      	ldr	r2, [pc, #36]	@ (80144a0 <dec_lock+0x74>)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	011b      	lsls	r3, r3, #4
 8014480:	4413      	add	r3, r2
 8014482:	2200      	movs	r2, #0
 8014484:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8014486:	2300      	movs	r3, #0
 8014488:	737b      	strb	r3, [r7, #13]
 801448a:	e001      	b.n	8014490 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801448c:	2302      	movs	r3, #2
 801448e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014490:	7b7b      	ldrb	r3, [r7, #13]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3714      	adds	r7, #20
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr
 801449e:	bf00      	nop
 80144a0:	200017cc 	.word	0x200017cc

080144a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80144a4:	b480      	push	{r7}
 80144a6:	b085      	sub	sp, #20
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80144ac:	2300      	movs	r3, #0
 80144ae:	60fb      	str	r3, [r7, #12]
 80144b0:	e010      	b.n	80144d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80144b2:	4a0d      	ldr	r2, [pc, #52]	@ (80144e8 <clear_lock+0x44>)
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	011b      	lsls	r3, r3, #4
 80144b8:	4413      	add	r3, r2
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d105      	bne.n	80144ce <clear_lock+0x2a>
 80144c2:	4a09      	ldr	r2, [pc, #36]	@ (80144e8 <clear_lock+0x44>)
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	011b      	lsls	r3, r3, #4
 80144c8:	4413      	add	r3, r2
 80144ca:	2200      	movs	r2, #0
 80144cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	3301      	adds	r3, #1
 80144d2:	60fb      	str	r3, [r7, #12]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2b01      	cmp	r3, #1
 80144d8:	d9eb      	bls.n	80144b2 <clear_lock+0xe>
	}
}
 80144da:	bf00      	nop
 80144dc:	bf00      	nop
 80144de:	3714      	adds	r7, #20
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr
 80144e8:	200017cc 	.word	0x200017cc

080144ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b086      	sub	sp, #24
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80144f4:	2300      	movs	r3, #0
 80144f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	78db      	ldrb	r3, [r3, #3]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d034      	beq.n	801456a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014504:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	7858      	ldrb	r0, [r3, #1]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014510:	2301      	movs	r3, #1
 8014512:	697a      	ldr	r2, [r7, #20]
 8014514:	f7ff fd0e 	bl	8013f34 <disk_write>
 8014518:	4603      	mov	r3, r0
 801451a:	2b00      	cmp	r3, #0
 801451c:	d002      	beq.n	8014524 <sync_window+0x38>
			res = FR_DISK_ERR;
 801451e:	2301      	movs	r3, #1
 8014520:	73fb      	strb	r3, [r7, #15]
 8014522:	e022      	b.n	801456a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2200      	movs	r2, #0
 8014528:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801452e:	697a      	ldr	r2, [r7, #20]
 8014530:	1ad2      	subs	r2, r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	69db      	ldr	r3, [r3, #28]
 8014536:	429a      	cmp	r2, r3
 8014538:	d217      	bcs.n	801456a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	789b      	ldrb	r3, [r3, #2]
 801453e:	613b      	str	r3, [r7, #16]
 8014540:	e010      	b.n	8014564 <sync_window+0x78>
					wsect += fs->fsize;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	69db      	ldr	r3, [r3, #28]
 8014546:	697a      	ldr	r2, [r7, #20]
 8014548:	4413      	add	r3, r2
 801454a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	7858      	ldrb	r0, [r3, #1]
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014556:	2301      	movs	r3, #1
 8014558:	697a      	ldr	r2, [r7, #20]
 801455a:	f7ff fceb 	bl	8013f34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	3b01      	subs	r3, #1
 8014562:	613b      	str	r3, [r7, #16]
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	2b01      	cmp	r3, #1
 8014568:	d8eb      	bhi.n	8014542 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801456a:	7bfb      	ldrb	r3, [r7, #15]
}
 801456c:	4618      	mov	r0, r3
 801456e:	3718      	adds	r7, #24
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801457e:	2300      	movs	r3, #0
 8014580:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014586:	683a      	ldr	r2, [r7, #0]
 8014588:	429a      	cmp	r2, r3
 801458a:	d01b      	beq.n	80145c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f7ff ffad 	bl	80144ec <sync_window>
 8014592:	4603      	mov	r3, r0
 8014594:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014596:	7bfb      	ldrb	r3, [r7, #15]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d113      	bne.n	80145c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	7858      	ldrb	r0, [r3, #1]
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80145a6:	2301      	movs	r3, #1
 80145a8:	683a      	ldr	r2, [r7, #0]
 80145aa:	f7ff fca3 	bl	8013ef4 <disk_read>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d004      	beq.n	80145be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80145b4:	f04f 33ff 	mov.w	r3, #4294967295
 80145b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80145ba:	2301      	movs	r3, #1
 80145bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	683a      	ldr	r2, [r7, #0]
 80145c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80145c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3710      	adds	r7, #16
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
	...

080145d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7ff ff87 	bl	80144ec <sync_window>
 80145de:	4603      	mov	r3, r0
 80145e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80145e2:	7bfb      	ldrb	r3, [r7, #15]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d158      	bne.n	801469a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b03      	cmp	r3, #3
 80145ee:	d148      	bne.n	8014682 <sync_fs+0xb2>
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	791b      	ldrb	r3, [r3, #4]
 80145f4:	2b01      	cmp	r3, #1
 80145f6:	d144      	bne.n	8014682 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3334      	adds	r3, #52	@ 0x34
 80145fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014600:	2100      	movs	r1, #0
 8014602:	4618      	mov	r0, r3
 8014604:	f7ff fd78 	bl	80140f8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	3334      	adds	r3, #52	@ 0x34
 801460c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014610:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014614:	4618      	mov	r0, r3
 8014616:	f7ff fd07 	bl	8014028 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	3334      	adds	r3, #52	@ 0x34
 801461e:	4921      	ldr	r1, [pc, #132]	@ (80146a4 <sync_fs+0xd4>)
 8014620:	4618      	mov	r0, r3
 8014622:	f7ff fd1c 	bl	801405e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	3334      	adds	r3, #52	@ 0x34
 801462a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801462e:	491e      	ldr	r1, [pc, #120]	@ (80146a8 <sync_fs+0xd8>)
 8014630:	4618      	mov	r0, r3
 8014632:	f7ff fd14 	bl	801405e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	3334      	adds	r3, #52	@ 0x34
 801463a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	695b      	ldr	r3, [r3, #20]
 8014642:	4619      	mov	r1, r3
 8014644:	4610      	mov	r0, r2
 8014646:	f7ff fd0a 	bl	801405e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	3334      	adds	r3, #52	@ 0x34
 801464e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	691b      	ldr	r3, [r3, #16]
 8014656:	4619      	mov	r1, r3
 8014658:	4610      	mov	r0, r2
 801465a:	f7ff fd00 	bl	801405e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6a1b      	ldr	r3, [r3, #32]
 8014662:	1c5a      	adds	r2, r3, #1
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	7858      	ldrb	r0, [r3, #1]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014676:	2301      	movs	r3, #1
 8014678:	f7ff fc5c 	bl	8013f34 <disk_write>
			fs->fsi_flag = 0;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	785b      	ldrb	r3, [r3, #1]
 8014686:	2200      	movs	r2, #0
 8014688:	2100      	movs	r1, #0
 801468a:	4618      	mov	r0, r3
 801468c:	f7ff fc72 	bl	8013f74 <disk_ioctl>
 8014690:	4603      	mov	r3, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	d001      	beq.n	801469a <sync_fs+0xca>
 8014696:	2301      	movs	r3, #1
 8014698:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801469a:	7bfb      	ldrb	r3, [r7, #15]
}
 801469c:	4618      	mov	r0, r3
 801469e:	3710      	adds	r7, #16
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	41615252 	.word	0x41615252
 80146a8:	61417272 	.word	0x61417272

080146ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
 80146b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	3b02      	subs	r3, #2
 80146ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	699b      	ldr	r3, [r3, #24]
 80146c0:	3b02      	subs	r3, #2
 80146c2:	683a      	ldr	r2, [r7, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d301      	bcc.n	80146cc <clust2sect+0x20>
 80146c8:	2300      	movs	r3, #0
 80146ca:	e008      	b.n	80146de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	895b      	ldrh	r3, [r3, #10]
 80146d0:	461a      	mov	r2, r3
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	fb03 f202 	mul.w	r2, r3, r2
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146dc:	4413      	add	r3, r2
}
 80146de:	4618      	mov	r0, r3
 80146e0:	370c      	adds	r7, #12
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b086      	sub	sp, #24
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
 80146f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80146fa:	683b      	ldr	r3, [r7, #0]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d904      	bls.n	801470a <get_fat+0x20>
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	699b      	ldr	r3, [r3, #24]
 8014704:	683a      	ldr	r2, [r7, #0]
 8014706:	429a      	cmp	r2, r3
 8014708:	d302      	bcc.n	8014710 <get_fat+0x26>
		val = 1;	/* Internal error */
 801470a:	2301      	movs	r3, #1
 801470c:	617b      	str	r3, [r7, #20]
 801470e:	e08e      	b.n	801482e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014710:	f04f 33ff 	mov.w	r3, #4294967295
 8014714:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	2b03      	cmp	r3, #3
 801471c:	d061      	beq.n	80147e2 <get_fat+0xf8>
 801471e:	2b03      	cmp	r3, #3
 8014720:	dc7b      	bgt.n	801481a <get_fat+0x130>
 8014722:	2b01      	cmp	r3, #1
 8014724:	d002      	beq.n	801472c <get_fat+0x42>
 8014726:	2b02      	cmp	r3, #2
 8014728:	d041      	beq.n	80147ae <get_fat+0xc4>
 801472a:	e076      	b.n	801481a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	085b      	lsrs	r3, r3, #1
 8014734:	68fa      	ldr	r2, [r7, #12]
 8014736:	4413      	add	r3, r2
 8014738:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	0a5b      	lsrs	r3, r3, #9
 8014742:	4413      	add	r3, r2
 8014744:	4619      	mov	r1, r3
 8014746:	6938      	ldr	r0, [r7, #16]
 8014748:	f7ff ff14 	bl	8014574 <move_window>
 801474c:	4603      	mov	r3, r0
 801474e:	2b00      	cmp	r3, #0
 8014750:	d166      	bne.n	8014820 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	1c5a      	adds	r2, r3, #1
 8014756:	60fa      	str	r2, [r7, #12]
 8014758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	4413      	add	r3, r2
 8014760:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014764:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	0a5b      	lsrs	r3, r3, #9
 801476e:	4413      	add	r3, r2
 8014770:	4619      	mov	r1, r3
 8014772:	6938      	ldr	r0, [r7, #16]
 8014774:	f7ff fefe 	bl	8014574 <move_window>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d152      	bne.n	8014824 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014784:	693a      	ldr	r2, [r7, #16]
 8014786:	4413      	add	r3, r2
 8014788:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801478c:	021b      	lsls	r3, r3, #8
 801478e:	68ba      	ldr	r2, [r7, #8]
 8014790:	4313      	orrs	r3, r2
 8014792:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	f003 0301 	and.w	r3, r3, #1
 801479a:	2b00      	cmp	r3, #0
 801479c:	d002      	beq.n	80147a4 <get_fat+0xba>
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	091b      	lsrs	r3, r3, #4
 80147a2:	e002      	b.n	80147aa <get_fat+0xc0>
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80147aa:	617b      	str	r3, [r7, #20]
			break;
 80147ac:	e03f      	b.n	801482e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80147ae:	693b      	ldr	r3, [r7, #16]
 80147b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	0a1b      	lsrs	r3, r3, #8
 80147b6:	4413      	add	r3, r2
 80147b8:	4619      	mov	r1, r3
 80147ba:	6938      	ldr	r0, [r7, #16]
 80147bc:	f7ff feda 	bl	8014574 <move_window>
 80147c0:	4603      	mov	r3, r0
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d130      	bne.n	8014828 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80147d4:	4413      	add	r3, r2
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7ff fbea 	bl	8013fb0 <ld_word>
 80147dc:	4603      	mov	r3, r0
 80147de:	617b      	str	r3, [r7, #20]
			break;
 80147e0:	e025      	b.n	801482e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	09db      	lsrs	r3, r3, #7
 80147ea:	4413      	add	r3, r2
 80147ec:	4619      	mov	r1, r3
 80147ee:	6938      	ldr	r0, [r7, #16]
 80147f0:	f7ff fec0 	bl	8014574 <move_window>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d118      	bne.n	801482c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014808:	4413      	add	r3, r2
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff fbe9 	bl	8013fe2 <ld_dword>
 8014810:	4603      	mov	r3, r0
 8014812:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8014816:	617b      	str	r3, [r7, #20]
			break;
 8014818:	e009      	b.n	801482e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801481a:	2301      	movs	r3, #1
 801481c:	617b      	str	r3, [r7, #20]
 801481e:	e006      	b.n	801482e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014820:	bf00      	nop
 8014822:	e004      	b.n	801482e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014824:	bf00      	nop
 8014826:	e002      	b.n	801482e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014828:	bf00      	nop
 801482a:	e000      	b.n	801482e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801482c:	bf00      	nop
		}
	}

	return val;
 801482e:	697b      	ldr	r3, [r7, #20]
}
 8014830:	4618      	mov	r0, r3
 8014832:	3718      	adds	r7, #24
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014838:	b590      	push	{r4, r7, lr}
 801483a:	b089      	sub	sp, #36	@ 0x24
 801483c:	af00      	add	r7, sp, #0
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014844:	2302      	movs	r3, #2
 8014846:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	2b01      	cmp	r3, #1
 801484c:	f240 80d9 	bls.w	8014a02 <put_fat+0x1ca>
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	699b      	ldr	r3, [r3, #24]
 8014854:	68ba      	ldr	r2, [r7, #8]
 8014856:	429a      	cmp	r2, r3
 8014858:	f080 80d3 	bcs.w	8014a02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	2b03      	cmp	r3, #3
 8014862:	f000 8096 	beq.w	8014992 <put_fat+0x15a>
 8014866:	2b03      	cmp	r3, #3
 8014868:	f300 80cb 	bgt.w	8014a02 <put_fat+0x1ca>
 801486c:	2b01      	cmp	r3, #1
 801486e:	d002      	beq.n	8014876 <put_fat+0x3e>
 8014870:	2b02      	cmp	r3, #2
 8014872:	d06e      	beq.n	8014952 <put_fat+0x11a>
 8014874:	e0c5      	b.n	8014a02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	61bb      	str	r3, [r7, #24]
 801487a:	69bb      	ldr	r3, [r7, #24]
 801487c:	085b      	lsrs	r3, r3, #1
 801487e:	69ba      	ldr	r2, [r7, #24]
 8014880:	4413      	add	r3, r2
 8014882:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	0a5b      	lsrs	r3, r3, #9
 801488c:	4413      	add	r3, r2
 801488e:	4619      	mov	r1, r3
 8014890:	68f8      	ldr	r0, [r7, #12]
 8014892:	f7ff fe6f 	bl	8014574 <move_window>
 8014896:	4603      	mov	r3, r0
 8014898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801489a:	7ffb      	ldrb	r3, [r7, #31]
 801489c:	2b00      	cmp	r3, #0
 801489e:	f040 80a9 	bne.w	80149f4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	1c59      	adds	r1, r3, #1
 80148ac:	61b9      	str	r1, [r7, #24]
 80148ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148b2:	4413      	add	r3, r2
 80148b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	f003 0301 	and.w	r3, r3, #1
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00d      	beq.n	80148dc <put_fat+0xa4>
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	b25b      	sxtb	r3, r3
 80148c6:	f003 030f 	and.w	r3, r3, #15
 80148ca:	b25a      	sxtb	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	b25b      	sxtb	r3, r3
 80148d0:	011b      	lsls	r3, r3, #4
 80148d2:	b25b      	sxtb	r3, r3
 80148d4:	4313      	orrs	r3, r2
 80148d6:	b25b      	sxtb	r3, r3
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	e001      	b.n	80148e0 <put_fat+0xa8>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	697a      	ldr	r2, [r7, #20]
 80148e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2201      	movs	r2, #1
 80148e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	0a5b      	lsrs	r3, r3, #9
 80148f2:	4413      	add	r3, r2
 80148f4:	4619      	mov	r1, r3
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f7ff fe3c 	bl	8014574 <move_window>
 80148fc:	4603      	mov	r3, r0
 80148fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014900:	7ffb      	ldrb	r3, [r7, #31]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d178      	bne.n	80149f8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014912:	4413      	add	r3, r2
 8014914:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	f003 0301 	and.w	r3, r3, #1
 801491c:	2b00      	cmp	r3, #0
 801491e:	d003      	beq.n	8014928 <put_fat+0xf0>
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	091b      	lsrs	r3, r3, #4
 8014924:	b2db      	uxtb	r3, r3
 8014926:	e00e      	b.n	8014946 <put_fat+0x10e>
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	b25b      	sxtb	r3, r3
 801492e:	f023 030f 	bic.w	r3, r3, #15
 8014932:	b25a      	sxtb	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	0a1b      	lsrs	r3, r3, #8
 8014938:	b25b      	sxtb	r3, r3
 801493a:	f003 030f 	and.w	r3, r3, #15
 801493e:	b25b      	sxtb	r3, r3
 8014940:	4313      	orrs	r3, r2
 8014942:	b25b      	sxtb	r3, r3
 8014944:	b2db      	uxtb	r3, r3
 8014946:	697a      	ldr	r2, [r7, #20]
 8014948:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2201      	movs	r2, #1
 801494e:	70da      	strb	r2, [r3, #3]
			break;
 8014950:	e057      	b.n	8014a02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	0a1b      	lsrs	r3, r3, #8
 801495a:	4413      	add	r3, r2
 801495c:	4619      	mov	r1, r3
 801495e:	68f8      	ldr	r0, [r7, #12]
 8014960:	f7ff fe08 	bl	8014574 <move_window>
 8014964:	4603      	mov	r3, r0
 8014966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014968:	7ffb      	ldrb	r3, [r7, #31]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d146      	bne.n	80149fc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801497c:	4413      	add	r3, r2
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	b292      	uxth	r2, r2
 8014982:	4611      	mov	r1, r2
 8014984:	4618      	mov	r0, r3
 8014986:	f7ff fb4f 	bl	8014028 <st_word>
			fs->wflag = 1;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2201      	movs	r2, #1
 801498e:	70da      	strb	r2, [r3, #3]
			break;
 8014990:	e037      	b.n	8014a02 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	09db      	lsrs	r3, r3, #7
 801499a:	4413      	add	r3, r2
 801499c:	4619      	mov	r1, r3
 801499e:	68f8      	ldr	r0, [r7, #12]
 80149a0:	f7ff fde8 	bl	8014574 <move_window>
 80149a4:	4603      	mov	r3, r0
 80149a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80149a8:	7ffb      	ldrb	r3, [r7, #31]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d128      	bne.n	8014a00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	009b      	lsls	r3, r3, #2
 80149be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80149c2:	4413      	add	r3, r2
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7ff fb0c 	bl	8013fe2 <ld_dword>
 80149ca:	4603      	mov	r3, r0
 80149cc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80149d0:	4323      	orrs	r3, r4
 80149d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	009b      	lsls	r3, r3, #2
 80149de:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80149e2:	4413      	add	r3, r2
 80149e4:	6879      	ldr	r1, [r7, #4]
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7ff fb39 	bl	801405e <st_dword>
			fs->wflag = 1;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2201      	movs	r2, #1
 80149f0:	70da      	strb	r2, [r3, #3]
			break;
 80149f2:	e006      	b.n	8014a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80149f4:	bf00      	nop
 80149f6:	e004      	b.n	8014a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80149f8:	bf00      	nop
 80149fa:	e002      	b.n	8014a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80149fc:	bf00      	nop
 80149fe:	e000      	b.n	8014a02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014a00:	bf00      	nop
		}
	}
	return res;
 8014a02:	7ffb      	ldrb	r3, [r7, #31]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3724      	adds	r7, #36	@ 0x24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd90      	pop	{r4, r7, pc}

08014a0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b088      	sub	sp, #32
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d904      	bls.n	8014a32 <remove_chain+0x26>
 8014a28:	69bb      	ldr	r3, [r7, #24]
 8014a2a:	699b      	ldr	r3, [r3, #24]
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d301      	bcc.n	8014a36 <remove_chain+0x2a>
 8014a32:	2302      	movs	r3, #2
 8014a34:	e04b      	b.n	8014ace <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d00c      	beq.n	8014a56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a40:	6879      	ldr	r1, [r7, #4]
 8014a42:	69b8      	ldr	r0, [r7, #24]
 8014a44:	f7ff fef8 	bl	8014838 <put_fat>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014a4c:	7ffb      	ldrb	r3, [r7, #31]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d001      	beq.n	8014a56 <remove_chain+0x4a>
 8014a52:	7ffb      	ldrb	r3, [r7, #31]
 8014a54:	e03b      	b.n	8014ace <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014a56:	68b9      	ldr	r1, [r7, #8]
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f7ff fe46 	bl	80146ea <get_fat>
 8014a5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d031      	beq.n	8014aca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	2b01      	cmp	r3, #1
 8014a6a:	d101      	bne.n	8014a70 <remove_chain+0x64>
 8014a6c:	2302      	movs	r3, #2
 8014a6e:	e02e      	b.n	8014ace <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a76:	d101      	bne.n	8014a7c <remove_chain+0x70>
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e028      	b.n	8014ace <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	68b9      	ldr	r1, [r7, #8]
 8014a80:	69b8      	ldr	r0, [r7, #24]
 8014a82:	f7ff fed9 	bl	8014838 <put_fat>
 8014a86:	4603      	mov	r3, r0
 8014a88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014a8a:	7ffb      	ldrb	r3, [r7, #31]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d001      	beq.n	8014a94 <remove_chain+0x88>
 8014a90:	7ffb      	ldrb	r3, [r7, #31]
 8014a92:	e01c      	b.n	8014ace <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014a94:	69bb      	ldr	r3, [r7, #24]
 8014a96:	695a      	ldr	r2, [r3, #20]
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	699b      	ldr	r3, [r3, #24]
 8014a9c:	3b02      	subs	r3, #2
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d20b      	bcs.n	8014aba <remove_chain+0xae>
			fs->free_clst++;
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	695b      	ldr	r3, [r3, #20]
 8014aa6:	1c5a      	adds	r2, r3, #1
 8014aa8:	69bb      	ldr	r3, [r7, #24]
 8014aaa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	791b      	ldrb	r3, [r3, #4]
 8014ab0:	f043 0301 	orr.w	r3, r3, #1
 8014ab4:	b2da      	uxtb	r2, r3
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	699b      	ldr	r3, [r3, #24]
 8014ac2:	68ba      	ldr	r2, [r7, #8]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d3c6      	bcc.n	8014a56 <remove_chain+0x4a>
 8014ac8:	e000      	b.n	8014acc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014aca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014acc:	2300      	movs	r3, #0
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3720      	adds	r7, #32
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}

08014ad6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014ad6:	b580      	push	{r7, lr}
 8014ad8:	b088      	sub	sp, #32
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	6078      	str	r0, [r7, #4]
 8014ade:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d10d      	bne.n	8014b08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	691b      	ldr	r3, [r3, #16]
 8014af0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d004      	beq.n	8014b02 <create_chain+0x2c>
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	699b      	ldr	r3, [r3, #24]
 8014afc:	69ba      	ldr	r2, [r7, #24]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d31b      	bcc.n	8014b3a <create_chain+0x64>
 8014b02:	2301      	movs	r3, #1
 8014b04:	61bb      	str	r3, [r7, #24]
 8014b06:	e018      	b.n	8014b3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014b08:	6839      	ldr	r1, [r7, #0]
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7ff fded 	bl	80146ea <get_fat>
 8014b10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	d801      	bhi.n	8014b1c <create_chain+0x46>
 8014b18:	2301      	movs	r3, #1
 8014b1a:	e070      	b.n	8014bfe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b22:	d101      	bne.n	8014b28 <create_chain+0x52>
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	e06a      	b.n	8014bfe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	699b      	ldr	r3, [r3, #24]
 8014b2c:	68fa      	ldr	r2, [r7, #12]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d201      	bcs.n	8014b36 <create_chain+0x60>
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	e063      	b.n	8014bfe <create_chain+0x128>
		scl = clst;
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014b3a:	69bb      	ldr	r3, [r7, #24]
 8014b3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	3301      	adds	r3, #1
 8014b42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	699b      	ldr	r3, [r3, #24]
 8014b48:	69fa      	ldr	r2, [r7, #28]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d307      	bcc.n	8014b5e <create_chain+0x88>
				ncl = 2;
 8014b4e:	2302      	movs	r3, #2
 8014b50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014b52:	69fa      	ldr	r2, [r7, #28]
 8014b54:	69bb      	ldr	r3, [r7, #24]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d901      	bls.n	8014b5e <create_chain+0x88>
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	e04f      	b.n	8014bfe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014b5e:	69f9      	ldr	r1, [r7, #28]
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f7ff fdc2 	bl	80146ea <get_fat>
 8014b66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00e      	beq.n	8014b8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d003      	beq.n	8014b7c <create_chain+0xa6>
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b7a:	d101      	bne.n	8014b80 <create_chain+0xaa>
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	e03e      	b.n	8014bfe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014b80:	69fa      	ldr	r2, [r7, #28]
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d1da      	bne.n	8014b3e <create_chain+0x68>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e038      	b.n	8014bfe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014b8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b92:	69f9      	ldr	r1, [r7, #28]
 8014b94:	6938      	ldr	r0, [r7, #16]
 8014b96:	f7ff fe4f 	bl	8014838 <put_fat>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014b9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d109      	bne.n	8014bb8 <create_chain+0xe2>
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d006      	beq.n	8014bb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014baa:	69fa      	ldr	r2, [r7, #28]
 8014bac:	6839      	ldr	r1, [r7, #0]
 8014bae:	6938      	ldr	r0, [r7, #16]
 8014bb0:	f7ff fe42 	bl	8014838 <put_fat>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014bb8:	7dfb      	ldrb	r3, [r7, #23]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d116      	bne.n	8014bec <create_chain+0x116>
		fs->last_clst = ncl;
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	69fa      	ldr	r2, [r7, #28]
 8014bc2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	695a      	ldr	r2, [r3, #20]
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	699b      	ldr	r3, [r3, #24]
 8014bcc:	3b02      	subs	r3, #2
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d804      	bhi.n	8014bdc <create_chain+0x106>
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	695b      	ldr	r3, [r3, #20]
 8014bd6:	1e5a      	subs	r2, r3, #1
 8014bd8:	693b      	ldr	r3, [r7, #16]
 8014bda:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	791b      	ldrb	r3, [r3, #4]
 8014be0:	f043 0301 	orr.w	r3, r3, #1
 8014be4:	b2da      	uxtb	r2, r3
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	711a      	strb	r2, [r3, #4]
 8014bea:	e007      	b.n	8014bfc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014bec:	7dfb      	ldrb	r3, [r7, #23]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d102      	bne.n	8014bf8 <create_chain+0x122>
 8014bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf6:	e000      	b.n	8014bfa <create_chain+0x124>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014bfc:	69fb      	ldr	r3, [r7, #28]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3720      	adds	r7, #32
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}

08014c06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014c06:	b480      	push	{r7}
 8014c08:	b087      	sub	sp, #28
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	6078      	str	r0, [r7, #4]
 8014c0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	0a5b      	lsrs	r3, r3, #9
 8014c22:	68fa      	ldr	r2, [r7, #12]
 8014c24:	8952      	ldrh	r2, [r2, #10]
 8014c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	1d1a      	adds	r2, r3, #4
 8014c30:	613a      	str	r2, [r7, #16]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d101      	bne.n	8014c40 <clmt_clust+0x3a>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	e010      	b.n	8014c62 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014c40:	697a      	ldr	r2, [r7, #20]
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d307      	bcc.n	8014c58 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8014c48:	697a      	ldr	r2, [r7, #20]
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	617b      	str	r3, [r7, #20]
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	3304      	adds	r3, #4
 8014c54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014c56:	e7e9      	b.n	8014c2c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014c58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	4413      	add	r3, r2
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	371c      	adds	r7, #28
 8014c66:	46bd      	mov	sp, r7
 8014c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6c:	4770      	bx	lr

08014c6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014c6e:	b580      	push	{r7, lr}
 8014c70:	b086      	sub	sp, #24
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014c84:	d204      	bcs.n	8014c90 <dir_sdi+0x22>
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	f003 031f 	and.w	r3, r3, #31
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d001      	beq.n	8014c94 <dir_sdi+0x26>
		return FR_INT_ERR;
 8014c90:	2302      	movs	r3, #2
 8014c92:	e063      	b.n	8014d5c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	683a      	ldr	r2, [r7, #0]
 8014c98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	689b      	ldr	r3, [r3, #8]
 8014c9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d106      	bne.n	8014cb4 <dir_sdi+0x46>
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	2b02      	cmp	r3, #2
 8014cac:	d902      	bls.n	8014cb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cb2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014cb4:	697b      	ldr	r3, [r7, #20]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d10c      	bne.n	8014cd4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	095b      	lsrs	r3, r3, #5
 8014cbe:	693a      	ldr	r2, [r7, #16]
 8014cc0:	8912      	ldrh	r2, [r2, #8]
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d301      	bcc.n	8014cca <dir_sdi+0x5c>
 8014cc6:	2302      	movs	r3, #2
 8014cc8:	e048      	b.n	8014d5c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	61da      	str	r2, [r3, #28]
 8014cd2:	e029      	b.n	8014d28 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	895b      	ldrh	r3, [r3, #10]
 8014cd8:	025b      	lsls	r3, r3, #9
 8014cda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014cdc:	e019      	b.n	8014d12 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6979      	ldr	r1, [r7, #20]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7ff fd01 	bl	80146ea <get_fat>
 8014ce8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cf0:	d101      	bne.n	8014cf6 <dir_sdi+0x88>
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	e032      	b.n	8014d5c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d904      	bls.n	8014d06 <dir_sdi+0x98>
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	699b      	ldr	r3, [r3, #24]
 8014d00:	697a      	ldr	r2, [r7, #20]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d301      	bcc.n	8014d0a <dir_sdi+0x9c>
 8014d06:	2302      	movs	r3, #2
 8014d08:	e028      	b.n	8014d5c <dir_sdi+0xee>
			ofs -= csz;
 8014d0a:	683a      	ldr	r2, [r7, #0]
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	1ad3      	subs	r3, r2, r3
 8014d10:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014d12:	683a      	ldr	r2, [r7, #0]
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d2e1      	bcs.n	8014cde <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014d1a:	6979      	ldr	r1, [r7, #20]
 8014d1c:	6938      	ldr	r0, [r7, #16]
 8014d1e:	f7ff fcc5 	bl	80146ac <clust2sect>
 8014d22:	4602      	mov	r2, r0
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	697a      	ldr	r2, [r7, #20]
 8014d2c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	69db      	ldr	r3, [r3, #28]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d101      	bne.n	8014d3a <dir_sdi+0xcc>
 8014d36:	2302      	movs	r3, #2
 8014d38:	e010      	b.n	8014d5c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	69da      	ldr	r2, [r3, #28]
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	0a5b      	lsrs	r3, r3, #9
 8014d42:	441a      	add	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d54:	441a      	add	r2, r3
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014d5a:	2300      	movs	r3, #0
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3718      	adds	r7, #24
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b086      	sub	sp, #24
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	695b      	ldr	r3, [r3, #20]
 8014d78:	3320      	adds	r3, #32
 8014d7a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	69db      	ldr	r3, [r3, #28]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d003      	beq.n	8014d8c <dir_next+0x28>
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8014d8a:	d301      	bcc.n	8014d90 <dir_next+0x2c>
 8014d8c:	2304      	movs	r3, #4
 8014d8e:	e0aa      	b.n	8014ee6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014d90:	68bb      	ldr	r3, [r7, #8]
 8014d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	f040 8098 	bne.w	8014ecc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	69db      	ldr	r3, [r3, #28]
 8014da0:	1c5a      	adds	r2, r3, #1
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	699b      	ldr	r3, [r3, #24]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d10b      	bne.n	8014dc6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	095b      	lsrs	r3, r3, #5
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	8912      	ldrh	r2, [r2, #8]
 8014db6:	4293      	cmp	r3, r2
 8014db8:	f0c0 8088 	bcc.w	8014ecc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	61da      	str	r2, [r3, #28]
 8014dc2:	2304      	movs	r3, #4
 8014dc4:	e08f      	b.n	8014ee6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	0a5b      	lsrs	r3, r3, #9
 8014dca:	68fa      	ldr	r2, [r7, #12]
 8014dcc:	8952      	ldrh	r2, [r2, #10]
 8014dce:	3a01      	subs	r2, #1
 8014dd0:	4013      	ands	r3, r2
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d17a      	bne.n	8014ecc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	699b      	ldr	r3, [r3, #24]
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4610      	mov	r0, r2
 8014de0:	f7ff fc83 	bl	80146ea <get_fat>
 8014de4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d801      	bhi.n	8014df0 <dir_next+0x8c>
 8014dec:	2302      	movs	r3, #2
 8014dee:	e07a      	b.n	8014ee6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df6:	d101      	bne.n	8014dfc <dir_next+0x98>
 8014df8:	2301      	movs	r3, #1
 8014dfa:	e074      	b.n	8014ee6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	699b      	ldr	r3, [r3, #24]
 8014e00:	697a      	ldr	r2, [r7, #20]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d358      	bcc.n	8014eb8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d104      	bne.n	8014e16 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	61da      	str	r2, [r3, #28]
 8014e12:	2304      	movs	r3, #4
 8014e14:	e067      	b.n	8014ee6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	699b      	ldr	r3, [r3, #24]
 8014e1c:	4619      	mov	r1, r3
 8014e1e:	4610      	mov	r0, r2
 8014e20:	f7ff fe59 	bl	8014ad6 <create_chain>
 8014e24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d101      	bne.n	8014e30 <dir_next+0xcc>
 8014e2c:	2307      	movs	r3, #7
 8014e2e:	e05a      	b.n	8014ee6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	d101      	bne.n	8014e3a <dir_next+0xd6>
 8014e36:	2302      	movs	r3, #2
 8014e38:	e055      	b.n	8014ee6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e40:	d101      	bne.n	8014e46 <dir_next+0xe2>
 8014e42:	2301      	movs	r3, #1
 8014e44:	e04f      	b.n	8014ee6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014e46:	68f8      	ldr	r0, [r7, #12]
 8014e48:	f7ff fb50 	bl	80144ec <sync_window>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d001      	beq.n	8014e56 <dir_next+0xf2>
 8014e52:	2301      	movs	r3, #1
 8014e54:	e047      	b.n	8014ee6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	3334      	adds	r3, #52	@ 0x34
 8014e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e5e:	2100      	movs	r1, #0
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7ff f949 	bl	80140f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014e66:	2300      	movs	r3, #0
 8014e68:	613b      	str	r3, [r7, #16]
 8014e6a:	6979      	ldr	r1, [r7, #20]
 8014e6c:	68f8      	ldr	r0, [r7, #12]
 8014e6e:	f7ff fc1d 	bl	80146ac <clust2sect>
 8014e72:	4602      	mov	r2, r0
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e78:	e012      	b.n	8014ea0 <dir_next+0x13c>
						fs->wflag = 1;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f7ff fb33 	bl	80144ec <sync_window>
 8014e86:	4603      	mov	r3, r0
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d001      	beq.n	8014e90 <dir_next+0x12c>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e02a      	b.n	8014ee6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	3301      	adds	r3, #1
 8014e94:	613b      	str	r3, [r7, #16]
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e9a:	1c5a      	adds	r2, r3, #1
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	895b      	ldrh	r3, [r3, #10]
 8014ea4:	461a      	mov	r2, r3
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	4293      	cmp	r3, r2
 8014eaa:	d3e6      	bcc.n	8014e7a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	1ad2      	subs	r2, r2, r3
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	697a      	ldr	r2, [r7, #20]
 8014ebc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014ebe:	6979      	ldr	r1, [r7, #20]
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f7ff fbf3 	bl	80146ac <clust2sect>
 8014ec6:	4602      	mov	r2, r0
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	68ba      	ldr	r2, [r7, #8]
 8014ed0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ede:	441a      	add	r2, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3718      	adds	r7, #24
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b086      	sub	sp, #24
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014efe:	2100      	movs	r1, #0
 8014f00:	6878      	ldr	r0, [r7, #4]
 8014f02:	f7ff feb4 	bl	8014c6e <dir_sdi>
 8014f06:	4603      	mov	r3, r0
 8014f08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f0a:	7dfb      	ldrb	r3, [r7, #23]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d12b      	bne.n	8014f68 <dir_alloc+0x7a>
		n = 0;
 8014f10:	2300      	movs	r3, #0
 8014f12:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	69db      	ldr	r3, [r3, #28]
 8014f18:	4619      	mov	r1, r3
 8014f1a:	68f8      	ldr	r0, [r7, #12]
 8014f1c:	f7ff fb2a 	bl	8014574 <move_window>
 8014f20:	4603      	mov	r3, r0
 8014f22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014f24:	7dfb      	ldrb	r3, [r7, #23]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d11d      	bne.n	8014f66 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6a1b      	ldr	r3, [r3, #32]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	2be5      	cmp	r3, #229	@ 0xe5
 8014f32:	d004      	beq.n	8014f3e <dir_alloc+0x50>
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6a1b      	ldr	r3, [r3, #32]
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d107      	bne.n	8014f4e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	3301      	adds	r3, #1
 8014f42:	613b      	str	r3, [r7, #16]
 8014f44:	693a      	ldr	r2, [r7, #16]
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d102      	bne.n	8014f52 <dir_alloc+0x64>
 8014f4c:	e00c      	b.n	8014f68 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014f4e:	2300      	movs	r3, #0
 8014f50:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014f52:	2101      	movs	r1, #1
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7ff ff05 	bl	8014d64 <dir_next>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014f5e:	7dfb      	ldrb	r3, [r7, #23]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d0d7      	beq.n	8014f14 <dir_alloc+0x26>
 8014f64:	e000      	b.n	8014f68 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014f66:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014f68:	7dfb      	ldrb	r3, [r7, #23]
 8014f6a:	2b04      	cmp	r3, #4
 8014f6c:	d101      	bne.n	8014f72 <dir_alloc+0x84>
 8014f6e:	2307      	movs	r3, #7
 8014f70:	75fb      	strb	r3, [r7, #23]
	return res;
 8014f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3718      	adds	r7, #24
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	331a      	adds	r3, #26
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7ff f810 	bl	8013fb0 <ld_word>
 8014f90:	4603      	mov	r3, r0
 8014f92:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	2b03      	cmp	r3, #3
 8014f9a:	d109      	bne.n	8014fb0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	3314      	adds	r3, #20
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7ff f805 	bl	8013fb0 <ld_word>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	041b      	lsls	r3, r3, #16
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	4313      	orrs	r3, r2
 8014fae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3710      	adds	r7, #16
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014fba:	b580      	push	{r7, lr}
 8014fbc:	b084      	sub	sp, #16
 8014fbe:	af00      	add	r7, sp, #0
 8014fc0:	60f8      	str	r0, [r7, #12]
 8014fc2:	60b9      	str	r1, [r7, #8]
 8014fc4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	331a      	adds	r3, #26
 8014fca:	687a      	ldr	r2, [r7, #4]
 8014fcc:	b292      	uxth	r2, r2
 8014fce:	4611      	mov	r1, r2
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff f829 	bl	8014028 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	2b03      	cmp	r3, #3
 8014fdc:	d109      	bne.n	8014ff2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	f103 0214 	add.w	r2, r3, #20
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	0c1b      	lsrs	r3, r3, #16
 8014fe8:	b29b      	uxth	r3, r3
 8014fea:	4619      	mov	r1, r3
 8014fec:	4610      	mov	r0, r2
 8014fee:	f7ff f81b 	bl	8014028 <st_word>
	}
}
 8014ff2:	bf00      	nop
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b086      	sub	sp, #24
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015008:	2100      	movs	r1, #0
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff fe2f 	bl	8014c6e <dir_sdi>
 8015010:	4603      	mov	r3, r0
 8015012:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015014:	7dfb      	ldrb	r3, [r7, #23]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d001      	beq.n	801501e <dir_find+0x24>
 801501a:	7dfb      	ldrb	r3, [r7, #23]
 801501c:	e03e      	b.n	801509c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	69db      	ldr	r3, [r3, #28]
 8015022:	4619      	mov	r1, r3
 8015024:	6938      	ldr	r0, [r7, #16]
 8015026:	f7ff faa5 	bl	8014574 <move_window>
 801502a:	4603      	mov	r3, r0
 801502c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801502e:	7dfb      	ldrb	r3, [r7, #23]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d12f      	bne.n	8015094 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6a1b      	ldr	r3, [r3, #32]
 8015038:	781b      	ldrb	r3, [r3, #0]
 801503a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801503c:	7bfb      	ldrb	r3, [r7, #15]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d102      	bne.n	8015048 <dir_find+0x4e>
 8015042:	2304      	movs	r3, #4
 8015044:	75fb      	strb	r3, [r7, #23]
 8015046:	e028      	b.n	801509a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6a1b      	ldr	r3, [r3, #32]
 801504c:	330b      	adds	r3, #11
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015054:	b2da      	uxtb	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	6a1b      	ldr	r3, [r3, #32]
 801505e:	330b      	adds	r3, #11
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	f003 0308 	and.w	r3, r3, #8
 8015066:	2b00      	cmp	r3, #0
 8015068:	d10a      	bne.n	8015080 <dir_find+0x86>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6a18      	ldr	r0, [r3, #32]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	3324      	adds	r3, #36	@ 0x24
 8015072:	220b      	movs	r2, #11
 8015074:	4619      	mov	r1, r3
 8015076:	f7ff f85a 	bl	801412e <mem_cmp>
 801507a:	4603      	mov	r3, r0
 801507c:	2b00      	cmp	r3, #0
 801507e:	d00b      	beq.n	8015098 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015080:	2100      	movs	r1, #0
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f7ff fe6e 	bl	8014d64 <dir_next>
 8015088:	4603      	mov	r3, r0
 801508a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801508c:	7dfb      	ldrb	r3, [r7, #23]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d0c5      	beq.n	801501e <dir_find+0x24>
 8015092:	e002      	b.n	801509a <dir_find+0xa0>
		if (res != FR_OK) break;
 8015094:	bf00      	nop
 8015096:	e000      	b.n	801509a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015098:	bf00      	nop

	return res;
 801509a:	7dfb      	ldrb	r3, [r7, #23]
}
 801509c:	4618      	mov	r0, r3
 801509e:	3718      	adds	r7, #24
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b084      	sub	sp, #16
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80150b2:	2101      	movs	r1, #1
 80150b4:	6878      	ldr	r0, [r7, #4]
 80150b6:	f7ff ff1a 	bl	8014eee <dir_alloc>
 80150ba:	4603      	mov	r3, r0
 80150bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80150be:	7bfb      	ldrb	r3, [r7, #15]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d11c      	bne.n	80150fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	69db      	ldr	r3, [r3, #28]
 80150c8:	4619      	mov	r1, r3
 80150ca:	68b8      	ldr	r0, [r7, #8]
 80150cc:	f7ff fa52 	bl	8014574 <move_window>
 80150d0:	4603      	mov	r3, r0
 80150d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80150d4:	7bfb      	ldrb	r3, [r7, #15]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d111      	bne.n	80150fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6a1b      	ldr	r3, [r3, #32]
 80150de:	2220      	movs	r2, #32
 80150e0:	2100      	movs	r1, #0
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7ff f808 	bl	80140f8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6a18      	ldr	r0, [r3, #32]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	3324      	adds	r3, #36	@ 0x24
 80150f0:	220b      	movs	r2, #11
 80150f2:	4619      	mov	r1, r3
 80150f4:	f7fe ffdf 	bl	80140b6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	2201      	movs	r2, #1
 80150fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80150fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015100:	4618      	mov	r0, r3
 8015102:	3710      	adds	r7, #16
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b088      	sub	sp, #32
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	60fb      	str	r3, [r7, #12]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	3324      	adds	r3, #36	@ 0x24
 801511c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801511e:	220b      	movs	r2, #11
 8015120:	2120      	movs	r1, #32
 8015122:	68b8      	ldr	r0, [r7, #8]
 8015124:	f7fe ffe8 	bl	80140f8 <mem_set>
	si = i = 0; ni = 8;
 8015128:	2300      	movs	r3, #0
 801512a:	613b      	str	r3, [r7, #16]
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	61fb      	str	r3, [r7, #28]
 8015130:	2308      	movs	r3, #8
 8015132:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	1c5a      	adds	r2, r3, #1
 8015138:	61fa      	str	r2, [r7, #28]
 801513a:	68fa      	ldr	r2, [r7, #12]
 801513c:	4413      	add	r3, r2
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015142:	7efb      	ldrb	r3, [r7, #27]
 8015144:	2b20      	cmp	r3, #32
 8015146:	d94e      	bls.n	80151e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8015148:	7efb      	ldrb	r3, [r7, #27]
 801514a:	2b2f      	cmp	r3, #47	@ 0x2f
 801514c:	d006      	beq.n	801515c <create_name+0x54>
 801514e:	7efb      	ldrb	r3, [r7, #27]
 8015150:	2b5c      	cmp	r3, #92	@ 0x5c
 8015152:	d110      	bne.n	8015176 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015154:	e002      	b.n	801515c <create_name+0x54>
 8015156:	69fb      	ldr	r3, [r7, #28]
 8015158:	3301      	adds	r3, #1
 801515a:	61fb      	str	r3, [r7, #28]
 801515c:	68fa      	ldr	r2, [r7, #12]
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	4413      	add	r3, r2
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	2b2f      	cmp	r3, #47	@ 0x2f
 8015166:	d0f6      	beq.n	8015156 <create_name+0x4e>
 8015168:	68fa      	ldr	r2, [r7, #12]
 801516a:	69fb      	ldr	r3, [r7, #28]
 801516c:	4413      	add	r3, r2
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	2b5c      	cmp	r3, #92	@ 0x5c
 8015172:	d0f0      	beq.n	8015156 <create_name+0x4e>
			break;
 8015174:	e038      	b.n	80151e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8015176:	7efb      	ldrb	r3, [r7, #27]
 8015178:	2b2e      	cmp	r3, #46	@ 0x2e
 801517a:	d003      	beq.n	8015184 <create_name+0x7c>
 801517c:	693a      	ldr	r2, [r7, #16]
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	429a      	cmp	r2, r3
 8015182:	d30c      	bcc.n	801519e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	2b0b      	cmp	r3, #11
 8015188:	d002      	beq.n	8015190 <create_name+0x88>
 801518a:	7efb      	ldrb	r3, [r7, #27]
 801518c:	2b2e      	cmp	r3, #46	@ 0x2e
 801518e:	d001      	beq.n	8015194 <create_name+0x8c>
 8015190:	2306      	movs	r3, #6
 8015192:	e044      	b.n	801521e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8015194:	2308      	movs	r3, #8
 8015196:	613b      	str	r3, [r7, #16]
 8015198:	230b      	movs	r3, #11
 801519a:	617b      	str	r3, [r7, #20]
			continue;
 801519c:	e022      	b.n	80151e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801519e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	da04      	bge.n	80151b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80151a6:	7efb      	ldrb	r3, [r7, #27]
 80151a8:	3b80      	subs	r3, #128	@ 0x80
 80151aa:	4a1f      	ldr	r2, [pc, #124]	@ (8015228 <create_name+0x120>)
 80151ac:	5cd3      	ldrb	r3, [r2, r3]
 80151ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80151b0:	7efb      	ldrb	r3, [r7, #27]
 80151b2:	4619      	mov	r1, r3
 80151b4:	481d      	ldr	r0, [pc, #116]	@ (801522c <create_name+0x124>)
 80151b6:	f7fe ffe1 	bl	801417c <chk_chr>
 80151ba:	4603      	mov	r3, r0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d001      	beq.n	80151c4 <create_name+0xbc>
 80151c0:	2306      	movs	r3, #6
 80151c2:	e02c      	b.n	801521e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80151c4:	7efb      	ldrb	r3, [r7, #27]
 80151c6:	2b60      	cmp	r3, #96	@ 0x60
 80151c8:	d905      	bls.n	80151d6 <create_name+0xce>
 80151ca:	7efb      	ldrb	r3, [r7, #27]
 80151cc:	2b7a      	cmp	r3, #122	@ 0x7a
 80151ce:	d802      	bhi.n	80151d6 <create_name+0xce>
 80151d0:	7efb      	ldrb	r3, [r7, #27]
 80151d2:	3b20      	subs	r3, #32
 80151d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	1c5a      	adds	r2, r3, #1
 80151da:	613a      	str	r2, [r7, #16]
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	4413      	add	r3, r2
 80151e0:	7efa      	ldrb	r2, [r7, #27]
 80151e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80151e4:	e7a6      	b.n	8015134 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80151e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	441a      	add	r2, r3
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d101      	bne.n	80151fc <create_name+0xf4>
 80151f8:	2306      	movs	r3, #6
 80151fa:	e010      	b.n	801521e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	781b      	ldrb	r3, [r3, #0]
 8015200:	2be5      	cmp	r3, #229	@ 0xe5
 8015202:	d102      	bne.n	801520a <create_name+0x102>
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	2205      	movs	r2, #5
 8015208:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801520a:	7efb      	ldrb	r3, [r7, #27]
 801520c:	2b20      	cmp	r3, #32
 801520e:	d801      	bhi.n	8015214 <create_name+0x10c>
 8015210:	2204      	movs	r2, #4
 8015212:	e000      	b.n	8015216 <create_name+0x10e>
 8015214:	2200      	movs	r2, #0
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	330b      	adds	r3, #11
 801521a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801521c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801521e:	4618      	mov	r0, r3
 8015220:	3720      	adds	r7, #32
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
 8015226:	bf00      	nop
 8015228:	0801c59c 	.word	0x0801c59c
 801522c:	0801c51c 	.word	0x0801c51c

08015230 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b086      	sub	sp, #24
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801523e:	693b      	ldr	r3, [r7, #16]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015244:	e002      	b.n	801524c <follow_path+0x1c>
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	3301      	adds	r3, #1
 801524a:	603b      	str	r3, [r7, #0]
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	2b2f      	cmp	r3, #47	@ 0x2f
 8015252:	d0f8      	beq.n	8015246 <follow_path+0x16>
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	2b5c      	cmp	r3, #92	@ 0x5c
 801525a:	d0f4      	beq.n	8015246 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	2200      	movs	r2, #0
 8015260:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	2b1f      	cmp	r3, #31
 8015268:	d80a      	bhi.n	8015280 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2280      	movs	r2, #128	@ 0x80
 801526e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8015272:	2100      	movs	r1, #0
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7ff fcfa 	bl	8014c6e <dir_sdi>
 801527a:	4603      	mov	r3, r0
 801527c:	75fb      	strb	r3, [r7, #23]
 801527e:	e043      	b.n	8015308 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015280:	463b      	mov	r3, r7
 8015282:	4619      	mov	r1, r3
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7ff ff3f 	bl	8015108 <create_name>
 801528a:	4603      	mov	r3, r0
 801528c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801528e:	7dfb      	ldrb	r3, [r7, #23]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d134      	bne.n	80152fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f7ff feb0 	bl	8014ffa <dir_find>
 801529a:	4603      	mov	r3, r0
 801529c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80152a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80152a6:	7dfb      	ldrb	r3, [r7, #23]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00a      	beq.n	80152c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80152ac:	7dfb      	ldrb	r3, [r7, #23]
 80152ae:	2b04      	cmp	r3, #4
 80152b0:	d127      	bne.n	8015302 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80152b2:	7afb      	ldrb	r3, [r7, #11]
 80152b4:	f003 0304 	and.w	r3, r3, #4
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d122      	bne.n	8015302 <follow_path+0xd2>
 80152bc:	2305      	movs	r3, #5
 80152be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80152c0:	e01f      	b.n	8015302 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80152c2:	7afb      	ldrb	r3, [r7, #11]
 80152c4:	f003 0304 	and.w	r3, r3, #4
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d11c      	bne.n	8015306 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	799b      	ldrb	r3, [r3, #6]
 80152d0:	f003 0310 	and.w	r3, r3, #16
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d102      	bne.n	80152de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80152d8:	2305      	movs	r3, #5
 80152da:	75fb      	strb	r3, [r7, #23]
 80152dc:	e014      	b.n	8015308 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	695b      	ldr	r3, [r3, #20]
 80152e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80152ec:	4413      	add	r3, r2
 80152ee:	4619      	mov	r1, r3
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f7ff fe43 	bl	8014f7c <ld_clust>
 80152f6:	4602      	mov	r2, r0
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80152fc:	e7c0      	b.n	8015280 <follow_path+0x50>
			if (res != FR_OK) break;
 80152fe:	bf00      	nop
 8015300:	e002      	b.n	8015308 <follow_path+0xd8>
				break;
 8015302:	bf00      	nop
 8015304:	e000      	b.n	8015308 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015306:	bf00      	nop
			}
		}
	}

	return res;
 8015308:	7dfb      	ldrb	r3, [r7, #23]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3718      	adds	r7, #24
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015312:	b480      	push	{r7}
 8015314:	b087      	sub	sp, #28
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801531a:	f04f 33ff 	mov.w	r3, #4294967295
 801531e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d031      	beq.n	801538c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	617b      	str	r3, [r7, #20]
 801532e:	e002      	b.n	8015336 <get_ldnumber+0x24>
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	3301      	adds	r3, #1
 8015334:	617b      	str	r3, [r7, #20]
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	781b      	ldrb	r3, [r3, #0]
 801533a:	2b20      	cmp	r3, #32
 801533c:	d903      	bls.n	8015346 <get_ldnumber+0x34>
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	2b3a      	cmp	r3, #58	@ 0x3a
 8015344:	d1f4      	bne.n	8015330 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	2b3a      	cmp	r3, #58	@ 0x3a
 801534c:	d11c      	bne.n	8015388 <get_ldnumber+0x76>
			tp = *path;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	1c5a      	adds	r2, r3, #1
 8015358:	60fa      	str	r2, [r7, #12]
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	3b30      	subs	r3, #48	@ 0x30
 801535e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	2b09      	cmp	r3, #9
 8015364:	d80e      	bhi.n	8015384 <get_ldnumber+0x72>
 8015366:	68fa      	ldr	r2, [r7, #12]
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	429a      	cmp	r2, r3
 801536c:	d10a      	bne.n	8015384 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d107      	bne.n	8015384 <get_ldnumber+0x72>
					vol = (int)i;
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	3301      	adds	r3, #1
 801537c:	617b      	str	r3, [r7, #20]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	697a      	ldr	r2, [r7, #20]
 8015382:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	e002      	b.n	801538e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015388:	2300      	movs	r3, #0
 801538a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801538c:	693b      	ldr	r3, [r7, #16]
}
 801538e:	4618      	mov	r0, r3
 8015390:	371c      	adds	r7, #28
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr
	...

0801539c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b082      	sub	sp, #8
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2200      	movs	r2, #0
 80153aa:	70da      	strb	r2, [r3, #3]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f04f 32ff 	mov.w	r2, #4294967295
 80153b2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80153b4:	6839      	ldr	r1, [r7, #0]
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f7ff f8dc 	bl	8014574 <move_window>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d001      	beq.n	80153c6 <check_fs+0x2a>
 80153c2:	2304      	movs	r3, #4
 80153c4:	e038      	b.n	8015438 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	3334      	adds	r3, #52	@ 0x34
 80153ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7fe fdee 	bl	8013fb0 <ld_word>
 80153d4:	4603      	mov	r3, r0
 80153d6:	461a      	mov	r2, r3
 80153d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80153dc:	429a      	cmp	r2, r3
 80153de:	d001      	beq.n	80153e4 <check_fs+0x48>
 80153e0:	2303      	movs	r3, #3
 80153e2:	e029      	b.n	8015438 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80153ea:	2be9      	cmp	r3, #233	@ 0xe9
 80153ec:	d009      	beq.n	8015402 <check_fs+0x66>
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80153f4:	2beb      	cmp	r3, #235	@ 0xeb
 80153f6:	d11e      	bne.n	8015436 <check_fs+0x9a>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80153fe:	2b90      	cmp	r3, #144	@ 0x90
 8015400:	d119      	bne.n	8015436 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	3334      	adds	r3, #52	@ 0x34
 8015406:	3336      	adds	r3, #54	@ 0x36
 8015408:	4618      	mov	r0, r3
 801540a:	f7fe fdea 	bl	8013fe2 <ld_dword>
 801540e:	4603      	mov	r3, r0
 8015410:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015414:	4a0a      	ldr	r2, [pc, #40]	@ (8015440 <check_fs+0xa4>)
 8015416:	4293      	cmp	r3, r2
 8015418:	d101      	bne.n	801541e <check_fs+0x82>
 801541a:	2300      	movs	r3, #0
 801541c:	e00c      	b.n	8015438 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	3334      	adds	r3, #52	@ 0x34
 8015422:	3352      	adds	r3, #82	@ 0x52
 8015424:	4618      	mov	r0, r3
 8015426:	f7fe fddc 	bl	8013fe2 <ld_dword>
 801542a:	4603      	mov	r3, r0
 801542c:	4a05      	ldr	r2, [pc, #20]	@ (8015444 <check_fs+0xa8>)
 801542e:	4293      	cmp	r3, r2
 8015430:	d101      	bne.n	8015436 <check_fs+0x9a>
 8015432:	2300      	movs	r3, #0
 8015434:	e000      	b.n	8015438 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015436:	2302      	movs	r3, #2
}
 8015438:	4618      	mov	r0, r3
 801543a:	3708      	adds	r7, #8
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}
 8015440:	00544146 	.word	0x00544146
 8015444:	33544146 	.word	0x33544146

08015448 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b096      	sub	sp, #88	@ 0x58
 801544c:	af00      	add	r7, sp, #0
 801544e:	60f8      	str	r0, [r7, #12]
 8015450:	60b9      	str	r1, [r7, #8]
 8015452:	4613      	mov	r3, r2
 8015454:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	2200      	movs	r2, #0
 801545a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f7ff ff58 	bl	8015312 <get_ldnumber>
 8015462:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015466:	2b00      	cmp	r3, #0
 8015468:	da01      	bge.n	801546e <find_volume+0x26>
 801546a:	230b      	movs	r3, #11
 801546c:	e235      	b.n	80158da <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801546e:	4aa5      	ldr	r2, [pc, #660]	@ (8015704 <find_volume+0x2bc>)
 8015470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015476:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801547a:	2b00      	cmp	r3, #0
 801547c:	d101      	bne.n	8015482 <find_volume+0x3a>
 801547e:	230c      	movs	r3, #12
 8015480:	e22b      	b.n	80158da <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8015482:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015484:	f7fe fe95 	bl	80141b2 <lock_fs>
 8015488:	4603      	mov	r3, r0
 801548a:	2b00      	cmp	r3, #0
 801548c:	d101      	bne.n	8015492 <find_volume+0x4a>
 801548e:	230f      	movs	r3, #15
 8015490:	e223      	b.n	80158da <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015496:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015498:	79fb      	ldrb	r3, [r7, #7]
 801549a:	f023 0301 	bic.w	r3, r3, #1
 801549e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80154a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d01a      	beq.n	80154de <find_volume+0x96>
		stat = disk_status(fs->drv);
 80154a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154aa:	785b      	ldrb	r3, [r3, #1]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7fe fce1 	bl	8013e74 <disk_status>
 80154b2:	4603      	mov	r3, r0
 80154b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80154b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80154bc:	f003 0301 	and.w	r3, r3, #1
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d10c      	bne.n	80154de <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80154c4:	79fb      	ldrb	r3, [r7, #7]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d007      	beq.n	80154da <find_volume+0x92>
 80154ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80154ce:	f003 0304 	and.w	r3, r3, #4
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80154d6:	230a      	movs	r3, #10
 80154d8:	e1ff      	b.n	80158da <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 80154da:	2300      	movs	r3, #0
 80154dc:	e1fd      	b.n	80158da <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80154de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154e0:	2200      	movs	r2, #0
 80154e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80154e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154e6:	b2da      	uxtb	r2, r3
 80154e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80154ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ee:	785b      	ldrb	r3, [r3, #1]
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fe fcd9 	bl	8013ea8 <disk_initialize>
 80154f6:	4603      	mov	r3, r0
 80154f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80154fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015500:	f003 0301 	and.w	r3, r3, #1
 8015504:	2b00      	cmp	r3, #0
 8015506:	d001      	beq.n	801550c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015508:	2303      	movs	r3, #3
 801550a:	e1e6      	b.n	80158da <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801550c:	79fb      	ldrb	r3, [r7, #7]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d007      	beq.n	8015522 <find_volume+0xda>
 8015512:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015516:	f003 0304 	and.w	r3, r3, #4
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801551e:	230a      	movs	r3, #10
 8015520:	e1db      	b.n	80158da <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015522:	2300      	movs	r3, #0
 8015524:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015526:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015528:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801552a:	f7ff ff37 	bl	801539c <check_fs>
 801552e:	4603      	mov	r3, r0
 8015530:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015534:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015538:	2b02      	cmp	r3, #2
 801553a:	d149      	bne.n	80155d0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801553c:	2300      	movs	r3, #0
 801553e:	643b      	str	r3, [r7, #64]	@ 0x40
 8015540:	e01e      	b.n	8015580 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015544:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801554a:	011b      	lsls	r3, r3, #4
 801554c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8015550:	4413      	add	r3, r2
 8015552:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015556:	3304      	adds	r3, #4
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d006      	beq.n	801556c <find_volume+0x124>
 801555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015560:	3308      	adds	r3, #8
 8015562:	4618      	mov	r0, r3
 8015564:	f7fe fd3d 	bl	8013fe2 <ld_dword>
 8015568:	4602      	mov	r2, r0
 801556a:	e000      	b.n	801556e <find_volume+0x126>
 801556c:	2200      	movs	r2, #0
 801556e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015570:	009b      	lsls	r3, r3, #2
 8015572:	3358      	adds	r3, #88	@ 0x58
 8015574:	443b      	add	r3, r7
 8015576:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801557a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801557c:	3301      	adds	r3, #1
 801557e:	643b      	str	r3, [r7, #64]	@ 0x40
 8015580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015582:	2b03      	cmp	r3, #3
 8015584:	d9dd      	bls.n	8015542 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015586:	2300      	movs	r3, #0
 8015588:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801558a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801558c:	2b00      	cmp	r3, #0
 801558e:	d002      	beq.n	8015596 <find_volume+0x14e>
 8015590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015592:	3b01      	subs	r3, #1
 8015594:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	3358      	adds	r3, #88	@ 0x58
 801559c:	443b      	add	r3, r7
 801559e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80155a2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80155a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d005      	beq.n	80155b6 <find_volume+0x16e>
 80155aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80155ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80155ae:	f7ff fef5 	bl	801539c <check_fs>
 80155b2:	4603      	mov	r3, r0
 80155b4:	e000      	b.n	80155b8 <find_volume+0x170>
 80155b6:	2303      	movs	r3, #3
 80155b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80155bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d905      	bls.n	80155d0 <find_volume+0x188>
 80155c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155c6:	3301      	adds	r3, #1
 80155c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80155ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155cc:	2b03      	cmp	r3, #3
 80155ce:	d9e2      	bls.n	8015596 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80155d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80155d4:	2b04      	cmp	r3, #4
 80155d6:	d101      	bne.n	80155dc <find_volume+0x194>
 80155d8:	2301      	movs	r3, #1
 80155da:	e17e      	b.n	80158da <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80155dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80155e0:	2b01      	cmp	r3, #1
 80155e2:	d901      	bls.n	80155e8 <find_volume+0x1a0>
 80155e4:	230d      	movs	r3, #13
 80155e6:	e178      	b.n	80158da <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80155e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155ea:	3334      	adds	r3, #52	@ 0x34
 80155ec:	330b      	adds	r3, #11
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fe fcde 	bl	8013fb0 <ld_word>
 80155f4:	4603      	mov	r3, r0
 80155f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155fa:	d001      	beq.n	8015600 <find_volume+0x1b8>
 80155fc:	230d      	movs	r3, #13
 80155fe:	e16c      	b.n	80158da <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015602:	3334      	adds	r3, #52	@ 0x34
 8015604:	3316      	adds	r3, #22
 8015606:	4618      	mov	r0, r3
 8015608:	f7fe fcd2 	bl	8013fb0 <ld_word>
 801560c:	4603      	mov	r3, r0
 801560e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015612:	2b00      	cmp	r3, #0
 8015614:	d106      	bne.n	8015624 <find_volume+0x1dc>
 8015616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015618:	3334      	adds	r3, #52	@ 0x34
 801561a:	3324      	adds	r3, #36	@ 0x24
 801561c:	4618      	mov	r0, r3
 801561e:	f7fe fce0 	bl	8013fe2 <ld_dword>
 8015622:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8015624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015626:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015628:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801562c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8015630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015632:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015636:	789b      	ldrb	r3, [r3, #2]
 8015638:	2b01      	cmp	r3, #1
 801563a:	d005      	beq.n	8015648 <find_volume+0x200>
 801563c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801563e:	789b      	ldrb	r3, [r3, #2]
 8015640:	2b02      	cmp	r3, #2
 8015642:	d001      	beq.n	8015648 <find_volume+0x200>
 8015644:	230d      	movs	r3, #13
 8015646:	e148      	b.n	80158da <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801564a:	789b      	ldrb	r3, [r3, #2]
 801564c:	461a      	mov	r2, r3
 801564e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015650:	fb02 f303 	mul.w	r3, r2, r3
 8015654:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801565c:	461a      	mov	r2, r3
 801565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015660:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015664:	895b      	ldrh	r3, [r3, #10]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d008      	beq.n	801567c <find_volume+0x234>
 801566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801566c:	895b      	ldrh	r3, [r3, #10]
 801566e:	461a      	mov	r2, r3
 8015670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015672:	895b      	ldrh	r3, [r3, #10]
 8015674:	3b01      	subs	r3, #1
 8015676:	4013      	ands	r3, r2
 8015678:	2b00      	cmp	r3, #0
 801567a:	d001      	beq.n	8015680 <find_volume+0x238>
 801567c:	230d      	movs	r3, #13
 801567e:	e12c      	b.n	80158da <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015682:	3334      	adds	r3, #52	@ 0x34
 8015684:	3311      	adds	r3, #17
 8015686:	4618      	mov	r0, r3
 8015688:	f7fe fc92 	bl	8013fb0 <ld_word>
 801568c:	4603      	mov	r3, r0
 801568e:	461a      	mov	r2, r3
 8015690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015692:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015696:	891b      	ldrh	r3, [r3, #8]
 8015698:	f003 030f 	and.w	r3, r3, #15
 801569c:	b29b      	uxth	r3, r3
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d001      	beq.n	80156a6 <find_volume+0x25e>
 80156a2:	230d      	movs	r3, #13
 80156a4:	e119      	b.n	80158da <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80156a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156a8:	3334      	adds	r3, #52	@ 0x34
 80156aa:	3313      	adds	r3, #19
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7fe fc7f 	bl	8013fb0 <ld_word>
 80156b2:	4603      	mov	r3, r0
 80156b4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80156b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d106      	bne.n	80156ca <find_volume+0x282>
 80156bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156be:	3334      	adds	r3, #52	@ 0x34
 80156c0:	3320      	adds	r3, #32
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7fe fc8d 	bl	8013fe2 <ld_dword>
 80156c8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80156ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156cc:	3334      	adds	r3, #52	@ 0x34
 80156ce:	330e      	adds	r3, #14
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7fe fc6d 	bl	8013fb0 <ld_word>
 80156d6:	4603      	mov	r3, r0
 80156d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80156da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d101      	bne.n	80156e4 <find_volume+0x29c>
 80156e0:	230d      	movs	r3, #13
 80156e2:	e0fa      	b.n	80158da <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80156e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80156e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156e8:	4413      	add	r3, r2
 80156ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80156ec:	8912      	ldrh	r2, [r2, #8]
 80156ee:	0912      	lsrs	r2, r2, #4
 80156f0:	b292      	uxth	r2, r2
 80156f2:	4413      	add	r3, r2
 80156f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80156f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80156f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d204      	bcs.n	8015708 <find_volume+0x2c0>
 80156fe:	230d      	movs	r3, #13
 8015700:	e0eb      	b.n	80158da <find_volume+0x492>
 8015702:	bf00      	nop
 8015704:	200017c4 	.word	0x200017c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801570c:	1ad3      	subs	r3, r2, r3
 801570e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015710:	8952      	ldrh	r2, [r2, #10]
 8015712:	fbb3 f3f2 	udiv	r3, r3, r2
 8015716:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801571a:	2b00      	cmp	r3, #0
 801571c:	d101      	bne.n	8015722 <find_volume+0x2da>
 801571e:	230d      	movs	r3, #13
 8015720:	e0db      	b.n	80158da <find_volume+0x492>
		fmt = FS_FAT32;
 8015722:	2303      	movs	r3, #3
 8015724:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801572a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801572e:	4293      	cmp	r3, r2
 8015730:	d802      	bhi.n	8015738 <find_volume+0x2f0>
 8015732:	2302      	movs	r3, #2
 8015734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801573e:	4293      	cmp	r3, r2
 8015740:	d802      	bhi.n	8015748 <find_volume+0x300>
 8015742:	2301      	movs	r3, #1
 8015744:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801574a:	1c9a      	adds	r2, r3, #2
 801574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801574e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015752:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015754:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015756:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801575a:	441a      	add	r2, r3
 801575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801575e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015760:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015764:	441a      	add	r2, r3
 8015766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015768:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801576a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801576e:	2b03      	cmp	r3, #3
 8015770:	d11e      	bne.n	80157b0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015774:	3334      	adds	r3, #52	@ 0x34
 8015776:	332a      	adds	r3, #42	@ 0x2a
 8015778:	4618      	mov	r0, r3
 801577a:	f7fe fc19 	bl	8013fb0 <ld_word>
 801577e:	4603      	mov	r3, r0
 8015780:	2b00      	cmp	r3, #0
 8015782:	d001      	beq.n	8015788 <find_volume+0x340>
 8015784:	230d      	movs	r3, #13
 8015786:	e0a8      	b.n	80158da <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801578a:	891b      	ldrh	r3, [r3, #8]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d001      	beq.n	8015794 <find_volume+0x34c>
 8015790:	230d      	movs	r3, #13
 8015792:	e0a2      	b.n	80158da <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015796:	3334      	adds	r3, #52	@ 0x34
 8015798:	332c      	adds	r3, #44	@ 0x2c
 801579a:	4618      	mov	r0, r3
 801579c:	f7fe fc21 	bl	8013fe2 <ld_dword>
 80157a0:	4602      	mov	r2, r0
 80157a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80157a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a8:	699b      	ldr	r3, [r3, #24]
 80157aa:	009b      	lsls	r3, r3, #2
 80157ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80157ae:	e01f      	b.n	80157f0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80157b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b2:	891b      	ldrh	r3, [r3, #8]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d101      	bne.n	80157bc <find_volume+0x374>
 80157b8:	230d      	movs	r3, #13
 80157ba:	e08e      	b.n	80158da <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80157bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157c2:	441a      	add	r2, r3
 80157c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157c6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80157c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80157cc:	2b02      	cmp	r3, #2
 80157ce:	d103      	bne.n	80157d8 <find_volume+0x390>
 80157d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d2:	699b      	ldr	r3, [r3, #24]
 80157d4:	005b      	lsls	r3, r3, #1
 80157d6:	e00a      	b.n	80157ee <find_volume+0x3a6>
 80157d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157da:	699a      	ldr	r2, [r3, #24]
 80157dc:	4613      	mov	r3, r2
 80157de:	005b      	lsls	r3, r3, #1
 80157e0:	4413      	add	r3, r2
 80157e2:	085a      	lsrs	r2, r3, #1
 80157e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157e6:	699b      	ldr	r3, [r3, #24]
 80157e8:	f003 0301 	and.w	r3, r3, #1
 80157ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80157ee:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80157f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157f2:	69da      	ldr	r2, [r3, #28]
 80157f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157f6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80157fa:	0a5b      	lsrs	r3, r3, #9
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d201      	bcs.n	8015804 <find_volume+0x3bc>
 8015800:	230d      	movs	r3, #13
 8015802:	e06a      	b.n	80158da <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015806:	f04f 32ff 	mov.w	r2, #4294967295
 801580a:	615a      	str	r2, [r3, #20]
 801580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801580e:	695a      	ldr	r2, [r3, #20]
 8015810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015812:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015816:	2280      	movs	r2, #128	@ 0x80
 8015818:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801581a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801581e:	2b03      	cmp	r3, #3
 8015820:	d149      	bne.n	80158b6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015824:	3334      	adds	r3, #52	@ 0x34
 8015826:	3330      	adds	r3, #48	@ 0x30
 8015828:	4618      	mov	r0, r3
 801582a:	f7fe fbc1 	bl	8013fb0 <ld_word>
 801582e:	4603      	mov	r3, r0
 8015830:	2b01      	cmp	r3, #1
 8015832:	d140      	bne.n	80158b6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015836:	3301      	adds	r3, #1
 8015838:	4619      	mov	r1, r3
 801583a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801583c:	f7fe fe9a 	bl	8014574 <move_window>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d137      	bne.n	80158b6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8015846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015848:	2200      	movs	r2, #0
 801584a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801584e:	3334      	adds	r3, #52	@ 0x34
 8015850:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015854:	4618      	mov	r0, r3
 8015856:	f7fe fbab 	bl	8013fb0 <ld_word>
 801585a:	4603      	mov	r3, r0
 801585c:	461a      	mov	r2, r3
 801585e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8015862:	429a      	cmp	r2, r3
 8015864:	d127      	bne.n	80158b6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015868:	3334      	adds	r3, #52	@ 0x34
 801586a:	4618      	mov	r0, r3
 801586c:	f7fe fbb9 	bl	8013fe2 <ld_dword>
 8015870:	4603      	mov	r3, r0
 8015872:	4a1c      	ldr	r2, [pc, #112]	@ (80158e4 <find_volume+0x49c>)
 8015874:	4293      	cmp	r3, r2
 8015876:	d11e      	bne.n	80158b6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801587a:	3334      	adds	r3, #52	@ 0x34
 801587c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015880:	4618      	mov	r0, r3
 8015882:	f7fe fbae 	bl	8013fe2 <ld_dword>
 8015886:	4603      	mov	r3, r0
 8015888:	4a17      	ldr	r2, [pc, #92]	@ (80158e8 <find_volume+0x4a0>)
 801588a:	4293      	cmp	r3, r2
 801588c:	d113      	bne.n	80158b6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015890:	3334      	adds	r3, #52	@ 0x34
 8015892:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8015896:	4618      	mov	r0, r3
 8015898:	f7fe fba3 	bl	8013fe2 <ld_dword>
 801589c:	4602      	mov	r2, r0
 801589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158a0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80158a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158a4:	3334      	adds	r3, #52	@ 0x34
 80158a6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7fe fb99 	bl	8013fe2 <ld_dword>
 80158b0:	4602      	mov	r2, r0
 80158b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158b4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80158b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158b8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80158bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80158be:	4b0b      	ldr	r3, [pc, #44]	@ (80158ec <find_volume+0x4a4>)
 80158c0:	881b      	ldrh	r3, [r3, #0]
 80158c2:	3301      	adds	r3, #1
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	4b09      	ldr	r3, [pc, #36]	@ (80158ec <find_volume+0x4a4>)
 80158c8:	801a      	strh	r2, [r3, #0]
 80158ca:	4b08      	ldr	r3, [pc, #32]	@ (80158ec <find_volume+0x4a4>)
 80158cc:	881a      	ldrh	r2, [r3, #0]
 80158ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80158d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80158d4:	f7fe fde6 	bl	80144a4 <clear_lock>
#endif
	return FR_OK;
 80158d8:	2300      	movs	r3, #0
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3758      	adds	r7, #88	@ 0x58
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	41615252 	.word	0x41615252
 80158e8:	61417272 	.word	0x61417272
 80158ec:	200017c8 	.word	0x200017c8

080158f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b084      	sub	sp, #16
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80158fa:	2309      	movs	r3, #9
 80158fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d02e      	beq.n	8015962 <validate+0x72>
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d02a      	beq.n	8015962 <validate+0x72>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d025      	beq.n	8015962 <validate+0x72>
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	889a      	ldrh	r2, [r3, #4]
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	88db      	ldrh	r3, [r3, #6]
 8015920:	429a      	cmp	r2, r3
 8015922:	d11e      	bne.n	8015962 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	4618      	mov	r0, r3
 801592a:	f7fe fc42 	bl	80141b2 <lock_fs>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d014      	beq.n	801595e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	785b      	ldrb	r3, [r3, #1]
 801593a:	4618      	mov	r0, r3
 801593c:	f7fe fa9a 	bl	8013e74 <disk_status>
 8015940:	4603      	mov	r3, r0
 8015942:	f003 0301 	and.w	r3, r3, #1
 8015946:	2b00      	cmp	r3, #0
 8015948:	d102      	bne.n	8015950 <validate+0x60>
				res = FR_OK;
 801594a:	2300      	movs	r3, #0
 801594c:	73fb      	strb	r3, [r7, #15]
 801594e:	e008      	b.n	8015962 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	2100      	movs	r1, #0
 8015956:	4618      	mov	r0, r3
 8015958:	f7fe fc41 	bl	80141de <unlock_fs>
 801595c:	e001      	b.n	8015962 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801595e:	230f      	movs	r3, #15
 8015960:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015962:	7bfb      	ldrb	r3, [r7, #15]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d102      	bne.n	801596e <validate+0x7e>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	e000      	b.n	8015970 <validate+0x80>
 801596e:	2300      	movs	r3, #0
 8015970:	683a      	ldr	r2, [r7, #0]
 8015972:	6013      	str	r3, [r2, #0]
	return res;
 8015974:	7bfb      	ldrb	r3, [r7, #15]
}
 8015976:	4618      	mov	r0, r3
 8015978:	3710      	adds	r7, #16
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
	...

08015980 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b088      	sub	sp, #32
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	4613      	mov	r3, r2
 801598c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015992:	f107 0310 	add.w	r3, r7, #16
 8015996:	4618      	mov	r0, r3
 8015998:	f7ff fcbb 	bl	8015312 <get_ldnumber>
 801599c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801599e:	69fb      	ldr	r3, [r7, #28]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	da01      	bge.n	80159a8 <f_mount+0x28>
 80159a4:	230b      	movs	r3, #11
 80159a6:	e048      	b.n	8015a3a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80159a8:	4a26      	ldr	r2, [pc, #152]	@ (8015a44 <f_mount+0xc4>)
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d00f      	beq.n	80159d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80159b8:	69b8      	ldr	r0, [r7, #24]
 80159ba:	f7fe fd73 	bl	80144a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f000 fde7 	bl	8016596 <ff_del_syncobj>
 80159c8:	4603      	mov	r3, r0
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d101      	bne.n	80159d2 <f_mount+0x52>
 80159ce:	2302      	movs	r3, #2
 80159d0:	e033      	b.n	8015a3a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80159d2:	69bb      	ldr	r3, [r7, #24]
 80159d4:	2200      	movs	r2, #0
 80159d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d00f      	beq.n	80159fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2200      	movs	r2, #0
 80159e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80159e4:	69fb      	ldr	r3, [r7, #28]
 80159e6:	b2da      	uxtb	r2, r3
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	330c      	adds	r3, #12
 80159ec:	4619      	mov	r1, r3
 80159ee:	4610      	mov	r0, r2
 80159f0:	f000 fdb1 	bl	8016556 <ff_cre_syncobj>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d101      	bne.n	80159fe <f_mount+0x7e>
 80159fa:	2302      	movs	r3, #2
 80159fc:	e01d      	b.n	8015a3a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80159fe:	68fa      	ldr	r2, [r7, #12]
 8015a00:	4910      	ldr	r1, [pc, #64]	@ (8015a44 <f_mount+0xc4>)
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d002      	beq.n	8015a14 <f_mount+0x94>
 8015a0e:	79fb      	ldrb	r3, [r7, #7]
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d001      	beq.n	8015a18 <f_mount+0x98>
 8015a14:	2300      	movs	r3, #0
 8015a16:	e010      	b.n	8015a3a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015a18:	f107 010c 	add.w	r1, r7, #12
 8015a1c:	f107 0308 	add.w	r3, r7, #8
 8015a20:	2200      	movs	r2, #0
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7ff fd10 	bl	8015448 <find_volume>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	7dfa      	ldrb	r2, [r7, #23]
 8015a30:	4611      	mov	r1, r2
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7fe fbd3 	bl	80141de <unlock_fs>
 8015a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3720      	adds	r7, #32
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	200017c4 	.word	0x200017c4

08015a48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b098      	sub	sp, #96	@ 0x60
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	60f8      	str	r0, [r7, #12]
 8015a50:	60b9      	str	r1, [r7, #8]
 8015a52:	4613      	mov	r3, r2
 8015a54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d101      	bne.n	8015a60 <f_open+0x18>
 8015a5c:	2309      	movs	r3, #9
 8015a5e:	e1b0      	b.n	8015dc2 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015a60:	79fb      	ldrb	r3, [r7, #7]
 8015a62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015a66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015a68:	79fa      	ldrb	r2, [r7, #7]
 8015a6a:	f107 0110 	add.w	r1, r7, #16
 8015a6e:	f107 0308 	add.w	r3, r7, #8
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ff fce8 	bl	8015448 <find_volume>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8015a7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f040 818d 	bne.w	8015da2 <f_open+0x35a>
		dj.obj.fs = fs;
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015a8c:	68ba      	ldr	r2, [r7, #8]
 8015a8e:	f107 0314 	add.w	r3, r7, #20
 8015a92:	4611      	mov	r1, r2
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7ff fbcb 	bl	8015230 <follow_path>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d118      	bne.n	8015ada <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015aa8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015aac:	b25b      	sxtb	r3, r3
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	da03      	bge.n	8015aba <f_open+0x72>
				res = FR_INVALID_NAME;
 8015ab2:	2306      	movs	r3, #6
 8015ab4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015ab8:	e00f      	b.n	8015ada <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015aba:	79fb      	ldrb	r3, [r7, #7]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	bf8c      	ite	hi
 8015ac0:	2301      	movhi	r3, #1
 8015ac2:	2300      	movls	r3, #0
 8015ac4:	b2db      	uxtb	r3, r3
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	f107 0314 	add.w	r3, r7, #20
 8015acc:	4611      	mov	r1, r2
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fe fba0 	bl	8014214 <chk_lock>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015ada:	79fb      	ldrb	r3, [r7, #7]
 8015adc:	f003 031c 	and.w	r3, r3, #28
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d07f      	beq.n	8015be4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8015ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d017      	beq.n	8015b1c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015aec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015af0:	2b04      	cmp	r3, #4
 8015af2:	d10e      	bne.n	8015b12 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015af4:	f7fe fbea 	bl	80142cc <enq_lock>
 8015af8:	4603      	mov	r3, r0
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d006      	beq.n	8015b0c <f_open+0xc4>
 8015afe:	f107 0314 	add.w	r3, r7, #20
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7ff face 	bl	80150a4 <dir_register>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	e000      	b.n	8015b0e <f_open+0xc6>
 8015b0c:	2312      	movs	r3, #18
 8015b0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015b12:	79fb      	ldrb	r3, [r7, #7]
 8015b14:	f043 0308 	orr.w	r3, r3, #8
 8015b18:	71fb      	strb	r3, [r7, #7]
 8015b1a:	e010      	b.n	8015b3e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015b1c:	7ebb      	ldrb	r3, [r7, #26]
 8015b1e:	f003 0311 	and.w	r3, r3, #17
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d003      	beq.n	8015b2e <f_open+0xe6>
					res = FR_DENIED;
 8015b26:	2307      	movs	r3, #7
 8015b28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015b2c:	e007      	b.n	8015b3e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015b2e:	79fb      	ldrb	r3, [r7, #7]
 8015b30:	f003 0304 	and.w	r3, r3, #4
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <f_open+0xf6>
 8015b38:	2308      	movs	r3, #8
 8015b3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d168      	bne.n	8015c18 <f_open+0x1d0>
 8015b46:	79fb      	ldrb	r3, [r7, #7]
 8015b48:	f003 0308 	and.w	r3, r3, #8
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d063      	beq.n	8015c18 <f_open+0x1d0>
				dw = GET_FATTIME();
 8015b50:	f7fb fdcc 	bl	80116ec <get_fattime>
 8015b54:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b58:	330e      	adds	r3, #14
 8015b5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fe fa7e 	bl	801405e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b64:	3316      	adds	r3, #22
 8015b66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7fe fa78 	bl	801405e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b70:	330b      	adds	r3, #11
 8015b72:	2220      	movs	r2, #32
 8015b74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015b7a:	4611      	mov	r1, r2
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f7ff f9fd 	bl	8014f7c <ld_clust>
 8015b82:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015b88:	2200      	movs	r2, #0
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f7ff fa15 	bl	8014fba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b92:	331c      	adds	r3, #28
 8015b94:	2100      	movs	r1, #0
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7fe fa61 	bl	801405e <st_dword>
					fs->wflag = 1;
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d037      	beq.n	8015c18 <f_open+0x1d0>
						dw = fs->winsect;
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015bac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015bae:	f107 0314 	add.w	r3, r7, #20
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7fe ff28 	bl	8014a0c <remove_chain>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8015bc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d126      	bne.n	8015c18 <f_open+0x1d0>
							res = move_window(fs, dw);
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7fe fcd0 	bl	8014574 <move_window>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015bde:	3a01      	subs	r2, #1
 8015be0:	611a      	str	r2, [r3, #16]
 8015be2:	e019      	b.n	8015c18 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015be4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d115      	bne.n	8015c18 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015bec:	7ebb      	ldrb	r3, [r7, #26]
 8015bee:	f003 0310 	and.w	r3, r3, #16
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d003      	beq.n	8015bfe <f_open+0x1b6>
					res = FR_NO_FILE;
 8015bf6:	2304      	movs	r3, #4
 8015bf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015bfc:	e00c      	b.n	8015c18 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	f003 0302 	and.w	r3, r3, #2
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d007      	beq.n	8015c18 <f_open+0x1d0>
 8015c08:	7ebb      	ldrb	r3, [r7, #26]
 8015c0a:	f003 0301 	and.w	r3, r3, #1
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d002      	beq.n	8015c18 <f_open+0x1d0>
						res = FR_DENIED;
 8015c12:	2307      	movs	r3, #7
 8015c14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015c18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d126      	bne.n	8015c6e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015c20:	79fb      	ldrb	r3, [r7, #7]
 8015c22:	f003 0308 	and.w	r3, r3, #8
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d003      	beq.n	8015c32 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8015c2a:	79fb      	ldrb	r3, [r7, #7]
 8015c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8015c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015c40:	79fb      	ldrb	r3, [r7, #7]
 8015c42:	2b01      	cmp	r3, #1
 8015c44:	bf8c      	ite	hi
 8015c46:	2301      	movhi	r3, #1
 8015c48:	2300      	movls	r3, #0
 8015c4a:	b2db      	uxtb	r3, r3
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	f107 0314 	add.w	r3, r7, #20
 8015c52:	4611      	mov	r1, r2
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fe fb5b 	bl	8014310 <inc_lock>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	691b      	ldr	r3, [r3, #16]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d102      	bne.n	8015c6e <f_open+0x226>
 8015c68:	2302      	movs	r3, #2
 8015c6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	f040 8095 	bne.w	8015da2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7ff f97c 	bl	8014f7c <ld_clust>
 8015c84:	4602      	mov	r2, r0
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c8c:	331c      	adds	r3, #28
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7fe f9a7 	bl	8013fe2 <ld_dword>
 8015c94:	4602      	mov	r2, r0
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8015ca0:	693a      	ldr	r2, [r7, #16]
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	88da      	ldrh	r2, [r3, #6]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	79fa      	ldrb	r2, [r7, #7]
 8015cb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	3330      	adds	r3, #48	@ 0x30
 8015cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015cce:	2100      	movs	r1, #0
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7fe fa11 	bl	80140f8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8015cd6:	79fb      	ldrb	r3, [r7, #7]
 8015cd8:	f003 0320 	and.w	r3, r3, #32
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d060      	beq.n	8015da2 <f_open+0x35a>
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	68db      	ldr	r3, [r3, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d05c      	beq.n	8015da2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	68da      	ldr	r2, [r3, #12]
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	895b      	ldrh	r3, [r3, #10]
 8015cf4:	025b      	lsls	r3, r3, #9
 8015cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	689b      	ldr	r3, [r3, #8]
 8015cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8015d04:	e016      	b.n	8015d34 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7fe fced 	bl	80146ea <get_fat>
 8015d10:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8015d12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015d14:	2b01      	cmp	r3, #1
 8015d16:	d802      	bhi.n	8015d1e <f_open+0x2d6>
 8015d18:	2302      	movs	r3, #2
 8015d1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015d1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d24:	d102      	bne.n	8015d2c <f_open+0x2e4>
 8015d26:	2301      	movs	r3, #1
 8015d28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015d2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d30:	1ad3      	subs	r3, r2, r3
 8015d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8015d34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d103      	bne.n	8015d44 <f_open+0x2fc>
 8015d3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8015d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d8e0      	bhi.n	8015d06 <f_open+0x2be>
				}
				fp->clust = clst;
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015d48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d127      	bne.n	8015da2 <f_open+0x35a>
 8015d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d022      	beq.n	8015da2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7fe fca3 	bl	80146ac <clust2sect>
 8015d66:	6478      	str	r0, [r7, #68]	@ 0x44
 8015d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d103      	bne.n	8015d76 <f_open+0x32e>
						res = FR_INT_ERR;
 8015d6e:	2302      	movs	r3, #2
 8015d70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015d74:	e015      	b.n	8015da2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015d78:	0a5a      	lsrs	r2, r3, #9
 8015d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d7c:	441a      	add	r2, r3
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	7858      	ldrb	r0, [r3, #1]
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	6a1a      	ldr	r2, [r3, #32]
 8015d90:	2301      	movs	r3, #1
 8015d92:	f7fe f8af 	bl	8013ef4 <disk_read>
 8015d96:	4603      	mov	r3, r0
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d002      	beq.n	8015da2 <f_open+0x35a>
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8015da2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d002      	beq.n	8015db0 <f_open+0x368>
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2200      	movs	r2, #0
 8015dae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8015db6:	4611      	mov	r1, r2
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7fe fa10 	bl	80141de <unlock_fs>
 8015dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3760      	adds	r7, #96	@ 0x60
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b08c      	sub	sp, #48	@ 0x30
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	60f8      	str	r0, [r7, #12]
 8015dd2:	60b9      	str	r1, [r7, #8]
 8015dd4:	607a      	str	r2, [r7, #4]
 8015dd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	2200      	movs	r2, #0
 8015de0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	f107 0210 	add.w	r2, r7, #16
 8015de8:	4611      	mov	r1, r2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7ff fd80 	bl	80158f0 <validate>
 8015df0:	4603      	mov	r3, r0
 8015df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d107      	bne.n	8015e0e <f_write+0x44>
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	7d5b      	ldrb	r3, [r3, #21]
 8015e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8015e06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d009      	beq.n	8015e22 <f_write+0x58>
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8015e14:	4611      	mov	r1, r2
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7fe f9e1 	bl	80141de <unlock_fs>
 8015e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015e20:	e173      	b.n	801610a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	7d1b      	ldrb	r3, [r3, #20]
 8015e26:	f003 0302 	and.w	r3, r3, #2
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d106      	bne.n	8015e3c <f_write+0x72>
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	2107      	movs	r1, #7
 8015e32:	4618      	mov	r0, r3
 8015e34:	f7fe f9d3 	bl	80141de <unlock_fs>
 8015e38:	2307      	movs	r3, #7
 8015e3a:	e166      	b.n	801610a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	699a      	ldr	r2, [r3, #24]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	441a      	add	r2, r3
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	699b      	ldr	r3, [r3, #24]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	f080 814b 	bcs.w	80160e4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	699b      	ldr	r3, [r3, #24]
 8015e52:	43db      	mvns	r3, r3
 8015e54:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015e56:	e145      	b.n	80160e4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	699b      	ldr	r3, [r3, #24]
 8015e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	f040 8101 	bne.w	8016068 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	699b      	ldr	r3, [r3, #24]
 8015e6a:	0a5b      	lsrs	r3, r3, #9
 8015e6c:	693a      	ldr	r2, [r7, #16]
 8015e6e:	8952      	ldrh	r2, [r2, #10]
 8015e70:	3a01      	subs	r2, #1
 8015e72:	4013      	ands	r3, r2
 8015e74:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d14d      	bne.n	8015f18 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	699b      	ldr	r3, [r3, #24]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d10c      	bne.n	8015e9e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	689b      	ldr	r3, [r3, #8]
 8015e88:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d11a      	bne.n	8015ec6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2100      	movs	r1, #0
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7fe fe1e 	bl	8014ad6 <create_chain>
 8015e9a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015e9c:	e013      	b.n	8015ec6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d007      	beq.n	8015eb6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	699b      	ldr	r3, [r3, #24]
 8015eaa:	4619      	mov	r1, r3
 8015eac:	68f8      	ldr	r0, [r7, #12]
 8015eae:	f7fe feaa 	bl	8014c06 <clmt_clust>
 8015eb2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8015eb4:	e007      	b.n	8015ec6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015eb6:	68fa      	ldr	r2, [r7, #12]
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	69db      	ldr	r3, [r3, #28]
 8015ebc:	4619      	mov	r1, r3
 8015ebe:	4610      	mov	r0, r2
 8015ec0:	f7fe fe09 	bl	8014ad6 <create_chain>
 8015ec4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	f000 8110 	beq.w	80160ee <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d109      	bne.n	8015ee8 <f_write+0x11e>
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	2202      	movs	r2, #2
 8015ed8:	755a      	strb	r2, [r3, #21]
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	2102      	movs	r1, #2
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7fe f97d 	bl	80141de <unlock_fs>
 8015ee4:	2302      	movs	r3, #2
 8015ee6:	e110      	b.n	801610a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eee:	d109      	bne.n	8015f04 <f_write+0x13a>
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	755a      	strb	r2, [r3, #21]
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	2101      	movs	r1, #1
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7fe f96f 	bl	80141de <unlock_fs>
 8015f00:	2301      	movs	r3, #1
 8015f02:	e102      	b.n	801610a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f08:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d102      	bne.n	8015f18 <f_write+0x14e>
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015f16:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	7d1b      	ldrb	r3, [r3, #20]
 8015f1c:	b25b      	sxtb	r3, r3
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	da1d      	bge.n	8015f5e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	7858      	ldrb	r0, [r3, #1]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6a1a      	ldr	r2, [r3, #32]
 8015f30:	2301      	movs	r3, #1
 8015f32:	f7fd ffff 	bl	8013f34 <disk_write>
 8015f36:	4603      	mov	r3, r0
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d009      	beq.n	8015f50 <f_write+0x186>
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	2201      	movs	r2, #1
 8015f40:	755a      	strb	r2, [r3, #21]
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	2101      	movs	r1, #1
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7fe f949 	bl	80141de <unlock_fs>
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	e0dc      	b.n	801610a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	7d1b      	ldrb	r3, [r3, #20]
 8015f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f58:	b2da      	uxtb	r2, r3
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015f5e:	693a      	ldr	r2, [r7, #16]
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	69db      	ldr	r3, [r3, #28]
 8015f64:	4619      	mov	r1, r3
 8015f66:	4610      	mov	r0, r2
 8015f68:	f7fe fba0 	bl	80146ac <clust2sect>
 8015f6c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d109      	bne.n	8015f88 <f_write+0x1be>
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2202      	movs	r2, #2
 8015f78:	755a      	strb	r2, [r3, #21]
 8015f7a:	693b      	ldr	r3, [r7, #16]
 8015f7c:	2102      	movs	r1, #2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7fe f92d 	bl	80141de <unlock_fs>
 8015f84:	2302      	movs	r3, #2
 8015f86:	e0c0      	b.n	801610a <f_write+0x340>
			sect += csect;
 8015f88:	697a      	ldr	r2, [r7, #20]
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	0a5b      	lsrs	r3, r3, #9
 8015f94:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015f96:	6a3b      	ldr	r3, [r7, #32]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d041      	beq.n	8016020 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015f9c:	69ba      	ldr	r2, [r7, #24]
 8015f9e:	6a3b      	ldr	r3, [r7, #32]
 8015fa0:	4413      	add	r3, r2
 8015fa2:	693a      	ldr	r2, [r7, #16]
 8015fa4:	8952      	ldrh	r2, [r2, #10]
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	d905      	bls.n	8015fb6 <f_write+0x1ec>
					cc = fs->csize - csect;
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	895b      	ldrh	r3, [r3, #10]
 8015fae:	461a      	mov	r2, r3
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015fb6:	693b      	ldr	r3, [r7, #16]
 8015fb8:	7858      	ldrb	r0, [r3, #1]
 8015fba:	6a3b      	ldr	r3, [r7, #32]
 8015fbc:	697a      	ldr	r2, [r7, #20]
 8015fbe:	69f9      	ldr	r1, [r7, #28]
 8015fc0:	f7fd ffb8 	bl	8013f34 <disk_write>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d009      	beq.n	8015fde <f_write+0x214>
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	2201      	movs	r2, #1
 8015fce:	755a      	strb	r2, [r3, #21]
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	2101      	movs	r1, #1
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fe f902 	bl	80141de <unlock_fs>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	e095      	b.n	801610a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	6a1a      	ldr	r2, [r3, #32]
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	1ad3      	subs	r3, r2, r3
 8015fe6:	6a3a      	ldr	r2, [r7, #32]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d915      	bls.n	8016018 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	6a1a      	ldr	r2, [r3, #32]
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	1ad3      	subs	r3, r2, r3
 8015ffa:	025b      	lsls	r3, r3, #9
 8015ffc:	69fa      	ldr	r2, [r7, #28]
 8015ffe:	4413      	add	r3, r2
 8016000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016004:	4619      	mov	r1, r3
 8016006:	f7fe f856 	bl	80140b6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	7d1b      	ldrb	r3, [r3, #20]
 801600e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016012:	b2da      	uxtb	r2, r3
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016018:	6a3b      	ldr	r3, [r7, #32]
 801601a:	025b      	lsls	r3, r3, #9
 801601c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801601e:	e044      	b.n	80160aa <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	6a1b      	ldr	r3, [r3, #32]
 8016024:	697a      	ldr	r2, [r7, #20]
 8016026:	429a      	cmp	r2, r3
 8016028:	d01b      	beq.n	8016062 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	699a      	ldr	r2, [r3, #24]
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016032:	429a      	cmp	r2, r3
 8016034:	d215      	bcs.n	8016062 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	7858      	ldrb	r0, [r3, #1]
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016040:	2301      	movs	r3, #1
 8016042:	697a      	ldr	r2, [r7, #20]
 8016044:	f7fd ff56 	bl	8013ef4 <disk_read>
 8016048:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801604a:	2b00      	cmp	r3, #0
 801604c:	d009      	beq.n	8016062 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2201      	movs	r2, #1
 8016052:	755a      	strb	r2, [r3, #21]
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	2101      	movs	r1, #1
 8016058:	4618      	mov	r0, r3
 801605a:	f7fe f8c0 	bl	80141de <unlock_fs>
 801605e:	2301      	movs	r3, #1
 8016060:	e053      	b.n	801610a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	697a      	ldr	r2, [r7, #20]
 8016066:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	699b      	ldr	r3, [r3, #24]
 801606c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016070:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8016074:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	429a      	cmp	r2, r3
 801607c:	d901      	bls.n	8016082 <f_write+0x2b8>
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	699b      	ldr	r3, [r3, #24]
 801608c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016090:	4413      	add	r3, r2
 8016092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016094:	69f9      	ldr	r1, [r7, #28]
 8016096:	4618      	mov	r0, r3
 8016098:	f7fe f80d 	bl	80140b6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	7d1b      	ldrb	r3, [r3, #20]
 80160a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80160aa:	69fa      	ldr	r2, [r7, #28]
 80160ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160ae:	4413      	add	r3, r2
 80160b0:	61fb      	str	r3, [r7, #28]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	699a      	ldr	r2, [r3, #24]
 80160b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b8:	441a      	add	r2, r3
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	619a      	str	r2, [r3, #24]
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	68da      	ldr	r2, [r3, #12]
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	699b      	ldr	r3, [r3, #24]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	bf38      	it	cc
 80160ca:	461a      	movcc	r2, r3
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	60da      	str	r2, [r3, #12]
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160d6:	441a      	add	r2, r3
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	601a      	str	r2, [r3, #0]
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	f47f aeb6 	bne.w	8015e58 <f_write+0x8e>
 80160ec:	e000      	b.n	80160f0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80160ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	7d1b      	ldrb	r3, [r3, #20]
 80160f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160f8:	b2da      	uxtb	r2, r3
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	2100      	movs	r1, #0
 8016102:	4618      	mov	r0, r3
 8016104:	f7fe f86b 	bl	80141de <unlock_fs>
 8016108:	2300      	movs	r3, #0
}
 801610a:	4618      	mov	r0, r3
 801610c:	3730      	adds	r7, #48	@ 0x30
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}

08016112 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016112:	b580      	push	{r7, lr}
 8016114:	b086      	sub	sp, #24
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f107 0208 	add.w	r2, r7, #8
 8016120:	4611      	mov	r1, r2
 8016122:	4618      	mov	r0, r3
 8016124:	f7ff fbe4 	bl	80158f0 <validate>
 8016128:	4603      	mov	r3, r0
 801612a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801612c:	7dfb      	ldrb	r3, [r7, #23]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d16d      	bne.n	801620e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	7d1b      	ldrb	r3, [r3, #20]
 8016136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801613a:	2b00      	cmp	r3, #0
 801613c:	d067      	beq.n	801620e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	7d1b      	ldrb	r3, [r3, #20]
 8016142:	b25b      	sxtb	r3, r3
 8016144:	2b00      	cmp	r3, #0
 8016146:	da1a      	bge.n	801617e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	7858      	ldrb	r0, [r3, #1]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6a1a      	ldr	r2, [r3, #32]
 8016156:	2301      	movs	r3, #1
 8016158:	f7fd feec 	bl	8013f34 <disk_write>
 801615c:	4603      	mov	r3, r0
 801615e:	2b00      	cmp	r3, #0
 8016160:	d006      	beq.n	8016170 <f_sync+0x5e>
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	2101      	movs	r1, #1
 8016166:	4618      	mov	r0, r3
 8016168:	f7fe f839 	bl	80141de <unlock_fs>
 801616c:	2301      	movs	r3, #1
 801616e:	e055      	b.n	801621c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	7d1b      	ldrb	r3, [r3, #20]
 8016174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016178:	b2da      	uxtb	r2, r3
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801617e:	f7fb fab5 	bl	80116ec <get_fattime>
 8016182:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016184:	68ba      	ldr	r2, [r7, #8]
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801618a:	4619      	mov	r1, r3
 801618c:	4610      	mov	r0, r2
 801618e:	f7fe f9f1 	bl	8014574 <move_window>
 8016192:	4603      	mov	r3, r0
 8016194:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016196:	7dfb      	ldrb	r3, [r7, #23]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d138      	bne.n	801620e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161a0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	330b      	adds	r3, #11
 80161a6:	781a      	ldrb	r2, [r3, #0]
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	330b      	adds	r3, #11
 80161ac:	f042 0220 	orr.w	r2, r2, #32
 80161b0:	b2d2      	uxtb	r2, r2
 80161b2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6818      	ldr	r0, [r3, #0]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	689b      	ldr	r3, [r3, #8]
 80161bc:	461a      	mov	r2, r3
 80161be:	68f9      	ldr	r1, [r7, #12]
 80161c0:	f7fe fefb 	bl	8014fba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	f103 021c 	add.w	r2, r3, #28
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	68db      	ldr	r3, [r3, #12]
 80161ce:	4619      	mov	r1, r3
 80161d0:	4610      	mov	r0, r2
 80161d2:	f7fd ff44 	bl	801405e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	3316      	adds	r3, #22
 80161da:	6939      	ldr	r1, [r7, #16]
 80161dc:	4618      	mov	r0, r3
 80161de:	f7fd ff3e 	bl	801405e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	3312      	adds	r3, #18
 80161e6:	2100      	movs	r1, #0
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7fd ff1d 	bl	8014028 <st_word>
					fs->wflag = 1;
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	2201      	movs	r2, #1
 80161f2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7fe f9ea 	bl	80145d0 <sync_fs>
 80161fc:	4603      	mov	r3, r0
 80161fe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	7d1b      	ldrb	r3, [r3, #20]
 8016204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016208:	b2da      	uxtb	r2, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	7dfa      	ldrb	r2, [r7, #23]
 8016212:	4611      	mov	r1, r2
 8016214:	4618      	mov	r0, r3
 8016216:	f7fd ffe2 	bl	80141de <unlock_fs>
 801621a:	7dfb      	ldrb	r3, [r7, #23]
}
 801621c:	4618      	mov	r0, r3
 801621e:	3718      	adds	r7, #24
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7ff ff70 	bl	8016112 <f_sync>
 8016232:	4603      	mov	r3, r0
 8016234:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016236:	7bfb      	ldrb	r3, [r7, #15]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d11d      	bne.n	8016278 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f107 0208 	add.w	r2, r7, #8
 8016242:	4611      	mov	r1, r2
 8016244:	4618      	mov	r0, r3
 8016246:	f7ff fb53 	bl	80158f0 <validate>
 801624a:	4603      	mov	r3, r0
 801624c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801624e:	7bfb      	ldrb	r3, [r7, #15]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d111      	bne.n	8016278 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	691b      	ldr	r3, [r3, #16]
 8016258:	4618      	mov	r0, r3
 801625a:	f7fe f8e7 	bl	801442c <dec_lock>
 801625e:	4603      	mov	r3, r0
 8016260:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016262:	7bfb      	ldrb	r3, [r7, #15]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d102      	bne.n	801626e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2200      	movs	r2, #0
 801626c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801626e:	68bb      	ldr	r3, [r7, #8]
 8016270:	2100      	movs	r1, #0
 8016272:	4618      	mov	r0, r3
 8016274:	f7fd ffb3 	bl	80141de <unlock_fs>
#endif
		}
	}
	return res;
 8016278:	7bfb      	ldrb	r3, [r7, #15]
}
 801627a:	4618      	mov	r0, r3
 801627c:	3710      	adds	r7, #16
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b096      	sub	sp, #88	@ 0x58
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801628a:	f107 0108 	add.w	r1, r7, #8
 801628e:	1d3b      	adds	r3, r7, #4
 8016290:	2202      	movs	r2, #2
 8016292:	4618      	mov	r0, r3
 8016294:	f7ff f8d8 	bl	8015448 <find_volume>
 8016298:	4603      	mov	r3, r0
 801629a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80162a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f040 80ec 	bne.w	8016484 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	f107 030c 	add.w	r3, r7, #12
 80162b2:	4611      	mov	r1, r2
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7fe ffbb 	bl	8015230 <follow_path>
 80162ba:	4603      	mov	r3, r0
 80162bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80162c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d102      	bne.n	80162ce <f_mkdir+0x4c>
 80162c8:	2308      	movs	r3, #8
 80162ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80162ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80162d2:	2b04      	cmp	r3, #4
 80162d4:	f040 80d6 	bne.w	8016484 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80162d8:	f107 030c 	add.w	r3, r7, #12
 80162dc:	2100      	movs	r1, #0
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fe fbf9 	bl	8014ad6 <create_chain>
 80162e4:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	895b      	ldrh	r3, [r3, #10]
 80162ea:	025b      	lsls	r3, r3, #9
 80162ec:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80162ee:	2300      	movs	r3, #0
 80162f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80162f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d102      	bne.n	8016300 <f_mkdir+0x7e>
 80162fa:	2307      	movs	r3, #7
 80162fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8016300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016302:	2b01      	cmp	r3, #1
 8016304:	d102      	bne.n	801630c <f_mkdir+0x8a>
 8016306:	2302      	movs	r3, #2
 8016308:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801630c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016312:	d102      	bne.n	801631a <f_mkdir+0x98>
 8016314:	2301      	movs	r3, #1
 8016316:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801631a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801631e:	2b00      	cmp	r3, #0
 8016320:	d106      	bne.n	8016330 <f_mkdir+0xae>
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	4618      	mov	r0, r3
 8016326:	f7fe f8e1 	bl	80144ec <sync_window>
 801632a:	4603      	mov	r3, r0
 801632c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8016330:	f7fb f9dc 	bl	80116ec <get_fattime>
 8016334:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016336:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801633a:	2b00      	cmp	r3, #0
 801633c:	d16a      	bne.n	8016414 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016342:	4618      	mov	r0, r3
 8016344:	f7fe f9b2 	bl	80146ac <clust2sect>
 8016348:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	3334      	adds	r3, #52	@ 0x34
 801634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8016350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016354:	2100      	movs	r1, #0
 8016356:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016358:	f7fd fece 	bl	80140f8 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801635c:	220b      	movs	r2, #11
 801635e:	2120      	movs	r1, #32
 8016360:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016362:	f7fd fec9 	bl	80140f8 <mem_set>
					dir[DIR_Name] = '.';
 8016366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016368:	222e      	movs	r2, #46	@ 0x2e
 801636a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801636c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801636e:	330b      	adds	r3, #11
 8016370:	2210      	movs	r2, #16
 8016372:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016376:	3316      	adds	r3, #22
 8016378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801637a:	4618      	mov	r0, r3
 801637c:	f7fd fe6f 	bl	801405e <st_dword>
					st_clust(fs, dir, dcl);
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016386:	4618      	mov	r0, r3
 8016388:	f7fe fe17 	bl	8014fba <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801638c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801638e:	3320      	adds	r3, #32
 8016390:	2220      	movs	r2, #32
 8016392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016394:	4618      	mov	r0, r3
 8016396:	f7fd fe8e 	bl	80140b6 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801639a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801639c:	3321      	adds	r3, #33	@ 0x21
 801639e:	222e      	movs	r2, #46	@ 0x2e
 80163a0:	701a      	strb	r2, [r3, #0]
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	2b03      	cmp	r3, #3
 80163ac:	d106      	bne.n	80163bc <f_mkdir+0x13a>
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d101      	bne.n	80163bc <f_mkdir+0x13a>
 80163b8:	2300      	movs	r3, #0
 80163ba:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80163bc:	68b8      	ldr	r0, [r7, #8]
 80163be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163c0:	3320      	adds	r3, #32
 80163c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80163c4:	4619      	mov	r1, r3
 80163c6:	f7fe fdf8 	bl	8014fba <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	895b      	ldrh	r3, [r3, #10]
 80163ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80163d0:	e01b      	b.n	801640a <f_mkdir+0x188>
					fs->winsect = dsc++;
 80163d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163d4:	1c5a      	adds	r2, r3, #1
 80163d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80163d8:	68ba      	ldr	r2, [r7, #8]
 80163da:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	2201      	movs	r2, #1
 80163e0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7fe f881 	bl	80144ec <sync_window>
 80163ea:	4603      	mov	r3, r0
 80163ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80163f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d10c      	bne.n	8016412 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80163f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80163fc:	2100      	movs	r1, #0
 80163fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016400:	f7fd fe7a 	bl	80140f8 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016406:	3b01      	subs	r3, #1
 8016408:	653b      	str	r3, [r7, #80]	@ 0x50
 801640a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801640c:	2b00      	cmp	r3, #0
 801640e:	d1e0      	bne.n	80163d2 <f_mkdir+0x150>
 8016410:	e000      	b.n	8016414 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8016412:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016414:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016418:	2b00      	cmp	r3, #0
 801641a:	d107      	bne.n	801642c <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801641c:	f107 030c 	add.w	r3, r7, #12
 8016420:	4618      	mov	r0, r3
 8016422:	f7fe fe3f 	bl	80150a4 <dir_register>
 8016426:	4603      	mov	r3, r0
 8016428:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 801642c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016430:	2b00      	cmp	r3, #0
 8016432:	d120      	bne.n	8016476 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016436:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801643a:	3316      	adds	r3, #22
 801643c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801643e:	4618      	mov	r0, r3
 8016440:	f7fd fe0d 	bl	801405e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016448:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801644a:	4618      	mov	r0, r3
 801644c:	f7fe fdb5 	bl	8014fba <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016452:	330b      	adds	r3, #11
 8016454:	2210      	movs	r2, #16
 8016456:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	2201      	movs	r2, #1
 801645c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801645e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8016462:	2b00      	cmp	r3, #0
 8016464:	d10e      	bne.n	8016484 <f_mkdir+0x202>
					res = sync_fs(fs);
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	4618      	mov	r0, r3
 801646a:	f7fe f8b1 	bl	80145d0 <sync_fs>
 801646e:	4603      	mov	r3, r0
 8016470:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8016474:	e006      	b.n	8016484 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016476:	f107 030c 	add.w	r3, r7, #12
 801647a:	2200      	movs	r2, #0
 801647c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801647e:	4618      	mov	r0, r3
 8016480:	f7fe fac4 	bl	8014a0c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801648a:	4611      	mov	r1, r2
 801648c:	4618      	mov	r0, r3
 801648e:	f7fd fea6 	bl	80141de <unlock_fs>
 8016492:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8016496:	4618      	mov	r0, r3
 8016498:	3758      	adds	r7, #88	@ 0x58
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}
	...

080164a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80164a0:	b480      	push	{r7}
 80164a2:	b087      	sub	sp, #28
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	60f8      	str	r0, [r7, #12]
 80164a8:	60b9      	str	r1, [r7, #8]
 80164aa:	4613      	mov	r3, r2
 80164ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80164ae:	2301      	movs	r3, #1
 80164b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80164b6:	4b1f      	ldr	r3, [pc, #124]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164b8:	7a5b      	ldrb	r3, [r3, #9]
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d131      	bne.n	8016524 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80164c0:	4b1c      	ldr	r3, [pc, #112]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164c2:	7a5b      	ldrb	r3, [r3, #9]
 80164c4:	b2db      	uxtb	r3, r3
 80164c6:	461a      	mov	r2, r3
 80164c8:	4b1a      	ldr	r3, [pc, #104]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164ca:	2100      	movs	r1, #0
 80164cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80164ce:	4b19      	ldr	r3, [pc, #100]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164d0:	7a5b      	ldrb	r3, [r3, #9]
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	4a17      	ldr	r2, [pc, #92]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164d6:	009b      	lsls	r3, r3, #2
 80164d8:	4413      	add	r3, r2
 80164da:	68fa      	ldr	r2, [r7, #12]
 80164dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80164de:	4b15      	ldr	r3, [pc, #84]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164e0:	7a5b      	ldrb	r3, [r3, #9]
 80164e2:	b2db      	uxtb	r3, r3
 80164e4:	461a      	mov	r2, r3
 80164e6:	4b13      	ldr	r3, [pc, #76]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164e8:	4413      	add	r3, r2
 80164ea:	79fa      	ldrb	r2, [r7, #7]
 80164ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80164ee:	4b11      	ldr	r3, [pc, #68]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164f0:	7a5b      	ldrb	r3, [r3, #9]
 80164f2:	b2db      	uxtb	r3, r3
 80164f4:	1c5a      	adds	r2, r3, #1
 80164f6:	b2d1      	uxtb	r1, r2
 80164f8:	4a0e      	ldr	r2, [pc, #56]	@ (8016534 <FATFS_LinkDriverEx+0x94>)
 80164fa:	7251      	strb	r1, [r2, #9]
 80164fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80164fe:	7dbb      	ldrb	r3, [r7, #22]
 8016500:	3330      	adds	r3, #48	@ 0x30
 8016502:	b2da      	uxtb	r2, r3
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	3301      	adds	r3, #1
 801650c:	223a      	movs	r2, #58	@ 0x3a
 801650e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	3302      	adds	r3, #2
 8016514:	222f      	movs	r2, #47	@ 0x2f
 8016516:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	3303      	adds	r3, #3
 801651c:	2200      	movs	r2, #0
 801651e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016520:	2300      	movs	r3, #0
 8016522:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016524:	7dfb      	ldrb	r3, [r7, #23]
}
 8016526:	4618      	mov	r0, r3
 8016528:	371c      	adds	r7, #28
 801652a:	46bd      	mov	sp, r7
 801652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop
 8016534:	200017ec 	.word	0x200017ec

08016538 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016542:	2200      	movs	r2, #0
 8016544:	6839      	ldr	r1, [r7, #0]
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f7ff ffaa 	bl	80164a0 <FATFS_LinkDriverEx>
 801654c:	4603      	mov	r3, r0
}
 801654e:	4618      	mov	r0, r3
 8016550:	3708      	adds	r7, #8
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}

08016556 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8016556:	b580      	push	{r7, lr}
 8016558:	b086      	sub	sp, #24
 801655a:	af00      	add	r7, sp, #0
 801655c:	4603      	mov	r3, r0
 801655e:	6039      	str	r1, [r7, #0]
 8016560:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8016562:	2300      	movs	r3, #0
 8016564:	60fb      	str	r3, [r7, #12]
 8016566:	2300      	movs	r3, #0
 8016568:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801656a:	f107 030c 	add.w	r3, r7, #12
 801656e:	2101      	movs	r1, #1
 8016570:	4618      	mov	r0, r3
 8016572:	f000 f8e9 	bl	8016748 <osSemaphoreCreate>
 8016576:	4602      	mov	r2, r0
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	bf14      	ite	ne
 8016584:	2301      	movne	r3, #1
 8016586:	2300      	moveq	r3, #0
 8016588:	b2db      	uxtb	r3, r3
 801658a:	617b      	str	r3, [r7, #20]

    return ret;
 801658c:	697b      	ldr	r3, [r7, #20]
}
 801658e:	4618      	mov	r0, r3
 8016590:	3718      	adds	r7, #24
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}

08016596 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8016596:	b580      	push	{r7, lr}
 8016598:	b082      	sub	sp, #8
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f000 f996 	bl	80168d0 <osSemaphoreDelete>
#endif
    return 1;
 80165a4:	2301      	movs	r3, #1
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b084      	sub	sp, #16
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80165ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f000 f902 	bl	80167c8 <osSemaphoreWait>
 80165c4:	4603      	mov	r3, r0
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80165ca:	2301      	movs	r3, #1
 80165cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80165ce:	68fb      	ldr	r3, [r7, #12]
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3710      	adds	r7, #16
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f000 f93f 	bl	8016864 <osSemaphoreRelease>
#endif
}
 80165e6:	bf00      	nop
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80165ee:	b480      	push	{r7}
 80165f0:	b085      	sub	sp, #20
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	4603      	mov	r3, r0
 80165f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80165f8:	2300      	movs	r3, #0
 80165fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80165fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016600:	2b84      	cmp	r3, #132	@ 0x84
 8016602:	d005      	beq.n	8016610 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016604:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	4413      	add	r3, r2
 801660c:	3303      	adds	r3, #3
 801660e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016610:	68fb      	ldr	r3, [r7, #12]
}
 8016612:	4618      	mov	r0, r3
 8016614:	3714      	adds	r7, #20
 8016616:	46bd      	mov	sp, r7
 8016618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661c:	4770      	bx	lr

0801661e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801661e:	b480      	push	{r7}
 8016620:	b083      	sub	sp, #12
 8016622:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016624:	f3ef 8305 	mrs	r3, IPSR
 8016628:	607b      	str	r3, [r7, #4]
  return(result);
 801662a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801662c:	2b00      	cmp	r3, #0
 801662e:	bf14      	ite	ne
 8016630:	2301      	movne	r3, #1
 8016632:	2300      	moveq	r3, #0
 8016634:	b2db      	uxtb	r3, r3
}
 8016636:	4618      	mov	r0, r3
 8016638:	370c      	adds	r7, #12
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr

08016642 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016642:	b580      	push	{r7, lr}
 8016644:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016646:	f001 fd33 	bl	80180b0 <vTaskStartScheduler>
  
  return osOK;
 801664a:	2300      	movs	r3, #0
}
 801664c:	4618      	mov	r0, r3
 801664e:	bd80      	pop	{r7, pc}

08016650 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8016654:	f002 f994 	bl	8018980 <xTaskGetSchedulerState>
 8016658:	4603      	mov	r3, r0
 801665a:	2b01      	cmp	r3, #1
 801665c:	d101      	bne.n	8016662 <osKernelRunning+0x12>
    return 0;
 801665e:	2300      	movs	r3, #0
 8016660:	e000      	b.n	8016664 <osKernelRunning+0x14>
  else
    return 1;
 8016662:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8016664:	4618      	mov	r0, r3
 8016666:	bd80      	pop	{r7, pc}

08016668 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801666c:	f7ff ffd7 	bl	801661e <inHandlerMode>
 8016670:	4603      	mov	r3, r0
 8016672:	2b00      	cmp	r3, #0
 8016674:	d003      	beq.n	801667e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8016676:	f001 fe3f 	bl	80182f8 <xTaskGetTickCountFromISR>
 801667a:	4603      	mov	r3, r0
 801667c:	e002      	b.n	8016684 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801667e:	f001 fe2b 	bl	80182d8 <xTaskGetTickCount>
 8016682:	4603      	mov	r3, r0
  }
}
 8016684:	4618      	mov	r0, r3
 8016686:	bd80      	pop	{r7, pc}

08016688 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801668a:	b089      	sub	sp, #36	@ 0x24
 801668c:	af04      	add	r7, sp, #16
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	695b      	ldr	r3, [r3, #20]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d020      	beq.n	80166dc <osThreadCreate+0x54>
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	699b      	ldr	r3, [r3, #24]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d01c      	beq.n	80166dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	685c      	ldr	r4, [r3, #4]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	691e      	ldr	r6, [r3, #16]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166b4:	4618      	mov	r0, r3
 80166b6:	f7ff ff9a 	bl	80165ee <makeFreeRtosPriority>
 80166ba:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	695b      	ldr	r3, [r3, #20]
 80166c0:	687a      	ldr	r2, [r7, #4]
 80166c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166c4:	9202      	str	r2, [sp, #8]
 80166c6:	9301      	str	r3, [sp, #4]
 80166c8:	9100      	str	r1, [sp, #0]
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	4632      	mov	r2, r6
 80166ce:	4629      	mov	r1, r5
 80166d0:	4620      	mov	r0, r4
 80166d2:	f001 fb0b 	bl	8017cec <xTaskCreateStatic>
 80166d6:	4603      	mov	r3, r0
 80166d8:	60fb      	str	r3, [r7, #12]
 80166da:	e01c      	b.n	8016716 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	685c      	ldr	r4, [r3, #4]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166e8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7ff ff7c 	bl	80165ee <makeFreeRtosPriority>
 80166f6:	4602      	mov	r2, r0
 80166f8:	f107 030c 	add.w	r3, r7, #12
 80166fc:	9301      	str	r3, [sp, #4]
 80166fe:	9200      	str	r2, [sp, #0]
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	4632      	mov	r2, r6
 8016704:	4629      	mov	r1, r5
 8016706:	4620      	mov	r0, r4
 8016708:	f001 fb56 	bl	8017db8 <xTaskCreate>
 801670c:	4603      	mov	r3, r0
 801670e:	2b01      	cmp	r3, #1
 8016710:	d001      	beq.n	8016716 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016712:	2300      	movs	r3, #0
 8016714:	e000      	b.n	8016718 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016716:	68fb      	ldr	r3, [r7, #12]
}
 8016718:	4618      	mov	r0, r3
 801671a:	3714      	adds	r7, #20
 801671c:	46bd      	mov	sp, r7
 801671e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016720 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b084      	sub	sp, #16
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d001      	beq.n	8016736 <osDelay+0x16>
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	e000      	b.n	8016738 <osDelay+0x18>
 8016736:	2301      	movs	r3, #1
 8016738:	4618      	mov	r0, r3
 801673a:	f001 fc81 	bl	8018040 <vTaskDelay>
  
  return osOK;
 801673e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016740:	4618      	mov	r0, r3
 8016742:	3710      	adds	r7, #16
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8016748:	b580      	push	{r7, lr}
 801674a:	b086      	sub	sp, #24
 801674c:	af02      	add	r7, sp, #8
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	685b      	ldr	r3, [r3, #4]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d016      	beq.n	8016788 <osSemaphoreCreate+0x40>
    if (count == 1) {
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	2b01      	cmp	r3, #1
 801675e:	d10a      	bne.n	8016776 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	2203      	movs	r2, #3
 8016766:	9200      	str	r2, [sp, #0]
 8016768:	2200      	movs	r2, #0
 801676a:	2100      	movs	r1, #0
 801676c:	2001      	movs	r0, #1
 801676e:	f000 fad5 	bl	8016d1c <xQueueGenericCreateStatic>
 8016772:	4603      	mov	r3, r0
 8016774:	e023      	b.n	80167be <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8016776:	6838      	ldr	r0, [r7, #0]
 8016778:	6839      	ldr	r1, [r7, #0]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	685b      	ldr	r3, [r3, #4]
 801677e:	461a      	mov	r2, r3
 8016780:	f000 fbb5 	bl	8016eee <xQueueCreateCountingSemaphoreStatic>
 8016784:	4603      	mov	r3, r0
 8016786:	e01a      	b.n	80167be <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	2b01      	cmp	r3, #1
 801678c:	d110      	bne.n	80167b0 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 801678e:	2203      	movs	r2, #3
 8016790:	2100      	movs	r1, #0
 8016792:	2001      	movs	r0, #1
 8016794:	f000 fb49 	bl	8016e2a <xQueueGenericCreate>
 8016798:	60f8      	str	r0, [r7, #12]
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d005      	beq.n	80167ac <osSemaphoreCreate+0x64>
 80167a0:	2300      	movs	r3, #0
 80167a2:	2200      	movs	r2, #0
 80167a4:	2100      	movs	r1, #0
 80167a6:	68f8      	ldr	r0, [r7, #12]
 80167a8:	f000 fc18 	bl	8016fdc <xQueueGenericSend>
      return sema;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	e006      	b.n	80167be <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	683a      	ldr	r2, [r7, #0]
 80167b4:	4611      	mov	r1, r2
 80167b6:	4618      	mov	r0, r3
 80167b8:	f000 fbd6 	bl	8016f68 <xQueueCreateCountingSemaphore>
 80167bc:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
	...

080167c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80167d2:	2300      	movs	r3, #0
 80167d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d101      	bne.n	80167e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80167dc:	2380      	movs	r3, #128	@ 0x80
 80167de:	e03a      	b.n	8016856 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80167e0:	2300      	movs	r3, #0
 80167e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167ea:	d103      	bne.n	80167f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80167ec:	f04f 33ff 	mov.w	r3, #4294967295
 80167f0:	60fb      	str	r3, [r7, #12]
 80167f2:	e009      	b.n	8016808 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d006      	beq.n	8016808 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d101      	bne.n	8016808 <osSemaphoreWait+0x40>
      ticks = 1;
 8016804:	2301      	movs	r3, #1
 8016806:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016808:	f7ff ff09 	bl	801661e <inHandlerMode>
 801680c:	4603      	mov	r3, r0
 801680e:	2b00      	cmp	r3, #0
 8016810:	d017      	beq.n	8016842 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8016812:	f107 0308 	add.w	r3, r7, #8
 8016816:	461a      	mov	r2, r3
 8016818:	2100      	movs	r1, #0
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	f001 f824 	bl	8017868 <xQueueReceiveFromISR>
 8016820:	4603      	mov	r3, r0
 8016822:	2b01      	cmp	r3, #1
 8016824:	d001      	beq.n	801682a <osSemaphoreWait+0x62>
      return osErrorOS;
 8016826:	23ff      	movs	r3, #255	@ 0xff
 8016828:	e015      	b.n	8016856 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d011      	beq.n	8016854 <osSemaphoreWait+0x8c>
 8016830:	4b0b      	ldr	r3, [pc, #44]	@ (8016860 <osSemaphoreWait+0x98>)
 8016832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016836:	601a      	str	r2, [r3, #0]
 8016838:	f3bf 8f4f 	dsb	sy
 801683c:	f3bf 8f6f 	isb	sy
 8016840:	e008      	b.n	8016854 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8016842:	68f9      	ldr	r1, [r7, #12]
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f000 fef7 	bl	8017638 <xQueueSemaphoreTake>
 801684a:	4603      	mov	r3, r0
 801684c:	2b01      	cmp	r3, #1
 801684e:	d001      	beq.n	8016854 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016850:	23ff      	movs	r3, #255	@ 0xff
 8016852:	e000      	b.n	8016856 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016854:	2300      	movs	r3, #0
}
 8016856:	4618      	mov	r0, r3
 8016858:	3710      	adds	r7, #16
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	e000ed04 	.word	0xe000ed04

08016864 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b084      	sub	sp, #16
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801686c:	2300      	movs	r3, #0
 801686e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016870:	2300      	movs	r3, #0
 8016872:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8016874:	f7ff fed3 	bl	801661e <inHandlerMode>
 8016878:	4603      	mov	r3, r0
 801687a:	2b00      	cmp	r3, #0
 801687c:	d016      	beq.n	80168ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801687e:	f107 0308 	add.w	r3, r7, #8
 8016882:	4619      	mov	r1, r3
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f000 fd56 	bl	8017336 <xQueueGiveFromISR>
 801688a:	4603      	mov	r3, r0
 801688c:	2b01      	cmp	r3, #1
 801688e:	d001      	beq.n	8016894 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8016890:	23ff      	movs	r3, #255	@ 0xff
 8016892:	e017      	b.n	80168c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d013      	beq.n	80168c2 <osSemaphoreRelease+0x5e>
 801689a:	4b0c      	ldr	r3, [pc, #48]	@ (80168cc <osSemaphoreRelease+0x68>)
 801689c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168a0:	601a      	str	r2, [r3, #0]
 80168a2:	f3bf 8f4f 	dsb	sy
 80168a6:	f3bf 8f6f 	isb	sy
 80168aa:	e00a      	b.n	80168c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80168ac:	2300      	movs	r3, #0
 80168ae:	2200      	movs	r2, #0
 80168b0:	2100      	movs	r1, #0
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f000 fb92 	bl	8016fdc <xQueueGenericSend>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b01      	cmp	r3, #1
 80168bc:	d001      	beq.n	80168c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80168be:	23ff      	movs	r3, #255	@ 0xff
 80168c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80168c2:	68fb      	ldr	r3, [r7, #12]
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3710      	adds	r7, #16
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	e000ed04 	.word	0xe000ed04

080168d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80168d8:	f7ff fea1 	bl	801661e <inHandlerMode>
 80168dc:	4603      	mov	r3, r0
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d001      	beq.n	80168e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80168e2:	2382      	movs	r3, #130	@ 0x82
 80168e4:	e003      	b.n	80168ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f001 f888 	bl	80179fc <vQueueDelete>

  return osOK; 
 80168ec:	2300      	movs	r3, #0
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}

080168f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80168f6:	b590      	push	{r4, r7, lr}
 80168f8:	b085      	sub	sp, #20
 80168fa:	af02      	add	r7, sp, #8
 80168fc:	6078      	str	r0, [r7, #4]
 80168fe:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	689b      	ldr	r3, [r3, #8]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d011      	beq.n	801692c <osMessageCreate+0x36>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d00d      	beq.n	801692c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6818      	ldr	r0, [r3, #0]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6859      	ldr	r1, [r3, #4]
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	689a      	ldr	r2, [r3, #8]
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	68db      	ldr	r3, [r3, #12]
 8016920:	2400      	movs	r4, #0
 8016922:	9400      	str	r4, [sp, #0]
 8016924:	f000 f9fa 	bl	8016d1c <xQueueGenericCreateStatic>
 8016928:	4603      	mov	r3, r0
 801692a:	e008      	b.n	801693e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6818      	ldr	r0, [r3, #0]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	2200      	movs	r2, #0
 8016936:	4619      	mov	r1, r3
 8016938:	f000 fa77 	bl	8016e2a <xQueueGenericCreate>
 801693c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801693e:	4618      	mov	r0, r3
 8016940:	370c      	adds	r7, #12
 8016942:	46bd      	mov	sp, r7
 8016944:	bd90      	pop	{r4, r7, pc}
	...

08016948 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	af00      	add	r7, sp, #0
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016954:	2300      	movs	r3, #0
 8016956:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d101      	bne.n	8016966 <osMessagePut+0x1e>
    ticks = 1;
 8016962:	2301      	movs	r3, #1
 8016964:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8016966:	f7ff fe5a 	bl	801661e <inHandlerMode>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d018      	beq.n	80169a2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016970:	f107 0210 	add.w	r2, r7, #16
 8016974:	f107 0108 	add.w	r1, r7, #8
 8016978:	2300      	movs	r3, #0
 801697a:	68f8      	ldr	r0, [r7, #12]
 801697c:	f000 fc38 	bl	80171f0 <xQueueGenericSendFromISR>
 8016980:	4603      	mov	r3, r0
 8016982:	2b01      	cmp	r3, #1
 8016984:	d001      	beq.n	801698a <osMessagePut+0x42>
      return osErrorOS;
 8016986:	23ff      	movs	r3, #255	@ 0xff
 8016988:	e018      	b.n	80169bc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801698a:	693b      	ldr	r3, [r7, #16]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d014      	beq.n	80169ba <osMessagePut+0x72>
 8016990:	4b0c      	ldr	r3, [pc, #48]	@ (80169c4 <osMessagePut+0x7c>)
 8016992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016996:	601a      	str	r2, [r3, #0]
 8016998:	f3bf 8f4f 	dsb	sy
 801699c:	f3bf 8f6f 	isb	sy
 80169a0:	e00b      	b.n	80169ba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80169a2:	f107 0108 	add.w	r1, r7, #8
 80169a6:	2300      	movs	r3, #0
 80169a8:	697a      	ldr	r2, [r7, #20]
 80169aa:	68f8      	ldr	r0, [r7, #12]
 80169ac:	f000 fb16 	bl	8016fdc <xQueueGenericSend>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d001      	beq.n	80169ba <osMessagePut+0x72>
      return osErrorOS;
 80169b6:	23ff      	movs	r3, #255	@ 0xff
 80169b8:	e000      	b.n	80169bc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80169ba:	2300      	movs	r3, #0
}
 80169bc:	4618      	mov	r0, r3
 80169be:	3718      	adds	r7, #24
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}
 80169c4:	e000ed04 	.word	0xe000ed04

080169c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80169c8:	b590      	push	{r4, r7, lr}
 80169ca:	b08b      	sub	sp, #44	@ 0x2c
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	60f8      	str	r0, [r7, #12]
 80169d0:	60b9      	str	r1, [r7, #8]
 80169d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80169d4:	68bb      	ldr	r3, [r7, #8]
 80169d6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80169d8:	2300      	movs	r3, #0
 80169da:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d10a      	bne.n	80169f8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80169e2:	2380      	movs	r3, #128	@ 0x80
 80169e4:	617b      	str	r3, [r7, #20]
    return event;
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	461c      	mov	r4, r3
 80169ea:	f107 0314 	add.w	r3, r7, #20
 80169ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80169f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80169f6:	e054      	b.n	8016aa2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80169f8:	2300      	movs	r3, #0
 80169fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80169fc:	2300      	movs	r3, #0
 80169fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a06:	d103      	bne.n	8016a10 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016a08:	f04f 33ff 	mov.w	r3, #4294967295
 8016a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a0e:	e009      	b.n	8016a24 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d006      	beq.n	8016a24 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d101      	bne.n	8016a24 <osMessageGet+0x5c>
      ticks = 1;
 8016a20:	2301      	movs	r3, #1
 8016a22:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016a24:	f7ff fdfb 	bl	801661e <inHandlerMode>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d01c      	beq.n	8016a68 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016a2e:	f107 0220 	add.w	r2, r7, #32
 8016a32:	f107 0314 	add.w	r3, r7, #20
 8016a36:	3304      	adds	r3, #4
 8016a38:	4619      	mov	r1, r3
 8016a3a:	68b8      	ldr	r0, [r7, #8]
 8016a3c:	f000 ff14 	bl	8017868 <xQueueReceiveFromISR>
 8016a40:	4603      	mov	r3, r0
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	d102      	bne.n	8016a4c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8016a46:	2310      	movs	r3, #16
 8016a48:	617b      	str	r3, [r7, #20]
 8016a4a:	e001      	b.n	8016a50 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016a50:	6a3b      	ldr	r3, [r7, #32]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d01d      	beq.n	8016a92 <osMessageGet+0xca>
 8016a56:	4b15      	ldr	r3, [pc, #84]	@ (8016aac <osMessageGet+0xe4>)
 8016a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a5c:	601a      	str	r2, [r3, #0]
 8016a5e:	f3bf 8f4f 	dsb	sy
 8016a62:	f3bf 8f6f 	isb	sy
 8016a66:	e014      	b.n	8016a92 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016a68:	f107 0314 	add.w	r3, r7, #20
 8016a6c:	3304      	adds	r3, #4
 8016a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a70:	4619      	mov	r1, r3
 8016a72:	68b8      	ldr	r0, [r7, #8]
 8016a74:	f000 fcf8 	bl	8017468 <xQueueReceive>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d102      	bne.n	8016a84 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016a7e:	2310      	movs	r3, #16
 8016a80:	617b      	str	r3, [r7, #20]
 8016a82:	e006      	b.n	8016a92 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d101      	bne.n	8016a8e <osMessageGet+0xc6>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	e000      	b.n	8016a90 <osMessageGet+0xc8>
 8016a8e:	2340      	movs	r3, #64	@ 0x40
 8016a90:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	461c      	mov	r4, r3
 8016a96:	f107 0314 	add.w	r3, r7, #20
 8016a9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016aa2:	68f8      	ldr	r0, [r7, #12]
 8016aa4:	372c      	adds	r7, #44	@ 0x2c
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd90      	pop	{r4, r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	e000ed04 	.word	0xe000ed04

08016ab0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016ab8:	f7ff fdb1 	bl	801661e <inHandlerMode>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d004      	beq.n	8016acc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f000 ff79 	bl	80179ba <uxQueueMessagesWaitingFromISR>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	e003      	b.n	8016ad4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f000 ff53 	bl	8017978 <uxQueueMessagesWaiting>
 8016ad2:	4603      	mov	r3, r0
  }
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3708      	adds	r7, #8
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}

08016adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016adc:	b480      	push	{r7}
 8016ade:	b083      	sub	sp, #12
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f103 0208 	add.w	r2, r3, #8
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	f04f 32ff 	mov.w	r2, #4294967295
 8016af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f103 0208 	add.w	r2, r3, #8
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f103 0208 	add.w	r2, r3, #8
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016b10:	bf00      	nop
 8016b12:	370c      	adds	r7, #12
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr

08016b1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b083      	sub	sp, #12
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2200      	movs	r2, #0
 8016b28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016b2a:	bf00      	nop
 8016b2c:	370c      	adds	r7, #12
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b34:	4770      	bx	lr

08016b36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b36:	b480      	push	{r7}
 8016b38:	b085      	sub	sp, #20
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	6078      	str	r0, [r7, #4]
 8016b3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	685b      	ldr	r3, [r3, #4]
 8016b44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016b46:	683b      	ldr	r3, [r7, #0]
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	689a      	ldr	r2, [r3, #8]
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	689b      	ldr	r3, [r3, #8]
 8016b58:	683a      	ldr	r2, [r7, #0]
 8016b5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	683a      	ldr	r2, [r7, #0]
 8016b60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	1c5a      	adds	r2, r3, #1
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	601a      	str	r2, [r3, #0]
}
 8016b72:	bf00      	nop
 8016b74:	3714      	adds	r7, #20
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr

08016b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b7e:	b480      	push	{r7}
 8016b80:	b085      	sub	sp, #20
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
 8016b86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b94:	d103      	bne.n	8016b9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	691b      	ldr	r3, [r3, #16]
 8016b9a:	60fb      	str	r3, [r7, #12]
 8016b9c:	e00c      	b.n	8016bb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	3308      	adds	r3, #8
 8016ba2:	60fb      	str	r3, [r7, #12]
 8016ba4:	e002      	b.n	8016bac <vListInsert+0x2e>
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	60fb      	str	r3, [r7, #12]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	68ba      	ldr	r2, [r7, #8]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d2f6      	bcs.n	8016ba6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	685a      	ldr	r2, [r3, #4]
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	685b      	ldr	r3, [r3, #4]
 8016bc4:	683a      	ldr	r2, [r7, #0]
 8016bc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	68fa      	ldr	r2, [r7, #12]
 8016bcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	683a      	ldr	r2, [r7, #0]
 8016bd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	1c5a      	adds	r2, r3, #1
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	601a      	str	r2, [r3, #0]
}
 8016be4:	bf00      	nop
 8016be6:	3714      	adds	r7, #20
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b085      	sub	sp, #20
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	691b      	ldr	r3, [r3, #16]
 8016bfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	6892      	ldr	r2, [r2, #8]
 8016c06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	689b      	ldr	r3, [r3, #8]
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	6852      	ldr	r2, [r2, #4]
 8016c10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d103      	bne.n	8016c24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	689a      	ldr	r2, [r3, #8]
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2200      	movs	r2, #0
 8016c28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	1e5a      	subs	r2, r3, #1
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	681b      	ldr	r3, [r3, #0]
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3714      	adds	r7, #20
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c42:	4770      	bx	lr

08016c44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b084      	sub	sp, #16
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
 8016c4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d10d      	bne.n	8016c74 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c5c:	b672      	cpsid	i
 8016c5e:	f383 8811 	msr	BASEPRI, r3
 8016c62:	f3bf 8f6f 	isb	sy
 8016c66:	f3bf 8f4f 	dsb	sy
 8016c6a:	b662      	cpsie	i
 8016c6c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016c6e:	bf00      	nop
 8016c70:	bf00      	nop
 8016c72:	e7fd      	b.n	8016c70 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8016c74:	f002 f9da 	bl	801902c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016c80:	68f9      	ldr	r1, [r7, #12]
 8016c82:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016c84:	fb01 f303 	mul.w	r3, r1, r3
 8016c88:	441a      	add	r2, r3
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2200      	movs	r2, #0
 8016c92:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	681a      	ldr	r2, [r3, #0]
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016ca4:	3b01      	subs	r3, #1
 8016ca6:	68f9      	ldr	r1, [r7, #12]
 8016ca8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016caa:	fb01 f303 	mul.w	r3, r1, r3
 8016cae:	441a      	add	r2, r3
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	22ff      	movs	r2, #255	@ 0xff
 8016cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	22ff      	movs	r2, #255	@ 0xff
 8016cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016cc4:	683b      	ldr	r3, [r7, #0]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d114      	bne.n	8016cf4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	691b      	ldr	r3, [r3, #16]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d01a      	beq.n	8016d08 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	3310      	adds	r3, #16
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f001 fc88 	bl	80185ec <xTaskRemoveFromEventList>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d012      	beq.n	8016d08 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8016d18 <xQueueGenericReset+0xd4>)
 8016ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ce8:	601a      	str	r2, [r3, #0]
 8016cea:	f3bf 8f4f 	dsb	sy
 8016cee:	f3bf 8f6f 	isb	sy
 8016cf2:	e009      	b.n	8016d08 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	3310      	adds	r3, #16
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7ff feef 	bl	8016adc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	3324      	adds	r3, #36	@ 0x24
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7ff feea 	bl	8016adc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d08:	f002 f9c6 	bl	8019098 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016d0c:	2301      	movs	r3, #1
}
 8016d0e:	4618      	mov	r0, r3
 8016d10:	3710      	adds	r7, #16
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	bf00      	nop
 8016d18:	e000ed04 	.word	0xe000ed04

08016d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b08e      	sub	sp, #56	@ 0x38
 8016d20:	af02      	add	r7, sp, #8
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	607a      	str	r2, [r7, #4]
 8016d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d10d      	bne.n	8016d4c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8016d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d34:	b672      	cpsid	i
 8016d36:	f383 8811 	msr	BASEPRI, r3
 8016d3a:	f3bf 8f6f 	isb	sy
 8016d3e:	f3bf 8f4f 	dsb	sy
 8016d42:	b662      	cpsie	i
 8016d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016d46:	bf00      	nop
 8016d48:	bf00      	nop
 8016d4a:	e7fd      	b.n	8016d48 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d10d      	bne.n	8016d6e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8016d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d56:	b672      	cpsid	i
 8016d58:	f383 8811 	msr	BASEPRI, r3
 8016d5c:	f3bf 8f6f 	isb	sy
 8016d60:	f3bf 8f4f 	dsb	sy
 8016d64:	b662      	cpsie	i
 8016d66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016d68:	bf00      	nop
 8016d6a:	bf00      	nop
 8016d6c:	e7fd      	b.n	8016d6a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d002      	beq.n	8016d7a <xQueueGenericCreateStatic+0x5e>
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d001      	beq.n	8016d7e <xQueueGenericCreateStatic+0x62>
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	e000      	b.n	8016d80 <xQueueGenericCreateStatic+0x64>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d10d      	bne.n	8016da0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8016d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d88:	b672      	cpsid	i
 8016d8a:	f383 8811 	msr	BASEPRI, r3
 8016d8e:	f3bf 8f6f 	isb	sy
 8016d92:	f3bf 8f4f 	dsb	sy
 8016d96:	b662      	cpsie	i
 8016d98:	623b      	str	r3, [r7, #32]
}
 8016d9a:	bf00      	nop
 8016d9c:	bf00      	nop
 8016d9e:	e7fd      	b.n	8016d9c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d102      	bne.n	8016dac <xQueueGenericCreateStatic+0x90>
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d101      	bne.n	8016db0 <xQueueGenericCreateStatic+0x94>
 8016dac:	2301      	movs	r3, #1
 8016dae:	e000      	b.n	8016db2 <xQueueGenericCreateStatic+0x96>
 8016db0:	2300      	movs	r3, #0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d10d      	bne.n	8016dd2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8016db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dba:	b672      	cpsid	i
 8016dbc:	f383 8811 	msr	BASEPRI, r3
 8016dc0:	f3bf 8f6f 	isb	sy
 8016dc4:	f3bf 8f4f 	dsb	sy
 8016dc8:	b662      	cpsie	i
 8016dca:	61fb      	str	r3, [r7, #28]
}
 8016dcc:	bf00      	nop
 8016dce:	bf00      	nop
 8016dd0:	e7fd      	b.n	8016dce <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016dd2:	2348      	movs	r3, #72	@ 0x48
 8016dd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	2b48      	cmp	r3, #72	@ 0x48
 8016dda:	d00d      	beq.n	8016df8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8016ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016de0:	b672      	cpsid	i
 8016de2:	f383 8811 	msr	BASEPRI, r3
 8016de6:	f3bf 8f6f 	isb	sy
 8016dea:	f3bf 8f4f 	dsb	sy
 8016dee:	b662      	cpsie	i
 8016df0:	61bb      	str	r3, [r7, #24]
}
 8016df2:	bf00      	nop
 8016df4:	bf00      	nop
 8016df6:	e7fd      	b.n	8016df4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016df8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d00d      	beq.n	8016e20 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e06:	2201      	movs	r2, #1
 8016e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e12:	9300      	str	r3, [sp, #0]
 8016e14:	4613      	mov	r3, r2
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	68b9      	ldr	r1, [r7, #8]
 8016e1a:	68f8      	ldr	r0, [r7, #12]
 8016e1c:	f000 f848 	bl	8016eb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3730      	adds	r7, #48	@ 0x30
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}

08016e2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016e2a:	b580      	push	{r7, lr}
 8016e2c:	b08a      	sub	sp, #40	@ 0x28
 8016e2e:	af02      	add	r7, sp, #8
 8016e30:	60f8      	str	r0, [r7, #12]
 8016e32:	60b9      	str	r1, [r7, #8]
 8016e34:	4613      	mov	r3, r2
 8016e36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d10d      	bne.n	8016e5a <xQueueGenericCreate+0x30>
	__asm volatile
 8016e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e42:	b672      	cpsid	i
 8016e44:	f383 8811 	msr	BASEPRI, r3
 8016e48:	f3bf 8f6f 	isb	sy
 8016e4c:	f3bf 8f4f 	dsb	sy
 8016e50:	b662      	cpsie	i
 8016e52:	613b      	str	r3, [r7, #16]
}
 8016e54:	bf00      	nop
 8016e56:	bf00      	nop
 8016e58:	e7fd      	b.n	8016e56 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d102      	bne.n	8016e66 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016e60:	2300      	movs	r3, #0
 8016e62:	61fb      	str	r3, [r7, #28]
 8016e64:	e004      	b.n	8016e70 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	68ba      	ldr	r2, [r7, #8]
 8016e6a:	fb02 f303 	mul.w	r3, r2, r3
 8016e6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016e70:	69fb      	ldr	r3, [r7, #28]
 8016e72:	3348      	adds	r3, #72	@ 0x48
 8016e74:	4618      	mov	r0, r3
 8016e76:	f002 fa07 	bl	8019288 <pvPortMalloc>
 8016e7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016e7c:	69bb      	ldr	r3, [r7, #24]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d011      	beq.n	8016ea6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016e82:	69bb      	ldr	r3, [r7, #24]
 8016e84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016e86:	697b      	ldr	r3, [r7, #20]
 8016e88:	3348      	adds	r3, #72	@ 0x48
 8016e8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e8c:	69bb      	ldr	r3, [r7, #24]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e94:	79fa      	ldrb	r2, [r7, #7]
 8016e96:	69bb      	ldr	r3, [r7, #24]
 8016e98:	9300      	str	r3, [sp, #0]
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	697a      	ldr	r2, [r7, #20]
 8016e9e:	68b9      	ldr	r1, [r7, #8]
 8016ea0:	68f8      	ldr	r0, [r7, #12]
 8016ea2:	f000 f805 	bl	8016eb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	3720      	adds	r7, #32
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b084      	sub	sp, #16
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	60f8      	str	r0, [r7, #12]
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
 8016ebc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d103      	bne.n	8016ecc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016ec4:	69bb      	ldr	r3, [r7, #24]
 8016ec6:	69ba      	ldr	r2, [r7, #24]
 8016ec8:	601a      	str	r2, [r3, #0]
 8016eca:	e002      	b.n	8016ed2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016ed2:	69bb      	ldr	r3, [r7, #24]
 8016ed4:	68fa      	ldr	r2, [r7, #12]
 8016ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016ed8:	69bb      	ldr	r3, [r7, #24]
 8016eda:	68ba      	ldr	r2, [r7, #8]
 8016edc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016ede:	2101      	movs	r1, #1
 8016ee0:	69b8      	ldr	r0, [r7, #24]
 8016ee2:	f7ff feaf 	bl	8016c44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016ee6:	bf00      	nop
 8016ee8:	3710      	adds	r7, #16
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}

08016eee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016eee:	b580      	push	{r7, lr}
 8016ef0:	b08a      	sub	sp, #40	@ 0x28
 8016ef2:	af02      	add	r7, sp, #8
 8016ef4:	60f8      	str	r0, [r7, #12]
 8016ef6:	60b9      	str	r1, [r7, #8]
 8016ef8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d10d      	bne.n	8016f1c <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8016f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f04:	b672      	cpsid	i
 8016f06:	f383 8811 	msr	BASEPRI, r3
 8016f0a:	f3bf 8f6f 	isb	sy
 8016f0e:	f3bf 8f4f 	dsb	sy
 8016f12:	b662      	cpsie	i
 8016f14:	61bb      	str	r3, [r7, #24]
}
 8016f16:	bf00      	nop
 8016f18:	bf00      	nop
 8016f1a:	e7fd      	b.n	8016f18 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016f1c:	68ba      	ldr	r2, [r7, #8]
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	429a      	cmp	r2, r3
 8016f22:	d90d      	bls.n	8016f40 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8016f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f28:	b672      	cpsid	i
 8016f2a:	f383 8811 	msr	BASEPRI, r3
 8016f2e:	f3bf 8f6f 	isb	sy
 8016f32:	f3bf 8f4f 	dsb	sy
 8016f36:	b662      	cpsie	i
 8016f38:	617b      	str	r3, [r7, #20]
}
 8016f3a:	bf00      	nop
 8016f3c:	bf00      	nop
 8016f3e:	e7fd      	b.n	8016f3c <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016f40:	2302      	movs	r3, #2
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	2200      	movs	r2, #0
 8016f48:	2100      	movs	r1, #0
 8016f4a:	68f8      	ldr	r0, [r7, #12]
 8016f4c:	f7ff fee6 	bl	8016d1c <xQueueGenericCreateStatic>
 8016f50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016f52:	69fb      	ldr	r3, [r7, #28]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d002      	beq.n	8016f5e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	68ba      	ldr	r2, [r7, #8]
 8016f5c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016f5e:	69fb      	ldr	r3, [r7, #28]
	}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3720      	adds	r7, #32
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b086      	sub	sp, #24
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
 8016f70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d10d      	bne.n	8016f94 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8016f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f7c:	b672      	cpsid	i
 8016f7e:	f383 8811 	msr	BASEPRI, r3
 8016f82:	f3bf 8f6f 	isb	sy
 8016f86:	f3bf 8f4f 	dsb	sy
 8016f8a:	b662      	cpsie	i
 8016f8c:	613b      	str	r3, [r7, #16]
}
 8016f8e:	bf00      	nop
 8016f90:	bf00      	nop
 8016f92:	e7fd      	b.n	8016f90 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016f94:	683a      	ldr	r2, [r7, #0]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d90d      	bls.n	8016fb8 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8016f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fa0:	b672      	cpsid	i
 8016fa2:	f383 8811 	msr	BASEPRI, r3
 8016fa6:	f3bf 8f6f 	isb	sy
 8016faa:	f3bf 8f4f 	dsb	sy
 8016fae:	b662      	cpsie	i
 8016fb0:	60fb      	str	r3, [r7, #12]
}
 8016fb2:	bf00      	nop
 8016fb4:	bf00      	nop
 8016fb6:	e7fd      	b.n	8016fb4 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016fb8:	2202      	movs	r2, #2
 8016fba:	2100      	movs	r1, #0
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f7ff ff34 	bl	8016e2a <xQueueGenericCreate>
 8016fc2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d002      	beq.n	8016fd0 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016fca:	697b      	ldr	r3, [r7, #20]
 8016fcc:	683a      	ldr	r2, [r7, #0]
 8016fce:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016fd0:	697b      	ldr	r3, [r7, #20]
	}
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	3718      	adds	r7, #24
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
	...

08016fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b08e      	sub	sp, #56	@ 0x38
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
 8016fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016fea:	2300      	movs	r3, #0
 8016fec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d10d      	bne.n	8017014 <xQueueGenericSend+0x38>
	__asm volatile
 8016ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ffc:	b672      	cpsid	i
 8016ffe:	f383 8811 	msr	BASEPRI, r3
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	b662      	cpsie	i
 801700c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801700e:	bf00      	nop
 8017010:	bf00      	nop
 8017012:	e7fd      	b.n	8017010 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d103      	bne.n	8017022 <xQueueGenericSend+0x46>
 801701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801701e:	2b00      	cmp	r3, #0
 8017020:	d101      	bne.n	8017026 <xQueueGenericSend+0x4a>
 8017022:	2301      	movs	r3, #1
 8017024:	e000      	b.n	8017028 <xQueueGenericSend+0x4c>
 8017026:	2300      	movs	r3, #0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d10d      	bne.n	8017048 <xQueueGenericSend+0x6c>
	__asm volatile
 801702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017030:	b672      	cpsid	i
 8017032:	f383 8811 	msr	BASEPRI, r3
 8017036:	f3bf 8f6f 	isb	sy
 801703a:	f3bf 8f4f 	dsb	sy
 801703e:	b662      	cpsie	i
 8017040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8017042:	bf00      	nop
 8017044:	bf00      	nop
 8017046:	e7fd      	b.n	8017044 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017048:	683b      	ldr	r3, [r7, #0]
 801704a:	2b02      	cmp	r3, #2
 801704c:	d103      	bne.n	8017056 <xQueueGenericSend+0x7a>
 801704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017052:	2b01      	cmp	r3, #1
 8017054:	d101      	bne.n	801705a <xQueueGenericSend+0x7e>
 8017056:	2301      	movs	r3, #1
 8017058:	e000      	b.n	801705c <xQueueGenericSend+0x80>
 801705a:	2300      	movs	r3, #0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d10d      	bne.n	801707c <xQueueGenericSend+0xa0>
	__asm volatile
 8017060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017064:	b672      	cpsid	i
 8017066:	f383 8811 	msr	BASEPRI, r3
 801706a:	f3bf 8f6f 	isb	sy
 801706e:	f3bf 8f4f 	dsb	sy
 8017072:	b662      	cpsie	i
 8017074:	623b      	str	r3, [r7, #32]
}
 8017076:	bf00      	nop
 8017078:	bf00      	nop
 801707a:	e7fd      	b.n	8017078 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801707c:	f001 fc80 	bl	8018980 <xTaskGetSchedulerState>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d102      	bne.n	801708c <xQueueGenericSend+0xb0>
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d101      	bne.n	8017090 <xQueueGenericSend+0xb4>
 801708c:	2301      	movs	r3, #1
 801708e:	e000      	b.n	8017092 <xQueueGenericSend+0xb6>
 8017090:	2300      	movs	r3, #0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d10d      	bne.n	80170b2 <xQueueGenericSend+0xd6>
	__asm volatile
 8017096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801709a:	b672      	cpsid	i
 801709c:	f383 8811 	msr	BASEPRI, r3
 80170a0:	f3bf 8f6f 	isb	sy
 80170a4:	f3bf 8f4f 	dsb	sy
 80170a8:	b662      	cpsie	i
 80170aa:	61fb      	str	r3, [r7, #28]
}
 80170ac:	bf00      	nop
 80170ae:	bf00      	nop
 80170b0:	e7fd      	b.n	80170ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80170b2:	f001 ffbb 	bl	801902c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80170b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80170ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80170be:	429a      	cmp	r2, r3
 80170c0:	d302      	bcc.n	80170c8 <xQueueGenericSend+0xec>
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	2b02      	cmp	r3, #2
 80170c6:	d129      	bne.n	801711c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	68b9      	ldr	r1, [r7, #8]
 80170cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80170ce:	f000 fcd3 	bl	8017a78 <prvCopyDataToQueue>
 80170d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80170d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d010      	beq.n	80170fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80170dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170de:	3324      	adds	r3, #36	@ 0x24
 80170e0:	4618      	mov	r0, r3
 80170e2:	f001 fa83 	bl	80185ec <xTaskRemoveFromEventList>
 80170e6:	4603      	mov	r3, r0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d013      	beq.n	8017114 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80170ec:	4b3f      	ldr	r3, [pc, #252]	@ (80171ec <xQueueGenericSend+0x210>)
 80170ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170f2:	601a      	str	r2, [r3, #0]
 80170f4:	f3bf 8f4f 	dsb	sy
 80170f8:	f3bf 8f6f 	isb	sy
 80170fc:	e00a      	b.n	8017114 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80170fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017100:	2b00      	cmp	r3, #0
 8017102:	d007      	beq.n	8017114 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017104:	4b39      	ldr	r3, [pc, #228]	@ (80171ec <xQueueGenericSend+0x210>)
 8017106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801710a:	601a      	str	r2, [r3, #0]
 801710c:	f3bf 8f4f 	dsb	sy
 8017110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017114:	f001 ffc0 	bl	8019098 <vPortExitCritical>
				return pdPASS;
 8017118:	2301      	movs	r3, #1
 801711a:	e063      	b.n	80171e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d103      	bne.n	801712a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017122:	f001 ffb9 	bl	8019098 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017126:	2300      	movs	r3, #0
 8017128:	e05c      	b.n	80171e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801712a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801712c:	2b00      	cmp	r3, #0
 801712e:	d106      	bne.n	801713e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017130:	f107 0314 	add.w	r3, r7, #20
 8017134:	4618      	mov	r0, r3
 8017136:	f001 fabf 	bl	80186b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801713a:	2301      	movs	r3, #1
 801713c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801713e:	f001 ffab 	bl	8019098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017142:	f001 f81b 	bl	801817c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017146:	f001 ff71 	bl	801902c <vPortEnterCritical>
 801714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801714c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017150:	b25b      	sxtb	r3, r3
 8017152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017156:	d103      	bne.n	8017160 <xQueueGenericSend+0x184>
 8017158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801715a:	2200      	movs	r2, #0
 801715c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017166:	b25b      	sxtb	r3, r3
 8017168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801716c:	d103      	bne.n	8017176 <xQueueGenericSend+0x19a>
 801716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017170:	2200      	movs	r2, #0
 8017172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017176:	f001 ff8f 	bl	8019098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801717a:	1d3a      	adds	r2, r7, #4
 801717c:	f107 0314 	add.w	r3, r7, #20
 8017180:	4611      	mov	r1, r2
 8017182:	4618      	mov	r0, r3
 8017184:	f001 faae 	bl	80186e4 <xTaskCheckForTimeOut>
 8017188:	4603      	mov	r3, r0
 801718a:	2b00      	cmp	r3, #0
 801718c:	d124      	bne.n	80171d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801718e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017190:	f000 fd6a 	bl	8017c68 <prvIsQueueFull>
 8017194:	4603      	mov	r3, r0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d018      	beq.n	80171cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801719c:	3310      	adds	r3, #16
 801719e:	687a      	ldr	r2, [r7, #4]
 80171a0:	4611      	mov	r1, r2
 80171a2:	4618      	mov	r0, r3
 80171a4:	f001 f9fa 	bl	801859c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80171a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171aa:	f000 fcf5 	bl	8017b98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80171ae:	f000 fff3 	bl	8018198 <xTaskResumeAll>
 80171b2:	4603      	mov	r3, r0
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	f47f af7c 	bne.w	80170b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80171ba:	4b0c      	ldr	r3, [pc, #48]	@ (80171ec <xQueueGenericSend+0x210>)
 80171bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171c0:	601a      	str	r2, [r3, #0]
 80171c2:	f3bf 8f4f 	dsb	sy
 80171c6:	f3bf 8f6f 	isb	sy
 80171ca:	e772      	b.n	80170b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80171cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171ce:	f000 fce3 	bl	8017b98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80171d2:	f000 ffe1 	bl	8018198 <xTaskResumeAll>
 80171d6:	e76c      	b.n	80170b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80171d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171da:	f000 fcdd 	bl	8017b98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80171de:	f000 ffdb 	bl	8018198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80171e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	3738      	adds	r7, #56	@ 0x38
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	e000ed04 	.word	0xe000ed04

080171f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b08e      	sub	sp, #56	@ 0x38
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	60b9      	str	r1, [r7, #8]
 80171fa:	607a      	str	r2, [r7, #4]
 80171fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8017202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017204:	2b00      	cmp	r3, #0
 8017206:	d10d      	bne.n	8017224 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8017208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801720c:	b672      	cpsid	i
 801720e:	f383 8811 	msr	BASEPRI, r3
 8017212:	f3bf 8f6f 	isb	sy
 8017216:	f3bf 8f4f 	dsb	sy
 801721a:	b662      	cpsie	i
 801721c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801721e:	bf00      	nop
 8017220:	bf00      	nop
 8017222:	e7fd      	b.n	8017220 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017224:	68bb      	ldr	r3, [r7, #8]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d103      	bne.n	8017232 <xQueueGenericSendFromISR+0x42>
 801722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801722e:	2b00      	cmp	r3, #0
 8017230:	d101      	bne.n	8017236 <xQueueGenericSendFromISR+0x46>
 8017232:	2301      	movs	r3, #1
 8017234:	e000      	b.n	8017238 <xQueueGenericSendFromISR+0x48>
 8017236:	2300      	movs	r3, #0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d10d      	bne.n	8017258 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017240:	b672      	cpsid	i
 8017242:	f383 8811 	msr	BASEPRI, r3
 8017246:	f3bf 8f6f 	isb	sy
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	b662      	cpsie	i
 8017250:	623b      	str	r3, [r7, #32]
}
 8017252:	bf00      	nop
 8017254:	bf00      	nop
 8017256:	e7fd      	b.n	8017254 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	2b02      	cmp	r3, #2
 801725c:	d103      	bne.n	8017266 <xQueueGenericSendFromISR+0x76>
 801725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017262:	2b01      	cmp	r3, #1
 8017264:	d101      	bne.n	801726a <xQueueGenericSendFromISR+0x7a>
 8017266:	2301      	movs	r3, #1
 8017268:	e000      	b.n	801726c <xQueueGenericSendFromISR+0x7c>
 801726a:	2300      	movs	r3, #0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d10d      	bne.n	801728c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8017270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017274:	b672      	cpsid	i
 8017276:	f383 8811 	msr	BASEPRI, r3
 801727a:	f3bf 8f6f 	isb	sy
 801727e:	f3bf 8f4f 	dsb	sy
 8017282:	b662      	cpsie	i
 8017284:	61fb      	str	r3, [r7, #28]
}
 8017286:	bf00      	nop
 8017288:	bf00      	nop
 801728a:	e7fd      	b.n	8017288 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801728c:	f001 ffb6 	bl	80191fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017290:	f3ef 8211 	mrs	r2, BASEPRI
 8017294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017298:	b672      	cpsid	i
 801729a:	f383 8811 	msr	BASEPRI, r3
 801729e:	f3bf 8f6f 	isb	sy
 80172a2:	f3bf 8f4f 	dsb	sy
 80172a6:	b662      	cpsie	i
 80172a8:	61ba      	str	r2, [r7, #24]
 80172aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80172ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80172ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80172b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80172b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d302      	bcc.n	80172c2 <xQueueGenericSendFromISR+0xd2>
 80172bc:	683b      	ldr	r3, [r7, #0]
 80172be:	2b02      	cmp	r3, #2
 80172c0:	d12c      	bne.n	801731c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80172c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80172c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80172cc:	683a      	ldr	r2, [r7, #0]
 80172ce:	68b9      	ldr	r1, [r7, #8]
 80172d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80172d2:	f000 fbd1 	bl	8017a78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80172d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80172da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172de:	d112      	bne.n	8017306 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80172e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d016      	beq.n	8017316 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80172e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ea:	3324      	adds	r3, #36	@ 0x24
 80172ec:	4618      	mov	r0, r3
 80172ee:	f001 f97d 	bl	80185ec <xTaskRemoveFromEventList>
 80172f2:	4603      	mov	r3, r0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d00e      	beq.n	8017316 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d00b      	beq.n	8017316 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	2201      	movs	r2, #1
 8017302:	601a      	str	r2, [r3, #0]
 8017304:	e007      	b.n	8017316 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017306:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801730a:	3301      	adds	r3, #1
 801730c:	b2db      	uxtb	r3, r3
 801730e:	b25a      	sxtb	r2, r3
 8017310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8017316:	2301      	movs	r3, #1
 8017318:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801731a:	e001      	b.n	8017320 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801731c:	2300      	movs	r3, #0
 801731e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017322:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801732a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801732c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801732e:	4618      	mov	r0, r3
 8017330:	3738      	adds	r7, #56	@ 0x38
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}

08017336 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017336:	b580      	push	{r7, lr}
 8017338:	b08e      	sub	sp, #56	@ 0x38
 801733a:	af00      	add	r7, sp, #0
 801733c:	6078      	str	r0, [r7, #4]
 801733e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017346:	2b00      	cmp	r3, #0
 8017348:	d10d      	bne.n	8017366 <xQueueGiveFromISR+0x30>
	__asm volatile
 801734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801734e:	b672      	cpsid	i
 8017350:	f383 8811 	msr	BASEPRI, r3
 8017354:	f3bf 8f6f 	isb	sy
 8017358:	f3bf 8f4f 	dsb	sy
 801735c:	b662      	cpsie	i
 801735e:	623b      	str	r3, [r7, #32]
}
 8017360:	bf00      	nop
 8017362:	bf00      	nop
 8017364:	e7fd      	b.n	8017362 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801736a:	2b00      	cmp	r3, #0
 801736c:	d00d      	beq.n	801738a <xQueueGiveFromISR+0x54>
	__asm volatile
 801736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017372:	b672      	cpsid	i
 8017374:	f383 8811 	msr	BASEPRI, r3
 8017378:	f3bf 8f6f 	isb	sy
 801737c:	f3bf 8f4f 	dsb	sy
 8017380:	b662      	cpsie	i
 8017382:	61fb      	str	r3, [r7, #28]
}
 8017384:	bf00      	nop
 8017386:	bf00      	nop
 8017388:	e7fd      	b.n	8017386 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d103      	bne.n	801739a <xQueueGiveFromISR+0x64>
 8017392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017394:	689b      	ldr	r3, [r3, #8]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d101      	bne.n	801739e <xQueueGiveFromISR+0x68>
 801739a:	2301      	movs	r3, #1
 801739c:	e000      	b.n	80173a0 <xQueueGiveFromISR+0x6a>
 801739e:	2300      	movs	r3, #0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d10d      	bne.n	80173c0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80173a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a8:	b672      	cpsid	i
 80173aa:	f383 8811 	msr	BASEPRI, r3
 80173ae:	f3bf 8f6f 	isb	sy
 80173b2:	f3bf 8f4f 	dsb	sy
 80173b6:	b662      	cpsie	i
 80173b8:	61bb      	str	r3, [r7, #24]
}
 80173ba:	bf00      	nop
 80173bc:	bf00      	nop
 80173be:	e7fd      	b.n	80173bc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80173c0:	f001 ff1c 	bl	80191fc <vPortValidateInterruptPriority>
	__asm volatile
 80173c4:	f3ef 8211 	mrs	r2, BASEPRI
 80173c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173cc:	b672      	cpsid	i
 80173ce:	f383 8811 	msr	BASEPRI, r3
 80173d2:	f3bf 8f6f 	isb	sy
 80173d6:	f3bf 8f4f 	dsb	sy
 80173da:	b662      	cpsie	i
 80173dc:	617a      	str	r2, [r7, #20]
 80173de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80173e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80173e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80173e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173e8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80173ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80173ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80173f0:	429a      	cmp	r2, r3
 80173f2:	d22b      	bcs.n	801744c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80173f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80173fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80173fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017400:	1c5a      	adds	r2, r3, #1
 8017402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017404:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017406:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801740e:	d112      	bne.n	8017436 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017414:	2b00      	cmp	r3, #0
 8017416:	d016      	beq.n	8017446 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801741a:	3324      	adds	r3, #36	@ 0x24
 801741c:	4618      	mov	r0, r3
 801741e:	f001 f8e5 	bl	80185ec <xTaskRemoveFromEventList>
 8017422:	4603      	mov	r3, r0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d00e      	beq.n	8017446 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d00b      	beq.n	8017446 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	2201      	movs	r2, #1
 8017432:	601a      	str	r2, [r3, #0]
 8017434:	e007      	b.n	8017446 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801743a:	3301      	adds	r3, #1
 801743c:	b2db      	uxtb	r3, r3
 801743e:	b25a      	sxtb	r2, r3
 8017440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8017446:	2301      	movs	r3, #1
 8017448:	637b      	str	r3, [r7, #52]	@ 0x34
 801744a:	e001      	b.n	8017450 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801744c:	2300      	movs	r3, #0
 801744e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017452:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	f383 8811 	msr	BASEPRI, r3
}
 801745a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801745c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801745e:	4618      	mov	r0, r3
 8017460:	3738      	adds	r7, #56	@ 0x38
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
	...

08017468 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b08c      	sub	sp, #48	@ 0x30
 801746c:	af00      	add	r7, sp, #0
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017474:	2300      	movs	r3, #0
 8017476:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801747e:	2b00      	cmp	r3, #0
 8017480:	d10d      	bne.n	801749e <xQueueReceive+0x36>
	__asm volatile
 8017482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017486:	b672      	cpsid	i
 8017488:	f383 8811 	msr	BASEPRI, r3
 801748c:	f3bf 8f6f 	isb	sy
 8017490:	f3bf 8f4f 	dsb	sy
 8017494:	b662      	cpsie	i
 8017496:	623b      	str	r3, [r7, #32]
}
 8017498:	bf00      	nop
 801749a:	bf00      	nop
 801749c:	e7fd      	b.n	801749a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d103      	bne.n	80174ac <xQueueReceive+0x44>
 80174a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d101      	bne.n	80174b0 <xQueueReceive+0x48>
 80174ac:	2301      	movs	r3, #1
 80174ae:	e000      	b.n	80174b2 <xQueueReceive+0x4a>
 80174b0:	2300      	movs	r3, #0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d10d      	bne.n	80174d2 <xQueueReceive+0x6a>
	__asm volatile
 80174b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174ba:	b672      	cpsid	i
 80174bc:	f383 8811 	msr	BASEPRI, r3
 80174c0:	f3bf 8f6f 	isb	sy
 80174c4:	f3bf 8f4f 	dsb	sy
 80174c8:	b662      	cpsie	i
 80174ca:	61fb      	str	r3, [r7, #28]
}
 80174cc:	bf00      	nop
 80174ce:	bf00      	nop
 80174d0:	e7fd      	b.n	80174ce <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80174d2:	f001 fa55 	bl	8018980 <xTaskGetSchedulerState>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d102      	bne.n	80174e2 <xQueueReceive+0x7a>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d101      	bne.n	80174e6 <xQueueReceive+0x7e>
 80174e2:	2301      	movs	r3, #1
 80174e4:	e000      	b.n	80174e8 <xQueueReceive+0x80>
 80174e6:	2300      	movs	r3, #0
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d10d      	bne.n	8017508 <xQueueReceive+0xa0>
	__asm volatile
 80174ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174f0:	b672      	cpsid	i
 80174f2:	f383 8811 	msr	BASEPRI, r3
 80174f6:	f3bf 8f6f 	isb	sy
 80174fa:	f3bf 8f4f 	dsb	sy
 80174fe:	b662      	cpsie	i
 8017500:	61bb      	str	r3, [r7, #24]
}
 8017502:	bf00      	nop
 8017504:	bf00      	nop
 8017506:	e7fd      	b.n	8017504 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017508:	f001 fd90 	bl	801902c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801750e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017510:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017514:	2b00      	cmp	r3, #0
 8017516:	d01f      	beq.n	8017558 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017518:	68b9      	ldr	r1, [r7, #8]
 801751a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801751c:	f000 fb16 	bl	8017b4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017522:	1e5a      	subs	r2, r3, #1
 8017524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017526:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801752a:	691b      	ldr	r3, [r3, #16]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d00f      	beq.n	8017550 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017532:	3310      	adds	r3, #16
 8017534:	4618      	mov	r0, r3
 8017536:	f001 f859 	bl	80185ec <xTaskRemoveFromEventList>
 801753a:	4603      	mov	r3, r0
 801753c:	2b00      	cmp	r3, #0
 801753e:	d007      	beq.n	8017550 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017540:	4b3c      	ldr	r3, [pc, #240]	@ (8017634 <xQueueReceive+0x1cc>)
 8017542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017546:	601a      	str	r2, [r3, #0]
 8017548:	f3bf 8f4f 	dsb	sy
 801754c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017550:	f001 fda2 	bl	8019098 <vPortExitCritical>
				return pdPASS;
 8017554:	2301      	movs	r3, #1
 8017556:	e069      	b.n	801762c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d103      	bne.n	8017566 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801755e:	f001 fd9b 	bl	8019098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017562:	2300      	movs	r3, #0
 8017564:	e062      	b.n	801762c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017568:	2b00      	cmp	r3, #0
 801756a:	d106      	bne.n	801757a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801756c:	f107 0310 	add.w	r3, r7, #16
 8017570:	4618      	mov	r0, r3
 8017572:	f001 f8a1 	bl	80186b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017576:	2301      	movs	r3, #1
 8017578:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801757a:	f001 fd8d 	bl	8019098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801757e:	f000 fdfd 	bl	801817c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017582:	f001 fd53 	bl	801902c <vPortEnterCritical>
 8017586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801758c:	b25b      	sxtb	r3, r3
 801758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017592:	d103      	bne.n	801759c <xQueueReceive+0x134>
 8017594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017596:	2200      	movs	r2, #0
 8017598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801759c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801759e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80175a2:	b25b      	sxtb	r3, r3
 80175a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175a8:	d103      	bne.n	80175b2 <xQueueReceive+0x14a>
 80175aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175ac:	2200      	movs	r2, #0
 80175ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80175b2:	f001 fd71 	bl	8019098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80175b6:	1d3a      	adds	r2, r7, #4
 80175b8:	f107 0310 	add.w	r3, r7, #16
 80175bc:	4611      	mov	r1, r2
 80175be:	4618      	mov	r0, r3
 80175c0:	f001 f890 	bl	80186e4 <xTaskCheckForTimeOut>
 80175c4:	4603      	mov	r3, r0
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d123      	bne.n	8017612 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175cc:	f000 fb36 	bl	8017c3c <prvIsQueueEmpty>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d017      	beq.n	8017606 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80175d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175d8:	3324      	adds	r3, #36	@ 0x24
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	4611      	mov	r1, r2
 80175de:	4618      	mov	r0, r3
 80175e0:	f000 ffdc 	bl	801859c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80175e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175e6:	f000 fad7 	bl	8017b98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80175ea:	f000 fdd5 	bl	8018198 <xTaskResumeAll>
 80175ee:	4603      	mov	r3, r0
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d189      	bne.n	8017508 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80175f4:	4b0f      	ldr	r3, [pc, #60]	@ (8017634 <xQueueReceive+0x1cc>)
 80175f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80175fa:	601a      	str	r2, [r3, #0]
 80175fc:	f3bf 8f4f 	dsb	sy
 8017600:	f3bf 8f6f 	isb	sy
 8017604:	e780      	b.n	8017508 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017608:	f000 fac6 	bl	8017b98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801760c:	f000 fdc4 	bl	8018198 <xTaskResumeAll>
 8017610:	e77a      	b.n	8017508 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017614:	f000 fac0 	bl	8017b98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017618:	f000 fdbe 	bl	8018198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801761c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801761e:	f000 fb0d 	bl	8017c3c <prvIsQueueEmpty>
 8017622:	4603      	mov	r3, r0
 8017624:	2b00      	cmp	r3, #0
 8017626:	f43f af6f 	beq.w	8017508 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801762a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801762c:	4618      	mov	r0, r3
 801762e:	3730      	adds	r7, #48	@ 0x30
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}
 8017634:	e000ed04 	.word	0xe000ed04

08017638 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b08e      	sub	sp, #56	@ 0x38
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017642:	2300      	movs	r3, #0
 8017644:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801764a:	2300      	movs	r3, #0
 801764c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017650:	2b00      	cmp	r3, #0
 8017652:	d10d      	bne.n	8017670 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8017654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017658:	b672      	cpsid	i
 801765a:	f383 8811 	msr	BASEPRI, r3
 801765e:	f3bf 8f6f 	isb	sy
 8017662:	f3bf 8f4f 	dsb	sy
 8017666:	b662      	cpsie	i
 8017668:	623b      	str	r3, [r7, #32]
}
 801766a:	bf00      	nop
 801766c:	bf00      	nop
 801766e:	e7fd      	b.n	801766c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017674:	2b00      	cmp	r3, #0
 8017676:	d00d      	beq.n	8017694 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8017678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801767c:	b672      	cpsid	i
 801767e:	f383 8811 	msr	BASEPRI, r3
 8017682:	f3bf 8f6f 	isb	sy
 8017686:	f3bf 8f4f 	dsb	sy
 801768a:	b662      	cpsie	i
 801768c:	61fb      	str	r3, [r7, #28]
}
 801768e:	bf00      	nop
 8017690:	bf00      	nop
 8017692:	e7fd      	b.n	8017690 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017694:	f001 f974 	bl	8018980 <xTaskGetSchedulerState>
 8017698:	4603      	mov	r3, r0
 801769a:	2b00      	cmp	r3, #0
 801769c:	d102      	bne.n	80176a4 <xQueueSemaphoreTake+0x6c>
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d101      	bne.n	80176a8 <xQueueSemaphoreTake+0x70>
 80176a4:	2301      	movs	r3, #1
 80176a6:	e000      	b.n	80176aa <xQueueSemaphoreTake+0x72>
 80176a8:	2300      	movs	r3, #0
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d10d      	bne.n	80176ca <xQueueSemaphoreTake+0x92>
	__asm volatile
 80176ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176b2:	b672      	cpsid	i
 80176b4:	f383 8811 	msr	BASEPRI, r3
 80176b8:	f3bf 8f6f 	isb	sy
 80176bc:	f3bf 8f4f 	dsb	sy
 80176c0:	b662      	cpsie	i
 80176c2:	61bb      	str	r3, [r7, #24]
}
 80176c4:	bf00      	nop
 80176c6:	bf00      	nop
 80176c8:	e7fd      	b.n	80176c6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80176ca:	f001 fcaf 	bl	801902c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80176ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80176d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d024      	beq.n	8017724 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80176da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176dc:	1e5a      	subs	r2, r3, #1
 80176de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80176e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d104      	bne.n	80176f4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80176ea:	f001 fb13 	bl	8018d14 <pvTaskIncrementMutexHeldCount>
 80176ee:	4602      	mov	r2, r0
 80176f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176f6:	691b      	ldr	r3, [r3, #16]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00f      	beq.n	801771c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80176fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176fe:	3310      	adds	r3, #16
 8017700:	4618      	mov	r0, r3
 8017702:	f000 ff73 	bl	80185ec <xTaskRemoveFromEventList>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d007      	beq.n	801771c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801770c:	4b55      	ldr	r3, [pc, #340]	@ (8017864 <xQueueSemaphoreTake+0x22c>)
 801770e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017712:	601a      	str	r2, [r3, #0]
 8017714:	f3bf 8f4f 	dsb	sy
 8017718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801771c:	f001 fcbc 	bl	8019098 <vPortExitCritical>
				return pdPASS;
 8017720:	2301      	movs	r3, #1
 8017722:	e09a      	b.n	801785a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017724:	683b      	ldr	r3, [r7, #0]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d114      	bne.n	8017754 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801772c:	2b00      	cmp	r3, #0
 801772e:	d00d      	beq.n	801774c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8017730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017734:	b672      	cpsid	i
 8017736:	f383 8811 	msr	BASEPRI, r3
 801773a:	f3bf 8f6f 	isb	sy
 801773e:	f3bf 8f4f 	dsb	sy
 8017742:	b662      	cpsie	i
 8017744:	617b      	str	r3, [r7, #20]
}
 8017746:	bf00      	nop
 8017748:	bf00      	nop
 801774a:	e7fd      	b.n	8017748 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801774c:	f001 fca4 	bl	8019098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017750:	2300      	movs	r3, #0
 8017752:	e082      	b.n	801785a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017756:	2b00      	cmp	r3, #0
 8017758:	d106      	bne.n	8017768 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801775a:	f107 030c 	add.w	r3, r7, #12
 801775e:	4618      	mov	r0, r3
 8017760:	f000 ffaa 	bl	80186b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017764:	2301      	movs	r3, #1
 8017766:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017768:	f001 fc96 	bl	8019098 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801776c:	f000 fd06 	bl	801817c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017770:	f001 fc5c 	bl	801902c <vPortEnterCritical>
 8017774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801777a:	b25b      	sxtb	r3, r3
 801777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017780:	d103      	bne.n	801778a <xQueueSemaphoreTake+0x152>
 8017782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017784:	2200      	movs	r2, #0
 8017786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801778c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017790:	b25b      	sxtb	r3, r3
 8017792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017796:	d103      	bne.n	80177a0 <xQueueSemaphoreTake+0x168>
 8017798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801779a:	2200      	movs	r2, #0
 801779c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80177a0:	f001 fc7a 	bl	8019098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80177a4:	463a      	mov	r2, r7
 80177a6:	f107 030c 	add.w	r3, r7, #12
 80177aa:	4611      	mov	r1, r2
 80177ac:	4618      	mov	r0, r3
 80177ae:	f000 ff99 	bl	80186e4 <xTaskCheckForTimeOut>
 80177b2:	4603      	mov	r3, r0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d132      	bne.n	801781e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80177b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177ba:	f000 fa3f 	bl	8017c3c <prvIsQueueEmpty>
 80177be:	4603      	mov	r3, r0
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d026      	beq.n	8017812 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80177c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d109      	bne.n	80177e0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80177cc:	f001 fc2e 	bl	801902c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80177d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177d2:	689b      	ldr	r3, [r3, #8]
 80177d4:	4618      	mov	r0, r3
 80177d6:	f001 f8f1 	bl	80189bc <xTaskPriorityInherit>
 80177da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80177dc:	f001 fc5c 	bl	8019098 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80177e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177e2:	3324      	adds	r3, #36	@ 0x24
 80177e4:	683a      	ldr	r2, [r7, #0]
 80177e6:	4611      	mov	r1, r2
 80177e8:	4618      	mov	r0, r3
 80177ea:	f000 fed7 	bl	801859c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80177ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177f0:	f000 f9d2 	bl	8017b98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80177f4:	f000 fcd0 	bl	8018198 <xTaskResumeAll>
 80177f8:	4603      	mov	r3, r0
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	f47f af65 	bne.w	80176ca <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8017800:	4b18      	ldr	r3, [pc, #96]	@ (8017864 <xQueueSemaphoreTake+0x22c>)
 8017802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017806:	601a      	str	r2, [r3, #0]
 8017808:	f3bf 8f4f 	dsb	sy
 801780c:	f3bf 8f6f 	isb	sy
 8017810:	e75b      	b.n	80176ca <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017814:	f000 f9c0 	bl	8017b98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017818:	f000 fcbe 	bl	8018198 <xTaskResumeAll>
 801781c:	e755      	b.n	80176ca <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801781e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017820:	f000 f9ba 	bl	8017b98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017824:	f000 fcb8 	bl	8018198 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801782a:	f000 fa07 	bl	8017c3c <prvIsQueueEmpty>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	f43f af4a 	beq.w	80176ca <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017838:	2b00      	cmp	r3, #0
 801783a:	d00d      	beq.n	8017858 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 801783c:	f001 fbf6 	bl	801902c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017840:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017842:	f000 f901 	bl	8017a48 <prvGetDisinheritPriorityAfterTimeout>
 8017846:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801784a:	689b      	ldr	r3, [r3, #8]
 801784c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801784e:	4618      	mov	r0, r3
 8017850:	f001 f9c0 	bl	8018bd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017854:	f001 fc20 	bl	8019098 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801785a:	4618      	mov	r0, r3
 801785c:	3738      	adds	r7, #56	@ 0x38
 801785e:	46bd      	mov	sp, r7
 8017860:	bd80      	pop	{r7, pc}
 8017862:	bf00      	nop
 8017864:	e000ed04 	.word	0xe000ed04

08017868 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b08e      	sub	sp, #56	@ 0x38
 801786c:	af00      	add	r7, sp, #0
 801786e:	60f8      	str	r0, [r7, #12]
 8017870:	60b9      	str	r1, [r7, #8]
 8017872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8017878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801787a:	2b00      	cmp	r3, #0
 801787c:	d10d      	bne.n	801789a <xQueueReceiveFromISR+0x32>
	__asm volatile
 801787e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017882:	b672      	cpsid	i
 8017884:	f383 8811 	msr	BASEPRI, r3
 8017888:	f3bf 8f6f 	isb	sy
 801788c:	f3bf 8f4f 	dsb	sy
 8017890:	b662      	cpsie	i
 8017892:	623b      	str	r3, [r7, #32]
}
 8017894:	bf00      	nop
 8017896:	bf00      	nop
 8017898:	e7fd      	b.n	8017896 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801789a:	68bb      	ldr	r3, [r7, #8]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d103      	bne.n	80178a8 <xQueueReceiveFromISR+0x40>
 80178a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d101      	bne.n	80178ac <xQueueReceiveFromISR+0x44>
 80178a8:	2301      	movs	r3, #1
 80178aa:	e000      	b.n	80178ae <xQueueReceiveFromISR+0x46>
 80178ac:	2300      	movs	r3, #0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d10d      	bne.n	80178ce <xQueueReceiveFromISR+0x66>
	__asm volatile
 80178b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178b6:	b672      	cpsid	i
 80178b8:	f383 8811 	msr	BASEPRI, r3
 80178bc:	f3bf 8f6f 	isb	sy
 80178c0:	f3bf 8f4f 	dsb	sy
 80178c4:	b662      	cpsie	i
 80178c6:	61fb      	str	r3, [r7, #28]
}
 80178c8:	bf00      	nop
 80178ca:	bf00      	nop
 80178cc:	e7fd      	b.n	80178ca <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80178ce:	f001 fc95 	bl	80191fc <vPortValidateInterruptPriority>
	__asm volatile
 80178d2:	f3ef 8211 	mrs	r2, BASEPRI
 80178d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178da:	b672      	cpsid	i
 80178dc:	f383 8811 	msr	BASEPRI, r3
 80178e0:	f3bf 8f6f 	isb	sy
 80178e4:	f3bf 8f4f 	dsb	sy
 80178e8:	b662      	cpsie	i
 80178ea:	61ba      	str	r2, [r7, #24]
 80178ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80178ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80178f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80178f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80178f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d02f      	beq.n	801795e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80178fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017908:	68b9      	ldr	r1, [r7, #8]
 801790a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801790c:	f000 f91e 	bl	8017b4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017912:	1e5a      	subs	r2, r3, #1
 8017914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017916:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017918:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017920:	d112      	bne.n	8017948 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017924:	691b      	ldr	r3, [r3, #16]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d016      	beq.n	8017958 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801792c:	3310      	adds	r3, #16
 801792e:	4618      	mov	r0, r3
 8017930:	f000 fe5c 	bl	80185ec <xTaskRemoveFromEventList>
 8017934:	4603      	mov	r3, r0
 8017936:	2b00      	cmp	r3, #0
 8017938:	d00e      	beq.n	8017958 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d00b      	beq.n	8017958 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2201      	movs	r2, #1
 8017944:	601a      	str	r2, [r3, #0]
 8017946:	e007      	b.n	8017958 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801794c:	3301      	adds	r3, #1
 801794e:	b2db      	uxtb	r3, r3
 8017950:	b25a      	sxtb	r2, r3
 8017952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8017958:	2301      	movs	r3, #1
 801795a:	637b      	str	r3, [r7, #52]	@ 0x34
 801795c:	e001      	b.n	8017962 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801795e:	2300      	movs	r3, #0
 8017960:	637b      	str	r3, [r7, #52]	@ 0x34
 8017962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017964:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017966:	693b      	ldr	r3, [r7, #16]
 8017968:	f383 8811 	msr	BASEPRI, r3
}
 801796c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801796e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8017970:	4618      	mov	r0, r3
 8017972:	3738      	adds	r7, #56	@ 0x38
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b084      	sub	sp, #16
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d10d      	bne.n	80179a2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8017986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801798a:	b672      	cpsid	i
 801798c:	f383 8811 	msr	BASEPRI, r3
 8017990:	f3bf 8f6f 	isb	sy
 8017994:	f3bf 8f4f 	dsb	sy
 8017998:	b662      	cpsie	i
 801799a:	60bb      	str	r3, [r7, #8]
}
 801799c:	bf00      	nop
 801799e:	bf00      	nop
 80179a0:	e7fd      	b.n	801799e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80179a2:	f001 fb43 	bl	801902c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179aa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80179ac:	f001 fb74 	bl	8019098 <vPortExitCritical>

	return uxReturn;
 80179b0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80179b2:	4618      	mov	r0, r3
 80179b4:	3710      	adds	r7, #16
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}

080179ba <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80179ba:	b480      	push	{r7}
 80179bc:	b087      	sub	sp, #28
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d10d      	bne.n	80179e8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80179cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80179d0:	b672      	cpsid	i
 80179d2:	f383 8811 	msr	BASEPRI, r3
 80179d6:	f3bf 8f6f 	isb	sy
 80179da:	f3bf 8f4f 	dsb	sy
 80179de:	b662      	cpsie	i
 80179e0:	60fb      	str	r3, [r7, #12]
}
 80179e2:	bf00      	nop
 80179e4:	bf00      	nop
 80179e6:	e7fd      	b.n	80179e4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80179ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80179f0:	4618      	mov	r0, r3
 80179f2:	371c      	adds	r7, #28
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr

080179fc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b084      	sub	sp, #16
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d10d      	bne.n	8017a2a <vQueueDelete+0x2e>
	__asm volatile
 8017a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017a12:	b672      	cpsid	i
 8017a14:	f383 8811 	msr	BASEPRI, r3
 8017a18:	f3bf 8f6f 	isb	sy
 8017a1c:	f3bf 8f4f 	dsb	sy
 8017a20:	b662      	cpsie	i
 8017a22:	60bb      	str	r3, [r7, #8]
}
 8017a24:	bf00      	nop
 8017a26:	bf00      	nop
 8017a28:	e7fd      	b.n	8017a26 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017a2a:	68f8      	ldr	r0, [r7, #12]
 8017a2c:	f000 f934 	bl	8017c98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d102      	bne.n	8017a40 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8017a3a:	68f8      	ldr	r0, [r7, #12]
 8017a3c:	f001 fcf6 	bl	801942c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017a40:	bf00      	nop
 8017a42:	3710      	adds	r7, #16
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}

08017a48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017a48:	b480      	push	{r7}
 8017a4a:	b085      	sub	sp, #20
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d006      	beq.n	8017a66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	f1c3 0307 	rsb	r3, r3, #7
 8017a62:	60fb      	str	r3, [r7, #12]
 8017a64:	e001      	b.n	8017a6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017a66:	2300      	movs	r3, #0
 8017a68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
	}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3714      	adds	r7, #20
 8017a70:	46bd      	mov	sp, r7
 8017a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a76:	4770      	bx	lr

08017a78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b086      	sub	sp, #24
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	60f8      	str	r0, [r7, #12]
 8017a80:	60b9      	str	r1, [r7, #8]
 8017a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017a84:	2300      	movs	r3, #0
 8017a86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d10d      	bne.n	8017ab2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d14d      	bne.n	8017b3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	689b      	ldr	r3, [r3, #8]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f001 f80a 	bl	8018abc <xTaskPriorityDisinherit>
 8017aa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	2200      	movs	r2, #0
 8017aae:	609a      	str	r2, [r3, #8]
 8017ab0:	e043      	b.n	8017b3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d119      	bne.n	8017aec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	6858      	ldr	r0, [r3, #4]
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	68b9      	ldr	r1, [r7, #8]
 8017ac4:	f002 fa86 	bl	8019fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	685a      	ldr	r2, [r3, #4]
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017ad0:	441a      	add	r2, r3
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	685a      	ldr	r2, [r3, #4]
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	689b      	ldr	r3, [r3, #8]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d32b      	bcc.n	8017b3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	681a      	ldr	r2, [r3, #0]
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	605a      	str	r2, [r3, #4]
 8017aea:	e026      	b.n	8017b3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	68d8      	ldr	r0, [r3, #12]
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017af4:	461a      	mov	r2, r3
 8017af6:	68b9      	ldr	r1, [r7, #8]
 8017af8:	f002 fa6c 	bl	8019fd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	68da      	ldr	r2, [r3, #12]
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b04:	425b      	negs	r3, r3
 8017b06:	441a      	add	r2, r3
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	68da      	ldr	r2, [r3, #12]
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	429a      	cmp	r2, r3
 8017b16:	d207      	bcs.n	8017b28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	689a      	ldr	r2, [r3, #8]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b20:	425b      	negs	r3, r3
 8017b22:	441a      	add	r2, r3
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	2b02      	cmp	r3, #2
 8017b2c:	d105      	bne.n	8017b3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d002      	beq.n	8017b3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	3b01      	subs	r3, #1
 8017b38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b3a:	693b      	ldr	r3, [r7, #16]
 8017b3c:	1c5a      	adds	r2, r3, #1
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017b42:	697b      	ldr	r3, [r7, #20]
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3718      	adds	r7, #24
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}

08017b4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d018      	beq.n	8017b90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	68da      	ldr	r2, [r3, #12]
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b66:	441a      	add	r2, r3
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	68da      	ldr	r2, [r3, #12]
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	689b      	ldr	r3, [r3, #8]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d303      	bcc.n	8017b80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	681a      	ldr	r2, [r3, #0]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	68d9      	ldr	r1, [r3, #12]
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b88:	461a      	mov	r2, r3
 8017b8a:	6838      	ldr	r0, [r7, #0]
 8017b8c:	f002 fa22 	bl	8019fd4 <memcpy>
	}
}
 8017b90:	bf00      	nop
 8017b92:	3708      	adds	r7, #8
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b084      	sub	sp, #16
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017ba0:	f001 fa44 	bl	801902c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017baa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bac:	e011      	b.n	8017bd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d012      	beq.n	8017bdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	3324      	adds	r3, #36	@ 0x24
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f000 fd16 	bl	80185ec <xTaskRemoveFromEventList>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d001      	beq.n	8017bca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017bc6:	f000 fdf5 	bl	80187b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017bca:	7bfb      	ldrb	r3, [r7, #15]
 8017bcc:	3b01      	subs	r3, #1
 8017bce:	b2db      	uxtb	r3, r3
 8017bd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	dce9      	bgt.n	8017bae <prvUnlockQueue+0x16>
 8017bda:	e000      	b.n	8017bde <prvUnlockQueue+0x46>
					break;
 8017bdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	22ff      	movs	r2, #255	@ 0xff
 8017be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017be6:	f001 fa57 	bl	8019098 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017bea:	f001 fa1f 	bl	801902c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017bf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017bf6:	e011      	b.n	8017c1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	691b      	ldr	r3, [r3, #16]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d012      	beq.n	8017c26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	3310      	adds	r3, #16
 8017c04:	4618      	mov	r0, r3
 8017c06:	f000 fcf1 	bl	80185ec <xTaskRemoveFromEventList>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d001      	beq.n	8017c14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c10:	f000 fdd0 	bl	80187b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c14:	7bbb      	ldrb	r3, [r7, #14]
 8017c16:	3b01      	subs	r3, #1
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	dce9      	bgt.n	8017bf8 <prvUnlockQueue+0x60>
 8017c24:	e000      	b.n	8017c28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	22ff      	movs	r2, #255	@ 0xff
 8017c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017c30:	f001 fa32 	bl	8019098 <vPortExitCritical>
}
 8017c34:	bf00      	nop
 8017c36:	3710      	adds	r7, #16
 8017c38:	46bd      	mov	sp, r7
 8017c3a:	bd80      	pop	{r7, pc}

08017c3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b084      	sub	sp, #16
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c44:	f001 f9f2 	bl	801902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d102      	bne.n	8017c56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017c50:	2301      	movs	r3, #1
 8017c52:	60fb      	str	r3, [r7, #12]
 8017c54:	e001      	b.n	8017c5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017c56:	2300      	movs	r3, #0
 8017c58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c5a:	f001 fa1d 	bl	8019098 <vPortExitCritical>

	return xReturn;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	3710      	adds	r7, #16
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}

08017c68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b084      	sub	sp, #16
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c70:	f001 f9dc 	bl	801902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	d102      	bne.n	8017c86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017c80:	2301      	movs	r3, #1
 8017c82:	60fb      	str	r3, [r7, #12]
 8017c84:	e001      	b.n	8017c8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017c86:	2300      	movs	r3, #0
 8017c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c8a:	f001 fa05 	bl	8019098 <vPortExitCritical>

	return xReturn;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3710      	adds	r7, #16
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}

08017c98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017c98:	b480      	push	{r7}
 8017c9a:	b085      	sub	sp, #20
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	60fb      	str	r3, [r7, #12]
 8017ca4:	e016      	b.n	8017cd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017ca6:	4a10      	ldr	r2, [pc, #64]	@ (8017ce8 <vQueueUnregisterQueue+0x50>)
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	00db      	lsls	r3, r3, #3
 8017cac:	4413      	add	r3, r2
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	429a      	cmp	r2, r3
 8017cb4:	d10b      	bne.n	8017cce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8017ce8 <vQueueUnregisterQueue+0x50>)
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2100      	movs	r1, #0
 8017cbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017cc0:	4a09      	ldr	r2, [pc, #36]	@ (8017ce8 <vQueueUnregisterQueue+0x50>)
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	00db      	lsls	r3, r3, #3
 8017cc6:	4413      	add	r3, r2
 8017cc8:	2200      	movs	r2, #0
 8017cca:	605a      	str	r2, [r3, #4]
				break;
 8017ccc:	e006      	b.n	8017cdc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	3301      	adds	r3, #1
 8017cd2:	60fb      	str	r3, [r7, #12]
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	2b07      	cmp	r3, #7
 8017cd8:	d9e5      	bls.n	8017ca6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017cda:	bf00      	nop
 8017cdc:	bf00      	nop
 8017cde:	3714      	adds	r7, #20
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce6:	4770      	bx	lr
 8017ce8:	200017f8 	.word	0x200017f8

08017cec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b08e      	sub	sp, #56	@ 0x38
 8017cf0:	af04      	add	r7, sp, #16
 8017cf2:	60f8      	str	r0, [r7, #12]
 8017cf4:	60b9      	str	r1, [r7, #8]
 8017cf6:	607a      	str	r2, [r7, #4]
 8017cf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d10d      	bne.n	8017d1c <xTaskCreateStatic+0x30>
	__asm volatile
 8017d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d04:	b672      	cpsid	i
 8017d06:	f383 8811 	msr	BASEPRI, r3
 8017d0a:	f3bf 8f6f 	isb	sy
 8017d0e:	f3bf 8f4f 	dsb	sy
 8017d12:	b662      	cpsie	i
 8017d14:	623b      	str	r3, [r7, #32]
}
 8017d16:	bf00      	nop
 8017d18:	bf00      	nop
 8017d1a:	e7fd      	b.n	8017d18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d10d      	bne.n	8017d3e <xTaskCreateStatic+0x52>
	__asm volatile
 8017d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d26:	b672      	cpsid	i
 8017d28:	f383 8811 	msr	BASEPRI, r3
 8017d2c:	f3bf 8f6f 	isb	sy
 8017d30:	f3bf 8f4f 	dsb	sy
 8017d34:	b662      	cpsie	i
 8017d36:	61fb      	str	r3, [r7, #28]
}
 8017d38:	bf00      	nop
 8017d3a:	bf00      	nop
 8017d3c:	e7fd      	b.n	8017d3a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017d3e:	2358      	movs	r3, #88	@ 0x58
 8017d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	2b58      	cmp	r3, #88	@ 0x58
 8017d46:	d00d      	beq.n	8017d64 <xTaskCreateStatic+0x78>
	__asm volatile
 8017d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d4c:	b672      	cpsid	i
 8017d4e:	f383 8811 	msr	BASEPRI, r3
 8017d52:	f3bf 8f6f 	isb	sy
 8017d56:	f3bf 8f4f 	dsb	sy
 8017d5a:	b662      	cpsie	i
 8017d5c:	61bb      	str	r3, [r7, #24]
}
 8017d5e:	bf00      	nop
 8017d60:	bf00      	nop
 8017d62:	e7fd      	b.n	8017d60 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017d64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d01e      	beq.n	8017daa <xTaskCreateStatic+0xbe>
 8017d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d01b      	beq.n	8017daa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017d7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d7e:	2202      	movs	r2, #2
 8017d80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017d84:	2300      	movs	r3, #0
 8017d86:	9303      	str	r3, [sp, #12]
 8017d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d8a:	9302      	str	r3, [sp, #8]
 8017d8c:	f107 0314 	add.w	r3, r7, #20
 8017d90:	9301      	str	r3, [sp, #4]
 8017d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d94:	9300      	str	r3, [sp, #0]
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	687a      	ldr	r2, [r7, #4]
 8017d9a:	68b9      	ldr	r1, [r7, #8]
 8017d9c:	68f8      	ldr	r0, [r7, #12]
 8017d9e:	f000 f850 	bl	8017e42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017da2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017da4:	f000 f8e2 	bl	8017f6c <prvAddNewTaskToReadyList>
 8017da8:	e001      	b.n	8017dae <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8017daa:	2300      	movs	r3, #0
 8017dac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017dae:	697b      	ldr	r3, [r7, #20]
	}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3728      	adds	r7, #40	@ 0x28
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}

08017db8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b08c      	sub	sp, #48	@ 0x30
 8017dbc:	af04      	add	r7, sp, #16
 8017dbe:	60f8      	str	r0, [r7, #12]
 8017dc0:	60b9      	str	r1, [r7, #8]
 8017dc2:	603b      	str	r3, [r7, #0]
 8017dc4:	4613      	mov	r3, r2
 8017dc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017dc8:	88fb      	ldrh	r3, [r7, #6]
 8017dca:	009b      	lsls	r3, r3, #2
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f001 fa5b 	bl	8019288 <pvPortMalloc>
 8017dd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017dd4:	697b      	ldr	r3, [r7, #20]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d00e      	beq.n	8017df8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017dda:	2058      	movs	r0, #88	@ 0x58
 8017ddc:	f001 fa54 	bl	8019288 <pvPortMalloc>
 8017de0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d003      	beq.n	8017df0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017de8:	69fb      	ldr	r3, [r7, #28]
 8017dea:	697a      	ldr	r2, [r7, #20]
 8017dec:	631a      	str	r2, [r3, #48]	@ 0x30
 8017dee:	e005      	b.n	8017dfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017df0:	6978      	ldr	r0, [r7, #20]
 8017df2:	f001 fb1b 	bl	801942c <vPortFree>
 8017df6:	e001      	b.n	8017dfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017df8:	2300      	movs	r3, #0
 8017dfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017dfc:	69fb      	ldr	r3, [r7, #28]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d017      	beq.n	8017e32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017e02:	69fb      	ldr	r3, [r7, #28]
 8017e04:	2200      	movs	r2, #0
 8017e06:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017e0a:	88fa      	ldrh	r2, [r7, #6]
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	9303      	str	r3, [sp, #12]
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	9302      	str	r3, [sp, #8]
 8017e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e16:	9301      	str	r3, [sp, #4]
 8017e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e1a:	9300      	str	r3, [sp, #0]
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	68b9      	ldr	r1, [r7, #8]
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	f000 f80e 	bl	8017e42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e26:	69f8      	ldr	r0, [r7, #28]
 8017e28:	f000 f8a0 	bl	8017f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	61bb      	str	r3, [r7, #24]
 8017e30:	e002      	b.n	8017e38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017e32:	f04f 33ff 	mov.w	r3, #4294967295
 8017e36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017e38:	69bb      	ldr	r3, [r7, #24]
	}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	3720      	adds	r7, #32
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}

08017e42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017e42:	b580      	push	{r7, lr}
 8017e44:	b088      	sub	sp, #32
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	60f8      	str	r0, [r7, #12]
 8017e4a:	60b9      	str	r1, [r7, #8]
 8017e4c:	607a      	str	r2, [r7, #4]
 8017e4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	009b      	lsls	r3, r3, #2
 8017e58:	461a      	mov	r2, r3
 8017e5a:	21a5      	movs	r1, #165	@ 0xa5
 8017e5c:	f002 f84c 	bl	8019ef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017e64:	6879      	ldr	r1, [r7, #4]
 8017e66:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017e6a:	440b      	add	r3, r1
 8017e6c:	009b      	lsls	r3, r3, #2
 8017e6e:	4413      	add	r3, r2
 8017e70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017e72:	69bb      	ldr	r3, [r7, #24]
 8017e74:	f023 0307 	bic.w	r3, r3, #7
 8017e78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017e7a:	69bb      	ldr	r3, [r7, #24]
 8017e7c:	f003 0307 	and.w	r3, r3, #7
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d00d      	beq.n	8017ea0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8017e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017e88:	b672      	cpsid	i
 8017e8a:	f383 8811 	msr	BASEPRI, r3
 8017e8e:	f3bf 8f6f 	isb	sy
 8017e92:	f3bf 8f4f 	dsb	sy
 8017e96:	b662      	cpsie	i
 8017e98:	617b      	str	r3, [r7, #20]
}
 8017e9a:	bf00      	nop
 8017e9c:	bf00      	nop
 8017e9e:	e7fd      	b.n	8017e9c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d01f      	beq.n	8017ee6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	61fb      	str	r3, [r7, #28]
 8017eaa:	e012      	b.n	8017ed2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017eac:	68ba      	ldr	r2, [r7, #8]
 8017eae:	69fb      	ldr	r3, [r7, #28]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	7819      	ldrb	r1, [r3, #0]
 8017eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017eb6:	69fb      	ldr	r3, [r7, #28]
 8017eb8:	4413      	add	r3, r2
 8017eba:	3334      	adds	r3, #52	@ 0x34
 8017ebc:	460a      	mov	r2, r1
 8017ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017ec0:	68ba      	ldr	r2, [r7, #8]
 8017ec2:	69fb      	ldr	r3, [r7, #28]
 8017ec4:	4413      	add	r3, r2
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d006      	beq.n	8017eda <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ecc:	69fb      	ldr	r3, [r7, #28]
 8017ece:	3301      	adds	r3, #1
 8017ed0:	61fb      	str	r3, [r7, #28]
 8017ed2:	69fb      	ldr	r3, [r7, #28]
 8017ed4:	2b0f      	cmp	r3, #15
 8017ed6:	d9e9      	bls.n	8017eac <prvInitialiseNewTask+0x6a>
 8017ed8:	e000      	b.n	8017edc <prvInitialiseNewTask+0x9a>
			{
				break;
 8017eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ede:	2200      	movs	r2, #0
 8017ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017ee4:	e003      	b.n	8017eee <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ee8:	2200      	movs	r2, #0
 8017eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef0:	2b06      	cmp	r3, #6
 8017ef2:	d901      	bls.n	8017ef8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017ef4:	2306      	movs	r3, #6
 8017ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017efc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f02:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f06:	2200      	movs	r2, #0
 8017f08:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f0c:	3304      	adds	r3, #4
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f7fe fe04 	bl	8016b1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f16:	3318      	adds	r3, #24
 8017f18:	4618      	mov	r0, r3
 8017f1a:	f7fe fdff 	bl	8016b1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f26:	f1c3 0207 	rsb	r2, r3, #7
 8017f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f36:	2200      	movs	r2, #0
 8017f38:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f42:	2200      	movs	r2, #0
 8017f44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017f48:	683a      	ldr	r2, [r7, #0]
 8017f4a:	68f9      	ldr	r1, [r7, #12]
 8017f4c:	69b8      	ldr	r0, [r7, #24]
 8017f4e:	f000 ff5b 	bl	8018e08 <pxPortInitialiseStack>
 8017f52:	4602      	mov	r2, r0
 8017f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d002      	beq.n	8017f64 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f64:	bf00      	nop
 8017f66:	3720      	adds	r7, #32
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b082      	sub	sp, #8
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017f74:	f001 f85a 	bl	801902c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017f78:	4b2a      	ldr	r3, [pc, #168]	@ (8018024 <prvAddNewTaskToReadyList+0xb8>)
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	3301      	adds	r3, #1
 8017f7e:	4a29      	ldr	r2, [pc, #164]	@ (8018024 <prvAddNewTaskToReadyList+0xb8>)
 8017f80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017f82:	4b29      	ldr	r3, [pc, #164]	@ (8018028 <prvAddNewTaskToReadyList+0xbc>)
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d109      	bne.n	8017f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017f8a:	4a27      	ldr	r2, [pc, #156]	@ (8018028 <prvAddNewTaskToReadyList+0xbc>)
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017f90:	4b24      	ldr	r3, [pc, #144]	@ (8018024 <prvAddNewTaskToReadyList+0xb8>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d110      	bne.n	8017fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017f98:	f000 fc32 	bl	8018800 <prvInitialiseTaskLists>
 8017f9c:	e00d      	b.n	8017fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017f9e:	4b23      	ldr	r3, [pc, #140]	@ (801802c <prvAddNewTaskToReadyList+0xc0>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d109      	bne.n	8017fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017fa6:	4b20      	ldr	r3, [pc, #128]	@ (8018028 <prvAddNewTaskToReadyList+0xbc>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d802      	bhi.n	8017fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8018028 <prvAddNewTaskToReadyList+0xbc>)
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017fba:	4b1d      	ldr	r3, [pc, #116]	@ (8018030 <prvAddNewTaskToReadyList+0xc4>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8018030 <prvAddNewTaskToReadyList+0xc4>)
 8017fc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fc8:	2201      	movs	r2, #1
 8017fca:	409a      	lsls	r2, r3
 8017fcc:	4b19      	ldr	r3, [pc, #100]	@ (8018034 <prvAddNewTaskToReadyList+0xc8>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4313      	orrs	r3, r2
 8017fd2:	4a18      	ldr	r2, [pc, #96]	@ (8018034 <prvAddNewTaskToReadyList+0xc8>)
 8017fd4:	6013      	str	r3, [r2, #0]
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017fda:	4613      	mov	r3, r2
 8017fdc:	009b      	lsls	r3, r3, #2
 8017fde:	4413      	add	r3, r2
 8017fe0:	009b      	lsls	r3, r3, #2
 8017fe2:	4a15      	ldr	r2, [pc, #84]	@ (8018038 <prvAddNewTaskToReadyList+0xcc>)
 8017fe4:	441a      	add	r2, r3
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	3304      	adds	r3, #4
 8017fea:	4619      	mov	r1, r3
 8017fec:	4610      	mov	r0, r2
 8017fee:	f7fe fda2 	bl	8016b36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017ff2:	f001 f851 	bl	8019098 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017ff6:	4b0d      	ldr	r3, [pc, #52]	@ (801802c <prvAddNewTaskToReadyList+0xc0>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d00e      	beq.n	801801c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8018028 <prvAddNewTaskToReadyList+0xbc>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018008:	429a      	cmp	r2, r3
 801800a:	d207      	bcs.n	801801c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801800c:	4b0b      	ldr	r3, [pc, #44]	@ (801803c <prvAddNewTaskToReadyList+0xd0>)
 801800e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018012:	601a      	str	r2, [r3, #0]
 8018014:	f3bf 8f4f 	dsb	sy
 8018018:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801801c:	bf00      	nop
 801801e:	3708      	adds	r7, #8
 8018020:	46bd      	mov	sp, r7
 8018022:	bd80      	pop	{r7, pc}
 8018024:	20001938 	.word	0x20001938
 8018028:	20001838 	.word	0x20001838
 801802c:	20001944 	.word	0x20001944
 8018030:	20001954 	.word	0x20001954
 8018034:	20001940 	.word	0x20001940
 8018038:	2000183c 	.word	0x2000183c
 801803c:	e000ed04 	.word	0xe000ed04

08018040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018040:	b580      	push	{r7, lr}
 8018042:	b084      	sub	sp, #16
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018048:	2300      	movs	r3, #0
 801804a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d01a      	beq.n	8018088 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018052:	4b15      	ldr	r3, [pc, #84]	@ (80180a8 <vTaskDelay+0x68>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d00d      	beq.n	8018076 <vTaskDelay+0x36>
	__asm volatile
 801805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801805e:	b672      	cpsid	i
 8018060:	f383 8811 	msr	BASEPRI, r3
 8018064:	f3bf 8f6f 	isb	sy
 8018068:	f3bf 8f4f 	dsb	sy
 801806c:	b662      	cpsie	i
 801806e:	60bb      	str	r3, [r7, #8]
}
 8018070:	bf00      	nop
 8018072:	bf00      	nop
 8018074:	e7fd      	b.n	8018072 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8018076:	f000 f881 	bl	801817c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801807a:	2100      	movs	r1, #0
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f000 fe5d 	bl	8018d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018082:	f000 f889 	bl	8018198 <xTaskResumeAll>
 8018086:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d107      	bne.n	801809e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801808e:	4b07      	ldr	r3, [pc, #28]	@ (80180ac <vTaskDelay+0x6c>)
 8018090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018094:	601a      	str	r2, [r3, #0]
 8018096:	f3bf 8f4f 	dsb	sy
 801809a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801809e:	bf00      	nop
 80180a0:	3710      	adds	r7, #16
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}
 80180a6:	bf00      	nop
 80180a8:	20001960 	.word	0x20001960
 80180ac:	e000ed04 	.word	0xe000ed04

080180b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b08a      	sub	sp, #40	@ 0x28
 80180b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80180b6:	2300      	movs	r3, #0
 80180b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80180ba:	2300      	movs	r3, #0
 80180bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80180be:	463a      	mov	r2, r7
 80180c0:	1d39      	adds	r1, r7, #4
 80180c2:	f107 0308 	add.w	r3, r7, #8
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7e9 f96e 	bl	80013a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80180cc:	6839      	ldr	r1, [r7, #0]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	68ba      	ldr	r2, [r7, #8]
 80180d2:	9202      	str	r2, [sp, #8]
 80180d4:	9301      	str	r3, [sp, #4]
 80180d6:	2300      	movs	r3, #0
 80180d8:	9300      	str	r3, [sp, #0]
 80180da:	2300      	movs	r3, #0
 80180dc:	460a      	mov	r2, r1
 80180de:	4921      	ldr	r1, [pc, #132]	@ (8018164 <vTaskStartScheduler+0xb4>)
 80180e0:	4821      	ldr	r0, [pc, #132]	@ (8018168 <vTaskStartScheduler+0xb8>)
 80180e2:	f7ff fe03 	bl	8017cec <xTaskCreateStatic>
 80180e6:	4603      	mov	r3, r0
 80180e8:	4a20      	ldr	r2, [pc, #128]	@ (801816c <vTaskStartScheduler+0xbc>)
 80180ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80180ec:	4b1f      	ldr	r3, [pc, #124]	@ (801816c <vTaskStartScheduler+0xbc>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d002      	beq.n	80180fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80180f4:	2301      	movs	r3, #1
 80180f6:	617b      	str	r3, [r7, #20]
 80180f8:	e001      	b.n	80180fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80180fa:	2300      	movs	r3, #0
 80180fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d118      	bne.n	8018136 <vTaskStartScheduler+0x86>
	__asm volatile
 8018104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018108:	b672      	cpsid	i
 801810a:	f383 8811 	msr	BASEPRI, r3
 801810e:	f3bf 8f6f 	isb	sy
 8018112:	f3bf 8f4f 	dsb	sy
 8018116:	b662      	cpsie	i
 8018118:	613b      	str	r3, [r7, #16]
}
 801811a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801811c:	4b14      	ldr	r3, [pc, #80]	@ (8018170 <vTaskStartScheduler+0xc0>)
 801811e:	f04f 32ff 	mov.w	r2, #4294967295
 8018122:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018124:	4b13      	ldr	r3, [pc, #76]	@ (8018174 <vTaskStartScheduler+0xc4>)
 8018126:	2201      	movs	r2, #1
 8018128:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801812a:	4b13      	ldr	r3, [pc, #76]	@ (8018178 <vTaskStartScheduler+0xc8>)
 801812c:	2200      	movs	r2, #0
 801812e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018130:	f000 fefe 	bl	8018f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018134:	e011      	b.n	801815a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801813c:	d10d      	bne.n	801815a <vTaskStartScheduler+0xaa>
	__asm volatile
 801813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018142:	b672      	cpsid	i
 8018144:	f383 8811 	msr	BASEPRI, r3
 8018148:	f3bf 8f6f 	isb	sy
 801814c:	f3bf 8f4f 	dsb	sy
 8018150:	b662      	cpsie	i
 8018152:	60fb      	str	r3, [r7, #12]
}
 8018154:	bf00      	nop
 8018156:	bf00      	nop
 8018158:	e7fd      	b.n	8018156 <vTaskStartScheduler+0xa6>
}
 801815a:	bf00      	nop
 801815c:	3718      	adds	r7, #24
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}
 8018162:	bf00      	nop
 8018164:	0801c560 	.word	0x0801c560
 8018168:	080187cd 	.word	0x080187cd
 801816c:	2000195c 	.word	0x2000195c
 8018170:	20001958 	.word	0x20001958
 8018174:	20001944 	.word	0x20001944
 8018178:	2000193c 	.word	0x2000193c

0801817c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801817c:	b480      	push	{r7}
 801817e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018180:	4b04      	ldr	r3, [pc, #16]	@ (8018194 <vTaskSuspendAll+0x18>)
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	3301      	adds	r3, #1
 8018186:	4a03      	ldr	r2, [pc, #12]	@ (8018194 <vTaskSuspendAll+0x18>)
 8018188:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801818a:	bf00      	nop
 801818c:	46bd      	mov	sp, r7
 801818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018192:	4770      	bx	lr
 8018194:	20001960 	.word	0x20001960

08018198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b084      	sub	sp, #16
 801819c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801819e:	2300      	movs	r3, #0
 80181a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80181a2:	2300      	movs	r3, #0
 80181a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80181a6:	4b43      	ldr	r3, [pc, #268]	@ (80182b4 <xTaskResumeAll+0x11c>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d10d      	bne.n	80181ca <xTaskResumeAll+0x32>
	__asm volatile
 80181ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80181b2:	b672      	cpsid	i
 80181b4:	f383 8811 	msr	BASEPRI, r3
 80181b8:	f3bf 8f6f 	isb	sy
 80181bc:	f3bf 8f4f 	dsb	sy
 80181c0:	b662      	cpsie	i
 80181c2:	603b      	str	r3, [r7, #0]
}
 80181c4:	bf00      	nop
 80181c6:	bf00      	nop
 80181c8:	e7fd      	b.n	80181c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80181ca:	f000 ff2f 	bl	801902c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80181ce:	4b39      	ldr	r3, [pc, #228]	@ (80182b4 <xTaskResumeAll+0x11c>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	3b01      	subs	r3, #1
 80181d4:	4a37      	ldr	r2, [pc, #220]	@ (80182b4 <xTaskResumeAll+0x11c>)
 80181d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80181d8:	4b36      	ldr	r3, [pc, #216]	@ (80182b4 <xTaskResumeAll+0x11c>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d161      	bne.n	80182a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80181e0:	4b35      	ldr	r3, [pc, #212]	@ (80182b8 <xTaskResumeAll+0x120>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d05d      	beq.n	80182a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80181e8:	e02e      	b.n	8018248 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181ea:	4b34      	ldr	r3, [pc, #208]	@ (80182bc <xTaskResumeAll+0x124>)
 80181ec:	68db      	ldr	r3, [r3, #12]
 80181ee:	68db      	ldr	r3, [r3, #12]
 80181f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	3318      	adds	r3, #24
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fe fcfa 	bl	8016bf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	3304      	adds	r3, #4
 8018200:	4618      	mov	r0, r3
 8018202:	f7fe fcf5 	bl	8016bf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801820a:	2201      	movs	r2, #1
 801820c:	409a      	lsls	r2, r3
 801820e:	4b2c      	ldr	r3, [pc, #176]	@ (80182c0 <xTaskResumeAll+0x128>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	4313      	orrs	r3, r2
 8018214:	4a2a      	ldr	r2, [pc, #168]	@ (80182c0 <xTaskResumeAll+0x128>)
 8018216:	6013      	str	r3, [r2, #0]
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801821c:	4613      	mov	r3, r2
 801821e:	009b      	lsls	r3, r3, #2
 8018220:	4413      	add	r3, r2
 8018222:	009b      	lsls	r3, r3, #2
 8018224:	4a27      	ldr	r2, [pc, #156]	@ (80182c4 <xTaskResumeAll+0x12c>)
 8018226:	441a      	add	r2, r3
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	3304      	adds	r3, #4
 801822c:	4619      	mov	r1, r3
 801822e:	4610      	mov	r0, r2
 8018230:	f7fe fc81 	bl	8016b36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018238:	4b23      	ldr	r3, [pc, #140]	@ (80182c8 <xTaskResumeAll+0x130>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801823e:	429a      	cmp	r2, r3
 8018240:	d302      	bcc.n	8018248 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8018242:	4b22      	ldr	r3, [pc, #136]	@ (80182cc <xTaskResumeAll+0x134>)
 8018244:	2201      	movs	r2, #1
 8018246:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018248:	4b1c      	ldr	r3, [pc, #112]	@ (80182bc <xTaskResumeAll+0x124>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d1cc      	bne.n	80181ea <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d001      	beq.n	801825a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018256:	f000 fb73 	bl	8018940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801825a:	4b1d      	ldr	r3, [pc, #116]	@ (80182d0 <xTaskResumeAll+0x138>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d010      	beq.n	8018288 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018266:	f000 f859 	bl	801831c <xTaskIncrementTick>
 801826a:	4603      	mov	r3, r0
 801826c:	2b00      	cmp	r3, #0
 801826e:	d002      	beq.n	8018276 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8018270:	4b16      	ldr	r3, [pc, #88]	@ (80182cc <xTaskResumeAll+0x134>)
 8018272:	2201      	movs	r2, #1
 8018274:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	3b01      	subs	r3, #1
 801827a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1f1      	bne.n	8018266 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8018282:	4b13      	ldr	r3, [pc, #76]	@ (80182d0 <xTaskResumeAll+0x138>)
 8018284:	2200      	movs	r2, #0
 8018286:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018288:	4b10      	ldr	r3, [pc, #64]	@ (80182cc <xTaskResumeAll+0x134>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d009      	beq.n	80182a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018290:	2301      	movs	r3, #1
 8018292:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018294:	4b0f      	ldr	r3, [pc, #60]	@ (80182d4 <xTaskResumeAll+0x13c>)
 8018296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801829a:	601a      	str	r2, [r3, #0]
 801829c:	f3bf 8f4f 	dsb	sy
 80182a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80182a4:	f000 fef8 	bl	8019098 <vPortExitCritical>

	return xAlreadyYielded;
 80182a8:	68bb      	ldr	r3, [r7, #8]
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3710      	adds	r7, #16
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}
 80182b2:	bf00      	nop
 80182b4:	20001960 	.word	0x20001960
 80182b8:	20001938 	.word	0x20001938
 80182bc:	200018f8 	.word	0x200018f8
 80182c0:	20001940 	.word	0x20001940
 80182c4:	2000183c 	.word	0x2000183c
 80182c8:	20001838 	.word	0x20001838
 80182cc:	2000194c 	.word	0x2000194c
 80182d0:	20001948 	.word	0x20001948
 80182d4:	e000ed04 	.word	0xe000ed04

080182d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80182d8:	b480      	push	{r7}
 80182da:	b083      	sub	sp, #12
 80182dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80182de:	4b05      	ldr	r3, [pc, #20]	@ (80182f4 <xTaskGetTickCount+0x1c>)
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80182e4:	687b      	ldr	r3, [r7, #4]
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	370c      	adds	r7, #12
 80182ea:	46bd      	mov	sp, r7
 80182ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f0:	4770      	bx	lr
 80182f2:	bf00      	nop
 80182f4:	2000193c 	.word	0x2000193c

080182f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b082      	sub	sp, #8
 80182fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80182fe:	f000 ff7d 	bl	80191fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018302:	2300      	movs	r3, #0
 8018304:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018306:	4b04      	ldr	r3, [pc, #16]	@ (8018318 <xTaskGetTickCountFromISR+0x20>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801830c:	683b      	ldr	r3, [r7, #0]
}
 801830e:	4618      	mov	r0, r3
 8018310:	3708      	adds	r7, #8
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}
 8018316:	bf00      	nop
 8018318:	2000193c 	.word	0x2000193c

0801831c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b086      	sub	sp, #24
 8018320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018322:	2300      	movs	r3, #0
 8018324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018326:	4b50      	ldr	r3, [pc, #320]	@ (8018468 <xTaskIncrementTick+0x14c>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	2b00      	cmp	r3, #0
 801832c:	f040 808b 	bne.w	8018446 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018330:	4b4e      	ldr	r3, [pc, #312]	@ (801846c <xTaskIncrementTick+0x150>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	3301      	adds	r3, #1
 8018336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018338:	4a4c      	ldr	r2, [pc, #304]	@ (801846c <xTaskIncrementTick+0x150>)
 801833a:	693b      	ldr	r3, [r7, #16]
 801833c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d123      	bne.n	801838c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8018344:	4b4a      	ldr	r3, [pc, #296]	@ (8018470 <xTaskIncrementTick+0x154>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d00d      	beq.n	801836a <xTaskIncrementTick+0x4e>
	__asm volatile
 801834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018352:	b672      	cpsid	i
 8018354:	f383 8811 	msr	BASEPRI, r3
 8018358:	f3bf 8f6f 	isb	sy
 801835c:	f3bf 8f4f 	dsb	sy
 8018360:	b662      	cpsie	i
 8018362:	603b      	str	r3, [r7, #0]
}
 8018364:	bf00      	nop
 8018366:	bf00      	nop
 8018368:	e7fd      	b.n	8018366 <xTaskIncrementTick+0x4a>
 801836a:	4b41      	ldr	r3, [pc, #260]	@ (8018470 <xTaskIncrementTick+0x154>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	60fb      	str	r3, [r7, #12]
 8018370:	4b40      	ldr	r3, [pc, #256]	@ (8018474 <xTaskIncrementTick+0x158>)
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	4a3e      	ldr	r2, [pc, #248]	@ (8018470 <xTaskIncrementTick+0x154>)
 8018376:	6013      	str	r3, [r2, #0]
 8018378:	4a3e      	ldr	r2, [pc, #248]	@ (8018474 <xTaskIncrementTick+0x158>)
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	6013      	str	r3, [r2, #0]
 801837e:	4b3e      	ldr	r3, [pc, #248]	@ (8018478 <xTaskIncrementTick+0x15c>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	3301      	adds	r3, #1
 8018384:	4a3c      	ldr	r2, [pc, #240]	@ (8018478 <xTaskIncrementTick+0x15c>)
 8018386:	6013      	str	r3, [r2, #0]
 8018388:	f000 fada 	bl	8018940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801838c:	4b3b      	ldr	r3, [pc, #236]	@ (801847c <xTaskIncrementTick+0x160>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	693a      	ldr	r2, [r7, #16]
 8018392:	429a      	cmp	r2, r3
 8018394:	d348      	bcc.n	8018428 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018396:	4b36      	ldr	r3, [pc, #216]	@ (8018470 <xTaskIncrementTick+0x154>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d104      	bne.n	80183aa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80183a0:	4b36      	ldr	r3, [pc, #216]	@ (801847c <xTaskIncrementTick+0x160>)
 80183a2:	f04f 32ff 	mov.w	r2, #4294967295
 80183a6:	601a      	str	r2, [r3, #0]
					break;
 80183a8:	e03e      	b.n	8018428 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183aa:	4b31      	ldr	r3, [pc, #196]	@ (8018470 <xTaskIncrementTick+0x154>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	68db      	ldr	r3, [r3, #12]
 80183b0:	68db      	ldr	r3, [r3, #12]
 80183b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	685b      	ldr	r3, [r3, #4]
 80183b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80183ba:	693a      	ldr	r2, [r7, #16]
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	429a      	cmp	r2, r3
 80183c0:	d203      	bcs.n	80183ca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80183c2:	4a2e      	ldr	r2, [pc, #184]	@ (801847c <xTaskIncrementTick+0x160>)
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80183c8:	e02e      	b.n	8018428 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80183ca:	68bb      	ldr	r3, [r7, #8]
 80183cc:	3304      	adds	r3, #4
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fe fc0e 	bl	8016bf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d004      	beq.n	80183e6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	3318      	adds	r3, #24
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7fe fc05 	bl	8016bf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80183e6:	68bb      	ldr	r3, [r7, #8]
 80183e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183ea:	2201      	movs	r2, #1
 80183ec:	409a      	lsls	r2, r3
 80183ee:	4b24      	ldr	r3, [pc, #144]	@ (8018480 <xTaskIncrementTick+0x164>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	4313      	orrs	r3, r2
 80183f4:	4a22      	ldr	r2, [pc, #136]	@ (8018480 <xTaskIncrementTick+0x164>)
 80183f6:	6013      	str	r3, [r2, #0]
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80183fc:	4613      	mov	r3, r2
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	4413      	add	r3, r2
 8018402:	009b      	lsls	r3, r3, #2
 8018404:	4a1f      	ldr	r2, [pc, #124]	@ (8018484 <xTaskIncrementTick+0x168>)
 8018406:	441a      	add	r2, r3
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	3304      	adds	r3, #4
 801840c:	4619      	mov	r1, r3
 801840e:	4610      	mov	r0, r2
 8018410:	f7fe fb91 	bl	8016b36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018418:	4b1b      	ldr	r3, [pc, #108]	@ (8018488 <xTaskIncrementTick+0x16c>)
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801841e:	429a      	cmp	r2, r3
 8018420:	d3b9      	bcc.n	8018396 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8018422:	2301      	movs	r3, #1
 8018424:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018426:	e7b6      	b.n	8018396 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018428:	4b17      	ldr	r3, [pc, #92]	@ (8018488 <xTaskIncrementTick+0x16c>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801842e:	4915      	ldr	r1, [pc, #84]	@ (8018484 <xTaskIncrementTick+0x168>)
 8018430:	4613      	mov	r3, r2
 8018432:	009b      	lsls	r3, r3, #2
 8018434:	4413      	add	r3, r2
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	440b      	add	r3, r1
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	2b01      	cmp	r3, #1
 801843e:	d907      	bls.n	8018450 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8018440:	2301      	movs	r3, #1
 8018442:	617b      	str	r3, [r7, #20]
 8018444:	e004      	b.n	8018450 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018446:	4b11      	ldr	r3, [pc, #68]	@ (801848c <xTaskIncrementTick+0x170>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	3301      	adds	r3, #1
 801844c:	4a0f      	ldr	r2, [pc, #60]	@ (801848c <xTaskIncrementTick+0x170>)
 801844e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8018450:	4b0f      	ldr	r3, [pc, #60]	@ (8018490 <xTaskIncrementTick+0x174>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d001      	beq.n	801845c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8018458:	2301      	movs	r3, #1
 801845a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801845c:	697b      	ldr	r3, [r7, #20]
}
 801845e:	4618      	mov	r0, r3
 8018460:	3718      	adds	r7, #24
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}
 8018466:	bf00      	nop
 8018468:	20001960 	.word	0x20001960
 801846c:	2000193c 	.word	0x2000193c
 8018470:	200018f0 	.word	0x200018f0
 8018474:	200018f4 	.word	0x200018f4
 8018478:	20001950 	.word	0x20001950
 801847c:	20001958 	.word	0x20001958
 8018480:	20001940 	.word	0x20001940
 8018484:	2000183c 	.word	0x2000183c
 8018488:	20001838 	.word	0x20001838
 801848c:	20001948 	.word	0x20001948
 8018490:	2000194c 	.word	0x2000194c

08018494 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b088      	sub	sp, #32
 8018498:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801849a:	4b3b      	ldr	r3, [pc, #236]	@ (8018588 <vTaskSwitchContext+0xf4>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d003      	beq.n	80184aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80184a2:	4b3a      	ldr	r3, [pc, #232]	@ (801858c <vTaskSwitchContext+0xf8>)
 80184a4:	2201      	movs	r2, #1
 80184a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80184a8:	e069      	b.n	801857e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80184aa:	4b38      	ldr	r3, [pc, #224]	@ (801858c <vTaskSwitchContext+0xf8>)
 80184ac:	2200      	movs	r2, #0
 80184ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80184b0:	4b37      	ldr	r3, [pc, #220]	@ (8018590 <vTaskSwitchContext+0xfc>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80184b6:	61fb      	str	r3, [r7, #28]
 80184b8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80184bc:	61bb      	str	r3, [r7, #24]
 80184be:	69fb      	ldr	r3, [r7, #28]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	69ba      	ldr	r2, [r7, #24]
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d111      	bne.n	80184ec <vTaskSwitchContext+0x58>
 80184c8:	69fb      	ldr	r3, [r7, #28]
 80184ca:	3304      	adds	r3, #4
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	69ba      	ldr	r2, [r7, #24]
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d10b      	bne.n	80184ec <vTaskSwitchContext+0x58>
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	3308      	adds	r3, #8
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	69ba      	ldr	r2, [r7, #24]
 80184dc:	429a      	cmp	r2, r3
 80184de:	d105      	bne.n	80184ec <vTaskSwitchContext+0x58>
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	330c      	adds	r3, #12
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	69ba      	ldr	r2, [r7, #24]
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d008      	beq.n	80184fe <vTaskSwitchContext+0x6a>
 80184ec:	4b28      	ldr	r3, [pc, #160]	@ (8018590 <vTaskSwitchContext+0xfc>)
 80184ee:	681a      	ldr	r2, [r3, #0]
 80184f0:	4b27      	ldr	r3, [pc, #156]	@ (8018590 <vTaskSwitchContext+0xfc>)
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	3334      	adds	r3, #52	@ 0x34
 80184f6:	4619      	mov	r1, r3
 80184f8:	4610      	mov	r0, r2
 80184fa:	f7e8 ff43 	bl	8001384 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184fe:	4b25      	ldr	r3, [pc, #148]	@ (8018594 <vTaskSwitchContext+0x100>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	fab3 f383 	clz	r3, r3
 801850a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801850c:	7afb      	ldrb	r3, [r7, #11]
 801850e:	f1c3 031f 	rsb	r3, r3, #31
 8018512:	617b      	str	r3, [r7, #20]
 8018514:	4920      	ldr	r1, [pc, #128]	@ (8018598 <vTaskSwitchContext+0x104>)
 8018516:	697a      	ldr	r2, [r7, #20]
 8018518:	4613      	mov	r3, r2
 801851a:	009b      	lsls	r3, r3, #2
 801851c:	4413      	add	r3, r2
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	440b      	add	r3, r1
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d10d      	bne.n	8018544 <vTaskSwitchContext+0xb0>
	__asm volatile
 8018528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801852c:	b672      	cpsid	i
 801852e:	f383 8811 	msr	BASEPRI, r3
 8018532:	f3bf 8f6f 	isb	sy
 8018536:	f3bf 8f4f 	dsb	sy
 801853a:	b662      	cpsie	i
 801853c:	607b      	str	r3, [r7, #4]
}
 801853e:	bf00      	nop
 8018540:	bf00      	nop
 8018542:	e7fd      	b.n	8018540 <vTaskSwitchContext+0xac>
 8018544:	697a      	ldr	r2, [r7, #20]
 8018546:	4613      	mov	r3, r2
 8018548:	009b      	lsls	r3, r3, #2
 801854a:	4413      	add	r3, r2
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	4a12      	ldr	r2, [pc, #72]	@ (8018598 <vTaskSwitchContext+0x104>)
 8018550:	4413      	add	r3, r2
 8018552:	613b      	str	r3, [r7, #16]
 8018554:	693b      	ldr	r3, [r7, #16]
 8018556:	685b      	ldr	r3, [r3, #4]
 8018558:	685a      	ldr	r2, [r3, #4]
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	605a      	str	r2, [r3, #4]
 801855e:	693b      	ldr	r3, [r7, #16]
 8018560:	685a      	ldr	r2, [r3, #4]
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	3308      	adds	r3, #8
 8018566:	429a      	cmp	r2, r3
 8018568:	d104      	bne.n	8018574 <vTaskSwitchContext+0xe0>
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	685a      	ldr	r2, [r3, #4]
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	605a      	str	r2, [r3, #4]
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	685b      	ldr	r3, [r3, #4]
 8018578:	68db      	ldr	r3, [r3, #12]
 801857a:	4a05      	ldr	r2, [pc, #20]	@ (8018590 <vTaskSwitchContext+0xfc>)
 801857c:	6013      	str	r3, [r2, #0]
}
 801857e:	bf00      	nop
 8018580:	3720      	adds	r7, #32
 8018582:	46bd      	mov	sp, r7
 8018584:	bd80      	pop	{r7, pc}
 8018586:	bf00      	nop
 8018588:	20001960 	.word	0x20001960
 801858c:	2000194c 	.word	0x2000194c
 8018590:	20001838 	.word	0x20001838
 8018594:	20001940 	.word	0x20001940
 8018598:	2000183c 	.word	0x2000183c

0801859c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b084      	sub	sp, #16
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d10d      	bne.n	80185c8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80185ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185b0:	b672      	cpsid	i
 80185b2:	f383 8811 	msr	BASEPRI, r3
 80185b6:	f3bf 8f6f 	isb	sy
 80185ba:	f3bf 8f4f 	dsb	sy
 80185be:	b662      	cpsie	i
 80185c0:	60fb      	str	r3, [r7, #12]
}
 80185c2:	bf00      	nop
 80185c4:	bf00      	nop
 80185c6:	e7fd      	b.n	80185c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80185c8:	4b07      	ldr	r3, [pc, #28]	@ (80185e8 <vTaskPlaceOnEventList+0x4c>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	3318      	adds	r3, #24
 80185ce:	4619      	mov	r1, r3
 80185d0:	6878      	ldr	r0, [r7, #4]
 80185d2:	f7fe fad4 	bl	8016b7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80185d6:	2101      	movs	r1, #1
 80185d8:	6838      	ldr	r0, [r7, #0]
 80185da:	f000 fbaf 	bl	8018d3c <prvAddCurrentTaskToDelayedList>
}
 80185de:	bf00      	nop
 80185e0:	3710      	adds	r7, #16
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}
 80185e6:	bf00      	nop
 80185e8:	20001838 	.word	0x20001838

080185ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b086      	sub	sp, #24
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	68db      	ldr	r3, [r3, #12]
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80185fc:	693b      	ldr	r3, [r7, #16]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d10d      	bne.n	801861e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8018602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018606:	b672      	cpsid	i
 8018608:	f383 8811 	msr	BASEPRI, r3
 801860c:	f3bf 8f6f 	isb	sy
 8018610:	f3bf 8f4f 	dsb	sy
 8018614:	b662      	cpsie	i
 8018616:	60fb      	str	r3, [r7, #12]
}
 8018618:	bf00      	nop
 801861a:	bf00      	nop
 801861c:	e7fd      	b.n	801861a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801861e:	693b      	ldr	r3, [r7, #16]
 8018620:	3318      	adds	r3, #24
 8018622:	4618      	mov	r0, r3
 8018624:	f7fe fae4 	bl	8016bf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018628:	4b1d      	ldr	r3, [pc, #116]	@ (80186a0 <xTaskRemoveFromEventList+0xb4>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d11c      	bne.n	801866a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	3304      	adds	r3, #4
 8018634:	4618      	mov	r0, r3
 8018636:	f7fe fadb 	bl	8016bf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801863a:	693b      	ldr	r3, [r7, #16]
 801863c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801863e:	2201      	movs	r2, #1
 8018640:	409a      	lsls	r2, r3
 8018642:	4b18      	ldr	r3, [pc, #96]	@ (80186a4 <xTaskRemoveFromEventList+0xb8>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	4313      	orrs	r3, r2
 8018648:	4a16      	ldr	r2, [pc, #88]	@ (80186a4 <xTaskRemoveFromEventList+0xb8>)
 801864a:	6013      	str	r3, [r2, #0]
 801864c:	693b      	ldr	r3, [r7, #16]
 801864e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018650:	4613      	mov	r3, r2
 8018652:	009b      	lsls	r3, r3, #2
 8018654:	4413      	add	r3, r2
 8018656:	009b      	lsls	r3, r3, #2
 8018658:	4a13      	ldr	r2, [pc, #76]	@ (80186a8 <xTaskRemoveFromEventList+0xbc>)
 801865a:	441a      	add	r2, r3
 801865c:	693b      	ldr	r3, [r7, #16]
 801865e:	3304      	adds	r3, #4
 8018660:	4619      	mov	r1, r3
 8018662:	4610      	mov	r0, r2
 8018664:	f7fe fa67 	bl	8016b36 <vListInsertEnd>
 8018668:	e005      	b.n	8018676 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801866a:	693b      	ldr	r3, [r7, #16]
 801866c:	3318      	adds	r3, #24
 801866e:	4619      	mov	r1, r3
 8018670:	480e      	ldr	r0, [pc, #56]	@ (80186ac <xTaskRemoveFromEventList+0xc0>)
 8018672:	f7fe fa60 	bl	8016b36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018676:	693b      	ldr	r3, [r7, #16]
 8018678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801867a:	4b0d      	ldr	r3, [pc, #52]	@ (80186b0 <xTaskRemoveFromEventList+0xc4>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018680:	429a      	cmp	r2, r3
 8018682:	d905      	bls.n	8018690 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018684:	2301      	movs	r3, #1
 8018686:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018688:	4b0a      	ldr	r3, [pc, #40]	@ (80186b4 <xTaskRemoveFromEventList+0xc8>)
 801868a:	2201      	movs	r2, #1
 801868c:	601a      	str	r2, [r3, #0]
 801868e:	e001      	b.n	8018694 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8018690:	2300      	movs	r3, #0
 8018692:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018694:	697b      	ldr	r3, [r7, #20]
}
 8018696:	4618      	mov	r0, r3
 8018698:	3718      	adds	r7, #24
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}
 801869e:	bf00      	nop
 80186a0:	20001960 	.word	0x20001960
 80186a4:	20001940 	.word	0x20001940
 80186a8:	2000183c 	.word	0x2000183c
 80186ac:	200018f8 	.word	0x200018f8
 80186b0:	20001838 	.word	0x20001838
 80186b4:	2000194c 	.word	0x2000194c

080186b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80186b8:	b480      	push	{r7}
 80186ba:	b083      	sub	sp, #12
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80186c0:	4b06      	ldr	r3, [pc, #24]	@ (80186dc <vTaskInternalSetTimeOutState+0x24>)
 80186c2:	681a      	ldr	r2, [r3, #0]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80186c8:	4b05      	ldr	r3, [pc, #20]	@ (80186e0 <vTaskInternalSetTimeOutState+0x28>)
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	605a      	str	r2, [r3, #4]
}
 80186d0:	bf00      	nop
 80186d2:	370c      	adds	r7, #12
 80186d4:	46bd      	mov	sp, r7
 80186d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186da:	4770      	bx	lr
 80186dc:	20001950 	.word	0x20001950
 80186e0:	2000193c 	.word	0x2000193c

080186e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b088      	sub	sp, #32
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
 80186ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d10d      	bne.n	8018710 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80186f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186f8:	b672      	cpsid	i
 80186fa:	f383 8811 	msr	BASEPRI, r3
 80186fe:	f3bf 8f6f 	isb	sy
 8018702:	f3bf 8f4f 	dsb	sy
 8018706:	b662      	cpsie	i
 8018708:	613b      	str	r3, [r7, #16]
}
 801870a:	bf00      	nop
 801870c:	bf00      	nop
 801870e:	e7fd      	b.n	801870c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d10d      	bne.n	8018732 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8018716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801871a:	b672      	cpsid	i
 801871c:	f383 8811 	msr	BASEPRI, r3
 8018720:	f3bf 8f6f 	isb	sy
 8018724:	f3bf 8f4f 	dsb	sy
 8018728:	b662      	cpsie	i
 801872a:	60fb      	str	r3, [r7, #12]
}
 801872c:	bf00      	nop
 801872e:	bf00      	nop
 8018730:	e7fd      	b.n	801872e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8018732:	f000 fc7b 	bl	801902c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018736:	4b1d      	ldr	r3, [pc, #116]	@ (80187ac <xTaskCheckForTimeOut+0xc8>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	685b      	ldr	r3, [r3, #4]
 8018740:	69ba      	ldr	r2, [r7, #24]
 8018742:	1ad3      	subs	r3, r2, r3
 8018744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801874e:	d102      	bne.n	8018756 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018750:	2300      	movs	r3, #0
 8018752:	61fb      	str	r3, [r7, #28]
 8018754:	e023      	b.n	801879e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681a      	ldr	r2, [r3, #0]
 801875a:	4b15      	ldr	r3, [pc, #84]	@ (80187b0 <xTaskCheckForTimeOut+0xcc>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	429a      	cmp	r2, r3
 8018760:	d007      	beq.n	8018772 <xTaskCheckForTimeOut+0x8e>
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	69ba      	ldr	r2, [r7, #24]
 8018768:	429a      	cmp	r2, r3
 801876a:	d302      	bcc.n	8018772 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801876c:	2301      	movs	r3, #1
 801876e:	61fb      	str	r3, [r7, #28]
 8018770:	e015      	b.n	801879e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018772:	683b      	ldr	r3, [r7, #0]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	697a      	ldr	r2, [r7, #20]
 8018778:	429a      	cmp	r2, r3
 801877a:	d20b      	bcs.n	8018794 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	1ad2      	subs	r2, r2, r3
 8018784:	683b      	ldr	r3, [r7, #0]
 8018786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f7ff ff95 	bl	80186b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801878e:	2300      	movs	r3, #0
 8018790:	61fb      	str	r3, [r7, #28]
 8018792:	e004      	b.n	801879e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	2200      	movs	r2, #0
 8018798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801879a:	2301      	movs	r3, #1
 801879c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801879e:	f000 fc7b 	bl	8019098 <vPortExitCritical>

	return xReturn;
 80187a2:	69fb      	ldr	r3, [r7, #28]
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	3720      	adds	r7, #32
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	2000193c 	.word	0x2000193c
 80187b0:	20001950 	.word	0x20001950

080187b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80187b4:	b480      	push	{r7}
 80187b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80187b8:	4b03      	ldr	r3, [pc, #12]	@ (80187c8 <vTaskMissedYield+0x14>)
 80187ba:	2201      	movs	r2, #1
 80187bc:	601a      	str	r2, [r3, #0]
}
 80187be:	bf00      	nop
 80187c0:	46bd      	mov	sp, r7
 80187c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c6:	4770      	bx	lr
 80187c8:	2000194c 	.word	0x2000194c

080187cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b082      	sub	sp, #8
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80187d4:	f000 f854 	bl	8018880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80187d8:	4b07      	ldr	r3, [pc, #28]	@ (80187f8 <prvIdleTask+0x2c>)
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	2b01      	cmp	r3, #1
 80187de:	d907      	bls.n	80187f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80187e0:	4b06      	ldr	r3, [pc, #24]	@ (80187fc <prvIdleTask+0x30>)
 80187e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80187e6:	601a      	str	r2, [r3, #0]
 80187e8:	f3bf 8f4f 	dsb	sy
 80187ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80187f0:	f7e8 fdc1 	bl	8001376 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80187f4:	e7ee      	b.n	80187d4 <prvIdleTask+0x8>
 80187f6:	bf00      	nop
 80187f8:	2000183c 	.word	0x2000183c
 80187fc:	e000ed04 	.word	0xe000ed04

08018800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018806:	2300      	movs	r3, #0
 8018808:	607b      	str	r3, [r7, #4]
 801880a:	e00c      	b.n	8018826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801880c:	687a      	ldr	r2, [r7, #4]
 801880e:	4613      	mov	r3, r2
 8018810:	009b      	lsls	r3, r3, #2
 8018812:	4413      	add	r3, r2
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	4a12      	ldr	r2, [pc, #72]	@ (8018860 <prvInitialiseTaskLists+0x60>)
 8018818:	4413      	add	r3, r2
 801881a:	4618      	mov	r0, r3
 801881c:	f7fe f95e 	bl	8016adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	3301      	adds	r3, #1
 8018824:	607b      	str	r3, [r7, #4]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2b06      	cmp	r3, #6
 801882a:	d9ef      	bls.n	801880c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801882c:	480d      	ldr	r0, [pc, #52]	@ (8018864 <prvInitialiseTaskLists+0x64>)
 801882e:	f7fe f955 	bl	8016adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018832:	480d      	ldr	r0, [pc, #52]	@ (8018868 <prvInitialiseTaskLists+0x68>)
 8018834:	f7fe f952 	bl	8016adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018838:	480c      	ldr	r0, [pc, #48]	@ (801886c <prvInitialiseTaskLists+0x6c>)
 801883a:	f7fe f94f 	bl	8016adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801883e:	480c      	ldr	r0, [pc, #48]	@ (8018870 <prvInitialiseTaskLists+0x70>)
 8018840:	f7fe f94c 	bl	8016adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018844:	480b      	ldr	r0, [pc, #44]	@ (8018874 <prvInitialiseTaskLists+0x74>)
 8018846:	f7fe f949 	bl	8016adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801884a:	4b0b      	ldr	r3, [pc, #44]	@ (8018878 <prvInitialiseTaskLists+0x78>)
 801884c:	4a05      	ldr	r2, [pc, #20]	@ (8018864 <prvInitialiseTaskLists+0x64>)
 801884e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018850:	4b0a      	ldr	r3, [pc, #40]	@ (801887c <prvInitialiseTaskLists+0x7c>)
 8018852:	4a05      	ldr	r2, [pc, #20]	@ (8018868 <prvInitialiseTaskLists+0x68>)
 8018854:	601a      	str	r2, [r3, #0]
}
 8018856:	bf00      	nop
 8018858:	3708      	adds	r7, #8
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}
 801885e:	bf00      	nop
 8018860:	2000183c 	.word	0x2000183c
 8018864:	200018c8 	.word	0x200018c8
 8018868:	200018dc 	.word	0x200018dc
 801886c:	200018f8 	.word	0x200018f8
 8018870:	2000190c 	.word	0x2000190c
 8018874:	20001924 	.word	0x20001924
 8018878:	200018f0 	.word	0x200018f0
 801887c:	200018f4 	.word	0x200018f4

08018880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018886:	e019      	b.n	80188bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018888:	f000 fbd0 	bl	801902c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801888c:	4b10      	ldr	r3, [pc, #64]	@ (80188d0 <prvCheckTasksWaitingTermination+0x50>)
 801888e:	68db      	ldr	r3, [r3, #12]
 8018890:	68db      	ldr	r3, [r3, #12]
 8018892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	3304      	adds	r3, #4
 8018898:	4618      	mov	r0, r3
 801889a:	f7fe f9a9 	bl	8016bf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801889e:	4b0d      	ldr	r3, [pc, #52]	@ (80188d4 <prvCheckTasksWaitingTermination+0x54>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	3b01      	subs	r3, #1
 80188a4:	4a0b      	ldr	r2, [pc, #44]	@ (80188d4 <prvCheckTasksWaitingTermination+0x54>)
 80188a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80188a8:	4b0b      	ldr	r3, [pc, #44]	@ (80188d8 <prvCheckTasksWaitingTermination+0x58>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	3b01      	subs	r3, #1
 80188ae:	4a0a      	ldr	r2, [pc, #40]	@ (80188d8 <prvCheckTasksWaitingTermination+0x58>)
 80188b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80188b2:	f000 fbf1 	bl	8019098 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80188b6:	6878      	ldr	r0, [r7, #4]
 80188b8:	f000 f810 	bl	80188dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80188bc:	4b06      	ldr	r3, [pc, #24]	@ (80188d8 <prvCheckTasksWaitingTermination+0x58>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d1e1      	bne.n	8018888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80188c4:	bf00      	nop
 80188c6:	bf00      	nop
 80188c8:	3708      	adds	r7, #8
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	2000190c 	.word	0x2000190c
 80188d4:	20001938 	.word	0x20001938
 80188d8:	20001920 	.word	0x20001920

080188dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b084      	sub	sp, #16
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d108      	bne.n	8018900 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80188f2:	4618      	mov	r0, r3
 80188f4:	f000 fd9a 	bl	801942c <vPortFree>
				vPortFree( pxTCB );
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f000 fd97 	bl	801942c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80188fe:	e01b      	b.n	8018938 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018906:	2b01      	cmp	r3, #1
 8018908:	d103      	bne.n	8018912 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f000 fd8e 	bl	801942c <vPortFree>
	}
 8018910:	e012      	b.n	8018938 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018918:	2b02      	cmp	r3, #2
 801891a:	d00d      	beq.n	8018938 <prvDeleteTCB+0x5c>
	__asm volatile
 801891c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018920:	b672      	cpsid	i
 8018922:	f383 8811 	msr	BASEPRI, r3
 8018926:	f3bf 8f6f 	isb	sy
 801892a:	f3bf 8f4f 	dsb	sy
 801892e:	b662      	cpsie	i
 8018930:	60fb      	str	r3, [r7, #12]
}
 8018932:	bf00      	nop
 8018934:	bf00      	nop
 8018936:	e7fd      	b.n	8018934 <prvDeleteTCB+0x58>
	}
 8018938:	bf00      	nop
 801893a:	3710      	adds	r7, #16
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}

08018940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018940:	b480      	push	{r7}
 8018942:	b083      	sub	sp, #12
 8018944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018946:	4b0c      	ldr	r3, [pc, #48]	@ (8018978 <prvResetNextTaskUnblockTime+0x38>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d104      	bne.n	801895a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018950:	4b0a      	ldr	r3, [pc, #40]	@ (801897c <prvResetNextTaskUnblockTime+0x3c>)
 8018952:	f04f 32ff 	mov.w	r2, #4294967295
 8018956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018958:	e008      	b.n	801896c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801895a:	4b07      	ldr	r3, [pc, #28]	@ (8018978 <prvResetNextTaskUnblockTime+0x38>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	68db      	ldr	r3, [r3, #12]
 8018960:	68db      	ldr	r3, [r3, #12]
 8018962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	4a04      	ldr	r2, [pc, #16]	@ (801897c <prvResetNextTaskUnblockTime+0x3c>)
 801896a:	6013      	str	r3, [r2, #0]
}
 801896c:	bf00      	nop
 801896e:	370c      	adds	r7, #12
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr
 8018978:	200018f0 	.word	0x200018f0
 801897c:	20001958 	.word	0x20001958

08018980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018980:	b480      	push	{r7}
 8018982:	b083      	sub	sp, #12
 8018984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018986:	4b0b      	ldr	r3, [pc, #44]	@ (80189b4 <xTaskGetSchedulerState+0x34>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d102      	bne.n	8018994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801898e:	2301      	movs	r3, #1
 8018990:	607b      	str	r3, [r7, #4]
 8018992:	e008      	b.n	80189a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018994:	4b08      	ldr	r3, [pc, #32]	@ (80189b8 <xTaskGetSchedulerState+0x38>)
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d102      	bne.n	80189a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801899c:	2302      	movs	r3, #2
 801899e:	607b      	str	r3, [r7, #4]
 80189a0:	e001      	b.n	80189a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80189a2:	2300      	movs	r3, #0
 80189a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80189a6:	687b      	ldr	r3, [r7, #4]
	}
 80189a8:	4618      	mov	r0, r3
 80189aa:	370c      	adds	r7, #12
 80189ac:	46bd      	mov	sp, r7
 80189ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b2:	4770      	bx	lr
 80189b4:	20001944 	.word	0x20001944
 80189b8:	20001960 	.word	0x20001960

080189bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b084      	sub	sp, #16
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80189c8:	2300      	movs	r3, #0
 80189ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d069      	beq.n	8018aa6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80189d2:	68bb      	ldr	r3, [r7, #8]
 80189d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80189d6:	4b36      	ldr	r3, [pc, #216]	@ (8018ab0 <xTaskPriorityInherit+0xf4>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189dc:	429a      	cmp	r2, r3
 80189de:	d259      	bcs.n	8018a94 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	699b      	ldr	r3, [r3, #24]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	db06      	blt.n	80189f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189e8:	4b31      	ldr	r3, [pc, #196]	@ (8018ab0 <xTaskPriorityInherit+0xf4>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189ee:	f1c3 0207 	rsb	r2, r3, #7
 80189f2:	68bb      	ldr	r3, [r7, #8]
 80189f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80189f6:	68bb      	ldr	r3, [r7, #8]
 80189f8:	6959      	ldr	r1, [r3, #20]
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80189fe:	4613      	mov	r3, r2
 8018a00:	009b      	lsls	r3, r3, #2
 8018a02:	4413      	add	r3, r2
 8018a04:	009b      	lsls	r3, r3, #2
 8018a06:	4a2b      	ldr	r2, [pc, #172]	@ (8018ab4 <xTaskPriorityInherit+0xf8>)
 8018a08:	4413      	add	r3, r2
 8018a0a:	4299      	cmp	r1, r3
 8018a0c:	d13a      	bne.n	8018a84 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	3304      	adds	r3, #4
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7fe f8ec 	bl	8016bf0 <uxListRemove>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d115      	bne.n	8018a4a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a22:	4924      	ldr	r1, [pc, #144]	@ (8018ab4 <xTaskPriorityInherit+0xf8>)
 8018a24:	4613      	mov	r3, r2
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	4413      	add	r3, r2
 8018a2a:	009b      	lsls	r3, r3, #2
 8018a2c:	440b      	add	r3, r1
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d10a      	bne.n	8018a4a <xTaskPriorityInherit+0x8e>
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a38:	2201      	movs	r2, #1
 8018a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8018a3e:	43da      	mvns	r2, r3
 8018a40:	4b1d      	ldr	r3, [pc, #116]	@ (8018ab8 <xTaskPriorityInherit+0xfc>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	4013      	ands	r3, r2
 8018a46:	4a1c      	ldr	r2, [pc, #112]	@ (8018ab8 <xTaskPriorityInherit+0xfc>)
 8018a48:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018a4a:	4b19      	ldr	r3, [pc, #100]	@ (8018ab0 <xTaskPriorityInherit+0xf4>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a50:	68bb      	ldr	r3, [r7, #8]
 8018a52:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a58:	2201      	movs	r2, #1
 8018a5a:	409a      	lsls	r2, r3
 8018a5c:	4b16      	ldr	r3, [pc, #88]	@ (8018ab8 <xTaskPriorityInherit+0xfc>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	4313      	orrs	r3, r2
 8018a62:	4a15      	ldr	r2, [pc, #84]	@ (8018ab8 <xTaskPriorityInherit+0xfc>)
 8018a64:	6013      	str	r3, [r2, #0]
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a6a:	4613      	mov	r3, r2
 8018a6c:	009b      	lsls	r3, r3, #2
 8018a6e:	4413      	add	r3, r2
 8018a70:	009b      	lsls	r3, r3, #2
 8018a72:	4a10      	ldr	r2, [pc, #64]	@ (8018ab4 <xTaskPriorityInherit+0xf8>)
 8018a74:	441a      	add	r2, r3
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	3304      	adds	r3, #4
 8018a7a:	4619      	mov	r1, r3
 8018a7c:	4610      	mov	r0, r2
 8018a7e:	f7fe f85a 	bl	8016b36 <vListInsertEnd>
 8018a82:	e004      	b.n	8018a8e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018a84:	4b0a      	ldr	r3, [pc, #40]	@ (8018ab0 <xTaskPriorityInherit+0xf4>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018a8e:	2301      	movs	r3, #1
 8018a90:	60fb      	str	r3, [r7, #12]
 8018a92:	e008      	b.n	8018aa6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018a98:	4b05      	ldr	r3, [pc, #20]	@ (8018ab0 <xTaskPriorityInherit+0xf4>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d201      	bcs.n	8018aa6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018aa6:	68fb      	ldr	r3, [r7, #12]
	}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3710      	adds	r7, #16
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	20001838 	.word	0x20001838
 8018ab4:	2000183c 	.word	0x2000183c
 8018ab8:	20001940 	.word	0x20001940

08018abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b086      	sub	sp, #24
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018ac8:	2300      	movs	r3, #0
 8018aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d074      	beq.n	8018bbc <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8018bc8 <xTaskPriorityDisinherit+0x10c>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	693a      	ldr	r2, [r7, #16]
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d00d      	beq.n	8018af8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8018adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ae0:	b672      	cpsid	i
 8018ae2:	f383 8811 	msr	BASEPRI, r3
 8018ae6:	f3bf 8f6f 	isb	sy
 8018aea:	f3bf 8f4f 	dsb	sy
 8018aee:	b662      	cpsie	i
 8018af0:	60fb      	str	r3, [r7, #12]
}
 8018af2:	bf00      	nop
 8018af4:	bf00      	nop
 8018af6:	e7fd      	b.n	8018af4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8018af8:	693b      	ldr	r3, [r7, #16]
 8018afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d10d      	bne.n	8018b1c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8018b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b04:	b672      	cpsid	i
 8018b06:	f383 8811 	msr	BASEPRI, r3
 8018b0a:	f3bf 8f6f 	isb	sy
 8018b0e:	f3bf 8f4f 	dsb	sy
 8018b12:	b662      	cpsie	i
 8018b14:	60bb      	str	r3, [r7, #8]
}
 8018b16:	bf00      	nop
 8018b18:	bf00      	nop
 8018b1a:	e7fd      	b.n	8018b18 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8018b1c:	693b      	ldr	r3, [r7, #16]
 8018b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b20:	1e5a      	subs	r2, r3, #1
 8018b22:	693b      	ldr	r3, [r7, #16]
 8018b24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018b26:	693b      	ldr	r3, [r7, #16]
 8018b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b2a:	693b      	ldr	r3, [r7, #16]
 8018b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b2e:	429a      	cmp	r2, r3
 8018b30:	d044      	beq.n	8018bbc <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018b32:	693b      	ldr	r3, [r7, #16]
 8018b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d140      	bne.n	8018bbc <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b3a:	693b      	ldr	r3, [r7, #16]
 8018b3c:	3304      	adds	r3, #4
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7fe f856 	bl	8016bf0 <uxListRemove>
 8018b44:	4603      	mov	r3, r0
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d115      	bne.n	8018b76 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018b4a:	693b      	ldr	r3, [r7, #16]
 8018b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018b4e:	491f      	ldr	r1, [pc, #124]	@ (8018bcc <xTaskPriorityDisinherit+0x110>)
 8018b50:	4613      	mov	r3, r2
 8018b52:	009b      	lsls	r3, r3, #2
 8018b54:	4413      	add	r3, r2
 8018b56:	009b      	lsls	r3, r3, #2
 8018b58:	440b      	add	r3, r1
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d10a      	bne.n	8018b76 <xTaskPriorityDisinherit+0xba>
 8018b60:	693b      	ldr	r3, [r7, #16]
 8018b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b64:	2201      	movs	r2, #1
 8018b66:	fa02 f303 	lsl.w	r3, r2, r3
 8018b6a:	43da      	mvns	r2, r3
 8018b6c:	4b18      	ldr	r3, [pc, #96]	@ (8018bd0 <xTaskPriorityDisinherit+0x114>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	4013      	ands	r3, r2
 8018b72:	4a17      	ldr	r2, [pc, #92]	@ (8018bd0 <xTaskPriorityDisinherit+0x114>)
 8018b74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018b76:	693b      	ldr	r3, [r7, #16]
 8018b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018b7a:	693b      	ldr	r3, [r7, #16]
 8018b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b82:	f1c3 0207 	rsb	r2, r3, #7
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b8e:	2201      	movs	r2, #1
 8018b90:	409a      	lsls	r2, r3
 8018b92:	4b0f      	ldr	r3, [pc, #60]	@ (8018bd0 <xTaskPriorityDisinherit+0x114>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	4313      	orrs	r3, r2
 8018b98:	4a0d      	ldr	r2, [pc, #52]	@ (8018bd0 <xTaskPriorityDisinherit+0x114>)
 8018b9a:	6013      	str	r3, [r2, #0]
 8018b9c:	693b      	ldr	r3, [r7, #16]
 8018b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ba0:	4613      	mov	r3, r2
 8018ba2:	009b      	lsls	r3, r3, #2
 8018ba4:	4413      	add	r3, r2
 8018ba6:	009b      	lsls	r3, r3, #2
 8018ba8:	4a08      	ldr	r2, [pc, #32]	@ (8018bcc <xTaskPriorityDisinherit+0x110>)
 8018baa:	441a      	add	r2, r3
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	3304      	adds	r3, #4
 8018bb0:	4619      	mov	r1, r3
 8018bb2:	4610      	mov	r0, r2
 8018bb4:	f7fd ffbf 	bl	8016b36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018bb8:	2301      	movs	r3, #1
 8018bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018bbc:	697b      	ldr	r3, [r7, #20]
	}
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	3718      	adds	r7, #24
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}
 8018bc6:	bf00      	nop
 8018bc8:	20001838 	.word	0x20001838
 8018bcc:	2000183c 	.word	0x2000183c
 8018bd0:	20001940 	.word	0x20001940

08018bd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b088      	sub	sp, #32
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
 8018bdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018be2:	2301      	movs	r3, #1
 8018be4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	f000 8089 	beq.w	8018d00 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018bee:	69bb      	ldr	r3, [r7, #24]
 8018bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d10d      	bne.n	8018c12 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8018bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bfa:	b672      	cpsid	i
 8018bfc:	f383 8811 	msr	BASEPRI, r3
 8018c00:	f3bf 8f6f 	isb	sy
 8018c04:	f3bf 8f4f 	dsb	sy
 8018c08:	b662      	cpsie	i
 8018c0a:	60fb      	str	r3, [r7, #12]
}
 8018c0c:	bf00      	nop
 8018c0e:	bf00      	nop
 8018c10:	e7fd      	b.n	8018c0e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018c12:	69bb      	ldr	r3, [r7, #24]
 8018c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c16:	683a      	ldr	r2, [r7, #0]
 8018c18:	429a      	cmp	r2, r3
 8018c1a:	d902      	bls.n	8018c22 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	61fb      	str	r3, [r7, #28]
 8018c20:	e002      	b.n	8018c28 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018c22:	69bb      	ldr	r3, [r7, #24]
 8018c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018c26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018c28:	69bb      	ldr	r3, [r7, #24]
 8018c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c2c:	69fa      	ldr	r2, [r7, #28]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d066      	beq.n	8018d00 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018c36:	697a      	ldr	r2, [r7, #20]
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	d161      	bne.n	8018d00 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018c3c:	4b32      	ldr	r3, [pc, #200]	@ (8018d08 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	69ba      	ldr	r2, [r7, #24]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d10d      	bne.n	8018c62 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8018c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018c4a:	b672      	cpsid	i
 8018c4c:	f383 8811 	msr	BASEPRI, r3
 8018c50:	f3bf 8f6f 	isb	sy
 8018c54:	f3bf 8f4f 	dsb	sy
 8018c58:	b662      	cpsie	i
 8018c5a:	60bb      	str	r3, [r7, #8]
}
 8018c5c:	bf00      	nop
 8018c5e:	bf00      	nop
 8018c60:	e7fd      	b.n	8018c5e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018c62:	69bb      	ldr	r3, [r7, #24]
 8018c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c66:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018c68:	69bb      	ldr	r3, [r7, #24]
 8018c6a:	69fa      	ldr	r2, [r7, #28]
 8018c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018c6e:	69bb      	ldr	r3, [r7, #24]
 8018c70:	699b      	ldr	r3, [r3, #24]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	db04      	blt.n	8018c80 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c76:	69fb      	ldr	r3, [r7, #28]
 8018c78:	f1c3 0207 	rsb	r2, r3, #7
 8018c7c:	69bb      	ldr	r3, [r7, #24]
 8018c7e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018c80:	69bb      	ldr	r3, [r7, #24]
 8018c82:	6959      	ldr	r1, [r3, #20]
 8018c84:	693a      	ldr	r2, [r7, #16]
 8018c86:	4613      	mov	r3, r2
 8018c88:	009b      	lsls	r3, r3, #2
 8018c8a:	4413      	add	r3, r2
 8018c8c:	009b      	lsls	r3, r3, #2
 8018c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8018d0c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018c90:	4413      	add	r3, r2
 8018c92:	4299      	cmp	r1, r3
 8018c94:	d134      	bne.n	8018d00 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c96:	69bb      	ldr	r3, [r7, #24]
 8018c98:	3304      	adds	r3, #4
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7fd ffa8 	bl	8016bf0 <uxListRemove>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d115      	bne.n	8018cd2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018ca6:	69bb      	ldr	r3, [r7, #24]
 8018ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018caa:	4918      	ldr	r1, [pc, #96]	@ (8018d0c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018cac:	4613      	mov	r3, r2
 8018cae:	009b      	lsls	r3, r3, #2
 8018cb0:	4413      	add	r3, r2
 8018cb2:	009b      	lsls	r3, r3, #2
 8018cb4:	440b      	add	r3, r1
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d10a      	bne.n	8018cd2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8018cbc:	69bb      	ldr	r3, [r7, #24]
 8018cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cc0:	2201      	movs	r2, #1
 8018cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8018cc6:	43da      	mvns	r2, r3
 8018cc8:	4b11      	ldr	r3, [pc, #68]	@ (8018d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	4013      	ands	r3, r2
 8018cce:	4a10      	ldr	r2, [pc, #64]	@ (8018d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018cd0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018cd2:	69bb      	ldr	r3, [r7, #24]
 8018cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cd6:	2201      	movs	r2, #1
 8018cd8:	409a      	lsls	r2, r3
 8018cda:	4b0d      	ldr	r3, [pc, #52]	@ (8018d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	4313      	orrs	r3, r2
 8018ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8018d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018ce2:	6013      	str	r3, [r2, #0]
 8018ce4:	69bb      	ldr	r3, [r7, #24]
 8018ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ce8:	4613      	mov	r3, r2
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	4413      	add	r3, r2
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	4a06      	ldr	r2, [pc, #24]	@ (8018d0c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018cf2:	441a      	add	r2, r3
 8018cf4:	69bb      	ldr	r3, [r7, #24]
 8018cf6:	3304      	adds	r3, #4
 8018cf8:	4619      	mov	r1, r3
 8018cfa:	4610      	mov	r0, r2
 8018cfc:	f7fd ff1b 	bl	8016b36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d00:	bf00      	nop
 8018d02:	3720      	adds	r7, #32
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd80      	pop	{r7, pc}
 8018d08:	20001838 	.word	0x20001838
 8018d0c:	2000183c 	.word	0x2000183c
 8018d10:	20001940 	.word	0x20001940

08018d14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018d14:	b480      	push	{r7}
 8018d16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018d18:	4b07      	ldr	r3, [pc, #28]	@ (8018d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d004      	beq.n	8018d2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018d20:	4b05      	ldr	r3, [pc, #20]	@ (8018d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018d26:	3201      	adds	r2, #1
 8018d28:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8018d2a:	4b03      	ldr	r3, [pc, #12]	@ (8018d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8018d2c:	681b      	ldr	r3, [r3, #0]
	}
 8018d2e:	4618      	mov	r0, r3
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr
 8018d38:	20001838 	.word	0x20001838

08018d3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b084      	sub	sp, #16
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018d46:	4b29      	ldr	r3, [pc, #164]	@ (8018dec <prvAddCurrentTaskToDelayedList+0xb0>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d4c:	4b28      	ldr	r3, [pc, #160]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	3304      	adds	r3, #4
 8018d52:	4618      	mov	r0, r3
 8018d54:	f7fd ff4c 	bl	8016bf0 <uxListRemove>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d10b      	bne.n	8018d76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018d5e:	4b24      	ldr	r3, [pc, #144]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d64:	2201      	movs	r2, #1
 8018d66:	fa02 f303 	lsl.w	r3, r2, r3
 8018d6a:	43da      	mvns	r2, r3
 8018d6c:	4b21      	ldr	r3, [pc, #132]	@ (8018df4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	4013      	ands	r3, r2
 8018d72:	4a20      	ldr	r2, [pc, #128]	@ (8018df4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018d74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d7c:	d10a      	bne.n	8018d94 <prvAddCurrentTaskToDelayedList+0x58>
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d007      	beq.n	8018d94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018d84:	4b1a      	ldr	r3, [pc, #104]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	3304      	adds	r3, #4
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	481a      	ldr	r0, [pc, #104]	@ (8018df8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018d8e:	f7fd fed2 	bl	8016b36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018d92:	e026      	b.n	8018de2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018d94:	68fa      	ldr	r2, [r7, #12]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	4413      	add	r3, r2
 8018d9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018d9c:	4b14      	ldr	r3, [pc, #80]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	68ba      	ldr	r2, [r7, #8]
 8018da2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018da4:	68ba      	ldr	r2, [r7, #8]
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	429a      	cmp	r2, r3
 8018daa:	d209      	bcs.n	8018dc0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018dac:	4b13      	ldr	r3, [pc, #76]	@ (8018dfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8018dae:	681a      	ldr	r2, [r3, #0]
 8018db0:	4b0f      	ldr	r3, [pc, #60]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	3304      	adds	r3, #4
 8018db6:	4619      	mov	r1, r3
 8018db8:	4610      	mov	r0, r2
 8018dba:	f7fd fee0 	bl	8016b7e <vListInsert>
}
 8018dbe:	e010      	b.n	8018de2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8018e00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	3304      	adds	r3, #4
 8018dca:	4619      	mov	r1, r3
 8018dcc:	4610      	mov	r0, r2
 8018dce:	f7fd fed6 	bl	8016b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8018e04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	68ba      	ldr	r2, [r7, #8]
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d202      	bcs.n	8018de2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018ddc:	4a09      	ldr	r2, [pc, #36]	@ (8018e04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018dde:	68bb      	ldr	r3, [r7, #8]
 8018de0:	6013      	str	r3, [r2, #0]
}
 8018de2:	bf00      	nop
 8018de4:	3710      	adds	r7, #16
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop
 8018dec:	2000193c 	.word	0x2000193c
 8018df0:	20001838 	.word	0x20001838
 8018df4:	20001940 	.word	0x20001940
 8018df8:	20001924 	.word	0x20001924
 8018dfc:	200018f4 	.word	0x200018f4
 8018e00:	200018f0 	.word	0x200018f0
 8018e04:	20001958 	.word	0x20001958

08018e08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018e08:	b480      	push	{r7}
 8018e0a:	b085      	sub	sp, #20
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	3b04      	subs	r3, #4
 8018e18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	3b04      	subs	r3, #4
 8018e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018e28:	68bb      	ldr	r3, [r7, #8]
 8018e2a:	f023 0201 	bic.w	r2, r3, #1
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	3b04      	subs	r3, #4
 8018e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018e38:	4a0c      	ldr	r2, [pc, #48]	@ (8018e6c <pxPortInitialiseStack+0x64>)
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	3b14      	subs	r3, #20
 8018e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018e44:	687a      	ldr	r2, [r7, #4]
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	3b04      	subs	r3, #4
 8018e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	f06f 0202 	mvn.w	r2, #2
 8018e56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	3b20      	subs	r3, #32
 8018e5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018e5e:	68fb      	ldr	r3, [r7, #12]
}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3714      	adds	r7, #20
 8018e64:	46bd      	mov	sp, r7
 8018e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6a:	4770      	bx	lr
 8018e6c:	08018e71 	.word	0x08018e71

08018e70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018e70:	b480      	push	{r7}
 8018e72:	b085      	sub	sp, #20
 8018e74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018e76:	2300      	movs	r3, #0
 8018e78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018e7a:	4b15      	ldr	r3, [pc, #84]	@ (8018ed0 <prvTaskExitError+0x60>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e82:	d00d      	beq.n	8018ea0 <prvTaskExitError+0x30>
	__asm volatile
 8018e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e88:	b672      	cpsid	i
 8018e8a:	f383 8811 	msr	BASEPRI, r3
 8018e8e:	f3bf 8f6f 	isb	sy
 8018e92:	f3bf 8f4f 	dsb	sy
 8018e96:	b662      	cpsie	i
 8018e98:	60fb      	str	r3, [r7, #12]
}
 8018e9a:	bf00      	nop
 8018e9c:	bf00      	nop
 8018e9e:	e7fd      	b.n	8018e9c <prvTaskExitError+0x2c>
	__asm volatile
 8018ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018ea4:	b672      	cpsid	i
 8018ea6:	f383 8811 	msr	BASEPRI, r3
 8018eaa:	f3bf 8f6f 	isb	sy
 8018eae:	f3bf 8f4f 	dsb	sy
 8018eb2:	b662      	cpsie	i
 8018eb4:	60bb      	str	r3, [r7, #8]
}
 8018eb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018eb8:	bf00      	nop
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d0fc      	beq.n	8018eba <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018ec0:	bf00      	nop
 8018ec2:	bf00      	nop
 8018ec4:	3714      	adds	r7, #20
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ecc:	4770      	bx	lr
 8018ece:	bf00      	nop
 8018ed0:	20000074 	.word	0x20000074
	...

08018ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018ee0:	4b07      	ldr	r3, [pc, #28]	@ (8018f00 <pxCurrentTCBConst2>)
 8018ee2:	6819      	ldr	r1, [r3, #0]
 8018ee4:	6808      	ldr	r0, [r1, #0]
 8018ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eea:	f380 8809 	msr	PSP, r0
 8018eee:	f3bf 8f6f 	isb	sy
 8018ef2:	f04f 0000 	mov.w	r0, #0
 8018ef6:	f380 8811 	msr	BASEPRI, r0
 8018efa:	4770      	bx	lr
 8018efc:	f3af 8000 	nop.w

08018f00 <pxCurrentTCBConst2>:
 8018f00:	20001838 	.word	0x20001838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018f04:	bf00      	nop
 8018f06:	bf00      	nop

08018f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018f08:	4808      	ldr	r0, [pc, #32]	@ (8018f2c <prvPortStartFirstTask+0x24>)
 8018f0a:	6800      	ldr	r0, [r0, #0]
 8018f0c:	6800      	ldr	r0, [r0, #0]
 8018f0e:	f380 8808 	msr	MSP, r0
 8018f12:	f04f 0000 	mov.w	r0, #0
 8018f16:	f380 8814 	msr	CONTROL, r0
 8018f1a:	b662      	cpsie	i
 8018f1c:	b661      	cpsie	f
 8018f1e:	f3bf 8f4f 	dsb	sy
 8018f22:	f3bf 8f6f 	isb	sy
 8018f26:	df00      	svc	0
 8018f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018f2a:	bf00      	nop
 8018f2c:	e000ed08 	.word	0xe000ed08

08018f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b084      	sub	sp, #16
 8018f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018f36:	4b37      	ldr	r3, [pc, #220]	@ (8019014 <xPortStartScheduler+0xe4>)
 8018f38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	781b      	ldrb	r3, [r3, #0]
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	22ff      	movs	r2, #255	@ 0xff
 8018f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	781b      	ldrb	r3, [r3, #0]
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018f50:	78fb      	ldrb	r3, [r7, #3]
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018f58:	b2da      	uxtb	r2, r3
 8018f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8019018 <xPortStartScheduler+0xe8>)
 8018f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018f5e:	4b2f      	ldr	r3, [pc, #188]	@ (801901c <xPortStartScheduler+0xec>)
 8018f60:	2207      	movs	r2, #7
 8018f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f64:	e009      	b.n	8018f7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018f66:	4b2d      	ldr	r3, [pc, #180]	@ (801901c <xPortStartScheduler+0xec>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	3b01      	subs	r3, #1
 8018f6c:	4a2b      	ldr	r2, [pc, #172]	@ (801901c <xPortStartScheduler+0xec>)
 8018f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018f70:	78fb      	ldrb	r3, [r7, #3]
 8018f72:	b2db      	uxtb	r3, r3
 8018f74:	005b      	lsls	r3, r3, #1
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f7a:	78fb      	ldrb	r3, [r7, #3]
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018f82:	2b80      	cmp	r3, #128	@ 0x80
 8018f84:	d0ef      	beq.n	8018f66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018f86:	4b25      	ldr	r3, [pc, #148]	@ (801901c <xPortStartScheduler+0xec>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	f1c3 0307 	rsb	r3, r3, #7
 8018f8e:	2b04      	cmp	r3, #4
 8018f90:	d00d      	beq.n	8018fae <xPortStartScheduler+0x7e>
	__asm volatile
 8018f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f96:	b672      	cpsid	i
 8018f98:	f383 8811 	msr	BASEPRI, r3
 8018f9c:	f3bf 8f6f 	isb	sy
 8018fa0:	f3bf 8f4f 	dsb	sy
 8018fa4:	b662      	cpsie	i
 8018fa6:	60bb      	str	r3, [r7, #8]
}
 8018fa8:	bf00      	nop
 8018faa:	bf00      	nop
 8018fac:	e7fd      	b.n	8018faa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018fae:	4b1b      	ldr	r3, [pc, #108]	@ (801901c <xPortStartScheduler+0xec>)
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	021b      	lsls	r3, r3, #8
 8018fb4:	4a19      	ldr	r2, [pc, #100]	@ (801901c <xPortStartScheduler+0xec>)
 8018fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018fb8:	4b18      	ldr	r3, [pc, #96]	@ (801901c <xPortStartScheduler+0xec>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018fc0:	4a16      	ldr	r2, [pc, #88]	@ (801901c <xPortStartScheduler+0xec>)
 8018fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	b2da      	uxtb	r2, r3
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018fcc:	4b14      	ldr	r3, [pc, #80]	@ (8019020 <xPortStartScheduler+0xf0>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	4a13      	ldr	r2, [pc, #76]	@ (8019020 <xPortStartScheduler+0xf0>)
 8018fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018fd8:	4b11      	ldr	r3, [pc, #68]	@ (8019020 <xPortStartScheduler+0xf0>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	4a10      	ldr	r2, [pc, #64]	@ (8019020 <xPortStartScheduler+0xf0>)
 8018fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018fe4:	f000 f8dc 	bl	80191a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8019024 <xPortStartScheduler+0xf4>)
 8018fea:	2200      	movs	r2, #0
 8018fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018fee:	f000 f8fb 	bl	80191e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8019028 <xPortStartScheduler+0xf8>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8019028 <xPortStartScheduler+0xf8>)
 8018ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018ffe:	f7ff ff83 	bl	8018f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019002:	f7ff fa47 	bl	8018494 <vTaskSwitchContext>
	prvTaskExitError();
 8019006:	f7ff ff33 	bl	8018e70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801900a:	2300      	movs	r3, #0
}
 801900c:	4618      	mov	r0, r3
 801900e:	3710      	adds	r7, #16
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}
 8019014:	e000e400 	.word	0xe000e400
 8019018:	20001964 	.word	0x20001964
 801901c:	20001968 	.word	0x20001968
 8019020:	e000ed20 	.word	0xe000ed20
 8019024:	20000074 	.word	0x20000074
 8019028:	e000ef34 	.word	0xe000ef34

0801902c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801902c:	b480      	push	{r7}
 801902e:	b083      	sub	sp, #12
 8019030:	af00      	add	r7, sp, #0
	__asm volatile
 8019032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019036:	b672      	cpsid	i
 8019038:	f383 8811 	msr	BASEPRI, r3
 801903c:	f3bf 8f6f 	isb	sy
 8019040:	f3bf 8f4f 	dsb	sy
 8019044:	b662      	cpsie	i
 8019046:	607b      	str	r3, [r7, #4]
}
 8019048:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801904a:	4b11      	ldr	r3, [pc, #68]	@ (8019090 <vPortEnterCritical+0x64>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	3301      	adds	r3, #1
 8019050:	4a0f      	ldr	r2, [pc, #60]	@ (8019090 <vPortEnterCritical+0x64>)
 8019052:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019054:	4b0e      	ldr	r3, [pc, #56]	@ (8019090 <vPortEnterCritical+0x64>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	2b01      	cmp	r3, #1
 801905a:	d112      	bne.n	8019082 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801905c:	4b0d      	ldr	r3, [pc, #52]	@ (8019094 <vPortEnterCritical+0x68>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	b2db      	uxtb	r3, r3
 8019062:	2b00      	cmp	r3, #0
 8019064:	d00d      	beq.n	8019082 <vPortEnterCritical+0x56>
	__asm volatile
 8019066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801906a:	b672      	cpsid	i
 801906c:	f383 8811 	msr	BASEPRI, r3
 8019070:	f3bf 8f6f 	isb	sy
 8019074:	f3bf 8f4f 	dsb	sy
 8019078:	b662      	cpsie	i
 801907a:	603b      	str	r3, [r7, #0]
}
 801907c:	bf00      	nop
 801907e:	bf00      	nop
 8019080:	e7fd      	b.n	801907e <vPortEnterCritical+0x52>
	}
}
 8019082:	bf00      	nop
 8019084:	370c      	adds	r7, #12
 8019086:	46bd      	mov	sp, r7
 8019088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908c:	4770      	bx	lr
 801908e:	bf00      	nop
 8019090:	20000074 	.word	0x20000074
 8019094:	e000ed04 	.word	0xe000ed04

08019098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019098:	b480      	push	{r7}
 801909a:	b083      	sub	sp, #12
 801909c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801909e:	4b13      	ldr	r3, [pc, #76]	@ (80190ec <vPortExitCritical+0x54>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d10d      	bne.n	80190c2 <vPortExitCritical+0x2a>
	__asm volatile
 80190a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190aa:	b672      	cpsid	i
 80190ac:	f383 8811 	msr	BASEPRI, r3
 80190b0:	f3bf 8f6f 	isb	sy
 80190b4:	f3bf 8f4f 	dsb	sy
 80190b8:	b662      	cpsie	i
 80190ba:	607b      	str	r3, [r7, #4]
}
 80190bc:	bf00      	nop
 80190be:	bf00      	nop
 80190c0:	e7fd      	b.n	80190be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80190c2:	4b0a      	ldr	r3, [pc, #40]	@ (80190ec <vPortExitCritical+0x54>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	3b01      	subs	r3, #1
 80190c8:	4a08      	ldr	r2, [pc, #32]	@ (80190ec <vPortExitCritical+0x54>)
 80190ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80190cc:	4b07      	ldr	r3, [pc, #28]	@ (80190ec <vPortExitCritical+0x54>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d105      	bne.n	80190e0 <vPortExitCritical+0x48>
 80190d4:	2300      	movs	r3, #0
 80190d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	f383 8811 	msr	BASEPRI, r3
}
 80190de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80190e0:	bf00      	nop
 80190e2:	370c      	adds	r7, #12
 80190e4:	46bd      	mov	sp, r7
 80190e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ea:	4770      	bx	lr
 80190ec:	20000074 	.word	0x20000074

080190f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80190f0:	f3ef 8009 	mrs	r0, PSP
 80190f4:	f3bf 8f6f 	isb	sy
 80190f8:	4b15      	ldr	r3, [pc, #84]	@ (8019150 <pxCurrentTCBConst>)
 80190fa:	681a      	ldr	r2, [r3, #0]
 80190fc:	f01e 0f10 	tst.w	lr, #16
 8019100:	bf08      	it	eq
 8019102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801910a:	6010      	str	r0, [r2, #0]
 801910c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019114:	b672      	cpsid	i
 8019116:	f380 8811 	msr	BASEPRI, r0
 801911a:	f3bf 8f4f 	dsb	sy
 801911e:	f3bf 8f6f 	isb	sy
 8019122:	b662      	cpsie	i
 8019124:	f7ff f9b6 	bl	8018494 <vTaskSwitchContext>
 8019128:	f04f 0000 	mov.w	r0, #0
 801912c:	f380 8811 	msr	BASEPRI, r0
 8019130:	bc09      	pop	{r0, r3}
 8019132:	6819      	ldr	r1, [r3, #0]
 8019134:	6808      	ldr	r0, [r1, #0]
 8019136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913a:	f01e 0f10 	tst.w	lr, #16
 801913e:	bf08      	it	eq
 8019140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019144:	f380 8809 	msr	PSP, r0
 8019148:	f3bf 8f6f 	isb	sy
 801914c:	4770      	bx	lr
 801914e:	bf00      	nop

08019150 <pxCurrentTCBConst>:
 8019150:	20001838 	.word	0x20001838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019154:	bf00      	nop
 8019156:	bf00      	nop

08019158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
	__asm volatile
 801915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019162:	b672      	cpsid	i
 8019164:	f383 8811 	msr	BASEPRI, r3
 8019168:	f3bf 8f6f 	isb	sy
 801916c:	f3bf 8f4f 	dsb	sy
 8019170:	b662      	cpsie	i
 8019172:	607b      	str	r3, [r7, #4]
}
 8019174:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019176:	f7ff f8d1 	bl	801831c <xTaskIncrementTick>
 801917a:	4603      	mov	r3, r0
 801917c:	2b00      	cmp	r3, #0
 801917e:	d003      	beq.n	8019188 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019180:	4b06      	ldr	r3, [pc, #24]	@ (801919c <SysTick_Handler+0x44>)
 8019182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019186:	601a      	str	r2, [r3, #0]
 8019188:	2300      	movs	r3, #0
 801918a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	f383 8811 	msr	BASEPRI, r3
}
 8019192:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019194:	bf00      	nop
 8019196:	3708      	adds	r7, #8
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}
 801919c:	e000ed04 	.word	0xe000ed04

080191a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80191a0:	b480      	push	{r7}
 80191a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80191a4:	4b0b      	ldr	r3, [pc, #44]	@ (80191d4 <vPortSetupTimerInterrupt+0x34>)
 80191a6:	2200      	movs	r2, #0
 80191a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80191aa:	4b0b      	ldr	r3, [pc, #44]	@ (80191d8 <vPortSetupTimerInterrupt+0x38>)
 80191ac:	2200      	movs	r2, #0
 80191ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80191b0:	4b0a      	ldr	r3, [pc, #40]	@ (80191dc <vPortSetupTimerInterrupt+0x3c>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	4a0a      	ldr	r2, [pc, #40]	@ (80191e0 <vPortSetupTimerInterrupt+0x40>)
 80191b6:	fba2 2303 	umull	r2, r3, r2, r3
 80191ba:	099b      	lsrs	r3, r3, #6
 80191bc:	4a09      	ldr	r2, [pc, #36]	@ (80191e4 <vPortSetupTimerInterrupt+0x44>)
 80191be:	3b01      	subs	r3, #1
 80191c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80191c2:	4b04      	ldr	r3, [pc, #16]	@ (80191d4 <vPortSetupTimerInterrupt+0x34>)
 80191c4:	2207      	movs	r2, #7
 80191c6:	601a      	str	r2, [r3, #0]
}
 80191c8:	bf00      	nop
 80191ca:	46bd      	mov	sp, r7
 80191cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d0:	4770      	bx	lr
 80191d2:	bf00      	nop
 80191d4:	e000e010 	.word	0xe000e010
 80191d8:	e000e018 	.word	0xe000e018
 80191dc:	20000000 	.word	0x20000000
 80191e0:	10624dd3 	.word	0x10624dd3
 80191e4:	e000e014 	.word	0xe000e014

080191e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80191e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80191f8 <vPortEnableVFP+0x10>
 80191ec:	6801      	ldr	r1, [r0, #0]
 80191ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80191f2:	6001      	str	r1, [r0, #0]
 80191f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80191f6:	bf00      	nop
 80191f8:	e000ed88 	.word	0xe000ed88

080191fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80191fc:	b480      	push	{r7}
 80191fe:	b085      	sub	sp, #20
 8019200:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019202:	f3ef 8305 	mrs	r3, IPSR
 8019206:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	2b0f      	cmp	r3, #15
 801920c:	d917      	bls.n	801923e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801920e:	4a1a      	ldr	r2, [pc, #104]	@ (8019278 <vPortValidateInterruptPriority+0x7c>)
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	4413      	add	r3, r2
 8019214:	781b      	ldrb	r3, [r3, #0]
 8019216:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019218:	4b18      	ldr	r3, [pc, #96]	@ (801927c <vPortValidateInterruptPriority+0x80>)
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	7afa      	ldrb	r2, [r7, #11]
 801921e:	429a      	cmp	r2, r3
 8019220:	d20d      	bcs.n	801923e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8019222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019226:	b672      	cpsid	i
 8019228:	f383 8811 	msr	BASEPRI, r3
 801922c:	f3bf 8f6f 	isb	sy
 8019230:	f3bf 8f4f 	dsb	sy
 8019234:	b662      	cpsie	i
 8019236:	607b      	str	r3, [r7, #4]
}
 8019238:	bf00      	nop
 801923a:	bf00      	nop
 801923c:	e7fd      	b.n	801923a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801923e:	4b10      	ldr	r3, [pc, #64]	@ (8019280 <vPortValidateInterruptPriority+0x84>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8019246:	4b0f      	ldr	r3, [pc, #60]	@ (8019284 <vPortValidateInterruptPriority+0x88>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	429a      	cmp	r2, r3
 801924c:	d90d      	bls.n	801926a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019252:	b672      	cpsid	i
 8019254:	f383 8811 	msr	BASEPRI, r3
 8019258:	f3bf 8f6f 	isb	sy
 801925c:	f3bf 8f4f 	dsb	sy
 8019260:	b662      	cpsie	i
 8019262:	603b      	str	r3, [r7, #0]
}
 8019264:	bf00      	nop
 8019266:	bf00      	nop
 8019268:	e7fd      	b.n	8019266 <vPortValidateInterruptPriority+0x6a>
	}
 801926a:	bf00      	nop
 801926c:	3714      	adds	r7, #20
 801926e:	46bd      	mov	sp, r7
 8019270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019274:	4770      	bx	lr
 8019276:	bf00      	nop
 8019278:	e000e3f0 	.word	0xe000e3f0
 801927c:	20001964 	.word	0x20001964
 8019280:	e000ed0c 	.word	0xe000ed0c
 8019284:	20001968 	.word	0x20001968

08019288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b08a      	sub	sp, #40	@ 0x28
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019290:	2300      	movs	r3, #0
 8019292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019294:	f7fe ff72 	bl	801817c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019298:	4b5f      	ldr	r3, [pc, #380]	@ (8019418 <pvPortMalloc+0x190>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d101      	bne.n	80192a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80192a0:	f000 f924 	bl	80194ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80192a4:	4b5d      	ldr	r3, [pc, #372]	@ (801941c <pvPortMalloc+0x194>)
 80192a6:	681a      	ldr	r2, [r3, #0]
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	4013      	ands	r3, r2
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	f040 8094 	bne.w	80193da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d020      	beq.n	80192fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80192b8:	2208      	movs	r2, #8
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	4413      	add	r3, r2
 80192be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	f003 0307 	and.w	r3, r3, #7
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d017      	beq.n	80192fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f023 0307 	bic.w	r3, r3, #7
 80192d0:	3308      	adds	r3, #8
 80192d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	f003 0307 	and.w	r3, r3, #7
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d00d      	beq.n	80192fa <pvPortMalloc+0x72>
	__asm volatile
 80192de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192e2:	b672      	cpsid	i
 80192e4:	f383 8811 	msr	BASEPRI, r3
 80192e8:	f3bf 8f6f 	isb	sy
 80192ec:	f3bf 8f4f 	dsb	sy
 80192f0:	b662      	cpsie	i
 80192f2:	617b      	str	r3, [r7, #20]
}
 80192f4:	bf00      	nop
 80192f6:	bf00      	nop
 80192f8:	e7fd      	b.n	80192f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d06c      	beq.n	80193da <pvPortMalloc+0x152>
 8019300:	4b47      	ldr	r3, [pc, #284]	@ (8019420 <pvPortMalloc+0x198>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	687a      	ldr	r2, [r7, #4]
 8019306:	429a      	cmp	r2, r3
 8019308:	d867      	bhi.n	80193da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801930a:	4b46      	ldr	r3, [pc, #280]	@ (8019424 <pvPortMalloc+0x19c>)
 801930c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801930e:	4b45      	ldr	r3, [pc, #276]	@ (8019424 <pvPortMalloc+0x19c>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019314:	e004      	b.n	8019320 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8019316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019322:	685b      	ldr	r3, [r3, #4]
 8019324:	687a      	ldr	r2, [r7, #4]
 8019326:	429a      	cmp	r2, r3
 8019328:	d903      	bls.n	8019332 <pvPortMalloc+0xaa>
 801932a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d1f1      	bne.n	8019316 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019332:	4b39      	ldr	r3, [pc, #228]	@ (8019418 <pvPortMalloc+0x190>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019338:	429a      	cmp	r2, r3
 801933a:	d04e      	beq.n	80193da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801933c:	6a3b      	ldr	r3, [r7, #32]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	2208      	movs	r2, #8
 8019342:	4413      	add	r3, r2
 8019344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019348:	681a      	ldr	r2, [r3, #0]
 801934a:	6a3b      	ldr	r3, [r7, #32]
 801934c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019350:	685a      	ldr	r2, [r3, #4]
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	1ad2      	subs	r2, r2, r3
 8019356:	2308      	movs	r3, #8
 8019358:	005b      	lsls	r3, r3, #1
 801935a:	429a      	cmp	r2, r3
 801935c:	d922      	bls.n	80193a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801935e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	4413      	add	r3, r2
 8019364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019366:	69bb      	ldr	r3, [r7, #24]
 8019368:	f003 0307 	and.w	r3, r3, #7
 801936c:	2b00      	cmp	r3, #0
 801936e:	d00d      	beq.n	801938c <pvPortMalloc+0x104>
	__asm volatile
 8019370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019374:	b672      	cpsid	i
 8019376:	f383 8811 	msr	BASEPRI, r3
 801937a:	f3bf 8f6f 	isb	sy
 801937e:	f3bf 8f4f 	dsb	sy
 8019382:	b662      	cpsie	i
 8019384:	613b      	str	r3, [r7, #16]
}
 8019386:	bf00      	nop
 8019388:	bf00      	nop
 801938a:	e7fd      	b.n	8019388 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938e:	685a      	ldr	r2, [r3, #4]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	1ad2      	subs	r2, r2, r3
 8019394:	69bb      	ldr	r3, [r7, #24]
 8019396:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801939e:	69b8      	ldr	r0, [r7, #24]
 80193a0:	f000 f906 	bl	80195b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80193a4:	4b1e      	ldr	r3, [pc, #120]	@ (8019420 <pvPortMalloc+0x198>)
 80193a6:	681a      	ldr	r2, [r3, #0]
 80193a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	1ad3      	subs	r3, r2, r3
 80193ae:	4a1c      	ldr	r2, [pc, #112]	@ (8019420 <pvPortMalloc+0x198>)
 80193b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80193b2:	4b1b      	ldr	r3, [pc, #108]	@ (8019420 <pvPortMalloc+0x198>)
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	4b1c      	ldr	r3, [pc, #112]	@ (8019428 <pvPortMalloc+0x1a0>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d203      	bcs.n	80193c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80193be:	4b18      	ldr	r3, [pc, #96]	@ (8019420 <pvPortMalloc+0x198>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	4a19      	ldr	r2, [pc, #100]	@ (8019428 <pvPortMalloc+0x1a0>)
 80193c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80193c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193c8:	685a      	ldr	r2, [r3, #4]
 80193ca:	4b14      	ldr	r3, [pc, #80]	@ (801941c <pvPortMalloc+0x194>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	431a      	orrs	r2, r3
 80193d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80193d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193d6:	2200      	movs	r2, #0
 80193d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80193da:	f7fe fedd 	bl	8018198 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d101      	bne.n	80193e8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80193e4:	f7e7 ffd9 	bl	800139a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80193e8:	69fb      	ldr	r3, [r7, #28]
 80193ea:	f003 0307 	and.w	r3, r3, #7
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d00d      	beq.n	801940e <pvPortMalloc+0x186>
	__asm volatile
 80193f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193f6:	b672      	cpsid	i
 80193f8:	f383 8811 	msr	BASEPRI, r3
 80193fc:	f3bf 8f6f 	isb	sy
 8019400:	f3bf 8f4f 	dsb	sy
 8019404:	b662      	cpsie	i
 8019406:	60fb      	str	r3, [r7, #12]
}
 8019408:	bf00      	nop
 801940a:	bf00      	nop
 801940c:	e7fd      	b.n	801940a <pvPortMalloc+0x182>
	return pvReturn;
 801940e:	69fb      	ldr	r3, [r7, #28]
}
 8019410:	4618      	mov	r0, r3
 8019412:	3728      	adds	r7, #40	@ 0x28
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}
 8019418:	20009974 	.word	0x20009974
 801941c:	20009980 	.word	0x20009980
 8019420:	20009978 	.word	0x20009978
 8019424:	2000996c 	.word	0x2000996c
 8019428:	2000997c 	.word	0x2000997c

0801942c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b086      	sub	sp, #24
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d04e      	beq.n	80194dc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801943e:	2308      	movs	r3, #8
 8019440:	425b      	negs	r3, r3
 8019442:	697a      	ldr	r2, [r7, #20]
 8019444:	4413      	add	r3, r2
 8019446:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019448:	697b      	ldr	r3, [r7, #20]
 801944a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801944c:	693b      	ldr	r3, [r7, #16]
 801944e:	685a      	ldr	r2, [r3, #4]
 8019450:	4b24      	ldr	r3, [pc, #144]	@ (80194e4 <vPortFree+0xb8>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	4013      	ands	r3, r2
 8019456:	2b00      	cmp	r3, #0
 8019458:	d10d      	bne.n	8019476 <vPortFree+0x4a>
	__asm volatile
 801945a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801945e:	b672      	cpsid	i
 8019460:	f383 8811 	msr	BASEPRI, r3
 8019464:	f3bf 8f6f 	isb	sy
 8019468:	f3bf 8f4f 	dsb	sy
 801946c:	b662      	cpsie	i
 801946e:	60fb      	str	r3, [r7, #12]
}
 8019470:	bf00      	nop
 8019472:	bf00      	nop
 8019474:	e7fd      	b.n	8019472 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019476:	693b      	ldr	r3, [r7, #16]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	2b00      	cmp	r3, #0
 801947c:	d00d      	beq.n	801949a <vPortFree+0x6e>
	__asm volatile
 801947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019482:	b672      	cpsid	i
 8019484:	f383 8811 	msr	BASEPRI, r3
 8019488:	f3bf 8f6f 	isb	sy
 801948c:	f3bf 8f4f 	dsb	sy
 8019490:	b662      	cpsie	i
 8019492:	60bb      	str	r3, [r7, #8]
}
 8019494:	bf00      	nop
 8019496:	bf00      	nop
 8019498:	e7fd      	b.n	8019496 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	685a      	ldr	r2, [r3, #4]
 801949e:	4b11      	ldr	r3, [pc, #68]	@ (80194e4 <vPortFree+0xb8>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	4013      	ands	r3, r2
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d019      	beq.n	80194dc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80194a8:	693b      	ldr	r3, [r7, #16]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d115      	bne.n	80194dc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80194b0:	693b      	ldr	r3, [r7, #16]
 80194b2:	685a      	ldr	r2, [r3, #4]
 80194b4:	4b0b      	ldr	r3, [pc, #44]	@ (80194e4 <vPortFree+0xb8>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	43db      	mvns	r3, r3
 80194ba:	401a      	ands	r2, r3
 80194bc:	693b      	ldr	r3, [r7, #16]
 80194be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80194c0:	f7fe fe5c 	bl	801817c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80194c4:	693b      	ldr	r3, [r7, #16]
 80194c6:	685a      	ldr	r2, [r3, #4]
 80194c8:	4b07      	ldr	r3, [pc, #28]	@ (80194e8 <vPortFree+0xbc>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4413      	add	r3, r2
 80194ce:	4a06      	ldr	r2, [pc, #24]	@ (80194e8 <vPortFree+0xbc>)
 80194d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80194d2:	6938      	ldr	r0, [r7, #16]
 80194d4:	f000 f86c 	bl	80195b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80194d8:	f7fe fe5e 	bl	8018198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80194dc:	bf00      	nop
 80194de:	3718      	adds	r7, #24
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}
 80194e4:	20009980 	.word	0x20009980
 80194e8:	20009978 	.word	0x20009978

080194ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80194ec:	b480      	push	{r7}
 80194ee:	b085      	sub	sp, #20
 80194f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80194f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80194f8:	4b27      	ldr	r3, [pc, #156]	@ (8019598 <prvHeapInit+0xac>)
 80194fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	f003 0307 	and.w	r3, r3, #7
 8019502:	2b00      	cmp	r3, #0
 8019504:	d00c      	beq.n	8019520 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	3307      	adds	r3, #7
 801950a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	f023 0307 	bic.w	r3, r3, #7
 8019512:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019514:	68ba      	ldr	r2, [r7, #8]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	1ad3      	subs	r3, r2, r3
 801951a:	4a1f      	ldr	r2, [pc, #124]	@ (8019598 <prvHeapInit+0xac>)
 801951c:	4413      	add	r3, r2
 801951e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019524:	4a1d      	ldr	r2, [pc, #116]	@ (801959c <prvHeapInit+0xb0>)
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801952a:	4b1c      	ldr	r3, [pc, #112]	@ (801959c <prvHeapInit+0xb0>)
 801952c:	2200      	movs	r2, #0
 801952e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	68ba      	ldr	r2, [r7, #8]
 8019534:	4413      	add	r3, r2
 8019536:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019538:	2208      	movs	r2, #8
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	1a9b      	subs	r3, r3, r2
 801953e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	f023 0307 	bic.w	r3, r3, #7
 8019546:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	4a15      	ldr	r2, [pc, #84]	@ (80195a0 <prvHeapInit+0xb4>)
 801954c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801954e:	4b14      	ldr	r3, [pc, #80]	@ (80195a0 <prvHeapInit+0xb4>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	2200      	movs	r2, #0
 8019554:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019556:	4b12      	ldr	r3, [pc, #72]	@ (80195a0 <prvHeapInit+0xb4>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	2200      	movs	r2, #0
 801955c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	68fa      	ldr	r2, [r7, #12]
 8019566:	1ad2      	subs	r2, r2, r3
 8019568:	683b      	ldr	r3, [r7, #0]
 801956a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801956c:	4b0c      	ldr	r3, [pc, #48]	@ (80195a0 <prvHeapInit+0xb4>)
 801956e:	681a      	ldr	r2, [r3, #0]
 8019570:	683b      	ldr	r3, [r7, #0]
 8019572:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019574:	683b      	ldr	r3, [r7, #0]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	4a0a      	ldr	r2, [pc, #40]	@ (80195a4 <prvHeapInit+0xb8>)
 801957a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	685b      	ldr	r3, [r3, #4]
 8019580:	4a09      	ldr	r2, [pc, #36]	@ (80195a8 <prvHeapInit+0xbc>)
 8019582:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019584:	4b09      	ldr	r3, [pc, #36]	@ (80195ac <prvHeapInit+0xc0>)
 8019586:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801958a:	601a      	str	r2, [r3, #0]
}
 801958c:	bf00      	nop
 801958e:	3714      	adds	r7, #20
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr
 8019598:	2000196c 	.word	0x2000196c
 801959c:	2000996c 	.word	0x2000996c
 80195a0:	20009974 	.word	0x20009974
 80195a4:	2000997c 	.word	0x2000997c
 80195a8:	20009978 	.word	0x20009978
 80195ac:	20009980 	.word	0x20009980

080195b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80195b0:	b480      	push	{r7}
 80195b2:	b085      	sub	sp, #20
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80195b8:	4b28      	ldr	r3, [pc, #160]	@ (801965c <prvInsertBlockIntoFreeList+0xac>)
 80195ba:	60fb      	str	r3, [r7, #12]
 80195bc:	e002      	b.n	80195c4 <prvInsertBlockIntoFreeList+0x14>
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	60fb      	str	r3, [r7, #12]
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	687a      	ldr	r2, [r7, #4]
 80195ca:	429a      	cmp	r2, r3
 80195cc:	d8f7      	bhi.n	80195be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	685b      	ldr	r3, [r3, #4]
 80195d6:	68ba      	ldr	r2, [r7, #8]
 80195d8:	4413      	add	r3, r2
 80195da:	687a      	ldr	r2, [r7, #4]
 80195dc:	429a      	cmp	r2, r3
 80195de:	d108      	bne.n	80195f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	685a      	ldr	r2, [r3, #4]
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	441a      	add	r2, r3
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	685b      	ldr	r3, [r3, #4]
 80195fa:	68ba      	ldr	r2, [r7, #8]
 80195fc:	441a      	add	r2, r3
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	429a      	cmp	r2, r3
 8019604:	d118      	bne.n	8019638 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	681a      	ldr	r2, [r3, #0]
 801960a:	4b15      	ldr	r3, [pc, #84]	@ (8019660 <prvInsertBlockIntoFreeList+0xb0>)
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	429a      	cmp	r2, r3
 8019610:	d00d      	beq.n	801962e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	685a      	ldr	r2, [r3, #4]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	685b      	ldr	r3, [r3, #4]
 801961c:	441a      	add	r2, r3
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	681a      	ldr	r2, [r3, #0]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	601a      	str	r2, [r3, #0]
 801962c:	e008      	b.n	8019640 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801962e:	4b0c      	ldr	r3, [pc, #48]	@ (8019660 <prvInsertBlockIntoFreeList+0xb0>)
 8019630:	681a      	ldr	r2, [r3, #0]
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	601a      	str	r2, [r3, #0]
 8019636:	e003      	b.n	8019640 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	681a      	ldr	r2, [r3, #0]
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019640:	68fa      	ldr	r2, [r7, #12]
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	429a      	cmp	r2, r3
 8019646:	d002      	beq.n	801964e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	687a      	ldr	r2, [r7, #4]
 801964c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801964e:	bf00      	nop
 8019650:	3714      	adds	r7, #20
 8019652:	46bd      	mov	sp, r7
 8019654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019658:	4770      	bx	lr
 801965a:	bf00      	nop
 801965c:	2000996c 	.word	0x2000996c
 8019660:	20009974 	.word	0x20009974

08019664 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019668:	2201      	movs	r2, #1
 801966a:	490e      	ldr	r1, [pc, #56]	@ (80196a4 <MX_USB_HOST_Init+0x40>)
 801966c:	480e      	ldr	r0, [pc, #56]	@ (80196a8 <MX_USB_HOST_Init+0x44>)
 801966e:	f7f8 fde1 	bl	8012234 <USBH_Init>
 8019672:	4603      	mov	r3, r0
 8019674:	2b00      	cmp	r3, #0
 8019676:	d001      	beq.n	801967c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019678:	f7e9 fe2a 	bl	80032d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801967c:	490b      	ldr	r1, [pc, #44]	@ (80196ac <MX_USB_HOST_Init+0x48>)
 801967e:	480a      	ldr	r0, [pc, #40]	@ (80196a8 <MX_USB_HOST_Init+0x44>)
 8019680:	f7f8 feab 	bl	80123da <USBH_RegisterClass>
 8019684:	4603      	mov	r3, r0
 8019686:	2b00      	cmp	r3, #0
 8019688:	d001      	beq.n	801968e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801968a:	f7e9 fe21 	bl	80032d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801968e:	4806      	ldr	r0, [pc, #24]	@ (80196a8 <MX_USB_HOST_Init+0x44>)
 8019690:	f7f8 ff2f 	bl	80124f2 <USBH_Start>
 8019694:	4603      	mov	r3, r0
 8019696:	2b00      	cmp	r3, #0
 8019698:	d001      	beq.n	801969e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801969a:	f7e9 fe19 	bl	80032d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801969e:	bf00      	nop
 80196a0:	bd80      	pop	{r7, pc}
 80196a2:	bf00      	nop
 80196a4:	080196b1 	.word	0x080196b1
 80196a8:	20009984 	.word	0x20009984
 80196ac:	20000054 	.word	0x20000054

080196b0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80196b0:	b480      	push	{r7}
 80196b2:	b083      	sub	sp, #12
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
 80196b8:	460b      	mov	r3, r1
 80196ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80196bc:	78fb      	ldrb	r3, [r7, #3]
 80196be:	3b01      	subs	r3, #1
 80196c0:	2b04      	cmp	r3, #4
 80196c2:	d819      	bhi.n	80196f8 <USBH_UserProcess+0x48>
 80196c4:	a201      	add	r2, pc, #4	@ (adr r2, 80196cc <USBH_UserProcess+0x1c>)
 80196c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196ca:	bf00      	nop
 80196cc:	080196f9 	.word	0x080196f9
 80196d0:	080196e9 	.word	0x080196e9
 80196d4:	080196f9 	.word	0x080196f9
 80196d8:	080196f1 	.word	0x080196f1
 80196dc:	080196e1 	.word	0x080196e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80196e0:	4b09      	ldr	r3, [pc, #36]	@ (8019708 <USBH_UserProcess+0x58>)
 80196e2:	2203      	movs	r2, #3
 80196e4:	701a      	strb	r2, [r3, #0]
  break;
 80196e6:	e008      	b.n	80196fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80196e8:	4b07      	ldr	r3, [pc, #28]	@ (8019708 <USBH_UserProcess+0x58>)
 80196ea:	2202      	movs	r2, #2
 80196ec:	701a      	strb	r2, [r3, #0]
  break;
 80196ee:	e004      	b.n	80196fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80196f0:	4b05      	ldr	r3, [pc, #20]	@ (8019708 <USBH_UserProcess+0x58>)
 80196f2:	2201      	movs	r2, #1
 80196f4:	701a      	strb	r2, [r3, #0]
  break;
 80196f6:	e000      	b.n	80196fa <USBH_UserProcess+0x4a>

  default:
  break;
 80196f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80196fa:	bf00      	nop
 80196fc:	370c      	adds	r7, #12
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr
 8019706:	bf00      	nop
 8019708:	20009d68 	.word	0x20009d68

0801970c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b08a      	sub	sp, #40	@ 0x28
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019714:	f107 0314 	add.w	r3, r7, #20
 8019718:	2200      	movs	r2, #0
 801971a:	601a      	str	r2, [r3, #0]
 801971c:	605a      	str	r2, [r3, #4]
 801971e:	609a      	str	r2, [r3, #8]
 8019720:	60da      	str	r2, [r3, #12]
 8019722:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801972c:	d13c      	bne.n	80197a8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801972e:	4b20      	ldr	r3, [pc, #128]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 8019730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019732:	4a1f      	ldr	r2, [pc, #124]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 8019734:	f043 0301 	orr.w	r3, r3, #1
 8019738:	6313      	str	r3, [r2, #48]	@ 0x30
 801973a:	4b1d      	ldr	r3, [pc, #116]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 801973c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801973e:	f003 0301 	and.w	r3, r3, #1
 8019742:	613b      	str	r3, [r7, #16]
 8019744:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8019746:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801974a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801974c:	2302      	movs	r3, #2
 801974e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019750:	2300      	movs	r3, #0
 8019752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019754:	2303      	movs	r3, #3
 8019756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019758:	230a      	movs	r3, #10
 801975a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801975c:	f107 0314 	add.w	r3, r7, #20
 8019760:	4619      	mov	r1, r3
 8019762:	4814      	ldr	r0, [pc, #80]	@ (80197b4 <HAL_HCD_MspInit+0xa8>)
 8019764:	f7ed fb3a 	bl	8006ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019768:	4b11      	ldr	r3, [pc, #68]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 801976a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801976c:	4a10      	ldr	r2, [pc, #64]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 801976e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019772:	6353      	str	r3, [r2, #52]	@ 0x34
 8019774:	4b0e      	ldr	r3, [pc, #56]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 8019776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801977c:	60fb      	str	r3, [r7, #12]
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	4b0b      	ldr	r3, [pc, #44]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 8019782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019784:	4a0a      	ldr	r2, [pc, #40]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 8019786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801978a:	6453      	str	r3, [r2, #68]	@ 0x44
 801978c:	4b08      	ldr	r3, [pc, #32]	@ (80197b0 <HAL_HCD_MspInit+0xa4>)
 801978e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019794:	60bb      	str	r3, [r7, #8]
 8019796:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019798:	2200      	movs	r2, #0
 801979a:	2105      	movs	r1, #5
 801979c:	2043      	movs	r0, #67	@ 0x43
 801979e:	f7eb ffd9 	bl	8005754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80197a2:	2043      	movs	r0, #67	@ 0x43
 80197a4:	f7eb fff2 	bl	800578c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80197a8:	bf00      	nop
 80197aa:	3728      	adds	r7, #40	@ 0x28
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	40023800 	.word	0x40023800
 80197b4:	40020000 	.word	0x40020000

080197b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b082      	sub	sp, #8
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80197c6:	4618      	mov	r0, r3
 80197c8:	f7f9 facb 	bl	8012d62 <USBH_LL_IncTimer>
}
 80197cc:	bf00      	nop
 80197ce:	3708      	adds	r7, #8
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}

080197d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80197d4:	b580      	push	{r7, lr}
 80197d6:	b082      	sub	sp, #8
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7f9 fb0b 	bl	8012dfe <USBH_LL_Connect>
}
 80197e8:	bf00      	nop
 80197ea:	3708      	adds	r7, #8
 80197ec:	46bd      	mov	sp, r7
 80197ee:	bd80      	pop	{r7, pc}

080197f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b082      	sub	sp, #8
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80197fe:	4618      	mov	r0, r3
 8019800:	f7f9 fb18 	bl	8012e34 <USBH_LL_Disconnect>
}
 8019804:	bf00      	nop
 8019806:	3708      	adds	r7, #8
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}

0801980c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b082      	sub	sp, #8
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	460b      	mov	r3, r1
 8019816:	70fb      	strb	r3, [r7, #3]
 8019818:	4613      	mov	r3, r2
 801981a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019822:	4618      	mov	r0, r3
 8019824:	f7f9 fb6c 	bl	8012f00 <USBH_LL_NotifyURBChange>
#endif
}
 8019828:	bf00      	nop
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b082      	sub	sp, #8
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801983e:	4618      	mov	r0, r3
 8019840:	f7f9 fab9 	bl	8012db6 <USBH_LL_PortEnabled>
}
 8019844:	bf00      	nop
 8019846:	3708      	adds	r7, #8
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}

0801984c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b082      	sub	sp, #8
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801985a:	4618      	mov	r0, r3
 801985c:	f7f9 fabd 	bl	8012dda <USBH_LL_PortDisabled>
}
 8019860:	bf00      	nop
 8019862:	3708      	adds	r7, #8
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}

08019868 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019876:	2b01      	cmp	r3, #1
 8019878:	d12a      	bne.n	80198d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801987a:	4a18      	ldr	r2, [pc, #96]	@ (80198dc <USBH_LL_Init+0x74>)
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	4a15      	ldr	r2, [pc, #84]	@ (80198dc <USBH_LL_Init+0x74>)
 8019886:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801988a:	4b14      	ldr	r3, [pc, #80]	@ (80198dc <USBH_LL_Init+0x74>)
 801988c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8019890:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019892:	4b12      	ldr	r3, [pc, #72]	@ (80198dc <USBH_LL_Init+0x74>)
 8019894:	2208      	movs	r2, #8
 8019896:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019898:	4b10      	ldr	r3, [pc, #64]	@ (80198dc <USBH_LL_Init+0x74>)
 801989a:	2201      	movs	r2, #1
 801989c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801989e:	4b0f      	ldr	r3, [pc, #60]	@ (80198dc <USBH_LL_Init+0x74>)
 80198a0:	2200      	movs	r2, #0
 80198a2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80198a4:	4b0d      	ldr	r3, [pc, #52]	@ (80198dc <USBH_LL_Init+0x74>)
 80198a6:	2202      	movs	r2, #2
 80198a8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80198aa:	4b0c      	ldr	r3, [pc, #48]	@ (80198dc <USBH_LL_Init+0x74>)
 80198ac:	2200      	movs	r2, #0
 80198ae:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80198b0:	480a      	ldr	r0, [pc, #40]	@ (80198dc <USBH_LL_Init+0x74>)
 80198b2:	f7ed fc58 	bl	8007166 <HAL_HCD_Init>
 80198b6:	4603      	mov	r3, r0
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d001      	beq.n	80198c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80198bc:	f7e9 fd08 	bl	80032d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80198c0:	4806      	ldr	r0, [pc, #24]	@ (80198dc <USBH_LL_Init+0x74>)
 80198c2:	f7ee f8b9 	bl	8007a38 <HAL_HCD_GetCurrentFrame>
 80198c6:	4603      	mov	r3, r0
 80198c8:	4619      	mov	r1, r3
 80198ca:	6878      	ldr	r0, [r7, #4]
 80198cc:	f7f9 fa3a 	bl	8012d44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80198d0:	2300      	movs	r3, #0
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	3708      	adds	r7, #8
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	20009d6c 	.word	0x20009d6c

080198e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b084      	sub	sp, #16
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198e8:	2300      	movs	r3, #0
 80198ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80198ec:	2300      	movs	r3, #0
 80198ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7ee f826 	bl	8007948 <HAL_HCD_Start>
 80198fc:	4603      	mov	r3, r0
 80198fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019900:	7bfb      	ldrb	r3, [r7, #15]
 8019902:	4618      	mov	r0, r3
 8019904:	f000 f95e 	bl	8019bc4 <USBH_Get_USB_Status>
 8019908:	4603      	mov	r3, r0
 801990a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801990c:	7bbb      	ldrb	r3, [r7, #14]
}
 801990e:	4618      	mov	r0, r3
 8019910:	3710      	adds	r7, #16
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}

08019916 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019916:	b580      	push	{r7, lr}
 8019918:	b084      	sub	sp, #16
 801991a:	af00      	add	r7, sp, #0
 801991c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801991e:	2300      	movs	r3, #0
 8019920:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019922:	2300      	movs	r3, #0
 8019924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801992c:	4618      	mov	r0, r3
 801992e:	f7ee f82e 	bl	800798e <HAL_HCD_Stop>
 8019932:	4603      	mov	r3, r0
 8019934:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019936:	7bfb      	ldrb	r3, [r7, #15]
 8019938:	4618      	mov	r0, r3
 801993a:	f000 f943 	bl	8019bc4 <USBH_Get_USB_Status>
 801993e:	4603      	mov	r3, r0
 8019940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019942:	7bbb      	ldrb	r3, [r7, #14]
}
 8019944:	4618      	mov	r0, r3
 8019946:	3710      	adds	r7, #16
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}

0801994c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b084      	sub	sp, #16
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019954:	2301      	movs	r3, #1
 8019956:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801995e:	4618      	mov	r0, r3
 8019960:	f7ee f878 	bl	8007a54 <HAL_HCD_GetCurrentSpeed>
 8019964:	4603      	mov	r3, r0
 8019966:	2b02      	cmp	r3, #2
 8019968:	d00c      	beq.n	8019984 <USBH_LL_GetSpeed+0x38>
 801996a:	2b02      	cmp	r3, #2
 801996c:	d80d      	bhi.n	801998a <USBH_LL_GetSpeed+0x3e>
 801996e:	2b00      	cmp	r3, #0
 8019970:	d002      	beq.n	8019978 <USBH_LL_GetSpeed+0x2c>
 8019972:	2b01      	cmp	r3, #1
 8019974:	d003      	beq.n	801997e <USBH_LL_GetSpeed+0x32>
 8019976:	e008      	b.n	801998a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019978:	2300      	movs	r3, #0
 801997a:	73fb      	strb	r3, [r7, #15]
    break;
 801997c:	e008      	b.n	8019990 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801997e:	2301      	movs	r3, #1
 8019980:	73fb      	strb	r3, [r7, #15]
    break;
 8019982:	e005      	b.n	8019990 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019984:	2302      	movs	r3, #2
 8019986:	73fb      	strb	r3, [r7, #15]
    break;
 8019988:	e002      	b.n	8019990 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801998a:	2301      	movs	r3, #1
 801998c:	73fb      	strb	r3, [r7, #15]
    break;
 801998e:	bf00      	nop
  }
  return  speed;
 8019990:	7bfb      	ldrb	r3, [r7, #15]
}
 8019992:	4618      	mov	r0, r3
 8019994:	3710      	adds	r7, #16
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}

0801999a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801999a:	b580      	push	{r7, lr}
 801999c:	b084      	sub	sp, #16
 801999e:	af00      	add	r7, sp, #0
 80199a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199a2:	2300      	movs	r3, #0
 80199a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80199a6:	2300      	movs	r3, #0
 80199a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7ee f809 	bl	80079c8 <HAL_HCD_ResetPort>
 80199b6:	4603      	mov	r3, r0
 80199b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80199ba:	7bfb      	ldrb	r3, [r7, #15]
 80199bc:	4618      	mov	r0, r3
 80199be:	f000 f901 	bl	8019bc4 <USBH_Get_USB_Status>
 80199c2:	4603      	mov	r3, r0
 80199c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3710      	adds	r7, #16
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b082      	sub	sp, #8
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	460b      	mov	r3, r1
 80199da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80199e2:	78fa      	ldrb	r2, [r7, #3]
 80199e4:	4611      	mov	r1, r2
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7ee f811 	bl	8007a0e <HAL_HCD_HC_GetXferCount>
 80199ec:	4603      	mov	r3, r0
}
 80199ee:	4618      	mov	r0, r3
 80199f0:	3708      	adds	r7, #8
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}

080199f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80199f6:	b590      	push	{r4, r7, lr}
 80199f8:	b089      	sub	sp, #36	@ 0x24
 80199fa:	af04      	add	r7, sp, #16
 80199fc:	6078      	str	r0, [r7, #4]
 80199fe:	4608      	mov	r0, r1
 8019a00:	4611      	mov	r1, r2
 8019a02:	461a      	mov	r2, r3
 8019a04:	4603      	mov	r3, r0
 8019a06:	70fb      	strb	r3, [r7, #3]
 8019a08:	460b      	mov	r3, r1
 8019a0a:	70bb      	strb	r3, [r7, #2]
 8019a0c:	4613      	mov	r3, r2
 8019a0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a10:	2300      	movs	r3, #0
 8019a12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a14:	2300      	movs	r3, #0
 8019a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8019a1e:	787c      	ldrb	r4, [r7, #1]
 8019a20:	78ba      	ldrb	r2, [r7, #2]
 8019a22:	78f9      	ldrb	r1, [r7, #3]
 8019a24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019a26:	9302      	str	r3, [sp, #8]
 8019a28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019a2c:	9301      	str	r3, [sp, #4]
 8019a2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a32:	9300      	str	r3, [sp, #0]
 8019a34:	4623      	mov	r3, r4
 8019a36:	f7ed fbfd 	bl	8007234 <HAL_HCD_HC_Init>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a3e:	7bfb      	ldrb	r3, [r7, #15]
 8019a40:	4618      	mov	r0, r3
 8019a42:	f000 f8bf 	bl	8019bc4 <USBH_Get_USB_Status>
 8019a46:	4603      	mov	r3, r0
 8019a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	3714      	adds	r7, #20
 8019a50:	46bd      	mov	sp, r7
 8019a52:	bd90      	pop	{r4, r7, pc}

08019a54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b084      	sub	sp, #16
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	6078      	str	r0, [r7, #4]
 8019a5c:	460b      	mov	r3, r1
 8019a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a60:	2300      	movs	r3, #0
 8019a62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a64:	2300      	movs	r3, #0
 8019a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019a6e:	78fa      	ldrb	r2, [r7, #3]
 8019a70:	4611      	mov	r1, r2
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7ed fc96 	bl	80073a4 <HAL_HCD_HC_Halt>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019a7c:	7bfb      	ldrb	r3, [r7, #15]
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f000 f8a0 	bl	8019bc4 <USBH_Get_USB_Status>
 8019a84:	4603      	mov	r3, r0
 8019a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	3710      	adds	r7, #16
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	bd80      	pop	{r7, pc}

08019a92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019a92:	b590      	push	{r4, r7, lr}
 8019a94:	b089      	sub	sp, #36	@ 0x24
 8019a96:	af04      	add	r7, sp, #16
 8019a98:	6078      	str	r0, [r7, #4]
 8019a9a:	4608      	mov	r0, r1
 8019a9c:	4611      	mov	r1, r2
 8019a9e:	461a      	mov	r2, r3
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	70fb      	strb	r3, [r7, #3]
 8019aa4:	460b      	mov	r3, r1
 8019aa6:	70bb      	strb	r3, [r7, #2]
 8019aa8:	4613      	mov	r3, r2
 8019aaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019aac:	2300      	movs	r3, #0
 8019aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8019aba:	787c      	ldrb	r4, [r7, #1]
 8019abc:	78ba      	ldrb	r2, [r7, #2]
 8019abe:	78f9      	ldrb	r1, [r7, #3]
 8019ac0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019ac4:	9303      	str	r3, [sp, #12]
 8019ac6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019ac8:	9302      	str	r3, [sp, #8]
 8019aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019acc:	9301      	str	r3, [sp, #4]
 8019ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	4623      	mov	r3, r4
 8019ad6:	f7ed fc89 	bl	80073ec <HAL_HCD_HC_SubmitRequest>
 8019ada:	4603      	mov	r3, r0
 8019adc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019ade:	7bfb      	ldrb	r3, [r7, #15]
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f000 f86f 	bl	8019bc4 <USBH_Get_USB_Status>
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8019aec:	4618      	mov	r0, r3
 8019aee:	3714      	adds	r7, #20
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd90      	pop	{r4, r7, pc}

08019af4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b082      	sub	sp, #8
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	460b      	mov	r3, r1
 8019afe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019b06:	78fa      	ldrb	r2, [r7, #3]
 8019b08:	4611      	mov	r1, r2
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7ed ff6a 	bl	80079e4 <HAL_HCD_HC_GetURBState>
 8019b10:	4603      	mov	r3, r0
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	3708      	adds	r7, #8
 8019b16:	46bd      	mov	sp, r7
 8019b18:	bd80      	pop	{r7, pc}

08019b1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019b1a:	b580      	push	{r7, lr}
 8019b1c:	b082      	sub	sp, #8
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	6078      	str	r0, [r7, #4]
 8019b22:	460b      	mov	r3, r1
 8019b24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019b2c:	2b01      	cmp	r3, #1
 8019b2e:	d103      	bne.n	8019b38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019b30:	78fb      	ldrb	r3, [r7, #3]
 8019b32:	4618      	mov	r0, r3
 8019b34:	f000 f872 	bl	8019c1c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019b38:	20c8      	movs	r0, #200	@ 0xc8
 8019b3a:	f7eb fa97 	bl	800506c <HAL_Delay>
  return USBH_OK;
 8019b3e:	2300      	movs	r3, #0
}
 8019b40:	4618      	mov	r0, r3
 8019b42:	3708      	adds	r7, #8
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bd80      	pop	{r7, pc}

08019b48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019b48:	b480      	push	{r7}
 8019b4a:	b085      	sub	sp, #20
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	460b      	mov	r3, r1
 8019b52:	70fb      	strb	r3, [r7, #3]
 8019b54:	4613      	mov	r3, r2
 8019b56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019b5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019b60:	78fa      	ldrb	r2, [r7, #3]
 8019b62:	68f9      	ldr	r1, [r7, #12]
 8019b64:	4613      	mov	r3, r2
 8019b66:	011b      	lsls	r3, r3, #4
 8019b68:	1a9b      	subs	r3, r3, r2
 8019b6a:	009b      	lsls	r3, r3, #2
 8019b6c:	440b      	add	r3, r1
 8019b6e:	3317      	adds	r3, #23
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d00a      	beq.n	8019b8c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019b76:	78fa      	ldrb	r2, [r7, #3]
 8019b78:	68f9      	ldr	r1, [r7, #12]
 8019b7a:	4613      	mov	r3, r2
 8019b7c:	011b      	lsls	r3, r3, #4
 8019b7e:	1a9b      	subs	r3, r3, r2
 8019b80:	009b      	lsls	r3, r3, #2
 8019b82:	440b      	add	r3, r1
 8019b84:	333c      	adds	r3, #60	@ 0x3c
 8019b86:	78ba      	ldrb	r2, [r7, #2]
 8019b88:	701a      	strb	r2, [r3, #0]
 8019b8a:	e009      	b.n	8019ba0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019b8c:	78fa      	ldrb	r2, [r7, #3]
 8019b8e:	68f9      	ldr	r1, [r7, #12]
 8019b90:	4613      	mov	r3, r2
 8019b92:	011b      	lsls	r3, r3, #4
 8019b94:	1a9b      	subs	r3, r3, r2
 8019b96:	009b      	lsls	r3, r3, #2
 8019b98:	440b      	add	r3, r1
 8019b9a:	333d      	adds	r3, #61	@ 0x3d
 8019b9c:	78ba      	ldrb	r2, [r7, #2]
 8019b9e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019ba0:	2300      	movs	r3, #0
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	3714      	adds	r7, #20
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bac:	4770      	bx	lr

08019bae <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019bae:	b580      	push	{r7, lr}
 8019bb0:	b082      	sub	sp, #8
 8019bb2:	af00      	add	r7, sp, #0
 8019bb4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019bb6:	6878      	ldr	r0, [r7, #4]
 8019bb8:	f7eb fa58 	bl	800506c <HAL_Delay>
}
 8019bbc:	bf00      	nop
 8019bbe:	3708      	adds	r7, #8
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}

08019bc4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	b085      	sub	sp, #20
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	4603      	mov	r3, r0
 8019bcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019bd2:	79fb      	ldrb	r3, [r7, #7]
 8019bd4:	2b03      	cmp	r3, #3
 8019bd6:	d817      	bhi.n	8019c08 <USBH_Get_USB_Status+0x44>
 8019bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8019be0 <USBH_Get_USB_Status+0x1c>)
 8019bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bde:	bf00      	nop
 8019be0:	08019bf1 	.word	0x08019bf1
 8019be4:	08019bf7 	.word	0x08019bf7
 8019be8:	08019bfd 	.word	0x08019bfd
 8019bec:	08019c03 	.word	0x08019c03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8019bf4:	e00b      	b.n	8019c0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019bf6:	2302      	movs	r3, #2
 8019bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8019bfa:	e008      	b.n	8019c0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8019c00:	e005      	b.n	8019c0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019c02:	2302      	movs	r3, #2
 8019c04:	73fb      	strb	r3, [r7, #15]
    break;
 8019c06:	e002      	b.n	8019c0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019c08:	2302      	movs	r3, #2
 8019c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c0c:	bf00      	nop
  }
  return usb_status;
 8019c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	3714      	adds	r7, #20
 8019c14:	46bd      	mov	sp, r7
 8019c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1a:	4770      	bx	lr

08019c1c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b084      	sub	sp, #16
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	4603      	mov	r3, r0
 8019c24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019c26:	79fb      	ldrb	r3, [r7, #7]
 8019c28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019c2a:	79fb      	ldrb	r3, [r7, #7]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d102      	bne.n	8019c36 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8019c30:	2300      	movs	r3, #0
 8019c32:	73fb      	strb	r3, [r7, #15]
 8019c34:	e001      	b.n	8019c3a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019c36:	2301      	movs	r3, #1
 8019c38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019c3a:	7bfb      	ldrb	r3, [r7, #15]
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	2120      	movs	r1, #32
 8019c40:	4803      	ldr	r0, [pc, #12]	@ (8019c50 <MX_DriverVbusFS+0x34>)
 8019c42:	f7ed fa77 	bl	8007134 <HAL_GPIO_WritePin>
}
 8019c46:	bf00      	nop
 8019c48:	3710      	adds	r7, #16
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	bd80      	pop	{r7, pc}
 8019c4e:	bf00      	nop
 8019c50:	40020c00 	.word	0x40020c00

08019c54 <malloc>:
 8019c54:	4b02      	ldr	r3, [pc, #8]	@ (8019c60 <malloc+0xc>)
 8019c56:	4601      	mov	r1, r0
 8019c58:	6818      	ldr	r0, [r3, #0]
 8019c5a:	f000 b82d 	b.w	8019cb8 <_malloc_r>
 8019c5e:	bf00      	nop
 8019c60:	20000078 	.word	0x20000078

08019c64 <free>:
 8019c64:	4b02      	ldr	r3, [pc, #8]	@ (8019c70 <free+0xc>)
 8019c66:	4601      	mov	r1, r0
 8019c68:	6818      	ldr	r0, [r3, #0]
 8019c6a:	f000 b9c1 	b.w	8019ff0 <_free_r>
 8019c6e:	bf00      	nop
 8019c70:	20000078 	.word	0x20000078

08019c74 <sbrk_aligned>:
 8019c74:	b570      	push	{r4, r5, r6, lr}
 8019c76:	4e0f      	ldr	r6, [pc, #60]	@ (8019cb4 <sbrk_aligned+0x40>)
 8019c78:	460c      	mov	r4, r1
 8019c7a:	6831      	ldr	r1, [r6, #0]
 8019c7c:	4605      	mov	r5, r0
 8019c7e:	b911      	cbnz	r1, 8019c86 <sbrk_aligned+0x12>
 8019c80:	f000 f96c 	bl	8019f5c <_sbrk_r>
 8019c84:	6030      	str	r0, [r6, #0]
 8019c86:	4621      	mov	r1, r4
 8019c88:	4628      	mov	r0, r5
 8019c8a:	f000 f967 	bl	8019f5c <_sbrk_r>
 8019c8e:	1c43      	adds	r3, r0, #1
 8019c90:	d103      	bne.n	8019c9a <sbrk_aligned+0x26>
 8019c92:	f04f 34ff 	mov.w	r4, #4294967295
 8019c96:	4620      	mov	r0, r4
 8019c98:	bd70      	pop	{r4, r5, r6, pc}
 8019c9a:	1cc4      	adds	r4, r0, #3
 8019c9c:	f024 0403 	bic.w	r4, r4, #3
 8019ca0:	42a0      	cmp	r0, r4
 8019ca2:	d0f8      	beq.n	8019c96 <sbrk_aligned+0x22>
 8019ca4:	1a21      	subs	r1, r4, r0
 8019ca6:	4628      	mov	r0, r5
 8019ca8:	f000 f958 	bl	8019f5c <_sbrk_r>
 8019cac:	3001      	adds	r0, #1
 8019cae:	d1f2      	bne.n	8019c96 <sbrk_aligned+0x22>
 8019cb0:	e7ef      	b.n	8019c92 <sbrk_aligned+0x1e>
 8019cb2:	bf00      	nop
 8019cb4:	2000a14c 	.word	0x2000a14c

08019cb8 <_malloc_r>:
 8019cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cbc:	1ccd      	adds	r5, r1, #3
 8019cbe:	f025 0503 	bic.w	r5, r5, #3
 8019cc2:	3508      	adds	r5, #8
 8019cc4:	2d0c      	cmp	r5, #12
 8019cc6:	bf38      	it	cc
 8019cc8:	250c      	movcc	r5, #12
 8019cca:	2d00      	cmp	r5, #0
 8019ccc:	4606      	mov	r6, r0
 8019cce:	db01      	blt.n	8019cd4 <_malloc_r+0x1c>
 8019cd0:	42a9      	cmp	r1, r5
 8019cd2:	d904      	bls.n	8019cde <_malloc_r+0x26>
 8019cd4:	230c      	movs	r3, #12
 8019cd6:	6033      	str	r3, [r6, #0]
 8019cd8:	2000      	movs	r0, #0
 8019cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019db4 <_malloc_r+0xfc>
 8019ce2:	f000 f869 	bl	8019db8 <__malloc_lock>
 8019ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8019cea:	461c      	mov	r4, r3
 8019cec:	bb44      	cbnz	r4, 8019d40 <_malloc_r+0x88>
 8019cee:	4629      	mov	r1, r5
 8019cf0:	4630      	mov	r0, r6
 8019cf2:	f7ff ffbf 	bl	8019c74 <sbrk_aligned>
 8019cf6:	1c43      	adds	r3, r0, #1
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	d158      	bne.n	8019dae <_malloc_r+0xf6>
 8019cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8019d00:	4627      	mov	r7, r4
 8019d02:	2f00      	cmp	r7, #0
 8019d04:	d143      	bne.n	8019d8e <_malloc_r+0xd6>
 8019d06:	2c00      	cmp	r4, #0
 8019d08:	d04b      	beq.n	8019da2 <_malloc_r+0xea>
 8019d0a:	6823      	ldr	r3, [r4, #0]
 8019d0c:	4639      	mov	r1, r7
 8019d0e:	4630      	mov	r0, r6
 8019d10:	eb04 0903 	add.w	r9, r4, r3
 8019d14:	f000 f922 	bl	8019f5c <_sbrk_r>
 8019d18:	4581      	cmp	r9, r0
 8019d1a:	d142      	bne.n	8019da2 <_malloc_r+0xea>
 8019d1c:	6821      	ldr	r1, [r4, #0]
 8019d1e:	1a6d      	subs	r5, r5, r1
 8019d20:	4629      	mov	r1, r5
 8019d22:	4630      	mov	r0, r6
 8019d24:	f7ff ffa6 	bl	8019c74 <sbrk_aligned>
 8019d28:	3001      	adds	r0, #1
 8019d2a:	d03a      	beq.n	8019da2 <_malloc_r+0xea>
 8019d2c:	6823      	ldr	r3, [r4, #0]
 8019d2e:	442b      	add	r3, r5
 8019d30:	6023      	str	r3, [r4, #0]
 8019d32:	f8d8 3000 	ldr.w	r3, [r8]
 8019d36:	685a      	ldr	r2, [r3, #4]
 8019d38:	bb62      	cbnz	r2, 8019d94 <_malloc_r+0xdc>
 8019d3a:	f8c8 7000 	str.w	r7, [r8]
 8019d3e:	e00f      	b.n	8019d60 <_malloc_r+0xa8>
 8019d40:	6822      	ldr	r2, [r4, #0]
 8019d42:	1b52      	subs	r2, r2, r5
 8019d44:	d420      	bmi.n	8019d88 <_malloc_r+0xd0>
 8019d46:	2a0b      	cmp	r2, #11
 8019d48:	d917      	bls.n	8019d7a <_malloc_r+0xc2>
 8019d4a:	1961      	adds	r1, r4, r5
 8019d4c:	42a3      	cmp	r3, r4
 8019d4e:	6025      	str	r5, [r4, #0]
 8019d50:	bf18      	it	ne
 8019d52:	6059      	strne	r1, [r3, #4]
 8019d54:	6863      	ldr	r3, [r4, #4]
 8019d56:	bf08      	it	eq
 8019d58:	f8c8 1000 	streq.w	r1, [r8]
 8019d5c:	5162      	str	r2, [r4, r5]
 8019d5e:	604b      	str	r3, [r1, #4]
 8019d60:	4630      	mov	r0, r6
 8019d62:	f000 f82f 	bl	8019dc4 <__malloc_unlock>
 8019d66:	f104 000b 	add.w	r0, r4, #11
 8019d6a:	1d23      	adds	r3, r4, #4
 8019d6c:	f020 0007 	bic.w	r0, r0, #7
 8019d70:	1ac2      	subs	r2, r0, r3
 8019d72:	bf1c      	itt	ne
 8019d74:	1a1b      	subne	r3, r3, r0
 8019d76:	50a3      	strne	r3, [r4, r2]
 8019d78:	e7af      	b.n	8019cda <_malloc_r+0x22>
 8019d7a:	6862      	ldr	r2, [r4, #4]
 8019d7c:	42a3      	cmp	r3, r4
 8019d7e:	bf0c      	ite	eq
 8019d80:	f8c8 2000 	streq.w	r2, [r8]
 8019d84:	605a      	strne	r2, [r3, #4]
 8019d86:	e7eb      	b.n	8019d60 <_malloc_r+0xa8>
 8019d88:	4623      	mov	r3, r4
 8019d8a:	6864      	ldr	r4, [r4, #4]
 8019d8c:	e7ae      	b.n	8019cec <_malloc_r+0x34>
 8019d8e:	463c      	mov	r4, r7
 8019d90:	687f      	ldr	r7, [r7, #4]
 8019d92:	e7b6      	b.n	8019d02 <_malloc_r+0x4a>
 8019d94:	461a      	mov	r2, r3
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	42a3      	cmp	r3, r4
 8019d9a:	d1fb      	bne.n	8019d94 <_malloc_r+0xdc>
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	6053      	str	r3, [r2, #4]
 8019da0:	e7de      	b.n	8019d60 <_malloc_r+0xa8>
 8019da2:	230c      	movs	r3, #12
 8019da4:	6033      	str	r3, [r6, #0]
 8019da6:	4630      	mov	r0, r6
 8019da8:	f000 f80c 	bl	8019dc4 <__malloc_unlock>
 8019dac:	e794      	b.n	8019cd8 <_malloc_r+0x20>
 8019dae:	6005      	str	r5, [r0, #0]
 8019db0:	e7d6      	b.n	8019d60 <_malloc_r+0xa8>
 8019db2:	bf00      	nop
 8019db4:	2000a150 	.word	0x2000a150

08019db8 <__malloc_lock>:
 8019db8:	4801      	ldr	r0, [pc, #4]	@ (8019dc0 <__malloc_lock+0x8>)
 8019dba:	f000 b909 	b.w	8019fd0 <__retarget_lock_acquire_recursive>
 8019dbe:	bf00      	nop
 8019dc0:	2000a290 	.word	0x2000a290

08019dc4 <__malloc_unlock>:
 8019dc4:	4801      	ldr	r0, [pc, #4]	@ (8019dcc <__malloc_unlock+0x8>)
 8019dc6:	f000 b904 	b.w	8019fd2 <__retarget_lock_release_recursive>
 8019dca:	bf00      	nop
 8019dcc:	2000a290 	.word	0x2000a290

08019dd0 <sniprintf>:
 8019dd0:	b40c      	push	{r2, r3}
 8019dd2:	b530      	push	{r4, r5, lr}
 8019dd4:	4b18      	ldr	r3, [pc, #96]	@ (8019e38 <sniprintf+0x68>)
 8019dd6:	1e0c      	subs	r4, r1, #0
 8019dd8:	681d      	ldr	r5, [r3, #0]
 8019dda:	b09d      	sub	sp, #116	@ 0x74
 8019ddc:	da08      	bge.n	8019df0 <sniprintf+0x20>
 8019dde:	238b      	movs	r3, #139	@ 0x8b
 8019de0:	602b      	str	r3, [r5, #0]
 8019de2:	f04f 30ff 	mov.w	r0, #4294967295
 8019de6:	b01d      	add	sp, #116	@ 0x74
 8019de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019dec:	b002      	add	sp, #8
 8019dee:	4770      	bx	lr
 8019df0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019df4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019df8:	f04f 0300 	mov.w	r3, #0
 8019dfc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019dfe:	bf14      	ite	ne
 8019e00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019e04:	4623      	moveq	r3, r4
 8019e06:	9304      	str	r3, [sp, #16]
 8019e08:	9307      	str	r3, [sp, #28]
 8019e0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019e0e:	9002      	str	r0, [sp, #8]
 8019e10:	9006      	str	r0, [sp, #24]
 8019e12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e16:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019e18:	ab21      	add	r3, sp, #132	@ 0x84
 8019e1a:	a902      	add	r1, sp, #8
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	9301      	str	r3, [sp, #4]
 8019e20:	f000 f98c 	bl	801a13c <_svfiprintf_r>
 8019e24:	1c43      	adds	r3, r0, #1
 8019e26:	bfbc      	itt	lt
 8019e28:	238b      	movlt	r3, #139	@ 0x8b
 8019e2a:	602b      	strlt	r3, [r5, #0]
 8019e2c:	2c00      	cmp	r4, #0
 8019e2e:	d0da      	beq.n	8019de6 <sniprintf+0x16>
 8019e30:	9b02      	ldr	r3, [sp, #8]
 8019e32:	2200      	movs	r2, #0
 8019e34:	701a      	strb	r2, [r3, #0]
 8019e36:	e7d6      	b.n	8019de6 <sniprintf+0x16>
 8019e38:	20000078 	.word	0x20000078

08019e3c <siprintf>:
 8019e3c:	b40e      	push	{r1, r2, r3}
 8019e3e:	b510      	push	{r4, lr}
 8019e40:	b09d      	sub	sp, #116	@ 0x74
 8019e42:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019e44:	9002      	str	r0, [sp, #8]
 8019e46:	9006      	str	r0, [sp, #24]
 8019e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019e4c:	480a      	ldr	r0, [pc, #40]	@ (8019e78 <siprintf+0x3c>)
 8019e4e:	9107      	str	r1, [sp, #28]
 8019e50:	9104      	str	r1, [sp, #16]
 8019e52:	490a      	ldr	r1, [pc, #40]	@ (8019e7c <siprintf+0x40>)
 8019e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e58:	9105      	str	r1, [sp, #20]
 8019e5a:	2400      	movs	r4, #0
 8019e5c:	a902      	add	r1, sp, #8
 8019e5e:	6800      	ldr	r0, [r0, #0]
 8019e60:	9301      	str	r3, [sp, #4]
 8019e62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019e64:	f000 f96a 	bl	801a13c <_svfiprintf_r>
 8019e68:	9b02      	ldr	r3, [sp, #8]
 8019e6a:	701c      	strb	r4, [r3, #0]
 8019e6c:	b01d      	add	sp, #116	@ 0x74
 8019e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e72:	b003      	add	sp, #12
 8019e74:	4770      	bx	lr
 8019e76:	bf00      	nop
 8019e78:	20000078 	.word	0x20000078
 8019e7c:	ffff0208 	.word	0xffff0208

08019e80 <_vsniprintf_r>:
 8019e80:	b530      	push	{r4, r5, lr}
 8019e82:	4614      	mov	r4, r2
 8019e84:	2c00      	cmp	r4, #0
 8019e86:	b09b      	sub	sp, #108	@ 0x6c
 8019e88:	4605      	mov	r5, r0
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	da05      	bge.n	8019e9a <_vsniprintf_r+0x1a>
 8019e8e:	238b      	movs	r3, #139	@ 0x8b
 8019e90:	6003      	str	r3, [r0, #0]
 8019e92:	f04f 30ff 	mov.w	r0, #4294967295
 8019e96:	b01b      	add	sp, #108	@ 0x6c
 8019e98:	bd30      	pop	{r4, r5, pc}
 8019e9a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019e9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019ea2:	f04f 0300 	mov.w	r3, #0
 8019ea6:	9319      	str	r3, [sp, #100]	@ 0x64
 8019ea8:	bf14      	ite	ne
 8019eaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019eae:	4623      	moveq	r3, r4
 8019eb0:	9302      	str	r3, [sp, #8]
 8019eb2:	9305      	str	r3, [sp, #20]
 8019eb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019eb8:	9100      	str	r1, [sp, #0]
 8019eba:	9104      	str	r1, [sp, #16]
 8019ebc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019ec0:	4669      	mov	r1, sp
 8019ec2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019ec4:	f000 f93a 	bl	801a13c <_svfiprintf_r>
 8019ec8:	1c43      	adds	r3, r0, #1
 8019eca:	bfbc      	itt	lt
 8019ecc:	238b      	movlt	r3, #139	@ 0x8b
 8019ece:	602b      	strlt	r3, [r5, #0]
 8019ed0:	2c00      	cmp	r4, #0
 8019ed2:	d0e0      	beq.n	8019e96 <_vsniprintf_r+0x16>
 8019ed4:	9b00      	ldr	r3, [sp, #0]
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	701a      	strb	r2, [r3, #0]
 8019eda:	e7dc      	b.n	8019e96 <_vsniprintf_r+0x16>

08019edc <vsniprintf>:
 8019edc:	b507      	push	{r0, r1, r2, lr}
 8019ede:	9300      	str	r3, [sp, #0]
 8019ee0:	4613      	mov	r3, r2
 8019ee2:	460a      	mov	r2, r1
 8019ee4:	4601      	mov	r1, r0
 8019ee6:	4803      	ldr	r0, [pc, #12]	@ (8019ef4 <vsniprintf+0x18>)
 8019ee8:	6800      	ldr	r0, [r0, #0]
 8019eea:	f7ff ffc9 	bl	8019e80 <_vsniprintf_r>
 8019eee:	b003      	add	sp, #12
 8019ef0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ef4:	20000078 	.word	0x20000078

08019ef8 <memset>:
 8019ef8:	4402      	add	r2, r0
 8019efa:	4603      	mov	r3, r0
 8019efc:	4293      	cmp	r3, r2
 8019efe:	d100      	bne.n	8019f02 <memset+0xa>
 8019f00:	4770      	bx	lr
 8019f02:	f803 1b01 	strb.w	r1, [r3], #1
 8019f06:	e7f9      	b.n	8019efc <memset+0x4>

08019f08 <strncpy>:
 8019f08:	b510      	push	{r4, lr}
 8019f0a:	3901      	subs	r1, #1
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	b132      	cbz	r2, 8019f1e <strncpy+0x16>
 8019f10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f14:	f803 4b01 	strb.w	r4, [r3], #1
 8019f18:	3a01      	subs	r2, #1
 8019f1a:	2c00      	cmp	r4, #0
 8019f1c:	d1f7      	bne.n	8019f0e <strncpy+0x6>
 8019f1e:	441a      	add	r2, r3
 8019f20:	2100      	movs	r1, #0
 8019f22:	4293      	cmp	r3, r2
 8019f24:	d100      	bne.n	8019f28 <strncpy+0x20>
 8019f26:	bd10      	pop	{r4, pc}
 8019f28:	f803 1b01 	strb.w	r1, [r3], #1
 8019f2c:	e7f9      	b.n	8019f22 <strncpy+0x1a>

08019f2e <strstr>:
 8019f2e:	780a      	ldrb	r2, [r1, #0]
 8019f30:	b570      	push	{r4, r5, r6, lr}
 8019f32:	b96a      	cbnz	r2, 8019f50 <strstr+0x22>
 8019f34:	bd70      	pop	{r4, r5, r6, pc}
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d109      	bne.n	8019f4e <strstr+0x20>
 8019f3a:	460c      	mov	r4, r1
 8019f3c:	4605      	mov	r5, r0
 8019f3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d0f6      	beq.n	8019f34 <strstr+0x6>
 8019f46:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019f4a:	429e      	cmp	r6, r3
 8019f4c:	d0f7      	beq.n	8019f3e <strstr+0x10>
 8019f4e:	3001      	adds	r0, #1
 8019f50:	7803      	ldrb	r3, [r0, #0]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d1ef      	bne.n	8019f36 <strstr+0x8>
 8019f56:	4618      	mov	r0, r3
 8019f58:	e7ec      	b.n	8019f34 <strstr+0x6>
	...

08019f5c <_sbrk_r>:
 8019f5c:	b538      	push	{r3, r4, r5, lr}
 8019f5e:	4d06      	ldr	r5, [pc, #24]	@ (8019f78 <_sbrk_r+0x1c>)
 8019f60:	2300      	movs	r3, #0
 8019f62:	4604      	mov	r4, r0
 8019f64:	4608      	mov	r0, r1
 8019f66:	602b      	str	r3, [r5, #0]
 8019f68:	f7ea fb94 	bl	8004694 <_sbrk>
 8019f6c:	1c43      	adds	r3, r0, #1
 8019f6e:	d102      	bne.n	8019f76 <_sbrk_r+0x1a>
 8019f70:	682b      	ldr	r3, [r5, #0]
 8019f72:	b103      	cbz	r3, 8019f76 <_sbrk_r+0x1a>
 8019f74:	6023      	str	r3, [r4, #0]
 8019f76:	bd38      	pop	{r3, r4, r5, pc}
 8019f78:	2000a28c 	.word	0x2000a28c

08019f7c <__errno>:
 8019f7c:	4b01      	ldr	r3, [pc, #4]	@ (8019f84 <__errno+0x8>)
 8019f7e:	6818      	ldr	r0, [r3, #0]
 8019f80:	4770      	bx	lr
 8019f82:	bf00      	nop
 8019f84:	20000078 	.word	0x20000078

08019f88 <__libc_init_array>:
 8019f88:	b570      	push	{r4, r5, r6, lr}
 8019f8a:	4d0d      	ldr	r5, [pc, #52]	@ (8019fc0 <__libc_init_array+0x38>)
 8019f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8019fc4 <__libc_init_array+0x3c>)
 8019f8e:	1b64      	subs	r4, r4, r5
 8019f90:	10a4      	asrs	r4, r4, #2
 8019f92:	2600      	movs	r6, #0
 8019f94:	42a6      	cmp	r6, r4
 8019f96:	d109      	bne.n	8019fac <__libc_init_array+0x24>
 8019f98:	4d0b      	ldr	r5, [pc, #44]	@ (8019fc8 <__libc_init_array+0x40>)
 8019f9a:	4c0c      	ldr	r4, [pc, #48]	@ (8019fcc <__libc_init_array+0x44>)
 8019f9c:	f000 fba6 	bl	801a6ec <_init>
 8019fa0:	1b64      	subs	r4, r4, r5
 8019fa2:	10a4      	asrs	r4, r4, #2
 8019fa4:	2600      	movs	r6, #0
 8019fa6:	42a6      	cmp	r6, r4
 8019fa8:	d105      	bne.n	8019fb6 <__libc_init_array+0x2e>
 8019faa:	bd70      	pop	{r4, r5, r6, pc}
 8019fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fb0:	4798      	blx	r3
 8019fb2:	3601      	adds	r6, #1
 8019fb4:	e7ee      	b.n	8019f94 <__libc_init_array+0xc>
 8019fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fba:	4798      	blx	r3
 8019fbc:	3601      	adds	r6, #1
 8019fbe:	e7f2      	b.n	8019fa6 <__libc_init_array+0x1e>
 8019fc0:	0801c658 	.word	0x0801c658
 8019fc4:	0801c658 	.word	0x0801c658
 8019fc8:	0801c658 	.word	0x0801c658
 8019fcc:	0801c65c 	.word	0x0801c65c

08019fd0 <__retarget_lock_acquire_recursive>:
 8019fd0:	4770      	bx	lr

08019fd2 <__retarget_lock_release_recursive>:
 8019fd2:	4770      	bx	lr

08019fd4 <memcpy>:
 8019fd4:	440a      	add	r2, r1
 8019fd6:	4291      	cmp	r1, r2
 8019fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8019fdc:	d100      	bne.n	8019fe0 <memcpy+0xc>
 8019fde:	4770      	bx	lr
 8019fe0:	b510      	push	{r4, lr}
 8019fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fea:	4291      	cmp	r1, r2
 8019fec:	d1f9      	bne.n	8019fe2 <memcpy+0xe>
 8019fee:	bd10      	pop	{r4, pc}

08019ff0 <_free_r>:
 8019ff0:	b538      	push	{r3, r4, r5, lr}
 8019ff2:	4605      	mov	r5, r0
 8019ff4:	2900      	cmp	r1, #0
 8019ff6:	d041      	beq.n	801a07c <_free_r+0x8c>
 8019ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ffc:	1f0c      	subs	r4, r1, #4
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	bfb8      	it	lt
 801a002:	18e4      	addlt	r4, r4, r3
 801a004:	f7ff fed8 	bl	8019db8 <__malloc_lock>
 801a008:	4a1d      	ldr	r2, [pc, #116]	@ (801a080 <_free_r+0x90>)
 801a00a:	6813      	ldr	r3, [r2, #0]
 801a00c:	b933      	cbnz	r3, 801a01c <_free_r+0x2c>
 801a00e:	6063      	str	r3, [r4, #4]
 801a010:	6014      	str	r4, [r2, #0]
 801a012:	4628      	mov	r0, r5
 801a014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a018:	f7ff bed4 	b.w	8019dc4 <__malloc_unlock>
 801a01c:	42a3      	cmp	r3, r4
 801a01e:	d908      	bls.n	801a032 <_free_r+0x42>
 801a020:	6820      	ldr	r0, [r4, #0]
 801a022:	1821      	adds	r1, r4, r0
 801a024:	428b      	cmp	r3, r1
 801a026:	bf01      	itttt	eq
 801a028:	6819      	ldreq	r1, [r3, #0]
 801a02a:	685b      	ldreq	r3, [r3, #4]
 801a02c:	1809      	addeq	r1, r1, r0
 801a02e:	6021      	streq	r1, [r4, #0]
 801a030:	e7ed      	b.n	801a00e <_free_r+0x1e>
 801a032:	461a      	mov	r2, r3
 801a034:	685b      	ldr	r3, [r3, #4]
 801a036:	b10b      	cbz	r3, 801a03c <_free_r+0x4c>
 801a038:	42a3      	cmp	r3, r4
 801a03a:	d9fa      	bls.n	801a032 <_free_r+0x42>
 801a03c:	6811      	ldr	r1, [r2, #0]
 801a03e:	1850      	adds	r0, r2, r1
 801a040:	42a0      	cmp	r0, r4
 801a042:	d10b      	bne.n	801a05c <_free_r+0x6c>
 801a044:	6820      	ldr	r0, [r4, #0]
 801a046:	4401      	add	r1, r0
 801a048:	1850      	adds	r0, r2, r1
 801a04a:	4283      	cmp	r3, r0
 801a04c:	6011      	str	r1, [r2, #0]
 801a04e:	d1e0      	bne.n	801a012 <_free_r+0x22>
 801a050:	6818      	ldr	r0, [r3, #0]
 801a052:	685b      	ldr	r3, [r3, #4]
 801a054:	6053      	str	r3, [r2, #4]
 801a056:	4408      	add	r0, r1
 801a058:	6010      	str	r0, [r2, #0]
 801a05a:	e7da      	b.n	801a012 <_free_r+0x22>
 801a05c:	d902      	bls.n	801a064 <_free_r+0x74>
 801a05e:	230c      	movs	r3, #12
 801a060:	602b      	str	r3, [r5, #0]
 801a062:	e7d6      	b.n	801a012 <_free_r+0x22>
 801a064:	6820      	ldr	r0, [r4, #0]
 801a066:	1821      	adds	r1, r4, r0
 801a068:	428b      	cmp	r3, r1
 801a06a:	bf04      	itt	eq
 801a06c:	6819      	ldreq	r1, [r3, #0]
 801a06e:	685b      	ldreq	r3, [r3, #4]
 801a070:	6063      	str	r3, [r4, #4]
 801a072:	bf04      	itt	eq
 801a074:	1809      	addeq	r1, r1, r0
 801a076:	6021      	streq	r1, [r4, #0]
 801a078:	6054      	str	r4, [r2, #4]
 801a07a:	e7ca      	b.n	801a012 <_free_r+0x22>
 801a07c:	bd38      	pop	{r3, r4, r5, pc}
 801a07e:	bf00      	nop
 801a080:	2000a150 	.word	0x2000a150

0801a084 <__ssputs_r>:
 801a084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a088:	688e      	ldr	r6, [r1, #8]
 801a08a:	461f      	mov	r7, r3
 801a08c:	42be      	cmp	r6, r7
 801a08e:	680b      	ldr	r3, [r1, #0]
 801a090:	4682      	mov	sl, r0
 801a092:	460c      	mov	r4, r1
 801a094:	4690      	mov	r8, r2
 801a096:	d82d      	bhi.n	801a0f4 <__ssputs_r+0x70>
 801a098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a09c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a0a0:	d026      	beq.n	801a0f0 <__ssputs_r+0x6c>
 801a0a2:	6965      	ldr	r5, [r4, #20]
 801a0a4:	6909      	ldr	r1, [r1, #16]
 801a0a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a0aa:	eba3 0901 	sub.w	r9, r3, r1
 801a0ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a0b2:	1c7b      	adds	r3, r7, #1
 801a0b4:	444b      	add	r3, r9
 801a0b6:	106d      	asrs	r5, r5, #1
 801a0b8:	429d      	cmp	r5, r3
 801a0ba:	bf38      	it	cc
 801a0bc:	461d      	movcc	r5, r3
 801a0be:	0553      	lsls	r3, r2, #21
 801a0c0:	d527      	bpl.n	801a112 <__ssputs_r+0x8e>
 801a0c2:	4629      	mov	r1, r5
 801a0c4:	f7ff fdf8 	bl	8019cb8 <_malloc_r>
 801a0c8:	4606      	mov	r6, r0
 801a0ca:	b360      	cbz	r0, 801a126 <__ssputs_r+0xa2>
 801a0cc:	6921      	ldr	r1, [r4, #16]
 801a0ce:	464a      	mov	r2, r9
 801a0d0:	f7ff ff80 	bl	8019fd4 <memcpy>
 801a0d4:	89a3      	ldrh	r3, [r4, #12]
 801a0d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a0de:	81a3      	strh	r3, [r4, #12]
 801a0e0:	6126      	str	r6, [r4, #16]
 801a0e2:	6165      	str	r5, [r4, #20]
 801a0e4:	444e      	add	r6, r9
 801a0e6:	eba5 0509 	sub.w	r5, r5, r9
 801a0ea:	6026      	str	r6, [r4, #0]
 801a0ec:	60a5      	str	r5, [r4, #8]
 801a0ee:	463e      	mov	r6, r7
 801a0f0:	42be      	cmp	r6, r7
 801a0f2:	d900      	bls.n	801a0f6 <__ssputs_r+0x72>
 801a0f4:	463e      	mov	r6, r7
 801a0f6:	6820      	ldr	r0, [r4, #0]
 801a0f8:	4632      	mov	r2, r6
 801a0fa:	4641      	mov	r1, r8
 801a0fc:	f000 faa6 	bl	801a64c <memmove>
 801a100:	68a3      	ldr	r3, [r4, #8]
 801a102:	1b9b      	subs	r3, r3, r6
 801a104:	60a3      	str	r3, [r4, #8]
 801a106:	6823      	ldr	r3, [r4, #0]
 801a108:	4433      	add	r3, r6
 801a10a:	6023      	str	r3, [r4, #0]
 801a10c:	2000      	movs	r0, #0
 801a10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a112:	462a      	mov	r2, r5
 801a114:	f000 fab4 	bl	801a680 <_realloc_r>
 801a118:	4606      	mov	r6, r0
 801a11a:	2800      	cmp	r0, #0
 801a11c:	d1e0      	bne.n	801a0e0 <__ssputs_r+0x5c>
 801a11e:	6921      	ldr	r1, [r4, #16]
 801a120:	4650      	mov	r0, sl
 801a122:	f7ff ff65 	bl	8019ff0 <_free_r>
 801a126:	230c      	movs	r3, #12
 801a128:	f8ca 3000 	str.w	r3, [sl]
 801a12c:	89a3      	ldrh	r3, [r4, #12]
 801a12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a132:	81a3      	strh	r3, [r4, #12]
 801a134:	f04f 30ff 	mov.w	r0, #4294967295
 801a138:	e7e9      	b.n	801a10e <__ssputs_r+0x8a>
	...

0801a13c <_svfiprintf_r>:
 801a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a140:	4698      	mov	r8, r3
 801a142:	898b      	ldrh	r3, [r1, #12]
 801a144:	061b      	lsls	r3, r3, #24
 801a146:	b09d      	sub	sp, #116	@ 0x74
 801a148:	4607      	mov	r7, r0
 801a14a:	460d      	mov	r5, r1
 801a14c:	4614      	mov	r4, r2
 801a14e:	d510      	bpl.n	801a172 <_svfiprintf_r+0x36>
 801a150:	690b      	ldr	r3, [r1, #16]
 801a152:	b973      	cbnz	r3, 801a172 <_svfiprintf_r+0x36>
 801a154:	2140      	movs	r1, #64	@ 0x40
 801a156:	f7ff fdaf 	bl	8019cb8 <_malloc_r>
 801a15a:	6028      	str	r0, [r5, #0]
 801a15c:	6128      	str	r0, [r5, #16]
 801a15e:	b930      	cbnz	r0, 801a16e <_svfiprintf_r+0x32>
 801a160:	230c      	movs	r3, #12
 801a162:	603b      	str	r3, [r7, #0]
 801a164:	f04f 30ff 	mov.w	r0, #4294967295
 801a168:	b01d      	add	sp, #116	@ 0x74
 801a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a16e:	2340      	movs	r3, #64	@ 0x40
 801a170:	616b      	str	r3, [r5, #20]
 801a172:	2300      	movs	r3, #0
 801a174:	9309      	str	r3, [sp, #36]	@ 0x24
 801a176:	2320      	movs	r3, #32
 801a178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a17c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a180:	2330      	movs	r3, #48	@ 0x30
 801a182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a320 <_svfiprintf_r+0x1e4>
 801a186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a18a:	f04f 0901 	mov.w	r9, #1
 801a18e:	4623      	mov	r3, r4
 801a190:	469a      	mov	sl, r3
 801a192:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a196:	b10a      	cbz	r2, 801a19c <_svfiprintf_r+0x60>
 801a198:	2a25      	cmp	r2, #37	@ 0x25
 801a19a:	d1f9      	bne.n	801a190 <_svfiprintf_r+0x54>
 801a19c:	ebba 0b04 	subs.w	fp, sl, r4
 801a1a0:	d00b      	beq.n	801a1ba <_svfiprintf_r+0x7e>
 801a1a2:	465b      	mov	r3, fp
 801a1a4:	4622      	mov	r2, r4
 801a1a6:	4629      	mov	r1, r5
 801a1a8:	4638      	mov	r0, r7
 801a1aa:	f7ff ff6b 	bl	801a084 <__ssputs_r>
 801a1ae:	3001      	adds	r0, #1
 801a1b0:	f000 80a7 	beq.w	801a302 <_svfiprintf_r+0x1c6>
 801a1b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1b6:	445a      	add	r2, fp
 801a1b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a1ba:	f89a 3000 	ldrb.w	r3, [sl]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	f000 809f 	beq.w	801a302 <_svfiprintf_r+0x1c6>
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	f04f 32ff 	mov.w	r2, #4294967295
 801a1ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1ce:	f10a 0a01 	add.w	sl, sl, #1
 801a1d2:	9304      	str	r3, [sp, #16]
 801a1d4:	9307      	str	r3, [sp, #28]
 801a1d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a1da:	931a      	str	r3, [sp, #104]	@ 0x68
 801a1dc:	4654      	mov	r4, sl
 801a1de:	2205      	movs	r2, #5
 801a1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1e4:	484e      	ldr	r0, [pc, #312]	@ (801a320 <_svfiprintf_r+0x1e4>)
 801a1e6:	f7e6 f82b 	bl	8000240 <memchr>
 801a1ea:	9a04      	ldr	r2, [sp, #16]
 801a1ec:	b9d8      	cbnz	r0, 801a226 <_svfiprintf_r+0xea>
 801a1ee:	06d0      	lsls	r0, r2, #27
 801a1f0:	bf44      	itt	mi
 801a1f2:	2320      	movmi	r3, #32
 801a1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a1f8:	0711      	lsls	r1, r2, #28
 801a1fa:	bf44      	itt	mi
 801a1fc:	232b      	movmi	r3, #43	@ 0x2b
 801a1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a202:	f89a 3000 	ldrb.w	r3, [sl]
 801a206:	2b2a      	cmp	r3, #42	@ 0x2a
 801a208:	d015      	beq.n	801a236 <_svfiprintf_r+0xfa>
 801a20a:	9a07      	ldr	r2, [sp, #28]
 801a20c:	4654      	mov	r4, sl
 801a20e:	2000      	movs	r0, #0
 801a210:	f04f 0c0a 	mov.w	ip, #10
 801a214:	4621      	mov	r1, r4
 801a216:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a21a:	3b30      	subs	r3, #48	@ 0x30
 801a21c:	2b09      	cmp	r3, #9
 801a21e:	d94b      	bls.n	801a2b8 <_svfiprintf_r+0x17c>
 801a220:	b1b0      	cbz	r0, 801a250 <_svfiprintf_r+0x114>
 801a222:	9207      	str	r2, [sp, #28]
 801a224:	e014      	b.n	801a250 <_svfiprintf_r+0x114>
 801a226:	eba0 0308 	sub.w	r3, r0, r8
 801a22a:	fa09 f303 	lsl.w	r3, r9, r3
 801a22e:	4313      	orrs	r3, r2
 801a230:	9304      	str	r3, [sp, #16]
 801a232:	46a2      	mov	sl, r4
 801a234:	e7d2      	b.n	801a1dc <_svfiprintf_r+0xa0>
 801a236:	9b03      	ldr	r3, [sp, #12]
 801a238:	1d19      	adds	r1, r3, #4
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	9103      	str	r1, [sp, #12]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	bfbb      	ittet	lt
 801a242:	425b      	neglt	r3, r3
 801a244:	f042 0202 	orrlt.w	r2, r2, #2
 801a248:	9307      	strge	r3, [sp, #28]
 801a24a:	9307      	strlt	r3, [sp, #28]
 801a24c:	bfb8      	it	lt
 801a24e:	9204      	strlt	r2, [sp, #16]
 801a250:	7823      	ldrb	r3, [r4, #0]
 801a252:	2b2e      	cmp	r3, #46	@ 0x2e
 801a254:	d10a      	bne.n	801a26c <_svfiprintf_r+0x130>
 801a256:	7863      	ldrb	r3, [r4, #1]
 801a258:	2b2a      	cmp	r3, #42	@ 0x2a
 801a25a:	d132      	bne.n	801a2c2 <_svfiprintf_r+0x186>
 801a25c:	9b03      	ldr	r3, [sp, #12]
 801a25e:	1d1a      	adds	r2, r3, #4
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	9203      	str	r2, [sp, #12]
 801a264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a268:	3402      	adds	r4, #2
 801a26a:	9305      	str	r3, [sp, #20]
 801a26c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a330 <_svfiprintf_r+0x1f4>
 801a270:	7821      	ldrb	r1, [r4, #0]
 801a272:	2203      	movs	r2, #3
 801a274:	4650      	mov	r0, sl
 801a276:	f7e5 ffe3 	bl	8000240 <memchr>
 801a27a:	b138      	cbz	r0, 801a28c <_svfiprintf_r+0x150>
 801a27c:	9b04      	ldr	r3, [sp, #16]
 801a27e:	eba0 000a 	sub.w	r0, r0, sl
 801a282:	2240      	movs	r2, #64	@ 0x40
 801a284:	4082      	lsls	r2, r0
 801a286:	4313      	orrs	r3, r2
 801a288:	3401      	adds	r4, #1
 801a28a:	9304      	str	r3, [sp, #16]
 801a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a290:	4824      	ldr	r0, [pc, #144]	@ (801a324 <_svfiprintf_r+0x1e8>)
 801a292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a296:	2206      	movs	r2, #6
 801a298:	f7e5 ffd2 	bl	8000240 <memchr>
 801a29c:	2800      	cmp	r0, #0
 801a29e:	d036      	beq.n	801a30e <_svfiprintf_r+0x1d2>
 801a2a0:	4b21      	ldr	r3, [pc, #132]	@ (801a328 <_svfiprintf_r+0x1ec>)
 801a2a2:	bb1b      	cbnz	r3, 801a2ec <_svfiprintf_r+0x1b0>
 801a2a4:	9b03      	ldr	r3, [sp, #12]
 801a2a6:	3307      	adds	r3, #7
 801a2a8:	f023 0307 	bic.w	r3, r3, #7
 801a2ac:	3308      	adds	r3, #8
 801a2ae:	9303      	str	r3, [sp, #12]
 801a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2b2:	4433      	add	r3, r6
 801a2b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2b6:	e76a      	b.n	801a18e <_svfiprintf_r+0x52>
 801a2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2bc:	460c      	mov	r4, r1
 801a2be:	2001      	movs	r0, #1
 801a2c0:	e7a8      	b.n	801a214 <_svfiprintf_r+0xd8>
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	3401      	adds	r4, #1
 801a2c6:	9305      	str	r3, [sp, #20]
 801a2c8:	4619      	mov	r1, r3
 801a2ca:	f04f 0c0a 	mov.w	ip, #10
 801a2ce:	4620      	mov	r0, r4
 801a2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a2d4:	3a30      	subs	r2, #48	@ 0x30
 801a2d6:	2a09      	cmp	r2, #9
 801a2d8:	d903      	bls.n	801a2e2 <_svfiprintf_r+0x1a6>
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d0c6      	beq.n	801a26c <_svfiprintf_r+0x130>
 801a2de:	9105      	str	r1, [sp, #20]
 801a2e0:	e7c4      	b.n	801a26c <_svfiprintf_r+0x130>
 801a2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	2301      	movs	r3, #1
 801a2ea:	e7f0      	b.n	801a2ce <_svfiprintf_r+0x192>
 801a2ec:	ab03      	add	r3, sp, #12
 801a2ee:	9300      	str	r3, [sp, #0]
 801a2f0:	462a      	mov	r2, r5
 801a2f2:	4b0e      	ldr	r3, [pc, #56]	@ (801a32c <_svfiprintf_r+0x1f0>)
 801a2f4:	a904      	add	r1, sp, #16
 801a2f6:	4638      	mov	r0, r7
 801a2f8:	f3af 8000 	nop.w
 801a2fc:	1c42      	adds	r2, r0, #1
 801a2fe:	4606      	mov	r6, r0
 801a300:	d1d6      	bne.n	801a2b0 <_svfiprintf_r+0x174>
 801a302:	89ab      	ldrh	r3, [r5, #12]
 801a304:	065b      	lsls	r3, r3, #25
 801a306:	f53f af2d 	bmi.w	801a164 <_svfiprintf_r+0x28>
 801a30a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a30c:	e72c      	b.n	801a168 <_svfiprintf_r+0x2c>
 801a30e:	ab03      	add	r3, sp, #12
 801a310:	9300      	str	r3, [sp, #0]
 801a312:	462a      	mov	r2, r5
 801a314:	4b05      	ldr	r3, [pc, #20]	@ (801a32c <_svfiprintf_r+0x1f0>)
 801a316:	a904      	add	r1, sp, #16
 801a318:	4638      	mov	r0, r7
 801a31a:	f000 f879 	bl	801a410 <_printf_i>
 801a31e:	e7ed      	b.n	801a2fc <_svfiprintf_r+0x1c0>
 801a320:	0801c61c 	.word	0x0801c61c
 801a324:	0801c626 	.word	0x0801c626
 801a328:	00000000 	.word	0x00000000
 801a32c:	0801a085 	.word	0x0801a085
 801a330:	0801c622 	.word	0x0801c622

0801a334 <_printf_common>:
 801a334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a338:	4616      	mov	r6, r2
 801a33a:	4698      	mov	r8, r3
 801a33c:	688a      	ldr	r2, [r1, #8]
 801a33e:	690b      	ldr	r3, [r1, #16]
 801a340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a344:	4293      	cmp	r3, r2
 801a346:	bfb8      	it	lt
 801a348:	4613      	movlt	r3, r2
 801a34a:	6033      	str	r3, [r6, #0]
 801a34c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a350:	4607      	mov	r7, r0
 801a352:	460c      	mov	r4, r1
 801a354:	b10a      	cbz	r2, 801a35a <_printf_common+0x26>
 801a356:	3301      	adds	r3, #1
 801a358:	6033      	str	r3, [r6, #0]
 801a35a:	6823      	ldr	r3, [r4, #0]
 801a35c:	0699      	lsls	r1, r3, #26
 801a35e:	bf42      	ittt	mi
 801a360:	6833      	ldrmi	r3, [r6, #0]
 801a362:	3302      	addmi	r3, #2
 801a364:	6033      	strmi	r3, [r6, #0]
 801a366:	6825      	ldr	r5, [r4, #0]
 801a368:	f015 0506 	ands.w	r5, r5, #6
 801a36c:	d106      	bne.n	801a37c <_printf_common+0x48>
 801a36e:	f104 0a19 	add.w	sl, r4, #25
 801a372:	68e3      	ldr	r3, [r4, #12]
 801a374:	6832      	ldr	r2, [r6, #0]
 801a376:	1a9b      	subs	r3, r3, r2
 801a378:	42ab      	cmp	r3, r5
 801a37a:	dc26      	bgt.n	801a3ca <_printf_common+0x96>
 801a37c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a380:	6822      	ldr	r2, [r4, #0]
 801a382:	3b00      	subs	r3, #0
 801a384:	bf18      	it	ne
 801a386:	2301      	movne	r3, #1
 801a388:	0692      	lsls	r2, r2, #26
 801a38a:	d42b      	bmi.n	801a3e4 <_printf_common+0xb0>
 801a38c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a390:	4641      	mov	r1, r8
 801a392:	4638      	mov	r0, r7
 801a394:	47c8      	blx	r9
 801a396:	3001      	adds	r0, #1
 801a398:	d01e      	beq.n	801a3d8 <_printf_common+0xa4>
 801a39a:	6823      	ldr	r3, [r4, #0]
 801a39c:	6922      	ldr	r2, [r4, #16]
 801a39e:	f003 0306 	and.w	r3, r3, #6
 801a3a2:	2b04      	cmp	r3, #4
 801a3a4:	bf02      	ittt	eq
 801a3a6:	68e5      	ldreq	r5, [r4, #12]
 801a3a8:	6833      	ldreq	r3, [r6, #0]
 801a3aa:	1aed      	subeq	r5, r5, r3
 801a3ac:	68a3      	ldr	r3, [r4, #8]
 801a3ae:	bf0c      	ite	eq
 801a3b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3b4:	2500      	movne	r5, #0
 801a3b6:	4293      	cmp	r3, r2
 801a3b8:	bfc4      	itt	gt
 801a3ba:	1a9b      	subgt	r3, r3, r2
 801a3bc:	18ed      	addgt	r5, r5, r3
 801a3be:	2600      	movs	r6, #0
 801a3c0:	341a      	adds	r4, #26
 801a3c2:	42b5      	cmp	r5, r6
 801a3c4:	d11a      	bne.n	801a3fc <_printf_common+0xc8>
 801a3c6:	2000      	movs	r0, #0
 801a3c8:	e008      	b.n	801a3dc <_printf_common+0xa8>
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	4652      	mov	r2, sl
 801a3ce:	4641      	mov	r1, r8
 801a3d0:	4638      	mov	r0, r7
 801a3d2:	47c8      	blx	r9
 801a3d4:	3001      	adds	r0, #1
 801a3d6:	d103      	bne.n	801a3e0 <_printf_common+0xac>
 801a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3e0:	3501      	adds	r5, #1
 801a3e2:	e7c6      	b.n	801a372 <_printf_common+0x3e>
 801a3e4:	18e1      	adds	r1, r4, r3
 801a3e6:	1c5a      	adds	r2, r3, #1
 801a3e8:	2030      	movs	r0, #48	@ 0x30
 801a3ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a3ee:	4422      	add	r2, r4
 801a3f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a3f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a3f8:	3302      	adds	r3, #2
 801a3fa:	e7c7      	b.n	801a38c <_printf_common+0x58>
 801a3fc:	2301      	movs	r3, #1
 801a3fe:	4622      	mov	r2, r4
 801a400:	4641      	mov	r1, r8
 801a402:	4638      	mov	r0, r7
 801a404:	47c8      	blx	r9
 801a406:	3001      	adds	r0, #1
 801a408:	d0e6      	beq.n	801a3d8 <_printf_common+0xa4>
 801a40a:	3601      	adds	r6, #1
 801a40c:	e7d9      	b.n	801a3c2 <_printf_common+0x8e>
	...

0801a410 <_printf_i>:
 801a410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a414:	7e0f      	ldrb	r7, [r1, #24]
 801a416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a418:	2f78      	cmp	r7, #120	@ 0x78
 801a41a:	4691      	mov	r9, r2
 801a41c:	4680      	mov	r8, r0
 801a41e:	460c      	mov	r4, r1
 801a420:	469a      	mov	sl, r3
 801a422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a426:	d807      	bhi.n	801a438 <_printf_i+0x28>
 801a428:	2f62      	cmp	r7, #98	@ 0x62
 801a42a:	d80a      	bhi.n	801a442 <_printf_i+0x32>
 801a42c:	2f00      	cmp	r7, #0
 801a42e:	f000 80d1 	beq.w	801a5d4 <_printf_i+0x1c4>
 801a432:	2f58      	cmp	r7, #88	@ 0x58
 801a434:	f000 80b8 	beq.w	801a5a8 <_printf_i+0x198>
 801a438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a43c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a440:	e03a      	b.n	801a4b8 <_printf_i+0xa8>
 801a442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a446:	2b15      	cmp	r3, #21
 801a448:	d8f6      	bhi.n	801a438 <_printf_i+0x28>
 801a44a:	a101      	add	r1, pc, #4	@ (adr r1, 801a450 <_printf_i+0x40>)
 801a44c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a450:	0801a4a9 	.word	0x0801a4a9
 801a454:	0801a4bd 	.word	0x0801a4bd
 801a458:	0801a439 	.word	0x0801a439
 801a45c:	0801a439 	.word	0x0801a439
 801a460:	0801a439 	.word	0x0801a439
 801a464:	0801a439 	.word	0x0801a439
 801a468:	0801a4bd 	.word	0x0801a4bd
 801a46c:	0801a439 	.word	0x0801a439
 801a470:	0801a439 	.word	0x0801a439
 801a474:	0801a439 	.word	0x0801a439
 801a478:	0801a439 	.word	0x0801a439
 801a47c:	0801a5bb 	.word	0x0801a5bb
 801a480:	0801a4e7 	.word	0x0801a4e7
 801a484:	0801a575 	.word	0x0801a575
 801a488:	0801a439 	.word	0x0801a439
 801a48c:	0801a439 	.word	0x0801a439
 801a490:	0801a5dd 	.word	0x0801a5dd
 801a494:	0801a439 	.word	0x0801a439
 801a498:	0801a4e7 	.word	0x0801a4e7
 801a49c:	0801a439 	.word	0x0801a439
 801a4a0:	0801a439 	.word	0x0801a439
 801a4a4:	0801a57d 	.word	0x0801a57d
 801a4a8:	6833      	ldr	r3, [r6, #0]
 801a4aa:	1d1a      	adds	r2, r3, #4
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	6032      	str	r2, [r6, #0]
 801a4b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a4b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a4b8:	2301      	movs	r3, #1
 801a4ba:	e09c      	b.n	801a5f6 <_printf_i+0x1e6>
 801a4bc:	6833      	ldr	r3, [r6, #0]
 801a4be:	6820      	ldr	r0, [r4, #0]
 801a4c0:	1d19      	adds	r1, r3, #4
 801a4c2:	6031      	str	r1, [r6, #0]
 801a4c4:	0606      	lsls	r6, r0, #24
 801a4c6:	d501      	bpl.n	801a4cc <_printf_i+0xbc>
 801a4c8:	681d      	ldr	r5, [r3, #0]
 801a4ca:	e003      	b.n	801a4d4 <_printf_i+0xc4>
 801a4cc:	0645      	lsls	r5, r0, #25
 801a4ce:	d5fb      	bpl.n	801a4c8 <_printf_i+0xb8>
 801a4d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a4d4:	2d00      	cmp	r5, #0
 801a4d6:	da03      	bge.n	801a4e0 <_printf_i+0xd0>
 801a4d8:	232d      	movs	r3, #45	@ 0x2d
 801a4da:	426d      	negs	r5, r5
 801a4dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a4e0:	4858      	ldr	r0, [pc, #352]	@ (801a644 <_printf_i+0x234>)
 801a4e2:	230a      	movs	r3, #10
 801a4e4:	e011      	b.n	801a50a <_printf_i+0xfa>
 801a4e6:	6821      	ldr	r1, [r4, #0]
 801a4e8:	6833      	ldr	r3, [r6, #0]
 801a4ea:	0608      	lsls	r0, r1, #24
 801a4ec:	f853 5b04 	ldr.w	r5, [r3], #4
 801a4f0:	d402      	bmi.n	801a4f8 <_printf_i+0xe8>
 801a4f2:	0649      	lsls	r1, r1, #25
 801a4f4:	bf48      	it	mi
 801a4f6:	b2ad      	uxthmi	r5, r5
 801a4f8:	2f6f      	cmp	r7, #111	@ 0x6f
 801a4fa:	4852      	ldr	r0, [pc, #328]	@ (801a644 <_printf_i+0x234>)
 801a4fc:	6033      	str	r3, [r6, #0]
 801a4fe:	bf14      	ite	ne
 801a500:	230a      	movne	r3, #10
 801a502:	2308      	moveq	r3, #8
 801a504:	2100      	movs	r1, #0
 801a506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a50a:	6866      	ldr	r6, [r4, #4]
 801a50c:	60a6      	str	r6, [r4, #8]
 801a50e:	2e00      	cmp	r6, #0
 801a510:	db05      	blt.n	801a51e <_printf_i+0x10e>
 801a512:	6821      	ldr	r1, [r4, #0]
 801a514:	432e      	orrs	r6, r5
 801a516:	f021 0104 	bic.w	r1, r1, #4
 801a51a:	6021      	str	r1, [r4, #0]
 801a51c:	d04b      	beq.n	801a5b6 <_printf_i+0x1a6>
 801a51e:	4616      	mov	r6, r2
 801a520:	fbb5 f1f3 	udiv	r1, r5, r3
 801a524:	fb03 5711 	mls	r7, r3, r1, r5
 801a528:	5dc7      	ldrb	r7, [r0, r7]
 801a52a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a52e:	462f      	mov	r7, r5
 801a530:	42bb      	cmp	r3, r7
 801a532:	460d      	mov	r5, r1
 801a534:	d9f4      	bls.n	801a520 <_printf_i+0x110>
 801a536:	2b08      	cmp	r3, #8
 801a538:	d10b      	bne.n	801a552 <_printf_i+0x142>
 801a53a:	6823      	ldr	r3, [r4, #0]
 801a53c:	07df      	lsls	r7, r3, #31
 801a53e:	d508      	bpl.n	801a552 <_printf_i+0x142>
 801a540:	6923      	ldr	r3, [r4, #16]
 801a542:	6861      	ldr	r1, [r4, #4]
 801a544:	4299      	cmp	r1, r3
 801a546:	bfde      	ittt	le
 801a548:	2330      	movle	r3, #48	@ 0x30
 801a54a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a54e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a552:	1b92      	subs	r2, r2, r6
 801a554:	6122      	str	r2, [r4, #16]
 801a556:	f8cd a000 	str.w	sl, [sp]
 801a55a:	464b      	mov	r3, r9
 801a55c:	aa03      	add	r2, sp, #12
 801a55e:	4621      	mov	r1, r4
 801a560:	4640      	mov	r0, r8
 801a562:	f7ff fee7 	bl	801a334 <_printf_common>
 801a566:	3001      	adds	r0, #1
 801a568:	d14a      	bne.n	801a600 <_printf_i+0x1f0>
 801a56a:	f04f 30ff 	mov.w	r0, #4294967295
 801a56e:	b004      	add	sp, #16
 801a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a574:	6823      	ldr	r3, [r4, #0]
 801a576:	f043 0320 	orr.w	r3, r3, #32
 801a57a:	6023      	str	r3, [r4, #0]
 801a57c:	4832      	ldr	r0, [pc, #200]	@ (801a648 <_printf_i+0x238>)
 801a57e:	2778      	movs	r7, #120	@ 0x78
 801a580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a584:	6823      	ldr	r3, [r4, #0]
 801a586:	6831      	ldr	r1, [r6, #0]
 801a588:	061f      	lsls	r7, r3, #24
 801a58a:	f851 5b04 	ldr.w	r5, [r1], #4
 801a58e:	d402      	bmi.n	801a596 <_printf_i+0x186>
 801a590:	065f      	lsls	r7, r3, #25
 801a592:	bf48      	it	mi
 801a594:	b2ad      	uxthmi	r5, r5
 801a596:	6031      	str	r1, [r6, #0]
 801a598:	07d9      	lsls	r1, r3, #31
 801a59a:	bf44      	itt	mi
 801a59c:	f043 0320 	orrmi.w	r3, r3, #32
 801a5a0:	6023      	strmi	r3, [r4, #0]
 801a5a2:	b11d      	cbz	r5, 801a5ac <_printf_i+0x19c>
 801a5a4:	2310      	movs	r3, #16
 801a5a6:	e7ad      	b.n	801a504 <_printf_i+0xf4>
 801a5a8:	4826      	ldr	r0, [pc, #152]	@ (801a644 <_printf_i+0x234>)
 801a5aa:	e7e9      	b.n	801a580 <_printf_i+0x170>
 801a5ac:	6823      	ldr	r3, [r4, #0]
 801a5ae:	f023 0320 	bic.w	r3, r3, #32
 801a5b2:	6023      	str	r3, [r4, #0]
 801a5b4:	e7f6      	b.n	801a5a4 <_printf_i+0x194>
 801a5b6:	4616      	mov	r6, r2
 801a5b8:	e7bd      	b.n	801a536 <_printf_i+0x126>
 801a5ba:	6833      	ldr	r3, [r6, #0]
 801a5bc:	6825      	ldr	r5, [r4, #0]
 801a5be:	6961      	ldr	r1, [r4, #20]
 801a5c0:	1d18      	adds	r0, r3, #4
 801a5c2:	6030      	str	r0, [r6, #0]
 801a5c4:	062e      	lsls	r6, r5, #24
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	d501      	bpl.n	801a5ce <_printf_i+0x1be>
 801a5ca:	6019      	str	r1, [r3, #0]
 801a5cc:	e002      	b.n	801a5d4 <_printf_i+0x1c4>
 801a5ce:	0668      	lsls	r0, r5, #25
 801a5d0:	d5fb      	bpl.n	801a5ca <_printf_i+0x1ba>
 801a5d2:	8019      	strh	r1, [r3, #0]
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	6123      	str	r3, [r4, #16]
 801a5d8:	4616      	mov	r6, r2
 801a5da:	e7bc      	b.n	801a556 <_printf_i+0x146>
 801a5dc:	6833      	ldr	r3, [r6, #0]
 801a5de:	1d1a      	adds	r2, r3, #4
 801a5e0:	6032      	str	r2, [r6, #0]
 801a5e2:	681e      	ldr	r6, [r3, #0]
 801a5e4:	6862      	ldr	r2, [r4, #4]
 801a5e6:	2100      	movs	r1, #0
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	f7e5 fe29 	bl	8000240 <memchr>
 801a5ee:	b108      	cbz	r0, 801a5f4 <_printf_i+0x1e4>
 801a5f0:	1b80      	subs	r0, r0, r6
 801a5f2:	6060      	str	r0, [r4, #4]
 801a5f4:	6863      	ldr	r3, [r4, #4]
 801a5f6:	6123      	str	r3, [r4, #16]
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5fe:	e7aa      	b.n	801a556 <_printf_i+0x146>
 801a600:	6923      	ldr	r3, [r4, #16]
 801a602:	4632      	mov	r2, r6
 801a604:	4649      	mov	r1, r9
 801a606:	4640      	mov	r0, r8
 801a608:	47d0      	blx	sl
 801a60a:	3001      	adds	r0, #1
 801a60c:	d0ad      	beq.n	801a56a <_printf_i+0x15a>
 801a60e:	6823      	ldr	r3, [r4, #0]
 801a610:	079b      	lsls	r3, r3, #30
 801a612:	d413      	bmi.n	801a63c <_printf_i+0x22c>
 801a614:	68e0      	ldr	r0, [r4, #12]
 801a616:	9b03      	ldr	r3, [sp, #12]
 801a618:	4298      	cmp	r0, r3
 801a61a:	bfb8      	it	lt
 801a61c:	4618      	movlt	r0, r3
 801a61e:	e7a6      	b.n	801a56e <_printf_i+0x15e>
 801a620:	2301      	movs	r3, #1
 801a622:	4632      	mov	r2, r6
 801a624:	4649      	mov	r1, r9
 801a626:	4640      	mov	r0, r8
 801a628:	47d0      	blx	sl
 801a62a:	3001      	adds	r0, #1
 801a62c:	d09d      	beq.n	801a56a <_printf_i+0x15a>
 801a62e:	3501      	adds	r5, #1
 801a630:	68e3      	ldr	r3, [r4, #12]
 801a632:	9903      	ldr	r1, [sp, #12]
 801a634:	1a5b      	subs	r3, r3, r1
 801a636:	42ab      	cmp	r3, r5
 801a638:	dcf2      	bgt.n	801a620 <_printf_i+0x210>
 801a63a:	e7eb      	b.n	801a614 <_printf_i+0x204>
 801a63c:	2500      	movs	r5, #0
 801a63e:	f104 0619 	add.w	r6, r4, #25
 801a642:	e7f5      	b.n	801a630 <_printf_i+0x220>
 801a644:	0801c62d 	.word	0x0801c62d
 801a648:	0801c63e 	.word	0x0801c63e

0801a64c <memmove>:
 801a64c:	4288      	cmp	r0, r1
 801a64e:	b510      	push	{r4, lr}
 801a650:	eb01 0402 	add.w	r4, r1, r2
 801a654:	d902      	bls.n	801a65c <memmove+0x10>
 801a656:	4284      	cmp	r4, r0
 801a658:	4623      	mov	r3, r4
 801a65a:	d807      	bhi.n	801a66c <memmove+0x20>
 801a65c:	1e43      	subs	r3, r0, #1
 801a65e:	42a1      	cmp	r1, r4
 801a660:	d008      	beq.n	801a674 <memmove+0x28>
 801a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a666:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a66a:	e7f8      	b.n	801a65e <memmove+0x12>
 801a66c:	4402      	add	r2, r0
 801a66e:	4601      	mov	r1, r0
 801a670:	428a      	cmp	r2, r1
 801a672:	d100      	bne.n	801a676 <memmove+0x2a>
 801a674:	bd10      	pop	{r4, pc}
 801a676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a67a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a67e:	e7f7      	b.n	801a670 <memmove+0x24>

0801a680 <_realloc_r>:
 801a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a684:	4607      	mov	r7, r0
 801a686:	4614      	mov	r4, r2
 801a688:	460d      	mov	r5, r1
 801a68a:	b921      	cbnz	r1, 801a696 <_realloc_r+0x16>
 801a68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a690:	4611      	mov	r1, r2
 801a692:	f7ff bb11 	b.w	8019cb8 <_malloc_r>
 801a696:	b92a      	cbnz	r2, 801a6a4 <_realloc_r+0x24>
 801a698:	f7ff fcaa 	bl	8019ff0 <_free_r>
 801a69c:	4625      	mov	r5, r4
 801a69e:	4628      	mov	r0, r5
 801a6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6a4:	f000 f81a 	bl	801a6dc <_malloc_usable_size_r>
 801a6a8:	4284      	cmp	r4, r0
 801a6aa:	4606      	mov	r6, r0
 801a6ac:	d802      	bhi.n	801a6b4 <_realloc_r+0x34>
 801a6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a6b2:	d8f4      	bhi.n	801a69e <_realloc_r+0x1e>
 801a6b4:	4621      	mov	r1, r4
 801a6b6:	4638      	mov	r0, r7
 801a6b8:	f7ff fafe 	bl	8019cb8 <_malloc_r>
 801a6bc:	4680      	mov	r8, r0
 801a6be:	b908      	cbnz	r0, 801a6c4 <_realloc_r+0x44>
 801a6c0:	4645      	mov	r5, r8
 801a6c2:	e7ec      	b.n	801a69e <_realloc_r+0x1e>
 801a6c4:	42b4      	cmp	r4, r6
 801a6c6:	4622      	mov	r2, r4
 801a6c8:	4629      	mov	r1, r5
 801a6ca:	bf28      	it	cs
 801a6cc:	4632      	movcs	r2, r6
 801a6ce:	f7ff fc81 	bl	8019fd4 <memcpy>
 801a6d2:	4629      	mov	r1, r5
 801a6d4:	4638      	mov	r0, r7
 801a6d6:	f7ff fc8b 	bl	8019ff0 <_free_r>
 801a6da:	e7f1      	b.n	801a6c0 <_realloc_r+0x40>

0801a6dc <_malloc_usable_size_r>:
 801a6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6e0:	1f18      	subs	r0, r3, #4
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	bfbc      	itt	lt
 801a6e6:	580b      	ldrlt	r3, [r1, r0]
 801a6e8:	18c0      	addlt	r0, r0, r3
 801a6ea:	4770      	bx	lr

0801a6ec <_init>:
 801a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ee:	bf00      	nop
 801a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6f2:	bc08      	pop	{r3}
 801a6f4:	469e      	mov	lr, r3
 801a6f6:	4770      	bx	lr

0801a6f8 <_fini>:
 801a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6fa:	bf00      	nop
 801a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6fe:	bc08      	pop	{r3}
 801a700:	469e      	mov	lr, r3
 801a702:	4770      	bx	lr
