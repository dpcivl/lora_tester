
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000192d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003778  080194a0  080194a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc18  0801cc18  0001e218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801cc18  0801cc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc20  0801cc20  0001e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc20  0801cc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cc24  0801cc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0801cc28  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d8  0801cd00  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000178  0801cda0  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000120b0  20000220  0801ce40  0001e220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  200122d0  0801ce40  0001e2d0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042ca6  00000000  00000000  0001e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000091b2  00000000  00000000  00060eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003838  00000000  00000000  0006a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002be5  00000000  00000000  0006d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000382a8  00000000  00000000  000704bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c027  00000000  00000000  000a8765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012efd3  00000000  00000000  000f478c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022375f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000fb48  00000000  00000000  002237a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  002332ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019488 	.word	0x08019488

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08019488 	.word	0x08019488

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d04c      	beq.n	80006b4 <CommandSender_Send+0xa8>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4926      	ldr	r1, [pc, #152]	@ (80006c4 <CommandSender_Send+0xb8>)
 800062a:	2001      	movs	r0, #1
 800062c:	f005 f89e 	bl	800576c <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 fb50 	bl	8017ce4 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <CommandSender_Send+0xbc>)
 800066e:	2104      	movs	r1, #4
 8000670:	f017 fa32 	bl	8017ad8 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4910      	ldr	r1, [pc, #64]	@ (80006cc <CommandSender_Send+0xc0>)
 800068a:	2000      	movs	r0, #0
 800068c:	f005 f86e 	bl	800576c <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f005 fa63 	bl	8005b5c <UART_Send>
 8000696:	64b8      	str	r0, [r7, #72]	@ 0x48
        
        if (status == UART_STATUS_OK) {
 8000698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800069a:	2b00      	cmp	r3, #0
 800069c:	d104      	bne.n	80006a8 <CommandSender_Send+0x9c>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 800069e:	490c      	ldr	r1, [pc, #48]	@ (80006d0 <CommandSender_Send+0xc4>)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f005 f863 	bl	800576c <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006a6:	e009      	b.n	80006bc <CommandSender_Send+0xb0>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80006aa:	490a      	ldr	r1, [pc, #40]	@ (80006d4 <CommandSender_Send+0xc8>)
 80006ac:	2003      	movs	r0, #3
 80006ae:	f005 f85d 	bl	800576c <LOGGER_SendFormatted>
}
 80006b2:	e003      	b.n	80006bc <CommandSender_Send+0xb0>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006b4:	4908      	ldr	r1, [pc, #32]	@ (80006d8 <CommandSender_Send+0xcc>)
 80006b6:	2002      	movs	r0, #2
 80006b8:	f005 f858 	bl	800576c <LOGGER_SendFormatted>
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	@ 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	080194a0 	.word	0x080194a0
 80006c8:	080194bc 	.word	0x080194bc
 80006cc:	080194c4 	.word	0x080194c4
 80006d0:	080194dc 	.word	0x080194dc
 80006d4:	0801950c 	.word	0x0801950c
 80006d8:	08019544 	.word	0x08019544

080006dc <get_state_name>:

// 순차 메시지 번호 (JOIN마다 리셋됨)
static int g_message_number = 1;

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d843      	bhi.n	8000774 <get_state_name+0x98>
 80006ec:	a201      	add	r2, pc, #4	@ (adr r2, 80006f4 <get_state_name+0x18>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000735 	.word	0x08000735
 80006f8:	08000739 	.word	0x08000739
 80006fc:	0800073d 	.word	0x0800073d
 8000700:	08000741 	.word	0x08000741
 8000704:	08000745 	.word	0x08000745
 8000708:	08000749 	.word	0x08000749
 800070c:	0800074d 	.word	0x0800074d
 8000710:	08000751 	.word	0x08000751
 8000714:	08000755 	.word	0x08000755
 8000718:	08000759 	.word	0x08000759
 800071c:	0800075d 	.word	0x0800075d
 8000720:	08000761 	.word	0x08000761
 8000724:	08000765 	.word	0x08000765
 8000728:	08000769 	.word	0x08000769
 800072c:	0800076d 	.word	0x0800076d
 8000730:	08000771 	.word	0x08000771
        case LORA_STATE_INIT: return "INIT";
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <get_state_name+0xa8>)
 8000736:	e01e      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <get_state_name+0xac>)
 800073a:	e01c      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <get_state_name+0xb0>)
 800073e:	e01a      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <get_state_name+0xb4>)
 8000742:	e018      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <get_state_name+0xb8>)
 8000746:	e016      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_TIMEREQ: return "SEND_TIMEREQ";
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <get_state_name+0xbc>)
 800074a:	e014      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_TIMEREQ_OK: return "WAIT_TIMEREQ_OK";
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <get_state_name+0xc0>)
 800074e:	e012      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_TIME_SYNC: return "WAIT_TIME_SYNC";
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <get_state_name+0xc4>)
 8000752:	e010      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_LTIME: return "SEND_LTIME";
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <get_state_name+0xc8>)
 8000756:	e00e      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_LTIME_RESPONSE: return "WAIT_LTIME_RESPONSE";
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <get_state_name+0xcc>)
 800075a:	e00c      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <get_state_name+0xd0>)
 800075e:	e00a      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <get_state_name+0xd4>)
 8000762:	e008      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <get_state_name+0xd8>)
 8000766:	e006      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <get_state_name+0xdc>)
 800076a:	e004      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_DONE: return "DONE";
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <get_state_name+0xe0>)
 800076e:	e002      	b.n	8000776 <get_state_name+0x9a>
        case LORA_STATE_ERROR: return "ERROR";
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <get_state_name+0xe4>)
 8000772:	e000      	b.n	8000776 <get_state_name+0x9a>
        default: return "UNKNOWN";
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <get_state_name+0xe8>)
    }
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	080195b0 	.word	0x080195b0
 8000788:	080195b8 	.word	0x080195b8
 800078c:	080195c4 	.word	0x080195c4
 8000790:	080195cc 	.word	0x080195cc
 8000794:	080195d8 	.word	0x080195d8
 8000798:	080195e8 	.word	0x080195e8
 800079c:	080195f8 	.word	0x080195f8
 80007a0:	08019608 	.word	0x08019608
 80007a4:	08019618 	.word	0x08019618
 80007a8:	08019624 	.word	0x08019624
 80007ac:	08019638 	.word	0x08019638
 80007b0:	08019648 	.word	0x08019648
 80007b4:	0801965c 	.word	0x0801965c
 80007b8:	08019670 	.word	0x08019670
 80007bc:	0801967c 	.word	0x0801967c
 80007c0:	08019684 	.word	0x08019684
 80007c4:	0801968c 	.word	0x0801968c

080007c8 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d032      	beq.n	800083e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <LoraStarter_InitWithDefaults+0x80>)
 80007e8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ea:	2205      	movs	r2, #5
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <LoraStarter_InitWithDefaults+0x32>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	e000      	b.n	80007fc <LoraStarter_InitWithDefaults+0x34>
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <LoraStarter_InitWithDefaults+0x84>)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = LORA_MAX_RETRY_COUNT;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = LORA_SEND_INTERVAL_MS;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <LoraStarter_InitWithDefaults+0x88>)
 800080a:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = LORA_RETRY_DELAY_MS;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <LoraStarter_InitWithDefaults+0x8c>)
 8000836:	2001      	movs	r0, #1
 8000838:	f004 ff98 	bl	800576c <LOGGER_SendFormatted>
 800083c:	e000      	b.n	8000840 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800083e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	080196b0 	.word	0x080196b0
 8000850:	000493e0 	.word	0x000493e0
 8000854:	080196b8 	.word	0x080196b8

08000858 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0c3      	sub	sp, #268	@ 0x10c
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000864:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000868:	6019      	str	r1, [r3, #0]
    if (ctx == NULL) return;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	f000 83a8 	beq.w	8000fc2 <LoraStarter_Process+0x76a>

    LoraState old_state = ctx->state;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb

    switch(ctx->state) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0d      	cmp	r3, #13
 8000880:	f200 837c 	bhi.w	8000f7c <LoraStarter_Process+0x724>
 8000884:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <LoraStarter_Process+0x34>)
 8000886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088a:	bf00      	nop
 800088c:	080008c5 	.word	0x080008c5
 8000890:	08000913 	.word	0x08000913
 8000894:	08000969 	.word	0x08000969
 8000898:	08000a4b 	.word	0x08000a4b
 800089c:	08000a61 	.word	0x08000a61
 80008a0:	08000ab7 	.word	0x08000ab7
 80008a4:	08000acd 	.word	0x08000acd
 80008a8:	08000b0d 	.word	0x08000b0d
 80008ac:	08000b61 	.word	0x08000b61
 80008b0:	08000bc9 	.word	0x08000bc9
 80008b4:	08000c5f 	.word	0x08000c5f
 80008b8:	08000d3b 	.word	0x08000d3b
 80008bc:	08000e43 	.word	0x08000e43
 80008c0:	08000f09 	.word	0x08000f09
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <LoraStarter_Process+0x8c>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <LoraStarter_Process+0x9a>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4aa2      	ldr	r2, [pc, #648]	@ (8000b78 <LoraStarter_Process+0x320>)
 80008f0:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69da      	ldr	r2, [r3, #28]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000908:	499c      	ldr	r1, [pc, #624]	@ (8000b7c <LoraStarter_Process+0x324>)
 800090a:	2001      	movs	r0, #1
 800090c:	f004 ff2e 	bl	800576c <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000910:	e33f      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	429a      	cmp	r2, r3
 800091c:	da20      	bge.n	8000960 <LoraStarter_Process+0x108>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	1c59      	adds	r1, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68d8      	ldr	r0, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	460a      	mov	r2, r1
 800093c:	4990      	ldr	r1, [pc, #576]	@ (8000b80 <LoraStarter_Process+0x328>)
 800093e:	2000      	movs	r0, #0
 8000940:	f004 ff14 	bl	800576c <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe5a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2202      	movs	r2, #2
 800095c:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 800095e:	e318      	b.n	8000f92 <LoraStarter_Process+0x73a>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2203      	movs	r2, #3
 8000964:	701a      	strb	r2, [r3, #0]
            break;
 8000966:	e314      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 8000968:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800096c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 8304 	beq.w	8000f80 <LoraStarter_Process+0x728>
                if (is_response_ok(uart_rx)) {
 8000978:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800097c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	f000 fb2b 	bl	8000fdc <is_response_ok>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d010      	beq.n	80009ae <LoraStarter_Process+0x156>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	3301      	adds	r3, #1
 8000992:	461a      	mov	r2, r3
 8000994:	497b      	ldr	r1, [pc, #492]	@ (8000b84 <LoraStarter_Process+0x32c>)
 8000996:	2000      	movs	r0, #0
 8000998:	f004 fee8 	bl	800576c <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80009ac:	e2e8      	b.n	8000f80 <LoraStarter_Process+0x728>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80009ae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009b6:	4974      	ldr	r1, [pc, #464]	@ (8000b88 <LoraStarter_Process+0x330>)
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	f017 f9bb 	bl	8017d34 <strstr>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10b      	bne.n	80009dc <LoraStarter_Process+0x184>
 80009c4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009cc:	496f      	ldr	r1, [pc, #444]	@ (8000b8c <LoraStarter_Process+0x334>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	f017 f9b0 	bl	8017d34 <strstr>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 82d2 	beq.w	8000f80 <LoraStarter_Process+0x728>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4968      	ldr	r1, [pc, #416]	@ (8000b90 <LoraStarter_Process+0x338>)
 80009ee:	2002      	movs	r0, #2
 80009f0:	f004 febc 	bl	800576c <LOGGER_SendFormatted>
                    ctx->error_count++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a1b      	ldr	r3, [r3, #32]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	dc0d      	bgt.n	8000a22 <LoraStarter_Process+0x1ca>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4960      	ldr	r1, [pc, #384]	@ (8000b94 <LoraStarter_Process+0x33c>)
 8000a14:	2001      	movs	r0, #1
 8000a16:	f004 fea9 	bl	800576c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	701a      	strb	r2, [r3, #0]
            break;
 8000a20:	e2ae      	b.n	8000f80 <LoraStarter_Process+0x728>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	495b      	ldr	r1, [pc, #364]	@ (8000b98 <LoraStarter_Process+0x340>)
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f004 fe9d 	bl	800576c <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
            break;
 8000a48:	e29a      	b.n	8000f80 <LoraStarter_Process+0x728>
        case LORA_STATE_SEND_JOIN:
            LOG_INFO("[LoRa] 🌐 JOIN ATTEMPT started");
 8000a4a:	4954      	ldr	r1, [pc, #336]	@ (8000b9c <LoraStarter_Process+0x344>)
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f004 fe8d 	bl	800576c <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 8000a52:	4853      	ldr	r0, [pc, #332]	@ (8000ba0 <LoraStarter_Process+0x348>)
 8000a54:	f7ff fdda 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	701a      	strb	r2, [r3, #0]
            break;
 8000a5e:	e298      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 8000a60:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a64:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 828a 	beq.w	8000f84 <LoraStarter_Process+0x72c>
 8000a70:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	f000 fb17 	bl	80010ac <is_join_response_ok>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 827f 	beq.w	8000f84 <LoraStarter_Process+0x72c>
                // JOIN SUCCESS는 ResponseHandler에서 이미 로그 출력됨
                ctx->state = LORA_STATE_SEND_TIMEREQ; // JOIN 후 시간 동기화 활성화로 전환
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2205      	movs	r2, #5
 8000a8a:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
                g_message_number = 1; // JOIN 성공 시 메시지 번호 리셋
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba4 <LoraStarter_Process+0x34c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
                LOG_INFO("[LoRa] JOIN successful, requesting time synchronization...");
 8000aac:	493e      	ldr	r1, [pc, #248]	@ (8000ba8 <LoraStarter_Process+0x350>)
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f004 fe5c 	bl	800576c <LOGGER_SendFormatted>
            }
            break;
 8000ab4:	e266      	b.n	8000f84 <LoraStarter_Process+0x72c>
        case LORA_STATE_SEND_TIMEREQ:
            LOG_INFO("[LoRa] Sending time synchronization request...");
 8000ab6:	493d      	ldr	r1, [pc, #244]	@ (8000bac <LoraStarter_Process+0x354>)
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f004 fe57 	bl	800576c <LOGGER_SendFormatted>
            CommandSender_Send("AT+TIMEREQ=1\r\n");
 8000abe:	483c      	ldr	r0, [pc, #240]	@ (8000bb0 <LoraStarter_Process+0x358>)
 8000ac0:	f7ff fda4 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_TIMEREQ_OK;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2206      	movs	r2, #6
 8000ac8:	701a      	strb	r2, [r3, #0]
            break;
 8000aca:	e262      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_TIMEREQ_OK:
            if (uart_rx && is_response_ok(uart_rx)) {
 8000acc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000ad0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8256 	beq.w	8000f88 <LoraStarter_Process+0x730>
 8000adc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000ae0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	f000 fa79 	bl	8000fdc <is_response_ok>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 824b 	beq.w	8000f88 <LoraStarter_Process+0x730>
                LOG_INFO("[LoRa] ✅ Time synchronization enabled");
 8000af2:	4930      	ldr	r1, [pc, #192]	@ (8000bb4 <LoraStarter_Process+0x35c>)
 8000af4:	2001      	movs	r0, #1
 8000af6:	f004 fe39 	bl	800576c <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_WAIT_TIME_SYNC;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2207      	movs	r2, #7
 8000afe:	701a      	strb	r2, [r3, #0]
                ctx->last_retry_time = TIME_GetCurrentMs(); // 5초 지연 시작 시점 기록
 8000b00:	f004 fd9c 	bl	800563c <TIME_GetCurrentMs>
 8000b04:	4602      	mov	r2, r0
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            break;
 8000b0a:	e23d      	b.n	8000f88 <LoraStarter_Process+0x730>
        case LORA_STATE_WAIT_TIME_SYNC:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000b0c:	f004 fd96 	bl	800563c <TIME_GetCurrentMs>
 8000b10:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                const uint32_t TIME_SYNC_DELAY_MS = LORA_TIME_SYNC_DELAY_MS;
 8000b14:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                
                if (ctx->last_retry_time == 0) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d108      	bne.n	8000b36 <LoraStarter_Process+0x2de>
                    // 처음 진입 시 시작 시간 기록
                    ctx->last_retry_time = current_time;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
                    LOG_INFO("[LoRa] ⏳ Waiting 5 seconds for time synchronization...");
 8000b2c:	4922      	ldr	r1, [pc, #136]	@ (8000bb8 <LoraStarter_Process+0x360>)
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f004 fe1c 	bl	800576c <LOGGER_SendFormatted>
                    LOG_INFO("[LoRa] ✅ Time sync delay completed, requesting network time");
                    ctx->state = LORA_STATE_SEND_LTIME;
                    ctx->last_retry_time = 0; // 타이머 리셋
                }
            }
            break;
 8000b34:	e22a      	b.n	8000f8c <LoraStarter_Process+0x734>
                } else if ((current_time - ctx->last_retry_time) >= TIME_SYNC_DELAY_MS) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f200 8221 	bhi.w	8000f8c <LoraStarter_Process+0x734>
                    LOG_INFO("[LoRa] ✅ Time sync delay completed, requesting network time");
 8000b4a:	491c      	ldr	r1, [pc, #112]	@ (8000bbc <LoraStarter_Process+0x364>)
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f004 fe0d 	bl	800576c <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2208      	movs	r2, #8
 8000b56:	701a      	strb	r2, [r3, #0]
                    ctx->last_retry_time = 0; // 타이머 리셋
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8000b5e:	e215      	b.n	8000f8c <LoraStarter_Process+0x734>
        case LORA_STATE_SEND_LTIME:
            LOG_INFO("[LoRa] Requesting network time...");
 8000b60:	4917      	ldr	r1, [pc, #92]	@ (8000bc0 <LoraStarter_Process+0x368>)
 8000b62:	2001      	movs	r0, #1
 8000b64:	f004 fe02 	bl	800576c <LOGGER_SendFormatted>
            CommandSender_Send("AT+LTIME=?\r\n");
 8000b68:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <LoraStarter_Process+0x36c>)
 8000b6a:	f7ff fd4f 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_LTIME_RESPONSE;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2209      	movs	r2, #9
 8000b72:	701a      	strb	r2, [r3, #0]
            break;
 8000b74:	e20d      	b.n	8000f92 <LoraStarter_Process+0x73a>
 8000b76:	bf00      	nop
 8000b78:	080196f8 	.word	0x080196f8
 8000b7c:	08019700 	.word	0x08019700
 8000b80:	08019738 	.word	0x08019738
 8000b84:	0801975c 	.word	0x0801975c
 8000b88:	08019684 	.word	0x08019684
 8000b8c:	0801977c 	.word	0x0801977c
 8000b90:	08019794 	.word	0x08019794
 8000b94:	080197b4 	.word	0x080197b4
 8000b98:	080197e0 	.word	0x080197e0
 8000b9c:	0801981c 	.word	0x0801981c
 8000ba0:	08019840 	.word	0x08019840
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	0801984c 	.word	0x0801984c
 8000bac:	08019888 	.word	0x08019888
 8000bb0:	080198b8 	.word	0x080198b8
 8000bb4:	080198c8 	.word	0x080198c8
 8000bb8:	080198f0 	.word	0x080198f0
 8000bbc:	0801992c 	.word	0x0801992c
 8000bc0:	0801996c 	.word	0x0801996c
 8000bc4:	08019990 	.word	0x08019990
        case LORA_STATE_WAIT_LTIME_RESPONSE:
            if (uart_rx) {
 8000bc8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d03e      	beq.n	8000c54 <LoraStarter_Process+0x3fc>
                LOG_DEBUG("[LoRa] LTIME response received: '%s'", uart_rx);
 8000bd6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	49b1      	ldr	r1, [pc, #708]	@ (8000ea8 <LoraStarter_Process+0x650>)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f004 fdc2 	bl	800576c <LOGGER_SendFormatted>
                
                // ResponseHandler에서 시간 응답 파싱 처리
                if (ResponseHandler_IsTimeResponse(uart_rx)) {
 8000be8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	f000 fb37 	bl	8001264 <ResponseHandler_IsTimeResponse>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d021      	beq.n	8000c40 <LoraStarter_Process+0x3e8>
                    ResponseHandler_ParseTimeResponse(uart_rx);
 8000bfc:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	f000 fbdd 	bl	80013c4 <ResponseHandler_ParseTimeResponse>
                    
                    // 현재 상태에 따라 다른 동작
                    if (ctx->send_count == 0) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10e      	bne.n	8000c30 <LoraStarter_Process+0x3d8>
                        // 첫 번째 시간 동기화 (JOIN 후) - 주기적 전송 시작
                        LOG_INFO("[LoRa] 🕐 Initial time synchronized, starting periodic transmission");
 8000c12:	49a6      	ldr	r1, [pc, #664]	@ (8000eac <LoraStarter_Process+0x654>)
 8000c14:	2001      	movs	r0, #1
 8000c16:	f004 fda9 	bl	800576c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	701a      	strb	r2, [r3, #0]
                        LOG_INFO("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	461a      	mov	r2, r3
 8000c26:	49a2      	ldr	r1, [pc, #648]	@ (8000eb0 <LoraStarter_Process+0x658>)
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f004 fd9f 	bl	800576c <LOGGER_SendFormatted>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
                }
            } else {
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
            }
            break;
 8000c2e:	e1b0      	b.n	8000f92 <LoraStarter_Process+0x73a>
                        LOG_INFO("[LoRa] 🕐 Time synchronized, proceeding to SEND");
 8000c30:	49a0      	ldr	r1, [pc, #640]	@ (8000eb4 <LoraStarter_Process+0x65c>)
 8000c32:	2001      	movs	r0, #1
 8000c34:	f004 fd9a 	bl	800576c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	701a      	strb	r2, [r3, #0]
            break;
 8000c3e:	e1a8      	b.n	8000f92 <LoraStarter_Process+0x73a>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
 8000c40:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	499b      	ldr	r1, [pc, #620]	@ (8000eb8 <LoraStarter_Process+0x660>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f004 fd8d 	bl	800576c <LOGGER_SendFormatted>
            break;
 8000c52:	e19e      	b.n	8000f92 <LoraStarter_Process+0x73a>
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
 8000c54:	4999      	ldr	r1, [pc, #612]	@ (8000ebc <LoraStarter_Process+0x664>)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f004 fd88 	bl	800576c <LOGGER_SendFormatted>
            break;
 8000c5c:	e199      	b.n	8000f92 <LoraStarter_Process+0x73a>
                char send_cmd[128];
                char hex_data[64];
                char sequential_message[16];
                
                // 순차 번호 메시지 생성 (0001~9999, JOIN마다 리셋)
                snprintf(sequential_message, sizeof(sequential_message), "%04d", g_message_number);
 8000c5e:	4b98      	ldr	r3, [pc, #608]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8000c66:	4a97      	ldr	r2, [pc, #604]	@ (8000ec4 <LoraStarter_Process+0x66c>)
 8000c68:	2110      	movs	r1, #16
 8000c6a:	f016 ff35 	bl	8017ad8 <sniprintf>
                
                // 최대값 다음에는 0001로 다시 시작
                g_message_number++;
 8000c6e:	4b94      	ldr	r3, [pc, #592]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a92      	ldr	r2, [pc, #584]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c76:	6013      	str	r3, [r2, #0]
                if (g_message_number > LORA_MESSAGE_NUMBER_MAX) {
 8000c78:	4b91      	ldr	r3, [pc, #580]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c80:	4293      	cmp	r3, r2
 8000c82:	dd02      	ble.n	8000c8a <LoraStarter_Process+0x432>
                    g_message_number = 1;
 8000c84:	4b8e      	ldr	r3, [pc, #568]	@ (8000ec0 <LoraStarter_Process+0x668>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
                }
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(sequential_message);
 8000c8a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fac8 	bl	8000224 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ca0:	e014      	b.n	8000ccc <LoraStarter_Process+0x474>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)sequential_message[i]);
 8000ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	18d0      	adds	r0, r2, r3
 8000cae:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8000cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4982      	ldr	r1, [pc, #520]	@ (8000ec8 <LoraStarter_Process+0x670>)
 8000cbe:	f016 ff41 	bl	8017b44 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ccc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	da03      	bge.n	8000ce0 <LoraStarter_Process+0x488>
 8000cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cdc:	2b1e      	cmp	r3, #30
 8000cde:	dde0      	ble.n	8000ca2 <LoraStarter_Process+0x44a>
                }
                hex_data[len*2] = '\0';
 8000ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000cea:	443b      	add	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	f803 2cf8 	strb.w	r2, [r3, #-248]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000cfa:	4a74      	ldr	r2, [pc, #464]	@ (8000ecc <LoraStarter_Process+0x674>)
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	f016 feeb 	bl	8017ad8 <sniprintf>
                LOG_WARN("[LoRa] 📤 SEND ATTEMPT: %s", sequential_message);
 8000d02:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000d06:	461a      	mov	r2, r3
 8000d08:	4971      	ldr	r1, [pc, #452]	@ (8000ed0 <LoraStarter_Process+0x678>)
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f004 fd2e 	bl	800576c <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000d10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc79 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	220b      	movs	r2, #11
 8000d1e:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4968      	ldr	r1, [pc, #416]	@ (8000ed4 <LoraStarter_Process+0x67c>)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f004 fd1a 	bl	800576c <LOGGER_SendFormatted>
            }
            break;
 8000d38:	e12b      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000d3a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d3e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 8123 	beq.w	8000f90 <LoraStarter_Process+0x738>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000d4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	f000 fa30 	bl	80011b8 <ResponseHandler_ParseSendResponse>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
                switch(response_type) {
 8000d5e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d01a      	beq.n	8000d9c <LoraStarter_Process+0x544>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	dc60      	bgt.n	8000e2c <LoraStarter_Process+0x5d4>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <LoraStarter_Process+0x51c>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d028      	beq.n	8000dc4 <LoraStarter_Process+0x56c>
 8000d72:	e05b      	b.n	8000e2c <LoraStarter_Process+0x5d4>
                    case RESPONSE_OK:
                        // SEND SUCCESS는 ResponseHandler에서 이미 로그 출력됨
                        // SEND 성공 후 다음 전송 대기 상태로 전환
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	220c      	movs	r2, #12
 8000d78:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = LORA_RETRY_DELAY_MS; // 재시도 지연 시간 리셋
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 송신 완료 시간 저장
 8000d88:	f004 fc58 	bl	800563c <TIME_GetCurrentMs>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	611a      	str	r2, [r3, #16]
                        LOG_INFO("[LoRa] SEND successful, waiting for next interval...");
 8000d92:	4951      	ldr	r1, [pc, #324]	@ (8000ed8 <LoraStarter_Process+0x680>)
 8000d94:	2001      	movs	r0, #1
 8000d96:	f004 fce9 	bl	800576c <LOGGER_SendFormatted>
                        break;
 8000d9a:	e051      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout - waiting for next interval");
 8000d9c:	494f      	ldr	r1, [pc, #316]	@ (8000edc <LoraStarter_Process+0x684>)
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f004 fce4 	bl	800576c <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 타임아웃 시 대기 상태로 전환
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	220c      	movs	r2, #12
 8000da8:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 타임아웃 시간 저장
 8000db8:	f004 fc40 	bl	800563c <TIME_GetCurrentMs>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	611a      	str	r2, [r3, #16]
                        break;
 8000dc2:	e03d      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000dc4:	4a46      	ldr	r2, [pc, #280]	@ (8000ee0 <LoraStarter_Process+0x688>)
 8000dc6:	4947      	ldr	r1, [pc, #284]	@ (8000ee4 <LoraStarter_Process+0x68c>)
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f004 fccf 	bl	800576c <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4942      	ldr	r1, [pc, #264]	@ (8000ee8 <LoraStarter_Process+0x690>)
 8000de0:	2002      	movs	r0, #2
 8000de2:	f004 fcc3 	bl	800576c <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <LoraStarter_Process+0x5a2>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a1a      	ldr	r2, [r3, #32]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df6:	429a      	cmp	r2, r3
 8000df8:	da10      	bge.n	8000e1c <LoraStarter_Process+0x5c4>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1a      	ldr	r2, [r3, #32]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <LoraStarter_Process+0x5b2>
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <LoraStarter_Process+0x694>)
 8000e08:	e000      	b.n	8000e0c <LoraStarter_Process+0x5b4>
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <LoraStarter_Process+0x698>)
 8000e0c:	4939      	ldr	r1, [pc, #228]	@ (8000ef4 <LoraStarter_Process+0x69c>)
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f004 fcac 	bl	800576c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	220d      	movs	r2, #13
 8000e18:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000e1a:	e011      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000e1c:	4936      	ldr	r1, [pc, #216]	@ (8000ef8 <LoraStarter_Process+0x6a0>)
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f004 fca4 	bl	800576c <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	220f      	movs	r2, #15
 8000e28:	701a      	strb	r2, [r3, #0]
                        break;
 8000e2a:	e009      	b.n	8000e40 <LoraStarter_Process+0x5e8>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000e2c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4931      	ldr	r1, [pc, #196]	@ (8000efc <LoraStarter_Process+0x6a4>)
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f004 fc97 	bl	800576c <LOGGER_SendFormatted>
                        break;
 8000e3e:	bf00      	nop
                }
            }
            break;
 8000e40:	e0a6      	b.n	8000f90 <LoraStarter_Process+0x738>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000e42:	f004 fbfb 	bl	800563c <TIME_GetCurrentMs>
 8000e46:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <LoraStarter_Process+0x600>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	e001      	b.n	8000e5c <LoraStarter_Process+0x604>
 8000e58:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d809      	bhi.n	8000e86 <LoraStarter_Process+0x62e>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), requesting time before next send", interval_ms);
 8000e72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e76:	4922      	ldr	r1, [pc, #136]	@ (8000f00 <LoraStarter_Process+0x6a8>)
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f004 fc77 	bl	800576c <LOGGER_SendFormatted>
                    // 다음 주기적 전송 전 시간 동기화 실행 (LTIME → SEND 순서)
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2208      	movs	r2, #8
 8000e82:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000e84:	e085      	b.n	8000f92 <LoraStarter_Process+0x73a>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e94:	4413      	add	r3, r2
 8000e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000e9a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000e9e:	4919      	ldr	r1, [pc, #100]	@ (8000f04 <LoraStarter_Process+0x6ac>)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f004 fc63 	bl	800576c <LOGGER_SendFormatted>
            break;
 8000ea6:	e074      	b.n	8000f92 <LoraStarter_Process+0x73a>
 8000ea8:	080199a0 	.word	0x080199a0
 8000eac:	080199c8 	.word	0x080199c8
 8000eb0:	08019a10 	.word	0x08019a10
 8000eb4:	08019a44 	.word	0x08019a44
 8000eb8:	08019a78 	.word	0x08019a78
 8000ebc:	08019aa8 	.word	0x08019aa8
 8000ec0:	20000014 	.word	0x20000014
 8000ec4:	08019ae0 	.word	0x08019ae0
 8000ec8:	08019ae8 	.word	0x08019ae8
 8000ecc:	08019af0 	.word	0x08019af0
 8000ed0:	08019b00 	.word	0x08019b00
 8000ed4:	08019b20 	.word	0x08019b20
 8000ed8:	08019b38 	.word	0x08019b38
 8000edc:	08019b70 	.word	0x08019b70
 8000ee0:	08019ba0 	.word	0x08019ba0
 8000ee4:	08019bb0 	.word	0x08019bb0
 8000ee8:	08019bc8 	.word	0x08019bc8
 8000eec:	08019be0 	.word	0x08019be0
 8000ef0:	08019bf0 	.word	0x08019bf0
 8000ef4:	08019bf4 	.word	0x08019bf4
 8000ef8:	08019c10 	.word	0x08019c10
 8000efc:	08019c34 	.word	0x08019c34
 8000f00:	08019c50 	.word	0x08019c50
 8000f04:	08019c98 	.word	0x08019c98
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000f08:	f004 fb98 	bl	800563c <TIME_GetCurrentMs>
 8000f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                
                if (ctx->last_retry_time == 0) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10b      	bne.n	8000f30 <LoraStarter_Process+0x6d8>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000f18:	492c      	ldr	r1, [pc, #176]	@ (8000fcc <LoraStarter_Process+0x774>)
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f004 fc26 	bl	800576c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000f2e:	e030      	b.n	8000f92 <LoraStarter_Process+0x73a>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d30e      	bcc.n	8000f60 <LoraStarter_Process+0x708>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f46:	461a      	mov	r2, r3
 8000f48:	4921      	ldr	r1, [pc, #132]	@ (8000fd0 <LoraStarter_Process+0x778>)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f004 fc0e 	bl	800576c <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f56:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	701a      	strb	r2, [r3, #0]
            break;
 8000f5e:	e018      	b.n	8000f92 <LoraStarter_Process+0x73a>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4918      	ldr	r1, [pc, #96]	@ (8000fd4 <LoraStarter_Process+0x77c>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f004 fbf9 	bl	800576c <LOGGER_SendFormatted>
            break;
 8000f7a:	e00a      	b.n	8000f92 <LoraStarter_Process+0x73a>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000f7c:	bf00      	nop
 8000f7e:	e008      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f80:	bf00      	nop
 8000f82:	e006      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f84:	bf00      	nop
 8000f86:	e004      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f88:	bf00      	nop
 8000f8a:	e002      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f8c:	bf00      	nop
 8000f8e:	e000      	b.n	8000f92 <LoraStarter_Process+0x73a>
            break;
 8000f90:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d012      	beq.n	8000fc4 <LoraStarter_Process+0x76c>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000f9e:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fb9a 	bl	80006dc <get_state_name>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fb94 	bl	80006dc <get_state_name>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4622      	mov	r2, r4
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <LoraStarter_Process+0x780>)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f004 fbd6 	bl	800576c <LOGGER_SendFormatted>
 8000fc0:	e000      	b.n	8000fc4 <LoraStarter_Process+0x76c>
    if (ctx == NULL) return;
 8000fc2:	bf00      	nop
    }
}
 8000fc4:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	08019ccc 	.word	0x08019ccc
 8000fd0:	08019ce4 	.word	0x08019ce4
 8000fd4:	08019d0c 	.word	0x08019d0c
 8000fd8:	08019d40 	.word	0x08019d40

08000fdc <is_response_ok>:
// 전역 변수: 네트워크에서 수신한 시간 정보 저장
static char g_network_time[64] = {0};
static bool g_time_synchronized = false;

bool is_response_ok(const char* response)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d105      	bne.n	8000ff6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000fea:	4925      	ldr	r1, [pc, #148]	@ (8001080 <is_response_ok+0xa4>)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f004 fbbd 	bl	800576c <LOGGER_SendFormatted>
        return false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e03f      	b.n	8001076 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4922      	ldr	r1, [pc, #136]	@ (8001084 <is_response_ok+0xa8>)
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f004 fbb6 	bl	800576c <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8001000:	4921      	ldr	r1, [pc, #132]	@ (8001088 <is_response_ok+0xac>)
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff f904 	bl	8000210 <strcmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 800100e:	491f      	ldr	r1, [pc, #124]	@ (800108c <is_response_ok+0xb0>)
 8001010:	2000      	movs	r0, #0
 8001012:	f004 fbab 	bl	800576c <LOGGER_SendFormatted>
        return true;
 8001016:	2301      	movs	r3, #1
 8001018:	e02d      	b.n	8001076 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 800101a:	491d      	ldr	r1, [pc, #116]	@ (8001090 <is_response_ok+0xb4>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f8f7 	bl	8000210 <strcmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d105      	bne.n	8001034 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8001028:	491a      	ldr	r1, [pc, #104]	@ (8001094 <is_response_ok+0xb8>)
 800102a:	2000      	movs	r0, #0
 800102c:	f004 fb9e 	bl	800576c <LOGGER_SendFormatted>
        return true;
 8001030:	2301      	movs	r3, #1
 8001032:	e020      	b.n	8001076 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8001034:	4918      	ldr	r1, [pc, #96]	@ (8001098 <is_response_ok+0xbc>)
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff f8ea 	bl	8000210 <strcmp>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8001042:	4916      	ldr	r1, [pc, #88]	@ (800109c <is_response_ok+0xc0>)
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fb91 	bl	800576c <LOGGER_SendFormatted>
        return true;
 800104a:	2301      	movs	r3, #1
 800104c:	e013      	b.n	8001076 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 800104e:	4914      	ldr	r1, [pc, #80]	@ (80010a0 <is_response_ok+0xc4>)
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f016 fe6f 	bl	8017d34 <strstr>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4911      	ldr	r1, [pc, #68]	@ (80010a4 <is_response_ok+0xc8>)
 8001060:	2000      	movs	r0, #0
 8001062:	f004 fb83 	bl	800576c <LOGGER_SendFormatted>
        return true;
 8001066:	2301      	movs	r3, #1
 8001068:	e005      	b.n	8001076 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	490e      	ldr	r1, [pc, #56]	@ (80010a8 <is_response_ok+0xcc>)
 800106e:	2000      	movs	r0, #0
 8001070:	f004 fb7c 	bl	800576c <LOGGER_SendFormatted>
    return false;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	08019d60 	.word	0x08019d60
 8001084:	08019d90 	.word	0x08019d90
 8001088:	08019dc0 	.word	0x08019dc0
 800108c:	08019dc4 	.word	0x08019dc4
 8001090:	08019dec 	.word	0x08019dec
 8001094:	08019df4 	.word	0x08019df4
 8001098:	08019e28 	.word	0x08019e28
 800109c:	08019e2c 	.word	0x08019e2c
 80010a0:	08019e60 	.word	0x08019e60
 80010a4:	08019e68 	.word	0x08019e68
 80010a8:	08019e9c 	.word	0x08019e9c

080010ac <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010bc:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 80010be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010c2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 80010cc:	4934      	ldr	r1, [pc, #208]	@ (80011a0 <is_join_response_ok+0xf4>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f004 fb4c 	bl	800576c <LOGGER_SendFormatted>
        return false;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e05d      	b.n	8001194 <is_join_response_ok+0xe8>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 80010d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010dc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4930      	ldr	r1, [pc, #192]	@ (80011a4 <is_join_response_ok+0xf8>)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f004 fb41 	bl	800576c <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 80010ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010ee:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010f2:	f107 0008 	add.w	r0, r7, #8
 80010f6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	f016 fe07 	bl	8017d0e <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8001100:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001104:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001108:	2200      	movs	r2, #0
 800110a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001116:	e013      	b.n	8001140 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8001118:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b0d      	cmp	r3, #13
 8001120:	d004      	beq.n	800112c <is_join_response_ok+0x80>
 8001122:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b0a      	cmp	r3, #10
 800112a:	d104      	bne.n	8001136 <is_join_response_ok+0x8a>
            *pos = '\0';
 800112c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
            break;
 8001134:	e009      	b.n	800114a <is_join_response_ok+0x9e>
        }
        pos++;
 8001136:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800113a:	3301      	adds	r3, #1
 800113c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001140:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1e6      	bne.n	8001118 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4916      	ldr	r1, [pc, #88]	@ (80011a8 <is_join_response_ok+0xfc>)
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f85d 	bl	8000210 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001164:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <is_join_response_ok+0xd2>
        LOG_INFO("✅ JOIN CONFIRMED - Network joined successfully");
 800116c:	490f      	ldr	r1, [pc, #60]	@ (80011ac <is_join_response_ok+0x100>)
 800116e:	2001      	movs	r0, #1
 8001170:	f004 fafc 	bl	800576c <LOGGER_SendFormatted>
        
        // JOIN 성공 후 시간 조회 요청 (네트워크 동기화 대기 후)
        LOG_INFO("[ResponseHandler] Requesting network time after JOIN success...");
 8001174:	490e      	ldr	r1, [pc, #56]	@ (80011b0 <is_join_response_ok+0x104>)
 8001176:	2001      	movs	r0, #1
 8001178:	f004 faf8 	bl	800576c <LOGGER_SendFormatted>
 800117c:	e008      	b.n	8001190 <is_join_response_ok+0xe4>
        // 짧은 대기 후 시간 조회 (메인 루프에서 처리될 예정)
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 800117e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001182:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	490a      	ldr	r1, [pc, #40]	@ (80011b4 <is_join_response_ok+0x108>)
 800118a:	2000      	movs	r0, #0
 800118c:	f004 faee 	bl	800576c <LOGGER_SendFormatted>
    }
    
    return result;
 8001190:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001194:	4618      	mov	r0, r3
 8001196:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08019ec8 	.word	0x08019ec8
 80011a4:	08019f00 	.word	0x08019f00
 80011a8:	08019f30 	.word	0x08019f30
 80011ac:	08019f3c 	.word	0x08019f3c
 80011b0:	08019f70 	.word	0x08019f70
 80011b4:	08019fb0 	.word	0x08019fb0

080011b8 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 80011c6:	491e      	ldr	r1, [pc, #120]	@ (8001240 <ResponseHandler_ParseSendResponse+0x88>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f004 facf 	bl	800576c <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e031      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	491b      	ldr	r1, [pc, #108]	@ (8001244 <ResponseHandler_ParseSendResponse+0x8c>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f004 fac8 	bl	800576c <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 80011dc:	491a      	ldr	r1, [pc, #104]	@ (8001248 <ResponseHandler_ParseSendResponse+0x90>)
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f016 fda8 	bl	8017d34 <strstr>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("✅ SEND SUCCESS - Data transmitted successfully");
 80011ea:	4918      	ldr	r1, [pc, #96]	@ (800124c <ResponseHandler_ParseSendResponse+0x94>)
 80011ec:	2002      	movs	r0, #2
 80011ee:	f004 fabd 	bl	800576c <LOGGER_SendFormatted>
        return RESPONSE_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e01f      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 80011f6:	4916      	ldr	r1, [pc, #88]	@ (8001250 <ResponseHandler_ParseSendResponse+0x98>)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f016 fd9b 	bl	8017d34 <strstr>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001204:	4913      	ldr	r1, [pc, #76]	@ (8001254 <ResponseHandler_ParseSendResponse+0x9c>)
 8001206:	2002      	movs	r0, #2
 8001208:	f004 fab0 	bl	800576c <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e012      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8001210:	4911      	ldr	r1, [pc, #68]	@ (8001258 <ResponseHandler_ParseSendResponse+0xa0>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7fe fffc 	bl	8000210 <strcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d105      	bne.n	800122a <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800121e:	490f      	ldr	r1, [pc, #60]	@ (800125c <ResponseHandler_ParseSendResponse+0xa4>)
 8001220:	2002      	movs	r0, #2
 8001222:	f004 faa3 	bl	800576c <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001226:	2302      	movs	r3, #2
 8001228:	e005      	b.n	8001236 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	490c      	ldr	r1, [pc, #48]	@ (8001260 <ResponseHandler_ParseSendResponse+0xa8>)
 800122e:	2000      	movs	r0, #0
 8001230:	f004 fa9c 	bl	800576c <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001234:	2303      	movs	r3, #3
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08019fdc 	.word	0x08019fdc
 8001244:	0801a010 	.word	0x0801a010
 8001248:	0801a040 	.word	0x0801a040
 800124c:	0801a058 	.word	0x0801a058
 8001250:	0801a08c 	.word	0x0801a08c
 8001254:	0801a0a8 	.word	0x0801a0a8
 8001258:	0801a0dc 	.word	0x0801a0dc
 800125c:	0801a0e4 	.word	0x0801a0e4
 8001260:	0801a110 	.word	0x0801a110

08001264 <ResponseHandler_IsTimeResponse>:

// 시간 응답 확인 함수
bool ResponseHandler_IsTimeResponse(const char* response)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <ResponseHandler_IsTimeResponse+0x12>
        return false;
 8001272:	2300      	movs	r3, #0
 8001274:	e013      	b.n	800129e <ResponseHandler_IsTimeResponse+0x3a>
    }
    
    return (strstr(response, "LTIME:") != NULL || strstr(response, "LTIME=") != NULL);
 8001276:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <ResponseHandler_IsTimeResponse+0x44>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f016 fd5b 	bl	8017d34 <strstr>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d106      	bne.n	8001292 <ResponseHandler_IsTimeResponse+0x2e>
 8001284:	4909      	ldr	r1, [pc, #36]	@ (80012ac <ResponseHandler_IsTimeResponse+0x48>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f016 fd54 	bl	8017d34 <strstr>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <ResponseHandler_IsTimeResponse+0x32>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <ResponseHandler_IsTimeResponse+0x34>
 8001296:	2300      	movs	r3, #0
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0801a140 	.word	0x0801a140
 80012ac:	0801a148 	.word	0x0801a148

080012b0 <ConvertUTCToKST>:

// 한국 시간대(UTC+9) 보정 함수
static void ConvertUTCToKST(char* time_str) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b09a      	sub	sp, #104	@ 0x68
 80012b4:	af06      	add	r7, sp, #24
 80012b6:	6078      	str	r0, [r7, #4]
    int hour, min, sec, month, day, year;
    
    // "01h51m37s on 07/29/2025" 형식에서 시간 추출
    if (sscanf(time_str, "%dh%dm%ds on %d/%d/%d", 
 80012b8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80012bc:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	9303      	str	r3, [sp, #12]
 80012c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	4936      	ldr	r1, [pc, #216]	@ (80013b4 <ConvertUTCToKST+0x104>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f016 fc53 	bl	8017b88 <siscanf>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d161      	bne.n	80013ac <ConvertUTCToKST+0xfc>
               &hour, &min, &sec, &month, &day, &year) == 6) {
        
        // 한국 시간대로 보정 (UTC+9)
        hour += 9;
 80012e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012ea:	3309      	adds	r3, #9
 80012ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
        
        // 날짜 넘어가는 경우 처리
        if (hour >= 24) {
 80012ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f0:	2b17      	cmp	r3, #23
 80012f2:	dd4a      	ble.n	800138a <ConvertUTCToKST+0xda>
            hour -= 24;
 80012f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f6:	3b18      	subs	r3, #24
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            day += 1;
 80012fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012fc:	3301      	adds	r3, #1
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            
            // 월말 처리 (간단한 버전)
            int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <ConvertUTCToKST+0x108>)
 8001302:	f107 0408 	add.w	r4, r7, #8
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
 8001318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d11c      	bne.n	800135c <ConvertUTCToKST+0xac>
 8001322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <ConvertUTCToKST+0x10c>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1159      	asrs	r1, r3, #5
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1acb      	subs	r3, r1, r3
 8001330:	2164      	movs	r1, #100	@ 0x64
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10d      	bne.n	8001358 <ConvertUTCToKST+0xa8>
 800133c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <ConvertUTCToKST+0x10c>)
 8001340:	fb83 1302 	smull	r1, r3, r3, r2
 8001344:	11d9      	asrs	r1, r3, #7
 8001346:	17d3      	asrs	r3, r2, #31
 8001348:	1acb      	subs	r3, r1, r3
 800134a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <ConvertUTCToKST+0xac>
                days_in_month[1] = 29; // 윤년
 8001358:	231d      	movs	r3, #29
 800135a:	60fb      	str	r3, [r7, #12]
            }
            
            if (day > days_in_month[month - 1]) {
 800135c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800135e:	3b01      	subs	r3, #1
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	3350      	adds	r3, #80	@ 0x50
 8001364:	443b      	add	r3, r7
 8001366:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800136a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800136c:	429a      	cmp	r2, r3
 800136e:	da0c      	bge.n	800138a <ConvertUTCToKST+0xda>
                day = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
                month += 1;
 8001374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001376:	3301      	adds	r3, #1
 8001378:	643b      	str	r3, [r7, #64]	@ 0x40
                if (month > 12) {
 800137a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800137c:	2b0c      	cmp	r3, #12
 800137e:	dd04      	ble.n	800138a <ConvertUTCToKST+0xda>
                    month = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
                    year += 1;
 8001384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001386:	3301      	adds	r3, #1
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }
        }
        
        // 한국 시간으로 수정된 시간 문자열 재구성
        snprintf(time_str, 64, "%02dh%02dm%02ds on %02d/%02d/%d (KST)", 
 800138a:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800138c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800138e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001390:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001392:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001394:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8001396:	9404      	str	r4, [sp, #16]
 8001398:	9003      	str	r0, [sp, #12]
 800139a:	9102      	str	r1, [sp, #8]
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	462b      	mov	r3, r5
 80013a2:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <ConvertUTCToKST+0x110>)
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f016 fb96 	bl	8017ad8 <sniprintf>
                 hour, min, sec, month, day, year);
    }
}
 80013ac:	bf00      	nop
 80013ae:	3750      	adds	r7, #80	@ 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	0801a150 	.word	0x0801a150
 80013b8:	0801a190 	.word	0x0801a190
 80013bc:	51eb851f 	.word	0x51eb851f
 80013c0:	0801a168 	.word	0x0801a168

080013c4 <ResponseHandler_ParseTimeResponse>:

// 시간 응답 파싱 및 저장 함수
void ResponseHandler_ParseTimeResponse(const char* response)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    if (response == NULL || !ResponseHandler_IsTimeResponse(response)) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d05a      	beq.n	8001488 <ResponseHandler_ParseTimeResponse+0xc4>
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff46 	bl	8001264 <ResponseHandler_IsTimeResponse>
 80013d8:	4603      	mov	r3, r0
 80013da:	f083 0301 	eor.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d151      	bne.n	8001488 <ResponseHandler_ParseTimeResponse+0xc4>
        return;
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing time response: '%s'", response);
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	492a      	ldr	r1, [pc, #168]	@ (8001490 <ResponseHandler_ParseTimeResponse+0xcc>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f004 f9bf 	bl	800576c <LOGGER_SendFormatted>
    
    // LTIME 응답에서 시간 정보 추출 (LTIME: 또는 LTIME= 형식 모두 지원)
    const char* time_start = strstr(response, "LTIME:");
 80013ee:	4929      	ldr	r1, [pc, #164]	@ (8001494 <ResponseHandler_ParseTimeResponse+0xd0>)
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f016 fc9f 	bl	8017d34 <strstr>
 80013f6:	60f8      	str	r0, [r7, #12]
    if (time_start != NULL) {
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <ResponseHandler_ParseTimeResponse+0x42>
        // "LTIME: 14h25m30s on 01/29/2025" 형태에서 시간 부분 추출
        time_start += 6; // "LTIME:" 부분 건너뛰기
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3306      	adds	r3, #6
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e00a      	b.n	800141c <ResponseHandler_ParseTimeResponse+0x58>
    } else {
        time_start = strstr(response, "LTIME=");
 8001406:	4924      	ldr	r1, [pc, #144]	@ (8001498 <ResponseHandler_ParseTimeResponse+0xd4>)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f016 fc93 	bl	8017d34 <strstr>
 800140e:	60f8      	str	r0, [r7, #12]
        if (time_start != NULL) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <ResponseHandler_ParseTimeResponse+0x58>
            // "AT+LTIME=00h00m28s on 01/01/19" 형태에서 시간 부분 추출
            time_start += 6; // "LTIME=" 부분 건너뛰기
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3306      	adds	r3, #6
 800141a:	60fb      	str	r3, [r7, #12]
        }
    }
    
    if (time_start != NULL) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d033      	beq.n	800148a <ResponseHandler_ParseTimeResponse+0xc6>
        
        // 앞쪽 공백 제거
        while (*time_start == ' ') {
 8001422:	e002      	b.n	800142a <ResponseHandler_ParseTimeResponse+0x66>
            time_start++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
        while (*time_start == ' ') {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b20      	cmp	r3, #32
 8001430:	d0f8      	beq.n	8001424 <ResponseHandler_ParseTimeResponse+0x60>
        }
        
        // 전역 변수에 시간 정보 저장 (개행 문자 제거)
        strncpy(g_network_time, time_start, sizeof(g_network_time) - 1);
 8001432:	223f      	movs	r2, #63	@ 0x3f
 8001434:	68f9      	ldr	r1, [r7, #12]
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 8001438:	f016 fc69 	bl	8017d0e <strncpy>
        g_network_time[sizeof(g_network_time) - 1] = '\0';
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        
        // 개행 문자 제거
        char* newline = strchr(g_network_time, '\r');
 8001444:	210d      	movs	r1, #13
 8001446:	4815      	ldr	r0, [pc, #84]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 8001448:	f016 fc54 	bl	8017cf4 <strchr>
 800144c:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <ResponseHandler_ParseTimeResponse+0x96>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
        newline = strchr(g_network_time, '\n');
 800145a:	210a      	movs	r1, #10
 800145c:	480f      	ldr	r0, [pc, #60]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 800145e:	f016 fc49 	bl	8017cf4 <strchr>
 8001462:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <ResponseHandler_ParseTimeResponse+0xac>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
        
        // 한국 시간대로 보정
        ConvertUTCToKST(g_network_time);
 8001470:	480a      	ldr	r0, [pc, #40]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 8001472:	f7ff ff1d 	bl	80012b0 <ConvertUTCToKST>
        
        g_time_synchronized = true;
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <ResponseHandler_ParseTimeResponse+0xdc>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
        
        LOG_INFO("[LoRa] 🕐 Network time synchronized (KST): %s", g_network_time);
 800147c:	4a07      	ldr	r2, [pc, #28]	@ (800149c <ResponseHandler_ParseTimeResponse+0xd8>)
 800147e:	4909      	ldr	r1, [pc, #36]	@ (80014a4 <ResponseHandler_ParseTimeResponse+0xe0>)
 8001480:	2001      	movs	r0, #1
 8001482:	f004 f973 	bl	800576c <LOGGER_SendFormatted>
 8001486:	e000      	b.n	800148a <ResponseHandler_ParseTimeResponse+0xc6>
        return;
 8001488:	bf00      	nop
    }
}
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0801a1c0 	.word	0x0801a1c0
 8001494:	0801a140 	.word	0x0801a140
 8001498:	0801a148 	.word	0x0801a148
 800149c:	2000023c 	.word	0x2000023c
 80014a0:	2000027c 	.word	0x2000027c
 80014a4:	0801a1f0 	.word	0x0801a1f0

080014a8 <ResponseHandler_GetNetworkTime>:

// 현재 저장된 네트워크 시간 반환
const char* ResponseHandler_GetNetworkTime(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    if (g_time_synchronized) {
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <ResponseHandler_GetNetworkTime+0x1c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <ResponseHandler_GetNetworkTime+0x10>
        return g_network_time;
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <ResponseHandler_GetNetworkTime+0x20>)
 80014b6:	e000      	b.n	80014ba <ResponseHandler_GetNetworkTime+0x12>
    }
    return NULL;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	2000027c 	.word	0x2000027c
 80014c8:	2000023c 	.word	0x2000023c

080014cc <ResponseHandler_IsTimeSynchronized>:

// 시간 동기화 상태 확인
bool ResponseHandler_IsTimeSynchronized(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
    return g_time_synchronized;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <ResponseHandler_IsTimeSynchronized+0x14>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	2000027c 	.word	0x2000027c

080014e4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <SCB_CleanInvalidateDCache+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f2:	f3bf 8f4f 	dsb	sy
}
 80014f6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <SCB_CleanInvalidateDCache+0x74>)
 80014fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014fe:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0b5b      	lsrs	r3, r3, #13
 8001504:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001508:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001512:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800151c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <SCB_CleanInvalidateDCache+0x74>)
 8001524:	4313      	orrs	r3, r2
 8001526:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ef      	bne.n	8001514 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e5a      	subs	r2, r3, #1
 8001538:	60fa      	str	r2, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e5      	bne.n	800150a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001544:	f3bf 8f6f 	isb	sy
}
 8001548:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <_generate_log_filename>:
#endif

// 내부 함수 구현 - 함수 호출 순서에 맞게 배치
#ifdef STM32F746xx
static int _generate_log_filename(char* filename, size_t max_len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001562:	af00      	add	r7, sp, #0
 8001564:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001568:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800156c:	6018      	str	r0, [r3, #0]
 800156e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001572:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001576:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001578:	4b48      	ldr	r3, [pc, #288]	@ (800169c <_generate_log_filename+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d14a      	bne.n	8001616 <_generate_log_filename+0xba>
        file_counter = 1;
 8001580:	4b46      	ldr	r3, [pc, #280]	@ (800169c <_generate_log_filename+0x140>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001586:	2301      	movs	r3, #1
 8001588:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800158c:	e034      	b.n	80015f8 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <_generate_log_filename+0x144>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001596:	f107 0008 	add.w	r0, r7, #8
 800159a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800159e:	4a41      	ldr	r2, [pc, #260]	@ (80016a4 <_generate_log_filename+0x148>)
 80015a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a4:	f016 fa98 	bl	8017ad8 <sniprintf>
 80015a8:	e008      	b.n	80015bc <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 80015aa:	f107 0008 	add.w	r0, r7, #8
 80015ae:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015b2:	4a3d      	ldr	r2, [pc, #244]	@ (80016a8 <_generate_log_filename+0x14c>)
 80015b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b8:	f016 fa8e 	bl	8017ad8 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015c4:	2201      	movs	r2, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	f012 fb9a 	bl	8013d00 <f_open>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 80015d2:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <_generate_log_filename+0xaa>
                f_close(&test_file);
 80015da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015de:	4618      	mov	r0, r3
 80015e0:	f012 ff0c 	bl	80143fc <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 80015e4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a2c      	ldr	r2, [pc, #176]	@ (800169c <_generate_log_filename+0x140>)
 80015ec:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 80015ee:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015f2:	3301      	adds	r3, #1
 80015f4:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80015f8:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001600:	4293      	cmp	r3, r2
 8001602:	ddc4      	ble.n	800158e <_generate_log_filename+0x32>
 8001604:	e000      	b.n	8001608 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001606:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <_generate_log_filename+0x140>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4927      	ldr	r1, [pc, #156]	@ (80016ac <_generate_log_filename+0x150>)
 8001610:	2000      	movs	r0, #0
 8001612:	f004 f8ab 	bl	800576c <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <_generate_log_filename+0x144>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <_generate_log_filename+0x140>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001626:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 800162a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800162e:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <_generate_log_filename+0x148>)
 8001634:	6809      	ldr	r1, [r1, #0]
 8001636:	6800      	ldr	r0, [r0, #0]
 8001638:	f016 fa4e 	bl	8017ad8 <sniprintf>
 800163c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001640:	e010      	b.n	8001664 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <_generate_log_filename+0x140>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800164a:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 800164e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001652:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001656:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_generate_log_filename+0x14c>)
 8001658:	6809      	ldr	r1, [r1, #0]
 800165a:	6800      	ldr	r0, [r0, #0]
 800165c:	f016 fa3c 	bl	8017ad8 <sniprintf>
 8001660:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <_generate_log_filename+0x140>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <_generate_log_filename+0x140>)
 800166c:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 800166e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001672:	2b00      	cmp	r3, #0
 8001674:	db08      	blt.n	8001688 <_generate_log_filename+0x12c>
 8001676:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800167a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800167e:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d802      	bhi.n	800168e <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001688:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 800168c:	e000      	b.n	8001690 <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200005b8 	.word	0x200005b8
 80016a0:	20000384 	.word	0x20000384
 80016a4:	0801a220 	.word	0x0801a220
 80016a8:	0801a238 	.word	0x0801a238
 80016ac:	0801a248 	.word	0x0801a248

080016b0 <_ensure_persistent_file_open>:

// 지속적 파일 핸들 관리 함수들
static void _ensure_persistent_file_open(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
    if (!g_file_is_open || strlen(g_current_log_file) == 0) {
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <_ensure_persistent_file_open+0x1c>
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d135      	bne.n	8001738 <_ensure_persistent_file_open+0x88>
        // 파일이 열려있지 않거나 파일명이 없으면 새로 열기
        if (g_file_is_open) {
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <_ensure_persistent_file_open+0x30>
            f_close(&g_persistent_log_file);
 80016d4:	481c      	ldr	r0, [pc, #112]	@ (8001748 <_ensure_persistent_file_open+0x98>)
 80016d6:	f012 fe91 	bl	80143fc <f_close>
            g_file_is_open = false;
 80016da:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
        }
        
        // 파일명 생성 (필요시)
        if (strlen(g_current_log_file) == 0) {
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d104      	bne.n	80016f2 <_ensure_persistent_file_open+0x42>
            _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 80016e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ec:	4815      	ldr	r0, [pc, #84]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016ee:	f7ff ff35 	bl	800155c <_generate_log_filename>
        }
        
        // 파일 열기 (append 모드)
        FRESULT open_result = f_open(&g_persistent_log_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 80016f2:	2232      	movs	r2, #50	@ 0x32
 80016f4:	4913      	ldr	r1, [pc, #76]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 80016f6:	4814      	ldr	r0, [pc, #80]	@ (8001748 <_ensure_persistent_file_open+0x98>)
 80016f8:	f012 fb02 	bl	8013d00 <f_open>
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
        if (open_result != FR_OK) {
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <_ensure_persistent_file_open+0x64>
            // 파일이 없으면 생성
            open_result = f_open(&g_persistent_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001706:	220a      	movs	r2, #10
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 800170a:	480f      	ldr	r0, [pc, #60]	@ (8001748 <_ensure_persistent_file_open+0x98>)
 800170c:	f012 faf8 	bl	8013d00 <f_open>
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
        }
        
        if (open_result == FR_OK) {
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d108      	bne.n	800172c <_ensure_persistent_file_open+0x7c>
            g_file_is_open = true;
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <_ensure_persistent_file_open+0x90>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
            LOG_DEBUG("[SDStorage] Persistent file opened: %s", g_current_log_file);
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <_ensure_persistent_file_open+0x94>)
 8001722:	490a      	ldr	r1, [pc, #40]	@ (800174c <_ensure_persistent_file_open+0x9c>)
 8001724:	2000      	movs	r0, #0
 8001726:	f004 f821 	bl	800576c <LOGGER_SendFormatted>
        } else {
            LOG_ERROR("[SDStorage] Failed to open persistent file: %d", open_result);
        }
    }
}
 800172a:	e005      	b.n	8001738 <_ensure_persistent_file_open+0x88>
            LOG_ERROR("[SDStorage] Failed to open persistent file: %d", open_result);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	461a      	mov	r2, r3
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <_ensure_persistent_file_open+0xa0>)
 8001732:	2003      	movs	r0, #3
 8001734:	f004 f81a 	bl	800576c <LOGGER_SendFormatted>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200005b4 	.word	0x200005b4
 8001744:	20000280 	.word	0x20000280
 8001748:	20000388 	.word	0x20000388
 800174c:	0801a27c 	.word	0x0801a27c
 8001750:	0801a2a4 	.word	0x0801a2a4

08001754 <_close_persistent_file>:

static void _close_persistent_file(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    if (g_file_is_open) {
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <_close_persistent_file+0x28>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00a      	beq.n	8001776 <_close_persistent_file+0x22>
        f_close(&g_persistent_log_file);
 8001760:	4807      	ldr	r0, [pc, #28]	@ (8001780 <_close_persistent_file+0x2c>)
 8001762:	f012 fe4b 	bl	80143fc <f_close>
        g_file_is_open = false;
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <_close_persistent_file+0x28>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[SDStorage] Persistent file closed: %s", g_current_log_file);
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_close_persistent_file+0x30>)
 800176e:	4906      	ldr	r1, [pc, #24]	@ (8001788 <_close_persistent_file+0x34>)
 8001770:	2000      	movs	r0, #0
 8001772:	f003 fffb 	bl	800576c <LOGGER_SendFormatted>
    }
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200005b4 	.word	0x200005b4
 8001780:	20000388 	.word	0x20000388
 8001784:	20000280 	.word	0x20000280
 8001788:	0801a2d4 	.word	0x0801a2d4

0800178c <SDStorage_Init>:
static ResultCode _initialize_sd_hardware(void);
static ResultCode _mount_filesystem_with_retry(void);
// static uint32_t _get_current_timestamp(void); - unused function removed

ResultCode SDStorage_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 8001792:	4927      	ldr	r1, [pc, #156]	@ (8001830 <SDStorage_Init+0xa4>)
 8001794:	2001      	movs	r0, #1
 8001796:	f003 ffe9 	bl	800576c <LOGGER_SendFormatted>
    
    // 초기화 시 지속적 파일 닫기
    _close_persistent_file();
 800179a:	f7ff ffdb 	bl	8001754 <_close_persistent_file>
    
    // 1. SD 하드웨어 초기화 및 상태 확인
    ResultCode hw_result = _initialize_sd_hardware();
 800179e:	f000 fa57 	bl	8001c50 <_initialize_sd_hardware>
 80017a2:	60f8      	str	r0, [r7, #12]
    if (hw_result != SDSTORAGE_OK) {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SDStorage_Init+0x22>
        return hw_result;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	e03b      	b.n	8001826 <SDStorage_Init+0x9a>
    }
    
    // 2. 파일시스템 마운트 (재시도 로직 포함)
    ResultCode mount_result = _mount_filesystem_with_retry();
 80017ae:	f000 fae5 	bl	8001d7c <_mount_filesystem_with_retry>
 80017b2:	60b8      	str	r0, [r7, #8]
    if (mount_result != SDSTORAGE_OK) {
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SDStorage_Init+0x32>
        return mount_result;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	e033      	b.n	8001826 <SDStorage_Init+0x9a>
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80017be:	491d      	ldr	r1, [pc, #116]	@ (8001834 <SDStorage_Init+0xa8>)
 80017c0:	2001      	movs	r0, #1
 80017c2:	f003 ffd3 	bl	800576c <LOGGER_SendFormatted>
    
    // 3. 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80017c6:	491c      	ldr	r1, [pc, #112]	@ (8001838 <SDStorage_Init+0xac>)
 80017c8:	2001      	movs	r0, #1
 80017ca:	f003 ffcf 	bl	800576c <LOGGER_SendFormatted>
    ResultCode dir_result = _create_log_directory();
 80017ce:	f000 f9dd 	bl	8001b8c <_create_log_directory>
 80017d2:	6078      	str	r0, [r7, #4]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b16      	ldr	r3, [pc, #88]	@ (800183c <SDStorage_Init+0xb0>)
 80017e2:	701a      	strb	r2, [r3, #0]
    
    // 4. 최종 상태 설정
    g_sd_ready = true;
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <SDStorage_Init+0xb4>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    
    // 기존 로그 파일명이 있으면 보존, 크기는 리셋하지 않음
    if (strlen(g_current_log_file) > 0) {
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <SDStorage_Init+0xb8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <SDStorage_Init+0x76>
        LOG_INFO("[SDStorage] Preserving existing log file: %s (size: %d bytes)", 
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <SDStorage_Init+0xbc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <SDStorage_Init+0xb8>)
 80017f8:	4914      	ldr	r1, [pc, #80]	@ (800184c <SDStorage_Init+0xc0>)
 80017fa:	2001      	movs	r0, #1
 80017fc:	f003 ffb6 	bl	800576c <LOGGER_SendFormatted>
 8001800:	e00c      	b.n	800181c <SDStorage_Init+0x90>
                 g_current_log_file, g_current_log_size);
    } else {
        // 첫 초기화인 경우에만 크기와 파일명 초기화
        g_current_log_size = 0;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <SDStorage_Init+0xbc>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180c:	2100      	movs	r1, #0
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <SDStorage_Init+0xb8>)
 8001810:	f016 fa68 	bl	8017ce4 <memset>
        LOG_INFO("[SDStorage] First initialization - log file will be created on first write");
 8001814:	490e      	ldr	r1, [pc, #56]	@ (8001850 <SDStorage_Init+0xc4>)
 8001816:	2001      	movs	r0, #1
 8001818:	f003 ffa8 	bl	800576c <LOGGER_SendFormatted>
    }
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800181c:	490d      	ldr	r1, [pc, #52]	@ (8001854 <SDStorage_Init+0xc8>)
 800181e:	2001      	movs	r0, #1
 8001820:	f003 ffa4 	bl	800576c <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0801a2fc 	.word	0x0801a2fc
 8001834:	0801a32c 	.word	0x0801a32c
 8001838:	0801a358 	.word	0x0801a358
 800183c:	20000384 	.word	0x20000384
 8001840:	2000027d 	.word	0x2000027d
 8001844:	20000280 	.word	0x20000280
 8001848:	20000380 	.word	0x20000380
 800184c:	0801a380 	.word	0x0801a380
 8001850:	0801a3c0 	.word	0x0801a3c0
 8001854:	0801a40c 	.word	0x0801a40c

08001858 <SDStorage_WriteLog>:

ResultCode SDStorage_WriteLog(const void* data, size_t size)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 800185e:	af02      	add	r7, sp, #8
 8001860:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001864:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001868:	6018      	str	r0, [r3, #0]
 800186a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800186e:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001872:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 8001874:	4b63      	ldr	r3, [pc, #396]	@ (8001a04 <SDStorage_WriteLog+0x1ac>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	f083 0301 	eor.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 8001882:	f06f 03c8 	mvn.w	r3, #200	@ 0xc8
 8001886:	e0b8      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
    }
    
    if (data == NULL || size == 0) {
 8001888:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800188c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <SDStorage_WriteLog+0x4c>
 8001896:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800189a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 80018a4:	f06f 0301 	mvn.w	r3, #1
 80018a8:	e0a7      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
    }
    
    // 새 로그 파일이 필요한 경우 생성 (파일 크기 체크는 일단 생략)
    if (strlen(g_current_log_file) == 0) {
 80018aa:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <SDStorage_WriteLog+0x1b0>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <SDStorage_WriteLog+0x6a>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80018b2:	f000 f8c5 	bl	8001a40 <SDStorage_CreateNewLogFile>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <SDStorage_WriteLog+0x6a>
            return SDSTORAGE_FILE_ERROR;
 80018bc:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 80018c0:	e09b      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
        }
    }

#ifdef STM32F746xx
    // 새로운 방식: 지속적 파일 핸들 사용 (한 번 열어두고 계속 쓰기)
    _ensure_persistent_file_open();
 80018c2:	f7ff fef5 	bl	80016b0 <_ensure_persistent_file_open>
    
    if (!g_file_is_open) {
 80018c6:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <SDStorage_WriteLog+0x1b4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <SDStorage_WriteLog+0x8a>
        LOG_ERROR("[SDStorage] Cannot open persistent file");
 80018d4:	494e      	ldr	r1, [pc, #312]	@ (8001a10 <SDStorage_WriteLog+0x1b8>)
 80018d6:	2003      	movs	r0, #3
 80018d8:	f003 ff48 	bl	800576c <LOGGER_SendFormatted>
        return SDSTORAGE_FILE_ERROR;
 80018dc:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 80018e0:	e08b      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
    }
    
    // 데이터 + 줄바꿈 추가하여 쓰기
    char write_buffer[LOGGER_WRITE_BUFFER_SIZE];
    if (size + 2 < sizeof(write_buffer)) {
 80018e2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018e6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3302      	adds	r3, #2
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d277      	bcs.n	80019e4 <SDStorage_WriteLog+0x18c>
        // 원본 데이터 복사
        memcpy(write_buffer, data, size);
 80018f4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018f8:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 80018fc:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001900:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001904:	f107 000c 	add.w	r0, r7, #12
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	6819      	ldr	r1, [r3, #0]
 800190c:	f016 faab 	bl	8017e66 <memcpy>
        // 줄바꿈 추가
        write_buffer[size] = '\r';
 8001910:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001914:	f2a3 4204 	subw	r2, r3, #1028	@ 0x404
 8001918:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800191c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	220d      	movs	r2, #13
 8001926:	701a      	strb	r2, [r3, #0]
        write_buffer[size + 1] = '\n';
 8001928:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800192c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001938:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 800193c:	210a      	movs	r1, #10
 800193e:	54d1      	strb	r1, [r2, r3]
        
        // 파일에 쓰기 (파일은 이미 열려있음)
        UINT bytes_written;
        FRESULT write_result = f_write(&g_persistent_log_file, write_buffer, size + 2, &bytes_written);
 8001940:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001944:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c9a      	adds	r2, r3, #2
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	f107 010c 	add.w	r1, r7, #12
 8001954:	482f      	ldr	r0, [pc, #188]	@ (8001a14 <SDStorage_WriteLog+0x1bc>)
 8001956:	f012 fb5e 	bl	8014016 <f_write>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
        
        if (write_result == FR_OK && bytes_written == size + 2) {
 8001960:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001964:	2b00      	cmp	r3, #0
 8001966:	d125      	bne.n	80019b4 <SDStorage_WriteLog+0x15c>
 8001968:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800196c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1c9a      	adds	r2, r3, #2
 8001974:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001978:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d118      	bne.n	80019b4 <SDStorage_WriteLog+0x15c>
            // 즉시 동기화 (파일은 열린 상태로 유지)
            f_sync(&g_persistent_log_file);
 8001982:	4824      	ldr	r0, [pc, #144]	@ (8001a14 <SDStorage_WriteLog+0x1bc>)
 8001984:	f012 fcbc 	bl	8014300 <f_sync>
            g_current_log_size += bytes_written;
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <SDStorage_WriteLog+0x1c0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001990:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a1f      	ldr	r2, [pc, #124]	@ (8001a18 <SDStorage_WriteLog+0x1c0>)
 800199a:	6013      	str	r3, [r2, #0]
            LOG_DEBUG("[SDStorage] Persistent write successful: %d bytes", bytes_written);
 800199c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019a0:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	491c      	ldr	r1, [pc, #112]	@ (8001a1c <SDStorage_WriteLog+0x1c4>)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f003 fede 	bl	800576c <LOGGER_SendFormatted>
            return SDSTORAGE_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e022      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
        } else {
            LOG_ERROR("[SDStorage] Persistent write failed: %d, written: %d/%d", write_result, bytes_written, size + 2);
 80019b4:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 80019b8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019bc:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019c6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3302      	adds	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	460b      	mov	r3, r1
 80019d2:	4913      	ldr	r1, [pc, #76]	@ (8001a20 <SDStorage_WriteLog+0x1c8>)
 80019d4:	2003      	movs	r0, #3
 80019d6:	f003 fec9 	bl	800576c <LOGGER_SendFormatted>
            // 쓰기 실패 시 파일 다시 열기 시도
            _close_persistent_file();
 80019da:	f7ff febb 	bl	8001754 <_close_persistent_file>
            return SDSTORAGE_FILE_ERROR;
 80019de:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 80019e2:	e00a      	b.n	80019fa <SDStorage_WriteLog+0x1a2>
        }
    } else {
        LOG_ERROR("[SDStorage] Data too large for write buffer: %d bytes", size);
 80019e4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019e8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	490d      	ldr	r1, [pc, #52]	@ (8001a24 <SDStorage_WriteLog+0x1cc>)
 80019f0:	2003      	movs	r0, #3
 80019f2:	f003 febb 	bl	800576c <LOGGER_SendFormatted>
        return SDSTORAGE_INVALID_PARAM;
 80019f6:	f06f 0301 	mvn.w	r3, #1
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000027d 	.word	0x2000027d
 8001a08:	20000280 	.word	0x20000280
 8001a0c:	200005b4 	.word	0x200005b4
 8001a10:	0801a440 	.word	0x0801a440
 8001a14:	20000388 	.word	0x20000388
 8001a18:	20000380 	.word	0x20000380
 8001a1c:	0801a468 	.word	0x0801a468
 8001a20:	0801a49c 	.word	0x0801a49c
 8001a24:	0801a4d4 	.word	0x0801a4d4

08001a28 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <SDStorage_IsReady+0x14>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000027d 	.word	0x2000027d

08001a40 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

ResultCode SDStorage_CreateNewLogFile(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001a46:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001a48:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <SDStorage_CreateNewLogFile+0x118>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001a56:	f06f 03c8 	mvn.w	r3, #200	@ 0xc8
 8001a5a:	e077      	b.n	8001b4c <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a60:	483e      	ldr	r0, [pc, #248]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001a62:	f7ff fd7b 	bl	800155c <_generate_log_filename>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001a6c:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001a70:	e06c      	b.n	8001b4c <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001a72:	4a3a      	ldr	r2, [pc, #232]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001a74:	493a      	ldr	r1, [pc, #232]	@ (8001b60 <SDStorage_CreateNewLogFile+0x120>)
 8001a76:	2001      	movs	r0, #1
 8001a78:	f003 fe78 	bl	800576c <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f016 f92d 	bl	8017ce4 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f010 fd2a 	bl	80124e4 <disk_status>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001a96:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4931      	ldr	r1, [pc, #196]	@ (8001b64 <SDStorage_CreateNewLogFile+0x124>)
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f003 fe64 	bl	800576c <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	220a      	movs	r2, #10
 8001aa8:	492c      	ldr	r1, [pc, #176]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f012 f928 	bl	8013d00 <f_open>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001ab6:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001aba:	461a      	mov	r2, r3
 8001abc:	492a      	ldr	r1, [pc, #168]	@ (8001b68 <SDStorage_CreateNewLogFile+0x128>)
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f003 fe54 	bl	800576c <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001ac4:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d032      	beq.n	8001b32 <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001acc:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4926      	ldr	r1, [pc, #152]	@ (8001b6c <SDStorage_CreateNewLogFile+0x12c>)
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f003 fe49 	bl	800576c <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001ada:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d006      	beq.n	8001af0 <SDStorage_CreateNewLogFile+0xb0>
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	dc13      	bgt.n	8001b0e <SDStorage_CreateNewLogFile+0xce>
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d00c      	beq.n	8001b04 <SDStorage_CreateNewLogFile+0xc4>
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	d005      	beq.n	8001afa <SDStorage_CreateNewLogFile+0xba>
 8001aee:	e00e      	b.n	8001b0e <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001af0:	491f      	ldr	r1, [pc, #124]	@ (8001b70 <SDStorage_CreateNewLogFile+0x130>)
 8001af2:	2003      	movs	r0, #3
 8001af4:	f003 fe3a 	bl	800576c <LOGGER_SendFormatted>
                break;
 8001af8:	e011      	b.n	8001b1e <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001afa:	491e      	ldr	r1, [pc, #120]	@ (8001b74 <SDStorage_CreateNewLogFile+0x134>)
 8001afc:	2003      	movs	r0, #3
 8001afe:	f003 fe35 	bl	800576c <LOGGER_SendFormatted>
                break;
 8001b02:	e00c      	b.n	8001b1e <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001b04:	491c      	ldr	r1, [pc, #112]	@ (8001b78 <SDStorage_CreateNewLogFile+0x138>)
 8001b06:	2003      	movs	r0, #3
 8001b08:	f003 fe30 	bl	800576c <LOGGER_SendFormatted>
                break;
 8001b0c:	e007      	b.n	8001b1e <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001b0e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001b12:	461a      	mov	r2, r3
 8001b14:	4919      	ldr	r1, [pc, #100]	@ (8001b7c <SDStorage_CreateNewLogFile+0x13c>)
 8001b16:	2003      	movs	r0, #3
 8001b18:	f003 fe28 	bl	800576c <LOGGER_SendFormatted>
                break;
 8001b1c:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001b1e:	4918      	ldr	r1, [pc, #96]	@ (8001b80 <SDStorage_CreateNewLogFile+0x140>)
 8001b20:	2002      	movs	r0, #2
 8001b22:	f003 fe23 	bl	800576c <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <SDStorage_CreateNewLogFile+0x118>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001b2c:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001b30:	e00c      	b.n	8001b4c <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001b32:	463b      	mov	r3, r7
 8001b34:	4618      	mov	r0, r3
 8001b36:	f012 fc61 	bl	80143fc <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <SDStorage_CreateNewLogFile+0x11c>)
 8001b3c:	4911      	ldr	r1, [pc, #68]	@ (8001b84 <SDStorage_CreateNewLogFile+0x144>)
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f003 fe14 	bl	800576c <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <SDStorage_CreateNewLogFile+0x148>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000027d 	.word	0x2000027d
 8001b5c:	20000280 	.word	0x20000280
 8001b60:	0801a50c 	.word	0x0801a50c
 8001b64:	0801a534 	.word	0x0801a534
 8001b68:	0801a55c 	.word	0x0801a55c
 8001b6c:	0801a57c 	.word	0x0801a57c
 8001b70:	0801a59c 	.word	0x0801a59c
 8001b74:	0801a5e0 	.word	0x0801a5e0
 8001b78:	0801a61c 	.word	0x0801a61c
 8001b7c:	0801a648 	.word	0x0801a648
 8001b80:	0801a670 	.word	0x0801a670
 8001b84:	0801a6b0 	.word	0x0801a6b0
 8001b88:	20000380 	.word	0x20000380

08001b8c <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static ResultCode _create_log_directory(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001b92:	4924      	ldr	r1, [pc, #144]	@ (8001c24 <_create_log_directory+0x98>)
 8001b94:	2001      	movs	r0, #1
 8001b96:	f003 fde9 	bl	800576c <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4922      	ldr	r1, [pc, #136]	@ (8001c28 <_create_log_directory+0x9c>)
 8001b9e:	4823      	ldr	r0, [pc, #140]	@ (8001c2c <_create_log_directory+0xa0>)
 8001ba0:	f012 f86a 	bl	8013c78 <f_mount>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4920      	ldr	r1, [pc, #128]	@ (8001c30 <_create_log_directory+0xa4>)
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f003 fddc 	bl	800576c <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001bbe:	491d      	ldr	r1, [pc, #116]	@ (8001c34 <_create_log_directory+0xa8>)
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f003 fdd3 	bl	800576c <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001bc6:	481c      	ldr	r0, [pc, #112]	@ (8001c38 <_create_log_directory+0xac>)
 8001bc8:	f012 fc38 	bl	801443c <f_mkdir>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4919      	ldr	r1, [pc, #100]	@ (8001c3c <_create_log_directory+0xb0>)
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f003 fdc8 	bl	800576c <LOGGER_SendFormatted>
 8001bdc:	e005      	b.n	8001bea <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4917      	ldr	r1, [pc, #92]	@ (8001c40 <_create_log_directory+0xb4>)
 8001be4:	2003      	movs	r0, #3
 8001be6:	f003 fdc1 	bl	800576c <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <_create_log_directory+0x6a>
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d105      	bne.n	8001c02 <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001bf6:	4913      	ldr	r1, [pc, #76]	@ (8001c44 <_create_log_directory+0xb8>)
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f003 fdb7 	bl	800576c <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e00b      	b.n	8001c1a <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4910      	ldr	r1, [pc, #64]	@ (8001c48 <_create_log_directory+0xbc>)
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f003 fdaf 	bl	800576c <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001c0e:	490f      	ldr	r1, [pc, #60]	@ (8001c4c <_create_log_directory+0xc0>)
 8001c10:	2001      	movs	r0, #1
 8001c12:	f003 fdab 	bl	800576c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001c16:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	0801a6e4 	.word	0x0801a6e4
 8001c28:	20001800 	.word	0x20001800
 8001c2c:	20001804 	.word	0x20001804
 8001c30:	0801a71c 	.word	0x0801a71c
 8001c34:	0801a744 	.word	0x0801a744
 8001c38:	0801a778 	.word	0x0801a778
 8001c3c:	0801a784 	.word	0x0801a784
 8001c40:	0801a7a4 	.word	0x0801a7a4
 8001c44:	0801a7cc 	.word	0x0801a7cc
 8001c48:	0801a804 	.word	0x0801a804
 8001c4c:	0801a83c 	.word	0x0801a83c

08001c50 <_initialize_sd_hardware>:

// SD 하드웨어 초기화 및 상태 확인
static ResultCode _initialize_sd_hardware(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001c56:	483d      	ldr	r0, [pc, #244]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001c58:	f00b fde0 	bl	800d81c <HAL_SD_GetCardState>
 8001c5c:	60f8      	str	r0, [r7, #12]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	493b      	ldr	r1, [pc, #236]	@ (8001d50 <_initialize_sd_hardware+0x100>)
 8001c62:	2001      	movs	r0, #1
 8001c64:	f003 fd82 	bl	800576c <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기
    int wait_count = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < SD_TRANSFER_WAIT_MAX_COUNT) {
 8001c6c:	e010      	b.n	8001c90 <_initialize_sd_hardware+0x40>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3301      	adds	r3, #1
 8001c72:	461a      	mov	r2, r3
 8001c74:	4937      	ldr	r1, [pc, #220]	@ (8001d54 <_initialize_sd_hardware+0x104>)
 8001c76:	2001      	movs	r0, #1
 8001c78:	f003 fd78 	bl	800576c <LOGGER_SendFormatted>
        HAL_Delay(SD_TRANSFER_CHECK_INTERVAL_MS);
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	f004 fc37 	bl	80064f0 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001c82:	4832      	ldr	r0, [pc, #200]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001c84:	f00b fdca 	bl	800d81c <HAL_SD_GetCardState>
 8001c88:	60f8      	str	r0, [r7, #12]
        wait_count++;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < SD_TRANSFER_WAIT_MAX_COUNT) {
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <_initialize_sd_hardware+0x4c>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b31      	cmp	r3, #49	@ 0x31
 8001c9a:	dde8      	ble.n	8001c6e <_initialize_sd_hardware+0x1e>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d142      	bne.n	8001d28 <_initialize_sd_hardware+0xd8>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 8001ca2:	492d      	ldr	r1, [pc, #180]	@ (8001d58 <_initialize_sd_hardware+0x108>)
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f003 fd61 	bl	800576c <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 8001caa:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01f      	beq.n	8001cf2 <_initialize_sd_hardware+0xa2>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 8001cb2:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4928      	ldr	r1, [pc, #160]	@ (8001d5c <_initialize_sd_hardware+0x10c>)
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f003 fd56 	bl	800576c <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <_initialize_sd_hardware+0x84>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 8001ccc:	4924      	ldr	r1, [pc, #144]	@ (8001d60 <_initialize_sd_hardware+0x110>)
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f003 fd4c 	bl	800576c <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <_initialize_sd_hardware+0x9c>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 8001ce0:	4920      	ldr	r1, [pc, #128]	@ (8001d64 <_initialize_sd_hardware+0x114>)
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f003 fd42 	bl	800576c <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001ce8:	f7ff fbfc 	bl	80014e4 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        
        // disk_initialize 호출
        DSTATUS disk_status = disk_initialize(0);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f010 fc10 	bl	8012518 <disk_initialize>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4919      	ldr	r1, [pc, #100]	@ (8001d68 <_initialize_sd_hardware+0x118>)
 8001d02:	2001      	movs	r0, #1
 8001d04:	f003 fd32 	bl	800576c <LOGGER_SendFormatted>
        
        if (disk_status != 0) {
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <_initialize_sd_hardware+0xd4>
            LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 8001d0e:	4917      	ldr	r1, [pc, #92]	@ (8001d6c <_initialize_sd_hardware+0x11c>)
 8001d10:	2003      	movs	r0, #3
 8001d12:	f003 fd2b 	bl	800576c <LOGGER_SendFormatted>
            LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001d16:	4916      	ldr	r1, [pc, #88]	@ (8001d70 <_initialize_sd_hardware+0x120>)
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f003 fd27 	bl	800576c <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001d1e:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001d22:	e00f      	b.n	8001d44 <_initialize_sd_hardware+0xf4>
        }
        
        return SDSTORAGE_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e00d      	b.n	8001d44 <_initialize_sd_hardware+0xf4>
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4912      	ldr	r1, [pc, #72]	@ (8001d74 <_initialize_sd_hardware+0x124>)
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f003 fd1d 	bl	800576c <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <_initialize_sd_hardware+0xfc>)
 8001d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d36:	461a      	mov	r2, r3
 8001d38:	490f      	ldr	r1, [pc, #60]	@ (8001d78 <_initialize_sd_hardware+0x128>)
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	f003 fd16 	bl	800576c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001d40:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
    }
#else
    return SDSTORAGE_OK;  // PC 환경에서는 성공으로 처리
#endif
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000ebc 	.word	0x20000ebc
 8001d50:	0801a878 	.word	0x0801a878
 8001d54:	0801a8a0 	.word	0x0801a8a0
 8001d58:	0801a8e0 	.word	0x0801a8e0
 8001d5c:	0801a91c 	.word	0x0801a91c
 8001d60:	0801a94c 	.word	0x0801a94c
 8001d64:	0801a988 	.word	0x0801a988
 8001d68:	0801a9c0 	.word	0x0801a9c0
 8001d6c:	0801a9ec 	.word	0x0801a9ec
 8001d70:	0801aa24 	.word	0x0801aa24
 8001d74:	0801aa70 	.word	0x0801aa70
 8001d78:	0801aab4 	.word	0x0801aab4

08001d7c <_mount_filesystem_with_retry>:

// 파일시스템 마운트 (재시도 로직 포함)
static ResultCode _mount_filesystem_with_retry(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // SD 카드 안정화 대기
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (%dms)...", SD_CARD_STABILIZE_DELAY_MS);
 8001d82:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d86:	4961      	ldr	r1, [pc, #388]	@ (8001f0c <_mount_filesystem_with_retry+0x190>)
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f003 fcef 	bl	800576c <LOGGER_SendFormatted>
    HAL_Delay(SD_CARD_STABILIZE_DELAY_MS);
 8001d8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d92:	f004 fbad 	bl	80064f0 <HAL_Delay>
    
    // f_mount 여러 번 재시도
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001d96:	495e      	ldr	r1, [pc, #376]	@ (8001f10 <_mount_filesystem_with_retry+0x194>)
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f003 fce7 	bl	800576c <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < SD_MOUNT_RETRY_COUNT; retry++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e037      	b.n	8001e18 <_mount_filesystem_with_retry+0x9c>
        LOG_INFO("[SDStorage] f_mount attempt %d/%d...", retry + 1, SD_MOUNT_RETRY_COUNT);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	2303      	movs	r3, #3
 8001dae:	4959      	ldr	r1, [pc, #356]	@ (8001f14 <_mount_filesystem_with_retry+0x198>)
 8001db0:	2001      	movs	r0, #1
 8001db2:	f003 fcdb 	bl	800576c <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001db6:	2201      	movs	r2, #1
 8001db8:	4957      	ldr	r1, [pc, #348]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001dba:	4858      	ldr	r0, [pc, #352]	@ (8001f1c <_mount_filesystem_with_retry+0x1a0>)
 8001dbc:	f011 ff5c 	bl	8013c78 <f_mount>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4955      	ldr	r1, [pc, #340]	@ (8001f20 <_mount_filesystem_with_retry+0x1a4>)
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f003 fcce 	bl	800576c <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <_mount_filesystem_with_retry+0x6c>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4951      	ldr	r1, [pc, #324]	@ (8001f24 <_mount_filesystem_with_retry+0x1a8>)
 8001dde:	2001      	movs	r0, #1
 8001de0:	f003 fcc4 	bl	800576c <LOGGER_SendFormatted>
            return SDSTORAGE_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e08d      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in %dms...", retry + 1, SD_MOUNT_RETRY_DELAY_MS);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df0:	494d      	ldr	r1, [pc, #308]	@ (8001f28 <_mount_filesystem_with_retry+0x1ac>)
 8001df2:	2002      	movs	r0, #2
 8001df4:	f003 fcba 	bl	800576c <LOGGER_SendFormatted>
            if (retry < SD_MOUNT_RETRY_COUNT - 1) {  // 마지막 시도가 아니면 대기
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	dc09      	bgt.n	8001e12 <_mount_filesystem_with_retry+0x96>
                // STM32F7 D-Cache 클리어
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001dfe:	494b      	ldr	r1, [pc, #300]	@ (8001f2c <_mount_filesystem_with_retry+0x1b0>)
 8001e00:	2001      	movs	r0, #1
 8001e02:	f003 fcb3 	bl	800576c <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001e06:	f7ff fb6d 	bl	80014e4 <SCB_CleanInvalidateDCache>
                HAL_Delay(SD_MOUNT_RETRY_DELAY_MS);
 8001e0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e0e:	f004 fb6f 	bl	80064f0 <HAL_Delay>
    for (int retry = 0; retry < SD_MOUNT_RETRY_COUNT; retry++) {
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	ddc4      	ble.n	8001da8 <_mount_filesystem_with_retry+0x2c>
            }
        }
    }
    
    // 모든 재시도 실패 시 추가 복구 시도
    if (mount_result != FR_OK) {
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d06e      	beq.n	8001f02 <_mount_filesystem_with_retry+0x186>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4941      	ldr	r1, [pc, #260]	@ (8001f30 <_mount_filesystem_with_retry+0x1b4>)
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f003 fc9e 	bl	800576c <LOGGER_SendFormatted>
        
        if (mount_result == FR_DISK_ERR) {
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d119      	bne.n	8001e6a <_mount_filesystem_with_retry+0xee>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - trying deferred mount...");
 8001e36:	493f      	ldr	r1, [pc, #252]	@ (8001f34 <_mount_filesystem_with_retry+0x1b8>)
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f003 fc97 	bl	800576c <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	4935      	ldr	r1, [pc, #212]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001e42:	4836      	ldr	r0, [pc, #216]	@ (8001f1c <_mount_filesystem_with_retry+0x1a0>)
 8001e44:	f011 ff18 	bl	8013c78 <f_mount>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4939      	ldr	r1, [pc, #228]	@ (8001f38 <_mount_filesystem_with_retry+0x1bc>)
 8001e52:	2001      	movs	r0, #1
 8001e54:	f003 fc8a 	bl	800576c <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d14a      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001e5e:	4937      	ldr	r1, [pc, #220]	@ (8001f3c <_mount_filesystem_with_retry+0x1c0>)
 8001e60:	2001      	movs	r0, #1
 8001e62:	f003 fc83 	bl	800576c <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e04c      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d002      	beq.n	8001e76 <_mount_filesystem_with_retry+0xfa>
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b0d      	cmp	r3, #13
 8001e74:	d13e      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
            // 파일시스템 생성 시도
            static BYTE work[_MAX_SS];
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 8001e76:	4932      	ldr	r1, [pc, #200]	@ (8001f40 <_mount_filesystem_with_retry+0x1c4>)
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f003 fc77 	bl	800576c <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <_mount_filesystem_with_retry+0x1c8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	2107      	movs	r1, #7
 8001e8a:	4823      	ldr	r0, [pc, #140]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001e8c:	f012 fbde 	bl	801464c <f_mkfs>
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	461a      	mov	r2, r3
 8001e98:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <_mount_filesystem_with_retry+0x1cc>)
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f003 fc66 	bl	800576c <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d011      	beq.n	8001eca <_mount_filesystem_with_retry+0x14e>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <_mount_filesystem_with_retry+0x1c8>)
 8001eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4818      	ldr	r0, [pc, #96]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001eb6:	f012 fbc9 	bl	801464c <f_mkfs>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4922      	ldr	r1, [pc, #136]	@ (8001f4c <_mount_filesystem_with_retry+0x1d0>)
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f003 fc51 	bl	800576c <LOGGER_SendFormatted>
            }
            
            if (mkfs_result == FR_OK) {
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d111      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
                // 파일시스템 생성 후 재마운트
                mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4911      	ldr	r1, [pc, #68]	@ (8001f18 <_mount_filesystem_with_retry+0x19c>)
 8001ed4:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <_mount_filesystem_with_retry+0x1a0>)
 8001ed6:	f011 fecf 	bl	8013c78 <f_mount>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
                LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <_mount_filesystem_with_retry+0x1d4>)
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f003 fc41 	bl	800576c <LOGGER_SendFormatted>
                
                if (mount_result == FR_OK) {
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <_mount_filesystem_with_retry+0x178>
                    return SDSTORAGE_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e007      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
                }
            }
        }
        
        LOG_ERROR("[SDStorage] All mount attempts failed");
 8001ef4:	4917      	ldr	r1, [pc, #92]	@ (8001f54 <_mount_filesystem_with_retry+0x1d8>)
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f003 fc38 	bl	800576c <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001efc:	f06f 03c9 	mvn.w	r3, #201	@ 0xc9
 8001f00:	e000      	b.n	8001f04 <_mount_filesystem_with_retry+0x188>
    }
    
    return SDSTORAGE_OK;
 8001f02:	2300      	movs	r3, #0
#else
    return SDSTORAGE_OK;  // PC 환경에서는 성공으로 처리
#endif
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0801aad8 	.word	0x0801aad8
 8001f10:	0801ab10 	.word	0x0801ab10
 8001f14:	0801ab44 	.word	0x0801ab44
 8001f18:	20001800 	.word	0x20001800
 8001f1c:	20001804 	.word	0x20001804
 8001f20:	0801ab6c 	.word	0x0801ab6c
 8001f24:	0801ab8c 	.word	0x0801ab8c
 8001f28:	0801abc0 	.word	0x0801abc0
 8001f2c:	0801ac00 	.word	0x0801ac00
 8001f30:	0801ac3c 	.word	0x0801ac3c
 8001f34:	0801ac68 	.word	0x0801ac68
 8001f38:	0801aca4 	.word	0x0801aca4
 8001f3c:	0801accc 	.word	0x0801accc
 8001f40:	0801acf4 	.word	0x0801acf4
 8001f44:	200005bc 	.word	0x200005bc
 8001f48:	0801ad30 	.word	0x0801ad30
 8001f4c:	0801ad58 	.word	0x0801ad58
 8001f50:	0801ad80 	.word	0x0801ad80
 8001f54:	0801adac 	.word	0x0801adac

08001f58 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <vApplicationGetIdleTaskMemory+0x30>)
 8001fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200007bc 	.word	0x200007bc
 8001fbc:	20000814 	.word	0x20000814

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b09a      	sub	sp, #104	@ 0x68
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001fc6:	4b96      	ldr	r3, [pc, #600]	@ (8002220 <main+0x260>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a94      	ldr	r2, [pc, #592]	@ (8002220 <main+0x260>)
 8001fce:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd0:	f004 fa61 	bl	8006496 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd4:	f000 f966 	bl	80022a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001fd8:	f000 f9d6 	bl	8002388 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fdc:	f001 f9a0 	bl	8003320 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001fe0:	f002 f88e 	bl	8004100 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001fe4:	f002 f8b2 	bl	800414c <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001fe8:	f000 fa00 	bl	80023ec <MX_ADC3_Init>
  MX_CRC_Init();
 8001fec:	f000 fa50 	bl	8002490 <MX_CRC_Init>
  MX_DCMI_Init();
 8001ff0:	f000 fa70 	bl	80024d4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001ff4:	f000 faa2 	bl	800253c <MX_DMA2D_Init>
  MX_ETH_Init();
 8001ff8:	f000 fad2 	bl	80025a0 <MX_ETH_Init>
  MX_FMC_Init();
 8001ffc:	f001 f940 	bl	8003280 <MX_FMC_Init>
  MX_I2C1_Init();
 8002000:	f000 fb1c 	bl	800263c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002004:	f000 fb5a 	bl	80026bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8002008:	f000 fb98 	bl	800273c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800200c:	f000 fc18 	bl	8002840 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8002010:	f000 fc42 	bl	8002898 <MX_RTC_Init>
  MX_SAI2_Init();
 8002014:	f000 fce4 	bl	80029e0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002018:	f000 fd8a 	bl	8002b30 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800201c:	f000 fdb6 	bl	8002b8c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8002020:	f000 fde4 	bl	8002bec <MX_SPI2_Init>
  MX_TIM1_Init();
 8002024:	f000 fe20 	bl	8002c68 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002028:	f000 feca 	bl	8002dc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800202c:	f000 ff3e 	bl	8002eac <MX_TIM3_Init>
  MX_TIM5_Init();
 8002030:	f000 ffb4 	bl	8002f9c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002034:	f001 f82a 	bl	800308c <MX_TIM8_Init>
  MX_TIM12_Init();
 8002038:	f001 f87c 	bl	8003134 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800203c:	f001 f8c0 	bl	80031c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002040:	f001 f8ee 	bl	8003220 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002044:	4b77      	ldr	r3, [pc, #476]	@ (8002224 <main+0x264>)
 8002046:	4a78      	ldr	r2, [pc, #480]	@ (8002228 <main+0x268>)
 8002048:	675a      	str	r2, [r3, #116]	@ 0x74
 800204a:	4b77      	ldr	r3, [pc, #476]	@ (8002228 <main+0x268>)
 800204c:	4a75      	ldr	r2, [pc, #468]	@ (8002224 <main+0x264>)
 800204e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002050:	4b74      	ldr	r3, [pc, #464]	@ (8002224 <main+0x264>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b73      	ldr	r3, [pc, #460]	@ (8002224 <main+0x264>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0210 	orr.w	r2, r2, #16
 800205e:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8002060:	f00f fe48 	bl	8011cf4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8002064:	2100      	movs	r1, #0
 8002066:	4871      	ldr	r0, [pc, #452]	@ (800222c <main+0x26c>)
 8002068:	f003 faf6 	bl	8005658 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 800206c:	4b6c      	ldr	r3, [pc, #432]	@ (8002220 <main+0x260>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	496f      	ldr	r1, [pc, #444]	@ (8002230 <main+0x270>)
 8002074:	2001      	movs	r0, #1
 8002076:	f003 fb79 	bl	800576c <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 800207a:	4b6e      	ldr	r3, [pc, #440]	@ (8002234 <main+0x274>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <main+0xce>
 8002086:	496c      	ldr	r1, [pc, #432]	@ (8002238 <main+0x278>)
 8002088:	2002      	movs	r0, #2
 800208a:	f003 fb6f 	bl	800576c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 800208e:	4b69      	ldr	r3, [pc, #420]	@ (8002234 <main+0x274>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <main+0xe2>
 800209a:	4968      	ldr	r1, [pc, #416]	@ (800223c <main+0x27c>)
 800209c:	2002      	movs	r0, #2
 800209e:	f003 fb65 	bl	800576c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80020a2:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <main+0x274>)
 80020a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <main+0xf6>
 80020ae:	4964      	ldr	r1, [pc, #400]	@ (8002240 <main+0x280>)
 80020b0:	2002      	movs	r0, #2
 80020b2:	f003 fb5b 	bl	800576c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80020b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002234 <main+0x274>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <main+0x10a>
 80020c2:	4960      	ldr	r1, [pc, #384]	@ (8002244 <main+0x284>)
 80020c4:	2002      	movs	r0, #2
 80020c6:	f003 fb51 	bl	800576c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80020ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002234 <main+0x274>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <main+0x11e>
 80020d6:	495c      	ldr	r1, [pc, #368]	@ (8002248 <main+0x288>)
 80020d8:	2002      	movs	r0, #2
 80020da:	f003 fb47 	bl	800576c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80020de:	4b55      	ldr	r3, [pc, #340]	@ (8002234 <main+0x274>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <main+0x132>
 80020ea:	4958      	ldr	r1, [pc, #352]	@ (800224c <main+0x28c>)
 80020ec:	2002      	movs	r0, #2
 80020ee:	f003 fb3d 	bl	800576c <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 80020f2:	4b50      	ldr	r3, [pc, #320]	@ (8002234 <main+0x274>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da03      	bge.n	8002102 <main+0x142>
 80020fa:	4955      	ldr	r1, [pc, #340]	@ (8002250 <main+0x290>)
 80020fc:	2002      	movs	r0, #2
 80020fe:	f003 fb35 	bl	800576c <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <main+0x274>)
 8002104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002106:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <main+0x274>)
 8002108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210c:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 800210e:	4951      	ldr	r1, [pc, #324]	@ (8002254 <main+0x294>)
 8002110:	2001      	movs	r0, #1
 8002112:	f003 fb2b 	bl	800576c <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8002116:	4b50      	ldr	r3, [pc, #320]	@ (8002258 <main+0x298>)
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 800211e:	494f      	ldr	r1, [pc, #316]	@ (800225c <main+0x29c>)
 8002120:	2001      	movs	r0, #1
 8002122:	f003 fb23 	bl	800576c <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8002126:	494e      	ldr	r1, [pc, #312]	@ (8002260 <main+0x2a0>)
 8002128:	2001      	movs	r0, #1
 800212a:	f003 fb1f 	bl	800576c <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800212e:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <main+0x264>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <main+0x264>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0210 	orr.w	r2, r2, #16
 800213c:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 800213e:	4949      	ldr	r1, [pc, #292]	@ (8002264 <main+0x2a4>)
 8002140:	2001      	movs	r0, #1
 8002142:	f003 fb13 	bl	800576c <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8002146:	2388      	movs	r3, #136	@ 0x88
 8002148:	220a      	movs	r2, #10
 800214a:	4947      	ldr	r1, [pc, #284]	@ (8002268 <main+0x2a8>)
 800214c:	2001      	movs	r0, #1
 800214e:	f003 fb0d 	bl	800576c <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8002152:	4b46      	ldr	r3, [pc, #280]	@ (800226c <main+0x2ac>)
 8002154:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 800215e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f012 ffa5 	bl	80150b4 <osMessageCreate>
 800216a:	4603      	mov	r3, r0
 800216c:	4a40      	ldr	r2, [pc, #256]	@ (8002270 <main+0x2b0>)
 800216e:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <main+0x2b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8002178:	493e      	ldr	r1, [pc, #248]	@ (8002274 <main+0x2b4>)
 800217a:	2003      	movs	r0, #3
 800217c:	f003 faf6 	bl	800576c <LOGGER_SendFormatted>
 8002180:	e003      	b.n	800218a <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8002182:	493d      	ldr	r1, [pc, #244]	@ (8002278 <main+0x2b8>)
 8002184:	2001      	movs	r0, #1
 8002186:	f003 faf1 	bl	800576c <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <main+0x2bc>)
 800218c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002190:	461d      	mov	r5, r3
 8002192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800219a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800219e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f012 ff25 	bl	8014ff4 <osThreadCreate>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a34      	ldr	r2, [pc, #208]	@ (8002280 <main+0x2c0>)
 80021ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 80021b0:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <main+0x2c4>)
 80021b2:	f107 0420 	add.w	r4, r7, #32
 80021b6:	461d      	mov	r5, r3
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f012 ff12 	bl	8014ff4 <osThreadCreate>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002288 <main+0x2c8>)
 80021d4:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 80021d6:	492d      	ldr	r1, [pc, #180]	@ (800228c <main+0x2cc>)
 80021d8:	2001      	movs	r0, #1
 80021da:	f003 fac7 	bl	800576c <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 80021de:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <main+0x2d0>)
 80021e0:	1d3c      	adds	r4, r7, #4
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f012 fefd 	bl	8014ff4 <osThreadCreate>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a25      	ldr	r2, [pc, #148]	@ (8002294 <main+0x2d4>)
 80021fe:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8002200:	4925      	ldr	r1, [pc, #148]	@ (8002298 <main+0x2d8>)
 8002202:	2001      	movs	r0, #1
 8002204:	f003 fab2 	bl	800576c <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8002208:	4924      	ldr	r1, [pc, #144]	@ (800229c <main+0x2dc>)
 800220a:	2001      	movs	r0, #1
 800220c:	f003 faae 	bl	800576c <LOGGER_SendFormatted>
  osKernelStart();
 8002210:	f012 fecd 	bl	8014fae <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002214:	4922      	ldr	r1, [pc, #136]	@ (80022a0 <main+0x2e0>)
 8002216:	2003      	movs	r0, #3
 8002218:	f003 faa8 	bl	800576c <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <main+0x25c>
 8002220:	2000157c 	.word	0x2000157c
 8002224:	20001240 	.word	0x20001240
 8002228:	20001518 	.word	0x20001518
 800222c:	0801add4 	.word	0x0801add4
 8002230:	0801addc 	.word	0x0801addc
 8002234:	40023800 	.word	0x40023800
 8002238:	0801ae00 	.word	0x0801ae00
 800223c:	0801ae18 	.word	0x0801ae18
 8002240:	0801ae30 	.word	0x0801ae30
 8002244:	0801ae48 	.word	0x0801ae48
 8002248:	0801ae58 	.word	0x0801ae58
 800224c:	0801ae70 	.word	0x0801ae70
 8002250:	0801ae90 	.word	0x0801ae90
 8002254:	0801aea8 	.word	0x0801aea8
 8002258:	20000018 	.word	0x20000018
 800225c:	0801aee8 	.word	0x0801aee8
 8002260:	0801af20 	.word	0x0801af20
 8002264:	0801af48 	.word	0x0801af48
 8002268:	0801af64 	.word	0x0801af64
 800226c:	0801b0b8 	.word	0x0801b0b8
 8002270:	20001308 	.word	0x20001308
 8002274:	0801afa0 	.word	0x0801afa0
 8002278:	0801afdc 	.word	0x0801afdc
 800227c:	0801b0d4 	.word	0x0801b0d4
 8002280:	200012fc 	.word	0x200012fc
 8002284:	0801b0fc 	.word	0x0801b0fc
 8002288:	20001300 	.word	0x20001300
 800228c:	0801b008 	.word	0x0801b008
 8002290:	0801b128 	.word	0x0801b128
 8002294:	20001304 	.word	0x20001304
 8002298:	0801b03c 	.word	0x0801b03c
 800229c:	0801b05c 	.word	0x0801b05c
 80022a0:	0801b080 	.word	0x0801b080

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	@ 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	2230      	movs	r2, #48	@ 0x30
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f015 fd16 	bl	8017ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022c8:	f008 fb94 	bl	800a9f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <SystemClock_Config+0xdc>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002380 <SystemClock_Config+0xdc>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d8:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <SystemClock_Config+0xdc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e4:	4b27      	ldr	r3, [pc, #156]	@ (8002384 <SystemClock_Config+0xe0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a26      	ldr	r2, [pc, #152]	@ (8002384 <SystemClock_Config+0xe0>)
 80022ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <SystemClock_Config+0xe0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80022fc:	2309      	movs	r3, #9
 80022fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002306:	2301      	movs	r3, #1
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230a:	2302      	movs	r3, #2
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002314:	2319      	movs	r3, #25
 8002316:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002318:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800231e:	2302      	movs	r3, #2
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002322:	2309      	movs	r3, #9
 8002324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002326:	f107 0320 	add.w	r3, r7, #32
 800232a:	4618      	mov	r0, r3
 800232c:	f008 fc84 	bl	800ac38 <HAL_RCC_OscConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002336:	f001 fedd 	bl	80040f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800233a:	f008 fb6b 	bl	800aa14 <HAL_PWREx_EnableOverDrive>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002344:	f001 fed6 	bl	80040f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234c:	2302      	movs	r3, #2
 800234e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002354:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800235a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2106      	movs	r1, #6
 8002366:	4618      	mov	r0, r3
 8002368:	f008 ff0a 	bl	800b180 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002372:	f001 febf 	bl	80040f4 <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	@ 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0a2      	sub	sp, #136	@ 0x88
 800238c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2284      	movs	r2, #132	@ 0x84
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f015 fca5 	bl	8017ce4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <PeriphCommonClock_Config+0x60>)
 800239c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800239e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80023a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80023a4:	2305      	movs	r3, #5
 80023a6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80023ac:	2303      	movs	r3, #3
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80023ba:	2300      	movs	r3, #0
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80023be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f009 f8ee 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80023da:	f001 fe8b 	bl	80040f4 <Error_Handler>
  }
}
 80023de:	bf00      	nop
 80023e0:	3788      	adds	r7, #136	@ 0x88
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	00b00008 	.word	0x00b00008

080023ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023f2:	463b      	mov	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80023fe:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002400:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <MX_ADC3_Init+0x9c>)
 8002402:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002406:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800240a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <MX_ADC3_Init+0x98>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002412:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <MX_ADC3_Init+0x98>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002428:	2200      	movs	r2, #0
 800242a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <MX_ADC3_Init+0x98>)
 800242e:	4a17      	ldr	r2, [pc, #92]	@ (800248c <MX_ADC3_Init+0xa0>)
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002432:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <MX_ADC3_Init+0x98>)
 800243a:	2201      	movs	r2, #1
 800243c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002446:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <MX_ADC3_Init+0x98>)
 8002448:	2201      	movs	r2, #1
 800244a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800244c:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_ADC3_Init+0x98>)
 800244e:	f004 f873 	bl	8006538 <HAL_ADC_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002458:	f001 fe4c 	bl	80040f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800245c:	2304      	movs	r3, #4
 800245e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002460:	2301      	movs	r3, #1
 8002462:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_ADC3_Init+0x98>)
 800246e:	f004 f8a7 	bl	80065c0 <HAL_ADC_ConfigChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002478:	f001 fe3c 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000a4c 	.word	0x20000a4c
 8002488:	40012200 	.word	0x40012200
 800248c:	0f000001 	.word	0x0f000001

08002490 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002494:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <MX_CRC_Init+0x3c>)
 8002496:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <MX_CRC_Init+0x40>)
 8002498:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_CRC_Init+0x3c>)
 800249c:	2200      	movs	r2, #0
 800249e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <MX_CRC_Init+0x3c>)
 80024ba:	f004 fbb7 	bl	8006c2c <HAL_CRC_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80024c4:	f001 fe16 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000a94 	.word	0x20000a94
 80024d0:	40023000 	.word	0x40023000

080024d4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024da:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <MX_DCMI_Init+0x64>)
 80024dc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80024fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002534 <MX_DCMI_Init+0x60>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <MX_DCMI_Init+0x60>)
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002514:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002516:	2200      	movs	r2, #0
 8002518:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <MX_DCMI_Init+0x60>)
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	@ (8002534 <MX_DCMI_Init+0x60>)
 8002522:	f004 fc75 	bl	8006e10 <HAL_DCMI_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800252c:	f001 fde2 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000ab8 	.word	0x20000ab8
 8002538:	50050000 	.word	0x50050000

0800253c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002542:	4a16      	ldr	r2, [pc, #88]	@ (800259c <MX_DMA2D_Init+0x60>)
 8002544:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 800255a:	2200      	movs	r2, #0
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002560:	2200      	movs	r2, #0
 8002562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 800256c:	2200      	movs	r2, #0
 800256e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002570:	4809      	ldr	r0, [pc, #36]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002572:	f005 f93b 	bl	80077ec <HAL_DMA2D_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800257c:	f001 fdba 	bl	80040f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002580:	2101      	movs	r1, #1
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_DMA2D_Init+0x5c>)
 8002584:	f005 fa8c 	bl	8007aa0 <HAL_DMA2D_ConfigLayer>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800258e:	f001 fdb1 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000b08 	.word	0x20000b08
 800259c:	4002b000 	.word	0x4002b000

080025a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <MX_ETH_Init+0x84>)
 80025a6:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <MX_ETH_Init+0x88>)
 80025a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <MX_ETH_Init+0x8c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <MX_ETH_Init+0x8c>)
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <MX_ETH_Init+0x8c>)
 80025b8:	22e1      	movs	r2, #225	@ 0xe1
 80025ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <MX_ETH_Init+0x8c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <MX_ETH_Init+0x8c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80025c8:	4b18      	ldr	r3, [pc, #96]	@ (800262c <MX_ETH_Init+0x8c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <MX_ETH_Init+0x84>)
 80025d0:	4a16      	ldr	r2, [pc, #88]	@ (800262c <MX_ETH_Init+0x8c>)
 80025d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <MX_ETH_Init+0x84>)
 80025d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <MX_ETH_Init+0x84>)
 80025de:	4a14      	ldr	r2, [pc, #80]	@ (8002630 <MX_ETH_Init+0x90>)
 80025e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <MX_ETH_Init+0x84>)
 80025e4:	4a13      	ldr	r2, [pc, #76]	@ (8002634 <MX_ETH_Init+0x94>)
 80025e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <MX_ETH_Init+0x84>)
 80025ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80025ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <MX_ETH_Init+0x84>)
 80025f2:	f005 fae7 	bl	8007bc4 <HAL_ETH_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80025fc:	f001 fd7a 	bl	80040f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002600:	2238      	movs	r2, #56	@ 0x38
 8002602:	2100      	movs	r1, #0
 8002604:	480c      	ldr	r0, [pc, #48]	@ (8002638 <MX_ETH_Init+0x98>)
 8002606:	f015 fb6d 	bl	8017ce4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <MX_ETH_Init+0x98>)
 800260c:	2221      	movs	r2, #33	@ 0x21
 800260e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <MX_ETH_Init+0x98>)
 8002612:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002616:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002618:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <MX_ETH_Init+0x98>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000b48 	.word	0x20000b48
 8002628:	40028000 	.word	0x40028000
 800262c:	20001580 	.word	0x20001580
 8002630:	20000178 	.word	0x20000178
 8002634:	200000d8 	.word	0x200000d8
 8002638:	20000a14 	.word	0x20000a14

0800263c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002640:	4b1b      	ldr	r3, [pc, #108]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002642:	4a1c      	ldr	r2, [pc, #112]	@ (80026b4 <MX_I2C1_Init+0x78>)
 8002644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002648:	4a1b      	ldr	r2, [pc, #108]	@ (80026b8 <MX_I2C1_Init+0x7c>)
 800264a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800264c:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002652:	4b17      	ldr	r3, [pc, #92]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002654:	2201      	movs	r2, #1
 8002656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002658:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800265e:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002676:	480e      	ldr	r0, [pc, #56]	@ (80026b0 <MX_I2C1_Init+0x74>)
 8002678:	f007 fd76 	bl	800a168 <HAL_I2C_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002682:	f001 fd37 	bl	80040f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002686:	2100      	movs	r1, #0
 8002688:	4809      	ldr	r0, [pc, #36]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800268a:	f007 fe09 	bl	800a2a0 <HAL_I2CEx_ConfigAnalogFilter>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002694:	f001 fd2e 	bl	80040f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002698:	2100      	movs	r1, #0
 800269a:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_I2C1_Init+0x74>)
 800269c:	f007 fe4b 	bl	800a336 <HAL_I2CEx_ConfigDigitalFilter>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026a6:	f001 fd25 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000bf8 	.word	0x20000bf8
 80026b4:	40005400 	.word	0x40005400
 80026b8:	00c0eaff 	.word	0x00c0eaff

080026bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <MX_I2C3_Init+0x78>)
 80026c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <MX_I2C3_Init+0x7c>)
 80026ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026de:	4b14      	ldr	r3, [pc, #80]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026f6:	480e      	ldr	r0, [pc, #56]	@ (8002730 <MX_I2C3_Init+0x74>)
 80026f8:	f007 fd36 	bl	800a168 <HAL_I2C_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002702:	f001 fcf7 	bl	80040f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002706:	2100      	movs	r1, #0
 8002708:	4809      	ldr	r0, [pc, #36]	@ (8002730 <MX_I2C3_Init+0x74>)
 800270a:	f007 fdc9 	bl	800a2a0 <HAL_I2CEx_ConfigAnalogFilter>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002714:	f001 fcee 	bl	80040f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002718:	2100      	movs	r1, #0
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_I2C3_Init+0x74>)
 800271c:	f007 fe0b 	bl	800a336 <HAL_I2CEx_ConfigDigitalFilter>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002726:	f001 fce5 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000c4c 	.word	0x20000c4c
 8002734:	40005c00 	.word	0x40005c00
 8002738:	00c0eaff 	.word	0x00c0eaff

0800273c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	@ 0x38
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2234      	movs	r2, #52	@ 0x34
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f015 facb 	bl	8017ce4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800274e:	4b3a      	ldr	r3, [pc, #232]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002750:	4a3a      	ldr	r2, [pc, #232]	@ (800283c <MX_LTDC_Init+0x100>)
 8002752:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002754:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800275a:	4b37      	ldr	r3, [pc, #220]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002760:	4b35      	ldr	r3, [pc, #212]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002766:	4b34      	ldr	r3, [pc, #208]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800276c:	4b32      	ldr	r3, [pc, #200]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800276e:	2228      	movs	r2, #40	@ 0x28
 8002770:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002774:	2209      	movs	r2, #9
 8002776:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002778:	4b2f      	ldr	r3, [pc, #188]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800277a:	2235      	movs	r2, #53	@ 0x35
 800277c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800277e:	4b2e      	ldr	r3, [pc, #184]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002780:	220b      	movs	r2, #11
 8002782:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002784:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002786:	f240 2215 	movw	r2, #533	@ 0x215
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800278c:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800278e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002796:	f240 2235 	movw	r2, #565	@ 0x235
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800279c:	4b26      	ldr	r3, [pc, #152]	@ (8002838 <MX_LTDC_Init+0xfc>)
 800279e:	f240 121d 	movw	r2, #285	@ 0x11d
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80027a4:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80027ac:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80027b4:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80027bc:	481e      	ldr	r0, [pc, #120]	@ (8002838 <MX_LTDC_Init+0xfc>)
 80027be:	f007 fe06 	bl	800a3ce <HAL_LTDC_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80027c8:	f001 fc94 	bl	80040f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80027d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80027da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80027de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80027e0:	2302      	movs	r3, #2
 80027e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80027e4:	23ff      	movs	r3, #255	@ 0xff
 80027e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027f2:	2307      	movs	r3, #7
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80027f6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80027fc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002802:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002806:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_LTDC_Init+0xfc>)
 8002822:	f007 ff33 	bl	800a68c <HAL_LTDC_ConfigLayer>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800282c:	f001 fc62 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	3738      	adds	r7, #56	@ 0x38
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000ca0 	.word	0x20000ca0
 800283c:	40016800 	.word	0x40016800

08002840 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002844:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002846:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <MX_QUADSPI_Init+0x54>)
 8002848:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800284c:	2201      	movs	r2, #1
 800284e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002852:	2204      	movs	r2, #4
 8002854:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002858:	2210      	movs	r2, #16
 800285a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800285e:	2218      	movs	r2, #24
 8002860:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002864:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002868:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800287c:	4804      	ldr	r0, [pc, #16]	@ (8002890 <MX_QUADSPI_Init+0x50>)
 800287e:	f008 f919 	bl	800aab4 <HAL_QSPI_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002888:	f001 fc34 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000d48 	.word	0x20000d48
 8002894:	a0001000 	.word	0xa0001000

08002898 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b090      	sub	sp, #64	@ 0x40
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800289e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028ae:	2300      	movs	r3, #0
 80028b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80028b2:	463b      	mov	r3, r7
 80028b4:	2228      	movs	r2, #40	@ 0x28
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f015 fa13 	bl	8017ce4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028c0:	4a46      	ldr	r2, [pc, #280]	@ (80029dc <MX_RTC_Init+0x144>)
 80028c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028c4:	4b44      	ldr	r3, [pc, #272]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028cc:	227f      	movs	r2, #127	@ 0x7f
 80028ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028d0:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028d2:	22ff      	movs	r2, #255	@ 0xff
 80028d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028d6:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028dc:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028e8:	483b      	ldr	r0, [pc, #236]	@ (80029d8 <MX_RTC_Init+0x140>)
 80028ea:	f009 fb91 	bl	800c010 <HAL_RTC_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80028f4:	f001 fbfe 	bl	80040f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002916:	2201      	movs	r2, #1
 8002918:	4619      	mov	r1, r3
 800291a:	482f      	ldr	r0, [pc, #188]	@ (80029d8 <MX_RTC_Init+0x140>)
 800291c:	f009 fbfa 	bl	800c114 <HAL_RTC_SetTime>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002926:	f001 fbe5 	bl	80040f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002946:	2201      	movs	r2, #1
 8002948:	4619      	mov	r1, r3
 800294a:	4823      	ldr	r0, [pc, #140]	@ (80029d8 <MX_RTC_Init+0x140>)
 800294c:	f009 fc7c 	bl	800c248 <HAL_RTC_SetDate>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002956:	f001 fbcd 	bl	80040f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800295a:	2300      	movs	r3, #0
 800295c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800295e:	2300      	movs	r3, #0
 8002960:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002962:	2300      	movs	r3, #0
 8002964:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800298a:	463b      	mov	r3, r7
 800298c:	2201      	movs	r2, #1
 800298e:	4619      	mov	r1, r3
 8002990:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <MX_RTC_Init+0x140>)
 8002992:	f009 fcdd 	bl	800c350 <HAL_RTC_SetAlarm>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800299c:	f001 fbaa 	bl	80040f4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80029a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029a6:	463b      	mov	r3, r7
 80029a8:	2201      	movs	r2, #1
 80029aa:	4619      	mov	r1, r3
 80029ac:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <MX_RTC_Init+0x140>)
 80029ae:	f009 fccf 	bl	800c350 <HAL_RTC_SetAlarm>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80029b8:	f001 fb9c 	bl	80040f4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80029bc:	2202      	movs	r2, #2
 80029be:	2100      	movs	r1, #0
 80029c0:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <MX_RTC_Init+0x140>)
 80029c2:	f009 fe8f 	bl	800c6e4 <HAL_RTCEx_SetTimeStamp>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80029cc:	f001 fb92 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3740      	adds	r7, #64	@ 0x40
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000d94 	.word	0x20000d94
 80029dc:	40002800 	.word	0x40002800

080029e0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80029e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029e6:	4a4e      	ldr	r2, [pc, #312]	@ (8002b20 <MX_SAI2_Init+0x140>)
 80029e8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80029ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029f8:	2240      	movs	r2, #64	@ 0x40
 80029fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80029fc:	4b47      	ldr	r3, [pc, #284]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002a02:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002a08:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002a1a:	4b40      	ldr	r3, [pc, #256]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002a20:	4b3e      	ldr	r3, [pc, #248]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a22:	4a40      	ldr	r2, [pc, #256]	@ (8002b24 <MX_SAI2_Init+0x144>)
 8002a24:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002a32:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002a38:	4b38      	ldr	r3, [pc, #224]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002a3e:	4b37      	ldr	r3, [pc, #220]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a40:	2208      	movs	r2, #8
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002a44:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002a4a:	4b34      	ldr	r3, [pc, #208]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002a56:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002a74:	4829      	ldr	r0, [pc, #164]	@ (8002b1c <MX_SAI2_Init+0x13c>)
 8002a76:	f009 fe9d 	bl	800c7b4 <HAL_SAI_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002a80:	f001 fb38 	bl	80040f4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002a84:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a86:	4a29      	ldr	r2, [pc, #164]	@ (8002b2c <MX_SAI2_Init+0x14c>)
 8002a88:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a92:	2203      	movs	r2, #3
 8002a94:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a98:	2240      	movs	r2, #64	@ 0x40
 8002a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002aae:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002acc:	4b16      	ldr	r3, [pc, #88]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002ae4:	4b10      	ldr	r3, [pc, #64]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002af0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002af6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002b08:	4807      	ldr	r0, [pc, #28]	@ (8002b28 <MX_SAI2_Init+0x148>)
 8002b0a:	f009 fe53 	bl	800c7b4 <HAL_SAI_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002b14:	f001 faee 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000db4 	.word	0x20000db4
 8002b20:	40015c04 	.word	0x40015c04
 8002b24:	0002ee00 	.word	0x0002ee00
 8002b28:	20000e38 	.word	0x20000e38
 8002b2c:	40015c24 	.word	0x40015c24

08002b30 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b38:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <MX_SDMMC1_SD_Init+0x58>)
 8002b3a:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002b42:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b5a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002b5c:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b5e:	2208      	movs	r2, #8
 8002b60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002b62:	4808      	ldr	r0, [pc, #32]	@ (8002b84 <MX_SDMMC1_SD_Init+0x54>)
 8002b64:	f009 ffdc 	bl	800cb20 <HAL_SD_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002b6e:	f001 fac1 	bl	80040f4 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002b72:	f00f f8d9 	bl	8011d28 <BSP_SD_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000ebc 	.word	0x20000ebc
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002b90:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002b92:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002b96:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	@ (8002be8 <MX_SPDIFRX_Init+0x5c>)
 8002bd6:	f00b f963 	bl	800dea0 <HAL_SPDIFRX_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002be0:	f001 fa88 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000f40 	.word	0x20000f40

08002bec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c64 <MX_SPI2_Init+0x78>)
 8002bf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002c0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c38:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c46:	2208      	movs	r2, #8
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_SPI2_Init+0x74>)
 8002c4c:	f00b f984 	bl	800df58 <HAL_SPI_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c56:	f001 fa4d 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000f8c 	.word	0x20000f8c
 8002c64:	40003800 	.word	0x40003800

08002c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09a      	sub	sp, #104	@ 0x68
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	222c      	movs	r2, #44	@ 0x2c
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f015 f81e 	bl	8017ce4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ca8:	4b43      	ldr	r3, [pc, #268]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002caa:	4a44      	ldr	r2, [pc, #272]	@ (8002dbc <MX_TIM1_Init+0x154>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cae:	4b42      	ldr	r3, [pc, #264]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b40      	ldr	r3, [pc, #256]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cba:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cce:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cd4:	4838      	ldr	r0, [pc, #224]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cd6:	f00b f9ea 	bl	800e0ae <HAL_TIM_Base_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ce0:	f001 fa08 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4831      	ldr	r0, [pc, #196]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002cf2:	f00b fd1d 	bl	800e730 <HAL_TIM_ConfigClockSource>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002cfc:	f001 f9fa 	bl	80040f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d00:	482d      	ldr	r0, [pc, #180]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d02:	f00b faa3 	bl	800e24c <HAL_TIM_PWM_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d0c:	f001 f9f2 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d20:	4619      	mov	r1, r3
 8002d22:	4825      	ldr	r0, [pc, #148]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d24:	f00c f994 	bl	800f050 <HAL_TIMEx_MasterConfigSynchronization>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d2e:	f001 f9e1 	bl	80040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d32:	2360      	movs	r3, #96	@ 0x60
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d52:	2200      	movs	r2, #0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4818      	ldr	r0, [pc, #96]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d58:	f00b fbd6 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002d62:	f001 f9c7 	bl	80040f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4807      	ldr	r0, [pc, #28]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002d9c:	f00c f9e6 	bl	800f16c <HAL_TIMEx_ConfigBreakDeadTime>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002da6:	f001 f9a5 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002daa:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <MX_TIM1_Init+0x150>)
 8002dac:	f002 f816 	bl	8004ddc <HAL_TIM_MspPostInit>

}
 8002db0:	bf00      	nop
 8002db2:	3768      	adds	r7, #104	@ 0x68
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000ff0 	.word	0x20000ff0
 8002dbc:	40010000 	.word	0x40010000

08002dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08e      	sub	sp, #56	@ 0x38
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de0:	463b      	mov	r3, r7
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002df2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e06:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e1a:	4823      	ldr	r0, [pc, #140]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e1c:	f00b f947 	bl	800e0ae <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e26:	f001 f965 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e34:	4619      	mov	r1, r3
 8002e36:	481c      	ldr	r0, [pc, #112]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e38:	f00b fc7a 	bl	800e730 <HAL_TIM_ConfigClockSource>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e42:	f001 f957 	bl	80040f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e46:	4818      	ldr	r0, [pc, #96]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e48:	f00b fa00 	bl	800e24c <HAL_TIM_PWM_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e52:	f001 f94f 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4810      	ldr	r0, [pc, #64]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e66:	f00c f8f3 	bl	800f050 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002e70:	f001 f940 	bl	80040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e74:	2360      	movs	r3, #96	@ 0x60
 8002e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4807      	ldr	r0, [pc, #28]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e8c:	f00b fb3c 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e96:	f001 f92d 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e9a:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <MX_TIM2_Init+0xe8>)
 8002e9c:	f001 ff9e 	bl	8004ddc <HAL_TIM_MspPostInit>

}
 8002ea0:	bf00      	nop
 8002ea2:	3738      	adds	r7, #56	@ 0x38
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000103c 	.word	0x2000103c

08002eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	@ 0x38
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	f107 031c 	add.w	r3, r7, #28
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ecc:	463b      	mov	r3, r7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ede:	4b2d      	ldr	r3, [pc, #180]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f98 <MX_TIM3_Init+0xec>)
 8002ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eea:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ef0:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef8:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efe:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f04:	4823      	ldr	r0, [pc, #140]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f06:	f00b f8d2 	bl	800e0ae <HAL_TIM_Base_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f10:	f001 f8f0 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	481c      	ldr	r0, [pc, #112]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f22:	f00b fc05 	bl	800e730 <HAL_TIM_ConfigClockSource>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f2c:	f001 f8e2 	bl	80040f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f30:	4818      	ldr	r0, [pc, #96]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f32:	f00b f98b 	bl	800e24c <HAL_TIM_PWM_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f3c:	f001 f8da 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4811      	ldr	r0, [pc, #68]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f50:	f00c f87e 	bl	800f050 <HAL_TIMEx_MasterConfigSynchronization>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f5a:	f001 f8cb 	bl	80040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5e:	2360      	movs	r3, #96	@ 0x60
 8002f60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	4619      	mov	r1, r3
 8002f74:	4807      	ldr	r0, [pc, #28]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f76:	f00b fac7 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f80:	f001 f8b8 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f84:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <MX_TIM3_Init+0xe8>)
 8002f86:	f001 ff29 	bl	8004ddc <HAL_TIM_MspPostInit>

}
 8002f8a:	bf00      	nop
 8002f8c:	3738      	adds	r7, #56	@ 0x38
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20001088 	.word	0x20001088
 8002f98:	40000400 	.word	0x40000400

08002f9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	@ 0x38
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb0:	f107 031c 	add.w	r3, r7, #28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	611a      	str	r2, [r3, #16]
 8002fca:	615a      	str	r2, [r3, #20]
 8002fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fce:	4b2d      	ldr	r3, [pc, #180]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <MX_TIM5_Init+0xec>)
 8002fd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fe0:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe8:	4b26      	ldr	r3, [pc, #152]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fee:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ff4:	4823      	ldr	r0, [pc, #140]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8002ff6:	f00b f85a 	bl	800e0ae <HAL_TIM_Base_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003000:	f001 f878 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800300a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800300e:	4619      	mov	r1, r3
 8003010:	481c      	ldr	r0, [pc, #112]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003012:	f00b fb8d 	bl	800e730 <HAL_TIM_ConfigClockSource>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800301c:	f001 f86a 	bl	80040f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003020:	4818      	ldr	r0, [pc, #96]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003022:	f00b f913 	bl	800e24c <HAL_TIM_PWM_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800302c:	f001 f862 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	4811      	ldr	r0, [pc, #68]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003040:	f00c f806 	bl	800f050 <HAL_TIMEx_MasterConfigSynchronization>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800304a:	f001 f853 	bl	80040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304e:	2360      	movs	r3, #96	@ 0x60
 8003050:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800305e:	463b      	mov	r3, r7
 8003060:	220c      	movs	r2, #12
 8003062:	4619      	mov	r1, r3
 8003064:	4807      	ldr	r0, [pc, #28]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003066:	f00b fa4f 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003070:	f001 f840 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003074:	4803      	ldr	r0, [pc, #12]	@ (8003084 <MX_TIM5_Init+0xe8>)
 8003076:	f001 feb1 	bl	8004ddc <HAL_TIM_MspPostInit>

}
 800307a:	bf00      	nop
 800307c:	3738      	adds	r7, #56	@ 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200010d4 	.word	0x200010d4
 8003088:	40000c00 	.word	0x40000c00

0800308c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003092:	f107 0310 	add.w	r3, r7, #16
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030aa:	4b20      	ldr	r3, [pc, #128]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <MX_TIM8_Init+0xa4>)
 80030ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030b0:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c4:	4b19      	ldr	r3, [pc, #100]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030ca:	4b18      	ldr	r3, [pc, #96]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d0:	4b16      	ldr	r3, [pc, #88]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030d6:	4815      	ldr	r0, [pc, #84]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030d8:	f00a ffe9 	bl	800e0ae <HAL_TIM_Base_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80030e2:	f001 f807 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4619      	mov	r1, r3
 80030f2:	480e      	ldr	r0, [pc, #56]	@ (800312c <MX_TIM8_Init+0xa0>)
 80030f4:	f00b fb1c 	bl	800e730 <HAL_TIM_ConfigClockSource>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80030fe:	f000 fff9 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4806      	ldr	r0, [pc, #24]	@ (800312c <MX_TIM8_Init+0xa0>)
 8003114:	f00b ff9c 	bl	800f050 <HAL_TIMEx_MasterConfigSynchronization>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800311e:	f000 ffe9 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003122:	bf00      	nop
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20001120 	.word	0x20001120
 8003130:	40010400 	.word	0x40010400

08003134 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	615a      	str	r2, [r3, #20]
 800314a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800314e:	4a1b      	ldr	r2, [pc, #108]	@ (80031bc <MX_TIM12_Init+0x88>)
 8003150:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003152:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003164:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003166:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316c:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003172:	4811      	ldr	r0, [pc, #68]	@ (80031b8 <MX_TIM12_Init+0x84>)
 8003174:	f00b f86a 	bl	800e24c <HAL_TIM_PWM_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800317e:	f000 ffb9 	bl	80040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003182:	2360      	movs	r3, #96	@ 0x60
 8003184:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	4807      	ldr	r0, [pc, #28]	@ (80031b8 <MX_TIM12_Init+0x84>)
 800319a:	f00b f9b5 	bl	800e508 <HAL_TIM_PWM_ConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80031a4:	f000 ffa6 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80031a8:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <MX_TIM12_Init+0x84>)
 80031aa:	f001 fe17 	bl	8004ddc <HAL_TIM_MspPostInit>

}
 80031ae:	bf00      	nop
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000116c 	.word	0x2000116c
 80031bc:	40001800 	.word	0x40001800

080031c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031c4:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031c6:	4a15      	ldr	r2, [pc, #84]	@ (800321c <MX_USART1_UART_Init+0x5c>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003202:	4805      	ldr	r0, [pc, #20]	@ (8003218 <MX_USART1_UART_Init+0x58>)
 8003204:	f00c f84e 	bl	800f2a4 <HAL_UART_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800320e:	f000 ff71 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200011b8 	.word	0x200011b8
 800321c:	40011000 	.word	0x40011000

08003220 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <MX_USART6_UART_Init+0x5c>)
 8003228:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800322a:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800322c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003230:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003238:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003246:	220c      	movs	r2, #12
 8003248:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324a:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003250:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003256:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003262:	4805      	ldr	r0, [pc, #20]	@ (8003278 <MX_USART6_UART_Init+0x58>)
 8003264:	f00c f81e 	bl	800f2a4 <HAL_UART_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800326e:	f000 ff41 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20001240 	.word	0x20001240
 800327c:	40011400 	.word	0x40011400

08003280 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
 8003294:	615a      	str	r2, [r3, #20]
 8003296:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003298:	4b1f      	ldr	r3, [pc, #124]	@ (8003318 <MX_FMC_Init+0x98>)
 800329a:	4a20      	ldr	r2, [pc, #128]	@ (800331c <MX_FMC_Init+0x9c>)
 800329c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <MX_FMC_Init+0x98>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <MX_FMC_Init+0x98>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <MX_FMC_Init+0x98>)
 80032ac:	2204      	movs	r2, #4
 80032ae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <MX_FMC_Init+0x98>)
 80032b2:	2210      	movs	r2, #16
 80032b4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <MX_FMC_Init+0x98>)
 80032b8:	2240      	movs	r2, #64	@ 0x40
 80032ba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <MX_FMC_Init+0x98>)
 80032be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80032c2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032c4:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <MX_FMC_Init+0x98>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80032ca:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <MX_FMC_Init+0x98>)
 80032cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80032d2:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <MX_FMC_Init+0x98>)
 80032d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <MX_FMC_Init+0x98>)
 80032dc:	2200      	movs	r2, #0
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80032e0:	2302      	movs	r3, #2
 80032e2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80032e4:	2307      	movs	r3, #7
 80032e6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80032e8:	2304      	movs	r3, #4
 80032ea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80032ec:	2307      	movs	r3, #7
 80032ee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80032f0:	2303      	movs	r3, #3
 80032f2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4805      	ldr	r0, [pc, #20]	@ (8003318 <MX_FMC_Init+0x98>)
 8003302:	f00a fd98 	bl	800de36 <HAL_SDRAM_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800330c:	f000 fef2 	bl	80040f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003310:	bf00      	nop
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	200012c8 	.word	0x200012c8
 800331c:	a0000140 	.word	0xa0000140

08003320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	@ 0x40
 8003324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003336:	4bb0      	ldr	r3, [pc, #704]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	4aaf      	ldr	r2, [pc, #700]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800333c:	f043 0310 	orr.w	r3, r3, #16
 8003340:	6313      	str	r3, [r2, #48]	@ 0x30
 8003342:	4bad      	ldr	r3, [pc, #692]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800334c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800334e:	4baa      	ldr	r3, [pc, #680]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4aa9      	ldr	r2, [pc, #676]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4ba7      	ldr	r3, [pc, #668]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4ba4      	ldr	r3, [pc, #656]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4aa3      	ldr	r2, [pc, #652]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4ba1      	ldr	r3, [pc, #644]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800337e:	4b9e      	ldr	r3, [pc, #632]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a9d      	ldr	r2, [pc, #628]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003384:	f043 0308 	orr.w	r3, r3, #8
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b9b      	ldr	r3, [pc, #620]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003396:	4b98      	ldr	r3, [pc, #608]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	4a97      	ldr	r2, [pc, #604]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a2:	4b95      	ldr	r3, [pc, #596]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	4b92      	ldr	r3, [pc, #584]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	4a91      	ldr	r2, [pc, #580]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ba:	4b8f      	ldr	r3, [pc, #572]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033c6:	4b8c      	ldr	r3, [pc, #560]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a8b      	ldr	r2, [pc, #556]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b89      	ldr	r3, [pc, #548]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033de:	4b86      	ldr	r3, [pc, #536]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a85      	ldr	r2, [pc, #532]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b83      	ldr	r3, [pc, #524]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033f6:	4b80      	ldr	r3, [pc, #512]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	4a7f      	ldr	r2, [pc, #508]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 80033fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003400:	6313      	str	r3, [r2, #48]	@ 0x30
 8003402:	4b7d      	ldr	r3, [pc, #500]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800340e:	4b7a      	ldr	r3, [pc, #488]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	4a79      	ldr	r2, [pc, #484]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	6313      	str	r3, [r2, #48]	@ 0x30
 800341a:	4b77      	ldr	r3, [pc, #476]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003426:	4b74      	ldr	r3, [pc, #464]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a73      	ldr	r2, [pc, #460]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 800342c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b71      	ldr	r3, [pc, #452]	@ (80035f8 <MX_GPIO_Init+0x2d8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800343e:	2201      	movs	r2, #1
 8003440:	2120      	movs	r1, #32
 8003442:	486e      	ldr	r0, [pc, #440]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 8003444:	f005 f8d0 	bl	80085e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	210c      	movs	r1, #12
 800344c:	486c      	ldr	r0, [pc, #432]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 800344e:	f005 f8cb 	bl	80085e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003452:	2201      	movs	r2, #1
 8003454:	2108      	movs	r1, #8
 8003456:	486b      	ldr	r0, [pc, #428]	@ (8003604 <MX_GPIO_Init+0x2e4>)
 8003458:	f005 f8c6 	bl	80085e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800345c:	2201      	movs	r2, #1
 800345e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003462:	4867      	ldr	r0, [pc, #412]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 8003464:	f005 f8c0 	bl	80085e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800346e:	4866      	ldr	r0, [pc, #408]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 8003470:	f005 f8ba 	bl	80085e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003474:	2200      	movs	r2, #0
 8003476:	21c8      	movs	r1, #200	@ 0xc8
 8003478:	4864      	ldr	r0, [pc, #400]	@ (800360c <MX_GPIO_Init+0x2ec>)
 800347a:	f005 f8b5 	bl	80085e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800347e:	2308      	movs	r3, #8
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800348e:	4619      	mov	r1, r3
 8003490:	485f      	ldr	r0, [pc, #380]	@ (8003610 <MX_GPIO_Init+0x2f0>)
 8003492:	f004 fee5 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003496:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a4:	2303      	movs	r3, #3
 80034a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034a8:	230a      	movs	r3, #10
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034b0:	4619      	mov	r1, r3
 80034b2:	4858      	ldr	r0, [pc, #352]	@ (8003614 <MX_GPIO_Init+0x2f4>)
 80034b4:	f004 fed4 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80034b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034ca:	4619      	mov	r1, r3
 80034cc:	4852      	ldr	r0, [pc, #328]	@ (8003618 <MX_GPIO_Init+0x2f8>)
 80034ce:	f004 fec7 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80034d2:	2340      	movs	r3, #64	@ 0x40
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80034d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034e4:	4619      	mov	r1, r3
 80034e6:	4845      	ldr	r0, [pc, #276]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 80034e8:	f004 feba 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80034ec:	2320      	movs	r3, #32
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f0:	2301      	movs	r3, #1
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003500:	4619      	mov	r1, r3
 8003502:	483e      	ldr	r0, [pc, #248]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 8003504:	f004 feac 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003508:	f241 030c 	movw	r3, #4108	@ 0x100c
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800351a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800351e:	4619      	mov	r1, r3
 8003520:	4837      	ldr	r0, [pc, #220]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 8003522:	f004 fe9d 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352c:	2300      	movs	r3, #0
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003538:	4619      	mov	r1, r3
 800353a:	4838      	ldr	r0, [pc, #224]	@ (800361c <MX_GPIO_Init+0x2fc>)
 800353c:	f004 fe90 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003540:	2308      	movs	r3, #8
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003544:	2301      	movs	r3, #1
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003554:	4619      	mov	r1, r3
 8003556:	482b      	ldr	r0, [pc, #172]	@ (8003604 <MX_GPIO_Init+0x2e4>)
 8003558:	f004 fe82 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800355c:	2310      	movs	r3, #16
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003560:	2300      	movs	r3, #0
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800356c:	4619      	mov	r1, r3
 800356e:	4823      	ldr	r0, [pc, #140]	@ (80035fc <MX_GPIO_Init+0x2dc>)
 8003570:	f004 fe76 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003574:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357a:	2300      	movs	r3, #0
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	481f      	ldr	r0, [pc, #124]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 800358a:	f004 fe69 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800358e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003594:	2301      	movs	r3, #1
 8003596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80035a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035a4:	4619      	mov	r1, r3
 80035a6:	4818      	ldr	r0, [pc, #96]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 80035a8:	f004 fe5a 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80035ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035c0:	4619      	mov	r1, r3
 80035c2:	480f      	ldr	r0, [pc, #60]	@ (8003600 <MX_GPIO_Init+0x2e0>)
 80035c4:	f004 fe4c 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80035c8:	2310      	movs	r3, #16
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80035d8:	230a      	movs	r3, #10
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035e0:	4619      	mov	r1, r3
 80035e2:	4809      	ldr	r0, [pc, #36]	@ (8003608 <MX_GPIO_Init+0x2e8>)
 80035e4:	f004 fe3c 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80035e8:	23c8      	movs	r3, #200	@ 0xc8
 80035ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ec:	2301      	movs	r3, #1
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f4:	e014      	b.n	8003620 <MX_GPIO_Init+0x300>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40022000 	.word	0x40022000
 8003604:	40022800 	.word	0x40022800
 8003608:	40021c00 	.word	0x40021c00
 800360c:	40021800 	.word	0x40021800
 8003610:	40021000 	.word	0x40021000
 8003614:	40020400 	.word	0x40020400
 8003618:	40022400 	.word	0x40022400
 800361c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003620:	2300      	movs	r3, #0
 8003622:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003628:	4619      	mov	r1, r3
 800362a:	4819      	ldr	r0, [pc, #100]	@ (8003690 <MX_GPIO_Init+0x370>)
 800362c:	f004 fe18 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003630:	2305      	movs	r3, #5
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003640:	230a      	movs	r3, #10
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003648:	4619      	mov	r1, r3
 800364a:	4812      	ldr	r0, [pc, #72]	@ (8003694 <MX_GPIO_Init+0x374>)
 800364c:	f004 fe08 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003650:	2304      	movs	r3, #4
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003654:	2300      	movs	r3, #0
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800365c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003660:	4619      	mov	r1, r3
 8003662:	480b      	ldr	r0, [pc, #44]	@ (8003690 <MX_GPIO_Init+0x370>)
 8003664:	f004 fdfc 	bl	8008260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003668:	2328      	movs	r3, #40	@ 0x28
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003678:	230a      	movs	r3, #10
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	4805      	ldr	r0, [pc, #20]	@ (8003698 <MX_GPIO_Init+0x378>)
 8003684:	f004 fdec 	bl	8008260 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003688:	bf00      	nop
 800368a:	3740      	adds	r7, #64	@ 0x40
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021800 	.word	0x40021800
 8003694:	40020800 	.word	0x40020800
 8003698:	40020000 	.word	0x40020000

0800369c <_initialize_sd_card_and_test>:
/**
 * @brief SD 카드 초기화 및 기본 기능 테스트
 * @return SD 초기화 결과 (SDSTORAGE_OK: 성공, 기타: 실패)
 */
static int _initialize_sd_card_and_test(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 80036a2:	4920      	ldr	r1, [pc, #128]	@ (8003724 <_initialize_sd_card_and_test+0x88>)
 80036a4:	2001      	movs	r0, #1
 80036a6:	f002 f861 	bl	800576c <LOGGER_SendFormatted>
    
    // SD 초기화 시도
    LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 80036aa:	491f      	ldr	r1, [pc, #124]	@ (8003728 <_initialize_sd_card_and_test+0x8c>)
 80036ac:	2001      	movs	r0, #1
 80036ae:	f002 f85d 	bl	800576c <LOGGER_SendFormatted>
    int sd_result = SDStorage_Init();
 80036b2:	f7fe f86b 	bl	800178c <SDStorage_Init>
 80036b6:	60f8      	str	r0, [r7, #12]
    
    if (sd_result == SDSTORAGE_OK) {
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d124      	bne.n	8003708 <_initialize_sd_card_and_test+0x6c>
        LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 80036be:	491b      	ldr	r1, [pc, #108]	@ (800372c <_initialize_sd_card_and_test+0x90>)
 80036c0:	2001      	movs	r0, #1
 80036c2:	f002 f853 	bl	800576c <LOGGER_SendFormatted>
        
        // 기본 쓰기 테스트
        LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 80036c6:	491a      	ldr	r1, [pc, #104]	@ (8003730 <_initialize_sd_card_and_test+0x94>)
 80036c8:	2001      	movs	r0, #1
 80036ca:	f002 f84f 	bl	800576c <LOGGER_SendFormatted>
        const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 80036ce:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <_initialize_sd_card_and_test+0x98>)
 80036d0:	60bb      	str	r3, [r7, #8]
        int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 80036d2:	68b8      	ldr	r0, [r7, #8]
 80036d4:	f7fc fda6 	bl	8000224 <strlen>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	68b8      	ldr	r0, [r7, #8]
 80036de:	f7fe f8bb 	bl	8001858 <SDStorage_WriteLog>
 80036e2:	6078      	str	r0, [r7, #4]
        
        if (write_result == SDSTORAGE_OK) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <_initialize_sd_card_and_test+0x60>
            LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 80036ea:	4913      	ldr	r1, [pc, #76]	@ (8003738 <_initialize_sd_card_and_test+0x9c>)
 80036ec:	2001      	movs	r0, #1
 80036ee:	f002 f83d 	bl	800576c <LOGGER_SendFormatted>
            LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 80036f2:	4912      	ldr	r1, [pc, #72]	@ (800373c <_initialize_sd_card_and_test+0xa0>)
 80036f4:	2001      	movs	r0, #1
 80036f6:	f002 f839 	bl	800576c <LOGGER_SendFormatted>
 80036fa:	e00e      	b.n	800371a <_initialize_sd_card_and_test+0x7e>
        } else {
            LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4910      	ldr	r1, [pc, #64]	@ (8003740 <_initialize_sd_card_and_test+0xa4>)
 8003700:	2003      	movs	r0, #3
 8003702:	f002 f833 	bl	800576c <LOGGER_SendFormatted>
 8003706:	e008      	b.n	800371a <_initialize_sd_card_and_test+0x7e>
        }
    } else {
        LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", sd_result);
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	490e      	ldr	r1, [pc, #56]	@ (8003744 <_initialize_sd_card_and_test+0xa8>)
 800370c:	2003      	movs	r0, #3
 800370e:	f002 f82d 	bl	800576c <LOGGER_SendFormatted>
        LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 8003712:	490d      	ldr	r1, [pc, #52]	@ (8003748 <_initialize_sd_card_and_test+0xac>)
 8003714:	2001      	movs	r0, #1
 8003716:	f002 f829 	bl	800576c <LOGGER_SendFormatted>
    }
    
    return sd_result;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0801b144 	.word	0x0801b144
 8003728:	0801b180 	.word	0x0801b180
 800372c:	0801b1b4 	.word	0x0801b1b4
 8003730:	0801b1e4 	.word	0x0801b1e4
 8003734:	0801b218 	.word	0x0801b218
 8003738:	0801b244 	.word	0x0801b244
 800373c:	0801b274 	.word	0x0801b274
 8003740:	0801b2c4 	.word	0x0801b2c4
 8003744:	0801b2fc 	.word	0x0801b2fc
 8003748:	0801b334 	.word	0x0801b334

0800374c <_setup_lora_uart_connection>:
/**
 * @brief LoRa UART 연결 설정
 * @return UART 연결 결과 (UART_STATUS_OK: 성공, 기타: 실패)
 */
static int _setup_lora_uart_connection(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 8003752:	490d      	ldr	r1, [pc, #52]	@ (8003788 <_setup_lora_uart_connection+0x3c>)
 8003754:	2001      	movs	r0, #1
 8003756:	f002 f809 	bl	800576c <LOGGER_SendFormatted>
    UartStatus uart_status = UART_Connect("UART6");
 800375a:	480c      	ldr	r0, [pc, #48]	@ (800378c <_setup_lora_uart_connection+0x40>)
 800375c:	f002 f9c6 	bl	8005aec <UART_Connect>
 8003760:	6078      	str	r0, [r7, #4]
    
    if (uart_status == UART_STATUS_OK) {
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <_setup_lora_uart_connection+0x26>
        LOG_INFO("✅ [TX_TASK] UART connection successful");
 8003768:	4909      	ldr	r1, [pc, #36]	@ (8003790 <_setup_lora_uart_connection+0x44>)
 800376a:	2001      	movs	r0, #1
 800376c:	f001 fffe 	bl	800576c <LOGGER_SendFormatted>
 8003770:	e004      	b.n	800377c <_setup_lora_uart_connection+0x30>
    } else {
        LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4907      	ldr	r1, [pc, #28]	@ (8003794 <_setup_lora_uart_connection+0x48>)
 8003776:	2003      	movs	r0, #3
 8003778:	f001 fff8 	bl	800576c <LOGGER_SendFormatted>
    }
    
    return uart_status;
 800377c:	687b      	ldr	r3, [r7, #4]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0801b36c 	.word	0x0801b36c
 800378c:	0801b3a8 	.word	0x0801b3a8
 8003790:	0801b3b0 	.word	0x0801b3b0
 8003794:	0801b3dc 	.word	0x0801b3dc

08003798 <_initialize_lora_context>:
/**
 * @brief LoRa 컨텍스트 초기화
 * @param lora_ctx LoRa 컨텍스트 포인터
 */
static void _initialize_lora_context(LoraStarterContext* lora_ctx)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
    LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80037a0:	490f      	ldr	r1, [pc, #60]	@ (80037e0 <_initialize_lora_context+0x48>)
 80037a2:	2001      	movs	r0, #1
 80037a4:	f001 ffe2 	bl	800576c <LOGGER_SendFormatted>
    osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80037a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80037ac:	f011 fc6e 	bl	801508c <osDelay>
    
    // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
    LoraStarter_InitWithDefaults(lora_ctx, "TEST");
 80037b0:	490c      	ldr	r1, [pc, #48]	@ (80037e4 <_initialize_lora_context+0x4c>)
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd f808 	bl	80007c8 <LoraStarter_InitWithDefaults>
    
    LOG_INFO("=== LoRa Initialization ===");
 80037b8:	490b      	ldr	r1, [pc, #44]	@ (80037e8 <_initialize_lora_context+0x50>)
 80037ba:	2001      	movs	r0, #1
 80037bc:	f001 ffd6 	bl	800576c <LOGGER_SendFormatted>
    LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4906      	ldr	r1, [pc, #24]	@ (80037ec <_initialize_lora_context+0x54>)
 80037d2:	2001      	movs	r0, #1
 80037d4:	f001 ffca 	bl	800576c <LOGGER_SendFormatted>
             lora_ctx->num_commands, lora_ctx->send_message, lora_ctx->max_retry_count);
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	0801b410 	.word	0x0801b410
 80037e4:	0801b470 	.word	0x0801b470
 80037e8:	0801b478 	.word	0x0801b478
 80037ec:	0801b494 	.word	0x0801b494

080037f0 <_configure_logging_mode>:
/**
 * @brief SD 초기화 결과에 따른 로깅 모드 설정
 * @param sd_result SD 초기화 결과
 */
static void _configure_logging_mode(int sd_result)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    // SD 카드 로깅 설정 (간단한 방식)
    if (sd_result == SDSTORAGE_OK) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d114      	bne.n	8003828 <_configure_logging_mode+0x38>
        LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 80037fe:	4913      	ldr	r1, [pc, #76]	@ (800384c <_configure_logging_mode+0x5c>)
 8003800:	2001      	movs	r0, #1
 8003802:	f001 ffb3 	bl	800576c <LOGGER_SendFormatted>
        
        // LoRa 로깅 모드 설정 - 초기화 단계에서는 터미널만 사용
        LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 8003806:	2002      	movs	r0, #2
 8003808:	f001 ff8c 	bl	8005724 <LOGGER_SetMode>
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 800380c:	2001      	movs	r0, #1
 800380e:	f001 ff4d 	bl	80056ac <LOGGER_SetFilterLevel>
        LOGGER_SetSDFilterLevel(LOG_LEVEL_WARN);  // SD 카드에는 WARN 이상만 저장
 8003812:	2002      	movs	r0, #2
 8003814:	f001 ff5a 	bl	80056cc <LOGGER_SetSDFilterLevel>
        LOGGER_EnableSDLogging(false);  // 초기화 완료 전까지 SD 로깅 비활성화
 8003818:	2000      	movs	r0, #0
 800381a:	f001 ff67 	bl	80056ec <LOGGER_EnableSDLogging>
        LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), SD logging will start from JOIN attempts");
 800381e:	490c      	ldr	r1, [pc, #48]	@ (8003850 <_configure_logging_mode+0x60>)
 8003820:	2002      	movs	r0, #2
 8003822:	f001 ffa3 	bl	800576c <LOGGER_SendFormatted>
        
        LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
        LOG_INFO("📺 LoRa logging mode: Terminal only");
    }
}
 8003826:	e00d      	b.n	8003844 <_configure_logging_mode+0x54>
        LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003828:	490a      	ldr	r1, [pc, #40]	@ (8003854 <_configure_logging_mode+0x64>)
 800382a:	2001      	movs	r0, #1
 800382c:	f001 ff9e 	bl	800576c <LOGGER_SendFormatted>
        LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003830:	2000      	movs	r0, #0
 8003832:	f001 ff77 	bl	8005724 <LOGGER_SetMode>
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003836:	2001      	movs	r0, #1
 8003838:	f001 ff38 	bl	80056ac <LOGGER_SetFilterLevel>
        LOG_INFO("📺 LoRa logging mode: Terminal only");
 800383c:	4906      	ldr	r1, [pc, #24]	@ (8003858 <_configure_logging_mode+0x68>)
 800383e:	2001      	movs	r0, #1
 8003840:	f001 ff94 	bl	800576c <LOGGER_SendFormatted>
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0801b4c4 	.word	0x0801b4c4
 8003850:	0801b4fc 	.word	0x0801b4fc
 8003854:	0801b554 	.word	0x0801b554
 8003858:	0801b59c 	.word	0x0801b59c

0800385c <_run_lora_process_loop>:
/**
 * @brief LoRa 프로세스 메인 루프 실행
 * @param lora_ctx LoRa 컨텍스트 포인터
 */
static void _run_lora_process_loop(LoraStarterContext* lora_ctx)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
    LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003864:	497c      	ldr	r1, [pc, #496]	@ (8003a58 <_run_lora_process_loop+0x1fc>)
 8003866:	2001      	movs	r0, #1
 8003868:	f001 ff80 	bl	800576c <LOGGER_SendFormatted>
    
    for(;;)
    {
        // 수신된 응답이 있으면 LoraStarter에 전달
        const char* rx_data = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
        if (lora_new_response) {
 8003870:	4b7a      	ldr	r3, [pc, #488]	@ (8003a5c <_run_lora_process_loop+0x200>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <_run_lora_process_loop+0x28>
            rx_data = lora_rx_response;
 800387a:	4b79      	ldr	r3, [pc, #484]	@ (8003a60 <_run_lora_process_loop+0x204>)
 800387c:	60fb      	str	r3, [r7, #12]
            lora_new_response = false; // 플래그 클리어
 800387e:	4b77      	ldr	r3, [pc, #476]	@ (8003a5c <_run_lora_process_loop+0x200>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
            // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
        }
        
        // LoraStarter 프로세스 실행
        LoraStarter_Process(lora_ctx, rx_data);
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fc ffe6 	bl	8000858 <LoraStarter_Process>
        
        // JOIN 성공 후 시간 조회는 LoRa 상태 머신에서 자동 처리됨 (TIMEREQ → LTIME)
        
        // 상태별 처리 간격 및 디버깅 (중요한 상태만)
        static int last_state = -1;
        if (lora_ctx->state != last_state) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b74      	ldr	r3, [pc, #464]	@ (8003a64 <_run_lora_process_loop+0x208>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d022      	beq.n	80038e0 <_run_lora_process_loop+0x84>
            // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
            if (lora_ctx->state == LORA_STATE_SEND_JOIN || 
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d00b      	beq.n	80038ba <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_SEND_PERIODIC ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	781b      	ldrb	r3, [r3, #0]
            if (lora_ctx->state == LORA_STATE_SEND_JOIN || 
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d007      	beq.n	80038ba <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_DONE ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	781b      	ldrb	r3, [r3, #0]
                lora_ctx->state == LORA_STATE_SEND_PERIODIC ||
 80038ae:	2b0e      	cmp	r3, #14
 80038b0:	d003      	beq.n	80038ba <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_ERROR) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
                lora_ctx->state == LORA_STATE_DONE ||
 80038b6:	2b0f      	cmp	r3, #15
 80038b8:	d10d      	bne.n	80038d6 <_run_lora_process_loop+0x7a>
                LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	460a      	mov	r2, r1
 80038ce:	4966      	ldr	r1, [pc, #408]	@ (8003a68 <_run_lora_process_loop+0x20c>)
 80038d0:	2001      	movs	r0, #1
 80038d2:	f001 ff4b 	bl	800576c <LOGGER_SendFormatted>
                          lora_ctx->state, lora_ctx->cmd_index, lora_ctx->num_commands);
            }
            last_state = lora_ctx->state;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	4b61      	ldr	r3, [pc, #388]	@ (8003a64 <_run_lora_process_loop+0x208>)
 80038de:	601a      	str	r2, [r3, #0]
        }
        
        switch(lora_ctx->state) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	f200 80ae 	bhi.w	8003a46 <_run_lora_process_loop+0x1ea>
 80038ea:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <_run_lora_process_loop+0x94>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003931 	.word	0x08003931
 80038f4:	0800393b 	.word	0x0800393b
 80038f8:	08003957 	.word	0x08003957
 80038fc:	08003961 	.word	0x08003961
 8003900:	08003991 	.word	0x08003991
 8003904:	080039c1 	.word	0x080039c1
 8003908:	08003a05 	.word	0x08003a05
 800390c:	08003a0f 	.word	0x08003a0f
 8003910:	080039cb 	.word	0x080039cb
 8003914:	08003a05 	.word	0x08003a05
 8003918:	080039d5 	.word	0x080039d5
 800391c:	08003a05 	.word	0x08003a05
 8003920:	08003a19 	.word	0x08003a19
 8003924:	08003a23 	.word	0x08003a23
 8003928:	08003a2d 	.word	0x08003a2d
 800392c:	08003a2d 	.word	0x08003a2d
            case LORA_STATE_INIT:
                osDelay(500); // 초기화 상태는 빠르게
 8003930:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003934:	f011 fbaa 	bl	801508c <osDelay>
                break;
 8003938:	e08a      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_CMD:
                LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4949      	ldr	r1, [pc, #292]	@ (8003a6c <_run_lora_process_loop+0x210>)
 8003946:	2001      	movs	r0, #1
 8003948:	f001 ff10 	bl	800576c <LOGGER_SendFormatted>
                        lora_ctx->cmd_index + 1, lora_ctx->num_commands);
                osDelay(1000); // 명령어 전송 후 1초 대기
 800394c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003950:	f011 fb9c 	bl	801508c <osDelay>
                break;
 8003954:	e07c      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_OK:
                // OK 응답 대기 중 - 조용히 대기
                osDelay(2000); // OK 응답 대기 중 2초 간격
 8003956:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800395a:	f011 fb97 	bl	801508c <osDelay>
                break;
 800395e:	e077      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_JOIN:
                // JOIN 시도 시작 - SD 로깅 활성화 (영구적)
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003960:	4b43      	ldr	r3, [pc, #268]	@ (8003a70 <_run_lora_process_loop+0x214>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10e      	bne.n	8003986 <_run_lora_process_loop+0x12a>
 8003968:	f001 fed0 	bl	800570c <LOGGER_IsSDLoggingEnabled>
 800396c:	4603      	mov	r3, r0
 800396e:	f083 0301 	eor.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <_run_lora_process_loop+0x12a>
                    LOGGER_EnableSDLogging(true);
 8003978:	2001      	movs	r0, #1
 800397a:	f001 feb7 	bl	80056ec <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging enabled from JOIN attempts (WARN+ levels only)");
 800397e:	493d      	ldr	r1, [pc, #244]	@ (8003a74 <_run_lora_process_loop+0x218>)
 8003980:	2002      	movs	r0, #2
 8003982:	f001 fef3 	bl	800576c <LOGGER_SendFormatted>
                }
                osDelay(2000); // JOIN 명령어 전송 후 2초 대기
 8003986:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800398a:	f011 fb7f 	bl	801508c <osDelay>
                break;
 800398e:	e05f      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_JOIN_OK:
                // JOIN 성공 확인 시 SD 로깅 영구 활성화 보장
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003990:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <_run_lora_process_loop+0x214>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <_run_lora_process_loop+0x15a>
 8003998:	f001 feb8 	bl	800570c <LOGGER_IsSDLoggingEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	f083 0301 	eor.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <_run_lora_process_loop+0x15a>
                    LOGGER_EnableSDLogging(true);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f001 fe9f 	bl	80056ec <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging permanently enabled after JOIN success");
 80039ae:	4932      	ldr	r1, [pc, #200]	@ (8003a78 <_run_lora_process_loop+0x21c>)
 80039b0:	2002      	movs	r0, #2
 80039b2:	f001 fedb 	bl	800576c <LOGGER_SendFormatted>
                }
                osDelay(3000); // JOIN 응답 대기 중 3초 간격
 80039b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80039ba:	f011 fb67 	bl	801508c <osDelay>
                break;
 80039be:	e047      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_TIMEREQ:
                osDelay(1000); // TIMEREQ 명령어 전송 후 1초 대기
 80039c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039c4:	f011 fb62 	bl	801508c <osDelay>
                break;
 80039c8:	e042      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_LTIME:
                osDelay(1000); // LTIME 명령어 전송 후 1초 대기
 80039ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039ce:	f011 fb5d 	bl	801508c <osDelay>
                break;
 80039d2:	e03d      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_PERIODIC:
                // 주기적 SEND 시 SD 로깅 상태 확인 및 활성화
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 80039d4:	4b26      	ldr	r3, [pc, #152]	@ (8003a70 <_run_lora_process_loop+0x214>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <_run_lora_process_loop+0x19e>
 80039dc:	f001 fe96 	bl	800570c <LOGGER_IsSDLoggingEnabled>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <_run_lora_process_loop+0x19e>
                    LOGGER_EnableSDLogging(true);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f001 fe7d 	bl	80056ec <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging re-enabled for periodic SEND");
 80039f2:	4922      	ldr	r1, [pc, #136]	@ (8003a7c <_run_lora_process_loop+0x220>)
 80039f4:	2002      	movs	r0, #2
 80039f6:	f001 feb9 	bl	800576c <LOGGER_SendFormatted>
                }
                osDelay(2000); // SEND 명령어 전송 후 2초 대기
 80039fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039fe:	f011 fb45 	bl	801508c <osDelay>
                break;
 8003a02:	e025      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_TIMEREQ_OK:
            case LORA_STATE_WAIT_LTIME_RESPONSE:
            case LORA_STATE_WAIT_SEND_RESPONSE:
                osDelay(3000); // 응답 대기 중 3초 간격
 8003a04:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003a08:	f011 fb40 	bl	801508c <osDelay>
                break;
 8003a0c:	e020      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_TIME_SYNC:
                osDelay(1000); // 시간 동기화 대기 중 1초 간격으로 체크
 8003a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a12:	f011 fb3b 	bl	801508c <osDelay>
                break;
 8003a16:	e01b      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_SEND_INTERVAL:
                // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
                osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003a18:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a1c:	f011 fb36 	bl	801508c <osDelay>
                break;
 8003a20:	e016      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_JOIN_RETRY:
                osDelay(5000); // 재시도 대기 5초
 8003a22:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a26:	f011 fb31 	bl	801508c <osDelay>
                break;
 8003a2a:	e011      	b.n	8003a50 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_DONE:
            case LORA_STATE_ERROR:
                LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b0e      	cmp	r3, #14
 8003a32:	d101      	bne.n	8003a38 <_run_lora_process_loop+0x1dc>
 8003a34:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <_run_lora_process_loop+0x224>)
 8003a36:	e000      	b.n	8003a3a <_run_lora_process_loop+0x1de>
 8003a38:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <_run_lora_process_loop+0x228>)
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4912      	ldr	r1, [pc, #72]	@ (8003a88 <_run_lora_process_loop+0x22c>)
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f001 fe94 	bl	800576c <LOGGER_SendFormatted>
                        lora_ctx->state == LORA_STATE_DONE ? "DONE" : "ERROR");
                return; // 루프 종료하고 idle로 이동
 8003a44:	e005      	b.n	8003a52 <_run_lora_process_loop+0x1f6>
            default:
                osDelay(1000);
 8003a46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a4a:	f011 fb1f 	bl	801508c <osDelay>
                break;
 8003a4e:	bf00      	nop
    {
 8003a50:	e70c      	b.n	800386c <_run_lora_process_loop+0x10>
        }
    }
}
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	0801b5c4 	.word	0x0801b5c4
 8003a5c:	20001514 	.word	0x20001514
 8003a60:	20001314 	.word	0x20001314
 8003a64:	2000001c 	.word	0x2000001c
 8003a68:	0801b5f4 	.word	0x0801b5f4
 8003a6c:	0801b628 	.word	0x0801b628
 8003a70:	20000018 	.word	0x20000018
 8003a74:	0801b650 	.word	0x0801b650
 8003a78:	0801b694 	.word	0x0801b694
 8003a7c:	0801b6d0 	.word	0x0801b6d0
 8003a80:	0801b700 	.word	0x0801b700
 8003a84:	0801b708 	.word	0x0801b708
 8003a88:	0801b710 	.word	0x0801b710

08003a8c <_enter_idle_loop>:

/**
 * @brief Idle 모드 진입 및 처리
 */
static void _enter_idle_loop(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003a92:	490b      	ldr	r1, [pc, #44]	@ (8003ac0 <_enter_idle_loop+0x34>)
 8003a94:	2001      	movs	r0, #1
 8003a96:	f001 fe69 	bl	800576c <LOGGER_SendFormatted>
    uint32_t idle_counter = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
    
    for(;;)
    {
        // 30초마다 idle 상태 표시
        osDelay(30000);
 8003a9e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003aa2:	f011 faf3 	bl	801508c <osDelay>
        idle_counter++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
        LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4904      	ldr	r1, [pc, #16]	@ (8003ac4 <_enter_idle_loop+0x38>)
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f001 fe59 	bl	800576c <LOGGER_SendFormatted>
        osDelay(30000);
 8003aba:	bf00      	nop
 8003abc:	e7ef      	b.n	8003a9e <_enter_idle_loop+0x12>
 8003abe:	bf00      	nop
 8003ac0:	0801b748 	.word	0x0801b748
 8003ac4:	0801b770 	.word	0x0801b770

08003ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b090      	sub	sp, #64	@ 0x40
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 8003ad0:	4927      	ldr	r1, [pc, #156]	@ (8003b70 <StartDefaultTask+0xa8>)
 8003ad2:	2002      	movs	r0, #2
 8003ad4:	f001 fe4a 	bl	800576c <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 8003ad8:	4926      	ldr	r1, [pc, #152]	@ (8003b74 <StartDefaultTask+0xac>)
 8003ada:	2001      	movs	r0, #1
 8003adc:	f001 fe46 	bl	800576c <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8003ae0:	4925      	ldr	r1, [pc, #148]	@ (8003b78 <StartDefaultTask+0xb0>)
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f001 fe42 	bl	800576c <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003ae8:	4924      	ldr	r1, [pc, #144]	@ (8003b7c <StartDefaultTask+0xb4>)
 8003aea:	2001      	movs	r0, #1
 8003aec:	f001 fe3e 	bl	800576c <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8003af0:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <StartDefaultTask+0xb8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <StartDefaultTask+0xbc>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9b      	lsrs	r3, r3, #18
 8003afc:	461a      	mov	r2, r3
 8003afe:	4922      	ldr	r1, [pc, #136]	@ (8003b88 <StartDefaultTask+0xc0>)
 8003b00:	2001      	movs	r0, #1
 8003b02:	f001 fe33 	bl	800576c <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8003b06:	4921      	ldr	r1, [pc, #132]	@ (8003b8c <StartDefaultTask+0xc4>)
 8003b08:	2001      	movs	r0, #1
 8003b0a:	f001 fe2f 	bl	800576c <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8003b0e:	4920      	ldr	r1, [pc, #128]	@ (8003b90 <StartDefaultTask+0xc8>)
 8003b10:	2001      	movs	r0, #1
 8003b12:	f001 fe2b 	bl	800576c <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8003b16:	491f      	ldr	r1, [pc, #124]	@ (8003b94 <StartDefaultTask+0xcc>)
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f001 fe27 	bl	800576c <LOGGER_SendFormatted>
  
  // 1. SD 카드 초기화 및 기본 기능 테스트
  g_sd_initialization_result = _initialize_sd_card_and_test();
 8003b1e:	f7ff fdbd 	bl	800369c <_initialize_sd_card_and_test>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <StartDefaultTask+0xd0>)
 8003b26:	6013      	str	r3, [r2, #0]
  
  // 2. LoRa UART 연결 설정
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003b28:	491c      	ldr	r1, [pc, #112]	@ (8003b9c <StartDefaultTask+0xd4>)
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f001 fe1e 	bl	800576c <LOGGER_SendFormatted>
  int uart_result = _setup_lora_uart_connection();
 8003b30:	f7ff fe0c 	bl	800374c <_setup_lora_uart_connection>
 8003b34:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (uart_result != UART_STATUS_OK) {
 8003b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <StartDefaultTask+0x7c>
    LOG_ERROR("❌ [TX_TASK] UART setup failed, continuing anyway...");
 8003b3c:	4918      	ldr	r1, [pc, #96]	@ (8003ba0 <StartDefaultTask+0xd8>)
 8003b3e:	2003      	movs	r0, #3
 8003b40:	f001 fe14 	bl	800576c <LOGGER_SendFormatted>
  }
  
  // 3. LoRa 컨텍스트 초기화
  LoraStarterContext lora_ctx;
  _initialize_lora_context(&lora_ctx);
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fe25 	bl	8003798 <_initialize_lora_context>
  
  // 4. 로깅 모드 설정
  _configure_logging_mode(g_sd_initialization_result);
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <StartDefaultTask+0xd0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fe4c 	bl	80037f0 <_configure_logging_mode>
  
  // 5. LoRa 프로세스 메인 루프 실행
  _run_lora_process_loop(&lora_ctx);
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fe7d 	bl	800385c <_run_lora_process_loop>
  
  // 6. Idle 모드 진입
  _enter_idle_loop();
 8003b62:	f7ff ff93 	bl	8003a8c <_enter_idle_loop>
  
  /* USER CODE END 5 */
}
 8003b66:	bf00      	nop
 8003b68:	3740      	adds	r7, #64	@ 0x40
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	0801b7a0 	.word	0x0801b7a0
 8003b74:	0801b7ec 	.word	0x0801b7ec
 8003b78:	0801b82c 	.word	0x0801b82c
 8003b7c:	0801b874 	.word	0x0801b874
 8003b80:	20000020 	.word	0x20000020
 8003b84:	431bde83 	.word	0x431bde83
 8003b88:	0801b8a0 	.word	0x0801b8a0
 8003b8c:	0801b8b8 	.word	0x0801b8b8
 8003b90:	0801b8e0 	.word	0x0801b8e0
 8003b94:	0801b92c 	.word	0x0801b92c
 8003b98:	20000018 	.word	0x20000018
 8003b9c:	0801b968 	.word	0x0801b968
 8003ba0:	0801b9a0 	.word	0x0801b9a0

08003ba4 <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0b4      	sub	sp, #208	@ 0xd0
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003bac:	4982      	ldr	r1, [pc, #520]	@ (8003db8 <StartSDLoggingTask+0x214>)
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f001 fddc 	bl	800576c <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003bb4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003bb8:	f011 fa68 	bl	801508c <osDelay>
  
  // SD 초기화 시도 (이미 정상이면 스킵)
  bool sd_init_needed = !SDStorage_IsReady();
 8003bbc:	f7fd ff34 	bl	8001a28 <SDStorage_IsReady>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf14      	ite	ne
 8003bc6:	2301      	movne	r3, #1
 8003bc8:	2300      	moveq	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003bd6:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  int init_result = SDSTORAGE_OK; // 기본값: 성공
 8003be2:	2300      	movs	r3, #0
 8003be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  
  if (sd_init_needed) {
 8003be8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d069      	beq.n	8003cc4 <StartSDLoggingTask+0x120>
    LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003bf0:	4972      	ldr	r1, [pc, #456]	@ (8003dbc <StartSDLoggingTask+0x218>)
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f001 fdba 	bl	800576c <LOGGER_SendFormatted>
    
    // 단계별 안전한 SD 초기화
    int init_attempts = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    const int MAX_INIT_ATTEMPTS = 3;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    
    for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c0a:	e054      	b.n	8003cb6 <StartSDLoggingTask+0x112>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c16:	496a      	ldr	r1, [pc, #424]	@ (8003dc0 <StartSDLoggingTask+0x21c>)
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f001 fda7 	bl	800576c <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003c1e:	f002 fc5b 	bl	80064d8 <HAL_GetTick>
 8003c22:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003c26:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    init_result = SDStorage_Init();
 8003c2e:	f7fd fdad 	bl	800178c <SDStorage_Init>
 8003c32:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003c36:	f002 fc4f 	bl	80064d8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c56:	495b      	ldr	r1, [pc, #364]	@ (8003dc4 <StartSDLoggingTask+0x220>)
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f001 fd87 	bl	800576c <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <StartSDLoggingTask+0xd8>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003c66:	4958      	ldr	r1, [pc, #352]	@ (8003dc8 <StartSDLoggingTask+0x224>)
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f001 fd7f 	bl	800576c <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003c6e:	4b57      	ldr	r3, [pc, #348]	@ (8003dcc <StartSDLoggingTask+0x228>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003c74:	4b56      	ldr	r3, [pc, #344]	@ (8003dd0 <StartSDLoggingTask+0x22c>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
      break;
 8003c7a:	e02d      	b.n	8003cd8 <StartSDLoggingTask+0x134>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c86:	4953      	ldr	r1, [pc, #332]	@ (8003dd4 <StartSDLoggingTask+0x230>)
 8003c88:	2002      	movs	r0, #2
 8003c8a:	f001 fd6f 	bl	800576c <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c92:	3b01      	subs	r3, #1
 8003c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	da07      	bge.n	8003cac <StartSDLoggingTask+0x108>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003c9c:	494e      	ldr	r1, [pc, #312]	@ (8003dd8 <StartSDLoggingTask+0x234>)
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f001 fd64 	bl	800576c <LOGGER_SendFormatted>
        osDelay(5000);
 8003ca4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003ca8:	f011 f9f0 	bl	801508c <osDelay>
    for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dba4      	blt.n	8003c0c <StartSDLoggingTask+0x68>
 8003cc2:	e009      	b.n	8003cd8 <StartSDLoggingTask+0x134>
      }
    }
    } // for loop 종료
  } else {
    // 이미 SD가 준비된 경우
    LOG_INFO("[SD_TASK] 📝 SD card already ready, skipping initialization");
 8003cc4:	4945      	ldr	r1, [pc, #276]	@ (8003ddc <StartSDLoggingTask+0x238>)
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f001 fd50 	bl	800576c <LOGGER_SendFormatted>
    g_sd_initialization_result = SDSTORAGE_OK;
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8003dcc <StartSDLoggingTask+0x228>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
    g_sd_logging_active = true;
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd0 <StartSDLoggingTask+0x22c>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
  }
  
  // 초기화 결과에 따른 후속 처리
  if (init_result != SDSTORAGE_OK) {
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <StartSDLoggingTask+0x156>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003ce0:	493f      	ldr	r1, [pc, #252]	@ (8003de0 <StartSDLoggingTask+0x23c>)
 8003ce2:	2003      	movs	r0, #3
 8003ce4:	f001 fd42 	bl	800576c <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003ce8:	493e      	ldr	r1, [pc, #248]	@ (8003de4 <StartSDLoggingTask+0x240>)
 8003cea:	2001      	movs	r0, #1
 8003cec:	f001 fd3e 	bl	800576c <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003cf0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003cf4:	f011 f9ca 	bl	801508c <osDelay>
 8003cf8:	e7fa      	b.n	8003cf0 <StartSDLoggingTask+0x14c>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003cfa:	493b      	ldr	r1, [pc, #236]	@ (8003de8 <StartSDLoggingTask+0x244>)
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f001 fd35 	bl	800576c <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003d02:	4b3a      	ldr	r3, [pc, #232]	@ (8003dec <StartSDLoggingTask+0x248>)
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f011 fa38 	bl	8015184 <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d12d      	bne.n	8003d78 <StartSDLoggingTask+0x1d4>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003d1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	4611      	mov	r1, r2
 8003d26:	2288      	movs	r2, #136	@ 0x88
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f014 f89c 	bl	8017e66 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003d2e:	f002 fbd3 	bl	80064d8 <HAL_GetTick>
 8003d32:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003d36:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d3a:	f107 030c 	add.w	r3, r7, #12
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fd fd89 	bl	8001858 <SDStorage_WriteLog>
 8003d46:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003d4a:	f002 fbc5 	bl	80064d8 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      
      if (write_result != SDSTORAGE_OK) {
 8003d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <StartSDLoggingTask+0x1d4>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003d62:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d66:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003d6a:	4821      	ldr	r0, [pc, #132]	@ (8003df0 <StartSDLoggingTask+0x24c>)
 8003d6c:	f013 fea2 	bl	8017ab4 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003d70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d74:	f011 f98a 	bl	801508c <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003d78:	4b1e      	ldr	r3, [pc, #120]	@ (8003df4 <StartSDLoggingTask+0x250>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003df4 <StartSDLoggingTask+0x250>)
 8003d80:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003d82:	4b1c      	ldr	r3, [pc, #112]	@ (8003df4 <StartSDLoggingTask+0x250>)
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	4b1c      	ldr	r3, [pc, #112]	@ (8003df8 <StartSDLoggingTask+0x254>)
 8003d88:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8c:	095a      	lsrs	r2, r3, #5
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	1aca      	subs	r2, r1, r3
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	d108      	bne.n	8003dae <StartSDLoggingTask+0x20a>
      if (SDStorage_IsReady()) {
 8003d9c:	f7fd fe44 	bl	8001a28 <SDStorage_IsReady>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <StartSDLoggingTask+0x20a>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003da6:	4915      	ldr	r1, [pc, #84]	@ (8003dfc <StartSDLoggingTask+0x258>)
 8003da8:	2002      	movs	r0, #2
 8003daa:	f001 fcdf 	bl	800576c <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003dae:	2032      	movs	r0, #50	@ 0x32
 8003db0:	f011 f96c 	bl	801508c <osDelay>
  {
 8003db4:	e7a5      	b.n	8003d02 <StartSDLoggingTask+0x15e>
 8003db6:	bf00      	nop
 8003db8:	0801b9d8 	.word	0x0801b9d8
 8003dbc:	0801b9f8 	.word	0x0801b9f8
 8003dc0:	0801ba2c 	.word	0x0801ba2c
 8003dc4:	0801ba54 	.word	0x0801ba54
 8003dc8:	0801ba88 	.word	0x0801ba88
 8003dcc:	20000018 	.word	0x20000018
 8003dd0:	2000130c 	.word	0x2000130c
 8003dd4:	0801bab4 	.word	0x0801bab4
 8003dd8:	0801baec 	.word	0x0801baec
 8003ddc:	0801bb18 	.word	0x0801bb18
 8003de0:	0801bb58 	.word	0x0801bb58
 8003de4:	0801bb8c 	.word	0x0801bb8c
 8003de8:	0801bbbc 	.word	0x0801bbbc
 8003dec:	20001308 	.word	0x20001308
 8003df0:	0801bbf4 	.word	0x0801bbf4
 8003df4:	20001588 	.word	0x20001588
 8003df8:	88888889 	.word	0x88888889
 8003dfc:	0801bc2c 	.word	0x0801bc2c

08003e00 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003e06:	af02      	add	r7, sp, #8
 8003e08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e0c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e10:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003e12:	499b      	ldr	r1, [pc, #620]	@ (8004080 <StartReceiveTask+0x280>)
 8003e14:	2001      	movs	r0, #1
 8003e16:	f001 fca9 	bl	800576c <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003e1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003e1e:	f011 f935 	bl	801508c <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003e22:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e26:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003e2e:	f107 0208 	add.w	r2, r7, #8
 8003e32:	f107 030c 	add.w	r3, r7, #12
 8003e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 fed4 	bl	8005be8 <UART_Receive>
 8003e40:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003e44:	4b8f      	ldr	r3, [pc, #572]	@ (8004084 <StartReceiveTask+0x284>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a8e      	ldr	r2, [pc, #568]	@ (8004084 <StartReceiveTask+0x284>)
 8003e4c:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8004084 <StartReceiveTask+0x284>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b8d      	ldr	r3, [pc, #564]	@ (8004088 <StartReceiveTask+0x288>)
 8003e54:	fba3 1302 	umull	r1, r3, r3, r2
 8003e58:	09db      	lsrs	r3, r3, #7
 8003e5a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d116      	bne.n	8003e96 <StartReceiveTask+0x96>
 8003e68:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003e6c:	f113 0f05 	cmn.w	r3, #5
 8003e70:	d011      	beq.n	8003e96 <StartReceiveTask+0x96>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003e72:	4b84      	ldr	r3, [pc, #528]	@ (8004084 <StartReceiveTask+0x284>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a84      	ldr	r2, [pc, #528]	@ (8004088 <StartReceiveTask+0x288>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	09da      	lsrs	r2, r3, #7
 8003e7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e82:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003e8e:	497f      	ldr	r1, [pc, #508]	@ (800408c <StartReceiveTask+0x28c>)
 8003e90:	2000      	movs	r0, #0
 8003e92:	f001 fc6b 	bl	800576c <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003e96:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f040 80eb 	bne.w	8004076 <StartReceiveTask+0x276>
 8003ea0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ea4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f340 80e3 	ble.w	8004076 <StartReceiveTask+0x276>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003eb0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003eb4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b1e      	cmp	r3, #30
 8003ebc:	dd01      	ble.n	8003ec2 <StartReceiveTask+0xc2>
 8003ebe:	4974      	ldr	r1, [pc, #464]	@ (8004090 <StartReceiveTask+0x290>)
 8003ec0:	e000      	b.n	8003ec4 <StartReceiveTask+0xc4>
 8003ec2:	4974      	ldr	r1, [pc, #464]	@ (8004094 <StartReceiveTask+0x294>)
 8003ec4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ec8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f107 020c 	add.w	r2, r7, #12
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4970      	ldr	r1, [pc, #448]	@ (8004098 <StartReceiveTask+0x298>)
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f001 fc47 	bl	800576c <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003ede:	f107 030c 	add.w	r3, r7, #12
 8003ee2:	496e      	ldr	r1, [pc, #440]	@ (800409c <StartReceiveTask+0x29c>)
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f013 ff25 	bl	8017d34 <strstr>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <StartReceiveTask+0x104>
        LOG_INFO("✅ JOIN CONFIRMED - Network joined successfully");
 8003ef0:	496b      	ldr	r1, [pc, #428]	@ (80040a0 <StartReceiveTask+0x2a0>)
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	f001 fc3a 	bl	800576c <LOGGER_SendFormatted>
        g_join_success_time = HAL_GetTick();  // JOIN 성공 시간 기록
 8003ef8:	f002 faee 	bl	80064d8 <HAL_GetTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4a69      	ldr	r2, [pc, #420]	@ (80040a4 <StartReceiveTask+0x2a4>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e01a      	b.n	8003f3a <StartReceiveTask+0x13a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	4967      	ldr	r1, [pc, #412]	@ (80040a8 <StartReceiveTask+0x2a8>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f013 ff12 	bl	8017d34 <strstr>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <StartReceiveTask+0x120>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003f16:	4965      	ldr	r1, [pc, #404]	@ (80040ac <StartReceiveTask+0x2ac>)
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f001 fc27 	bl	800576c <LOGGER_SendFormatted>
 8003f1e:	e00c      	b.n	8003f3a <StartReceiveTask+0x13a>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd f99d 	bl	8001264 <ResponseHandler_IsTimeResponse>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <StartReceiveTask+0x13a>
        // 시간 응답 처리
        ResponseHandler_ParseTimeResponse(local_buffer);
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fa45 	bl	80013c4 <ResponseHandler_ParseTimeResponse>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003f3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f3e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	f107 030c 	add.w	r3, r7, #12
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4858      	ldr	r0, [pc, #352]	@ (80040b0 <StartReceiveTask+0x2b0>)
 8003f4e:	f013 ff8a 	bl	8017e66 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003f52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f56:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a55      	ldr	r2, [pc, #340]	@ (80040b4 <StartReceiveTask+0x2b4>)
 8003f5e:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
      
      if (is_response_ok(local_buffer)) {
 8003f66:	f107 030c 	add.w	r3, r7, #12
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd f836 	bl	8000fdc <is_response_ok>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <StartReceiveTask+0x17e>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003f7c:	e04b      	b.n	8004016 <StartReceiveTask+0x216>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003f7e:	f107 030c 	add.w	r3, r7, #12
 8003f82:	4946      	ldr	r1, [pc, #280]	@ (800409c <StartReceiveTask+0x29c>)
 8003f84:	4618      	mov	r0, r3
 8003f86:	f013 fed5 	bl	8017d34 <strstr>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <StartReceiveTask+0x198>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003f96:	e03e      	b.n	8004016 <StartReceiveTask+0x216>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003f98:	f107 030c 	add.w	r3, r7, #12
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd f961 	bl	8001264 <ResponseHandler_IsTimeResponse>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <StartReceiveTask+0x1b0>
        // 시간 응답 - LoRa 상태 머신에도 전달해야 함 (상태 전환을 위해)
        is_lora_command_response = true;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003fae:	e032      	b.n	8004016 <StartReceiveTask+0x216>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4940      	ldr	r1, [pc, #256]	@ (80040b8 <StartReceiveTask+0x2b8>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f013 febc 	bl	8017d34 <strstr>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <StartReceiveTask+0x1ca>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8003fc8:	e025      	b.n	8004016 <StartReceiveTask+0x216>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003fca:	f107 030c 	add.w	r3, r7, #12
 8003fce:	4936      	ldr	r1, [pc, #216]	@ (80040a8 <StartReceiveTask+0x2a8>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f013 feaf 	bl	8017d34 <strstr>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <StartReceiveTask+0x1ee>
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	4936      	ldr	r1, [pc, #216]	@ (80040bc <StartReceiveTask+0x2bc>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f013 fea6 	bl	8017d34 <strstr>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <StartReceiveTask+0x1f8>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003fee:	4934      	ldr	r1, [pc, #208]	@ (80040c0 <StartReceiveTask+0x2c0>)
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f001 fbbb 	bl	800576c <LOGGER_SendFormatted>
 8003ff6:	e00e      	b.n	8004016 <StartReceiveTask+0x216>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fd f8db 	bl	80011b8 <ResponseHandler_ParseSendResponse>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        if (response_type != RESPONSE_UNKNOWN) {
 8004008:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800400c:	2b03      	cmp	r3, #3
 800400e:	d002      	beq.n	8004016 <StartReceiveTask+0x216>
          is_lora_command_response = true;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8004016:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01d      	beq.n	800405a <StartReceiveTask+0x25a>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 800401e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004022:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	f107 030c 	add.w	r3, r7, #12
 800402e:	4619      	mov	r1, r3
 8004030:	4824      	ldr	r0, [pc, #144]	@ (80040c4 <StartReceiveTask+0x2c4>)
 8004032:	f013 ff18 	bl	8017e66 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8004036:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800403a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a20      	ldr	r2, [pc, #128]	@ (80040c4 <StartReceiveTask+0x2c4>)
 8004042:	2100      	movs	r1, #0
 8004044:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <StartReceiveTask+0x2c8>)
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	461a      	mov	r2, r3
 8004052:	491e      	ldr	r1, [pc, #120]	@ (80040cc <StartReceiveTask+0x2cc>)
 8004054:	2000      	movs	r0, #0
 8004056:	f001 fb89 	bl	800576c <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 800405a:	f107 030c 	add.w	r3, r7, #12
 800405e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f013 fe3d 	bl	8017ce4 <memset>
      local_bytes_received = 0;
 800406a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800406e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8004076:	2032      	movs	r0, #50	@ 0x32
 8004078:	f011 f808 	bl	801508c <osDelay>
  {
 800407c:	e6d7      	b.n	8003e2e <StartReceiveTask+0x2e>
 800407e:	bf00      	nop
 8004080:	0801bc60 	.word	0x0801bc60
 8004084:	2000158c 	.word	0x2000158c
 8004088:	1b4e81b5 	.word	0x1b4e81b5
 800408c:	0801bc88 	.word	0x0801bc88
 8004090:	0801bcbc 	.word	0x0801bcbc
 8004094:	0801bcc0 	.word	0x0801bcc0
 8004098:	0801bcc4 	.word	0x0801bcc4
 800409c:	0801bce4 	.word	0x0801bce4
 80040a0:	0801bcf0 	.word	0x0801bcf0
 80040a4:	20001578 	.word	0x20001578
 80040a8:	0801bd24 	.word	0x0801bd24
 80040ac:	0801bd30 	.word	0x0801bd30
 80040b0:	200015f4 	.word	0x200015f4
 80040b4:	20001310 	.word	0x20001310
 80040b8:	0801bd58 	.word	0x0801bd58
 80040bc:	0801bd60 	.word	0x0801bd60
 80040c0:	0801bd70 	.word	0x0801bd70
 80040c4:	20001314 	.word	0x20001314
 80040c8:	20001514 	.word	0x20001514
 80040cc:	0801bdac 	.word	0x0801bdac

080040d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a04      	ldr	r2, [pc, #16]	@ (80040f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80040e2:	f002 f9e5 	bl	80064b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40001000 	.word	0x40001000

080040f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040f8:	b672      	cpsid	i
}
 80040fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <Error_Handler+0x8>

08004100 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <MX_DMA_Init+0x48>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	4a0f      	ldr	r2, [pc, #60]	@ (8004148 <MX_DMA_Init+0x48>)
 800410c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004110:	6313      	str	r3, [r2, #48]	@ 0x30
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <MX_DMA_Init+0x48>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2105      	movs	r1, #5
 8004122:	2039      	movs	r0, #57	@ 0x39
 8004124:	f002 fd58 	bl	8006bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004128:	2039      	movs	r0, #57	@ 0x39
 800412a:	f002 fd71 	bl	8006c10 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2105      	movs	r1, #5
 8004132:	2047      	movs	r0, #71	@ 0x47
 8004134:	f002 fd50 	bl	8006bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004138:	2047      	movs	r0, #71	@ 0x47
 800413a:	f002 fd69 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800

0800414c <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8004152:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d133      	bne.n	80041c2 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800415a:	4b1c      	ldr	r3, [pc, #112]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 800415c:	4a1c      	ldr	r2, [pc, #112]	@ (80041d0 <MX_USART6_DMA_Init+0x84>)
 800415e:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004160:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004162:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004166:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004168:	4b18      	ldr	r3, [pc, #96]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800416e:	4b17      	ldr	r3, [pc, #92]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004170:	2200      	movs	r2, #0
 8004172:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004174:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800417a:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800417c:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 800417e:	2200      	movs	r2, #0
 8004180:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004182:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004184:	2200      	movs	r2, #0
 8004186:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8004188:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 800418a:	2200      	movs	r2, #0
 800418c:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800418e:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004190:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004194:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 8004198:	2200      	movs	r2, #0
 800419a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 800419c:	480b      	ldr	r0, [pc, #44]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 800419e:	f002 feb1 	bl	8006f04 <HAL_DMA_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    return;
 80041b2:	e007      	b.n	80041c4 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80041b4:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <MX_USART6_DMA_Init+0x88>)
 80041b6:	4a05      	ldr	r2, [pc, #20]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 80041b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80041ba:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <MX_USART6_DMA_Init+0x80>)
 80041bc:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <MX_USART6_DMA_Init+0x88>)
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
 80041c0:	e000      	b.n	80041c4 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 80041c2:	bf00      	nop
}
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20001518 	.word	0x20001518
 80041d0:	40026428 	.word	0x40026428
 80041d4:	20001240 	.word	0x20001240

080041d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <HAL_MspInit+0x4c>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4a10      	ldr	r2, [pc, #64]	@ (8004224 <HAL_MspInit+0x4c>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <HAL_MspInit+0x4c>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <HAL_MspInit+0x4c>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004224 <HAL_MspInit+0x4c>)
 80041fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004200:	6453      	str	r3, [r2, #68]	@ 0x44
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_MspInit+0x4c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	210f      	movs	r1, #15
 8004212:	f06f 0001 	mvn.w	r0, #1
 8004216:	f002 fcdf 	bl	8006bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800

08004228 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	@ 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 0314 	add.w	r3, r7, #20
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a21      	ldr	r2, [pc, #132]	@ (80042cc <HAL_ADC_MspInit+0xa4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d13c      	bne.n	80042c4 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800424a:	4b21      	ldr	r3, [pc, #132]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	4a20      	ldr	r2, [pc, #128]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004250:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004254:	6453      	str	r3, [r2, #68]	@ 0x44
 8004256:	4b1e      	ldr	r3, [pc, #120]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004262:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	4a1a      	ldr	r2, [pc, #104]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004268:	f043 0320 	orr.w	r3, r3, #32
 800426c:	6313      	str	r3, [r2, #48]	@ 0x30
 800426e:	4b18      	ldr	r3, [pc, #96]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6313      	str	r3, [r2, #48]	@ 0x30
 8004286:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <HAL_ADC_MspInit+0xa8>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8004292:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8004296:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004298:	2303      	movs	r3, #3
 800429a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	480b      	ldr	r0, [pc, #44]	@ (80042d4 <HAL_ADC_MspInit+0xac>)
 80042a8:	f003 ffda 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80042ac:	2301      	movs	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b0:	2303      	movs	r3, #3
 80042b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4619      	mov	r1, r3
 80042be:	4806      	ldr	r0, [pc, #24]	@ (80042d8 <HAL_ADC_MspInit+0xb0>)
 80042c0:	f003 ffce 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80042c4:	bf00      	nop
 80042c6:	3728      	adds	r7, #40	@ 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40012200 	.word	0x40012200
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40020000 	.word	0x40020000

080042dc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <HAL_CRC_MspInit+0x38>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10b      	bne.n	8004306 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <HAL_CRC_MspInit+0x3c>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4a09      	ldr	r2, [pc, #36]	@ (8004318 <HAL_CRC_MspInit+0x3c>)
 80042f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fa:	4b07      	ldr	r3, [pc, #28]	@ (8004318 <HAL_CRC_MspInit+0x3c>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023000 	.word	0x40023000
 8004318:	40023800 	.word	0x40023800

0800431c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	@ 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a50      	ldr	r2, [pc, #320]	@ (800447c <HAL_DCMI_MspInit+0x160>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f040 809a 	bne.w	8004474 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004340:	4b4f      	ldr	r3, [pc, #316]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 8004342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004344:	4a4e      	ldr	r2, [pc, #312]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6353      	str	r3, [r2, #52]	@ 0x34
 800434c:	4b4c      	ldr	r3, [pc, #304]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 800434e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004358:	4b49      	ldr	r3, [pc, #292]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	4a48      	ldr	r2, [pc, #288]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 800435e:	f043 0310 	orr.w	r3, r3, #16
 8004362:	6313      	str	r3, [r2, #48]	@ 0x30
 8004364:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004370:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	4a42      	ldr	r2, [pc, #264]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 8004376:	f043 0308 	orr.w	r3, r3, #8
 800437a:	6313      	str	r3, [r2, #48]	@ 0x30
 800437c:	4b40      	ldr	r3, [pc, #256]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004388:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	4a3c      	ldr	r2, [pc, #240]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 800438e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004392:	6313      	str	r3, [r2, #48]	@ 0x30
 8004394:	4b3a      	ldr	r3, [pc, #232]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043a0:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	4a36      	ldr	r2, [pc, #216]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 80043a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ac:	4b34      	ldr	r3, [pc, #208]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b8:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004480 <HAL_DCMI_MspInit+0x164>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80043d0:	2360      	movs	r3, #96	@ 0x60
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043dc:	2300      	movs	r3, #0
 80043de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043e0:	230d      	movs	r3, #13
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043e8:	4619      	mov	r1, r3
 80043ea:	4826      	ldr	r0, [pc, #152]	@ (8004484 <HAL_DCMI_MspInit+0x168>)
 80043ec:	f003 ff38 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80043f0:	2308      	movs	r3, #8
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f4:	2302      	movs	r3, #2
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fc:	2300      	movs	r3, #0
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004400:	230d      	movs	r3, #13
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004408:	4619      	mov	r1, r3
 800440a:	481f      	ldr	r0, [pc, #124]	@ (8004488 <HAL_DCMI_MspInit+0x16c>)
 800440c:	f003 ff28 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8004410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441e:	2300      	movs	r3, #0
 8004420:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004422:	230d      	movs	r3, #13
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800442a:	4619      	mov	r1, r3
 800442c:	4817      	ldr	r0, [pc, #92]	@ (800448c <HAL_DCMI_MspInit+0x170>)
 800442e:	f003 ff17 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8004432:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	2300      	movs	r3, #0
 8004442:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004444:	230d      	movs	r3, #13
 8004446:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800444c:	4619      	mov	r1, r3
 800444e:	4810      	ldr	r0, [pc, #64]	@ (8004490 <HAL_DCMI_MspInit+0x174>)
 8004450:	f003 ff06 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8004454:	2350      	movs	r3, #80	@ 0x50
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	2302      	movs	r3, #2
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445c:	2300      	movs	r3, #0
 800445e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004460:	2300      	movs	r3, #0
 8004462:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004464:	230d      	movs	r3, #13
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800446c:	4619      	mov	r1, r3
 800446e:	4809      	ldr	r0, [pc, #36]	@ (8004494 <HAL_DCMI_MspInit+0x178>)
 8004470:	f003 fef6 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8004474:	bf00      	nop
 8004476:	3738      	adds	r7, #56	@ 0x38
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	50050000 	.word	0x50050000
 8004480:	40023800 	.word	0x40023800
 8004484:	40021000 	.word	0x40021000
 8004488:	40020c00 	.word	0x40020c00
 800448c:	40021800 	.word	0x40021800
 8004490:	40021c00 	.word	0x40021c00
 8004494:	40020000 	.word	0x40020000

08004498 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0d      	ldr	r2, [pc, #52]	@ (80044dc <HAL_DMA2D_MspInit+0x44>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d113      	bne.n	80044d2 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <HAL_DMA2D_MspInit+0x48>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	4a0c      	ldr	r2, [pc, #48]	@ (80044e0 <HAL_DMA2D_MspInit+0x48>)
 80044b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <HAL_DMA2D_MspInit+0x48>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2105      	movs	r1, #5
 80044c6:	205a      	movs	r0, #90	@ 0x5a
 80044c8:	f002 fb86 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80044cc:	205a      	movs	r0, #90	@ 0x5a
 80044ce:	f002 fb9f 	bl	8006c10 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	4002b000 	.word	0x4002b000
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08e      	sub	sp, #56	@ 0x38
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3f      	ldr	r2, [pc, #252]	@ (8004600 <HAL_ETH_MspInit+0x11c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d178      	bne.n	80045f8 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004506:	4b3f      	ldr	r3, [pc, #252]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	4a3e      	ldr	r2, [pc, #248]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 800450c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004510:	6313      	str	r3, [r2, #48]	@ 0x30
 8004512:	4b3c      	ldr	r3, [pc, #240]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	623b      	str	r3, [r7, #32]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	4b39      	ldr	r3, [pc, #228]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	4a38      	ldr	r2, [pc, #224]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004524:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004528:	6313      	str	r3, [r2, #48]	@ 0x30
 800452a:	4b36      	ldr	r3, [pc, #216]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4b33      	ldr	r3, [pc, #204]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	4a32      	ldr	r2, [pc, #200]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 800453c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004540:	6313      	str	r3, [r2, #48]	@ 0x30
 8004542:	4b30      	ldr	r3, [pc, #192]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800454e:	4b2d      	ldr	r3, [pc, #180]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	4a2c      	ldr	r2, [pc, #176]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004558:	6313      	str	r3, [r2, #48]	@ 0x30
 800455a:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004566:	4b27      	ldr	r3, [pc, #156]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	4a26      	ldr	r2, [pc, #152]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6313      	str	r3, [r2, #48]	@ 0x30
 8004572:	4b24      	ldr	r3, [pc, #144]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457e:	4b21      	ldr	r3, [pc, #132]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	4a20      	ldr	r2, [pc, #128]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6313      	str	r3, [r2, #48]	@ 0x30
 800458a:	4b1e      	ldr	r3, [pc, #120]	@ (8004604 <HAL_ETH_MspInit+0x120>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004596:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a4:	2303      	movs	r3, #3
 80045a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045a8:	230b      	movs	r3, #11
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045b0:	4619      	mov	r1, r3
 80045b2:	4815      	ldr	r0, [pc, #84]	@ (8004608 <HAL_ETH_MspInit+0x124>)
 80045b4:	f003 fe54 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80045b8:	2332      	movs	r3, #50	@ 0x32
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c4:	2303      	movs	r3, #3
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045c8:	230b      	movs	r3, #11
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045d0:	4619      	mov	r1, r3
 80045d2:	480e      	ldr	r0, [pc, #56]	@ (800460c <HAL_ETH_MspInit+0x128>)
 80045d4:	f003 fe44 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80045d8:	2386      	movs	r3, #134	@ 0x86
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	2302      	movs	r3, #2
 80045de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e4:	2303      	movs	r3, #3
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045e8:	230b      	movs	r3, #11
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045f0:	4619      	mov	r1, r3
 80045f2:	4807      	ldr	r0, [pc, #28]	@ (8004610 <HAL_ETH_MspInit+0x12c>)
 80045f4:	f003 fe34 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80045f8:	bf00      	nop
 80045fa:	3738      	adds	r7, #56	@ 0x38
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40028000 	.word	0x40028000
 8004604:	40023800 	.word	0x40023800
 8004608:	40021800 	.word	0x40021800
 800460c:	40020800 	.word	0x40020800
 8004610:	40020000 	.word	0x40020000

08004614 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b0ac      	sub	sp, #176	@ 0xb0
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800462c:	f107 0318 	add.w	r3, r7, #24
 8004630:	2284      	movs	r2, #132	@ 0x84
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f013 fb55 	bl	8017ce4 <memset>
  if(hi2c->Instance==I2C1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a44      	ldr	r2, [pc, #272]	@ (8004750 <HAL_I2C_MspInit+0x13c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d13d      	bne.n	80046c0 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004644:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004648:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800464a:	2300      	movs	r3, #0
 800464c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800464e:	f107 0318 	add.w	r3, r7, #24
 8004652:	4618      	mov	r0, r3
 8004654:	f006 ffac 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800465e:	f7ff fd49 	bl	80040f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004662:	4b3c      	ldr	r3, [pc, #240]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	4a3b      	ldr	r2, [pc, #236]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	6313      	str	r3, [r2, #48]	@ 0x30
 800466e:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800467a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800467e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004682:	2312      	movs	r3, #18
 8004684:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004688:	2301      	movs	r3, #1
 800468a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004694:	2304      	movs	r3, #4
 8004696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800469e:	4619      	mov	r1, r3
 80046a0:	482d      	ldr	r0, [pc, #180]	@ (8004758 <HAL_I2C_MspInit+0x144>)
 80046a2:	f003 fddd 	bl	8008260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 80046ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b2:	4b28      	ldr	r3, [pc, #160]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80046be:	e042      	b.n	8004746 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a25      	ldr	r2, [pc, #148]	@ (800475c <HAL_I2C_MspInit+0x148>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d13d      	bne.n	8004746 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80046ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046d6:	f107 0318 	add.w	r3, r7, #24
 80046da:	4618      	mov	r0, r3
 80046dc:	f006 ff68 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80046e6:	f7ff fd05 	bl	80040f4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 80046f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f6:	4b17      	ldr	r3, [pc, #92]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004702:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800470a:	2312      	movs	r3, #18
 800470c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004710:	2301      	movs	r3, #1
 8004712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004716:	2303      	movs	r3, #3
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800471c:	2304      	movs	r3, #4
 800471e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004722:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004726:	4619      	mov	r1, r3
 8004728:	480d      	ldr	r0, [pc, #52]	@ (8004760 <HAL_I2C_MspInit+0x14c>)
 800472a:	f003 fd99 	bl	8008260 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800472e:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a08      	ldr	r2, [pc, #32]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 8004734:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_I2C_MspInit+0x140>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
}
 8004746:	bf00      	nop
 8004748:	37b0      	adds	r7, #176	@ 0xb0
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40005400 	.word	0x40005400
 8004754:	40023800 	.word	0x40023800
 8004758:	40020400 	.word	0x40020400
 800475c:	40005c00 	.word	0x40005c00
 8004760:	40021c00 	.word	0x40021c00

08004764 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	@ 0x38
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a55      	ldr	r2, [pc, #340]	@ (80048d8 <HAL_LTDC_MspInit+0x174>)
 8004782:	4293      	cmp	r3, r2
 8004784:	f040 80a3 	bne.w	80048ce <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004788:	4b54      	ldr	r3, [pc, #336]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	4a53      	ldr	r2, [pc, #332]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 800478e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004792:	6453      	str	r3, [r2, #68]	@ 0x44
 8004794:	4b51      	ldr	r3, [pc, #324]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047a0:	4b4e      	ldr	r3, [pc, #312]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a4:	4a4d      	ldr	r2, [pc, #308]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047a6:	f043 0310 	orr.w	r3, r3, #16
 80047aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ac:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80047b8:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	4a47      	ldr	r2, [pc, #284]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047c4:	4b45      	ldr	r3, [pc, #276]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80047d0:	4b42      	ldr	r3, [pc, #264]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	4a41      	ldr	r2, [pc, #260]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047da:	6313      	str	r3, [r2, #48]	@ 0x30
 80047dc:	4b3f      	ldr	r3, [pc, #252]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047e8:	4b3c      	ldr	r3, [pc, #240]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ec:	4a3b      	ldr	r2, [pc, #236]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f4:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004800:	4b36      	ldr	r3, [pc, #216]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	4a35      	ldr	r2, [pc, #212]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800480a:	6313      	str	r3, [r2, #48]	@ 0x30
 800480c:	4b33      	ldr	r3, [pc, #204]	@ (80048dc <HAL_LTDC_MspInit+0x178>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004818:	2310      	movs	r3, #16
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481c:	2302      	movs	r3, #2
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	2300      	movs	r3, #0
 8004826:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004828:	230e      	movs	r3, #14
 800482a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800482c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004830:	4619      	mov	r1, r3
 8004832:	482b      	ldr	r0, [pc, #172]	@ (80048e0 <HAL_LTDC_MspInit+0x17c>)
 8004834:	f003 fd14 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004838:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483e:	2302      	movs	r3, #2
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	2300      	movs	r3, #0
 8004848:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800484a:	230e      	movs	r3, #14
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800484e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004852:	4619      	mov	r1, r3
 8004854:	4823      	ldr	r0, [pc, #140]	@ (80048e4 <HAL_LTDC_MspInit+0x180>)
 8004856:	f003 fd03 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800485a:	23f7      	movs	r3, #247	@ 0xf7
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485e:	2302      	movs	r3, #2
 8004860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	2300      	movs	r3, #0
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004866:	2300      	movs	r3, #0
 8004868:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800486a:	230e      	movs	r3, #14
 800486c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800486e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004872:	4619      	mov	r1, r3
 8004874:	481c      	ldr	r0, [pc, #112]	@ (80048e8 <HAL_LTDC_MspInit+0x184>)
 8004876:	f003 fcf3 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800487a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	2300      	movs	r3, #0
 800488a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800488c:	2309      	movs	r3, #9
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004894:	4619      	mov	r1, r3
 8004896:	4815      	ldr	r0, [pc, #84]	@ (80048ec <HAL_LTDC_MspInit+0x188>)
 8004898:	f003 fce2 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800489c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	2302      	movs	r3, #2
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048aa:	2300      	movs	r3, #0
 80048ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80048ae:	230e      	movs	r3, #14
 80048b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048b6:	4619      	mov	r1, r3
 80048b8:	480d      	ldr	r0, [pc, #52]	@ (80048f0 <HAL_LTDC_MspInit+0x18c>)
 80048ba:	f003 fcd1 	bl	8008260 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2105      	movs	r1, #5
 80048c2:	2058      	movs	r0, #88	@ 0x58
 80048c4:	f002 f988 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80048c8:	2058      	movs	r0, #88	@ 0x58
 80048ca:	f002 f9a1 	bl	8006c10 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80048ce:	bf00      	nop
 80048d0:	3738      	adds	r7, #56	@ 0x38
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40016800 	.word	0x40016800
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40022400 	.word	0x40022400
 80048e8:	40022800 	.word	0x40022800
 80048ec:	40021800 	.word	0x40021800
 80048f0:	40022000 	.word	0x40022000

080048f4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	@ 0x30
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3b      	ldr	r2, [pc, #236]	@ (8004a00 <HAL_QSPI_MspInit+0x10c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d170      	bne.n	80049f8 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004916:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	4a3a      	ldr	r2, [pc, #232]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	6393      	str	r3, [r2, #56]	@ 0x38
 8004922:	4b38      	ldr	r3, [pc, #224]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800492e:	4b35      	ldr	r3, [pc, #212]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	4a34      	ldr	r2, [pc, #208]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004934:	f043 0310 	orr.w	r3, r3, #16
 8004938:	6313      	str	r3, [r2, #48]	@ 0x30
 800493a:	4b32      	ldr	r3, [pc, #200]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004946:	4b2f      	ldr	r3, [pc, #188]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	6313      	str	r3, [r2, #48]	@ 0x30
 8004952:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800495e:	4b29      	ldr	r3, [pc, #164]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	4a28      	ldr	r2, [pc, #160]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 8004964:	f043 0308 	orr.w	r3, r3, #8
 8004968:	6313      	str	r3, [r2, #48]	@ 0x30
 800496a:	4b26      	ldr	r3, [pc, #152]	@ (8004a04 <HAL_QSPI_MspInit+0x110>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004976:	2304      	movs	r3, #4
 8004978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497a:	2302      	movs	r3, #2
 800497c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004982:	2303      	movs	r3, #3
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004986:	2309      	movs	r3, #9
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800498a:	f107 031c 	add.w	r3, r7, #28
 800498e:	4619      	mov	r1, r3
 8004990:	481d      	ldr	r0, [pc, #116]	@ (8004a08 <HAL_QSPI_MspInit+0x114>)
 8004992:	f003 fc65 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004996:	2340      	movs	r3, #64	@ 0x40
 8004998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499a:	2302      	movs	r3, #2
 800499c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a2:	2303      	movs	r3, #3
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80049a6:	230a      	movs	r3, #10
 80049a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80049aa:	f107 031c 	add.w	r3, r7, #28
 80049ae:	4619      	mov	r1, r3
 80049b0:	4816      	ldr	r0, [pc, #88]	@ (8004a0c <HAL_QSPI_MspInit+0x118>)
 80049b2:	f003 fc55 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049b6:	2304      	movs	r3, #4
 80049b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ba:	2302      	movs	r3, #2
 80049bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c2:	2303      	movs	r3, #3
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049c6:	2309      	movs	r3, #9
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ca:	f107 031c 	add.w	r3, r7, #28
 80049ce:	4619      	mov	r1, r3
 80049d0:	480e      	ldr	r0, [pc, #56]	@ (8004a0c <HAL_QSPI_MspInit+0x118>)
 80049d2:	f003 fc45 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80049d6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80049da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049dc:	2302      	movs	r3, #2
 80049de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e4:	2303      	movs	r3, #3
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049e8:	2309      	movs	r3, #9
 80049ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ec:	f107 031c 	add.w	r3, r7, #28
 80049f0:	4619      	mov	r1, r3
 80049f2:	4807      	ldr	r0, [pc, #28]	@ (8004a10 <HAL_QSPI_MspInit+0x11c>)
 80049f4:	f003 fc34 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80049f8:	bf00      	nop
 80049fa:	3730      	adds	r7, #48	@ 0x30
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	a0001000 	.word	0xa0001000
 8004a04:	40023800 	.word	0x40023800
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40020400 	.word	0x40020400
 8004a10:	40020c00 	.word	0x40020c00

08004a14 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b0a4      	sub	sp, #144	@ 0x90
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	2284      	movs	r2, #132	@ 0x84
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f013 f95d 	bl	8017ce4 <memset>
  if(hrtc->Instance==RTC)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a68 <HAL_RTC_MspInit+0x54>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d114      	bne.n	8004a5e <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a34:	2320      	movs	r3, #32
 8004a36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a3e:	f107 030c 	add.w	r3, r7, #12
 8004a42:	4618      	mov	r0, r3
 8004a44:	f006 fdb4 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004a4e:	f7ff fb51 	bl	80040f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <HAL_RTC_MspInit+0x58>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	4a05      	ldr	r2, [pc, #20]	@ (8004a6c <HAL_RTC_MspInit+0x58>)
 8004a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5c:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004a5e:	bf00      	nop
 8004a60:	3790      	adds	r7, #144	@ 0x90
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40002800 	.word	0x40002800
 8004a6c:	40023800 	.word	0x40023800

08004a70 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	@ 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	60da      	str	r2, [r3, #12]
 8004a86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	@ (8004b24 <HAL_SD_MspInit+0xb4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d144      	bne.n	8004b1c <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004a92:	4b25      	ldr	r3, [pc, #148]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	4a24      	ldr	r2, [pc, #144]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004a98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a9e:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ac2:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	4a18      	ldr	r2, [pc, #96]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ace:	4b16      	ldr	r3, [pc, #88]	@ (8004b28 <HAL_SD_MspInit+0xb8>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004ada:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004ade:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004aec:	230c      	movs	r3, #12
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004af0:	f107 0314 	add.w	r3, r7, #20
 8004af4:	4619      	mov	r1, r3
 8004af6:	480d      	ldr	r0, [pc, #52]	@ (8004b2c <HAL_SD_MspInit+0xbc>)
 8004af8:	f003 fbb2 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004afc:	2304      	movs	r3, #4
 8004afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b00:	2302      	movs	r3, #2
 8004b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004b0c:	230c      	movs	r3, #12
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	4619      	mov	r1, r3
 8004b16:	4806      	ldr	r0, [pc, #24]	@ (8004b30 <HAL_SD_MspInit+0xc0>)
 8004b18:	f003 fba2 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004b1c:	bf00      	nop
 8004b1e:	3728      	adds	r7, #40	@ 0x28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	40020c00 	.word	0x40020c00

08004b34 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b0aa      	sub	sp, #168	@ 0xa8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b4c:	f107 0310 	add.w	r3, r7, #16
 8004b50:	2284      	movs	r2, #132	@ 0x84
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f013 f8c5 	bl	8017ce4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004b62:	d143      	bne.n	8004bec <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004b6a:	2364      	movs	r3, #100	@ 0x64
 8004b6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004b72:	2302      	movs	r3, #2
 8004b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004b76:	2302      	movs	r3, #2
 8004b78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b7e:	f107 0310 	add.w	r3, r7, #16
 8004b82:	4618      	mov	r0, r3
 8004b84:	f006 fd14 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004b8e:	f7ff fab1 	bl	80040f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004b92:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004baa:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bae:	4a11      	ldr	r2, [pc, #68]	@ (8004bf4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf4 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004bda:	2308      	movs	r3, #8
 8004bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004be0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004be4:	4619      	mov	r1, r3
 8004be6:	4804      	ldr	r0, [pc, #16]	@ (8004bf8 <HAL_SPDIFRX_MspInit+0xc4>)
 8004be8:	f003 fb3a 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004bec:	bf00      	nop
 8004bee:	37a8      	adds	r7, #168	@ 0xa8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40020c00 	.word	0x40020c00

08004bfc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <HAL_SPI_MspInit+0xb4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d144      	bne.n	8004ca8 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c1e:	4b25      	ldr	r3, [pc, #148]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	4a24      	ldr	r2, [pc, #144]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c2a:	4b22      	ldr	r3, [pc, #136]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c36:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c42:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4e:	4b19      	ldr	r3, [pc, #100]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	4a18      	ldr	r2, [pc, #96]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5a:	4b16      	ldr	r3, [pc, #88]	@ (8004cb4 <HAL_SPI_MspInit+0xb8>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004c66:	2302      	movs	r3, #2
 8004c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c76:	2305      	movs	r3, #5
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004c7a:	f107 0314 	add.w	r3, r7, #20
 8004c7e:	4619      	mov	r1, r3
 8004c80:	480d      	ldr	r0, [pc, #52]	@ (8004cb8 <HAL_SPI_MspInit+0xbc>)
 8004c82:	f003 faed 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004c86:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c94:	2300      	movs	r3, #0
 8004c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c98:	2305      	movs	r3, #5
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4806      	ldr	r0, [pc, #24]	@ (8004cbc <HAL_SPI_MspInit+0xc0>)
 8004ca4:	f003 fadc 	bl	8008260 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004ca8:	bf00      	nop
 8004caa:	3728      	adds	r7, #40	@ 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40003800 	.word	0x40003800
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40022000 	.word	0x40022000
 8004cbc:	40020400 	.word	0x40020400

08004cc0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	@ 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d88 <HAL_TIM_Base_MspInit+0xc8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10c      	bne.n	8004cec <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cde:	4b2b      	ldr	r3, [pc, #172]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004cea:	e046      	b.n	8004d7a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cf6:	4b25      	ldr	r3, [pc, #148]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	4a24      	ldr	r2, [pc, #144]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d02:	4b22      	ldr	r3, [pc, #136]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
}
 8004d0e:	e034      	b.n	8004d7a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <HAL_TIM_Base_MspInit+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d10c      	bne.n	8004d34 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d26:	4b19      	ldr	r3, [pc, #100]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]
}
 8004d32:	e022      	b.n	8004d7a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a16      	ldr	r2, [pc, #88]	@ (8004d94 <HAL_TIM_Base_MspInit+0xd4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d3e:	4b13      	ldr	r3, [pc, #76]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	4a12      	ldr	r2, [pc, #72]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d4a:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]
}
 8004d56:	e010      	b.n	8004d7a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d98 <HAL_TIM_Base_MspInit+0xd8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10b      	bne.n	8004d7a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d62:	4b0a      	ldr	r3, [pc, #40]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	4a09      	ldr	r2, [pc, #36]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d6e:	4b07      	ldr	r3, [pc, #28]	@ (8004d8c <HAL_TIM_Base_MspInit+0xcc>)
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	3724      	adds	r7, #36	@ 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40010400 	.word	0x40010400

08004d9c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd4 <HAL_TIM_PWM_MspInit+0x38>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10b      	bne.n	8004dc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004dae:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	4a09      	ldr	r2, [pc, #36]	@ (8004dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dba:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40001800 	.word	0x40001800
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	@ 0x30
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de4:	f107 031c 	add.w	r3, r7, #28
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	605a      	str	r2, [r3, #4]
 8004dee:	609a      	str	r2, [r3, #8]
 8004df0:	60da      	str	r2, [r3, #12]
 8004df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a56      	ldr	r2, [pc, #344]	@ (8004f54 <HAL_TIM_MspPostInit+0x178>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d11d      	bne.n	8004e3a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfe:	4b56      	ldr	r3, [pc, #344]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e02:	4a55      	ldr	r2, [pc, #340]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e0a:	4b53      	ldr	r3, [pc, #332]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e24:	2300      	movs	r3, #0
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004e2c:	f107 031c 	add.w	r3, r7, #28
 8004e30:	4619      	mov	r1, r3
 8004e32:	484a      	ldr	r0, [pc, #296]	@ (8004f5c <HAL_TIM_MspPostInit+0x180>)
 8004e34:	f003 fa14 	bl	8008260 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004e38:	e087      	b.n	8004f4a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e42:	d11d      	bne.n	8004e80 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e44:	4b44      	ldr	r3, [pc, #272]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	4a43      	ldr	r2, [pc, #268]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e50:	4b41      	ldr	r3, [pc, #260]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e62:	2302      	movs	r3, #2
 8004e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004e72:	f107 031c 	add.w	r3, r7, #28
 8004e76:	4619      	mov	r1, r3
 8004e78:	4838      	ldr	r0, [pc, #224]	@ (8004f5c <HAL_TIM_MspPostInit+0x180>)
 8004e7a:	f003 f9f1 	bl	8008260 <HAL_GPIO_Init>
}
 8004e7e:	e064      	b.n	8004f4a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a36      	ldr	r2, [pc, #216]	@ (8004f60 <HAL_TIM_MspPostInit+0x184>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d11c      	bne.n	8004ec4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8a:	4b33      	ldr	r3, [pc, #204]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	4a32      	ldr	r2, [pc, #200]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e96:	4b30      	ldr	r3, [pc, #192]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004ea2:	2310      	movs	r3, #16
 8004ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004eb6:	f107 031c 	add.w	r3, r7, #28
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4829      	ldr	r0, [pc, #164]	@ (8004f64 <HAL_TIM_MspPostInit+0x188>)
 8004ebe:	f003 f9cf 	bl	8008260 <HAL_GPIO_Init>
}
 8004ec2:	e042      	b.n	8004f4a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a27      	ldr	r2, [pc, #156]	@ (8004f68 <HAL_TIM_MspPostInit+0x18c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d11c      	bne.n	8004f08 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004ece:	4b22      	ldr	r3, [pc, #136]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	4a21      	ldr	r2, [pc, #132]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eda:	4b1f      	ldr	r3, [pc, #124]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eea:	2302      	movs	r3, #2
 8004eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004efa:	f107 031c 	add.w	r3, r7, #28
 8004efe:	4619      	mov	r1, r3
 8004f00:	481a      	ldr	r0, [pc, #104]	@ (8004f6c <HAL_TIM_MspPostInit+0x190>)
 8004f02:	f003 f9ad 	bl	8008260 <HAL_GPIO_Init>
}
 8004f06:	e020      	b.n	8004f4a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a18      	ldr	r2, [pc, #96]	@ (8004f70 <HAL_TIM_MspPostInit+0x194>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d11b      	bne.n	8004f4a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f12:	4b11      	ldr	r3, [pc, #68]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	4a10      	ldr	r2, [pc, #64]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_TIM_MspPostInit+0x17c>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004f2a:	2340      	movs	r3, #64	@ 0x40
 8004f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f36:	2300      	movs	r3, #0
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004f3a:	2309      	movs	r3, #9
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004f3e:	f107 031c 	add.w	r3, r7, #28
 8004f42:	4619      	mov	r1, r3
 8004f44:	480b      	ldr	r0, [pc, #44]	@ (8004f74 <HAL_TIM_MspPostInit+0x198>)
 8004f46:	f003 f98b 	bl	8008260 <HAL_GPIO_Init>
}
 8004f4a:	bf00      	nop
 8004f4c:	3730      	adds	r7, #48	@ 0x30
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40020000 	.word	0x40020000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40020400 	.word	0x40020400
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40022000 	.word	0x40022000
 8004f70:	40001800 	.word	0x40001800
 8004f74:	40021c00 	.word	0x40021c00

08004f78 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b0ae      	sub	sp, #184	@ 0xb8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f90:	f107 0320 	add.w	r3, r7, #32
 8004f94:	2284      	movs	r2, #132	@ 0x84
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f012 fea3 	bl	8017ce4 <memset>
  if(huart->Instance==USART1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a53      	ldr	r2, [pc, #332]	@ (80050f0 <HAL_UART_MspInit+0x178>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d15d      	bne.n	8005064 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004fa8:	2340      	movs	r3, #64	@ 0x40
 8004faa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004fac:	2300      	movs	r3, #0
 8004fae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fb0:	f107 0320 	add.w	r3, r7, #32
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f006 fafb 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004fc0:	f7ff f898 	bl	80040f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004fca:	f043 0310 	orr.w	r3, r3, #16
 8004fce:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fd0:	4b48      	ldr	r3, [pc, #288]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fdc:	4b45      	ldr	r3, [pc, #276]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe0:	4a44      	ldr	r2, [pc, #272]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004fe2:	f043 0302 	orr.w	r3, r3, #2
 8004fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fe8:	4b42      	ldr	r3, [pc, #264]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005000:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800500c:	2380      	movs	r3, #128	@ 0x80
 800500e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005012:	2302      	movs	r3, #2
 8005014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005024:	2307      	movs	r3, #7
 8005026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800502a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800502e:	4619      	mov	r1, r3
 8005030:	4831      	ldr	r0, [pc, #196]	@ (80050f8 <HAL_UART_MspInit+0x180>)
 8005032:	f003 f915 	bl	8008260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800503a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503e:	2302      	movs	r3, #2
 8005040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005044:	2300      	movs	r3, #0
 8005046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005050:	2307      	movs	r3, #7
 8005052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005056:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800505a:	4619      	mov	r1, r3
 800505c:	4827      	ldr	r0, [pc, #156]	@ (80050fc <HAL_UART_MspInit+0x184>)
 800505e:	f003 f8ff 	bl	8008260 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8005062:	e040      	b.n	80050e6 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a25      	ldr	r2, [pc, #148]	@ (8005100 <HAL_UART_MspInit+0x188>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d13b      	bne.n	80050e6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800506e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005072:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005074:	2300      	movs	r3, #0
 8005076:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005078:	f107 0320 	add.w	r3, r7, #32
 800507c:	4618      	mov	r0, r3
 800507e:	f006 fa97 	bl	800b5b0 <HAL_RCCEx_PeriphCLKConfig>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8005088:	f7ff f834 	bl	80040f4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800508c:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 800508e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005090:	4a18      	ldr	r2, [pc, #96]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	6453      	str	r3, [r2, #68]	@ 0x44
 8005098:	4b16      	ldr	r3, [pc, #88]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 800509a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a4:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	4a12      	ldr	r2, [pc, #72]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80050b0:	4b10      	ldr	r3, [pc, #64]	@ (80050f4 <HAL_UART_MspInit+0x17c>)
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80050bc:	23c0      	movs	r3, #192	@ 0xc0
 80050be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ce:	2303      	movs	r3, #3
 80050d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80050d4:	2308      	movs	r3, #8
 80050d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80050de:	4619      	mov	r1, r3
 80050e0:	4808      	ldr	r0, [pc, #32]	@ (8005104 <HAL_UART_MspInit+0x18c>)
 80050e2:	f003 f8bd 	bl	8008260 <HAL_GPIO_Init>
}
 80050e6:	bf00      	nop
 80050e8:	37b8      	adds	r7, #184	@ 0xb8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40011000 	.word	0x40011000
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40020000 	.word	0x40020000
 8005100:	40011400 	.word	0x40011400
 8005104:	40020800 	.word	0x40020800

08005108 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800511c:	4b3a      	ldr	r3, [pc, #232]	@ (8005208 <HAL_FMC_MspInit+0x100>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d16d      	bne.n	8005200 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005124:	4b38      	ldr	r3, [pc, #224]	@ (8005208 <HAL_FMC_MspInit+0x100>)
 8005126:	2201      	movs	r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800512a:	4b38      	ldr	r3, [pc, #224]	@ (800520c <HAL_FMC_MspInit+0x104>)
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	4a37      	ldr	r2, [pc, #220]	@ (800520c <HAL_FMC_MspInit+0x104>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6393      	str	r3, [r2, #56]	@ 0x38
 8005136:	4b35      	ldr	r3, [pc, #212]	@ (800520c <HAL_FMC_MspInit+0x104>)
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005142:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005146:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005150:	2303      	movs	r3, #3
 8005152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005154:	230c      	movs	r3, #12
 8005156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	4619      	mov	r1, r3
 800515c:	482c      	ldr	r0, [pc, #176]	@ (8005210 <HAL_FMC_MspInit+0x108>)
 800515e:	f003 f87f 	bl	8008260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005162:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005166:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005168:	2302      	movs	r3, #2
 800516a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005170:	2303      	movs	r3, #3
 8005172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005174:	230c      	movs	r3, #12
 8005176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4825      	ldr	r0, [pc, #148]	@ (8005214 <HAL_FMC_MspInit+0x10c>)
 800517e:	f003 f86f 	bl	8008260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005182:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005186:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005188:	2302      	movs	r3, #2
 800518a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005190:	2303      	movs	r3, #3
 8005192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005194:	230c      	movs	r3, #12
 8005196:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	4619      	mov	r1, r3
 800519c:	481e      	ldr	r0, [pc, #120]	@ (8005218 <HAL_FMC_MspInit+0x110>)
 800519e:	f003 f85f 	bl	8008260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80051a2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80051a6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b0:	2303      	movs	r3, #3
 80051b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051b4:	230c      	movs	r3, #12
 80051b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4817      	ldr	r0, [pc, #92]	@ (800521c <HAL_FMC_MspInit+0x114>)
 80051be:	f003 f84f 	bl	8008260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80051c2:	2328      	movs	r3, #40	@ 0x28
 80051c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c6:	2302      	movs	r3, #2
 80051c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ce:	2303      	movs	r3, #3
 80051d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051d2:	230c      	movs	r3, #12
 80051d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80051d6:	1d3b      	adds	r3, r7, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4811      	ldr	r0, [pc, #68]	@ (8005220 <HAL_FMC_MspInit+0x118>)
 80051dc:	f003 f840 	bl	8008260 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80051e0:	2308      	movs	r3, #8
 80051e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e4:	2302      	movs	r3, #2
 80051e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ec:	2303      	movs	r3, #3
 80051ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051f0:	230c      	movs	r3, #12
 80051f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	480a      	ldr	r0, [pc, #40]	@ (8005224 <HAL_FMC_MspInit+0x11c>)
 80051fa:	f003 f831 	bl	8008260 <HAL_GPIO_Init>
 80051fe:	e000      	b.n	8005202 <HAL_FMC_MspInit+0xfa>
    return;
 8005200:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20001590 	.word	0x20001590
 800520c:	40023800 	.word	0x40023800
 8005210:	40021000 	.word	0x40021000
 8005214:	40021800 	.word	0x40021800
 8005218:	40020c00 	.word	0x40020c00
 800521c:	40021400 	.word	0x40021400
 8005220:	40021c00 	.word	0x40021c00
 8005224:	40020800 	.word	0x40020800

08005228 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005230:	f7ff ff6a 	bl	8005108 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	@ 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2b      	ldr	r2, [pc, #172]	@ (80052f8 <HAL_SAI_MspInit+0xbc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d124      	bne.n	8005298 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800524e:	4b2b      	ldr	r3, [pc, #172]	@ (80052fc <HAL_SAI_MspInit+0xc0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005256:	4b2a      	ldr	r3, [pc, #168]	@ (8005300 <HAL_SAI_MspInit+0xc4>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525a:	4a29      	ldr	r2, [pc, #164]	@ (8005300 <HAL_SAI_MspInit+0xc4>)
 800525c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005260:	6453      	str	r3, [r2, #68]	@ 0x44
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_SAI_MspInit+0xc4>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800526e:	4b23      	ldr	r3, [pc, #140]	@ (80052fc <HAL_SAI_MspInit+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <HAL_SAI_MspInit+0xc0>)
 8005276:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8005278:	23f0      	movs	r3, #240	@ 0xf0
 800527a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	2302      	movs	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005284:	2300      	movs	r3, #0
 8005286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005288:	230a      	movs	r3, #10
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800528c:	f107 0314 	add.w	r3, r7, #20
 8005290:	4619      	mov	r1, r3
 8005292:	481c      	ldr	r0, [pc, #112]	@ (8005304 <HAL_SAI_MspInit+0xc8>)
 8005294:	f002 ffe4 	bl	8008260 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1a      	ldr	r2, [pc, #104]	@ (8005308 <HAL_SAI_MspInit+0xcc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d125      	bne.n	80052ee <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80052a2:	4b16      	ldr	r3, [pc, #88]	@ (80052fc <HAL_SAI_MspInit+0xc0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80052aa:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <HAL_SAI_MspInit+0xc4>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	4a14      	ldr	r2, [pc, #80]	@ (8005300 <HAL_SAI_MspInit+0xc4>)
 80052b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052b6:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <HAL_SAI_MspInit+0xc4>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80052c2:	4b0e      	ldr	r3, [pc, #56]	@ (80052fc <HAL_SAI_MspInit+0xc0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a0c      	ldr	r2, [pc, #48]	@ (80052fc <HAL_SAI_MspInit+0xc0>)
 80052ca:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80052cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d2:	2302      	movs	r3, #2
 80052d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052da:	2300      	movs	r3, #0
 80052dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80052de:	230a      	movs	r3, #10
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	4619      	mov	r1, r3
 80052e8:	4808      	ldr	r0, [pc, #32]	@ (800530c <HAL_SAI_MspInit+0xd0>)
 80052ea:	f002 ffb9 	bl	8008260 <HAL_GPIO_Init>

    }
}
 80052ee:	bf00      	nop
 80052f0:	3728      	adds	r7, #40	@ 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40015c04 	.word	0x40015c04
 80052fc:	20001594 	.word	0x20001594
 8005300:	40023800 	.word	0x40023800
 8005304:	40022000 	.word	0x40022000
 8005308:	40015c24 	.word	0x40015c24
 800530c:	40021800 	.word	0x40021800

08005310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	@ 0x38
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005320:	4b33      	ldr	r3, [pc, #204]	@ (80053f0 <HAL_InitTick+0xe0>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	4a32      	ldr	r2, [pc, #200]	@ (80053f0 <HAL_InitTick+0xe0>)
 8005326:	f043 0310 	orr.w	r3, r3, #16
 800532a:	6413      	str	r3, [r2, #64]	@ 0x40
 800532c:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <HAL_InitTick+0xe0>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005338:	f107 0210 	add.w	r2, r7, #16
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f006 f902 	bl	800b54c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005352:	f006 f8d3 	bl	800b4fc <HAL_RCC_GetPCLK1Freq>
 8005356:	6378      	str	r0, [r7, #52]	@ 0x34
 8005358:	e004      	b.n	8005364 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800535a:	f006 f8cf 	bl	800b4fc <HAL_RCC_GetPCLK1Freq>
 800535e:	4603      	mov	r3, r0
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	4a23      	ldr	r2, [pc, #140]	@ (80053f4 <HAL_InitTick+0xe4>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	0c9b      	lsrs	r3, r3, #18
 800536e:	3b01      	subs	r3, #1
 8005370:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005372:	4b21      	ldr	r3, [pc, #132]	@ (80053f8 <HAL_InitTick+0xe8>)
 8005374:	4a21      	ldr	r2, [pc, #132]	@ (80053fc <HAL_InitTick+0xec>)
 8005376:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005378:	4b1f      	ldr	r3, [pc, #124]	@ (80053f8 <HAL_InitTick+0xe8>)
 800537a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800537e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005380:	4a1d      	ldr	r2, [pc, #116]	@ (80053f8 <HAL_InitTick+0xe8>)
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005386:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <HAL_InitTick+0xe8>)
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800538c:	4b1a      	ldr	r3, [pc, #104]	@ (80053f8 <HAL_InitTick+0xe8>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005392:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <HAL_InitTick+0xe8>)
 8005394:	2200      	movs	r2, #0
 8005396:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005398:	4817      	ldr	r0, [pc, #92]	@ (80053f8 <HAL_InitTick+0xe8>)
 800539a:	f008 fe88 	bl	800e0ae <HAL_TIM_Base_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80053a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11b      	bne.n	80053e4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053ac:	4812      	ldr	r0, [pc, #72]	@ (80053f8 <HAL_InitTick+0xe8>)
 80053ae:	f008 fed5 	bl	800e15c <HAL_TIM_Base_Start_IT>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80053b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d111      	bne.n	80053e4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053c0:	2036      	movs	r0, #54	@ 0x36
 80053c2:	f001 fc25 	bl	8006c10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b0f      	cmp	r3, #15
 80053ca:	d808      	bhi.n	80053de <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053cc:	2200      	movs	r2, #0
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	2036      	movs	r0, #54	@ 0x36
 80053d2:	f001 fc01 	bl	8006bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005400 <HAL_InitTick+0xf0>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e002      	b.n	80053e4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80053e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3738      	adds	r7, #56	@ 0x38
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40023800 	.word	0x40023800
 80053f4:	431bde83 	.word	0x431bde83
 80053f8:	20001598 	.word	0x20001598
 80053fc:	40001000 	.word	0x40001000
 8005400:	20000070 	.word	0x20000070

08005404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <NMI_Handler+0x4>

0800540c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <HardFault_Handler+0x4>

08005414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <MemManage_Handler+0x4>

0800541c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <BusFault_Handler+0x4>

08005424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <UsageFault_Handler+0x4>

0800542c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005440:	4802      	ldr	r0, [pc, #8]	@ (800544c <TIM6_DAC_IRQHandler+0x10>)
 8005442:	f008 ff5a 	bl	800e2fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20001598 	.word	0x20001598

08005450 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005454:	4802      	ldr	r0, [pc, #8]	@ (8005460 <OTG_FS_IRQHandler+0x10>)
 8005456:	f003 f8e0 	bl	800861a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20011da4 	.word	0x20011da4

08005464 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005468:	4802      	ldr	r0, [pc, #8]	@ (8005474 <LTDC_IRQHandler+0x10>)
 800546a:	f005 f84d 	bl	800a508 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000ca0 	.word	0x20000ca0

08005478 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800547c:	4802      	ldr	r0, [pc, #8]	@ (8005488 <DMA2D_IRQHandler+0x10>)
 800547e:	f002 f9ff 	bl	8007880 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000b08 	.word	0x20000b08

0800548c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005490:	4802      	ldr	r0, [pc, #8]	@ (800549c <DMA2_Stream1_IRQHandler+0x10>)
 8005492:	f001 ff35 	bl	8007300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20001518 	.word	0x20001518

080054a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80054a4:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <USART6_IRQHandler+0x2c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d106      	bne.n	80054c0 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 80054b2:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <USART6_IRQHandler+0x2c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2210      	movs	r2, #16
 80054b8:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 80054ba:	4804      	ldr	r0, [pc, #16]	@ (80054cc <USART6_IRQHandler+0x2c>)
 80054bc:	f000 ff2e 	bl	800631c <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80054c0:	4802      	ldr	r0, [pc, #8]	@ (80054cc <USART6_IRQHandler+0x2c>)
 80054c2:	f00a f965 	bl	800f790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80054c6:	bf00      	nop
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20001240 	.word	0x20001240

080054d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e00a      	b.n	80054f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054e2:	f3af 8000 	nop.w
 80054e6:	4601      	mov	r1, r0
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	60ba      	str	r2, [r7, #8]
 80054ee:	b2ca      	uxtb	r2, r1
 80054f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	3301      	adds	r3, #1
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	dbf0      	blt.n	80054e2 <_read+0x12>
  }

  return len;
 8005500:	687b      	ldr	r3, [r7, #4]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e009      	b.n	8005530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	60ba      	str	r2, [r7, #8]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3301      	adds	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	dbf1      	blt.n	800551c <_write+0x12>
  }
  return len;
 8005538:	687b      	ldr	r3, [r7, #4]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <_close>:

int _close(int file)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800556a:	605a      	str	r2, [r3, #4]
  return 0;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <_isatty>:

int _isatty(int file)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005582:	2301      	movs	r3, #1
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055b4:	4a14      	ldr	r2, [pc, #80]	@ (8005608 <_sbrk+0x5c>)
 80055b6:	4b15      	ldr	r3, [pc, #84]	@ (800560c <_sbrk+0x60>)
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055c0:	4b13      	ldr	r3, [pc, #76]	@ (8005610 <_sbrk+0x64>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055c8:	4b11      	ldr	r3, [pc, #68]	@ (8005610 <_sbrk+0x64>)
 80055ca:	4a12      	ldr	r2, [pc, #72]	@ (8005614 <_sbrk+0x68>)
 80055cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055ce:	4b10      	ldr	r3, [pc, #64]	@ (8005610 <_sbrk+0x64>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d207      	bcs.n	80055ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055dc:	f012 fc16 	bl	8017e0c <__errno>
 80055e0:	4603      	mov	r3, r0
 80055e2:	220c      	movs	r2, #12
 80055e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	e009      	b.n	8005600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055ec:	4b08      	ldr	r3, [pc, #32]	@ (8005610 <_sbrk+0x64>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055f2:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <_sbrk+0x64>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	4a05      	ldr	r2, [pc, #20]	@ (8005610 <_sbrk+0x64>)
 80055fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055fe:	68fb      	ldr	r3, [r7, #12]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20050000 	.word	0x20050000
 800560c:	00000400 	.word	0x00000400
 8005610:	200015e4 	.word	0x200015e4
 8005614:	200122d0 	.word	0x200122d0

08005618 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800561c:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <SystemInit+0x20>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	4a05      	ldr	r2, [pc, #20]	@ (8005638 <SystemInit+0x20>)
 8005624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800562c:	bf00      	nop
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8005640:	f000 f803 	bl	800564a <TIME_Platform_GetCurrentMs>
 8005644:	4603      	mov	r3, r0
}
 8005646:	4618      	mov	r0, r3
 8005648:	bd80      	pop	{r7, pc}

0800564a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 800564e:	f000 ff43 	bl	80064d8 <HAL_GetTick>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}

08005658 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <LOGGER_Connect+0x14>
 8005668:	4b0c      	ldr	r3, [pc, #48]	@ (800569c <LOGGER_Connect+0x44>)
 800566a:	e013      	b.n	8005694 <LOGGER_Connect+0x3c>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800566c:	223f      	movs	r2, #63	@ 0x3f
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	480b      	ldr	r0, [pc, #44]	@ (80056a0 <LOGGER_Connect+0x48>)
 8005672:	f012 fb4c 	bl	8017d0e <strncpy>
    current_config.server_port = port;
 8005676:	4a0b      	ldr	r2, [pc, #44]	@ (80056a4 <LOGGER_Connect+0x4c>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9f8 	bl	8005a74 <LOGGER_Platform_Connect>
 8005684:	60f8      	str	r0, [r7, #12]
    if (status == LOGGER_STATUS_OK) {
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <LOGGER_Connect+0x3a>
        logger_connected = true;
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <LOGGER_Connect+0x50>)
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	fffffed2 	.word	0xfffffed2
 80056a0:	2000002b 	.word	0x2000002b
 80056a4:	20000028 	.word	0x20000028
 80056a8:	200015e8 	.word	0x200015e8

080056ac <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 80056b6:	4a04      	ldr	r2, [pc, #16]	@ (80056c8 <LOGGER_SetFilterLevel+0x1c>)
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	7013      	strb	r3, [r2, #0]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	200015ea 	.word	0x200015ea

080056cc <LOGGER_SetSDFilterLevel>:

void LOGGER_SetSDFilterLevel(LogLevel min_level) {
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
    sd_filter_level = min_level;
 80056d6:	4a04      	ldr	r2, [pc, #16]	@ (80056e8 <LOGGER_SetSDFilterLevel+0x1c>)
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	7013      	strb	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000024 	.word	0x20000024

080056ec <LOGGER_EnableSDLogging>:

void LOGGER_EnableSDLogging(bool enable) {
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
    sd_logging_enabled = enable;
 80056f6:	4a04      	ldr	r2, [pc, #16]	@ (8005708 <LOGGER_EnableSDLogging+0x1c>)
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	7013      	strb	r3, [r2, #0]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	200015eb 	.word	0x200015eb

0800570c <LOGGER_IsSDLoggingEnabled>:

bool LOGGER_IsSDLoggingEnabled(void) {
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
    return sd_logging_enabled;
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <LOGGER_IsSDLoggingEnabled+0x14>)
 8005712:	781b      	ldrb	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	200015eb 	.word	0x200015eb

08005724 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 800572e:	4a0d      	ldr	r2, [pc, #52]	@ (8005764 <LOGGER_SetMode+0x40>)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 800573a:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <LOGGER_SetMode+0x44>)
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8005740:	e00b      	b.n	800575a <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d002      	beq.n	800574e <LOGGER_SetMode+0x2a>
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d105      	bne.n	800575a <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 800574e:	f7fc f96b 	bl	8001a28 <SDStorage_IsReady>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <LOGGER_SetMode+0x44>)
 8005758:	701a      	strb	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200015e9 	.word	0x200015e9
 8005768:	200015e8 	.word	0x200015e8

0800576c <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005770:	f5ad 6da8 	sub.w	sp, sp, #1344	@ 0x540
 8005774:	af04      	add	r7, sp, #16
 8005776:	4602      	mov	r2, r0
 8005778:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800577c:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005780:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005782:	4bac      	ldr	r3, [pc, #688]	@ (8005a34 <LOGGER_SendFormatted+0x2c8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 800578a:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	f0c0 8140 	bcc.w	8005a16 <LOGGER_SendFormatted+0x2aa>
    if (level < current_config.level) return;
 8005796:	4ba8      	ldr	r3, [pc, #672]	@ (8005a38 <LOGGER_SendFormatted+0x2cc>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 800579e:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	f0c0 8138 	bcc.w	8005a1a <LOGGER_SendFormatted+0x2ae>
    
    char buffer[LOGGER_MAX_MESSAGE_SIZE];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 80057aa:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80057ae:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80057b2:	4aa2      	ldr	r2, [pc, #648]	@ (8005a3c <LOGGER_SendFormatted+0x2d0>)
 80057b4:	461c      	mov	r4, r3
 80057b6:	4613      	mov	r3, r2
 80057b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 타임스탬프 + 레벨 문자열 추가
    int offset = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    const char* network_time = ResponseHandler_GetNetworkTime();
 80057c4:	f7fb fe70 	bl	80014a8 <ResponseHandler_GetNetworkTime>
 80057c8:	f8c7 0524 	str.w	r0, [r7, #1316]	@ 0x524
    if (network_time != NULL && ResponseHandler_IsTimeSynchronized()) {
 80057cc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01c      	beq.n	800580e <LOGGER_SendFormatted+0xa2>
 80057d4:	f7fb fe7a 	bl	80014cc <ResponseHandler_IsTimeSynchronized>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d017      	beq.n	800580e <LOGGER_SendFormatted+0xa2>
        // 네트워크 시간이 있으면 타임스탬프 추가
        offset = snprintf(buffer, sizeof(buffer), "[%s] %s ", network_time, level_str[level]);
 80057de:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80057e2:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80057ec:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80057fe:	4a90      	ldr	r2, [pc, #576]	@ (8005a40 <LOGGER_SendFormatted+0x2d4>)
 8005800:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005804:	f012 f968 	bl	8017ad8 <sniprintf>
 8005808:	f8c7 052c 	str.w	r0, [r7, #1324]	@ 0x52c
 800580c:	e013      	b.n	8005836 <LOGGER_SendFormatted+0xca>
    } else {
        // 네트워크 시간이 없으면 기본 형식
        offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 800580e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005812:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800581c:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8005828:	4a86      	ldr	r2, [pc, #536]	@ (8005a44 <LOGGER_SendFormatted+0x2d8>)
 800582a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800582e:	f012 f953 	bl	8017ad8 <sniprintf>
 8005832:	f8c7 052c 	str.w	r0, [r7, #1324]	@ 0x52c
    }
    
    // 가변 인수 처리 (버퍼 오버플로우 방지)
    va_list args;
    va_start(args, format);
 8005836:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 800583a:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800583e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8005842:	601a      	str	r2, [r3, #0]
    int remaining_size = sizeof(buffer) - offset;
 8005844:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8005848:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800584c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (remaining_size > 0) {
 8005850:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005854:	2b00      	cmp	r3, #0
 8005856:	dd16      	ble.n	8005886 <LOGGER_SendFormatted+0x11a>
        vsnprintf(buffer + offset, remaining_size, format, args);
 8005858:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800585c:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8005860:	18d0      	adds	r0, r2, r3
 8005862:	f8d7 1520 	ldr.w	r1, [r7, #1312]	@ 0x520
 8005866:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800586a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 8005874:	f012 fa28 	bl	8017cc8 <vsniprintf>
        buffer[sizeof(buffer) - 1] = '\0';  // 안전장치: 항상 null 종료
 8005878:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800587c:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8005880:	2200      	movs	r2, #0
 8005882:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff
    }
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 8005886:	4b70      	ldr	r3, [pc, #448]	@ (8005a48 <LOGGER_SendFormatted+0x2dc>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d02f      	beq.n	80058ee <LOGGER_SendFormatted+0x182>
 800588e:	2b02      	cmp	r3, #2
 8005890:	f300 80c8 	bgt.w	8005a24 <LOGGER_SendFormatted+0x2b8>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <LOGGER_SendFormatted+0x132>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d006      	beq.n	80058aa <LOGGER_SendFormatted+0x13e>
 800589c:	e0c2      	b.n	8005a24 <LOGGER_SendFormatted+0x2b8>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 800589e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f8f2 	bl	8005a8c <LOGGER_Platform_Send>
            break;
 80058a8:	e0bc      	b.n	8005a24 <LOGGER_SendFormatted+0x2b8>
            
        case LOGGER_MODE_SD_ONLY:
            // SD 로깅 활성화 + SD 필터 레벨 체크
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 80058aa:	4b68      	ldr	r3, [pc, #416]	@ (8005a4c <LOGGER_SendFormatted+0x2e0>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80b5 	beq.w	8005a1e <LOGGER_SendFormatted+0x2b2>
 80058b4:	4b66      	ldr	r3, [pc, #408]	@ (8005a50 <LOGGER_SendFormatted+0x2e4>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 80058bc:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	f0c0 80ab 	bcc.w	8005a1e <LOGGER_SendFormatted+0x2b2>
 80058c8:	f7fc f8ae 	bl	8001a28 <SDStorage_IsReady>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80a5 	beq.w	8005a1e <LOGGER_SendFormatted+0x2b2>
                SDStorage_WriteLog(buffer, strlen(buffer));
 80058d4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fca3 	bl	8000224 <strlen>
 80058de:	4602      	mov	r2, r0
 80058e0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fb ffb6 	bl	8001858 <SDStorage_WriteLog>
            }
            break;
 80058ec:	e097      	b.n	8005a1e <LOGGER_SendFormatted+0x2b2>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 80058ee:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f8ca 	bl	8005a8c <LOGGER_Platform_Send>
            // SD 출력 (SD 로깅 활성화 + SD 필터 레벨 체크 + 에러 무시)
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 80058f8:	4b54      	ldr	r3, [pc, #336]	@ (8005a4c <LOGGER_SendFormatted+0x2e0>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d062      	beq.n	80059c6 <LOGGER_SendFormatted+0x25a>
 8005900:	4b53      	ldr	r3, [pc, #332]	@ (8005a50 <LOGGER_SendFormatted+0x2e4>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8005908:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 800590c:	7812      	ldrb	r2, [r2, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d359      	bcc.n	80059c6 <LOGGER_SendFormatted+0x25a>
 8005912:	f7fc f889 	bl	8001a28 <SDStorage_IsReady>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d054      	beq.n	80059c6 <LOGGER_SendFormatted+0x25a>
                int sd_result = SDStorage_WriteLog(buffer, strlen(buffer));
 800591c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005920:	4618      	mov	r0, r3
 8005922:	f7fa fc7f 	bl	8000224 <strlen>
 8005926:	4602      	mov	r2, r0
 8005928:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f7fb ff92 	bl	8001858 <SDStorage_WriteLog>
 8005934:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
                if (sd_result != 0 && level >= LOG_LEVEL_WARN) {
 8005938:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d068      	beq.n	8005a12 <LOGGER_SendFormatted+0x2a6>
 8005940:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005944:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d961      	bls.n	8005a12 <LOGGER_SendFormatted+0x2a6>
                    // SD 쓰기 실패 시 터미널에 에러 출력
                    char error_msg[128];
                    const char* error_desc;
                    switch(sd_result) {
 800594e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005952:	3305      	adds	r3, #5
 8005954:	2b04      	cmp	r3, #4
 8005956:	d821      	bhi.n	800599c <LOGGER_SendFormatted+0x230>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <LOGGER_SendFormatted+0x1f4>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005995 	.word	0x08005995
 8005964:	0800598d 	.word	0x0800598d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800597d 	.word	0x0800597d
 8005970:	08005975 	.word	0x08005975
                        case -1: error_desc = "GENERAL_ERROR"; break;
 8005974:	4b37      	ldr	r3, [pc, #220]	@ (8005a54 <LOGGER_SendFormatted+0x2e8>)
 8005976:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800597a:	e013      	b.n	80059a4 <LOGGER_SendFormatted+0x238>
                        case -2: error_desc = "NOT_READY"; break;
 800597c:	4b36      	ldr	r3, [pc, #216]	@ (8005a58 <LOGGER_SendFormatted+0x2ec>)
 800597e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005982:	e00f      	b.n	80059a4 <LOGGER_SendFormatted+0x238>
                        case -3: error_desc = "FILE_ERROR"; break;
 8005984:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <LOGGER_SendFormatted+0x2f0>)
 8005986:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800598a:	e00b      	b.n	80059a4 <LOGGER_SendFormatted+0x238>
                        case -4: error_desc = "DISK_FULL"; break;
 800598c:	4b34      	ldr	r3, [pc, #208]	@ (8005a60 <LOGGER_SendFormatted+0x2f4>)
 800598e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005992:	e007      	b.n	80059a4 <LOGGER_SendFormatted+0x238>
                        case -5: error_desc = "INVALID_PARAM"; break;
 8005994:	4b33      	ldr	r3, [pc, #204]	@ (8005a64 <LOGGER_SendFormatted+0x2f8>)
 8005996:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800599a:	e003      	b.n	80059a4 <LOGGER_SendFormatted+0x238>
                        default: error_desc = "UNKNOWN"; break;
 800599c:	4b32      	ldr	r3, [pc, #200]	@ (8005a68 <LOGGER_SendFormatted+0x2fc>)
 800599e:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80059a2:	bf00      	nop
                    }
                    snprintf(error_msg, sizeof(error_msg), "[SD_ERROR] Write failed: %d (%s)", sd_result, error_desc);
 80059a4:	f107 0008 	add.w	r0, r7, #8
 80059a8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80059b2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a6c <LOGGER_SendFormatted+0x300>)
 80059b4:	2180      	movs	r1, #128	@ 0x80
 80059b6:	f012 f88f 	bl	8017ad8 <sniprintf>
                    LOGGER_Platform_Send(error_msg);
 80059ba:	f107 0308 	add.w	r3, r7, #8
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f864 	bl	8005a8c <LOGGER_Platform_Send>
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 80059c4:	e025      	b.n	8005a12 <LOGGER_SendFormatted+0x2a6>
                }
            } else if (level >= LOG_LEVEL_WARN) {
 80059c6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80059ca:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d926      	bls.n	8005a22 <LOGGER_SendFormatted+0x2b6>
                // WARN 이상 레벨인데 SD에 저장되지 않는 경우 디버그 정보 출력
                char debug_msg[256];
                snprintf(debug_msg, sizeof(debug_msg), 
 80059d4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a4c <LOGGER_SendFormatted+0x2e0>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	461e      	mov	r6, r3
 80059da:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80059de:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 80059e2:	781c      	ldrb	r4, [r3, #0]
 80059e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a50 <LOGGER_SendFormatted+0x2e4>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	461d      	mov	r5, r3
                    "[SD_DEBUG] Skip SD write: enabled=%d, level=%d>=filter=%d, ready=%d",
                    sd_logging_enabled, level, sd_filter_level, SDStorage_IsReady());
 80059ea:	f7fc f81d 	bl	8001a28 <SDStorage_IsReady>
 80059ee:	4603      	mov	r3, r0
                snprintf(debug_msg, sizeof(debug_msg), 
 80059f0:	f107 0008 	add.w	r0, r7, #8
 80059f4:	9302      	str	r3, [sp, #8]
 80059f6:	9501      	str	r5, [sp, #4]
 80059f8:	9400      	str	r4, [sp, #0]
 80059fa:	4633      	mov	r3, r6
 80059fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <LOGGER_SendFormatted+0x304>)
 80059fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a02:	f012 f869 	bl	8017ad8 <sniprintf>
                LOGGER_Platform_Send(debug_msg);
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f83e 	bl	8005a8c <LOGGER_Platform_Send>
            }
            break;
 8005a10:	e007      	b.n	8005a22 <LOGGER_SendFormatted+0x2b6>
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005a12:	bf00      	nop
            break;
 8005a14:	e005      	b.n	8005a22 <LOGGER_SendFormatted+0x2b6>
    if (level < filter_level) return;
 8005a16:	bf00      	nop
 8005a18:	e004      	b.n	8005a24 <LOGGER_SendFormatted+0x2b8>
    if (level < current_config.level) return;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <LOGGER_SendFormatted+0x2b8>
            break;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <LOGGER_SendFormatted+0x2b8>
            break;
 8005a22:	bf00      	nop
    }
}
 8005a24:	f507 67a6 	add.w	r7, r7, #1328	@ 0x530
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005a2e:	b003      	add	sp, #12
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	200015ea 	.word	0x200015ea
 8005a38:	20000028 	.word	0x20000028
 8005a3c:	0801be18 	.word	0x0801be18
 8005a40:	0801be28 	.word	0x0801be28
 8005a44:	0801be34 	.word	0x0801be34
 8005a48:	200015e9 	.word	0x200015e9
 8005a4c:	200015eb 	.word	0x200015eb
 8005a50:	20000024 	.word	0x20000024
 8005a54:	0801be38 	.word	0x0801be38
 8005a58:	0801be48 	.word	0x0801be48
 8005a5c:	0801be54 	.word	0x0801be54
 8005a60:	0801be60 	.word	0x0801be60
 8005a64:	0801be6c 	.word	0x0801be6c
 8005a68:	0801be7c 	.word	0x0801be7c
 8005a6c:	0801be84 	.word	0x0801be84
 8005a70:	0801bea8 	.word	0x0801bea8

08005a74 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <LOGGER_Platform_Send+0x12>
 8005a9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ae0 <LOGGER_Platform_Send+0x54>)
 8005a9c:	e01b      	b.n	8005ad6 <LOGGER_Platform_Send+0x4a>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fa fbc0 	bl	8000224 <strlen>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dd12      	ble.n	8005ad4 <LOGGER_Platform_Send+0x48>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	480a      	ldr	r0, [pc, #40]	@ (8005ae4 <LOGGER_Platform_Send+0x58>)
 8005aba:	f009 fc41 	bl	800f340 <HAL_UART_Transmit>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <LOGGER_Platform_Send+0x48>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8005ac4:	2364      	movs	r3, #100	@ 0x64
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	4907      	ldr	r1, [pc, #28]	@ (8005ae8 <LOGGER_Platform_Send+0x5c>)
 8005aca:	4806      	ldr	r0, [pc, #24]	@ (8005ae4 <LOGGER_Platform_Send+0x58>)
 8005acc:	f009 fc38 	bl	800f340 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <LOGGER_Platform_Send+0x4a>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005ad4:	4b02      	ldr	r3, [pc, #8]	@ (8005ae0 <LOGGER_Platform_Send+0x54>)
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	fffffed2 	.word	0xfffffed2
 8005ae4:	200011b8 	.word	0x200011b8
 8005ae8:	0801beec 	.word	0x0801beec

08005aec <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <UART_Connect+0x1c>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8005afa:	4913      	ldr	r1, [pc, #76]	@ (8005b48 <UART_Connect+0x5c>)
 8005afc:	2003      	movs	r0, #3
 8005afe:	f7ff fe35 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b02:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005b06:	e01b      	b.n	8005b40 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4910      	ldr	r1, [pc, #64]	@ (8005b4c <UART_Connect+0x60>)
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f7ff fe2d 	bl	800576c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8f2 	bl	8005cfc <UART_Platform_Connect>
 8005b18:	60f8      	str	r0, [r7, #12]

    if (status == UART_STATUS_OK) {
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <UART_Connect+0x46>
        uart_connected = true;
 8005b20:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <UART_Connect+0x64>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	490a      	ldr	r1, [pc, #40]	@ (8005b54 <UART_Connect+0x68>)
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f7ff fe1e 	bl	800576c <LOGGER_SendFormatted>
 8005b30:	e005      	b.n	8005b3e <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4908      	ldr	r1, [pc, #32]	@ (8005b58 <UART_Connect+0x6c>)
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f7ff fe17 	bl	800576c <LOGGER_SendFormatted>
    }

    return status;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	0801bef0 	.word	0x0801bef0
 8005b4c:	0801bf14 	.word	0x0801bf14
 8005b50:	200015ec 	.word	0x200015ec
 8005b54:	0801bf2c 	.word	0x0801bf2c
 8005b58:	0801bf50 	.word	0x0801bf50

08005b5c <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <UART_Send+0x74>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <UART_Send+0x24>
        LOG_ERROR("[UART] Send failed: not connected");
 8005b72:	4918      	ldr	r1, [pc, #96]	@ (8005bd4 <UART_Send+0x78>)
 8005b74:	2003      	movs	r0, #3
 8005b76:	f7ff fdf9 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b7a:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005b7e:	e022      	b.n	8005bc6 <UART_Send+0x6a>
    }

    if (data == NULL) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <UART_Send+0x38>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005b86:	4914      	ldr	r1, [pc, #80]	@ (8005bd8 <UART_Send+0x7c>)
 8005b88:	2003      	movs	r0, #3
 8005b8a:	f7ff fdef 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b8e:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005b92:	e018      	b.n	8005bc6 <UART_Send+0x6a>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4911      	ldr	r1, [pc, #68]	@ (8005bdc <UART_Send+0x80>)
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f7ff fde7 	bl	800576c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f996 	bl	8005ed0 <UART_Platform_Send>
 8005ba4:	60f8      	str	r0, [r7, #12]

    if (status == UART_STATUS_OK) {
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <UART_Send+0x5c>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	490c      	ldr	r1, [pc, #48]	@ (8005be0 <UART_Send+0x84>)
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f7ff fddb 	bl	800576c <LOGGER_SendFormatted>
 8005bb6:	e005      	b.n	8005bc4 <UART_Send+0x68>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4909      	ldr	r1, [pc, #36]	@ (8005be4 <UART_Send+0x88>)
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	f7ff fdd4 	bl	800576c <LOGGER_SendFormatted>
    }

    return status;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200015ec 	.word	0x200015ec
 8005bd4:	0801bf7c 	.word	0x0801bf7c
 8005bd8:	0801bfa0 	.word	0x0801bfa0
 8005bdc:	0801bfc0 	.word	0x0801bfc0
 8005be0:	0801bfd8 	.word	0x0801bfd8
 8005be4:	0801bff4 	.word	0x0801bff4

08005be8 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8005bf4:	4b23      	ldr	r3, [pc, #140]	@ (8005c84 <UART_Receive+0x9c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f083 0301 	eor.w	r3, r3, #1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <UART_Receive+0x28>
        LOG_ERROR("[UART] Receive failed: not connected");
 8005c02:	4921      	ldr	r1, [pc, #132]	@ (8005c88 <UART_Receive+0xa0>)
 8005c04:	2003      	movs	r0, #3
 8005c06:	f7ff fdb1 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005c0a:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005c0e:	e034      	b.n	8005c7a <UART_Receive+0x92>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <UART_Receive+0x3a>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dd02      	ble.n	8005c22 <UART_Receive+0x3a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <UART_Receive+0x48>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005c22:	491a      	ldr	r1, [pc, #104]	@ (8005c8c <UART_Receive+0xa4>)
 8005c24:	2003      	movs	r0, #3
 8005c26:	f7ff fda1 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005c2a:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005c2e:	e024      	b.n	8005c7a <UART_Receive+0x92>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4917      	ldr	r1, [pc, #92]	@ (8005c90 <UART_Receive+0xa8>)
 8005c34:	2000      	movs	r0, #0
 8005c36:	f7ff fd99 	bl	800576c <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f984 	bl	8005f4c <UART_Platform_Receive>
 8005c44:	6178      	str	r0, [r7, #20]

    if (status == UART_STATUS_OK) {
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <UART_Receive+0x74>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4910      	ldr	r1, [pc, #64]	@ (8005c94 <UART_Receive+0xac>)
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7ff fd89 	bl	800576c <LOGGER_SendFormatted>
 8005c5a:	e00d      	b.n	8005c78 <UART_Receive+0x90>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f113 0f05 	cmn.w	r3, #5
 8005c62:	d104      	bne.n	8005c6e <UART_Receive+0x86>
        LOG_DEBUG("[UART] Receive timeout");
 8005c64:	490c      	ldr	r1, [pc, #48]	@ (8005c98 <UART_Receive+0xb0>)
 8005c66:	2000      	movs	r0, #0
 8005c68:	f7ff fd80 	bl	800576c <LOGGER_SendFormatted>
 8005c6c:	e004      	b.n	8005c78 <UART_Receive+0x90>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	490a      	ldr	r1, [pc, #40]	@ (8005c9c <UART_Receive+0xb4>)
 8005c72:	2003      	movs	r0, #3
 8005c74:	f7ff fd7a 	bl	800576c <LOGGER_SendFormatted>
    }

    return status;
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200015ec 	.word	0x200015ec
 8005c88:	0801c018 	.word	0x0801c018
 8005c8c:	0801c040 	.word	0x0801c040
 8005c90:	0801c06c 	.word	0x0801c06c
 8005c94:	0801c094 	.word	0x0801c094
 8005c98:	0801c0b4 	.word	0x0801c0b4
 8005c9c:	0801c0cc 	.word	0x0801c0cc

08005ca0 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005caa:	e007      	b.n	8005cbc <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005cac:	4b12      	ldr	r3, [pc, #72]	@ (8005cf8 <flush_rx_buffer+0x58>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf8 <flush_rx_buffer+0x58>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d106      	bne.n	8005cd8 <flush_rx_buffer+0x38>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b63      	cmp	r3, #99	@ 0x63
 8005cce:	dded      	ble.n	8005cac <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005cd0:	e002      	b.n	8005cd8 <flush_rx_buffer+0x38>
        flush_count++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005cd8:	1cf9      	adds	r1, r7, #3
 8005cda:	2301      	movs	r3, #1
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4806      	ldr	r0, [pc, #24]	@ (8005cf8 <flush_rx_buffer+0x58>)
 8005ce0:	f009 fbb7 	bl	800f452 <HAL_UART_Receive>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <flush_rx_buffer+0x50>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b63      	cmp	r3, #99	@ 0x63
 8005cee:	ddf0      	ble.n	8005cd2 <flush_rx_buffer+0x32>
    }
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20001240 	.word	0x20001240

08005cfc <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005d04:	4b5c      	ldr	r3, [pc, #368]	@ (8005e78 <UART_Platform_Connect+0x17c>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8005d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d14:	495a      	ldr	r1, [pc, #360]	@ (8005e80 <UART_Platform_Connect+0x184>)
 8005d16:	2001      	movs	r0, #1
 8005d18:	f7ff fd28 	bl	800576c <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005d1c:	4b57      	ldr	r3, [pc, #348]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005d24:	4957      	ldr	r1, [pc, #348]	@ (8005e84 <UART_Platform_Connect+0x188>)
 8005d26:	2001      	movs	r0, #1
 8005d28:	f7ff fd20 	bl	800576c <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005d2c:	4b53      	ldr	r3, [pc, #332]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	4953      	ldr	r1, [pc, #332]	@ (8005e88 <UART_Platform_Connect+0x18c>)
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	f7ff fd16 	bl	800576c <LOGGER_SendFormatted>
 8005d40:	e019      	b.n	8005d76 <UART_Platform_Connect+0x7a>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005d42:	4952      	ldr	r1, [pc, #328]	@ (8005e8c <UART_Platform_Connect+0x190>)
 8005d44:	2003      	movs	r0, #3
 8005d46:	f7ff fd11 	bl	800576c <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8005d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d4c:	4a50      	ldr	r2, [pc, #320]	@ (8005e90 <UART_Platform_Connect+0x194>)
 8005d4e:	675a      	str	r2, [r3, #116]	@ 0x74
 8005d50:	4b4f      	ldr	r3, [pc, #316]	@ (8005e90 <UART_Platform_Connect+0x194>)
 8005d52:	4a4a      	ldr	r2, [pc, #296]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d54:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8005d56:	4b49      	ldr	r3, [pc, #292]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005d5e:	494d      	ldr	r1, [pc, #308]	@ (8005e94 <UART_Platform_Connect+0x198>)
 8005d60:	2001      	movs	r0, #1
 8005d62:	f7ff fd03 	bl	800576c <LOGGER_SendFormatted>
 8005d66:	e006      	b.n	8005d76 <UART_Platform_Connect+0x7a>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005d68:	494b      	ldr	r1, [pc, #300]	@ (8005e98 <UART_Platform_Connect+0x19c>)
 8005d6a:	2003      	movs	r0, #3
 8005d6c:	f7ff fcfe 	bl	800576c <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005d70:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005d74:	e07c      	b.n	8005e70 <UART_Platform_Connect+0x174>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005d76:	4b49      	ldr	r3, [pc, #292]	@ (8005e9c <UART_Platform_Connect+0x1a0>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <UART_Platform_Connect+0x96>
        HAL_UART_DMAStop(&huart6);
 8005d7e:	483f      	ldr	r0, [pc, #252]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d80:	f009 fc73 	bl	800f66a <HAL_UART_DMAStop>
        dma_receiving = false;
 8005d84:	4b45      	ldr	r3, [pc, #276]	@ (8005e9c <UART_Platform_Connect+0x1a0>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005d8a:	4945      	ldr	r1, [pc, #276]	@ (8005ea0 <UART_Platform_Connect+0x1a4>)
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	f7ff fced 	bl	800576c <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8005d92:	4b3a      	ldr	r3, [pc, #232]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d94:	2220      	movs	r2, #32
 8005d96:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005d98:	4b38      	ldr	r3, [pc, #224]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8005da0:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d027      	beq.n	8005df8 <UART_Platform_Connect+0xfc>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005da8:	4b34      	ldr	r3, [pc, #208]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d01b      	beq.n	8005dee <UART_Platform_Connect+0xf2>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005db6:	493b      	ldr	r1, [pc, #236]	@ (8005ea4 <UART_Platform_Connect+0x1a8>)
 8005db8:	2001      	movs	r0, #1
 8005dba:	f7ff fcd7 	bl	800576c <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f94c 	bl	8007060 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8005dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f899 	bl	8006f04 <HAL_DMA_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <UART_Platform_Connect+0xea>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005dd8:	4933      	ldr	r1, [pc, #204]	@ (8005ea8 <UART_Platform_Connect+0x1ac>)
 8005dda:	2003      	movs	r0, #3
 8005ddc:	f7ff fcc6 	bl	800576c <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005de0:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005de4:	e044      	b.n	8005e70 <UART_Platform_Connect+0x174>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005de6:	4931      	ldr	r1, [pc, #196]	@ (8005eac <UART_Platform_Connect+0x1b0>)
 8005de8:	2001      	movs	r0, #1
 8005dea:	f7ff fcbf 	bl	800576c <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005dee:	4b23      	ldr	r3, [pc, #140]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005df8:	f7ff ff52 	bl	8005ca0 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb0 <UART_Platform_Connect+0x1b4>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005e02:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb4 <UART_Platform_Connect+0x1b8>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005e08:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb8 <UART_Platform_Connect+0x1bc>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e12:	2100      	movs	r1, #0
 8005e14:	4829      	ldr	r0, [pc, #164]	@ (8005ebc <UART_Platform_Connect+0x1c0>)
 8005e16:	f011 ff65 	bl	8017ce4 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005e1a:	4929      	ldr	r1, [pc, #164]	@ (8005ec0 <UART_Platform_Connect+0x1c4>)
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	f7ff fca5 	bl	800576c <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e26:	4925      	ldr	r1, [pc, #148]	@ (8005ebc <UART_Platform_Connect+0x1c0>)
 8005e28:	4814      	ldr	r0, [pc, #80]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005e2a:	f009 fbda 	bl	800f5e2 <HAL_UART_Receive_DMA>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <UART_Platform_Connect+0x152>
        dma_receiving = true;
 8005e38:	4b18      	ldr	r3, [pc, #96]	@ (8005e9c <UART_Platform_Connect+0x1a0>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e42:	4920      	ldr	r1, [pc, #128]	@ (8005ec4 <UART_Platform_Connect+0x1c8>)
 8005e44:	2001      	movs	r0, #1
 8005e46:	f7ff fc91 	bl	800576c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e010      	b.n	8005e70 <UART_Platform_Connect+0x174>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	461a      	mov	r2, r3
 8005e52:	491d      	ldr	r1, [pc, #116]	@ (8005ec8 <UART_Platform_Connect+0x1cc>)
 8005e54:	2003      	movs	r0, #3
 8005e56:	f7ff fc89 	bl	800576c <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005e5a:	4b08      	ldr	r3, [pc, #32]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005e5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e5e:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <UART_Platform_Connect+0x180>)
 8005e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e64:	4919      	ldr	r1, [pc, #100]	@ (8005ecc <UART_Platform_Connect+0x1d0>)
 8005e66:	2003      	movs	r0, #3
 8005e68:	f7ff fc80 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005e6c:	f06f 0364 	mvn.w	r3, #100	@ 0x64
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	200017f4 	.word	0x200017f4
 8005e7c:	20001240 	.word	0x20001240
 8005e80:	0801c2c8 	.word	0x0801c2c8
 8005e84:	0801c2f4 	.word	0x0801c2f4
 8005e88:	0801c31c 	.word	0x0801c31c
 8005e8c:	0801c338 	.word	0x0801c338
 8005e90:	20001518 	.word	0x20001518
 8005e94:	0801c374 	.word	0x0801c374
 8005e98:	0801c3a0 	.word	0x0801c3a0
 8005e9c:	200017f5 	.word	0x200017f5
 8005ea0:	0801c3cc 	.word	0x0801c3cc
 8005ea4:	0801c3f8 	.word	0x0801c3f8
 8005ea8:	0801c428 	.word	0x0801c428
 8005eac:	0801c454 	.word	0x0801c454
 8005eb0:	200015ed 	.word	0x200015ed
 8005eb4:	200015ee 	.word	0x200015ee
 8005eb8:	200015f0 	.word	0x200015f0
 8005ebc:	200015f4 	.word	0x200015f4
 8005ec0:	0801c480 	.word	0x0801c480
 8005ec4:	0801c4a8 	.word	0x0801c4a8
 8005ec8:	0801c4ec 	.word	0x0801c4ec
 8005ecc:	0801c528 	.word	0x0801c528

08005ed0 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <UART_Platform_Send+0x1c>
 8005ede:	4b18      	ldr	r3, [pc, #96]	@ (8005f40 <UART_Platform_Send+0x70>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f083 0301 	eor.w	r3, r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <UART_Platform_Send+0x22>
 8005eec:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005ef0:	e022      	b.n	8005f38 <UART_Platform_Send+0x68>
    
    int len = strlen(data);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fa f996 	bl	8000224 <strlen>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <UART_Platform_Send+0x36>
 8005f02:	2300      	movs	r3, #0
 8005f04:	e018      	b.n	8005f38 <UART_Platform_Send+0x68>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005f06:	f7ff fecb 	bl	8005ca0 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	480b      	ldr	r0, [pc, #44]	@ (8005f44 <UART_Platform_Send+0x74>)
 8005f16:	f009 fa13 	bl	800f340 <HAL_UART_Transmit>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <UART_Platform_Send+0x58>
        return UART_STATUS_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e007      	b.n	8005f38 <UART_Platform_Send+0x68>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4906      	ldr	r1, [pc, #24]	@ (8005f48 <UART_Platform_Send+0x78>)
 8005f2e:	2003      	movs	r0, #3
 8005f30:	f7ff fc1c 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005f34:	f06f 0364 	mvn.w	r3, #100	@ 0x64
    }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200017f4 	.word	0x200017f4
 8005f44:	20001240 	.word	0x20001240
 8005f48:	0801c588 	.word	0x0801c588

08005f4c <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <UART_Platform_Receive+0x26>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <UART_Platform_Receive+0x26>
 8005f64:	4b77      	ldr	r3, [pc, #476]	@ (8006144 <UART_Platform_Receive+0x1f8>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f083 0301 	eor.w	r3, r3, #1
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <UART_Platform_Receive+0x2c>
        return UART_STATUS_ERROR;
 8005f72:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005f76:	e0e0      	b.n	800613a <UART_Platform_Receive+0x1ee>
    }
    
    if (buffer_size <= 0) {
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	dc05      	bgt.n	8005f8a <UART_Platform_Receive+0x3e>
        *bytes_received = 0;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005f84:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005f88:	e0d7      	b.n	800613a <UART_Platform_Receive+0x1ee>
    }
    
    *bytes_received = 0;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005f90:	4b6d      	ldr	r3, [pc, #436]	@ (8006148 <UART_Platform_Receive+0x1fc>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f083 0301 	eor.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <UART_Platform_Receive+0x58>
        return UART_STATUS_ERROR;
 8005f9e:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005fa2:	e0ca      	b.n	800613a <UART_Platform_Receive+0x1ee>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005fa4:	4b69      	ldr	r3, [pc, #420]	@ (800614c <UART_Platform_Receive+0x200>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <UART_Platform_Receive+0x76>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8005fae:	4b67      	ldr	r3, [pc, #412]	@ (800614c <UART_Platform_Receive+0x200>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005fb4:	4966      	ldr	r1, [pc, #408]	@ (8006150 <UART_Platform_Receive+0x204>)
 8005fb6:	2002      	movs	r0, #2
 8005fb8:	f7ff fbd8 	bl	800576c <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005fbc:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 8005fc0:	e0bb      	b.n	800613a <UART_Platform_Receive+0x1ee>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8005fc2:	4b64      	ldr	r3, [pc, #400]	@ (8006154 <UART_Platform_Receive+0x208>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80b4 	beq.w	8006136 <UART_Platform_Receive+0x1ea>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8005fce:	4b61      	ldr	r3, [pc, #388]	@ (8006154 <UART_Platform_Receive+0x208>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005fd4:	4b60      	ldr	r3, [pc, #384]	@ (8006158 <UART_Platform_Receive+0x20c>)
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 8005fda:	8b7b      	ldrh	r3, [r7, #26]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	495f      	ldr	r1, [pc, #380]	@ (800615c <UART_Platform_Receive+0x210>)
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f7ff fbc3 	bl	800576c <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005fe6:	8b7b      	ldrh	r3, [r7, #26]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 809e 	beq.w	800612a <UART_Platform_Receive+0x1de>
 8005fee:	8b7b      	ldrh	r3, [r7, #26]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	f340 8099 	ble.w	800612a <UART_Platform_Receive+0x1de>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005ff8:	8b7b      	ldrh	r3, [r7, #26]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4958      	ldr	r1, [pc, #352]	@ (8006160 <UART_Platform_Receive+0x214>)
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f011 ff31 	bl	8017e66 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8006004:	8b7b      	ldrh	r3, [r7, #26]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 800600e:	8b7a      	ldrh	r2, [r7, #26]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8006014:	8b7a      	ldrh	r2, [r7, #26]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4952      	ldr	r1, [pc, #328]	@ (8006164 <UART_Platform_Receive+0x218>)
 800601a:	2000      	movs	r0, #0
 800601c:	f7ff fba6 	bl	800576c <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8006020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006024:	2100      	movs	r1, #0
 8006026:	484e      	ldr	r0, [pc, #312]	@ (8006160 <UART_Platform_Receive+0x214>)
 8006028:	f011 fe5c 	bl	8017ce4 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 800602c:	484e      	ldr	r0, [pc, #312]	@ (8006168 <UART_Platform_Receive+0x21c>)
 800602e:	f009 fb1c 	bl	800f66a <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8006032:	4b4d      	ldr	r3, [pc, #308]	@ (8006168 <UART_Platform_Receive+0x21c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 800603a:	4b4b      	ldr	r3, [pc, #300]	@ (8006168 <UART_Platform_Receive+0x21c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2202      	movs	r2, #2
 8006040:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8006042:	4b49      	ldr	r3, [pc, #292]	@ (8006168 <UART_Platform_Receive+0x21c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2204      	movs	r2, #4
 8006048:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 800604a:	4b47      	ldr	r3, [pc, #284]	@ (8006168 <UART_Platform_Receive+0x21c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2208      	movs	r2, #8
 8006050:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8006052:	4b45      	ldr	r3, [pc, #276]	@ (8006168 <UART_Platform_Receive+0x21c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2210      	movs	r2, #16
 8006058:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 800605a:	4b43      	ldr	r3, [pc, #268]	@ (8006168 <UART_Platform_Receive+0x21c>)
 800605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605e:	2b00      	cmp	r3, #0
 8006060:	d025      	beq.n	80060ae <UART_Platform_Receive+0x162>
                int timeout = 1000;
 8006062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006066:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8006068:	e00b      	b.n	8006082 <UART_Platform_Receive+0x136>
                    timeout--;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3b01      	subs	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e002      	b.n	800607c <UART_Platform_Receive+0x130>
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b63      	cmp	r3, #99	@ 0x63
 8006080:	ddf9      	ble.n	8006076 <UART_Platform_Receive+0x12a>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8006082:	4b39      	ldr	r3, [pc, #228]	@ (8006168 <UART_Platform_Receive+0x21c>)
 8006084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006086:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d002      	beq.n	8006096 <UART_Platform_Receive+0x14a>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	dce9      	bgt.n	800606a <UART_Platform_Receive+0x11e>
                }
                
                if (timeout == 0) {
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d108      	bne.n	80060ae <UART_Platform_Receive+0x162>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 800609c:	4933      	ldr	r1, [pc, #204]	@ (800616c <UART_Platform_Receive+0x220>)
 800609e:	2002      	movs	r0, #2
 80060a0:	f7ff fb64 	bl	800576c <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80060a4:	4b30      	ldr	r3, [pc, #192]	@ (8006168 <UART_Platform_Receive+0x21c>)
 80060a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 80060ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006168 <UART_Platform_Receive+0x21c>)
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 80060b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006168 <UART_Platform_Receive+0x21c>)
 80060b8:	2220      	movs	r2, #32
 80060ba:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e002      	b.n	80060c8 <UART_Platform_Receive+0x17c>
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3301      	adds	r3, #1
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80060ce:	4293      	cmp	r3, r2
 80060d0:	ddf7      	ble.n	80060c2 <UART_Platform_Receive+0x176>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80060d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d6:	4922      	ldr	r1, [pc, #136]	@ (8006160 <UART_Platform_Receive+0x214>)
 80060d8:	4823      	ldr	r0, [pc, #140]	@ (8006168 <UART_Platform_Receive+0x21c>)
 80060da:	f009 fa82 	bl	800f5e2 <HAL_UART_Receive_DMA>
 80060de:	4603      	mov	r3, r0
 80060e0:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80060e2:	7e7b      	ldrb	r3, [r7, #25]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <UART_Platform_Receive+0x1a6>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 80060e8:	4921      	ldr	r1, [pc, #132]	@ (8006170 <UART_Platform_Receive+0x224>)
 80060ea:	2000      	movs	r0, #0
 80060ec:	f7ff fb3e 	bl	800576c <LOGGER_SendFormatted>
 80060f0:	e019      	b.n	8006126 <UART_Platform_Receive+0x1da>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 80060f2:	7e7a      	ldrb	r2, [r7, #25]
 80060f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006168 <UART_Platform_Receive+0x21c>)
 80060f6:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <UART_Platform_Receive+0x21c>)
 80060fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	460b      	mov	r3, r1
 8006102:	491c      	ldr	r1, [pc, #112]	@ (8006174 <UART_Platform_Receive+0x228>)
 8006104:	2002      	movs	r0, #2
 8006106:	f7ff fb31 	bl	800576c <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 800610a:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <UART_Platform_Receive+0x21c>)
 800610c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <UART_Platform_Receive+0x1da>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8006112:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <UART_Platform_Receive+0x21c>)
 8006114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006116:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	4916      	ldr	r1, [pc, #88]	@ (8006178 <UART_Platform_Receive+0x22c>)
 8006120:	2002      	movs	r0, #2
 8006122:	f7ff fb23 	bl	800576c <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e007      	b.n	800613a <UART_Platform_Receive+0x1ee>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 800612a:	8b7a      	ldrh	r2, [r7, #26]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4913      	ldr	r1, [pc, #76]	@ (800617c <UART_Platform_Receive+0x230>)
 8006130:	2002      	movs	r0, #2
 8006132:	f7ff fb1b 	bl	800576c <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8006136:	f06f 0304 	mvn.w	r3, #4
}
 800613a:	4618      	mov	r0, r3
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200017f4 	.word	0x200017f4
 8006148:	200017f5 	.word	0x200017f5
 800614c:	200015ee 	.word	0x200015ee
 8006150:	0801c5c0 	.word	0x0801c5c0
 8006154:	200015ed 	.word	0x200015ed
 8006158:	200015f0 	.word	0x200015f0
 800615c:	0801c5f0 	.word	0x0801c5f0
 8006160:	200015f4 	.word	0x200015f4
 8006164:	0801c614 	.word	0x0801c614
 8006168:	20001240 	.word	0x20001240
 800616c:	0801c640 	.word	0x0801c640
 8006170:	0801c67c 	.word	0x0801c67c
 8006174:	0801c6ac 	.word	0x0801c6ac
 8006178:	0801c6f4 	.word	0x0801c6f4
 800617c:	0801c710 	.word	0x0801c710

08006180 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a0a      	ldr	r2, [pc, #40]	@ (80061b8 <HAL_UART_RxCpltCallback+0x38>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d10e      	bne.n	80061b0 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <HAL_UART_RxCpltCallback+0x3c>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8006198:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <HAL_UART_RxCpltCallback+0x40>)
 800619a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800619e:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 80061a0:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <HAL_UART_RxCpltCallback+0x40>)
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	4906      	ldr	r1, [pc, #24]	@ (80061c4 <HAL_UART_RxCpltCallback+0x44>)
 80061aa:	2000      	movs	r0, #0
 80061ac:	f7ff fade 	bl	800576c <LOGGER_SendFormatted>
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40011400 	.word	0x40011400
 80061bc:	200015ed 	.word	0x200015ed
 80061c0:	200015f0 	.word	0x200015f0
 80061c4:	0801c74c 	.word	0x0801c74c

080061c8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a05      	ldr	r2, [pc, #20]	@ (80061ec <HAL_UART_RxHalfCpltCallback+0x24>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d103      	bne.n	80061e2 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 80061da:	4905      	ldr	r1, [pc, #20]	@ (80061f0 <HAL_UART_RxHalfCpltCallback+0x28>)
 80061dc:	2002      	movs	r0, #2
 80061de:	f7ff fac5 	bl	800576c <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40011400 	.word	0x40011400
 80061f0:	0801c784 	.word	0x0801c784

080061f4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3c      	ldr	r2, [pc, #240]	@ (80062f4 <HAL_UART_ErrorCallback+0x100>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d171      	bne.n	80062ea <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8006206:	4b3c      	ldr	r3, [pc, #240]	@ (80062f8 <HAL_UART_ErrorCallback+0x104>)
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 800620c:	493b      	ldr	r1, [pc, #236]	@ (80062fc <HAL_UART_ErrorCallback+0x108>)
 800620e:	2002      	movs	r0, #2
 8006210:	f7ff faac 	bl	800576c <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b08      	cmp	r3, #8
 8006220:	d107      	bne.n	8006232 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2208      	movs	r2, #8
 8006228:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 800622a:	4935      	ldr	r1, [pc, #212]	@ (8006300 <HAL_UART_ErrorCallback+0x10c>)
 800622c:	2002      	movs	r0, #2
 800622e:	f7ff fa9d 	bl	800576c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d107      	bne.n	8006250 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2204      	movs	r2, #4
 8006246:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8006248:	492e      	ldr	r1, [pc, #184]	@ (8006304 <HAL_UART_ErrorCallback+0x110>)
 800624a:	2002      	movs	r0, #2
 800624c:	f7ff fa8e 	bl	800576c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d107      	bne.n	800626e <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2202      	movs	r2, #2
 8006264:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8006266:	4928      	ldr	r1, [pc, #160]	@ (8006308 <HAL_UART_ErrorCallback+0x114>)
 8006268:	2002      	movs	r0, #2
 800626a:	f7ff fa7f 	bl	800576c <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b01      	cmp	r3, #1
 800627a:	d107      	bne.n	800628c <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2201      	movs	r2, #1
 8006282:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8006284:	4921      	ldr	r1, [pc, #132]	@ (800630c <HAL_UART_ErrorCallback+0x118>)
 8006286:	2002      	movs	r0, #2
 8006288:	f7ff fa70 	bl	800576c <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f009 f9ec 	bl	800f66a <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80062b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062b6:	2100      	movs	r1, #0
 80062b8:	4815      	ldr	r0, [pc, #84]	@ (8006310 <HAL_UART_ErrorCallback+0x11c>)
 80062ba:	f011 fd13 	bl	8017ce4 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80062be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c2:	4913      	ldr	r1, [pc, #76]	@ (8006310 <HAL_UART_ErrorCallback+0x11c>)
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f009 f98c 	bl	800f5e2 <HAL_UART_Receive_DMA>
 80062ca:	4603      	mov	r3, r0
 80062cc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 80062d4:	490f      	ldr	r1, [pc, #60]	@ (8006314 <HAL_UART_ErrorCallback+0x120>)
 80062d6:	2001      	movs	r0, #1
 80062d8:	f7ff fa48 	bl	800576c <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80062dc:	e005      	b.n	80062ea <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	461a      	mov	r2, r3
 80062e2:	490d      	ldr	r1, [pc, #52]	@ (8006318 <HAL_UART_ErrorCallback+0x124>)
 80062e4:	2003      	movs	r0, #3
 80062e6:	f7ff fa41 	bl	800576c <LOGGER_SendFormatted>
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40011400 	.word	0x40011400
 80062f8:	200015ee 	.word	0x200015ee
 80062fc:	0801c7d0 	.word	0x0801c7d0
 8006300:	0801c7fc 	.word	0x0801c7fc
 8006304:	0801c818 	.word	0x0801c818
 8006308:	0801c834 	.word	0x0801c834
 800630c:	0801c850 	.word	0x0801c850
 8006310:	200015f4 	.word	0x200015f4
 8006314:	0801c86c 	.word	0x0801c86c
 8006318:	0801c8a0 	.word	0x0801c8a0

0800631c <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af02      	add	r7, sp, #8
 8006322:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3e      	ldr	r2, [pc, #248]	@ (8006424 <USER_UART_IDLECallback+0x108>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d175      	bne.n	800641a <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b08      	cmp	r3, #8
 800633e:	d103      	bne.n	8006348 <USER_UART_IDLECallback+0x2c>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d103      	bne.n	800635e <USER_UART_IDLECallback+0x42>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f043 0302 	orr.w	r3, r3, #2
 800635c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b04      	cmp	r3, #4
 800636a:	d103      	bne.n	8006374 <USER_UART_IDLECallback+0x58>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f043 0304 	orr.w	r3, r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d103      	bne.n	800638a <USER_UART_IDLECallback+0x6e>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f043 0308 	orr.w	r3, r3, #8
 8006388:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8006394:	897b      	ldrh	r3, [r7, #10]
 8006396:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800639a:	b29a      	uxth	r2, r3
 800639c:	4b22      	ldr	r3, [pc, #136]	@ (8006428 <USER_UART_IDLECallback+0x10c>)
 800639e:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 80063a0:	4b21      	ldr	r3, [pc, #132]	@ (8006428 <USER_UART_IDLECallback+0x10c>)
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d033      	beq.n	8006412 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 80063aa:	4b20      	ldr	r3, [pc, #128]	@ (800642c <USER_UART_IDLECallback+0x110>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 80063b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006428 <USER_UART_IDLECallback+0x10c>)
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	491b      	ldr	r1, [pc, #108]	@ (8006430 <USER_UART_IDLECallback+0x114>)
 80063c2:	2002      	movs	r0, #2
 80063c4:	f7ff f9d2 	bl	800576c <LOGGER_SendFormatted>
 80063c8:	e007      	b.n	80063da <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 80063ca:	4b17      	ldr	r3, [pc, #92]	@ (8006428 <USER_UART_IDLECallback+0x10c>)
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	4918      	ldr	r1, [pc, #96]	@ (8006434 <USER_UART_IDLECallback+0x118>)
 80063d4:	2000      	movs	r0, #0
 80063d6:	f7ff f9c9 	bl	800576c <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 80063da:	4b13      	ldr	r3, [pc, #76]	@ (8006428 <USER_UART_IDLECallback+0x10c>)
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d912      	bls.n	800640a <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 80063e4:	4b14      	ldr	r3, [pc, #80]	@ (8006438 <USER_UART_IDLECallback+0x11c>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	4b13      	ldr	r3, [pc, #76]	@ (8006438 <USER_UART_IDLECallback+0x11c>)
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	4618      	mov	r0, r3
 80063f0:	4b11      	ldr	r3, [pc, #68]	@ (8006438 <USER_UART_IDLECallback+0x11c>)
 80063f2:	789b      	ldrb	r3, [r3, #2]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <USER_UART_IDLECallback+0x11c>)
 80063f8:	78db      	ldrb	r3, [r3, #3]
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	9200      	str	r2, [sp, #0]
 80063fe:	4603      	mov	r3, r0
 8006400:	460a      	mov	r2, r1
 8006402:	490e      	ldr	r1, [pc, #56]	@ (800643c <USER_UART_IDLECallback+0x120>)
 8006404:	2000      	movs	r0, #0
 8006406:	f7ff f9b1 	bl	800576c <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f009 f92d 	bl	800f66a <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8006410:	e003      	b.n	800641a <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8006412:	490b      	ldr	r1, [pc, #44]	@ (8006440 <USER_UART_IDLECallback+0x124>)
 8006414:	2000      	movs	r0, #0
 8006416:	f7ff f9a9 	bl	800576c <LOGGER_SendFormatted>
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40011400 	.word	0x40011400
 8006428:	200015f0 	.word	0x200015f0
 800642c:	200015ed 	.word	0x200015ed
 8006430:	0801c8d8 	.word	0x0801c8d8
 8006434:	0801c918 	.word	0x0801c918
 8006438:	200015f4 	.word	0x200015f4
 800643c:	0801c940 	.word	0x0801c940
 8006440:	0801c96c 	.word	0x0801c96c

08006444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800647c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006448:	f7ff f8e6 	bl	8005618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800644c:	480c      	ldr	r0, [pc, #48]	@ (8006480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800644e:	490d      	ldr	r1, [pc, #52]	@ (8006484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006450:	4a0d      	ldr	r2, [pc, #52]	@ (8006488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006454:	e002      	b.n	800645c <LoopCopyDataInit>

08006456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800645a:	3304      	adds	r3, #4

0800645c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800645c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800645e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006460:	d3f9      	bcc.n	8006456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006462:	4a0a      	ldr	r2, [pc, #40]	@ (800648c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006464:	4c0a      	ldr	r4, [pc, #40]	@ (8006490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006468:	e001      	b.n	800646e <LoopFillZerobss>

0800646a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800646a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800646c:	3204      	adds	r2, #4

0800646e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800646e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006470:	d3fb      	bcc.n	800646a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006472:	f011 fcd1 	bl	8017e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006476:	f7fb fda3 	bl	8001fc0 <main>
  bx  lr    
 800647a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800647c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006484:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8006488:	0801cc28 	.word	0x0801cc28
  ldr r2, =_sbss
 800648c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006490:	200122d0 	.word	0x200122d0

08006494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006494:	e7fe      	b.n	8006494 <ADC_IRQHandler>

08006496 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800649a:	2003      	movs	r0, #3
 800649c:	f000 fb91 	bl	8006bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064a0:	2000      	movs	r0, #0
 80064a2:	f7fe ff35 	bl	8005310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064a6:	f7fd fe97 	bl	80041d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <HAL_IncTick+0x20>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	4b06      	ldr	r3, [pc, #24]	@ (80064d4 <HAL_IncTick+0x24>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4413      	add	r3, r2
 80064c0:	4a04      	ldr	r2, [pc, #16]	@ (80064d4 <HAL_IncTick+0x24>)
 80064c2:	6013      	str	r3, [r2, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000074 	.word	0x20000074
 80064d4:	200017f8 	.word	0x200017f8

080064d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  return uwTick;
 80064dc:	4b03      	ldr	r3, [pc, #12]	@ (80064ec <HAL_GetTick+0x14>)
 80064de:	681b      	ldr	r3, [r3, #0]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	200017f8 	.word	0x200017f8

080064f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064f8:	f7ff ffee 	bl	80064d8 <HAL_GetTick>
 80064fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d005      	beq.n	8006516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <HAL_Delay+0x44>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006516:	bf00      	nop
 8006518:	f7ff ffde 	bl	80064d8 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d8f7      	bhi.n	8006518 <HAL_Delay+0x28>
  {
  }
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000074 	.word	0x20000074

08006538 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e031      	b.n	80065b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fd fe66 	bl	8004228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	d116      	bne.n	80065a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800657a:	4b10      	ldr	r3, [pc, #64]	@ (80065bc <HAL_ADC_Init+0x84>)
 800657c:	4013      	ands	r3, r2
 800657e:	f043 0202 	orr.w	r2, r3, #2
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f974 	bl	8006874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	f043 0201 	orr.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80065a2:	e001      	b.n	80065a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	ffffeefd 	.word	0xffffeefd

080065c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x1c>
 80065d8:	2302      	movs	r3, #2
 80065da:	e13a      	b.n	8006852 <HAL_ADC_ConfigChannel+0x292>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b09      	cmp	r3, #9
 80065ea:	d93a      	bls.n	8006662 <HAL_ADC_ConfigChannel+0xa2>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065f4:	d035      	beq.n	8006662 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68d9      	ldr	r1, [r3, #12]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	4613      	mov	r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	4413      	add	r3, r2
 800660a:	3b1e      	subs	r3, #30
 800660c:	2207      	movs	r2, #7
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	43da      	mvns	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	400a      	ands	r2, r1
 800661a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a8f      	ldr	r2, [pc, #572]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d10a      	bne.n	800663c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68d9      	ldr	r1, [r3, #12]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	061a      	lsls	r2, r3, #24
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800663a:	e039      	b.n	80066b0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	4618      	mov	r0, r3
 800664e:	4603      	mov	r3, r0
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	4403      	add	r3, r0
 8006654:	3b1e      	subs	r3, #30
 8006656:	409a      	lsls	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006660:	e026      	b.n	80066b0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6919      	ldr	r1, [r3, #16]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2207      	movs	r2, #7
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	43da      	mvns	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	400a      	ands	r2, r1
 8006688:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6919      	ldr	r1, [r3, #16]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	4618      	mov	r0, r3
 800669c:	4603      	mov	r3, r0
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4403      	add	r3, r0
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	409a      	lsls	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d824      	bhi.n	8006702 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	3b05      	subs	r3, #5
 80066ca:	221f      	movs	r2, #31
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	43da      	mvns	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	400a      	ands	r2, r1
 80066d8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	4618      	mov	r0, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	3b05      	subs	r3, #5
 80066f4:	fa00 f203 	lsl.w	r2, r0, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8006700:	e04c      	b.n	800679c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b0c      	cmp	r3, #12
 8006708:	d824      	bhi.n	8006754 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	3b23      	subs	r3, #35	@ 0x23
 800671c:	221f      	movs	r2, #31
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43da      	mvns	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	400a      	ands	r2, r1
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	4618      	mov	r0, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	3b23      	subs	r3, #35	@ 0x23
 8006746:	fa00 f203 	lsl.w	r2, r0, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
 8006752:	e023      	b.n	800679c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	3b41      	subs	r3, #65	@ 0x41
 8006766:	221f      	movs	r2, #31
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	43da      	mvns	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	400a      	ands	r2, r1
 8006774:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	4618      	mov	r0, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	3b41      	subs	r3, #65	@ 0x41
 8006790:	fa00 f203 	lsl.w	r2, r0, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a30      	ldr	r2, [pc, #192]	@ (8006864 <HAL_ADC_ConfigChannel+0x2a4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10a      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x1fc>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ae:	d105      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80067b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 80067b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80067ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a28      	ldr	r2, [pc, #160]	@ (8006864 <HAL_ADC_ConfigChannel+0x2a4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d10f      	bne.n	80067e6 <HAL_ADC_ConfigChannel+0x226>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b12      	cmp	r3, #18
 80067cc:	d10b      	bne.n	80067e6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80067ce:	4b26      	ldr	r3, [pc, #152]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4a25      	ldr	r2, [pc, #148]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 80067d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80067da:	4b23      	ldr	r3, [pc, #140]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4a22      	ldr	r2, [pc, #136]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 80067e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80067e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006864 <HAL_ADC_ConfigChannel+0x2a4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d12b      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x288>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <HAL_ADC_ConfigChannel+0x242>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b11      	cmp	r3, #17
 8006800:	d122      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	4a18      	ldr	r2, [pc, #96]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 8006808:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800680c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800680e:	4b16      	ldr	r3, [pc, #88]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	4a15      	ldr	r2, [pc, #84]	@ (8006868 <HAL_ADC_ConfigChannel+0x2a8>)
 8006814:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006818:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a10      	ldr	r2, [pc, #64]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d111      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006824:	4b11      	ldr	r3, [pc, #68]	@ (800686c <HAL_ADC_ConfigChannel+0x2ac>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a11      	ldr	r2, [pc, #68]	@ (8006870 <HAL_ADC_ConfigChannel+0x2b0>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	0c9a      	lsrs	r2, r3, #18
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800683a:	e002      	b.n	8006842 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3b01      	subs	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f9      	bne.n	800683c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	10000012 	.word	0x10000012
 8006864:	40012000 	.word	0x40012000
 8006868:	40012300 	.word	0x40012300
 800686c:	20000020 	.word	0x20000020
 8006870:	431bde83 	.word	0x431bde83

08006874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800687c:	4b78      	ldr	r3, [pc, #480]	@ (8006a60 <ADC_Init+0x1ec>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a77      	ldr	r2, [pc, #476]	@ (8006a60 <ADC_Init+0x1ec>)
 8006882:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006886:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006888:	4b75      	ldr	r3, [pc, #468]	@ (8006a60 <ADC_Init+0x1ec>)
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4973      	ldr	r1, [pc, #460]	@ (8006a60 <ADC_Init+0x1ec>)
 8006892:	4313      	orrs	r3, r2
 8006894:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	021a      	lsls	r2, r3, #8
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6859      	ldr	r1, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	4a58      	ldr	r2, [pc, #352]	@ (8006a64 <ADC_Init+0x1f0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d022      	beq.n	800694e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6899      	ldr	r1, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6899      	ldr	r1, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	609a      	str	r2, [r3, #8]
 800694c:	e00f      	b.n	800696e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800695c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800696c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0202 	bic.w	r2, r2, #2
 800697c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6899      	ldr	r1, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	005a      	lsls	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01b      	beq.n	80069d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80069ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	3b01      	subs	r3, #1
 80069c8:	035a      	lsls	r2, r3, #13
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	e007      	b.n	80069e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80069f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	051a      	lsls	r2, r3, #20
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6899      	ldr	r1, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a26:	025a      	lsls	r2, r3, #9
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6899      	ldr	r1, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	029a      	lsls	r2, r3, #10
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40012300 	.word	0x40012300
 8006a64:	0f000001 	.word	0x0f000001

08006a68 <__NVIC_SetPriorityGrouping>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a84:	4013      	ands	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <__NVIC_SetPriorityGrouping+0x44>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a96:	4a04      	ldr	r2, [pc, #16]	@ (8006aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	60d3      	str	r3, [r2, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	e000ed00 	.word	0xe000ed00
 8006aac:	05fa0000 	.word	0x05fa0000

08006ab0 <__NVIC_GetPriorityGrouping>:
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ab4:	4b04      	ldr	r3, [pc, #16]	@ (8006ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	0a1b      	lsrs	r3, r3, #8
 8006aba:	f003 0307 	and.w	r3, r3, #7
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	e000ed00 	.word	0xe000ed00

08006acc <__NVIC_EnableIRQ>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	db0b      	blt.n	8006af6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	f003 021f 	and.w	r2, r3, #31
 8006ae4:	4907      	ldr	r1, [pc, #28]	@ (8006b04 <__NVIC_EnableIRQ+0x38>)
 8006ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	2001      	movs	r0, #1
 8006aee:	fa00 f202 	lsl.w	r2, r0, r2
 8006af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	e000e100 	.word	0xe000e100

08006b08 <__NVIC_SetPriority>:
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	db0a      	blt.n	8006b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	490c      	ldr	r1, [pc, #48]	@ (8006b54 <__NVIC_SetPriority+0x4c>)
 8006b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b26:	0112      	lsls	r2, r2, #4
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b30:	e00a      	b.n	8006b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	4908      	ldr	r1, [pc, #32]	@ (8006b58 <__NVIC_SetPriority+0x50>)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	3b04      	subs	r3, #4
 8006b40:	0112      	lsls	r2, r2, #4
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	440b      	add	r3, r1
 8006b46:	761a      	strb	r2, [r3, #24]
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	e000e100 	.word	0xe000e100
 8006b58:	e000ed00 	.word	0xe000ed00

08006b5c <NVIC_EncodePriority>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	@ 0x24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f1c3 0307 	rsb	r3, r3, #7
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	bf28      	it	cs
 8006b7a:	2304      	movcs	r3, #4
 8006b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3304      	adds	r3, #4
 8006b82:	2b06      	cmp	r3, #6
 8006b84:	d902      	bls.n	8006b8c <NVIC_EncodePriority+0x30>
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3b03      	subs	r3, #3
 8006b8a:	e000      	b.n	8006b8e <NVIC_EncodePriority+0x32>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	43da      	mvns	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bae:	43d9      	mvns	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb4:	4313      	orrs	r3, r2
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3724      	adds	r7, #36	@ 0x24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff ff4c 	bl	8006a68 <__NVIC_SetPriorityGrouping>
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bea:	f7ff ff61 	bl	8006ab0 <__NVIC_GetPriorityGrouping>
 8006bee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	f7ff ffb1 	bl	8006b5c <NVIC_EncodePriority>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff ff80 	bl	8006b08 <__NVIC_SetPriority>
}
 8006c08:	bf00      	nop
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff ff54 	bl	8006acc <__NVIC_EnableIRQ>
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e054      	b.n	8006ce8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	7f5b      	ldrb	r3, [r3, #29]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d105      	bne.n	8006c54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fd fb44 	bl	80042dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	791b      	ldrb	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10c      	bne.n	8006c7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a22      	ldr	r2, [pc, #136]	@ (8006cf0 <HAL_CRC_Init+0xc4>)
 8006c68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0218 	bic.w	r2, r2, #24
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	e00c      	b.n	8006c96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6899      	ldr	r1, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f834 	bl	8006cf4 <HAL_CRCEx_Polynomial_Set>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e028      	b.n	8006ce8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	795b      	ldrb	r3, [r3, #5]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca6:	611a      	str	r2, [r3, #16]
 8006ca8:	e004      	b.n	8006cb4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6912      	ldr	r2, [r2, #16]
 8006cb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	04c11db7 	.word	0x04c11db7

08006cf4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006d04:	231f      	movs	r3, #31
 8006d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
 8006d16:	e063      	b.n	8006de0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006d18:	bf00      	nop
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1e5a      	subs	r2, r3, #1
 8006d1e:	613a      	str	r2, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <HAL_CRCEx_Polynomial_Set+0x44>
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b18      	cmp	r3, #24
 8006d3c:	d846      	bhi.n	8006dcc <HAL_CRCEx_Polynomial_Set+0xd8>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006dd3 	.word	0x08006dd3
 8006d48:	08006dcd 	.word	0x08006dcd
 8006d4c:	08006dcd 	.word	0x08006dcd
 8006d50:	08006dcd 	.word	0x08006dcd
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006dcd 	.word	0x08006dcd
 8006d5c:	08006dcd 	.word	0x08006dcd
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006dc1 	.word	0x08006dc1
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dcd 	.word	0x08006dcd
 8006d70:	08006dcd 	.word	0x08006dcd
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006dcd 	.word	0x08006dcd
 8006d80:	08006dcd 	.word	0x08006dcd
 8006d84:	08006db5 	.word	0x08006db5
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006dcd 	.word	0x08006dcd
 8006d94:	08006dcd 	.word	0x08006dcd
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006dcd 	.word	0x08006dcd
 8006da0:	08006dcd 	.word	0x08006dcd
 8006da4:	08006da9 	.word	0x08006da9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b06      	cmp	r3, #6
 8006dac:	d913      	bls.n	8006dd6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006db2:	e010      	b.n	8006dd6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d90f      	bls.n	8006dda <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006dbe:	e00c      	b.n	8006dda <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	d90b      	bls.n	8006dde <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006dca:	e008      	b.n	8006dde <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
        break;
 8006dd0:	e006      	b.n	8006de0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e004      	b.n	8006de0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dd6:	bf00      	nop
 8006dd8:	e002      	b.n	8006de0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dda:	bf00      	nop
 8006ddc:	e000      	b.n	8006de0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dde:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10d      	bne.n	8006e02 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f023 0118 	bic.w	r1, r3, #24
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e069      	b.n	8006ef6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fd fa74 	bl	800431c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6819      	ldr	r1, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	4b2a      	ldr	r3, [pc, #168]	@ (8006f00 <HAL_DCMI_Init+0xf0>)
 8006e56:	400b      	ands	r3, r1
 8006e58:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e6e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e7a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e86:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e92:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e9e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d112      	bne.n	8006ed6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7f1b      	ldrb	r3, [r3, #28]
 8006eb4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7f5b      	ldrb	r3, [r3, #29]
 8006eba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ebc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	7f9b      	ldrb	r3, [r3, #30]
 8006ec2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006ec4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	7fdb      	ldrb	r3, [r3, #31]
 8006ecc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006ed2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ed4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 021e 	orr.w	r2, r2, #30
 8006ee4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	ffe0f007 	.word	0xffe0f007

08006f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f10:	f7ff fae2 	bl	80064d8 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e099      	b.n	8007054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0201 	bic.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f40:	e00f      	b.n	8006f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f42:	f7ff fac9 	bl	80064d8 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b05      	cmp	r3, #5
 8006f4e:	d908      	bls.n	8006f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2203      	movs	r2, #3
 8006f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e078      	b.n	8007054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e8      	bne.n	8006f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4b38      	ldr	r3, [pc, #224]	@ (800705c <HAL_DMA_Init+0x158>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d107      	bne.n	8006fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d117      	bne.n	8007026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb73 	bl	80076f4 <DMA_CheckFifoParam>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2240      	movs	r2, #64	@ 0x40
 8007018:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007022:	2301      	movs	r3, #1
 8007024:	e016      	b.n	8007054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fb2a 	bl	8007688 <DMA_CalcBaseAndBitshift>
 8007034:	4603      	mov	r3, r0
 8007036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800703c:	223f      	movs	r2, #63	@ 0x3f
 800703e:	409a      	lsls	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	f010803f 	.word	0xf010803f

08007060 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e050      	b.n	8007114 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d101      	bne.n	8007082 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800707e:	2302      	movs	r3, #2
 8007080:	e048      	b.n	8007114 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2221      	movs	r2, #33	@ 0x21
 80070c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fae0 	bl	8007688 <DMA_CalcBaseAndBitshift>
 80070c8:	4603      	mov	r3, r0
 80070ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d0:	223f      	movs	r2, #63	@ 0x3f
 80070d2:	409a      	lsls	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_DMA_Start_IT+0x26>
 800713e:	2302      	movs	r3, #2
 8007140:	e048      	b.n	80071d4 <HAL_DMA_Start_IT+0xb8>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b01      	cmp	r3, #1
 8007154:	d137      	bne.n	80071c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa5e 	bl	800762c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007174:	223f      	movs	r2, #63	@ 0x3f
 8007176:	409a      	lsls	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0216 	orr.w	r2, r2, #22
 800718a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800719a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0208 	orr.w	r2, r2, #8
 80071b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e005      	b.n	80071d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071ce:	2302      	movs	r3, #2
 80071d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071ea:	f7ff f975 	bl	80064d8 <HAL_GetTick>
 80071ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d008      	beq.n	800720e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2280      	movs	r2, #128	@ 0x80
 8007200:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e052      	b.n	80072b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0216 	bic.w	r2, r2, #22
 800721c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695a      	ldr	r2, [r3, #20]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800722c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <HAL_DMA_Abort+0x62>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0208 	bic.w	r2, r2, #8
 800724c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800725e:	e013      	b.n	8007288 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007260:	f7ff f93a 	bl	80064d8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b05      	cmp	r3, #5
 800726c:	d90c      	bls.n	8007288 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2203      	movs	r2, #3
 8007278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e015      	b.n	80072b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e4      	bne.n	8007260 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729a:	223f      	movs	r2, #63	@ 0x3f
 800729c:	409a      	lsls	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d004      	beq.n	80072da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2280      	movs	r2, #128	@ 0x80
 80072d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e00c      	b.n	80072f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2205      	movs	r2, #5
 80072de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800730c:	4b8e      	ldr	r3, [pc, #568]	@ (8007548 <HAL_DMA_IRQHandler+0x248>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a8e      	ldr	r2, [pc, #568]	@ (800754c <HAL_DMA_IRQHandler+0x24c>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	0a9b      	lsrs	r3, r3, #10
 8007318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732a:	2208      	movs	r2, #8
 800732c:	409a      	lsls	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01a      	beq.n	800736c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007358:	2208      	movs	r2, #8
 800735a:	409a      	lsls	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007364:	f043 0201 	orr.w	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d012      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738e:	2201      	movs	r2, #1
 8007390:	409a      	lsls	r2, r3
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739a:	f043 0202 	orr.w	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a6:	2204      	movs	r2, #4
 80073a8:	409a      	lsls	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d012      	beq.n	80073d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c4:	2204      	movs	r2, #4
 80073c6:	409a      	lsls	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d0:	f043 0204 	orr.w	r2, r3, #4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073dc:	2210      	movs	r2, #16
 80073de:	409a      	lsls	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d043      	beq.n	8007470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d03c      	beq.n	8007470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073fa:	2210      	movs	r2, #16
 80073fc:	409a      	lsls	r2, r3
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d018      	beq.n	8007442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d108      	bne.n	8007430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d024      	beq.n	8007470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
 800742e:	e01f      	b.n	8007470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01b      	beq.n	8007470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
 8007440:	e016      	b.n	8007470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d107      	bne.n	8007460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0208 	bic.w	r2, r2, #8
 800745e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007474:	2220      	movs	r2, #32
 8007476:	409a      	lsls	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 808f 	beq.w	80075a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8087 	beq.w	80075a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007496:	2220      	movs	r2, #32
 8007498:	409a      	lsls	r2, r3
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d136      	bne.n	8007518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0216 	bic.w	r2, r2, #22
 80074b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695a      	ldr	r2, [r3, #20]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <HAL_DMA_IRQHandler+0x1da>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0208 	bic.w	r2, r2, #8
 80074e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	223f      	movs	r2, #63	@ 0x3f
 80074f0:	409a      	lsls	r2, r3
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750a:	2b00      	cmp	r3, #0
 800750c:	d07e      	beq.n	800760c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
        }
        return;
 8007516:	e079      	b.n	800760c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01d      	beq.n	8007562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10d      	bne.n	8007550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007538:	2b00      	cmp	r3, #0
 800753a:	d031      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
 8007544:	e02c      	b.n	80075a0 <HAL_DMA_IRQHandler+0x2a0>
 8007546:	bf00      	nop
 8007548:	20000020 	.word	0x20000020
 800754c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d023      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
 8007560:	e01e      	b.n	80075a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10f      	bne.n	8007590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0210 	bic.w	r2, r2, #16
 800757e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d032      	beq.n	800760e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d022      	beq.n	80075fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2205      	movs	r2, #5
 80075b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d307      	bcc.n	80075e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f2      	bne.n	80075cc <HAL_DMA_IRQHandler+0x2cc>
 80075e6:	e000      	b.n	80075ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80075e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	4798      	blx	r3
 800760a:	e000      	b.n	800760e <HAL_DMA_IRQHandler+0x30e>
        return;
 800760c:	bf00      	nop
    }
  }
}
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2b40      	cmp	r3, #64	@ 0x40
 8007658:	d108      	bne.n	800766c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800766a:	e007      	b.n	800767c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]
}
 800767c:	bf00      	nop
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3b10      	subs	r3, #16
 8007698:	4a13      	ldr	r2, [pc, #76]	@ (80076e8 <DMA_CalcBaseAndBitshift+0x60>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076a2:	4a12      	ldr	r2, [pc, #72]	@ (80076ec <DMA_CalcBaseAndBitshift+0x64>)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d908      	bls.n	80076c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <DMA_CalcBaseAndBitshift+0x68>)
 80076be:	4013      	ands	r3, r2
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80076c6:	e006      	b.n	80076d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	4b08      	ldr	r3, [pc, #32]	@ (80076f0 <DMA_CalcBaseAndBitshift+0x68>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	aaaaaaab 	.word	0xaaaaaaab
 80076ec:	0801ca0c 	.word	0x0801ca0c
 80076f0:	fffffc00 	.word	0xfffffc00

080076f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007704:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d11f      	bne.n	800774e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d856      	bhi.n	80077c2 <DMA_CheckFifoParam+0xce>
 8007714:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <DMA_CheckFifoParam+0x28>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	0800772d 	.word	0x0800772d
 8007720:	0800773f 	.word	0x0800773f
 8007724:	0800772d 	.word	0x0800772d
 8007728:	080077c3 	.word	0x080077c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d046      	beq.n	80077c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800773c:	e043      	b.n	80077c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007746:	d140      	bne.n	80077ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800774c:	e03d      	b.n	80077ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007756:	d121      	bne.n	800779c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b03      	cmp	r3, #3
 800775c:	d837      	bhi.n	80077ce <DMA_CheckFifoParam+0xda>
 800775e:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <DMA_CheckFifoParam+0x70>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007775 	.word	0x08007775
 8007768:	0800777b 	.word	0x0800777b
 800776c:	08007775 	.word	0x08007775
 8007770:	0800778d 	.word	0x0800778d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
      break;
 8007778:	e030      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d025      	beq.n	80077d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800778a:	e022      	b.n	80077d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007794:	d11f      	bne.n	80077d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800779a:	e01c      	b.n	80077d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d903      	bls.n	80077aa <DMA_CheckFifoParam+0xb6>
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d003      	beq.n	80077b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077a8:	e018      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	73fb      	strb	r3, [r7, #15]
      break;
 80077ae:	e015      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	e00b      	b.n	80077da <DMA_CheckFifoParam+0xe6>
      break;
 80077c2:	bf00      	nop
 80077c4:	e00a      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      break;
 80077c6:	bf00      	nop
 80077c8:	e008      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      break;
 80077ca:	bf00      	nop
 80077cc:	e006      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      break;
 80077ce:	bf00      	nop
 80077d0:	e004      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      break;
 80077d2:	bf00      	nop
 80077d4:	e002      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      break;   
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
      break;
 80077da:	bf00      	nop
    }
  } 
  
  return status; 
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e039      	b.n	8007872 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fc fe40 	bl	8004498 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783c:	f023 0107 	bic.w	r1, r3, #7
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007852:	4b0a      	ldr	r3, [pc, #40]	@ (800787c <HAL_DMA2D_Init+0x90>)
 8007854:	4013      	ands	r3, r2
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	68d1      	ldr	r1, [r2, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6812      	ldr	r2, [r2, #0]
 800785e:	430b      	orrs	r3, r1
 8007860:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	ffffc000 	.word	0xffffc000

08007880 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d026      	beq.n	80078f0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d021      	beq.n	80078f0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078ba:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	f043 0201 	orr.w	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2201      	movs	r2, #1
 80078ce:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2204      	movs	r2, #4
 80078d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d026      	beq.n	8007948 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d021      	beq.n	8007948 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007912:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2220      	movs	r2, #32
 800791a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007920:	f043 0202 	orr.w	r2, r3, #2
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2204      	movs	r2, #4
 800792c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d026      	beq.n	80079a0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007958:	2b00      	cmp	r3, #0
 800795a:	d021      	beq.n	80079a0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800796a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2208      	movs	r2, #8
 8007972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007978:	f043 0204 	orr.w	r2, r3, #4
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2204      	movs	r2, #4
 8007984:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d013      	beq.n	80079d2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079c2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2204      	movs	r2, #4
 80079ca:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f853 	bl	8007a78 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d024      	beq.n	8007a26 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01f      	beq.n	8007a26 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80079f4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2202      	movs	r2, #2
 80079fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01f      	beq.n	8007a70 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01a      	beq.n	8007a70 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a48:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2210      	movs	r2, #16
 8007a50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f80e 	bl	8007a8c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_DMA2D_ConfigLayer+0x20>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e079      	b.n	8007bb4 <HAL_DMA2D_ConfigLayer+0x114>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	4413      	add	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	041b      	lsls	r3, r3, #16
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007aea:	4b35      	ldr	r3, [pc, #212]	@ (8007bc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8007aec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b0a      	cmp	r3, #10
 8007af4:	d003      	beq.n	8007afe <HAL_DMA2D_ConfigLayer+0x5e>
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b09      	cmp	r3, #9
 8007afc:	d107      	bne.n	8007b0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e005      	b.n	8007b1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	061b      	lsls	r3, r3, #24
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d120      	bne.n	8007b62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	ea02 0103 	and.w	r1, r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b0a      	cmp	r3, #10
 8007b48:	d003      	beq.n	8007b52 <HAL_DMA2D_ConfigLayer+0xb2>
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d127      	bne.n	8007ba2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007b5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b60:	e01f      	b.n	8007ba2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69da      	ldr	r2, [r3, #28]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	ea02 0103 	and.w	r1, r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	6812      	ldr	r2, [r2, #0]
 8007b82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b0a      	cmp	r3, #10
 8007b8a:	d003      	beq.n	8007b94 <HAL_DMA2D_ConfigLayer+0xf4>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b09      	cmp	r3, #9
 8007b92:	d106      	bne.n	8007ba2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007ba0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	ff03000f 	.word	0xff03000f

08007bc4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e086      	b.n	8007ce4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d106      	bne.n	8007bee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fc fc7b 	bl	80044e4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bee:	4b3f      	ldr	r3, [pc, #252]	@ (8007cec <HAL_ETH_Init+0x128>)
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8007cec <HAL_ETH_Init+0x128>)
 8007bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8007cec <HAL_ETH_Init+0x128>)
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c02:	60bb      	str	r3, [r7, #8]
 8007c04:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007c06:	4b3a      	ldr	r3, [pc, #232]	@ (8007cf0 <HAL_ETH_Init+0x12c>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	4a39      	ldr	r2, [pc, #228]	@ (8007cf0 <HAL_ETH_Init+0x12c>)
 8007c0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007c10:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <HAL_ETH_Init+0x12c>)
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	4935      	ldr	r1, [pc, #212]	@ (8007cf0 <HAL_ETH_Init+0x12c>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007c20:	4b33      	ldr	r3, [pc, #204]	@ (8007cf0 <HAL_ETH_Init+0x12c>)
 8007c22:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c3c:	f7fe fc4c 	bl	80064d8 <HAL_GetTick>
 8007c40:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007c42:	e011      	b.n	8007c68 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007c44:	f7fe fc48 	bl	80064d8 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007c52:	d909      	bls.n	8007c68 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2204      	movs	r2, #4
 8007c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	22e0      	movs	r2, #224	@ 0xe0
 8007c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e03d      	b.n	8007ce4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e4      	bne.n	8007c44 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f97a 	bl	8007f74 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa25 	bl	80080d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa7b 	bl	8008182 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	461a      	mov	r2, r3
 8007c92:	2100      	movs	r1, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f9e3 	bl	8008060 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf4 <HAL_ETH_Init+0x130>)
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007cce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2210      	movs	r2, #16
 8007cde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40023800 	.word	0x40023800
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	00020060 	.word	0x00020060

08007cf8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4b53      	ldr	r3, [pc, #332]	@ (8007e5c <ETH_SetMACConfig+0x164>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	7b9b      	ldrb	r3, [r3, #14]
 8007d16:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	7c12      	ldrb	r2, [r2, #16]
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	d102      	bne.n	8007d26 <ETH_SetMACConfig+0x2e>
 8007d20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007d24:	e000      	b.n	8007d28 <ETH_SetMACConfig+0x30>
 8007d26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007d28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	7c52      	ldrb	r2, [r2, #17]
 8007d2e:	2a00      	cmp	r2, #0
 8007d30:	d102      	bne.n	8007d38 <ETH_SetMACConfig+0x40>
 8007d32:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007d36:	e000      	b.n	8007d3a <ETH_SetMACConfig+0x42>
 8007d38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007d3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007d40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	7fdb      	ldrb	r3, [r3, #31]
 8007d46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007d48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007d4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	7f92      	ldrb	r2, [r2, #30]
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	d102      	bne.n	8007d5e <ETH_SetMACConfig+0x66>
 8007d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007d5c:	e000      	b.n	8007d60 <ETH_SetMACConfig+0x68>
 8007d5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8007d60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	7f1b      	ldrb	r3, [r3, #28]
 8007d66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007d68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007d6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007d76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d102      	bne.n	8007d88 <ETH_SetMACConfig+0x90>
 8007d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d86:	e000      	b.n	8007d8a <ETH_SetMACConfig+0x92>
 8007d88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007d8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	7bdb      	ldrb	r3, [r3, #15]
 8007d90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007d92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007d98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007da2:	4313      	orrs	r3, r2
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f7fe fb98 	bl	80064f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dde:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d101      	bne.n	8007dee <ETH_SetMACConfig+0xf6>
 8007dea:	2280      	movs	r2, #128	@ 0x80
 8007dec:	e000      	b.n	8007df0 <ETH_SetMACConfig+0xf8>
 8007dee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007df0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007df6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007dfe:	2a01      	cmp	r2, #1
 8007e00:	d101      	bne.n	8007e06 <ETH_SetMACConfig+0x10e>
 8007e02:	2208      	movs	r2, #8
 8007e04:	e000      	b.n	8007e08 <ETH_SetMACConfig+0x110>
 8007e06:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007e08:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007e10:	2a01      	cmp	r2, #1
 8007e12:	d101      	bne.n	8007e18 <ETH_SetMACConfig+0x120>
 8007e14:	2204      	movs	r2, #4
 8007e16:	e000      	b.n	8007e1a <ETH_SetMACConfig+0x122>
 8007e18:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007e1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007e22:	2a01      	cmp	r2, #1
 8007e24:	d101      	bne.n	8007e2a <ETH_SetMACConfig+0x132>
 8007e26:	2202      	movs	r2, #2
 8007e28:	e000      	b.n	8007e2c <ETH_SetMACConfig+0x134>
 8007e2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e44:	2001      	movs	r0, #1
 8007e46:	f7fe fb53 	bl	80064f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	619a      	str	r2, [r3, #24]
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	fd20810f 	.word	0xfd20810f

08007e60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4b3d      	ldr	r3, [pc, #244]	@ (8007f70 <ETH_SetDMAConfig+0x110>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	7b1b      	ldrb	r3, [r3, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <ETH_SetDMAConfig+0x2c>
 8007e86:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e8a:	e000      	b.n	8007e8e <ETH_SetDMAConfig+0x2e>
 8007e8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	7b5b      	ldrb	r3, [r3, #13]
 8007e92:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e94:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	7f52      	ldrb	r2, [r2, #29]
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d102      	bne.n	8007ea4 <ETH_SetDMAConfig+0x44>
 8007e9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ea2:	e000      	b.n	8007ea6 <ETH_SetDMAConfig+0x46>
 8007ea4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007ea6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	7b9b      	ldrb	r3, [r3, #14]
 8007eac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007eae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007eb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	7f1b      	ldrb	r3, [r3, #28]
 8007eba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007ebc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	7f9b      	ldrb	r3, [r3, #30]
 8007ec2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007ec4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007eca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ed2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7fe fafa 	bl	80064f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f04:	461a      	mov	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	791b      	ldrb	r3, [r3, #4]
 8007f0e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007f14:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007f1a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007f20:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f28:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007f2a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f30:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007f32:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007f38:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f46:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f54:	2001      	movs	r0, #1
 8007f56:	f7fe facb 	bl	80064f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f62:	461a      	mov	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	f8de3f23 	.word	0xf8de3f23

08007f74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b0a6      	sub	sp, #152	@ 0x98
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007fdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007fee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff fe7f 	bl	8007cf8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008008:	2301      	movs	r3, #1
 800800a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800800c:	2300      	movs	r3, #0
 800800e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8008010:	2300      	movs	r3, #0
 8008012:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800801c:	2300      	movs	r3, #0
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008026:	2301      	movs	r3, #1
 8008028:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800802a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800802e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008030:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008034:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800803a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800803c:	2301      	movs	r3, #1
 800803e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8008042:	2300      	movs	r3, #0
 8008044:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ff05 	bl	8007e60 <ETH_SetDMAConfig>
}
 8008056:	bf00      	nop
 8008058:	3798      	adds	r7, #152	@ 0x98
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3305      	adds	r3, #5
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	3204      	adds	r2, #4
 8008078:	7812      	ldrb	r2, [r2, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4b11      	ldr	r3, [pc, #68]	@ (80080c8 <ETH_MACAddressConfig+0x68>)
 8008082:	4413      	add	r3, r2
 8008084:	461a      	mov	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3303      	adds	r3, #3
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	061a      	lsls	r2, r3, #24
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3302      	adds	r3, #2
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	4313      	orrs	r3, r2
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	7812      	ldrb	r2, [r2, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <ETH_MACAddressConfig+0x6c>)
 80080b2:	4413      	add	r3, r2
 80080b4:	461a      	mov	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6013      	str	r3, [r2, #0]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40028040 	.word	0x40028040
 80080cc:	40028044 	.word	0x40028044

080080d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80080d8:	2300      	movs	r3, #0
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	e03e      	b.n	800815c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68d9      	ldr	r1, [r3, #12]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	440b      	add	r3, r1
 80080ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2200      	movs	r2, #0
 80080fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	3206      	adds	r2, #6
 8008110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d80c      	bhi.n	8008140 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68d9      	ldr	r1, [r3, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	440b      	add	r3, r1
 8008138:	461a      	mov	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	60da      	str	r2, [r3, #12]
 800813e:	e004      	b.n	800814a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	461a      	mov	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3301      	adds	r3, #1
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b03      	cmp	r3, #3
 8008160:	d9bd      	bls.n	80080de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008174:	611a      	str	r2, [r3, #16]
}
 8008176:	bf00      	nop
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	e048      	b.n	8008222 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6919      	ldr	r1, [r3, #16]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	440b      	add	r3, r1
 80081a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2200      	movs	r2, #0
 80081ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2200      	movs	r2, #0
 80081b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	3212      	adds	r2, #18
 80081ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d80c      	bhi.n	8008212 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6919      	ldr	r1, [r3, #16]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	440b      	add	r3, r1
 800820a:	461a      	mov	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	60da      	str	r2, [r3, #12]
 8008210:	e004      	b.n	800821c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	461a      	mov	r2, r3
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b03      	cmp	r3, #3
 8008226:	d9b3      	bls.n	8008190 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691a      	ldr	r2, [r3, #16]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008252:	60da      	str	r2, [r3, #12]
}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008260:	b480      	push	{r7}
 8008262:	b089      	sub	sp, #36	@ 0x24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800826a:	2300      	movs	r3, #0
 800826c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008272:	2300      	movs	r3, #0
 8008274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	e175      	b.n	800856c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008280:	2201      	movs	r2, #1
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4013      	ands	r3, r2
 8008292:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	429a      	cmp	r2, r3
 800829a:	f040 8164 	bne.w	8008566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d005      	beq.n	80082b6 <HAL_GPIO_Init+0x56>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d130      	bne.n	8008318 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	2203      	movs	r2, #3
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	43db      	mvns	r3, r3
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	4013      	ands	r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	4313      	orrs	r3, r2
 80082de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082ec:	2201      	movs	r2, #1
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	43db      	mvns	r3, r3
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	4013      	ands	r3, r2
 80082fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	091b      	lsrs	r3, r3, #4
 8008302:	f003 0201 	and.w	r2, r3, #1
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	4313      	orrs	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f003 0303 	and.w	r3, r3, #3
 8008320:	2b03      	cmp	r3, #3
 8008322:	d017      	beq.n	8008354 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	2203      	movs	r2, #3
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4013      	ands	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	4313      	orrs	r3, r2
 800834c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d123      	bne.n	80083a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	08da      	lsrs	r2, r3, #3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3208      	adds	r2, #8
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	220f      	movs	r2, #15
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	43db      	mvns	r3, r3
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4013      	ands	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	fa02 f303 	lsl.w	r3, r2, r3
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	4313      	orrs	r3, r2
 8008398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	08da      	lsrs	r2, r3, #3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3208      	adds	r2, #8
 80083a2:	69b9      	ldr	r1, [r7, #24]
 80083a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	2203      	movs	r2, #3
 80083b4:	fa02 f303 	lsl.w	r3, r2, r3
 80083b8:	43db      	mvns	r3, r3
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	4013      	ands	r3, r2
 80083be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f003 0203 	and.w	r2, r3, #3
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80be 	beq.w	8008566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083ea:	4b66      	ldr	r3, [pc, #408]	@ (8008584 <HAL_GPIO_Init+0x324>)
 80083ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ee:	4a65      	ldr	r2, [pc, #404]	@ (8008584 <HAL_GPIO_Init+0x324>)
 80083f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80083f6:	4b63      	ldr	r3, [pc, #396]	@ (8008584 <HAL_GPIO_Init+0x324>)
 80083f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008402:	4a61      	ldr	r2, [pc, #388]	@ (8008588 <HAL_GPIO_Init+0x328>)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	089b      	lsrs	r3, r3, #2
 8008408:	3302      	adds	r3, #2
 800840a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	220f      	movs	r2, #15
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	43db      	mvns	r3, r3
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	4013      	ands	r3, r2
 8008424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a58      	ldr	r2, [pc, #352]	@ (800858c <HAL_GPIO_Init+0x32c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d037      	beq.n	800849e <HAL_GPIO_Init+0x23e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a57      	ldr	r2, [pc, #348]	@ (8008590 <HAL_GPIO_Init+0x330>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d031      	beq.n	800849a <HAL_GPIO_Init+0x23a>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a56      	ldr	r2, [pc, #344]	@ (8008594 <HAL_GPIO_Init+0x334>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d02b      	beq.n	8008496 <HAL_GPIO_Init+0x236>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a55      	ldr	r2, [pc, #340]	@ (8008598 <HAL_GPIO_Init+0x338>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d025      	beq.n	8008492 <HAL_GPIO_Init+0x232>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a54      	ldr	r2, [pc, #336]	@ (800859c <HAL_GPIO_Init+0x33c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01f      	beq.n	800848e <HAL_GPIO_Init+0x22e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a53      	ldr	r2, [pc, #332]	@ (80085a0 <HAL_GPIO_Init+0x340>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d019      	beq.n	800848a <HAL_GPIO_Init+0x22a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a52      	ldr	r2, [pc, #328]	@ (80085a4 <HAL_GPIO_Init+0x344>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <HAL_GPIO_Init+0x226>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a51      	ldr	r2, [pc, #324]	@ (80085a8 <HAL_GPIO_Init+0x348>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00d      	beq.n	8008482 <HAL_GPIO_Init+0x222>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a50      	ldr	r2, [pc, #320]	@ (80085ac <HAL_GPIO_Init+0x34c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d007      	beq.n	800847e <HAL_GPIO_Init+0x21e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a4f      	ldr	r2, [pc, #316]	@ (80085b0 <HAL_GPIO_Init+0x350>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d101      	bne.n	800847a <HAL_GPIO_Init+0x21a>
 8008476:	2309      	movs	r3, #9
 8008478:	e012      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 800847a:	230a      	movs	r3, #10
 800847c:	e010      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 800847e:	2308      	movs	r3, #8
 8008480:	e00e      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 8008482:	2307      	movs	r3, #7
 8008484:	e00c      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 8008486:	2306      	movs	r3, #6
 8008488:	e00a      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 800848a:	2305      	movs	r3, #5
 800848c:	e008      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 800848e:	2304      	movs	r3, #4
 8008490:	e006      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 8008492:	2303      	movs	r3, #3
 8008494:	e004      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 8008496:	2302      	movs	r3, #2
 8008498:	e002      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <HAL_GPIO_Init+0x240>
 800849e:	2300      	movs	r3, #0
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	f002 0203 	and.w	r2, r2, #3
 80084a6:	0092      	lsls	r2, r2, #2
 80084a8:	4093      	lsls	r3, r2
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80084b0:	4935      	ldr	r1, [pc, #212]	@ (8008588 <HAL_GPIO_Init+0x328>)
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	089b      	lsrs	r3, r3, #2
 80084b6:	3302      	adds	r3, #2
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084be:	4b3d      	ldr	r3, [pc, #244]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	43db      	mvns	r3, r3
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	4013      	ands	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084e2:	4a34      	ldr	r2, [pc, #208]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084e8:	4b32      	ldr	r3, [pc, #200]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	4013      	ands	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800850c:	4a29      	ldr	r2, [pc, #164]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008512:	4b28      	ldr	r3, [pc, #160]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	43db      	mvns	r3, r3
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	4013      	ands	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008536:	4a1f      	ldr	r2, [pc, #124]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800853c:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	43db      	mvns	r3, r3
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	4013      	ands	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008560:	4a14      	ldr	r2, [pc, #80]	@ (80085b4 <HAL_GPIO_Init+0x354>)
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	3301      	adds	r3, #1
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2b0f      	cmp	r3, #15
 8008570:	f67f ae86 	bls.w	8008280 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	3724      	adds	r7, #36	@ 0x24
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40023800 	.word	0x40023800
 8008588:	40013800 	.word	0x40013800
 800858c:	40020000 	.word	0x40020000
 8008590:	40020400 	.word	0x40020400
 8008594:	40020800 	.word	0x40020800
 8008598:	40020c00 	.word	0x40020c00
 800859c:	40021000 	.word	0x40021000
 80085a0:	40021400 	.word	0x40021400
 80085a4:	40021800 	.word	0x40021800
 80085a8:	40021c00 	.word	0x40021c00
 80085ac:	40022000 	.word	0x40022000
 80085b0:	40022400 	.word	0x40022400
 80085b4:	40013c00 	.word	0x40013c00

080085b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	887b      	ldrh	r3, [r7, #2]
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085d0:	2301      	movs	r3, #1
 80085d2:	73fb      	strb	r3, [r7, #15]
 80085d4:	e001      	b.n	80085da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	807b      	strh	r3, [r7, #2]
 80085f4:	4613      	mov	r3, r2
 80085f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085f8:	787b      	ldrb	r3, [r7, #1]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085fe:	887a      	ldrh	r2, [r7, #2]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008604:	e003      	b.n	800860e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008606:	887b      	ldrh	r3, [r7, #2]
 8008608:	041a      	lsls	r2, r3, #16
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	619a      	str	r2, [r3, #24]
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b086      	sub	sp, #24
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4618      	mov	r0, r3
 8008632:	f009 f951 	bl	80118d8 <USB_GetMode>
 8008636:	4603      	mov	r3, r0
 8008638:	2b01      	cmp	r3, #1
 800863a:	f040 80fb 	bne.w	8008834 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f009 f914 	bl	8011870 <USB_ReadInterrupts>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80f1 	beq.w	8008832 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f009 f90b 	bl	8011870 <USB_ReadInterrupts>
 800865a:	4603      	mov	r3, r0
 800865c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008660:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008664:	d104      	bne.n	8008670 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800866e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f009 f8fb 	bl	8011870 <USB_ReadInterrupts>
 800867a:	4603      	mov	r3, r0
 800867c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008684:	d104      	bne.n	8008690 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800868e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f009 f8eb 	bl	8011870 <USB_ReadInterrupts>
 800869a:	4603      	mov	r3, r0
 800869c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086a4:	d104      	bne.n	80086b0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80086ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f009 f8db 	bl	8011870 <USB_ReadInterrupts>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d103      	bne.n	80086cc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2202      	movs	r2, #2
 80086ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f009 f8cd 	bl	8011870 <USB_ReadInterrupts>
 80086d6:	4603      	mov	r3, r0
 80086d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086e0:	d120      	bne.n	8008724 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80086ea:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d113      	bne.n	8008724 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80086fc:	2110      	movs	r1, #16
 80086fe:	6938      	ldr	r0, [r7, #16]
 8008700:	f008 fffe 	bl	8011700 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008704:	6938      	ldr	r0, [r7, #16]
 8008706:	f009 f82d 	bl	8011764 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7a5b      	ldrb	r3, [r3, #9]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d105      	bne.n	800871e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2101      	movs	r1, #1
 8008718:	4618      	mov	r0, r3
 800871a:	f009 f8eb 	bl	80118f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f00e ffd4 	bl	80176cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4618      	mov	r0, r3
 800872a:	f009 f8a1 	bl	8011870 <USB_ReadInterrupts>
 800872e:	4603      	mov	r3, r0
 8008730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008738:	d102      	bne.n	8008740 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fca1 	bl	800a082 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4618      	mov	r0, r3
 8008746:	f009 f893 	bl	8011870 <USB_ReadInterrupts>
 800874a:	4603      	mov	r3, r0
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b08      	cmp	r3, #8
 8008752:	d106      	bne.n	8008762 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f00e ff9d 	bl	8017694 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2208      	movs	r2, #8
 8008760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f009 f882 	bl	8011870 <USB_ReadInterrupts>
 800876c:	4603      	mov	r3, r0
 800876e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008776:	d139      	bne.n	80087ec <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f009 f8f6 	bl	801196e <USB_HC_ReadInterrupt>
 8008782:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e025      	b.n	80087d6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	fa22 f303 	lsr.w	r3, r2, r3
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d018      	beq.n	80087d0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087b4:	d106      	bne.n	80087c4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f859 	bl	8008874 <HCD_HC_IN_IRQHandler>
 80087c2:	e005      	b.n	80087d0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 febb 	bl	8009546 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3301      	adds	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	795b      	ldrb	r3, [r3, #5]
 80087da:	461a      	mov	r2, r3
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4293      	cmp	r3, r2
 80087e0:	d3d3      	bcc.n	800878a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80087ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f009 f83d 	bl	8011870 <USB_ReadInterrupts>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b10      	cmp	r3, #16
 80087fe:	d101      	bne.n	8008804 <HAL_HCD_IRQHandler+0x1ea>
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <HAL_HCD_IRQHandler+0x1ec>
 8008804:	2300      	movs	r3, #0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d014      	beq.n	8008834 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	699a      	ldr	r2, [r3, #24]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0210 	bic.w	r2, r2, #16
 8008818:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fb52 	bl	8009ec4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0210 	orr.w	r2, r2, #16
 800882e:	619a      	str	r2, [r3, #24]
 8008830:	e000      	b.n	8008834 <HAL_HCD_IRQHandler+0x21a>
      return;
 8008832:	bf00      	nop
    }
  }
}
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_HCD_Stop+0x16>
 800884c:	2302      	movs	r3, #2
 800884e:	e00d      	b.n	800886c <HAL_HCD_Stop+0x32>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f009 f9b7 	bl	8011bd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f008 ffff 	bl	8011896 <USB_ReadChInterrupts>
 8008898:	4603      	mov	r3, r0
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d11a      	bne.n	80088d8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ae:	461a      	mov	r2, r3
 80088b0:	2304      	movs	r3, #4
 80088b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4613      	mov	r3, r2
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	334d      	adds	r3, #77	@ 0x4d
 80088c4:	2207      	movs	r2, #7
 80088c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f009 f85d 	bl	8011990 <USB_HC_Halt>
 80088d6:	e09e      	b.n	8008a16 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	78fa      	ldrb	r2, [r7, #3]
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f008 ffd8 	bl	8011896 <USB_ReadChInterrupts>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f0:	d11b      	bne.n	800892a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fe:	461a      	mov	r2, r3
 8008900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008904:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	334d      	adds	r3, #77	@ 0x4d
 8008916:	2208      	movs	r2, #8
 8008918:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	78fa      	ldrb	r2, [r7, #3]
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f009 f834 	bl	8011990 <USB_HC_Halt>
 8008928:	e075      	b.n	8008a16 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f008 ffaf 	bl	8011896 <USB_ReadChInterrupts>
 8008938:	4603      	mov	r3, r0
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b08      	cmp	r3, #8
 8008940:	d11a      	bne.n	8008978 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894e:	461a      	mov	r2, r3
 8008950:	2308      	movs	r3, #8
 8008952:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	1a9b      	subs	r3, r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	334d      	adds	r3, #77	@ 0x4d
 8008964:	2206      	movs	r2, #6
 8008966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f009 f80d 	bl	8011990 <USB_HC_Halt>
 8008976:	e04e      	b.n	8008a16 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f008 ff88 	bl	8011896 <USB_ReadChInterrupts>
 8008986:	4603      	mov	r3, r0
 8008988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800898c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008990:	d11b      	bne.n	80089ca <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	461a      	mov	r2, r3
 80089a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	334d      	adds	r3, #77	@ 0x4d
 80089b6:	2209      	movs	r2, #9
 80089b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f008 ffe4 	bl	8011990 <USB_HC_Halt>
 80089c8:	e025      	b.n	8008a16 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f008 ff5f 	bl	8011896 <USB_ReadChInterrupts>
 80089d8:	4603      	mov	r3, r0
 80089da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089de:	2b80      	cmp	r3, #128	@ 0x80
 80089e0:	d119      	bne.n	8008a16 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ee:	461a      	mov	r2, r3
 80089f0:	2380      	movs	r3, #128	@ 0x80
 80089f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	334d      	adds	r3, #77	@ 0x4d
 8008a04:	2207      	movs	r2, #7
 8008a06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f008 ffbd 	bl	8011990 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f008 ff39 	bl	8011896 <USB_ReadChInterrupts>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2e:	d112      	bne.n	8008a56 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f008 ffa9 	bl	8011990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a50:	6093      	str	r3, [r2, #8]
 8008a52:	f000 bd75 	b.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f008 ff19 	bl	8011896 <USB_ReadChInterrupts>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	f040 8128 	bne.w	8008cc0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	2320      	movs	r3, #32
 8008a80:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	1a9b      	subs	r3, r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	440b      	add	r3, r1
 8008a90:	331b      	adds	r3, #27
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d119      	bne.n	8008acc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	331b      	adds	r3, #27
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	78fa      	ldrb	r2, [r7, #3]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aca:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	799b      	ldrb	r3, [r3, #6]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01b      	beq.n	8008b0c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	3330      	adds	r3, #48	@ 0x30
 8008ae4:	6819      	ldr	r1, [r3, #0]
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	1ac9      	subs	r1, r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4403      	add	r3, r0
 8008b08:	3338      	adds	r3, #56	@ 0x38
 8008b0a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	334d      	adds	r3, #77	@ 0x4d
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3344      	adds	r3, #68	@ 0x44
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b40:	461a      	mov	r2, r3
 8008b42:	2301      	movs	r3, #1
 8008b44:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	1a9b      	subs	r3, r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	440b      	add	r3, r1
 8008b54:	3326      	adds	r3, #38	@ 0x26
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008b5c:	78fa      	ldrb	r2, [r7, #3]
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	3326      	adds	r3, #38	@ 0x26
 8008b6c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d110      	bne.n	8008b94 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f008 ff08 	bl	8011990 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	2310      	movs	r3, #16
 8008b90:	6093      	str	r3, [r2, #8]
 8008b92:	e03d      	b.n	8008c10 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	1a9b      	subs	r3, r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	3326      	adds	r3, #38	@ 0x26
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d00a      	beq.n	8008bc0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008baa:	78fa      	ldrb	r2, [r7, #3]
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	1a9b      	subs	r3, r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3326      	adds	r3, #38	@ 0x26
 8008bba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d127      	bne.n	8008c10 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	0151      	lsls	r1, r2, #5
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	440a      	add	r2, r1
 8008bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bde:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	334c      	adds	r3, #76	@ 0x4c
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	440b      	add	r3, r1
 8008c02:	334c      	adds	r3, #76	@ 0x4c
 8008c04:	781a      	ldrb	r2, [r3, #0]
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f00e fd6c 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	799b      	ldrb	r3, [r3, #6]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d13b      	bne.n	8008c90 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	3338      	adds	r3, #56	@ 0x38
 8008c28:	6819      	ldr	r1, [r3, #0]
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4403      	add	r3, r0
 8008c38:	3328      	adds	r3, #40	@ 0x28
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	440b      	add	r3, r1
 8008c3e:	1e59      	subs	r1, r3, #1
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4613      	mov	r3, r2
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4403      	add	r3, r0
 8008c4e:	3328      	adds	r3, #40	@ 0x28
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 8470 	beq.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4613      	mov	r3, r2
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	333c      	adds	r3, #60	@ 0x3c
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	f083 0301 	eor.w	r3, r3, #1
 8008c78:	b2d8      	uxtb	r0, r3
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	333c      	adds	r3, #60	@ 0x3c
 8008c88:	4602      	mov	r2, r0
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	f000 bc58 	b.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008c90:	78fa      	ldrb	r2, [r7, #3]
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	4613      	mov	r3, r2
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	333c      	adds	r3, #60	@ 0x3c
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	f083 0301 	eor.w	r3, r3, #1
 8008ca8:	b2d8      	uxtb	r0, r3
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	333c      	adds	r3, #60	@ 0x3c
 8008cb8:	4602      	mov	r2, r0
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	f000 bc40 	b.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f008 fde4 	bl	8011896 <USB_ReadChInterrupts>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d131      	bne.n	8008d3c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	6879      	ldr	r1, [r7, #4]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	440b      	add	r3, r1
 8008cf8:	331a      	adds	r3, #26
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	f040 841f 	bne.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	331b      	adds	r3, #27
 8008d12:	2201      	movs	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	334d      	adds	r3, #77	@ 0x4d
 8008d26:	2203      	movs	r2, #3
 8008d28:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	78fa      	ldrb	r2, [r7, #3]
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f008 fe2c 	bl	8011990 <USB_HC_Halt>
 8008d38:	f000 bc02 	b.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f008 fda6 	bl	8011896 <USB_ReadChInterrupts>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	f040 8305 	bne.w	8009360 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d62:	461a      	mov	r2, r3
 8008d64:	2302      	movs	r3, #2
 8008d66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008d68:	78fa      	ldrb	r2, [r7, #3]
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	011b      	lsls	r3, r3, #4
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	334d      	adds	r3, #77	@ 0x4d
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d114      	bne.n	8008da8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	1a9b      	subs	r3, r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	334d      	adds	r3, #77	@ 0x4d
 8008d8e:	2202      	movs	r2, #2
 8008d90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	334c      	adds	r3, #76	@ 0x4c
 8008da2:	2201      	movs	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e2cc      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008da8:	78fa      	ldrb	r2, [r7, #3]
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	4613      	mov	r3, r2
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	334d      	adds	r3, #77	@ 0x4d
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b06      	cmp	r3, #6
 8008dbc:	d114      	bne.n	8008de8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	6879      	ldr	r1, [r7, #4]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	1a9b      	subs	r3, r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	334d      	adds	r3, #77	@ 0x4d
 8008dce:	2202      	movs	r2, #2
 8008dd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008dd2:	78fa      	ldrb	r2, [r7, #3]
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	334c      	adds	r3, #76	@ 0x4c
 8008de2:	2205      	movs	r2, #5
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	e2ac      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	334d      	adds	r3, #77	@ 0x4d
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b07      	cmp	r3, #7
 8008dfc:	d00b      	beq.n	8008e16 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	334d      	adds	r3, #77	@ 0x4d
 8008e0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008e10:	2b09      	cmp	r3, #9
 8008e12:	f040 80a6 	bne.w	8008f62 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	334d      	adds	r3, #77	@ 0x4d
 8008e26:	2202      	movs	r2, #2
 8008e28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	1a9b      	subs	r3, r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	3344      	adds	r3, #68	@ 0x44
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	1c59      	adds	r1, r3, #1
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4403      	add	r3, r0
 8008e4a:	3344      	adds	r3, #68	@ 0x44
 8008e4c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	1a9b      	subs	r3, r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	440b      	add	r3, r1
 8008e5c:	3344      	adds	r3, #68	@ 0x44
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d943      	bls.n	8008eec <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	1a9b      	subs	r3, r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	3344      	adds	r3, #68	@ 0x44
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	440b      	add	r3, r1
 8008e86:	331a      	adds	r3, #26
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d123      	bne.n	8008ed6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	331b      	adds	r3, #27
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	331c      	adds	r3, #28
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ed4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	334c      	adds	r3, #76	@ 0x4c
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008eea:	e229      	b.n	8009340 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	334c      	adds	r3, #76	@ 0x4c
 8008efc:	2202      	movs	r2, #2
 8008efe:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4613      	mov	r3, r2
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	3326      	adds	r3, #38	@ 0x26
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00b      	beq.n	8008f2e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	1a9b      	subs	r3, r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	440b      	add	r3, r1
 8008f24:	3326      	adds	r3, #38	@ 0x26
 8008f26:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	f040 8209 	bne.w	8009340 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f44:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f4c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008f60:	e1ee      	b.n	8009340 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	1a9b      	subs	r3, r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	334d      	adds	r3, #77	@ 0x4d
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	f040 80c8 	bne.w	800910a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	440b      	add	r3, r1
 8008f88:	334d      	adds	r3, #77	@ 0x4d
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	331b      	adds	r3, #27
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	f040 81ce 	bne.w	8009342 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	3326      	adds	r3, #38	@ 0x26
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d16b      	bne.n	8009094 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	1a9b      	subs	r3, r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	3348      	adds	r3, #72	@ 0x48
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	1a9b      	subs	r3, r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4403      	add	r3, r0
 8008fdc:	3348      	adds	r3, #72	@ 0x48
 8008fde:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008fe0:	78fa      	ldrb	r2, [r7, #3]
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	1a9b      	subs	r3, r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	440b      	add	r3, r1
 8008fee:	3348      	adds	r3, #72	@ 0x48
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d943      	bls.n	800907e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	011b      	lsls	r3, r3, #4
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	3348      	adds	r3, #72	@ 0x48
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	1a9b      	subs	r3, r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	331b      	adds	r3, #27
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	3344      	adds	r3, #68	@ 0x44
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d809      	bhi.n	8009048 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	4613      	mov	r3, r2
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	1a9b      	subs	r3, r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	331c      	adds	r3, #28
 8009044:	2201      	movs	r2, #1
 8009046:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	4413      	add	r3, r2
 8009050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	440a      	add	r2, r1
 800905e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009066:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8009068:	78fa      	ldrb	r2, [r7, #3]
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	334c      	adds	r3, #76	@ 0x4c
 8009078:	2204      	movs	r2, #4
 800907a:	701a      	strb	r2, [r3, #0]
 800907c:	e014      	b.n	80090a8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800907e:	78fa      	ldrb	r2, [r7, #3]
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	4613      	mov	r3, r2
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	1a9b      	subs	r3, r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	440b      	add	r3, r1
 800908c:	334c      	adds	r3, #76	@ 0x4c
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e009      	b.n	80090a8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	334c      	adds	r3, #76	@ 0x4c
 80090a4:	2202      	movs	r2, #2
 80090a6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	3326      	adds	r3, #38	@ 0x26
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00b      	beq.n	80090d6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3326      	adds	r3, #38	@ 0x26
 80090ce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	f040 8136 	bne.w	8009342 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009102:	461a      	mov	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	e11b      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800910a:	78fa      	ldrb	r2, [r7, #3]
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	440b      	add	r3, r1
 8009118:	334d      	adds	r3, #77	@ 0x4d
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b03      	cmp	r3, #3
 800911e:	f040 8081 	bne.w	8009224 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009122:	78fa      	ldrb	r2, [r7, #3]
 8009124:	6879      	ldr	r1, [r7, #4]
 8009126:	4613      	mov	r3, r2
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	334d      	adds	r3, #77	@ 0x4d
 8009132:	2202      	movs	r2, #2
 8009134:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	1a9b      	subs	r3, r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	331b      	adds	r3, #27
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b01      	cmp	r3, #1
 800914a:	f040 80fa 	bne.w	8009342 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	4613      	mov	r3, r2
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	440b      	add	r3, r1
 800915c:	334c      	adds	r3, #76	@ 0x4c
 800915e:	2202      	movs	r2, #2
 8009160:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	0151      	lsls	r1, r2, #5
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	440a      	add	r2, r1
 8009178:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800917c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009180:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4413      	add	r3, r2
 800918a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	78fa      	ldrb	r2, [r7, #3]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	440a      	add	r2, r1
 8009198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800919c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	0151      	lsls	r1, r2, #5
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	440a      	add	r2, r1
 80091b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091bc:	f023 0320 	bic.w	r3, r3, #32
 80091c0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4613      	mov	r3, r2
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	3326      	adds	r3, #38	@ 0x26
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	1a9b      	subs	r3, r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3326      	adds	r3, #38	@ 0x26
 80091e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	f040 80a9 	bne.w	8009342 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009206:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800920e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	4413      	add	r3, r2
 8009218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800921c:	461a      	mov	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	e08e      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009224:	78fa      	ldrb	r2, [r7, #3]
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	4613      	mov	r3, r2
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	1a9b      	subs	r3, r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	440b      	add	r3, r1
 8009232:	334d      	adds	r3, #77	@ 0x4d
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b04      	cmp	r3, #4
 8009238:	d143      	bne.n	80092c2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	1a9b      	subs	r3, r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	334d      	adds	r3, #77	@ 0x4d
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800924e:	78fa      	ldrb	r2, [r7, #3]
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	4613      	mov	r3, r2
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	334c      	adds	r3, #76	@ 0x4c
 800925e:	2202      	movs	r2, #2
 8009260:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	3326      	adds	r3, #38	@ 0x26
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00a      	beq.n	800928e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	3326      	adds	r3, #38	@ 0x26
 8009288:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800928a:	2b02      	cmp	r3, #2
 800928c:	d159      	bne.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	4413      	add	r3, r2
 8009296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80092a4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092ac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ba:	461a      	mov	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	e03f      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	6879      	ldr	r1, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	440b      	add	r3, r1
 80092d0:	334d      	adds	r3, #77	@ 0x4d
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d126      	bne.n	8009326 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4613      	mov	r3, r2
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	1a9b      	subs	r3, r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	440b      	add	r3, r1
 80092e6:	334d      	adds	r3, #77	@ 0x4d
 80092e8:	2202      	movs	r2, #2
 80092ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	3344      	adds	r3, #68	@ 0x44
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	1c59      	adds	r1, r3, #1
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4613      	mov	r3, r2
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4403      	add	r3, r0
 800930c:	3344      	adds	r3, #68	@ 0x44
 800930e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	334c      	adds	r3, #76	@ 0x4c
 8009320:	2204      	movs	r2, #4
 8009322:	701a      	strb	r2, [r3, #0]
 8009324:	e00d      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	440b      	add	r3, r1
 8009334:	334d      	adds	r3, #77	@ 0x4d
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b02      	cmp	r3, #2
 800933a:	f000 8100 	beq.w	800953e <HCD_HC_IN_IRQHandler+0xcca>
 800933e:	e000      	b.n	8009342 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009340:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	334c      	adds	r3, #76	@ 0x4c
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f00e f9c5 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800935e:	e0ef      	b.n	8009540 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	78fa      	ldrb	r2, [r7, #3]
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f008 fa94 	bl	8011896 <USB_ReadChInterrupts>
 800936e:	4603      	mov	r3, r0
 8009370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009374:	2b40      	cmp	r3, #64	@ 0x40
 8009376:	d12f      	bne.n	80093d8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	4413      	add	r3, r2
 8009380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009384:	461a      	mov	r2, r3
 8009386:	2340      	movs	r3, #64	@ 0x40
 8009388:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	334d      	adds	r3, #77	@ 0x4d
 800939a:	2205      	movs	r2, #5
 800939c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	1a9b      	subs	r3, r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	331a      	adds	r3, #26
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80093b4:	78fa      	ldrb	r2, [r7, #3]
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	3344      	adds	r3, #68	@ 0x44
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	78fa      	ldrb	r2, [r7, #3]
 80093ce:	4611      	mov	r1, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f008 fadd 	bl	8011990 <USB_HC_Halt>
 80093d6:	e0b3      	b.n	8009540 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f008 fa58 	bl	8011896 <USB_ReadChInterrupts>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f003 0310 	and.w	r3, r3, #16
 80093ec:	2b10      	cmp	r3, #16
 80093ee:	f040 80a7 	bne.w	8009540 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80093f2:	78fa      	ldrb	r2, [r7, #3]
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	440b      	add	r3, r1
 8009400:	3326      	adds	r3, #38	@ 0x26
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b03      	cmp	r3, #3
 8009406:	d11b      	bne.n	8009440 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	1a9b      	subs	r3, r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3344      	adds	r3, #68	@ 0x44
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	334d      	adds	r3, #77	@ 0x4d
 800942c:	2204      	movs	r2, #4
 800942e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f008 faa9 	bl	8011990 <USB_HC_Halt>
 800943e:	e03f      	b.n	80094c0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	4613      	mov	r3, r2
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	1a9b      	subs	r3, r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	440b      	add	r3, r1
 800944e:	3326      	adds	r3, #38	@ 0x26
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	3326      	adds	r3, #38	@ 0x26
 8009466:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009468:	2b02      	cmp	r3, #2
 800946a:	d129      	bne.n	80094c0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800946c:	78fa      	ldrb	r2, [r7, #3]
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	4613      	mov	r3, r2
 8009472:	011b      	lsls	r3, r3, #4
 8009474:	1a9b      	subs	r3, r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	3344      	adds	r3, #68	@ 0x44
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	799b      	ldrb	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <HCD_HC_IN_IRQHandler+0xc2a>
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	4613      	mov	r3, r2
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	1a9b      	subs	r3, r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	440b      	add	r3, r1
 8009496:	331b      	adds	r3, #27
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d110      	bne.n	80094c0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	011b      	lsls	r3, r3, #4
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	334d      	adds	r3, #77	@ 0x4d
 80094ae:	2204      	movs	r2, #4
 80094b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	78fa      	ldrb	r2, [r7, #3]
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f008 fa68 	bl	8011990 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80094c0:	78fa      	ldrb	r2, [r7, #3]
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	4613      	mov	r3, r2
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	1a9b      	subs	r3, r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	440b      	add	r3, r1
 80094ce:	331b      	adds	r3, #27
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d129      	bne.n	800952a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	4613      	mov	r3, r2
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	440b      	add	r3, r1
 80094e4:	331b      	adds	r3, #27
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80094ea:	78fb      	ldrb	r3, [r7, #3]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009508:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	4413      	add	r3, r2
 8009512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	440a      	add	r2, r1
 8009520:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009524:	f043 0320 	orr.w	r3, r3, #32
 8009528:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	4413      	add	r3, r2
 8009532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009536:	461a      	mov	r2, r3
 8009538:	2310      	movs	r3, #16
 800953a:	6093      	str	r3, [r2, #8]
 800953c:	e000      	b.n	8009540 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800953e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	4611      	mov	r1, r2
 8009564:	4618      	mov	r0, r3
 8009566:	f008 f996 	bl	8011896 <USB_ReadChInterrupts>
 800956a:	4603      	mov	r3, r0
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b04      	cmp	r3, #4
 8009572:	d11b      	bne.n	80095ac <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	4413      	add	r3, r2
 800957c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009580:	461a      	mov	r2, r3
 8009582:	2304      	movs	r3, #4
 8009584:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009586:	78fa      	ldrb	r2, [r7, #3]
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	4613      	mov	r3, r2
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	1a9b      	subs	r3, r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	440b      	add	r3, r1
 8009594:	334d      	adds	r3, #77	@ 0x4d
 8009596:	2207      	movs	r2, #7
 8009598:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	78fa      	ldrb	r2, [r7, #3]
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f008 f9f4 	bl	8011990 <USB_HC_Halt>
 80095a8:	f000 bc89 	b.w	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f008 f96e 	bl	8011896 <USB_ReadChInterrupts>
 80095ba:	4603      	mov	r3, r0
 80095bc:	f003 0320 	and.w	r3, r3, #32
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	f040 8082 	bne.w	80096ca <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095d2:	461a      	mov	r2, r3
 80095d4:	2320      	movs	r3, #32
 80095d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	3319      	adds	r3, #25
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d124      	bne.n	8009638 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	011b      	lsls	r3, r3, #4
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	3319      	adds	r3, #25
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	334c      	adds	r3, #76	@ 0x4c
 8009612:	2202      	movs	r2, #2
 8009614:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	6879      	ldr	r1, [r7, #4]
 800961a:	4613      	mov	r3, r2
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	1a9b      	subs	r3, r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	440b      	add	r3, r1
 8009624:	334d      	adds	r3, #77	@ 0x4d
 8009626:	2203      	movs	r2, #3
 8009628:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	78fa      	ldrb	r2, [r7, #3]
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f008 f9ac 	bl	8011990 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009638:	78fa      	ldrb	r2, [r7, #3]
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	4613      	mov	r3, r2
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	331a      	adds	r3, #26
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b01      	cmp	r3, #1
 800964c:	f040 8437 	bne.w	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
 8009650:	78fa      	ldrb	r2, [r7, #3]
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4613      	mov	r3, r2
 8009656:	011b      	lsls	r3, r3, #4
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	331b      	adds	r3, #27
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 842b 	bne.w	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	3326      	adds	r3, #38	@ 0x26
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d009      	beq.n	8009692 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	331b      	adds	r3, #27
 800968e:	2201      	movs	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	334d      	adds	r3, #77	@ 0x4d
 80096a2:	2203      	movs	r2, #3
 80096a4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f008 f96e 	bl	8011990 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80096b4:	78fa      	ldrb	r2, [r7, #3]
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	4613      	mov	r3, r2
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	1a9b      	subs	r3, r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	3344      	adds	r3, #68	@ 0x44
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e3f9      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f008 f8df 	bl	8011896 <USB_ReadChInterrupts>
 80096d8:	4603      	mov	r3, r0
 80096da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e2:	d111      	bne.n	8009708 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f0:	461a      	mov	r2, r3
 80096f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096f6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f008 f945 	bl	8011990 <USB_HC_Halt>
 8009706:	e3da      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f008 f8c0 	bl	8011896 <USB_ReadChInterrupts>
 8009716:	4603      	mov	r3, r0
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b01      	cmp	r3, #1
 800971e:	d168      	bne.n	80097f2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009720:	78fa      	ldrb	r2, [r7, #3]
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4613      	mov	r3, r2
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	3344      	adds	r3, #68	@ 0x44
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f008 f8aa 	bl	8011896 <USB_ReadChInterrupts>
 8009742:	4603      	mov	r3, r0
 8009744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009748:	2b40      	cmp	r3, #64	@ 0x40
 800974a:	d112      	bne.n	8009772 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	1a9b      	subs	r3, r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	3319      	adds	r3, #25
 800975c:	2201      	movs	r2, #1
 800975e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	4413      	add	r3, r2
 8009768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800976c:	461a      	mov	r2, r3
 800976e:	2340      	movs	r3, #64	@ 0x40
 8009770:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	011b      	lsls	r3, r3, #4
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	331b      	adds	r3, #27
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d019      	beq.n	80097bc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	331b      	adds	r3, #27
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ba:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c8:	461a      	mov	r2, r3
 80097ca:	2301      	movs	r3, #1
 80097cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80097ce:	78fa      	ldrb	r2, [r7, #3]
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	334d      	adds	r3, #77	@ 0x4d
 80097de:	2201      	movs	r2, #1
 80097e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	78fa      	ldrb	r2, [r7, #3]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f008 f8d0 	bl	8011990 <USB_HC_Halt>
 80097f0:	e365      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	78fa      	ldrb	r2, [r7, #3]
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f008 f84b 	bl	8011896 <USB_ReadChInterrupts>
 8009800:	4603      	mov	r3, r0
 8009802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009806:	2b40      	cmp	r3, #64	@ 0x40
 8009808:	d139      	bne.n	800987e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	6879      	ldr	r1, [r7, #4]
 800980e:	4613      	mov	r3, r2
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	334d      	adds	r3, #77	@ 0x4d
 800981a:	2205      	movs	r2, #5
 800981c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800981e:	78fa      	ldrb	r2, [r7, #3]
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4613      	mov	r3, r2
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	331a      	adds	r3, #26
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d109      	bne.n	8009848 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009834:	78fa      	ldrb	r2, [r7, #3]
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	4613      	mov	r3, r2
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	440b      	add	r3, r1
 8009842:	3319      	adds	r3, #25
 8009844:	2201      	movs	r2, #1
 8009846:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8009848:	78fa      	ldrb	r2, [r7, #3]
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	3344      	adds	r3, #68	@ 0x44
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f008 f893 	bl	8011990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	4413      	add	r3, r2
 8009872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009876:	461a      	mov	r2, r3
 8009878:	2340      	movs	r3, #64	@ 0x40
 800987a:	6093      	str	r3, [r2, #8]
 800987c:	e31f      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	78fa      	ldrb	r2, [r7, #3]
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f008 f805 	bl	8011896 <USB_ReadChInterrupts>
 800988c:	4603      	mov	r3, r0
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b08      	cmp	r3, #8
 8009894:	d11a      	bne.n	80098cc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	4413      	add	r3, r2
 800989e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a2:	461a      	mov	r2, r3
 80098a4:	2308      	movs	r3, #8
 80098a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	334d      	adds	r3, #77	@ 0x4d
 80098b8:	2206      	movs	r2, #6
 80098ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	78fa      	ldrb	r2, [r7, #3]
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f008 f863 	bl	8011990 <USB_HC_Halt>
 80098ca:	e2f8      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f007 ffde 	bl	8011896 <USB_ReadChInterrupts>
 80098da:	4603      	mov	r3, r0
 80098dc:	f003 0310 	and.w	r3, r3, #16
 80098e0:	2b10      	cmp	r3, #16
 80098e2:	d144      	bne.n	800996e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	4613      	mov	r3, r2
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	1a9b      	subs	r3, r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	3344      	adds	r3, #68	@ 0x44
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	4613      	mov	r3, r2
 80098fe:	011b      	lsls	r3, r3, #4
 8009900:	1a9b      	subs	r3, r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	440b      	add	r3, r1
 8009906:	334d      	adds	r3, #77	@ 0x4d
 8009908:	2204      	movs	r2, #4
 800990a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	4613      	mov	r3, r2
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	3319      	adds	r3, #25
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d114      	bne.n	800994c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	4613      	mov	r3, r2
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	1a9b      	subs	r3, r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	440b      	add	r3, r1
 8009930:	3318      	adds	r3, #24
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d109      	bne.n	800994c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	3319      	adds	r3, #25
 8009948:	2201      	movs	r2, #1
 800994a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	78fa      	ldrb	r2, [r7, #3]
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f008 f81b 	bl	8011990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	4413      	add	r3, r2
 8009962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009966:	461a      	mov	r2, r3
 8009968:	2310      	movs	r3, #16
 800996a:	6093      	str	r3, [r2, #8]
 800996c:	e2a7      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f007 ff8d 	bl	8011896 <USB_ReadChInterrupts>
 800997c:	4603      	mov	r3, r0
 800997e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009982:	2b80      	cmp	r3, #128	@ 0x80
 8009984:	f040 8083 	bne.w	8009a8e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	799b      	ldrb	r3, [r3, #6]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d111      	bne.n	80099b4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009990:	78fa      	ldrb	r2, [r7, #3]
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	4613      	mov	r3, r2
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	440b      	add	r3, r1
 800999e:	334d      	adds	r3, #77	@ 0x4d
 80099a0:	2207      	movs	r2, #7
 80099a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f007 ffef 	bl	8011990 <USB_HC_Halt>
 80099b2:	e062      	b.n	8009a7a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4613      	mov	r3, r2
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	1a9b      	subs	r3, r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	3344      	adds	r3, #68	@ 0x44
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	1c59      	adds	r1, r3, #1
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	1a9b      	subs	r3, r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4403      	add	r3, r0
 80099d4:	3344      	adds	r3, #68	@ 0x44
 80099d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4613      	mov	r3, r2
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	1a9b      	subs	r3, r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	3344      	adds	r3, #68	@ 0x44
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d922      	bls.n	8009a34 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80099ee:	78fa      	ldrb	r2, [r7, #3]
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	011b      	lsls	r3, r3, #4
 80099f6:	1a9b      	subs	r3, r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	3344      	adds	r3, #68	@ 0x44
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	4613      	mov	r3, r2
 8009a08:	011b      	lsls	r3, r3, #4
 8009a0a:	1a9b      	subs	r3, r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	440b      	add	r3, r1
 8009a10:	334c      	adds	r3, #76	@ 0x4c
 8009a12:	2204      	movs	r2, #4
 8009a14:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	1a9b      	subs	r3, r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	440b      	add	r3, r1
 8009a24:	334c      	adds	r3, #76	@ 0x4c
 8009a26:	781a      	ldrb	r2, [r3, #0]
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f00d fe5b 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009a32:	e022      	b.n	8009a7a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	1a9b      	subs	r3, r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	440b      	add	r3, r1
 8009a42:	334c      	adds	r3, #76	@ 0x4c
 8009a44:	2202      	movs	r2, #2
 8009a46:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a74:	461a      	mov	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a86:	461a      	mov	r2, r3
 8009a88:	2380      	movs	r3, #128	@ 0x80
 8009a8a:	6093      	str	r3, [r2, #8]
 8009a8c:	e217      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	4611      	mov	r1, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f007 fefd 	bl	8011896 <USB_ReadChInterrupts>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa6:	d11b      	bne.n	8009ae0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	334d      	adds	r3, #77	@ 0x4d
 8009ab8:	2209      	movs	r2, #9
 8009aba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f007 ff63 	bl	8011990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009aca:	78fb      	ldrb	r3, [r7, #3]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009adc:	6093      	str	r3, [r2, #8]
 8009ade:	e1ee      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f007 fed4 	bl	8011896 <USB_ReadChInterrupts>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	f040 81df 	bne.w	8009eb8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b06:	461a      	mov	r2, r3
 8009b08:	2302      	movs	r3, #2
 8009b0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4613      	mov	r3, r2
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	334d      	adds	r3, #77	@ 0x4d
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	f040 8093 	bne.w	8009c4a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b24:	78fa      	ldrb	r2, [r7, #3]
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	011b      	lsls	r3, r3, #4
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	440b      	add	r3, r1
 8009b32:	334d      	adds	r3, #77	@ 0x4d
 8009b34:	2202      	movs	r2, #2
 8009b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	011b      	lsls	r3, r3, #4
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	334c      	adds	r3, #76	@ 0x4c
 8009b48:	2201      	movs	r2, #1
 8009b4a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4613      	mov	r3, r2
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	3326      	adds	r3, #38	@ 0x26
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d00b      	beq.n	8009b7a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009b62:	78fa      	ldrb	r2, [r7, #3]
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	1a9b      	subs	r3, r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	3326      	adds	r3, #38	@ 0x26
 8009b72:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	f040 8190 	bne.w	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	799b      	ldrb	r3, [r3, #6]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d115      	bne.n	8009bae <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	333d      	adds	r3, #61	@ 0x3d
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	f083 0301 	eor.w	r3, r3, #1
 8009b9a:	b2d8      	uxtb	r0, r3
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	1a9b      	subs	r3, r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	333d      	adds	r3, #61	@ 0x3d
 8009baa:	4602      	mov	r2, r0
 8009bac:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	799b      	ldrb	r3, [r3, #6]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	f040 8171 	bne.w	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
 8009bb8:	78fa      	ldrb	r2, [r7, #3]
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	3334      	adds	r3, #52	@ 0x34
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 8165 	beq.w	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	3334      	adds	r3, #52	@ 0x34
 8009be0:	6819      	ldr	r1, [r3, #0]
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4613      	mov	r3, r2
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	1a9b      	subs	r3, r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4403      	add	r3, r0
 8009bf0:	3328      	adds	r3, #40	@ 0x28
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	440b      	add	r3, r1
 8009bf6:	1e59      	subs	r1, r3, #1
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4403      	add	r3, r0
 8009c06:	3328      	adds	r3, #40	@ 0x28
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c0e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 813f 	beq.w	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009c1c:	78fa      	ldrb	r2, [r7, #3]
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	1a9b      	subs	r3, r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	333d      	adds	r3, #61	@ 0x3d
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	f083 0301 	eor.w	r3, r3, #1
 8009c34:	b2d8      	uxtb	r0, r3
 8009c36:	6879      	ldr	r1, [r7, #4]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	440b      	add	r3, r1
 8009c42:	333d      	adds	r3, #61	@ 0x3d
 8009c44:	4602      	mov	r2, r0
 8009c46:	701a      	strb	r2, [r3, #0]
 8009c48:	e127      	b.n	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009c4a:	78fa      	ldrb	r2, [r7, #3]
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	011b      	lsls	r3, r3, #4
 8009c52:	1a9b      	subs	r3, r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	334d      	adds	r3, #77	@ 0x4d
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d120      	bne.n	8009ca2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	4613      	mov	r3, r2
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	1a9b      	subs	r3, r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	440b      	add	r3, r1
 8009c6e:	334d      	adds	r3, #77	@ 0x4d
 8009c70:	2202      	movs	r2, #2
 8009c72:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009c74:	78fa      	ldrb	r2, [r7, #3]
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	331b      	adds	r3, #27
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	f040 8107 	bne.w	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009c8c:	78fa      	ldrb	r2, [r7, #3]
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	334c      	adds	r3, #76	@ 0x4c
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	e0fb      	b.n	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	011b      	lsls	r3, r3, #4
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	334d      	adds	r3, #77	@ 0x4d
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d13a      	bne.n	8009d2e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009cb8:	78fa      	ldrb	r2, [r7, #3]
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	440b      	add	r3, r1
 8009cc6:	334d      	adds	r3, #77	@ 0x4d
 8009cc8:	2202      	movs	r2, #2
 8009cca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	1a9b      	subs	r3, r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	440b      	add	r3, r1
 8009cda:	334c      	adds	r3, #76	@ 0x4c
 8009cdc:	2202      	movs	r2, #2
 8009cde:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	011b      	lsls	r3, r3, #4
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	331b      	adds	r3, #27
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	f040 80d1 	bne.w	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009cf8:	78fa      	ldrb	r2, [r7, #3]
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	331b      	adds	r3, #27
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	78fa      	ldrb	r2, [r7, #3]
 8009d1c:	0151      	lsls	r1, r2, #5
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	440a      	add	r2, r1
 8009d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d2a:	6053      	str	r3, [r2, #4]
 8009d2c:	e0b5      	b.n	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	1a9b      	subs	r3, r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	334d      	adds	r3, #77	@ 0x4d
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b05      	cmp	r3, #5
 8009d42:	d114      	bne.n	8009d6e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	1a9b      	subs	r3, r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	334d      	adds	r3, #77	@ 0x4d
 8009d54:	2202      	movs	r2, #2
 8009d56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	440b      	add	r3, r1
 8009d66:	334c      	adds	r3, #76	@ 0x4c
 8009d68:	2202      	movs	r2, #2
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	e095      	b.n	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009d6e:	78fa      	ldrb	r2, [r7, #3]
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	4613      	mov	r3, r2
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	1a9b      	subs	r3, r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	334d      	adds	r3, #77	@ 0x4d
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b06      	cmp	r3, #6
 8009d82:	d114      	bne.n	8009dae <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	1a9b      	subs	r3, r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	440b      	add	r3, r1
 8009d92:	334d      	adds	r3, #77	@ 0x4d
 8009d94:	2202      	movs	r2, #2
 8009d96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009d98:	78fa      	ldrb	r2, [r7, #3]
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	1a9b      	subs	r3, r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	440b      	add	r3, r1
 8009da6:	334c      	adds	r3, #76	@ 0x4c
 8009da8:	2205      	movs	r2, #5
 8009daa:	701a      	strb	r2, [r3, #0]
 8009dac:	e075      	b.n	8009e9a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4613      	mov	r3, r2
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	334d      	adds	r3, #77	@ 0x4d
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b07      	cmp	r3, #7
 8009dc2:	d00a      	beq.n	8009dda <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009dc4:	78fa      	ldrb	r2, [r7, #3]
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	334d      	adds	r3, #77	@ 0x4d
 8009dd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009dd6:	2b09      	cmp	r3, #9
 8009dd8:	d170      	bne.n	8009ebc <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	4613      	mov	r3, r2
 8009de0:	011b      	lsls	r3, r3, #4
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	440b      	add	r3, r1
 8009de8:	334d      	adds	r3, #77	@ 0x4d
 8009dea:	2202      	movs	r2, #2
 8009dec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	440b      	add	r3, r1
 8009dfc:	3344      	adds	r3, #68	@ 0x44
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	1c59      	adds	r1, r3, #1
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4403      	add	r3, r0
 8009e0e:	3344      	adds	r3, #68	@ 0x44
 8009e10:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	6879      	ldr	r1, [r7, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	011b      	lsls	r3, r3, #4
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	440b      	add	r3, r1
 8009e20:	3344      	adds	r3, #68	@ 0x44
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d914      	bls.n	8009e52 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009e28:	78fa      	ldrb	r2, [r7, #3]
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	1a9b      	subs	r3, r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	440b      	add	r3, r1
 8009e36:	3344      	adds	r3, #68	@ 0x44
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009e3c:	78fa      	ldrb	r2, [r7, #3]
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	4613      	mov	r3, r2
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	1a9b      	subs	r3, r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	334c      	adds	r3, #76	@ 0x4c
 8009e4c:	2204      	movs	r2, #4
 8009e4e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e50:	e022      	b.n	8009e98 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	334c      	adds	r3, #76	@ 0x4c
 8009e62:	2202      	movs	r2, #2
 8009e64:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e7c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e84:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e92:	461a      	mov	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e98:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009e9a:	78fa      	ldrb	r2, [r7, #3]
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	011b      	lsls	r3, r3, #4
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	440b      	add	r3, r1
 8009ea8:	334c      	adds	r3, #76	@ 0x4c
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f00d fc19 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009eb6:	e002      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009eb8:	bf00      	nop
 8009eba:	e000      	b.n	8009ebe <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009ebc:	bf00      	nop
  }
}
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	@ 0x28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	f003 030f 	and.w	r3, r3, #15
 8009ee4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	0c5b      	lsrs	r3, r3, #17
 8009eea:	f003 030f 	and.w	r3, r3, #15
 8009eee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	091b      	lsrs	r3, r3, #4
 8009ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ef8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d004      	beq.n	8009f0a <HCD_RXQLVL_IRQHandler+0x46>
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2b05      	cmp	r3, #5
 8009f04:	f000 80b6 	beq.w	800a074 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009f08:	e0b7      	b.n	800a07a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80b3 	beq.w	800a078 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	69ba      	ldr	r2, [r7, #24]
 8009f16:	4613      	mov	r3, r2
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	1a9b      	subs	r3, r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	332c      	adds	r3, #44	@ 0x2c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 80a7 	beq.w	800a078 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	011b      	lsls	r3, r3, #4
 8009f32:	1a9b      	subs	r3, r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	440b      	add	r3, r1
 8009f38:	3338      	adds	r3, #56	@ 0x38
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	18d1      	adds	r1, r2, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	4613      	mov	r3, r2
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4403      	add	r3, r0
 8009f4e:	3334      	adds	r3, #52	@ 0x34
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4299      	cmp	r1, r3
 8009f54:	f200 8083 	bhi.w	800a05e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	4613      	mov	r3, r2
 8009f62:	011b      	lsls	r3, r3, #4
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	440b      	add	r3, r1
 8009f6a:	332c      	adds	r3, #44	@ 0x2c
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	b292      	uxth	r2, r2
 8009f72:	4619      	mov	r1, r3
 8009f74:	f007 fc24 	bl	80117c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	440b      	add	r3, r1
 8009f86:	332c      	adds	r3, #44	@ 0x2c
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	18d1      	adds	r1, r2, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	4613      	mov	r3, r2
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	1a9b      	subs	r3, r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4403      	add	r3, r0
 8009f9c:	332c      	adds	r3, #44	@ 0x2c
 8009f9e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	1a9b      	subs	r3, r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	3338      	adds	r3, #56	@ 0x38
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	18d1      	adds	r1, r2, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4403      	add	r3, r0
 8009fc4:	3338      	adds	r3, #56	@ 0x38
 8009fc6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	0cdb      	lsrs	r3, r3, #19
 8009fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fdc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	1a9b      	subs	r3, r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	440b      	add	r3, r1
 8009fec:	3328      	adds	r3, #40	@ 0x28
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d13f      	bne.n	800a078 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d03c      	beq.n	800a078 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a014:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a01c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	4413      	add	r3, r2
 800a026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a02a:	461a      	mov	r2, r3
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	4613      	mov	r3, r2
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	1a9b      	subs	r3, r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	440b      	add	r3, r1
 800a03e:	333c      	adds	r3, #60	@ 0x3c
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	f083 0301 	eor.w	r3, r3, #1
 800a046:	b2d8      	uxtb	r0, r3
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	4613      	mov	r3, r2
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	333c      	adds	r3, #60	@ 0x3c
 800a058:	4602      	mov	r2, r0
 800a05a:	701a      	strb	r2, [r3, #0]
      break;
 800a05c:	e00c      	b.n	800a078 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	4613      	mov	r3, r2
 800a064:	011b      	lsls	r3, r3, #4
 800a066:	1a9b      	subs	r3, r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	334c      	adds	r3, #76	@ 0x4c
 800a06e:	2204      	movs	r2, #4
 800a070:	701a      	strb	r2, [r3, #0]
      break;
 800a072:	e001      	b.n	800a078 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800a074:	bf00      	nop
 800a076:	e000      	b.n	800a07a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800a078:	bf00      	nop
  }
}
 800a07a:	bf00      	nop
 800a07c:	3728      	adds	r7, #40	@ 0x28
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b086      	sub	sp, #24
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a0ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d10b      	bne.n	800a0d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d102      	bne.n	800a0ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f00d faf3 	bl	80176b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d132      	bne.n	800a142 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f043 0308 	orr.w	r3, r3, #8
 800a0e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d126      	bne.n	800a13c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	7a5b      	ldrb	r3, [r3, #9]
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d113      	bne.n	800a11e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800a0fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a100:	d106      	bne.n	800a110 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2102      	movs	r1, #2
 800a108:	4618      	mov	r0, r3
 800a10a:	f007 fbf3 	bl	80118f4 <USB_InitFSLSPClkSel>
 800a10e:	e011      	b.n	800a134 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2101      	movs	r1, #1
 800a116:	4618      	mov	r0, r3
 800a118:	f007 fbec 	bl	80118f4 <USB_InitFSLSPClkSel>
 800a11c:	e00a      	b.n	800a134 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	79db      	ldrb	r3, [r3, #7]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d106      	bne.n	800a134 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a12c:	461a      	mov	r2, r3
 800a12e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a132:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f00d fae9 	bl	801770c <HAL_HCD_PortEnabled_Callback>
 800a13a:	e002      	b.n	800a142 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f00d faf3 	bl	8017728 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f003 0320 	and.w	r3, r3, #32
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d103      	bne.n	800a154 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f043 0320 	orr.w	r3, r3, #32
 800a152:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a15a:	461a      	mov	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	6013      	str	r3, [r2, #0]
}
 800a160:	bf00      	nop
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e08b      	b.n	800a292 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7fa fa40 	bl	8004614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2224      	movs	r2, #36	@ 0x24
 800a198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0201 	bic.w	r2, r2, #1
 800a1aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a1b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a1c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d107      	bne.n	800a1e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1de:	609a      	str	r2, [r3, #8]
 800a1e0:	e006      	b.n	800a1f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a1ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d108      	bne.n	800a20a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a206:	605a      	str	r2, [r3, #4]
 800a208:	e007      	b.n	800a21a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6859      	ldr	r1, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	4b1d      	ldr	r3, [pc, #116]	@ (800a29c <HAL_I2C_Init+0x134>)
 800a226:	430b      	orrs	r3, r1
 800a228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691a      	ldr	r2, [r3, #16]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69d9      	ldr	r1, [r3, #28]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f042 0201 	orr.w	r2, r2, #1
 800a272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	02008000 	.word	0x02008000

0800a2a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	d138      	bne.n	800a328 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d101      	bne.n	800a2c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e032      	b.n	800a32a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2224      	movs	r2, #36	@ 0x24
 800a2d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0201 	bic.w	r2, r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a2f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6819      	ldr	r1, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0201 	orr.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	e000      	b.n	800a32a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a328:	2302      	movs	r3, #2
  }
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a336:	b480      	push	{r7}
 800a338:	b085      	sub	sp, #20
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b20      	cmp	r3, #32
 800a34a:	d139      	bne.n	800a3c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a356:	2302      	movs	r3, #2
 800a358:	e033      	b.n	800a3c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2224      	movs	r2, #36	@ 0x24
 800a366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0201 	bic.w	r2, r2, #1
 800a378:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a388:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4313      	orrs	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0201 	orr.w	r2, r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e000      	b.n	800a3c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e08f      	b.n	800a500 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d106      	bne.n	800a3fa <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7fa f9b5 	bl	8004764 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a410:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6999      	ldr	r1, [r3, #24]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a426:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	041b      	lsls	r3, r3, #16
 800a43c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6999      	ldr	r1, [r3, #24]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	430a      	orrs	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a19      	ldr	r1, [r3, #32]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	430a      	orrs	r2, r1
 800a460:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	430a      	orrs	r2, r1
 800a476:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47c:	041b      	lsls	r3, r3, #16
 800a47e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a4b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f042 0206 	orr.w	r2, r2, #6
 800a4dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	699a      	ldr	r2, [r3, #24]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0201 	orr.w	r2, r2, #1
 800a4ec:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a516:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a51e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d023      	beq.n	800a572 <HAL_LTDC_IRQHandler+0x6a>
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01e      	beq.n	800a572 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0204 	bic.w	r2, r2, #4
 800a542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2204      	movs	r2, #4
 800a54a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a552:	f043 0201 	orr.w	r2, r3, #1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2204      	movs	r2, #4
 800a560:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f86f 	bl	800a650 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d023      	beq.n	800a5c4 <HAL_LTDC_IRQHandler+0xbc>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01e      	beq.n	800a5c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0202 	bic.w	r2, r2, #2
 800a594:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2202      	movs	r2, #2
 800a59c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a5a4:	f043 0202 	orr.w	r2, r3, #2
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2204      	movs	r2, #4
 800a5b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f846 	bl	800a650 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01b      	beq.n	800a606 <HAL_LTDC_IRQHandler+0xfe>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d016      	beq.n	800a606 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0201 	bic.w	r2, r2, #1
 800a5e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f82f 	bl	800a664 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01b      	beq.n	800a648 <HAL_LTDC_IRQHandler+0x140>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d016      	beq.n	800a648 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f022 0208 	bic.w	r2, r2, #8
 800a628:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2208      	movs	r2, #8
 800a630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f818 	bl	800a678 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a648:	bf00      	nop
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a68c:	b5b0      	push	{r4, r5, r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_LTDC_ConfigLayer+0x1a>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02c      	b.n	800a700 <HAL_LTDC_ConfigLayer+0x74>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2134      	movs	r1, #52	@ 0x34
 800a6bc:	fb01 f303 	mul.w	r3, r1, r3
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	4614      	mov	r4, r2
 800a6ca:	461d      	mov	r5, r3
 800a6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f811 	bl	800a708 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bdb0      	pop	{r4, r5, r7, pc}

0800a708 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a708:	b480      	push	{r7}
 800a70a:	b089      	sub	sp, #36	@ 0x24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	0c1b      	lsrs	r3, r3, #16
 800a720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a724:	4413      	add	r3, r2
 800a726:	041b      	lsls	r3, r3, #16
 800a728:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	01db      	lsls	r3, r3, #7
 800a734:	4413      	add	r3, r2
 800a736:	3384      	adds	r3, #132	@ 0x84
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	6812      	ldr	r2, [r2, #0]
 800a73e:	4611      	mov	r1, r2
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	01d2      	lsls	r2, r2, #7
 800a744:	440a      	add	r2, r1
 800a746:	3284      	adds	r2, #132	@ 0x84
 800a748:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a74c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	0c1b      	lsrs	r3, r3, #16
 800a75a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a75e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a760:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	01db      	lsls	r3, r3, #7
 800a76c:	440b      	add	r3, r1
 800a76e:	3384      	adds	r3, #132	@ 0x84
 800a770:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a776:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	68da      	ldr	r2, [r3, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a786:	4413      	add	r3, r2
 800a788:	041b      	lsls	r3, r3, #16
 800a78a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	01db      	lsls	r3, r3, #7
 800a796:	4413      	add	r3, r2
 800a798:	3384      	adds	r3, #132	@ 0x84
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	6812      	ldr	r2, [r2, #0]
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	01d2      	lsls	r2, r2, #7
 800a7a6:	440a      	add	r2, r1
 800a7a8:	3284      	adds	r2, #132	@ 0x84
 800a7aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a7ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7be:	4413      	add	r3, r2
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	01db      	lsls	r3, r3, #7
 800a7cc:	440b      	add	r3, r1
 800a7ce:	3384      	adds	r3, #132	@ 0x84
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	01db      	lsls	r3, r3, #7
 800a7e2:	4413      	add	r3, r2
 800a7e4:	3384      	adds	r3, #132	@ 0x84
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	6812      	ldr	r2, [r2, #0]
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	01d2      	lsls	r2, r2, #7
 800a7f2:	440a      	add	r2, r1
 800a7f4:	3284      	adds	r2, #132	@ 0x84
 800a7f6:	f023 0307 	bic.w	r3, r3, #7
 800a7fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	461a      	mov	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	01db      	lsls	r3, r3, #7
 800a806:	4413      	add	r3, r2
 800a808:	3384      	adds	r3, #132	@ 0x84
 800a80a:	461a      	mov	r2, r3
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a822:	041b      	lsls	r3, r3, #16
 800a824:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	061b      	lsls	r3, r3, #24
 800a82c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a834:	461a      	mov	r2, r3
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	431a      	orrs	r2, r3
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	431a      	orrs	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	01db      	lsls	r3, r3, #7
 800a848:	440b      	add	r3, r1
 800a84a:	3384      	adds	r3, #132	@ 0x84
 800a84c:	4619      	mov	r1, r3
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	01db      	lsls	r3, r3, #7
 800a85e:	4413      	add	r3, r2
 800a860:	3384      	adds	r3, #132	@ 0x84
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	4611      	mov	r1, r2
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	01d2      	lsls	r2, r2, #7
 800a86e:	440a      	add	r2, r1
 800a870:	3284      	adds	r2, #132	@ 0x84
 800a872:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a876:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	461a      	mov	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	01db      	lsls	r3, r3, #7
 800a882:	4413      	add	r3, r2
 800a884:	3384      	adds	r3, #132	@ 0x84
 800a886:	461a      	mov	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	01db      	lsls	r3, r3, #7
 800a898:	4413      	add	r3, r2
 800a89a:	3384      	adds	r3, #132	@ 0x84
 800a89c:	69da      	ldr	r2, [r3, #28]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	01db      	lsls	r3, r3, #7
 800a8a8:	440b      	add	r3, r1
 800a8aa:	3384      	adds	r3, #132	@ 0x84
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a9ec <LTDC_SetConfig+0x2e4>)
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	68f9      	ldr	r1, [r7, #12]
 800a8be:	6809      	ldr	r1, [r1, #0]
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	01c9      	lsls	r1, r1, #7
 800a8c6:	4401      	add	r1, r0
 800a8c8:	3184      	adds	r1, #132	@ 0x84
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	01db      	lsls	r3, r3, #7
 800a8d8:	4413      	add	r3, r2
 800a8da:	3384      	adds	r3, #132	@ 0x84
 800a8dc:	461a      	mov	r2, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	61fb      	str	r3, [r7, #28]
 800a8f0:	e01b      	b.n	800a92a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d102      	bne.n	800a900 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	61fb      	str	r3, [r7, #28]
 800a8fe:	e014      	b.n	800a92a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b04      	cmp	r3, #4
 800a906:	d00b      	beq.n	800a920 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d007      	beq.n	800a920 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a914:	2b03      	cmp	r3, #3
 800a916:	d003      	beq.n	800a920 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a91c:	2b07      	cmp	r3, #7
 800a91e:	d102      	bne.n	800a926 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a920:	2302      	movs	r3, #2
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	e001      	b.n	800a92a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a926:	2301      	movs	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	01db      	lsls	r3, r3, #7
 800a934:	4413      	add	r3, r2
 800a936:	3384      	adds	r3, #132	@ 0x84
 800a938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	6812      	ldr	r2, [r2, #0]
 800a93e:	4611      	mov	r1, r2
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	01d2      	lsls	r2, r2, #7
 800a944:	440a      	add	r2, r1
 800a946:	3284      	adds	r2, #132	@ 0x84
 800a948:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a94c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	6859      	ldr	r1, [r3, #4]
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	1acb      	subs	r3, r1, r3
 800a964:	69f9      	ldr	r1, [r7, #28]
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a96c:	68f9      	ldr	r1, [r7, #12]
 800a96e:	6809      	ldr	r1, [r1, #0]
 800a970:	4608      	mov	r0, r1
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	01c9      	lsls	r1, r1, #7
 800a976:	4401      	add	r1, r0
 800a978:	3184      	adds	r1, #132	@ 0x84
 800a97a:	4313      	orrs	r3, r2
 800a97c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	01db      	lsls	r3, r3, #7
 800a988:	4413      	add	r3, r2
 800a98a:	3384      	adds	r3, #132	@ 0x84
 800a98c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4619      	mov	r1, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	01db      	lsls	r3, r3, #7
 800a998:	440b      	add	r3, r1
 800a99a:	3384      	adds	r3, #132	@ 0x84
 800a99c:	4619      	mov	r1, r3
 800a99e:	4b14      	ldr	r3, [pc, #80]	@ (800a9f0 <LTDC_SetConfig+0x2e8>)
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	01db      	lsls	r3, r3, #7
 800a9ae:	4413      	add	r3, r2
 800a9b0:	3384      	adds	r3, #132	@ 0x84
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	01db      	lsls	r3, r3, #7
 800a9c4:	4413      	add	r3, r2
 800a9c6:	3384      	adds	r3, #132	@ 0x84
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	01d2      	lsls	r2, r2, #7
 800a9d4:	440a      	add	r2, r1
 800a9d6:	3284      	adds	r2, #132	@ 0x84
 800a9d8:	f043 0301 	orr.w	r3, r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
}
 800a9de:	bf00      	nop
 800a9e0:	3724      	adds	r7, #36	@ 0x24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	fffff8f8 	.word	0xfffff8f8
 800a9f0:	fffff800 	.word	0xfffff800

0800a9f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f8:	4b05      	ldr	r3, [pc, #20]	@ (800aa10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a04      	ldr	r2, [pc, #16]	@ (800aa10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa02:	6013      	str	r3, [r2, #0]
}
 800aa04:	bf00      	nop
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	40007000 	.word	0x40007000

0800aa14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aa1e:	4b23      	ldr	r3, [pc, #140]	@ (800aaac <HAL_PWREx_EnableOverDrive+0x98>)
 800aa20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa22:	4a22      	ldr	r2, [pc, #136]	@ (800aaac <HAL_PWREx_EnableOverDrive+0x98>)
 800aa24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa28:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa2a:	4b20      	ldr	r3, [pc, #128]	@ (800aaac <HAL_PWREx_EnableOverDrive+0x98>)
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aa36:	4b1e      	ldr	r3, [pc, #120]	@ (800aab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a1d      	ldr	r2, [pc, #116]	@ (800aab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa42:	f7fb fd49 	bl	80064d8 <HAL_GetTick>
 800aa46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa48:	e009      	b.n	800aa5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa4a:	f7fb fd45 	bl	80064d8 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa58:	d901      	bls.n	800aa5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e022      	b.n	800aaa4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa5e:	4b14      	ldr	r3, [pc, #80]	@ (800aab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa6a:	d1ee      	bne.n	800aa4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aa6c:	4b10      	ldr	r3, [pc, #64]	@ (800aab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0f      	ldr	r2, [pc, #60]	@ (800aab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa78:	f7fb fd2e 	bl	80064d8 <HAL_GetTick>
 800aa7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa7e:	e009      	b.n	800aa94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa80:	f7fb fd2a 	bl	80064d8 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa8e:	d901      	bls.n	800aa94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e007      	b.n	800aaa4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa94:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaa0:	d1ee      	bne.n	800aa80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	40023800 	.word	0x40023800
 800aab0:	40007000 	.word	0x40007000

0800aab4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aabc:	f7fb fd0c 	bl	80064d8 <HAL_GetTick>
 800aac0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e067      	b.n	800ab9c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10b      	bne.n	800aaf0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7f9 ff07 	bl	80048f4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800aae6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f85e 	bl	800abac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	021a      	lsls	r2, r3, #8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	2120      	movs	r1, #32
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f856 	bl	800abc8 <QSPI_WaitFlagStateUntilTimeout>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ab20:	7afb      	ldrb	r3, [r7, #11]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d135      	bne.n	800ab92 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	4b1d      	ldr	r3, [pc, #116]	@ (800aba4 <HAL_QSPI_Init+0xf0>)
 800ab2e:	4013      	ands	r3, r2
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	6852      	ldr	r2, [r2, #4]
 800ab34:	0611      	lsls	r1, r2, #24
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	68d2      	ldr	r2, [r2, #12]
 800ab3a:	4311      	orrs	r1, r2
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	69d2      	ldr	r2, [r2, #28]
 800ab40:	4311      	orrs	r1, r2
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6a12      	ldr	r2, [r2, #32]
 800ab46:	4311      	orrs	r1, r2
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	4b14      	ldr	r3, [pc, #80]	@ (800aba8 <HAL_QSPI_Init+0xf4>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6912      	ldr	r2, [r2, #16]
 800ab5e:	0411      	lsls	r1, r2, #16
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	6952      	ldr	r2, [r2, #20]
 800ab64:	4311      	orrs	r1, r2
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	6992      	ldr	r2, [r2, #24]
 800ab6a:	4311      	orrs	r1, r2
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	430b      	orrs	r3, r1
 800ab72:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0201 	orr.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800ab9a:	7afb      	ldrb	r3, [r7, #11]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	00ffff2f 	.word	0x00ffff2f
 800aba8:	ffe0f8fe 	.word	0xffe0f8fe

0800abac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	4613      	mov	r3, r2
 800abd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800abd8:	e01a      	b.n	800ac10 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d016      	beq.n	800ac10 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abe2:	f7fb fc79 	bl	80064d8 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d302      	bcc.n	800abf8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10b      	bne.n	800ac10 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2204      	movs	r2, #4
 800abfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac04:	f043 0201 	orr.w	r2, r3, #1
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e00e      	b.n	800ac2e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bf14      	ite	ne
 800ac1e:	2301      	movne	r3, #1
 800ac20:	2300      	moveq	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d1d6      	bne.n	800abda <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ac40:	2300      	movs	r3, #0
 800ac42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e291      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0301 	and.w	r3, r3, #1
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 8087 	beq.w	800ad6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac5c:	4b96      	ldr	r3, [pc, #600]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	f003 030c 	and.w	r3, r3, #12
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d00c      	beq.n	800ac82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac68:	4b93      	ldr	r3, [pc, #588]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	f003 030c 	and.w	r3, r3, #12
 800ac70:	2b08      	cmp	r3, #8
 800ac72:	d112      	bne.n	800ac9a <HAL_RCC_OscConfig+0x62>
 800ac74:	4b90      	ldr	r3, [pc, #576]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac80:	d10b      	bne.n	800ac9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac82:	4b8d      	ldr	r3, [pc, #564]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d06c      	beq.n	800ad68 <HAL_RCC_OscConfig+0x130>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d168      	bne.n	800ad68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e26b      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aca2:	d106      	bne.n	800acb2 <HAL_RCC_OscConfig+0x7a>
 800aca4:	4b84      	ldr	r3, [pc, #528]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a83      	ldr	r2, [pc, #524]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	e02e      	b.n	800ad10 <HAL_RCC_OscConfig+0xd8>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10c      	bne.n	800acd4 <HAL_RCC_OscConfig+0x9c>
 800acba:	4b7f      	ldr	r3, [pc, #508]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a7e      	ldr	r2, [pc, #504]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	4b7c      	ldr	r3, [pc, #496]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a7b      	ldr	r2, [pc, #492]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800accc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	e01d      	b.n	800ad10 <HAL_RCC_OscConfig+0xd8>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acdc:	d10c      	bne.n	800acf8 <HAL_RCC_OscConfig+0xc0>
 800acde:	4b76      	ldr	r3, [pc, #472]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a75      	ldr	r2, [pc, #468]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ace4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ace8:	6013      	str	r3, [r2, #0]
 800acea:	4b73      	ldr	r3, [pc, #460]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a72      	ldr	r2, [pc, #456]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	e00b      	b.n	800ad10 <HAL_RCC_OscConfig+0xd8>
 800acf8:	4b6f      	ldr	r3, [pc, #444]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a6e      	ldr	r2, [pc, #440]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800acfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	4b6c      	ldr	r3, [pc, #432]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a6b      	ldr	r2, [pc, #428]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d013      	beq.n	800ad40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad18:	f7fb fbde 	bl	80064d8 <HAL_GetTick>
 800ad1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad1e:	e008      	b.n	800ad32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad20:	f7fb fbda 	bl	80064d8 <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	2b64      	cmp	r3, #100	@ 0x64
 800ad2c:	d901      	bls.n	800ad32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e21f      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad32:	4b61      	ldr	r3, [pc, #388]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0f0      	beq.n	800ad20 <HAL_RCC_OscConfig+0xe8>
 800ad3e:	e014      	b.n	800ad6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad40:	f7fb fbca 	bl	80064d8 <HAL_GetTick>
 800ad44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad46:	e008      	b.n	800ad5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad48:	f7fb fbc6 	bl	80064d8 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	2b64      	cmp	r3, #100	@ 0x64
 800ad54:	d901      	bls.n	800ad5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e20b      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad5a:	4b57      	ldr	r3, [pc, #348]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1f0      	bne.n	800ad48 <HAL_RCC_OscConfig+0x110>
 800ad66:	e000      	b.n	800ad6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d069      	beq.n	800ae4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad76:	4b50      	ldr	r3, [pc, #320]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f003 030c 	and.w	r3, r3, #12
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00b      	beq.n	800ad9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad82:	4b4d      	ldr	r3, [pc, #308]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f003 030c 	and.w	r3, r3, #12
 800ad8a:	2b08      	cmp	r3, #8
 800ad8c:	d11c      	bne.n	800adc8 <HAL_RCC_OscConfig+0x190>
 800ad8e:	4b4a      	ldr	r3, [pc, #296]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d116      	bne.n	800adc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad9a:	4b47      	ldr	r3, [pc, #284]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <HAL_RCC_OscConfig+0x17a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d001      	beq.n	800adb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e1df      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adb2:	4b41      	ldr	r3, [pc, #260]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	493d      	ldr	r1, [pc, #244]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adc6:	e040      	b.n	800ae4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d023      	beq.n	800ae18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800add0:	4b39      	ldr	r3, [pc, #228]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a38      	ldr	r2, [pc, #224]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800add6:	f043 0301 	orr.w	r3, r3, #1
 800adda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800addc:	f7fb fb7c 	bl	80064d8 <HAL_GetTick>
 800ade0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ade2:	e008      	b.n	800adf6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ade4:	f7fb fb78 	bl	80064d8 <HAL_GetTick>
 800ade8:	4602      	mov	r2, r0
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d901      	bls.n	800adf6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e1bd      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adf6:	4b30      	ldr	r3, [pc, #192]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0f0      	beq.n	800ade4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae02:	4b2d      	ldr	r3, [pc, #180]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4929      	ldr	r1, [pc, #164]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	600b      	str	r3, [r1, #0]
 800ae16:	e018      	b.n	800ae4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae18:	4b27      	ldr	r3, [pc, #156]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a26      	ldr	r2, [pc, #152]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae1e:	f023 0301 	bic.w	r3, r3, #1
 800ae22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae24:	f7fb fb58 	bl	80064d8 <HAL_GetTick>
 800ae28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae2a:	e008      	b.n	800ae3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae2c:	f7fb fb54 	bl	80064d8 <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e199      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae3e:	4b1e      	ldr	r3, [pc, #120]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1f0      	bne.n	800ae2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0308 	and.w	r3, r3, #8
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d038      	beq.n	800aec8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d019      	beq.n	800ae92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae5e:	4b16      	ldr	r3, [pc, #88]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae62:	4a15      	ldr	r2, [pc, #84]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae64:	f043 0301 	orr.w	r3, r3, #1
 800ae68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae6a:	f7fb fb35 	bl	80064d8 <HAL_GetTick>
 800ae6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae70:	e008      	b.n	800ae84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae72:	f7fb fb31 	bl	80064d8 <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d901      	bls.n	800ae84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e176      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae84:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0f0      	beq.n	800ae72 <HAL_RCC_OscConfig+0x23a>
 800ae90:	e01a      	b.n	800aec8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae92:	4b09      	ldr	r3, [pc, #36]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae96:	4a08      	ldr	r2, [pc, #32]	@ (800aeb8 <HAL_RCC_OscConfig+0x280>)
 800ae98:	f023 0301 	bic.w	r3, r3, #1
 800ae9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae9e:	f7fb fb1b 	bl	80064d8 <HAL_GetTick>
 800aea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aea4:	e00a      	b.n	800aebc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aea6:	f7fb fb17 	bl	80064d8 <HAL_GetTick>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d903      	bls.n	800aebc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e15c      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
 800aeb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aebc:	4b91      	ldr	r3, [pc, #580]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800aebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec0:	f003 0302 	and.w	r3, r3, #2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1ee      	bne.n	800aea6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0304 	and.w	r3, r3, #4
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80a4 	beq.w	800b01e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aed6:	4b8b      	ldr	r3, [pc, #556]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800aed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10d      	bne.n	800aefe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800aee2:	4b88      	ldr	r3, [pc, #544]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800aee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee6:	4a87      	ldr	r2, [pc, #540]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800aee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeec:	6413      	str	r3, [r2, #64]	@ 0x40
 800aeee:	4b85      	ldr	r3, [pc, #532]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800aef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aef6:	60bb      	str	r3, [r7, #8]
 800aef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aefa:	2301      	movs	r3, #1
 800aefc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aefe:	4b82      	ldr	r3, [pc, #520]	@ (800b108 <HAL_RCC_OscConfig+0x4d0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af06:	2b00      	cmp	r3, #0
 800af08:	d118      	bne.n	800af3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800af0a:	4b7f      	ldr	r3, [pc, #508]	@ (800b108 <HAL_RCC_OscConfig+0x4d0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a7e      	ldr	r2, [pc, #504]	@ (800b108 <HAL_RCC_OscConfig+0x4d0>)
 800af10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af16:	f7fb fadf 	bl	80064d8 <HAL_GetTick>
 800af1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af1c:	e008      	b.n	800af30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af1e:	f7fb fadb 	bl	80064d8 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b64      	cmp	r3, #100	@ 0x64
 800af2a:	d901      	bls.n	800af30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e120      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af30:	4b75      	ldr	r3, [pc, #468]	@ (800b108 <HAL_RCC_OscConfig+0x4d0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d106      	bne.n	800af52 <HAL_RCC_OscConfig+0x31a>
 800af44:	4b6f      	ldr	r3, [pc, #444]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af48:	4a6e      	ldr	r2, [pc, #440]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af4a:	f043 0301 	orr.w	r3, r3, #1
 800af4e:	6713      	str	r3, [r2, #112]	@ 0x70
 800af50:	e02d      	b.n	800afae <HAL_RCC_OscConfig+0x376>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10c      	bne.n	800af74 <HAL_RCC_OscConfig+0x33c>
 800af5a:	4b6a      	ldr	r3, [pc, #424]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af5e:	4a69      	ldr	r2, [pc, #420]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	6713      	str	r3, [r2, #112]	@ 0x70
 800af66:	4b67      	ldr	r3, [pc, #412]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af6a:	4a66      	ldr	r2, [pc, #408]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af6c:	f023 0304 	bic.w	r3, r3, #4
 800af70:	6713      	str	r3, [r2, #112]	@ 0x70
 800af72:	e01c      	b.n	800afae <HAL_RCC_OscConfig+0x376>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b05      	cmp	r3, #5
 800af7a:	d10c      	bne.n	800af96 <HAL_RCC_OscConfig+0x35e>
 800af7c:	4b61      	ldr	r3, [pc, #388]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af80:	4a60      	ldr	r2, [pc, #384]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af82:	f043 0304 	orr.w	r3, r3, #4
 800af86:	6713      	str	r3, [r2, #112]	@ 0x70
 800af88:	4b5e      	ldr	r3, [pc, #376]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af8c:	4a5d      	ldr	r2, [pc, #372]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	6713      	str	r3, [r2, #112]	@ 0x70
 800af94:	e00b      	b.n	800afae <HAL_RCC_OscConfig+0x376>
 800af96:	4b5b      	ldr	r3, [pc, #364]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af9a:	4a5a      	ldr	r2, [pc, #360]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800af9c:	f023 0301 	bic.w	r3, r3, #1
 800afa0:	6713      	str	r3, [r2, #112]	@ 0x70
 800afa2:	4b58      	ldr	r3, [pc, #352]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800afa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afa6:	4a57      	ldr	r2, [pc, #348]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800afa8:	f023 0304 	bic.w	r3, r3, #4
 800afac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d015      	beq.n	800afe2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afb6:	f7fb fa8f 	bl	80064d8 <HAL_GetTick>
 800afba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afbc:	e00a      	b.n	800afd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afbe:	f7fb fa8b 	bl	80064d8 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afcc:	4293      	cmp	r3, r2
 800afce:	d901      	bls.n	800afd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e0ce      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd4:	4b4b      	ldr	r3, [pc, #300]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800afd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd8:	f003 0302 	and.w	r3, r3, #2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0ee      	beq.n	800afbe <HAL_RCC_OscConfig+0x386>
 800afe0:	e014      	b.n	800b00c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afe2:	f7fb fa79 	bl	80064d8 <HAL_GetTick>
 800afe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afe8:	e00a      	b.n	800b000 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afea:	f7fb fa75 	bl	80064d8 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff8:	4293      	cmp	r3, r2
 800affa:	d901      	bls.n	800b000 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e0b8      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b000:	4b40      	ldr	r3, [pc, #256]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1ee      	bne.n	800afea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d105      	bne.n	800b01e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b012:	4b3c      	ldr	r3, [pc, #240]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b016:	4a3b      	ldr	r2, [pc, #236]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b01c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 80a4 	beq.w	800b170 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b028:	4b36      	ldr	r3, [pc, #216]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f003 030c 	and.w	r3, r3, #12
 800b030:	2b08      	cmp	r3, #8
 800b032:	d06b      	beq.n	800b10c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d149      	bne.n	800b0d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b03c:	4b31      	ldr	r3, [pc, #196]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a30      	ldr	r2, [pc, #192]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b048:	f7fb fa46 	bl	80064d8 <HAL_GetTick>
 800b04c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b04e:	e008      	b.n	800b062 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b050:	f7fb fa42 	bl	80064d8 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d901      	bls.n	800b062 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e087      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b062:	4b28      	ldr	r3, [pc, #160]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f0      	bne.n	800b050 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69da      	ldr	r2, [r3, #28]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	431a      	orrs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07c:	019b      	lsls	r3, r3, #6
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	085b      	lsrs	r3, r3, #1
 800b086:	3b01      	subs	r3, #1
 800b088:	041b      	lsls	r3, r3, #16
 800b08a:	431a      	orrs	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b090:	061b      	lsls	r3, r3, #24
 800b092:	4313      	orrs	r3, r2
 800b094:	4a1b      	ldr	r2, [pc, #108]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b096:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b09a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b09c:	4b19      	ldr	r3, [pc, #100]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a18      	ldr	r2, [pc, #96]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b0a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a8:	f7fb fa16 	bl	80064d8 <HAL_GetTick>
 800b0ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0ae:	e008      	b.n	800b0c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0b0:	f7fb fa12 	bl	80064d8 <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e057      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0c2:	4b10      	ldr	r3, [pc, #64]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0f0      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x478>
 800b0ce:	e04f      	b.n	800b170 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b0d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0dc:	f7fb f9fc 	bl	80064d8 <HAL_GetTick>
 800b0e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0e4:	f7fb f9f8 	bl	80064d8 <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e03d      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0f6:	4b03      	ldr	r3, [pc, #12]	@ (800b104 <HAL_RCC_OscConfig+0x4cc>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f0      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x4ac>
 800b102:	e035      	b.n	800b170 <HAL_RCC_OscConfig+0x538>
 800b104:	40023800 	.word	0x40023800
 800b108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b10c:	4b1b      	ldr	r3, [pc, #108]	@ (800b17c <HAL_RCC_OscConfig+0x544>)
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d028      	beq.n	800b16c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b124:	429a      	cmp	r2, r3
 800b126:	d121      	bne.n	800b16c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b132:	429a      	cmp	r2, r3
 800b134:	d11a      	bne.n	800b16c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b13c:	4013      	ands	r3, r2
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b142:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b144:	4293      	cmp	r3, r2
 800b146:	d111      	bne.n	800b16c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b152:	085b      	lsrs	r3, r3, #1
 800b154:	3b01      	subs	r3, #1
 800b156:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b158:	429a      	cmp	r2, r3
 800b15a:	d107      	bne.n	800b16c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b166:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b168:	429a      	cmp	r2, r3
 800b16a:	d001      	beq.n	800b170 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	40023800 	.word	0x40023800

0800b180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e0d0      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b198:	4b6a      	ldr	r3, [pc, #424]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 030f 	and.w	r3, r3, #15
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d910      	bls.n	800b1c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1a6:	4b67      	ldr	r3, [pc, #412]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f023 020f 	bic.w	r2, r3, #15
 800b1ae:	4965      	ldr	r1, [pc, #404]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1b6:	4b63      	ldr	r3, [pc, #396]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 030f 	and.w	r3, r3, #15
 800b1be:	683a      	ldr	r2, [r7, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d001      	beq.n	800b1c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0b8      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d020      	beq.n	800b216 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1e0:	4b59      	ldr	r3, [pc, #356]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	4a58      	ldr	r2, [pc, #352]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b1e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b1ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0308 	and.w	r3, r3, #8
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d005      	beq.n	800b204 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1f8:	4b53      	ldr	r3, [pc, #332]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	4a52      	ldr	r2, [pc, #328]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b1fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b202:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b204:	4b50      	ldr	r3, [pc, #320]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	494d      	ldr	r1, [pc, #308]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b212:	4313      	orrs	r3, r2
 800b214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d040      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d107      	bne.n	800b23a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b22a:	4b47      	ldr	r3, [pc, #284]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d115      	bne.n	800b262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e07f      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d107      	bne.n	800b252 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b242:	4b41      	ldr	r3, [pc, #260]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d109      	bne.n	800b262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e073      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b252:	4b3d      	ldr	r3, [pc, #244]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0302 	and.w	r3, r3, #2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e06b      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b262:	4b39      	ldr	r3, [pc, #228]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	f023 0203 	bic.w	r2, r3, #3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	4936      	ldr	r1, [pc, #216]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b270:	4313      	orrs	r3, r2
 800b272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b274:	f7fb f930 	bl	80064d8 <HAL_GetTick>
 800b278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b27a:	e00a      	b.n	800b292 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b27c:	f7fb f92c 	bl	80064d8 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d901      	bls.n	800b292 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e053      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b292:	4b2d      	ldr	r3, [pc, #180]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f003 020c 	and.w	r2, r3, #12
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d1eb      	bne.n	800b27c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2a4:	4b27      	ldr	r3, [pc, #156]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 030f 	and.w	r3, r3, #15
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d210      	bcs.n	800b2d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2b2:	4b24      	ldr	r3, [pc, #144]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f023 020f 	bic.w	r2, r3, #15
 800b2ba:	4922      	ldr	r1, [pc, #136]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2c2:	4b20      	ldr	r3, [pc, #128]	@ (800b344 <HAL_RCC_ClockConfig+0x1c4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d001      	beq.n	800b2d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e032      	b.n	800b33a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0304 	and.w	r3, r3, #4
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d008      	beq.n	800b2f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2e0:	4b19      	ldr	r3, [pc, #100]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	4916      	ldr	r1, [pc, #88]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b2fe:	4b12      	ldr	r3, [pc, #72]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	490e      	ldr	r1, [pc, #56]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b312:	f000 f821 	bl	800b358 <HAL_RCC_GetSysClockFreq>
 800b316:	4602      	mov	r2, r0
 800b318:	4b0b      	ldr	r3, [pc, #44]	@ (800b348 <HAL_RCC_ClockConfig+0x1c8>)
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	f003 030f 	and.w	r3, r3, #15
 800b322:	490a      	ldr	r1, [pc, #40]	@ (800b34c <HAL_RCC_ClockConfig+0x1cc>)
 800b324:	5ccb      	ldrb	r3, [r1, r3]
 800b326:	fa22 f303 	lsr.w	r3, r2, r3
 800b32a:	4a09      	ldr	r2, [pc, #36]	@ (800b350 <HAL_RCC_ClockConfig+0x1d0>)
 800b32c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <HAL_RCC_ClockConfig+0x1d4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f7f9 ffec 	bl	8005310 <HAL_InitTick>

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	40023c00 	.word	0x40023c00
 800b348:	40023800 	.word	0x40023800
 800b34c:	0801c9f4 	.word	0x0801c9f4
 800b350:	20000020 	.word	0x20000020
 800b354:	20000070 	.word	0x20000070

0800b358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b35c:	b090      	sub	sp, #64	@ 0x40
 800b35e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	637b      	str	r3, [r7, #52]	@ 0x34
 800b364:	2300      	movs	r3, #0
 800b366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b368:	2300      	movs	r3, #0
 800b36a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b370:	4b59      	ldr	r3, [pc, #356]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	f003 030c 	and.w	r3, r3, #12
 800b378:	2b08      	cmp	r3, #8
 800b37a:	d00d      	beq.n	800b398 <HAL_RCC_GetSysClockFreq+0x40>
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	f200 80a1 	bhi.w	800b4c4 <HAL_RCC_GetSysClockFreq+0x16c>
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <HAL_RCC_GetSysClockFreq+0x34>
 800b386:	2b04      	cmp	r3, #4
 800b388:	d003      	beq.n	800b392 <HAL_RCC_GetSysClockFreq+0x3a>
 800b38a:	e09b      	b.n	800b4c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b38c:	4b53      	ldr	r3, [pc, #332]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x184>)
 800b38e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b390:	e09b      	b.n	800b4ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b392:	4b53      	ldr	r3, [pc, #332]	@ (800b4e0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b394:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b396:	e098      	b.n	800b4ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b398:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b3a2:	4b4d      	ldr	r3, [pc, #308]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d028      	beq.n	800b400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3ae:	4b4a      	ldr	r3, [pc, #296]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	099b      	lsrs	r3, r3, #6
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	623b      	str	r3, [r7, #32]
 800b3b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	4b47      	ldr	r3, [pc, #284]	@ (800b4e0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3c4:	fb03 f201 	mul.w	r2, r3, r1
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	fb00 f303 	mul.w	r3, r0, r3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	4a43      	ldr	r2, [pc, #268]	@ (800b4e0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3d2:	fba0 1202 	umull	r1, r2, r0, r2
 800b3d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3d8:	460a      	mov	r2, r1
 800b3da:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3de:	4413      	add	r3, r2
 800b3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	61fa      	str	r2, [r7, #28]
 800b3ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b3f2:	f7f4 ff75 	bl	80002e0 <__aeabi_uldivmod>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3fe:	e053      	b.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b400:	4b35      	ldr	r3, [pc, #212]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	099b      	lsrs	r3, r3, #6
 800b406:	2200      	movs	r2, #0
 800b408:	613b      	str	r3, [r7, #16]
 800b40a:	617a      	str	r2, [r7, #20]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b412:	f04f 0b00 	mov.w	fp, #0
 800b416:	4652      	mov	r2, sl
 800b418:	465b      	mov	r3, fp
 800b41a:	f04f 0000 	mov.w	r0, #0
 800b41e:	f04f 0100 	mov.w	r1, #0
 800b422:	0159      	lsls	r1, r3, #5
 800b424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b428:	0150      	lsls	r0, r2, #5
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	ebb2 080a 	subs.w	r8, r2, sl
 800b432:	eb63 090b 	sbc.w	r9, r3, fp
 800b436:	f04f 0200 	mov.w	r2, #0
 800b43a:	f04f 0300 	mov.w	r3, #0
 800b43e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b44a:	ebb2 0408 	subs.w	r4, r2, r8
 800b44e:	eb63 0509 	sbc.w	r5, r3, r9
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	00eb      	lsls	r3, r5, #3
 800b45c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b460:	00e2      	lsls	r2, r4, #3
 800b462:	4614      	mov	r4, r2
 800b464:	461d      	mov	r5, r3
 800b466:	eb14 030a 	adds.w	r3, r4, sl
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	eb45 030b 	adc.w	r3, r5, fp
 800b470:	607b      	str	r3, [r7, #4]
 800b472:	f04f 0200 	mov.w	r2, #0
 800b476:	f04f 0300 	mov.w	r3, #0
 800b47a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b47e:	4629      	mov	r1, r5
 800b480:	028b      	lsls	r3, r1, #10
 800b482:	4621      	mov	r1, r4
 800b484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b488:	4621      	mov	r1, r4
 800b48a:	028a      	lsls	r2, r1, #10
 800b48c:	4610      	mov	r0, r2
 800b48e:	4619      	mov	r1, r3
 800b490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b492:	2200      	movs	r2, #0
 800b494:	60bb      	str	r3, [r7, #8]
 800b496:	60fa      	str	r2, [r7, #12]
 800b498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b49c:	f7f4 ff20 	bl	80002e0 <__aeabi_uldivmod>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	0c1b      	lsrs	r3, r3, #16
 800b4ae:	f003 0303 	and.w	r3, r3, #3
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b4b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b4c2:	e002      	b.n	800b4ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4c4:	4b05      	ldr	r3, [pc, #20]	@ (800b4dc <HAL_RCC_GetSysClockFreq+0x184>)
 800b4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b4c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3740      	adds	r7, #64	@ 0x40
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4d6:	bf00      	nop
 800b4d8:	40023800 	.word	0x40023800
 800b4dc:	00f42400 	.word	0x00f42400
 800b4e0:	017d7840 	.word	0x017d7840

0800b4e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4e8:	4b03      	ldr	r3, [pc, #12]	@ (800b4f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	20000020 	.word	0x20000020

0800b4fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b500:	f7ff fff0 	bl	800b4e4 <HAL_RCC_GetHCLKFreq>
 800b504:	4602      	mov	r2, r0
 800b506:	4b05      	ldr	r3, [pc, #20]	@ (800b51c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	0a9b      	lsrs	r3, r3, #10
 800b50c:	f003 0307 	and.w	r3, r3, #7
 800b510:	4903      	ldr	r1, [pc, #12]	@ (800b520 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b512:	5ccb      	ldrb	r3, [r1, r3]
 800b514:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b518:	4618      	mov	r0, r3
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	40023800 	.word	0x40023800
 800b520:	0801ca04 	.word	0x0801ca04

0800b524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b528:	f7ff ffdc 	bl	800b4e4 <HAL_RCC_GetHCLKFreq>
 800b52c:	4602      	mov	r2, r0
 800b52e:	4b05      	ldr	r3, [pc, #20]	@ (800b544 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	0b5b      	lsrs	r3, r3, #13
 800b534:	f003 0307 	and.w	r3, r3, #7
 800b538:	4903      	ldr	r1, [pc, #12]	@ (800b548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b53a:	5ccb      	ldrb	r3, [r1, r3]
 800b53c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b540:	4618      	mov	r0, r3
 800b542:	bd80      	pop	{r7, pc}
 800b544:	40023800 	.word	0x40023800
 800b548:	0801ca04 	.word	0x0801ca04

0800b54c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	220f      	movs	r2, #15
 800b55a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b55c:	4b12      	ldr	r3, [pc, #72]	@ (800b5a8 <HAL_RCC_GetClockConfig+0x5c>)
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f003 0203 	and.w	r2, r3, #3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b568:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a8 <HAL_RCC_GetClockConfig+0x5c>)
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b574:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a8 <HAL_RCC_GetClockConfig+0x5c>)
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b580:	4b09      	ldr	r3, [pc, #36]	@ (800b5a8 <HAL_RCC_GetClockConfig+0x5c>)
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	08db      	lsrs	r3, r3, #3
 800b586:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b58e:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <HAL_RCC_GetClockConfig+0x60>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 020f 	and.w	r2, r3, #15
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	601a      	str	r2, [r3, #0]
}
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	40023800 	.word	0x40023800
 800b5ac:	40023c00 	.word	0x40023c00

0800b5b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d012      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b5d8:	4b69      	ldr	r3, [pc, #420]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	4a68      	ldr	r2, [pc, #416]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5e2:	6093      	str	r3, [r2, #8]
 800b5e4:	4b66      	ldr	r3, [pc, #408]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ec:	4964      	ldr	r1, [pc, #400]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d017      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b60a:	4b5d      	ldr	r3, [pc, #372]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b60c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b610:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b618:	4959      	ldr	r1, [pc, #356]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b628:	d101      	bne.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b636:	2301      	movs	r3, #1
 800b638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d017      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b646:	4b4e      	ldr	r3, [pc, #312]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b64c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b654:	494a      	ldr	r1, [pc, #296]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b656:	4313      	orrs	r3, r2
 800b658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b664:	d101      	bne.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b666:	2301      	movs	r3, #1
 800b668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b672:	2301      	movs	r3, #1
 800b674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b682:	2301      	movs	r3, #1
 800b684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 808b 	beq.w	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b694:	4b3a      	ldr	r3, [pc, #232]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b698:	4a39      	ldr	r2, [pc, #228]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b69a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b69e:	6413      	str	r3, [r2, #64]	@ 0x40
 800b6a0:	4b37      	ldr	r3, [pc, #220]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6a8:	60bb      	str	r3, [r7, #8]
 800b6aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b6ac:	4b35      	ldr	r3, [pc, #212]	@ (800b784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a34      	ldr	r2, [pc, #208]	@ (800b784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b8:	f7fa ff0e 	bl	80064d8 <HAL_GetTick>
 800b6bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6be:	e008      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6c0:	f7fa ff0a 	bl	80064d8 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	2b64      	cmp	r3, #100	@ 0x64
 800b6cc:	d901      	bls.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e357      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0f0      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6de:	4b28      	ldr	r3, [pc, #160]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d035      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d02e      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6fc:	4b20      	ldr	r3, [pc, #128]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b706:	4b1e      	ldr	r3, [pc, #120]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b70a:	4a1d      	ldr	r2, [pc, #116]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b70c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b710:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b712:	4b1b      	ldr	r3, [pc, #108]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b716:	4a1a      	ldr	r2, [pc, #104]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b71c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b71e:	4a18      	ldr	r2, [pc, #96]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b724:	4b16      	ldr	r3, [pc, #88]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d114      	bne.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b730:	f7fa fed2 	bl	80064d8 <HAL_GetTick>
 800b734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b736:	e00a      	b.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b738:	f7fa fece 	bl	80064d8 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b746:	4293      	cmp	r3, r2
 800b748:	d901      	bls.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e319      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b74e:	4b0c      	ldr	r3, [pc, #48]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d0ee      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b766:	d111      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b768:	4b05      	ldr	r3, [pc, #20]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b774:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b776:	400b      	ands	r3, r1
 800b778:	4901      	ldr	r1, [pc, #4]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	608b      	str	r3, [r1, #8]
 800b77e:	e00b      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b780:	40023800 	.word	0x40023800
 800b784:	40007000 	.word	0x40007000
 800b788:	0ffffcff 	.word	0x0ffffcff
 800b78c:	4baa      	ldr	r3, [pc, #680]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	4aa9      	ldr	r2, [pc, #676]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b792:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b796:	6093      	str	r3, [r2, #8]
 800b798:	4ba7      	ldr	r3, [pc, #668]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b79a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a4:	49a4      	ldr	r1, [pc, #656]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0310 	and.w	r3, r3, #16
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d010      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7b6:	4ba0      	ldr	r3, [pc, #640]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7bc:	4a9e      	ldr	r2, [pc, #632]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b7c6:	4b9c      	ldr	r3, [pc, #624]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d0:	4999      	ldr	r1, [pc, #612]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00a      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b7e4:	4b94      	ldr	r3, [pc, #592]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7f2:	4991      	ldr	r1, [pc, #580]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b806:	4b8c      	ldr	r3, [pc, #560]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b80c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b814:	4988      	ldr	r1, [pc, #544]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b816:	4313      	orrs	r3, r2
 800b818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b828:	4b83      	ldr	r3, [pc, #524]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b82e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b836:	4980      	ldr	r1, [pc, #512]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b84a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b850:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b858:	4977      	ldr	r1, [pc, #476]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00a      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b86c:	4b72      	ldr	r3, [pc, #456]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b872:	f023 0203 	bic.w	r2, r3, #3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b87a:	496f      	ldr	r1, [pc, #444]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00a      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b88e:	4b6a      	ldr	r3, [pc, #424]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b894:	f023 020c 	bic.w	r2, r3, #12
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b89c:	4966      	ldr	r1, [pc, #408]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00a      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8b0:	4b61      	ldr	r3, [pc, #388]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8be:	495e      	ldr	r1, [pc, #376]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00a      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b8d2:	4b59      	ldr	r3, [pc, #356]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8e0:	4955      	ldr	r1, [pc, #340]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00a      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b8f4:	4b50      	ldr	r3, [pc, #320]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b902:	494d      	ldr	r1, [pc, #308]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b904:	4313      	orrs	r3, r2
 800b906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00a      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b916:	4b48      	ldr	r3, [pc, #288]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b91c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b924:	4944      	ldr	r1, [pc, #272]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b926:	4313      	orrs	r3, r2
 800b928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00a      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b938:	4b3f      	ldr	r3, [pc, #252]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b93e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b946:	493c      	ldr	r1, [pc, #240]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b948:	4313      	orrs	r3, r2
 800b94a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b95a:	4b37      	ldr	r3, [pc, #220]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b960:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b968:	4933      	ldr	r1, [pc, #204]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b97c:	4b2e      	ldr	r3, [pc, #184]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b982:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b98a:	492b      	ldr	r1, [pc, #172]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d011      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b99e:	4b26      	ldr	r3, [pc, #152]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9ac:	4922      	ldr	r1, [pc, #136]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9bc:	d101      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0308 	and.w	r3, r3, #8
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b9de:	4b16      	ldr	r3, [pc, #88]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ec:	4912      	ldr	r1, [pc, #72]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ba00:	4b0d      	ldr	r3, [pc, #52]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba10:	4909      	ldr	r1, [pc, #36]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba12:	4313      	orrs	r3, r2
 800ba14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d006      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 80d9 	beq.w	800bbde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ba2c:	4b02      	ldr	r3, [pc, #8]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a01      	ldr	r2, [pc, #4]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba36:	e001      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ba38:	40023800 	.word	0x40023800
 800ba3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba3e:	f7fa fd4b 	bl	80064d8 <HAL_GetTick>
 800ba42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba44:	e008      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ba46:	f7fa fd47 	bl	80064d8 <HAL_GetTick>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	2b64      	cmp	r3, #100	@ 0x64
 800ba52:	d901      	bls.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba54:	2303      	movs	r3, #3
 800ba56:	e194      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba58:	4b6c      	ldr	r3, [pc, #432]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1f0      	bne.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d021      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11d      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ba78:	4b64      	ldr	r3, [pc, #400]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba7e:	0c1b      	lsrs	r3, r3, #16
 800ba80:	f003 0303 	and.w	r3, r3, #3
 800ba84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ba86:	4b61      	ldr	r3, [pc, #388]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba8c:	0e1b      	lsrs	r3, r3, #24
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	019a      	lsls	r2, r3, #6
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	041b      	lsls	r3, r3, #16
 800ba9e:	431a      	orrs	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	061b      	lsls	r3, r3, #24
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	071b      	lsls	r3, r3, #28
 800baac:	4957      	ldr	r1, [pc, #348]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bac8:	d00a      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d02e      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bade:	d129      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bae0:	4b4a      	ldr	r3, [pc, #296]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae6:	0c1b      	lsrs	r3, r3, #16
 800bae8:	f003 0303 	and.w	r3, r3, #3
 800baec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800baee:	4b47      	ldr	r3, [pc, #284]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf4:	0f1b      	lsrs	r3, r3, #28
 800baf6:	f003 0307 	and.w	r3, r3, #7
 800bafa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	019a      	lsls	r2, r3, #6
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	041b      	lsls	r3, r3, #16
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	061b      	lsls	r3, r3, #24
 800bb0e:	431a      	orrs	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	071b      	lsls	r3, r3, #28
 800bb14:	493d      	ldr	r1, [pc, #244]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb16:	4313      	orrs	r3, r2
 800bb18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bb1c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb22:	f023 021f 	bic.w	r2, r3, #31
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4937      	ldr	r1, [pc, #220]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01d      	beq.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb40:	4b32      	ldr	r3, [pc, #200]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb46:	0e1b      	lsrs	r3, r3, #24
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bb4e:	4b2f      	ldr	r3, [pc, #188]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb54:	0f1b      	lsrs	r3, r3, #28
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	019a      	lsls	r2, r3, #6
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	041b      	lsls	r3, r3, #16
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	061b      	lsls	r3, r3, #24
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	071b      	lsls	r3, r3, #28
 800bb74:	4925      	ldr	r1, [pc, #148]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb76:	4313      	orrs	r3, r2
 800bb78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d011      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	019a      	lsls	r2, r3, #6
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	041b      	lsls	r3, r3, #16
 800bb94:	431a      	orrs	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	061b      	lsls	r3, r3, #24
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	071b      	lsls	r3, r3, #28
 800bba4:	4919      	ldr	r1, [pc, #100]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bba6:	4313      	orrs	r3, r2
 800bba8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bbac:	4b17      	ldr	r3, [pc, #92]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a16      	ldr	r2, [pc, #88]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bbb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb8:	f7fa fc8e 	bl	80064d8 <HAL_GetTick>
 800bbbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbbe:	e008      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bbc0:	f7fa fc8a 	bl	80064d8 <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b64      	cmp	r3, #100	@ 0x64
 800bbcc:	d901      	bls.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e0d7      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbd2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0f0      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	f040 80cd 	bne.w	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bbe6:	4b09      	ldr	r3, [pc, #36]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a08      	ldr	r2, [pc, #32]	@ (800bc0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbf2:	f7fa fc71 	bl	80064d8 <HAL_GetTick>
 800bbf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbf8:	e00a      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bbfa:	f7fa fc6d 	bl	80064d8 <HAL_GetTick>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	2b64      	cmp	r3, #100	@ 0x64
 800bc06:	d903      	bls.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e0ba      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bc0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bc10:	4b5e      	ldr	r3, [pc, #376]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc1c:	d0ed      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d009      	beq.n	800bc46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d02e      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d12a      	bne.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bc46:	4b51      	ldr	r3, [pc, #324]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc4c:	0c1b      	lsrs	r3, r3, #16
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bc54:	4b4d      	ldr	r3, [pc, #308]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc5a:	0f1b      	lsrs	r3, r3, #28
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	019a      	lsls	r2, r3, #6
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	041b      	lsls	r3, r3, #16
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	061b      	lsls	r3, r3, #24
 800bc74:	431a      	orrs	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	071b      	lsls	r3, r3, #28
 800bc7a:	4944      	ldr	r1, [pc, #272]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc82:	4b42      	ldr	r3, [pc, #264]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc90:	3b01      	subs	r3, #1
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	493d      	ldr	r1, [pc, #244]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc96:	4313      	orrs	r3, r2
 800bc98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d022      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcb0:	d11d      	bne.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bcb2:	4b36      	ldr	r3, [pc, #216]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb8:	0e1b      	lsrs	r3, r3, #24
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bcc0:	4b32      	ldr	r3, [pc, #200]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcc6:	0f1b      	lsrs	r3, r3, #28
 800bcc8:	f003 0307 	and.w	r3, r3, #7
 800bccc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	019a      	lsls	r2, r3, #6
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	041b      	lsls	r3, r3, #16
 800bcda:	431a      	orrs	r2, r3
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	061b      	lsls	r3, r3, #24
 800bce0:	431a      	orrs	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	071b      	lsls	r3, r3, #28
 800bce6:	4929      	ldr	r1, [pc, #164]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bce8:	4313      	orrs	r3, r2
 800bcea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0308 	and.w	r3, r3, #8
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d028      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bcfa:	4b24      	ldr	r3, [pc, #144]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd00:	0e1b      	lsrs	r3, r3, #24
 800bd02:	f003 030f 	and.w	r3, r3, #15
 800bd06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd08:	4b20      	ldr	r3, [pc, #128]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd0e:	0c1b      	lsrs	r3, r3, #16
 800bd10:	f003 0303 	and.w	r3, r3, #3
 800bd14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	019a      	lsls	r2, r3, #6
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	041b      	lsls	r3, r3, #16
 800bd20:	431a      	orrs	r2, r3
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	061b      	lsls	r3, r3, #24
 800bd26:	431a      	orrs	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	071b      	lsls	r3, r3, #28
 800bd2e:	4917      	ldr	r1, [pc, #92]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd30:	4313      	orrs	r3, r2
 800bd32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bd36:	4b15      	ldr	r3, [pc, #84]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd44:	4911      	ldr	r1, [pc, #68]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd46:	4313      	orrs	r3, r2
 800bd48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a0e      	ldr	r2, [pc, #56]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd58:	f7fa fbbe 	bl	80064d8 <HAL_GetTick>
 800bd5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd5e:	e008      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd60:	f7fa fbba 	bl	80064d8 <HAL_GetTick>
 800bd64:	4602      	mov	r2, r0
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	2b64      	cmp	r3, #100	@ 0x64
 800bd6c:	d901      	bls.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e007      	b.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd72:	4b06      	ldr	r3, [pc, #24]	@ (800bd8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd7e:	d1ef      	bne.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3720      	adds	r7, #32
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	40023800 	.word	0x40023800

0800bd90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800bda0:	2300      	movs	r3, #0
 800bda2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bdae:	f040 808d 	bne.w	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bdb2:	4b93      	ldr	r3, [pc, #588]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdb8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bdc0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc8:	d07c      	beq.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdd0:	d87b      	bhi.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdde:	d039      	beq.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bde0:	e073      	b.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bde2:	4b87      	ldr	r3, [pc, #540]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d108      	bne.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bdee:	4b84      	ldr	r3, [pc, #528]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdf6:	4a83      	ldr	r2, [pc, #524]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bdf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdfc:	613b      	str	r3, [r7, #16]
 800bdfe:	e007      	b.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800be00:	4b7f      	ldr	r3, [pc, #508]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be08:	4a7f      	ldr	r2, [pc, #508]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800be10:	4b7b      	ldr	r3, [pc, #492]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be16:	0e1b      	lsrs	r3, r3, #24
 800be18:	f003 030f 	and.w	r3, r3, #15
 800be1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800be1e:	4b78      	ldr	r3, [pc, #480]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be24:	099b      	lsrs	r3, r3, #6
 800be26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	fb03 f202 	mul.w	r2, r3, r2
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	fbb2 f3f3 	udiv	r3, r2, r3
 800be36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800be38:	4b71      	ldr	r3, [pc, #452]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be3e:	0a1b      	lsrs	r3, r3, #8
 800be40:	f003 031f 	and.w	r3, r3, #31
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be50:	617b      	str	r3, [r7, #20]
        break;
 800be52:	e03b      	b.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800be54:	4b6a      	ldr	r3, [pc, #424]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d108      	bne.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be60:	4b67      	ldr	r3, [pc, #412]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be68:	4a66      	ldr	r2, [pc, #408]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800be6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be6e:	613b      	str	r3, [r7, #16]
 800be70:	e007      	b.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800be72:	4b63      	ldr	r3, [pc, #396]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be7a:	4a63      	ldr	r2, [pc, #396]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800be82:	4b5f      	ldr	r3, [pc, #380]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be88:	0e1b      	lsrs	r3, r3, #24
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800be90:	4b5b      	ldr	r3, [pc, #364]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be96:	099b      	lsrs	r3, r3, #6
 800be98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	fb03 f202 	mul.w	r2, r3, r2
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800beaa:	4b55      	ldr	r3, [pc, #340]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800beac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800beb0:	f003 031f 	and.w	r3, r3, #31
 800beb4:	3301      	adds	r3, #1
 800beb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec0:	617b      	str	r3, [r7, #20]
        break;
 800bec2:	e003      	b.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bec4:	4b51      	ldr	r3, [pc, #324]	@ (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bec6:	617b      	str	r3, [r7, #20]
        break;
 800bec8:	e000      	b.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800beca:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bed2:	f040 808d 	bne.w	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bed6:	4b4a      	ldr	r3, [pc, #296]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bedc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800bee4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800beec:	d07c      	beq.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bef4:	d87b      	bhi.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d004      	beq.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf02:	d039      	beq.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bf04:	e073      	b.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf06:	4b3e      	ldr	r3, [pc, #248]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d108      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf12:	4b3b      	ldr	r3, [pc, #236]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf1a:	4a3a      	ldr	r2, [pc, #232]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bf1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf20:	613b      	str	r3, [r7, #16]
 800bf22:	e007      	b.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf24:	4b36      	ldr	r3, [pc, #216]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf2c:	4a36      	ldr	r2, [pc, #216]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf32:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bf34:	4b32      	ldr	r3, [pc, #200]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf3a:	0e1b      	lsrs	r3, r3, #24
 800bf3c:	f003 030f 	and.w	r3, r3, #15
 800bf40:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bf42:	4b2f      	ldr	r3, [pc, #188]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf48:	099b      	lsrs	r3, r3, #6
 800bf4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	fb03 f202 	mul.w	r2, r3, r2
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bf5c:	4b28      	ldr	r3, [pc, #160]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf62:	0a1b      	lsrs	r3, r3, #8
 800bf64:	f003 031f 	and.w	r3, r3, #31
 800bf68:	3301      	adds	r3, #1
 800bf6a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf74:	617b      	str	r3, [r7, #20]
        break;
 800bf76:	e03b      	b.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf78:	4b21      	ldr	r3, [pc, #132]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d108      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf84:	4b1e      	ldr	r3, [pc, #120]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf8c:	4a1d      	ldr	r2, [pc, #116]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bf8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf92:	613b      	str	r3, [r7, #16]
 800bf94:	e007      	b.n	800bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf96:	4b1a      	ldr	r3, [pc, #104]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf9e:	4a1a      	ldr	r2, [pc, #104]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bfa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800bfa6:	4b16      	ldr	r3, [pc, #88]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfac:	0e1b      	lsrs	r3, r3, #24
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800bfb4:	4b12      	ldr	r3, [pc, #72]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bfb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfba:	099b      	lsrs	r3, r3, #6
 800bfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	fb03 f202 	mul.w	r2, r3, r2
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfcc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bfce:	4b0c      	ldr	r3, [pc, #48]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bfd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfd4:	f003 031f 	and.w	r3, r3, #31
 800bfd8:	3301      	adds	r3, #1
 800bfda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe4:	617b      	str	r3, [r7, #20]
        break;
 800bfe6:	e003      	b.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfe8:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bfea:	617b      	str	r3, [r7, #20]
        break;
 800bfec:	e000      	b.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800bfee:	bf00      	nop
      }
    }
  }

  return frequency;
 800bff0:	697b      	ldr	r3, [r7, #20]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	40023800 	.word	0x40023800
 800c004:	00f42400 	.word	0x00f42400
 800c008:	017d7840 	.word	0x017d7840
 800c00c:	00bb8000 	.word	0x00bb8000

0800c010 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e071      	b.n	800c106 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7f5b      	ldrb	r3, [r3, #29]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d105      	bne.n	800c038 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7f8 fcee 	bl	8004a14 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2202      	movs	r2, #2
 800c03c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	f003 0310 	and.w	r3, r3, #16
 800c048:	2b10      	cmp	r3, #16
 800c04a:	d053      	beq.n	800c0f4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	22ca      	movs	r2, #202	@ 0xca
 800c052:	625a      	str	r2, [r3, #36]	@ 0x24
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2253      	movs	r2, #83	@ 0x53
 800c05a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fac7 	bl	800c5f0 <RTC_EnterInitMode>
 800c062:	4603      	mov	r3, r0
 800c064:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d12a      	bne.n	800c0c2 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6899      	ldr	r1, [r3, #8]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	4b26      	ldr	r3, [pc, #152]	@ (800c110 <HAL_RTC_Init+0x100>)
 800c078:	400b      	ands	r3, r1
 800c07a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6899      	ldr	r1, [r3, #8]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	431a      	orrs	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	431a      	orrs	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	68d2      	ldr	r2, [r2, #12]
 800c0a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6919      	ldr	r1, [r3, #16]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	041a      	lsls	r2, r3, #16
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fad0 	bl	800c65e <RTC_ExitInitMode>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d110      	bne.n	800c0ea <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0208 	bic.w	r2, r2, #8
 800c0d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	699a      	ldr	r2, [r3, #24]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	22ff      	movs	r2, #255	@ 0xff
 800c0f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c0f2:	e001      	b.n	800c0f8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d102      	bne.n	800c104 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	ff8fffbf 	.word	0xff8fffbf

0800c114 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	7f1b      	ldrb	r3, [r3, #28]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d101      	bne.n	800c130 <HAL_RTC_SetTime+0x1c>
 800c12c:	2302      	movs	r3, #2
 800c12e:	e085      	b.n	800c23c <HAL_RTC_SetTime+0x128>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2202      	movs	r2, #2
 800c13a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d126      	bne.n	800c190 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d102      	bne.n	800c156 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2200      	movs	r2, #0
 800c154:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 faa4 	bl	800c6a8 <RTC_ByteToBcd2>
 800c160:	4603      	mov	r3, r0
 800c162:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	785b      	ldrb	r3, [r3, #1]
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fa9d 	bl	800c6a8 <RTC_ByteToBcd2>
 800c16e:	4603      	mov	r3, r0
 800c170:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c172:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	789b      	ldrb	r3, [r3, #2]
 800c178:	4618      	mov	r0, r3
 800c17a:	f000 fa95 	bl	800c6a8 <RTC_ByteToBcd2>
 800c17e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c180:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	78db      	ldrb	r3, [r3, #3]
 800c188:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c18a:	4313      	orrs	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]
 800c18e:	e018      	b.n	800c1c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d102      	bne.n	800c1a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	785b      	ldrb	r3, [r3, #1]
 800c1ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c1b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c1b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	78db      	ldrb	r3, [r3, #3]
 800c1bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	22ca      	movs	r2, #202	@ 0xca
 800c1c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2253      	movs	r2, #83	@ 0x53
 800c1d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f000 fa0c 	bl	800c5f0 <RTC_EnterInitMode>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c1dc:	7cfb      	ldrb	r3, [r7, #19]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d11e      	bne.n	800c220 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	6979      	ldr	r1, [r7, #20]
 800c1e8:	4b16      	ldr	r3, [pc, #88]	@ (800c244 <HAL_RTC_SetTime+0x130>)
 800c1ea:	400b      	ands	r3, r1
 800c1ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	689a      	ldr	r2, [r3, #8]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c1fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6899      	ldr	r1, [r3, #8]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	431a      	orrs	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 fa21 	bl	800c65e <RTC_ExitInitMode>
 800c21c:	4603      	mov	r3, r0
 800c21e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c220:	7cfb      	ldrb	r3, [r7, #19]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d102      	bne.n	800c22c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2201      	movs	r2, #1
 800c22a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	22ff      	movs	r2, #255	@ 0xff
 800c232:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	771a      	strb	r2, [r3, #28]

  return status;
 800c23a:	7cfb      	ldrb	r3, [r7, #19]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	bd90      	pop	{r4, r7, pc}
 800c244:	007f7f7f 	.word	0x007f7f7f

0800c248 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c248:	b590      	push	{r4, r7, lr}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	7f1b      	ldrb	r3, [r3, #28]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d101      	bne.n	800c264 <HAL_RTC_SetDate+0x1c>
 800c260:	2302      	movs	r3, #2
 800c262:	e06f      	b.n	800c344 <HAL_RTC_SetDate+0xfc>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2201      	movs	r2, #1
 800c268:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2202      	movs	r2, #2
 800c26e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10e      	bne.n	800c294 <HAL_RTC_SetDate+0x4c>
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	f003 0310 	and.w	r3, r3, #16
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d008      	beq.n	800c294 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	f023 0310 	bic.w	r3, r3, #16
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	330a      	adds	r3, #10
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d11c      	bne.n	800c2d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	78db      	ldrb	r3, [r3, #3]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fa02 	bl	800c6a8 <RTC_ByteToBcd2>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	785b      	ldrb	r3, [r3, #1]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 f9fb 	bl	800c6a8 <RTC_ByteToBcd2>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2b6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	789b      	ldrb	r3, [r3, #2]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 f9f3 	bl	800c6a8 <RTC_ByteToBcd2>
 800c2c2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2c4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	e00e      	b.n	800c2f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	78db      	ldrb	r3, [r3, #3]
 800c2d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	785b      	ldrb	r3, [r3, #1]
 800c2de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2e0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	22ca      	movs	r2, #202	@ 0xca
 800c2f8:	625a      	str	r2, [r3, #36]	@ 0x24
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2253      	movs	r2, #83	@ 0x53
 800c300:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 f974 	bl	800c5f0 <RTC_EnterInitMode>
 800c308:	4603      	mov	r3, r0
 800c30a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c30c:	7cfb      	ldrb	r3, [r7, #19]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10a      	bne.n	800c328 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	6979      	ldr	r1, [r7, #20]
 800c318:	4b0c      	ldr	r3, [pc, #48]	@ (800c34c <HAL_RTC_SetDate+0x104>)
 800c31a:	400b      	ands	r3, r1
 800c31c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f99d 	bl	800c65e <RTC_ExitInitMode>
 800c324:	4603      	mov	r3, r0
 800c326:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c328:	7cfb      	ldrb	r3, [r7, #19]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d102      	bne.n	800c334 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	22ff      	movs	r2, #255	@ 0xff
 800c33a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	771a      	strb	r2, [r3, #28]

  return status;
 800c342:	7cfb      	ldrb	r3, [r7, #19]
}
 800c344:	4618      	mov	r0, r3
 800c346:	371c      	adds	r7, #28
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd90      	pop	{r4, r7, pc}
 800c34c:	00ffff3f 	.word	0x00ffff3f

0800c350 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c350:	b590      	push	{r4, r7, lr}
 800c352:	b089      	sub	sp, #36	@ 0x24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	7f1b      	ldrb	r3, [r3, #28]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d101      	bne.n	800c374 <HAL_RTC_SetAlarm+0x24>
 800c370:	2302      	movs	r3, #2
 800c372:	e113      	b.n	800c59c <HAL_RTC_SetAlarm+0x24c>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2202      	movs	r2, #2
 800c37e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d137      	bne.n	800c3f6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2200      	movs	r2, #0
 800c398:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 f982 	bl	800c6a8 <RTC_ByteToBcd2>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	785b      	ldrb	r3, [r3, #1]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 f97b 	bl	800c6a8 <RTC_ByteToBcd2>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c3b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	789b      	ldrb	r3, [r3, #2]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 f973 	bl	800c6a8 <RTC_ByteToBcd2>
 800c3c2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c3c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	78db      	ldrb	r3, [r3, #3]
 800c3cc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c3ce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f965 	bl	800c6a8 <RTC_ByteToBcd2>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c3e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c3ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e023      	b.n	800c43e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c400:	2b00      	cmp	r3, #0
 800c402:	d102      	bne.n	800c40a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2200      	movs	r2, #0
 800c408:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	785b      	ldrb	r3, [r3, #1]
 800c414:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c416:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c41c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	78db      	ldrb	r3, [r3, #3]
 800c422:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c424:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c42c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c42e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c434:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c43a:	4313      	orrs	r3, r2
 800c43c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c446:	4313      	orrs	r3, r2
 800c448:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	22ca      	movs	r2, #202	@ 0xca
 800c450:	625a      	str	r2, [r3, #36]	@ 0x24
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2253      	movs	r2, #83	@ 0x53
 800c458:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c462:	d148      	bne.n	800c4f6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	689a      	ldr	r2, [r3, #8]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c472:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689a      	ldr	r2, [r3, #8]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c482:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c494:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c496:	f7fa f81f 	bl	80064d8 <HAL_GetTick>
 800c49a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c49c:	e013      	b.n	800c4c6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c49e:	f7fa f81b 	bl	80064d8 <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c4ac:	d90b      	bls.n	800c4c6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	22ff      	movs	r2, #255	@ 0xff
 800c4b4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2203      	movs	r2, #3
 800c4ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e06a      	b.n	800c59c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0e4      	beq.n	800c49e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	69fa      	ldr	r2, [r7, #28]
 800c4da:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	689a      	ldr	r2, [r3, #8]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c4f2:	609a      	str	r2, [r3, #8]
 800c4f4:	e047      	b.n	800c586 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c504:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c514:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c526:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c528:	f7f9 ffd6 	bl	80064d8 <HAL_GetTick>
 800c52c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c52e:	e013      	b.n	800c558 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c530:	f7f9 ffd2 	bl	80064d8 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c53e:	d90b      	bls.n	800c558 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	22ff      	movs	r2, #255	@ 0xff
 800c546:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2203      	movs	r2, #3
 800c54c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e021      	b.n	800c59c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	f003 0302 	and.w	r3, r3, #2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0e4      	beq.n	800c530 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69fa      	ldr	r2, [r7, #28]
 800c56c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689a      	ldr	r2, [r3, #8]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c584:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	22ff      	movs	r2, #255	@ 0xff
 800c58c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3724      	adds	r7, #36	@ 0x24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd90      	pop	{r4, r7, pc}

0800c5a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c5ec <HAL_RTC_WaitForSynchro+0x48>)
 800c5b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c5b8:	f7f9 ff8e 	bl	80064d8 <HAL_GetTick>
 800c5bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5be:	e009      	b.n	800c5d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c5c0:	f7f9 ff8a 	bl	80064d8 <HAL_GetTick>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c5ce:	d901      	bls.n	800c5d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e007      	b.n	800c5e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0ee      	beq.n	800c5c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	0001ff5f 	.word	0x0001ff5f

0800c5f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d122      	bne.n	800c654 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c61c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c61e:	f7f9 ff5b 	bl	80064d8 <HAL_GetTick>
 800c622:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c624:	e00c      	b.n	800c640 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c626:	f7f9 ff57 	bl	80064d8 <HAL_GetTick>
 800c62a:	4602      	mov	r2, r0
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c634:	d904      	bls.n	800c640 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2204      	movs	r2, #4
 800c63a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d102      	bne.n	800c654 <RTC_EnterInitMode+0x64>
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d1e8      	bne.n	800c626 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c654:	7bfb      	ldrb	r3, [r7, #15]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68da      	ldr	r2, [r3, #12]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c678:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f003 0320 	and.w	r3, r3, #32
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff ff8b 	bl	800c5a4 <HAL_RTC_WaitForSynchro>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d004      	beq.n	800c69e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2204      	movs	r2, #4
 800c698:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c6b6:	e005      	b.n	800c6c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	3b0a      	subs	r3, #10
 800c6c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c6c4:	79fb      	ldrb	r3, [r7, #7]
 800c6c6:	2b09      	cmp	r3, #9
 800c6c8:	d8f6      	bhi.n	800c6b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	79fb      	ldrb	r3, [r7, #7]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	b2db      	uxtb	r3, r3
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	7f1b      	ldrb	r3, [r3, #28]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d101      	bne.n	800c700 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	e050      	b.n	800c7a2 <HAL_RTCEx_SetTimeStamp+0xbe>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2202      	movs	r2, #2
 800c70a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0206 	bic.w	r2, r2, #6
 800c71a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	430a      	orrs	r2, r1
 800c72a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689a      	ldr	r2, [r3, #8]
 800c732:	4b1f      	ldr	r3, [pc, #124]	@ (800c7b0 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c734:	4013      	ands	r3, r2
 800c736:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	22ca      	movs	r2, #202	@ 0xca
 800c746:	625a      	str	r2, [r3, #36]	@ 0x24
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2253      	movs	r2, #83	@ 0x53
 800c74e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c768:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	b2da      	uxtb	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c77a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689a      	ldr	r2, [r3, #8]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c78a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	22ff      	movs	r2, #255	@ 0xff
 800c792:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2201      	movs	r2, #1
 800c798:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	fffff7f7 	.word	0xfffff7f7

0800c7b4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b088      	sub	sp, #32
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e156      	b.n	800ca80 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d106      	bne.n	800c7ec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7f8 fd28 	bl	800523c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f95b 	bl	800cab0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d00c      	beq.n	800c81c <HAL_SAI_Init+0x68>
 800c802:	2b02      	cmp	r3, #2
 800c804:	d80d      	bhi.n	800c822 <HAL_SAI_Init+0x6e>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d002      	beq.n	800c810 <HAL_SAI_Init+0x5c>
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d003      	beq.n	800c816 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c80e:	e008      	b.n	800c822 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	61fb      	str	r3, [r7, #28]
      break;
 800c814:	e006      	b.n	800c824 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c816:	2310      	movs	r3, #16
 800c818:	61fb      	str	r3, [r7, #28]
      break;
 800c81a:	e003      	b.n	800c824 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c81c:	2320      	movs	r3, #32
 800c81e:	61fb      	str	r3, [r7, #28]
      break;
 800c820:	e000      	b.n	800c824 <HAL_SAI_Init+0x70>
      break;
 800c822:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d81e      	bhi.n	800c86a <HAL_SAI_Init+0xb6>
 800c82c:	a201      	add	r2, pc, #4	@ (adr r2, 800c834 <HAL_SAI_Init+0x80>)
 800c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c832:	bf00      	nop
 800c834:	0800c845 	.word	0x0800c845
 800c838:	0800c84b 	.word	0x0800c84b
 800c83c:	0800c853 	.word	0x0800c853
 800c840:	0800c85b 	.word	0x0800c85b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
    }
    break;
 800c848:	e010      	b.n	800c86c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c84a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c84e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c850:	e00c      	b.n	800c86c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c852:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c856:	617b      	str	r3, [r7, #20]
    }
    break;
 800c858:	e008      	b.n	800c86c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c85a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c85e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c868:	e000      	b.n	800c86c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c86a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a85      	ldr	r2, [pc, #532]	@ (800ca88 <HAL_SAI_Init+0x2d4>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d004      	beq.n	800c880 <HAL_SAI_Init+0xcc>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a84      	ldr	r2, [pc, #528]	@ (800ca8c <HAL_SAI_Init+0x2d8>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d103      	bne.n	800c888 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c880:	4a83      	ldr	r2, [pc, #524]	@ (800ca90 <HAL_SAI_Init+0x2dc>)
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	e002      	b.n	800c88e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c888:	4a82      	ldr	r2, [pc, #520]	@ (800ca94 <HAL_SAI_Init+0x2e0>)
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d04c      	beq.n	800c930 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a7a      	ldr	r2, [pc, #488]	@ (800ca88 <HAL_SAI_Init+0x2d4>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d004      	beq.n	800c8ae <HAL_SAI_Init+0xfa>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a78      	ldr	r2, [pc, #480]	@ (800ca8c <HAL_SAI_Init+0x2d8>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d104      	bne.n	800c8b8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c8ae:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c8b2:	f7ff fa6d 	bl	800bd90 <HAL_RCCEx_GetPeriphCLKFreq>
 800c8b6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a76      	ldr	r2, [pc, #472]	@ (800ca98 <HAL_SAI_Init+0x2e4>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d004      	beq.n	800c8cc <HAL_SAI_Init+0x118>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a75      	ldr	r2, [pc, #468]	@ (800ca9c <HAL_SAI_Init+0x2e8>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d104      	bne.n	800c8d6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c8cc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c8d0:	f7ff fa5e 	bl	800bd90 <HAL_RCCEx_GetPeriphCLKFreq>
 800c8d4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	025b      	lsls	r3, r3, #9
 800c8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ec:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4a6b      	ldr	r2, [pc, #428]	@ (800caa0 <HAL_SAI_Init+0x2ec>)
 800c8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f6:	08da      	lsrs	r2, r3, #3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c8fc:	68f9      	ldr	r1, [r7, #12]
 800c8fe:	4b68      	ldr	r3, [pc, #416]	@ (800caa0 <HAL_SAI_Init+0x2ec>)
 800c900:	fba3 2301 	umull	r2, r3, r3, r1
 800c904:	08da      	lsrs	r2, r3, #3
 800c906:	4613      	mov	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	1aca      	subs	r2, r1, r3
 800c910:	2a08      	cmp	r2, #8
 800c912:	d904      	bls.n	800c91e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c922:	2b04      	cmp	r3, #4
 800c924:	d104      	bne.n	800c930 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	085a      	lsrs	r2, r3, #1
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_SAI_Init+0x18c>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d109      	bne.n	800c954 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d101      	bne.n	800c94c <HAL_SAI_Init+0x198>
 800c948:	2300      	movs	r3, #0
 800c94a:	e001      	b.n	800c950 <HAL_SAI_Init+0x19c>
 800c94c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c950:	61bb      	str	r3, [r7, #24]
 800c952:	e008      	b.n	800c966 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d102      	bne.n	800c962 <HAL_SAI_Init+0x1ae>
 800c95c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c960:	e000      	b.n	800c964 <HAL_SAI_Init+0x1b0>
 800c962:	2300      	movs	r3, #0
 800c964:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6819      	ldr	r1, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	4b4c      	ldr	r3, [pc, #304]	@ (800caa4 <HAL_SAI_Init+0x2f0>)
 800c972:	400b      	ands	r3, r1
 800c974:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6819      	ldr	r1, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c984:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c98a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c990:	431a      	orrs	r2, r3
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c99e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c9aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a1b      	ldr	r3, [r3, #32]
 800c9b0:	051b      	lsls	r3, r3, #20
 800c9b2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6859      	ldr	r1, [r3, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	4b38      	ldr	r3, [pc, #224]	@ (800caa8 <HAL_SAI_Init+0x2f4>)
 800c9c8:	400b      	ands	r3, r1
 800c9ca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6859      	ldr	r1, [r3, #4]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	699a      	ldr	r2, [r3, #24]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e0:	431a      	orrs	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	430a      	orrs	r2, r1
 800c9e8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6899      	ldr	r1, [r3, #8]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	4b2d      	ldr	r3, [pc, #180]	@ (800caac <HAL_SAI_Init+0x2f8>)
 800c9f6:	400b      	ands	r3, r1
 800c9f8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6899      	ldr	r1, [r3, #8]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca04:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ca0a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800ca10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800ca16:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ca20:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	430a      	orrs	r2, r1
 800ca28:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68d9      	ldr	r1, [r3, #12]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ca38:	400b      	ands	r3, r1
 800ca3a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68d9      	ldr	r1, [r3, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca4a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca50:	041b      	lsls	r3, r3, #16
 800ca52:	431a      	orrs	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	021b      	lsls	r3, r3, #8
 800ca5c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	430a      	orrs	r2, r1
 800ca64:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3720      	adds	r7, #32
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	40015804 	.word	0x40015804
 800ca8c:	40015824 	.word	0x40015824
 800ca90:	40015800 	.word	0x40015800
 800ca94:	40015c00 	.word	0x40015c00
 800ca98:	40015c04 	.word	0x40015c04
 800ca9c:	40015c24 	.word	0x40015c24
 800caa0:	cccccccd 	.word	0xcccccccd
 800caa4:	ff05c010 	.word	0xff05c010
 800caa8:	ffff1ff0 	.word	0xffff1ff0
 800caac:	fff88000 	.word	0xfff88000

0800cab0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800cab8:	4b17      	ldr	r3, [pc, #92]	@ (800cb18 <SAI_Disable+0x68>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a17      	ldr	r2, [pc, #92]	@ (800cb1c <SAI_Disable+0x6c>)
 800cabe:	fba2 2303 	umull	r2, r3, r2, r3
 800cac2:	0b1b      	lsrs	r3, r3, #12
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800cada:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	1e5a      	subs	r2, r3, #1
 800cae0:	60fa      	str	r2, [r7, #12]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10a      	bne.n	800cafc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800caf6:	2303      	movs	r3, #3
 800caf8:	72fb      	strb	r3, [r7, #11]
      break;
 800cafa:	e006      	b.n	800cb0a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1e8      	bne.n	800cadc <SAI_Disable+0x2c>

  return status;
 800cb0a:	7afb      	ldrb	r3, [r7, #11]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	20000020 	.word	0x20000020
 800cb1c:	95cbec1b 	.word	0x95cbec1b

0800cb20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e022      	b.n	800cb78 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d105      	bne.n	800cb4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7f7 ff93 	bl	8004a70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f814 	bl	800cb80 <HAL_SD_InitCard>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e00a      	b.n	800cb78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb80:	b5b0      	push	{r4, r5, r7, lr}
 800cb82:	b08e      	sub	sp, #56	@ 0x38
 800cb84:	af04      	add	r7, sp, #16
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb94:	2300      	movs	r3, #0
 800cb96:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800cb9c:	2376      	movs	r3, #118	@ 0x76
 800cb9e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681d      	ldr	r5, [r3, #0]
 800cba4:	466c      	mov	r4, sp
 800cba6:	f107 0318 	add.w	r3, r7, #24
 800cbaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbb2:	f107 030c 	add.w	r3, r7, #12
 800cbb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f004 f809 	bl	8010bd0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cbcc:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f004 f846 	bl	8010c64 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cbe6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cbe8:	2002      	movs	r0, #2
 800cbea:	f7f9 fc81 	bl	80064f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 ff02 	bl	800d9f8 <SD_PowerON>
 800cbf4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0a:	431a      	orrs	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e02e      	b.n	800cc72 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 fe21 	bl	800d85c <SD_InitCard>
 800cc1a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00b      	beq.n	800cc3a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc30:	431a      	orrs	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e01b      	b.n	800cc72 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc42:	4618      	mov	r0, r3
 800cc44:	f004 f8a0 	bl	8010d88 <SDMMC_CmdBlockLength>
 800cc48:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00f      	beq.n	800cc70 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a09      	ldr	r2, [pc, #36]	@ (800cc7c <HAL_SD_InitCard+0xfc>)
 800cc56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e000      	b.n	800cc72 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3728      	adds	r7, #40	@ 0x28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bdb0      	pop	{r4, r5, r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	004005ff 	.word	0x004005ff

0800cc80 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b092      	sub	sp, #72	@ 0x48
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc8e:	f7f9 fc23 	bl	80064d8 <HAL_GetTick>
 800cc92:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d107      	bne.n	800ccb2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cca6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e1bd      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	f040 81b0 	bne.w	800d020 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	441a      	add	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d907      	bls.n	800cce4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccd8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	e1a4      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2203      	movs	r2, #3
 800cce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d002      	beq.n	800cd02 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfe:	025b      	lsls	r3, r3, #9
 800cd00:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd02:	f04f 33ff 	mov.w	r3, #4294967295
 800cd06:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	025b      	lsls	r3, r3, #9
 800cd0c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd0e:	2390      	movs	r3, #144	@ 0x90
 800cd10:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd12:	2302      	movs	r3, #2
 800cd14:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f107 0214 	add.w	r2, r7, #20
 800cd26:	4611      	mov	r1, r2
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f004 f801 	bl	8010d30 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d90a      	bls.n	800cd4a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2202      	movs	r2, #2
 800cd38:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd40:	4618      	mov	r0, r3
 800cd42:	f004 f865 	bl	8010e10 <SDMMC_CmdReadMultiBlock>
 800cd46:	6478      	str	r0, [r7, #68]	@ 0x44
 800cd48:	e009      	b.n	800cd5e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd56:	4618      	mov	r0, r3
 800cd58:	f004 f838 	bl	8010dcc <SDMMC_CmdReadSingleBlock>
 800cd5c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d012      	beq.n	800cd8a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a7a      	ldr	r2, [pc, #488]	@ (800cf54 <HAL_SD_ReadBlocks+0x2d4>)
 800cd6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd72:	431a      	orrs	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e151      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd8e:	e061      	b.n	800ce54 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d03c      	beq.n	800ce18 <HAL_SD_ReadBlocks+0x198>
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d039      	beq.n	800ce18 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cda4:	2300      	movs	r3, #0
 800cda6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cda8:	e033      	b.n	800ce12 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f003 ff3a 	bl	8010c28 <SDMMC_ReadFIFO>
 800cdb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cdca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdcc:	0a1b      	lsrs	r3, r3, #8
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cdda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cddc:	3b01      	subs	r3, #1
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde2:	0c1b      	lsrs	r3, r3, #16
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdec:	3301      	adds	r3, #1
 800cdee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cdf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf8:	0e1b      	lsrs	r3, r3, #24
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce02:	3301      	adds	r3, #1
 800ce04:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ce06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800ce0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce0e:	3301      	adds	r3, #1
 800ce10:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce14:	2b07      	cmp	r3, #7
 800ce16:	d9c8      	bls.n	800cdaa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce18:	f7f9 fb5e 	bl	80064d8 <HAL_GetTick>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d902      	bls.n	800ce2e <HAL_SD_ReadBlocks+0x1ae>
 800ce28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d112      	bne.n	800ce54 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a48      	ldr	r2, [pc, #288]	@ (800cf54 <HAL_SD_ReadBlocks+0x2d4>)
 800ce34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e0ec      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce5a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d096      	beq.n	800cd90 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d022      	beq.n	800ceb6 <HAL_SD_ReadBlocks+0x236>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d91f      	bls.n	800ceb6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d01b      	beq.n	800ceb6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f004 f82a 	bl	8010edc <SDMMC_CmdStopTransfer>
 800ce88:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d012      	beq.n	800ceb6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a2f      	ldr	r2, [pc, #188]	@ (800cf54 <HAL_SD_ReadBlocks+0x2d4>)
 800ce96:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e0bb      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cebc:	f003 0308 	and.w	r3, r3, #8
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d012      	beq.n	800ceea <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a22      	ldr	r2, [pc, #136]	@ (800cf54 <HAL_SD_ReadBlocks+0x2d4>)
 800ceca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced0:	f043 0208 	orr.w	r2, r3, #8
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e0a1      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef0:	f003 0302 	and.w	r3, r3, #2
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d012      	beq.n	800cf1e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a15      	ldr	r2, [pc, #84]	@ (800cf54 <HAL_SD_ReadBlocks+0x2d4>)
 800cefe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf04:	f043 0202 	orr.w	r2, r3, #2
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e087      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf24:	f003 0320 	and.w	r3, r3, #32
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d064      	beq.n	800cff6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a08      	ldr	r2, [pc, #32]	@ (800cf54 <HAL_SD_ReadBlocks+0x2d4>)
 800cf32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf38:	f043 0220 	orr.w	r2, r3, #32
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e06d      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
 800cf52:	bf00      	nop
 800cf54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f003 fe63 	bl	8010c28 <SDMMC_ReadFIFO>
 800cf62:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cf64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6e:	3301      	adds	r3, #1
 800cf70:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf74:	3b01      	subs	r3, #1
 800cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7a:	0a1b      	lsrs	r3, r3, #8
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf84:	3301      	adds	r3, #1
 800cf86:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cf8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf90:	0c1b      	lsrs	r3, r3, #16
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa6:	0e1b      	lsrs	r3, r3, #24
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cfae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cfba:	f7f9 fa8d 	bl	80064d8 <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d902      	bls.n	800cfd0 <HAL_SD_ReadBlocks+0x350>
 800cfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d112      	bne.n	800cff6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a18      	ldr	r2, [pc, #96]	@ (800d038 <HAL_SD_ReadBlocks+0x3b8>)
 800cfd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e01b      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <HAL_SD_ReadBlocks+0x38a>
 800d004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1a6      	bne.n	800cf58 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d012:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	e006      	b.n	800d02e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d024:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
  }
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3748      	adds	r7, #72	@ 0x48
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	004005ff 	.word	0x004005ff

0800d03c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b092      	sub	sp, #72	@ 0x48
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d04a:	f7f9 fa45 	bl	80064d8 <HAL_GetTick>
 800d04e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d107      	bne.n	800d06e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d062:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e165      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b01      	cmp	r3, #1
 800d078:	f040 8158 	bne.w	800d32c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	441a      	add	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d907      	bls.n	800d0a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d094:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d09c:	2301      	movs	r3, #1
 800d09e:	e14c      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2203      	movs	r2, #3
 800d0a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d002      	beq.n	800d0be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ba:	025b      	lsls	r3, r3, #9
 800d0bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	025b      	lsls	r3, r3, #9
 800d0c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d0ca:	2390      	movs	r3, #144	@ 0x90
 800d0cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f107 0218 	add.w	r2, r7, #24
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f003 fe23 	bl	8010d30 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d90a      	bls.n	800d106 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f003 fecb 	bl	8010e98 <SDMMC_CmdWriteMultiBlock>
 800d102:	6478      	str	r0, [r7, #68]	@ 0x44
 800d104:	e009      	b.n	800d11a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2210      	movs	r2, #16
 800d10a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d112:	4618      	mov	r0, r3
 800d114:	f003 fe9e 	bl	8010e54 <SDMMC_CmdWriteSingleBlock>
 800d118:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d11a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d012      	beq.n	800d146 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a87      	ldr	r2, [pc, #540]	@ (800d344 <HAL_SD_WriteBlocks+0x308>)
 800d126:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d12c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d12e:	431a      	orrs	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e0f9      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d14a:	e065      	b.n	800d218 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d040      	beq.n	800d1dc <HAL_SD_WriteBlocks+0x1a0>
 800d15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d03d      	beq.n	800d1dc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d160:	2300      	movs	r3, #0
 800d162:	643b      	str	r3, [r7, #64]	@ 0x40
 800d164:	e037      	b.n	800d1d6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d16e:	3301      	adds	r3, #1
 800d170:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d174:	3b01      	subs	r3, #1
 800d176:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	021a      	lsls	r2, r3, #8
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d186:	3301      	adds	r3, #1
 800d188:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d18a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d18c:	3b01      	subs	r3, #1
 800d18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	041a      	lsls	r2, r3, #16
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	4313      	orrs	r3, r2
 800d19a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d19e:	3301      	adds	r3, #1
 800d1a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d1a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	061a      	lsls	r2, r3, #24
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f107 0214 	add.w	r2, r7, #20
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f003 fd39 	bl	8010c42 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d1d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d8:	2b07      	cmp	r3, #7
 800d1da:	d9c4      	bls.n	800d166 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d1dc:	f7f9 f97c 	bl	80064d8 <HAL_GetTick>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d902      	bls.n	800d1f2 <HAL_SD_WriteBlocks+0x1b6>
 800d1ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d112      	bne.n	800d218 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a53      	ldr	r2, [pc, #332]	@ (800d344 <HAL_SD_WriteBlocks+0x308>)
 800d1f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d200:	431a      	orrs	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e090      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d21e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d222:	2b00      	cmp	r3, #0
 800d224:	d092      	beq.n	800d14c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d22c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d230:	2b00      	cmp	r3, #0
 800d232:	d022      	beq.n	800d27a <HAL_SD_WriteBlocks+0x23e>
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b01      	cmp	r3, #1
 800d238:	d91f      	bls.n	800d27a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d01b      	beq.n	800d27a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f003 fe48 	bl	8010edc <SDMMC_CmdStopTransfer>
 800d24c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d24e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d250:	2b00      	cmp	r3, #0
 800d252:	d012      	beq.n	800d27a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a3a      	ldr	r2, [pc, #232]	@ (800d344 <HAL_SD_WriteBlocks+0x308>)
 800d25a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d262:	431a      	orrs	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e05f      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d280:	f003 0308 	and.w	r3, r3, #8
 800d284:	2b00      	cmp	r3, #0
 800d286:	d012      	beq.n	800d2ae <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a2d      	ldr	r2, [pc, #180]	@ (800d344 <HAL_SD_WriteBlocks+0x308>)
 800d28e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d294:	f043 0208 	orr.w	r2, r3, #8
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e045      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d012      	beq.n	800d2e2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a20      	ldr	r2, [pc, #128]	@ (800d344 <HAL_SD_WriteBlocks+0x308>)
 800d2c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c8:	f043 0202 	orr.w	r2, r3, #2
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e02b      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e8:	f003 0310 	and.w	r3, r3, #16
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d012      	beq.n	800d316 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a13      	ldr	r2, [pc, #76]	@ (800d344 <HAL_SD_WriteBlocks+0x308>)
 800d2f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2fc:	f043 0210 	orr.w	r2, r3, #16
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e011      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d31e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2201      	movs	r2, #1
 800d324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d328:	2300      	movs	r3, #0
 800d32a:	e006      	b.n	800d33a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d330:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
  }
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3748      	adds	r7, #72	@ 0x48
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	004005ff 	.word	0x004005ff

0800d348 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d356:	0f9b      	lsrs	r3, r3, #30
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d362:	0e9b      	lsrs	r3, r3, #26
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 030f 	and.w	r3, r3, #15
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d374:	0e1b      	lsrs	r3, r3, #24
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f003 0303 	and.w	r3, r3, #3
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d386:	0c1b      	lsrs	r3, r3, #16
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d392:	0a1b      	lsrs	r3, r3, #8
 800d394:	b2da      	uxtb	r2, r3
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3a8:	0d1b      	lsrs	r3, r3, #20
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3b4:	0c1b      	lsrs	r3, r3, #16
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	f003 030f 	and.w	r3, r3, #15
 800d3bc:	b2da      	uxtb	r2, r3
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3c6:	0bdb      	lsrs	r3, r3, #15
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3d8:	0b9b      	lsrs	r3, r3, #14
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	f003 0301 	and.w	r3, r3, #1
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3ea:	0b5b      	lsrs	r3, r3, #13
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3fc:	0b1b      	lsrs	r3, r3, #12
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	f003 0301 	and.w	r3, r3, #1
 800d404:	b2da      	uxtb	r2, r3
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2200      	movs	r2, #0
 800d40e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d414:	2b00      	cmp	r3, #0
 800d416:	d163      	bne.n	800d4e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d41c:	009a      	lsls	r2, r3, #2
 800d41e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d422:	4013      	ands	r3, r2
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d428:	0f92      	lsrs	r2, r2, #30
 800d42a:	431a      	orrs	r2, r3
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d434:	0edb      	lsrs	r3, r3, #27
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f003 0307 	and.w	r3, r3, #7
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d446:	0e1b      	lsrs	r3, r3, #24
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	f003 0307 	and.w	r3, r3, #7
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d458:	0d5b      	lsrs	r3, r3, #21
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	f003 0307 	and.w	r3, r3, #7
 800d460:	b2da      	uxtb	r2, r3
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d46a:	0c9b      	lsrs	r3, r3, #18
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	f003 0307 	and.w	r3, r3, #7
 800d472:	b2da      	uxtb	r2, r3
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d47c:	0bdb      	lsrs	r3, r3, #15
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	f003 0307 	and.w	r3, r3, #7
 800d484:	b2da      	uxtb	r2, r3
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	7e1b      	ldrb	r3, [r3, #24]
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	f003 0307 	and.w	r3, r3, #7
 800d49e:	3302      	adds	r3, #2
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d4aa:	fb03 f202 	mul.w	r2, r3, r2
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	7a1b      	ldrb	r3, [r3, #8]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	f003 030f 	and.w	r3, r3, #15
 800d4bc:	2201      	movs	r2, #1
 800d4be:	409a      	lsls	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d4cc:	0a52      	lsrs	r2, r2, #9
 800d4ce:	fb03 f202 	mul.w	r2, r3, r2
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4dc:	661a      	str	r2, [r3, #96]	@ 0x60
 800d4de:	e031      	b.n	800d544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d11d      	bne.n	800d524 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4ec:	041b      	lsls	r3, r3, #16
 800d4ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4f6:	0c1b      	lsrs	r3, r3, #16
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	3301      	adds	r3, #1
 800d504:	029a      	lsls	r2, r3, #10
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d518:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	661a      	str	r2, [r3, #96]	@ 0x60
 800d522:	e00f      	b.n	800d544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a58      	ldr	r2, [pc, #352]	@ (800d68c <HAL_SD_GetCardCSD+0x344>)
 800d52a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d530:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	e09d      	b.n	800d680 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d548:	0b9b      	lsrs	r3, r3, #14
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	b2da      	uxtb	r2, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d55a:	09db      	lsrs	r3, r3, #7
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d562:	b2da      	uxtb	r2, r3
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d572:	b2da      	uxtb	r2, r3
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d57c:	0fdb      	lsrs	r3, r3, #31
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d588:	0f5b      	lsrs	r3, r3, #29
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	f003 0303 	and.w	r3, r3, #3
 800d590:	b2da      	uxtb	r2, r3
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d59a:	0e9b      	lsrs	r3, r3, #26
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	f003 0307 	and.w	r3, r3, #7
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ac:	0d9b      	lsrs	r3, r3, #22
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	f003 030f 	and.w	r3, r3, #15
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5be:	0d5b      	lsrs	r3, r3, #21
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5da:	0c1b      	lsrs	r3, r3, #16
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ee:	0bdb      	lsrs	r3, r3, #15
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	b2da      	uxtb	r2, r3
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d602:	0b9b      	lsrs	r3, r3, #14
 800d604:	b2db      	uxtb	r3, r3
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d616:	0b5b      	lsrs	r3, r3, #13
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d62a:	0b1b      	lsrs	r3, r3, #12
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	b2da      	uxtb	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d63e:	0a9b      	lsrs	r3, r3, #10
 800d640:	b2db      	uxtb	r3, r3
 800d642:	f003 0303 	and.w	r3, r3, #3
 800d646:	b2da      	uxtb	r2, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d652:	0a1b      	lsrs	r3, r3, #8
 800d654:	b2db      	uxtb	r3, r3
 800d656:	f003 0303 	and.w	r3, r3, #3
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d66e:	b2da      	uxtb	r2, r3
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	004005ff 	.word	0x004005ff

0800d690 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d6e8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ea:	b08e      	sub	sp, #56	@ 0x38
 800d6ec:	af04      	add	r7, sp, #16
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2203      	movs	r2, #3
 800d6fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d704:	2b03      	cmp	r3, #3
 800d706:	d02e      	beq.n	800d766 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d70e:	d106      	bne.n	800d71e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d714:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d71c:	e029      	b.n	800d772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d724:	d10a      	bne.n	800d73c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa1c 	bl	800db64 <SD_WideBus_Enable>
 800d72c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	431a      	orrs	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	639a      	str	r2, [r3, #56]	@ 0x38
 800d73a:	e01a      	b.n	800d772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10a      	bne.n	800d758 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fa59 	bl	800dbfa <SD_WideBus_Disable>
 800d748:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d74e:	6a3b      	ldr	r3, [r7, #32]
 800d750:	431a      	orrs	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	639a      	str	r2, [r3, #56]	@ 0x38
 800d756:	e00c      	b.n	800d772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d75c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	639a      	str	r2, [r3, #56]	@ 0x38
 800d764:	e005      	b.n	800d772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d76a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00b      	beq.n	800d792 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a26      	ldr	r2, [pc, #152]	@ (800d818 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d780:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d790:	e01f      	b.n	800d7d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681d      	ldr	r5, [r3, #0]
 800d7b8:	466c      	mov	r4, sp
 800d7ba:	f107 0314 	add.w	r3, r7, #20
 800d7be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7c6:	f107 0308 	add.w	r3, r7, #8
 800d7ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f003 f9ff 	bl	8010bd0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f003 fad4 	bl	8010d88 <SDMMC_CmdBlockLength>
 800d7e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00c      	beq.n	800d802 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a0a      	ldr	r2, [pc, #40]	@ (800d818 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d7ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	431a      	orrs	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d80a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3728      	adds	r7, #40	@ 0x28
 800d812:	46bd      	mov	sp, r7
 800d814:	bdb0      	pop	{r4, r5, r7, pc}
 800d816:	bf00      	nop
 800d818:	004005ff 	.word	0x004005ff

0800d81c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d828:	f107 030c 	add.w	r3, r7, #12
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f970 	bl	800db14 <SD_SendStatus>
 800d834:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d005      	beq.n	800d848 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	431a      	orrs	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	0a5b      	lsrs	r3, r3, #9
 800d84c:	f003 030f 	and.w	r3, r3, #15
 800d850:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d852:	693b      	ldr	r3, [r7, #16]
}
 800d854:	4618      	mov	r0, r3
 800d856:	3718      	adds	r7, #24
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d85c:	b5b0      	push	{r4, r5, r7, lr}
 800d85e:	b094      	sub	sp, #80	@ 0x50
 800d860:	af04      	add	r7, sp, #16
 800d862:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d864:	2301      	movs	r3, #1
 800d866:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f003 fa07 	bl	8010c80 <SDMMC_GetPowerState>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d102      	bne.n	800d87e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d878:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d87c:	e0b8      	b.n	800d9f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d882:	2b03      	cmp	r3, #3
 800d884:	d02f      	beq.n	800d8e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f003 fc31 	bl	80110f2 <SDMMC_CmdSendCID>
 800d890:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d894:	2b00      	cmp	r3, #0
 800d896:	d001      	beq.n	800d89c <SD_InitCard+0x40>
    {
      return errorstate;
 800d898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d89a:	e0a9      	b.n	800d9f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f003 fa31 	bl	8010d0a <SDMMC_GetResponse>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2104      	movs	r1, #4
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f003 fa28 	bl	8010d0a <SDMMC_GetResponse>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2108      	movs	r1, #8
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f003 fa1f 	bl	8010d0a <SDMMC_GetResponse>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	210c      	movs	r1, #12
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f003 fa16 	bl	8010d0a <SDMMC_GetResponse>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d00d      	beq.n	800d90a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f107 020e 	add.w	r2, r7, #14
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f003 fc37 	bl	801116c <SDMMC_CmdSetRelAdd>
 800d8fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <SD_InitCard+0xae>
    {
      return errorstate;
 800d906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d908:	e072      	b.n	800d9f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d036      	beq.n	800d980 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d912:	89fb      	ldrh	r3, [r7, #14]
 800d914:	461a      	mov	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d922:	041b      	lsls	r3, r3, #16
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f003 fc01 	bl	801112e <SDMMC_CmdSendCSD>
 800d92c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d936:	e05b      	b.n	800d9f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2100      	movs	r1, #0
 800d93e:	4618      	mov	r0, r3
 800d940:	f003 f9e3 	bl	8010d0a <SDMMC_GetResponse>
 800d944:	4602      	mov	r2, r0
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2104      	movs	r1, #4
 800d950:	4618      	mov	r0, r3
 800d952:	f003 f9da 	bl	8010d0a <SDMMC_GetResponse>
 800d956:	4602      	mov	r2, r0
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2108      	movs	r1, #8
 800d962:	4618      	mov	r0, r3
 800d964:	f003 f9d1 	bl	8010d0a <SDMMC_GetResponse>
 800d968:	4602      	mov	r2, r0
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	210c      	movs	r1, #12
 800d974:	4618      	mov	r0, r3
 800d976:	f003 f9c8 	bl	8010d0a <SDMMC_GetResponse>
 800d97a:	4602      	mov	r2, r0
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2104      	movs	r1, #4
 800d986:	4618      	mov	r0, r3
 800d988:	f003 f9bf 	bl	8010d0a <SDMMC_GetResponse>
 800d98c:	4603      	mov	r3, r0
 800d98e:	0d1a      	lsrs	r2, r3, #20
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d994:	f107 0310 	add.w	r3, r7, #16
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff fcd4 	bl	800d348 <HAL_SD_GetCardCSD>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d002      	beq.n	800d9ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d9aa:	e021      	b.n	800d9f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6819      	ldr	r1, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9b4:	041b      	lsls	r3, r3, #16
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	461c      	mov	r4, r3
 800d9ba:	4615      	mov	r5, r2
 800d9bc:	4622      	mov	r2, r4
 800d9be:	462b      	mov	r3, r5
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	f003 faad 	bl	8010f20 <SDMMC_CmdSelDesel>
 800d9c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <SD_InitCard+0x176>
  {
    return errorstate;
 800d9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9d0:	e00e      	b.n	800d9f0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681d      	ldr	r5, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	466c      	mov	r4, sp
 800d9da:	f103 0210 	add.w	r2, r3, #16
 800d9de:	ca07      	ldmia	r2, {r0, r1, r2}
 800d9e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	f003 f8f1 	bl	8010bd0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3740      	adds	r7, #64	@ 0x40
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800da04:	2300      	movs	r3, #0
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	2300      	movs	r3, #0
 800da0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4618      	mov	r0, r3
 800da12:	f003 faa8 	bl	8010f66 <SDMMC_CmdGoIdleState>
 800da16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <SD_PowerON+0x2a>
  {
    return errorstate;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	e072      	b.n	800db08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4618      	mov	r0, r3
 800da28:	f003 fabb 	bl	8010fa2 <SDMMC_CmdOperCond>
 800da2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00d      	beq.n	800da50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4618      	mov	r0, r3
 800da40:	f003 fa91 	bl	8010f66 <SDMMC_CmdGoIdleState>
 800da44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d004      	beq.n	800da56 <SD_PowerON+0x5e>
    {
      return errorstate;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	e05b      	b.n	800db08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d137      	bne.n	800dace <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2100      	movs	r1, #0
 800da64:	4618      	mov	r0, r3
 800da66:	f003 fabb 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800da6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d02d      	beq.n	800dace <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800da76:	e047      	b.n	800db08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2100      	movs	r1, #0
 800da7e:	4618      	mov	r0, r3
 800da80:	f003 faae 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800da84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <SD_PowerON+0x98>
    {
      return errorstate;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	e03b      	b.n	800db08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	491e      	ldr	r1, [pc, #120]	@ (800db10 <SD_PowerON+0x118>)
 800da96:	4618      	mov	r0, r3
 800da98:	f003 fac4 	bl	8011024 <SDMMC_CmdAppOperCommand>
 800da9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800daa8:	e02e      	b.n	800db08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2100      	movs	r1, #0
 800dab0:	4618      	mov	r0, r3
 800dab2:	f003 f92a 	bl	8010d0a <SDMMC_GetResponse>
 800dab6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	0fdb      	lsrs	r3, r3, #31
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d101      	bne.n	800dac4 <SD_PowerON+0xcc>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e000      	b.n	800dac6 <SD_PowerON+0xce>
 800dac4:	2300      	movs	r3, #0
 800dac6:	613b      	str	r3, [r7, #16]

    count++;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	3301      	adds	r3, #1
 800dacc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d802      	bhi.n	800dade <SD_PowerON+0xe6>
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d0cc      	beq.n	800da78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d902      	bls.n	800daee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800daec:	e00c      	b.n	800db08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d003      	beq.n	800db00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	645a      	str	r2, [r3, #68]	@ 0x44
 800dafe:	e002      	b.n	800db06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	c1100000 	.word	0xc1100000

0800db14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800db24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db28:	e018      	b.n	800db5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db32:	041b      	lsls	r3, r3, #16
 800db34:	4619      	mov	r1, r3
 800db36:	4610      	mov	r0, r2
 800db38:	f003 fb39 	bl	80111ae <SDMMC_CmdSendStatus>
 800db3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <SD_SendStatus+0x34>
  {
    return errorstate;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	e009      	b.n	800db5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2100      	movs	r1, #0
 800db4e:	4618      	mov	r0, r3
 800db50:	f003 f8db 	bl	8010d0a <SDMMC_GetResponse>
 800db54:	4602      	mov	r2, r0
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b086      	sub	sp, #24
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db6c:	2300      	movs	r3, #0
 800db6e:	60fb      	str	r3, [r7, #12]
 800db70:	2300      	movs	r3, #0
 800db72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2100      	movs	r1, #0
 800db7a:	4618      	mov	r0, r3
 800db7c:	f003 f8c5 	bl	8010d0a <SDMMC_GetResponse>
 800db80:	4603      	mov	r3, r0
 800db82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db8a:	d102      	bne.n	800db92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db90:	e02f      	b.n	800dbf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db92:	f107 030c 	add.w	r3, r7, #12
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f879 	bl	800dc90 <SD_FindSCR>
 800db9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	e023      	b.n	800dbf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d01c      	beq.n	800dbee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbbc:	041b      	lsls	r3, r3, #16
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	f003 fa0d 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800dbc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	e00f      	b.n	800dbf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2102      	movs	r1, #2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f003 fa47 	bl	801106c <SDMMC_CmdBusWidth>
 800dbde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	e003      	b.n	800dbf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e001      	b.n	800dbf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b086      	sub	sp, #24
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dc02:	2300      	movs	r3, #0
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	2300      	movs	r3, #0
 800dc08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f003 f87a 	bl	8010d0a <SDMMC_GetResponse>
 800dc16:	4603      	mov	r3, r0
 800dc18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc20:	d102      	bne.n	800dc28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc26:	e02f      	b.n	800dc88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dc28:	f107 030c 	add.w	r3, r7, #12
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 f82e 	bl	800dc90 <SD_FindSCR>
 800dc34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	e023      	b.n	800dc88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d01c      	beq.n	800dc84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc52:	041b      	lsls	r3, r3, #16
 800dc54:	4619      	mov	r1, r3
 800dc56:	4610      	mov	r0, r2
 800dc58:	f003 f9c2 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800dc5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	e00f      	b.n	800dc88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f003 f9fc 	bl	801106c <SDMMC_CmdBusWidth>
 800dc74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	e003      	b.n	800dc88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc80:	2300      	movs	r3, #0
 800dc82:	e001      	b.n	800dc88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc90:	b590      	push	{r4, r7, lr}
 800dc92:	b08f      	sub	sp, #60	@ 0x3c
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc9a:	f7f8 fc1d 	bl	80064d8 <HAL_GetTick>
 800dc9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dca0:	2300      	movs	r3, #0
 800dca2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dca4:	2300      	movs	r3, #0
 800dca6:	60bb      	str	r3, [r7, #8]
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2108      	movs	r1, #8
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f003 f866 	bl	8010d88 <SDMMC_CmdBlockLength>
 800dcbc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d001      	beq.n	800dcc8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc6:	e0b2      	b.n	800de2e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcd0:	041b      	lsls	r3, r3, #16
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	4610      	mov	r0, r2
 800dcd6:	f003 f983 	bl	8010fe0 <SDMMC_CmdAppCommand>
 800dcda:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d001      	beq.n	800dce6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	e0a3      	b.n	800de2e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dce6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dcec:	2308      	movs	r3, #8
 800dcee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dcf0:	2330      	movs	r3, #48	@ 0x30
 800dcf2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f107 0210 	add.w	r2, r7, #16
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f003 f810 	bl	8010d30 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f003 f9cb 	bl	80110b0 <SDMMC_CmdSendSCR>
 800dd1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d02a      	beq.n	800dd78 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd24:	e083      	b.n	800de2e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d00f      	beq.n	800dd54 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6819      	ldr	r1, [r3, #0]
 800dd38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	f107 0208 	add.w	r2, r7, #8
 800dd40:	18d4      	adds	r4, r2, r3
 800dd42:	4608      	mov	r0, r1
 800dd44:	f002 ff70 	bl	8010c28 <SDMMC_ReadFIFO>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	6023      	str	r3, [r4, #0]
      index++;
 800dd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd4e:	3301      	adds	r3, #1
 800dd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd52:	e006      	b.n	800dd62 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d012      	beq.n	800dd88 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dd62:	f7f8 fbb9 	bl	80064d8 <HAL_GetTick>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd70:	d102      	bne.n	800dd78 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd76:	e05a      	b.n	800de2e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd7e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d0cf      	beq.n	800dd26 <SD_FindSCR+0x96>
 800dd86:	e000      	b.n	800dd8a <SD_FindSCR+0xfa>
      break;
 800dd88:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd90:	f003 0308 	and.w	r3, r3, #8
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d005      	beq.n	800dda4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2208      	movs	r2, #8
 800dd9e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dda0:	2308      	movs	r3, #8
 800dda2:	e044      	b.n	800de2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddaa:	f003 0302 	and.w	r3, r3, #2
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d005      	beq.n	800ddbe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	e037      	b.n	800de2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc4:	f003 0320 	and.w	r3, r3, #32
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d005      	beq.n	800ddd8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2220      	movs	r2, #32
 800ddd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ddd4:	2320      	movs	r3, #32
 800ddd6:	e02a      	b.n	800de2e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dde0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	061a      	lsls	r2, r3, #24
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	0a1b      	lsrs	r3, r3, #8
 800ddf4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddf8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	0e1b      	lsrs	r3, r3, #24
 800ddfe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800de00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de02:	601a      	str	r2, [r3, #0]
    scr++;
 800de04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de06:	3304      	adds	r3, #4
 800de08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	061a      	lsls	r2, r3, #24
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	021b      	lsls	r3, r3, #8
 800de12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	0a1b      	lsrs	r3, r3, #8
 800de1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	0e1b      	lsrs	r3, r3, #24
 800de26:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	373c      	adds	r7, #60	@ 0x3c
 800de32:	46bd      	mov	sp, r7
 800de34:	bd90      	pop	{r4, r7, pc}

0800de36 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b082      	sub	sp, #8
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d101      	bne.n	800de4a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e025      	b.n	800de96 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d106      	bne.n	800de64 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7f7 f9e2 	bl	8005228 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2202      	movs	r2, #2
 800de68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3304      	adds	r3, #4
 800de74:	4619      	mov	r1, r3
 800de76:	4610      	mov	r0, r2
 800de78:	f002 fde4 	bl	8010a44 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6818      	ldr	r0, [r3, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	461a      	mov	r2, r3
 800de86:	6839      	ldr	r1, [r7, #0]
 800de88:	f002 fe38 	bl	8010afc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
	...

0800dea0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	e04c      	b.n	800df4c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7f6 fe34 	bl	8004b34 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f022 0203 	bic.w	r2, r2, #3
 800dee2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4b19      	ldr	r3, [pc, #100]	@ (800df54 <HAL_SPDIFRX_Init+0xb4>)
 800def0:	4013      	ands	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800defc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800df02:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800df08:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800df0e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800df14:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800df1a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800df20:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800df26:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800df2c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	4313      	orrs	r3, r2
 800df32:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	fff88407 	.word	0xfff88407

0800df58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	e09d      	b.n	800e0a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d108      	bne.n	800df84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df7a:	d009      	beq.n	800df90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	61da      	str	r2, [r3, #28]
 800df82:	e005      	b.n	800df90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d106      	bne.n	800dfb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7f6 fe26 	bl	8004bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2202      	movs	r2, #2
 800dfb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dfc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dfd0:	d902      	bls.n	800dfd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
 800dfd6:	e002      	b.n	800dfde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dfd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800dfe6:	d007      	beq.n	800dff8 <HAL_SPI_Init+0xa0>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dff0:	d002      	beq.n	800dff8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e008:	431a      	orrs	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	f003 0302 	and.w	r3, r3, #2
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	431a      	orrs	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e026:	431a      	orrs	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e030:	431a      	orrs	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a1b      	ldr	r3, [r3, #32]
 800e036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e03a:	ea42 0103 	orr.w	r1, r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e042:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	430a      	orrs	r2, r1
 800e04c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	0c1b      	lsrs	r3, r3, #16
 800e054:	f003 0204 	and.w	r2, r3, #4
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e05c:	f003 0310 	and.w	r3, r3, #16
 800e060:	431a      	orrs	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e066:	f003 0308 	and.w	r3, r3, #8
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e074:	ea42 0103 	orr.w	r1, r2, r3
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	430a      	orrs	r2, r1
 800e084:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	69da      	ldr	r2, [r3, #28]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e094:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d101      	bne.n	800e0c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e049      	b.n	800e154 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7f6 fdf3 	bl	8004cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	f000 fc11 	bl	800e914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d001      	beq.n	800e174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e054      	b.n	800e21e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2202      	movs	r2, #2
 800e178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68da      	ldr	r2, [r3, #12]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0201 	orr.w	r2, r2, #1
 800e18a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a26      	ldr	r2, [pc, #152]	@ (800e22c <HAL_TIM_Base_Start_IT+0xd0>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d022      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e19e:	d01d      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a22      	ldr	r2, [pc, #136]	@ (800e230 <HAL_TIM_Base_Start_IT+0xd4>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d018      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a21      	ldr	r2, [pc, #132]	@ (800e234 <HAL_TIM_Base_Start_IT+0xd8>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d013      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a1f      	ldr	r2, [pc, #124]	@ (800e238 <HAL_TIM_Base_Start_IT+0xdc>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d00e      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e23c <HAL_TIM_Base_Start_IT+0xe0>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d009      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a1c      	ldr	r2, [pc, #112]	@ (800e240 <HAL_TIM_Base_Start_IT+0xe4>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d004      	beq.n	800e1dc <HAL_TIM_Base_Start_IT+0x80>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a1b      	ldr	r2, [pc, #108]	@ (800e244 <HAL_TIM_Base_Start_IT+0xe8>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d115      	bne.n	800e208 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	689a      	ldr	r2, [r3, #8]
 800e1e2:	4b19      	ldr	r3, [pc, #100]	@ (800e248 <HAL_TIM_Base_Start_IT+0xec>)
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b06      	cmp	r3, #6
 800e1ec:	d015      	beq.n	800e21a <HAL_TIM_Base_Start_IT+0xbe>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1f4:	d011      	beq.n	800e21a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f042 0201 	orr.w	r2, r2, #1
 800e204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e206:	e008      	b.n	800e21a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f042 0201 	orr.w	r2, r2, #1
 800e216:	601a      	str	r2, [r3, #0]
 800e218:	e000      	b.n	800e21c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e21a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	40010000 	.word	0x40010000
 800e230:	40000400 	.word	0x40000400
 800e234:	40000800 	.word	0x40000800
 800e238:	40000c00 	.word	0x40000c00
 800e23c:	40010400 	.word	0x40010400
 800e240:	40014000 	.word	0x40014000
 800e244:	40001800 	.word	0x40001800
 800e248:	00010007 	.word	0x00010007

0800e24c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d101      	bne.n	800e25e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e049      	b.n	800e2f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e264:	b2db      	uxtb	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	d106      	bne.n	800e278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7f6 fd92 	bl	8004d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2202      	movs	r2, #2
 800e27c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3304      	adds	r3, #4
 800e288:	4619      	mov	r1, r3
 800e28a:	4610      	mov	r0, r2
 800e28c:	f000 fb42 	bl	800e914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2201      	movs	r2, #1
 800e29c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	f003 0302 	and.w	r3, r3, #2
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d020      	beq.n	800e35e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f003 0302 	and.w	r3, r3, #2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d01b      	beq.n	800e35e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f06f 0202 	mvn.w	r2, #2
 800e32e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	f003 0303 	and.w	r3, r3, #3
 800e340:	2b00      	cmp	r3, #0
 800e342:	d003      	beq.n	800e34c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fac7 	bl	800e8d8 <HAL_TIM_IC_CaptureCallback>
 800e34a:	e005      	b.n	800e358 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fab9 	bl	800e8c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 faca 	bl	800e8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	f003 0304 	and.w	r3, r3, #4
 800e364:	2b00      	cmp	r3, #0
 800e366:	d020      	beq.n	800e3aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f003 0304 	and.w	r3, r3, #4
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d01b      	beq.n	800e3aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f06f 0204 	mvn.w	r2, #4
 800e37a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2202      	movs	r2, #2
 800e380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d003      	beq.n	800e398 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 faa1 	bl	800e8d8 <HAL_TIM_IC_CaptureCallback>
 800e396:	e005      	b.n	800e3a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 fa93 	bl	800e8c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 faa4 	bl	800e8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d020      	beq.n	800e3f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f003 0308 	and.w	r3, r3, #8
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d01b      	beq.n	800e3f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f06f 0208 	mvn.w	r2, #8
 800e3c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2204      	movs	r2, #4
 800e3cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	f003 0303 	and.w	r3, r3, #3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fa7b 	bl	800e8d8 <HAL_TIM_IC_CaptureCallback>
 800e3e2:	e005      	b.n	800e3f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fa6d 	bl	800e8c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fa7e 	bl	800e8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	f003 0310 	and.w	r3, r3, #16
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d020      	beq.n	800e442 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f003 0310 	and.w	r3, r3, #16
 800e406:	2b00      	cmp	r3, #0
 800e408:	d01b      	beq.n	800e442 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f06f 0210 	mvn.w	r2, #16
 800e412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2208      	movs	r2, #8
 800e418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	69db      	ldr	r3, [r3, #28]
 800e420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fa55 	bl	800e8d8 <HAL_TIM_IC_CaptureCallback>
 800e42e:	e005      	b.n	800e43c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fa47 	bl	800e8c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fa58 	bl	800e8ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d00c      	beq.n	800e466 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b00      	cmp	r3, #0
 800e454:	d007      	beq.n	800e466 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f06f 0201 	mvn.w	r2, #1
 800e45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7f5 fe35 	bl	80040d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d104      	bne.n	800e47a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00c      	beq.n	800e494 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e480:	2b00      	cmp	r3, #0
 800e482:	d007      	beq.n	800e494 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e48c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 fef4 	bl	800f27c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00c      	beq.n	800e4b8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d007      	beq.n	800e4b8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e4b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 feec 	bl	800f290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00c      	beq.n	800e4dc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d007      	beq.n	800e4dc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fa12 	bl	800e900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	f003 0320 	and.w	r3, r3, #32
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00c      	beq.n	800e500 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f003 0320 	and.w	r3, r3, #32
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d007      	beq.n	800e500 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f06f 0220 	mvn.w	r2, #32
 800e4f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 feb4 	bl	800f268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e500:	bf00      	nop
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e514:	2300      	movs	r3, #0
 800e516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d101      	bne.n	800e526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e522:	2302      	movs	r3, #2
 800e524:	e0ff      	b.n	800e726 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b14      	cmp	r3, #20
 800e532:	f200 80f0 	bhi.w	800e716 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e536:	a201      	add	r2, pc, #4	@ (adr r2, 800e53c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53c:	0800e591 	.word	0x0800e591
 800e540:	0800e717 	.word	0x0800e717
 800e544:	0800e717 	.word	0x0800e717
 800e548:	0800e717 	.word	0x0800e717
 800e54c:	0800e5d1 	.word	0x0800e5d1
 800e550:	0800e717 	.word	0x0800e717
 800e554:	0800e717 	.word	0x0800e717
 800e558:	0800e717 	.word	0x0800e717
 800e55c:	0800e613 	.word	0x0800e613
 800e560:	0800e717 	.word	0x0800e717
 800e564:	0800e717 	.word	0x0800e717
 800e568:	0800e717 	.word	0x0800e717
 800e56c:	0800e653 	.word	0x0800e653
 800e570:	0800e717 	.word	0x0800e717
 800e574:	0800e717 	.word	0x0800e717
 800e578:	0800e717 	.word	0x0800e717
 800e57c:	0800e695 	.word	0x0800e695
 800e580:	0800e717 	.word	0x0800e717
 800e584:	0800e717 	.word	0x0800e717
 800e588:	0800e717 	.word	0x0800e717
 800e58c:	0800e6d5 	.word	0x0800e6d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68b9      	ldr	r1, [r7, #8]
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fa62 	bl	800ea60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	699a      	ldr	r2, [r3, #24]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f042 0208 	orr.w	r2, r2, #8
 800e5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	699a      	ldr	r2, [r3, #24]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f022 0204 	bic.w	r2, r2, #4
 800e5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6999      	ldr	r1, [r3, #24]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	691a      	ldr	r2, [r3, #16]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	619a      	str	r2, [r3, #24]
      break;
 800e5ce:	e0a5      	b.n	800e71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68b9      	ldr	r1, [r7, #8]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f000 fab4 	bl	800eb44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	699a      	ldr	r2, [r3, #24]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	699a      	ldr	r2, [r3, #24]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6999      	ldr	r1, [r3, #24]
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	691b      	ldr	r3, [r3, #16]
 800e606:	021a      	lsls	r2, r3, #8
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	430a      	orrs	r2, r1
 800e60e:	619a      	str	r2, [r3, #24]
      break;
 800e610:	e084      	b.n	800e71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	4618      	mov	r0, r3
 800e61a:	f000 fb0b 	bl	800ec34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	69da      	ldr	r2, [r3, #28]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f042 0208 	orr.w	r2, r2, #8
 800e62c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	69da      	ldr	r2, [r3, #28]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f022 0204 	bic.w	r2, r2, #4
 800e63c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69d9      	ldr	r1, [r3, #28]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	691a      	ldr	r2, [r3, #16]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	430a      	orrs	r2, r1
 800e64e:	61da      	str	r2, [r3, #28]
      break;
 800e650:	e064      	b.n	800e71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68b9      	ldr	r1, [r7, #8]
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 fb61 	bl	800ed20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	69da      	ldr	r2, [r3, #28]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e66c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69da      	ldr	r2, [r3, #28]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e67c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	69d9      	ldr	r1, [r3, #28]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	021a      	lsls	r2, r3, #8
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	430a      	orrs	r2, r1
 800e690:	61da      	str	r2, [r3, #28]
      break;
 800e692:	e043      	b.n	800e71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	68b9      	ldr	r1, [r7, #8]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 fb98 	bl	800edd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f042 0208 	orr.w	r2, r2, #8
 800e6ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f022 0204 	bic.w	r2, r2, #4
 800e6be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	691a      	ldr	r2, [r3, #16]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	430a      	orrs	r2, r1
 800e6d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e6d2:	e023      	b.n	800e71c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68b9      	ldr	r1, [r7, #8]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f000 fbca 	bl	800ee74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	021a      	lsls	r2, r3, #8
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	430a      	orrs	r2, r1
 800e712:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e714:	e002      	b.n	800e71c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	75fb      	strb	r3, [r7, #23]
      break;
 800e71a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e724:	7dfb      	ldrb	r3, [r7, #23]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3718      	adds	r7, #24
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop

0800e730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e744:	2b01      	cmp	r3, #1
 800e746:	d101      	bne.n	800e74c <HAL_TIM_ConfigClockSource+0x1c>
 800e748:	2302      	movs	r3, #2
 800e74a:	e0b4      	b.n	800e8b6 <HAL_TIM_ConfigClockSource+0x186>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2202      	movs	r2, #2
 800e758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	4b56      	ldr	r3, [pc, #344]	@ (800e8c0 <HAL_TIM_ConfigClockSource+0x190>)
 800e768:	4013      	ands	r3, r2
 800e76a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e784:	d03e      	beq.n	800e804 <HAL_TIM_ConfigClockSource+0xd4>
 800e786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e78a:	f200 8087 	bhi.w	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e792:	f000 8086 	beq.w	800e8a2 <HAL_TIM_ConfigClockSource+0x172>
 800e796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e79a:	d87f      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e79c:	2b70      	cmp	r3, #112	@ 0x70
 800e79e:	d01a      	beq.n	800e7d6 <HAL_TIM_ConfigClockSource+0xa6>
 800e7a0:	2b70      	cmp	r3, #112	@ 0x70
 800e7a2:	d87b      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e7a4:	2b60      	cmp	r3, #96	@ 0x60
 800e7a6:	d050      	beq.n	800e84a <HAL_TIM_ConfigClockSource+0x11a>
 800e7a8:	2b60      	cmp	r3, #96	@ 0x60
 800e7aa:	d877      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e7ac:	2b50      	cmp	r3, #80	@ 0x50
 800e7ae:	d03c      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0xfa>
 800e7b0:	2b50      	cmp	r3, #80	@ 0x50
 800e7b2:	d873      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e7b4:	2b40      	cmp	r3, #64	@ 0x40
 800e7b6:	d058      	beq.n	800e86a <HAL_TIM_ConfigClockSource+0x13a>
 800e7b8:	2b40      	cmp	r3, #64	@ 0x40
 800e7ba:	d86f      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e7bc:	2b30      	cmp	r3, #48	@ 0x30
 800e7be:	d064      	beq.n	800e88a <HAL_TIM_ConfigClockSource+0x15a>
 800e7c0:	2b30      	cmp	r3, #48	@ 0x30
 800e7c2:	d86b      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e7c4:	2b20      	cmp	r3, #32
 800e7c6:	d060      	beq.n	800e88a <HAL_TIM_ConfigClockSource+0x15a>
 800e7c8:	2b20      	cmp	r3, #32
 800e7ca:	d867      	bhi.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d05c      	beq.n	800e88a <HAL_TIM_ConfigClockSource+0x15a>
 800e7d0:	2b10      	cmp	r3, #16
 800e7d2:	d05a      	beq.n	800e88a <HAL_TIM_ConfigClockSource+0x15a>
 800e7d4:	e062      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7e6:	f000 fc13 	bl	800f010 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e7f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68ba      	ldr	r2, [r7, #8]
 800e800:	609a      	str	r2, [r3, #8]
      break;
 800e802:	e04f      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e814:	f000 fbfc 	bl	800f010 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	689a      	ldr	r2, [r3, #8]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e826:	609a      	str	r2, [r3, #8]
      break;
 800e828:	e03c      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e836:	461a      	mov	r2, r3
 800e838:	f000 fb70 	bl	800ef1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2150      	movs	r1, #80	@ 0x50
 800e842:	4618      	mov	r0, r3
 800e844:	f000 fbc9 	bl	800efda <TIM_ITRx_SetConfig>
      break;
 800e848:	e02c      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e856:	461a      	mov	r2, r3
 800e858:	f000 fb8f 	bl	800ef7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2160      	movs	r1, #96	@ 0x60
 800e862:	4618      	mov	r0, r3
 800e864:	f000 fbb9 	bl	800efda <TIM_ITRx_SetConfig>
      break;
 800e868:	e01c      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e876:	461a      	mov	r2, r3
 800e878:	f000 fb50 	bl	800ef1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2140      	movs	r1, #64	@ 0x40
 800e882:	4618      	mov	r0, r3
 800e884:	f000 fba9 	bl	800efda <TIM_ITRx_SetConfig>
      break;
 800e888:	e00c      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4619      	mov	r1, r3
 800e894:	4610      	mov	r0, r2
 800e896:	f000 fba0 	bl	800efda <TIM_ITRx_SetConfig>
      break;
 800e89a:	e003      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a0:	e000      	b.n	800e8a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e8a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	fffeff88 	.word	0xfffeff88

0800e8c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a43      	ldr	r2, [pc, #268]	@ (800ea34 <TIM_Base_SetConfig+0x120>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d013      	beq.n	800e954 <TIM_Base_SetConfig+0x40>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e932:	d00f      	beq.n	800e954 <TIM_Base_SetConfig+0x40>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a40      	ldr	r2, [pc, #256]	@ (800ea38 <TIM_Base_SetConfig+0x124>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d00b      	beq.n	800e954 <TIM_Base_SetConfig+0x40>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4a3f      	ldr	r2, [pc, #252]	@ (800ea3c <TIM_Base_SetConfig+0x128>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d007      	beq.n	800e954 <TIM_Base_SetConfig+0x40>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a3e      	ldr	r2, [pc, #248]	@ (800ea40 <TIM_Base_SetConfig+0x12c>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d003      	beq.n	800e954 <TIM_Base_SetConfig+0x40>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a3d      	ldr	r2, [pc, #244]	@ (800ea44 <TIM_Base_SetConfig+0x130>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d108      	bne.n	800e966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e95a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a32      	ldr	r2, [pc, #200]	@ (800ea34 <TIM_Base_SetConfig+0x120>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d02b      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e974:	d027      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a2f      	ldr	r2, [pc, #188]	@ (800ea38 <TIM_Base_SetConfig+0x124>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d023      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a2e      	ldr	r2, [pc, #184]	@ (800ea3c <TIM_Base_SetConfig+0x128>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d01f      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a2d      	ldr	r2, [pc, #180]	@ (800ea40 <TIM_Base_SetConfig+0x12c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d01b      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a2c      	ldr	r2, [pc, #176]	@ (800ea44 <TIM_Base_SetConfig+0x130>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d017      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a2b      	ldr	r2, [pc, #172]	@ (800ea48 <TIM_Base_SetConfig+0x134>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d013      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a2a      	ldr	r2, [pc, #168]	@ (800ea4c <TIM_Base_SetConfig+0x138>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d00f      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a29      	ldr	r2, [pc, #164]	@ (800ea50 <TIM_Base_SetConfig+0x13c>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d00b      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4a28      	ldr	r2, [pc, #160]	@ (800ea54 <TIM_Base_SetConfig+0x140>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d007      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a27      	ldr	r2, [pc, #156]	@ (800ea58 <TIM_Base_SetConfig+0x144>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d003      	beq.n	800e9c6 <TIM_Base_SetConfig+0xb2>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4a26      	ldr	r2, [pc, #152]	@ (800ea5c <TIM_Base_SetConfig+0x148>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d108      	bne.n	800e9d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	695b      	ldr	r3, [r3, #20]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	689a      	ldr	r2, [r3, #8]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800ea34 <TIM_Base_SetConfig+0x120>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d003      	beq.n	800ea06 <TIM_Base_SetConfig+0xf2>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4a10      	ldr	r2, [pc, #64]	@ (800ea44 <TIM_Base_SetConfig+0x130>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d103      	bne.n	800ea0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	691a      	ldr	r2, [r3, #16]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f043 0204 	orr.w	r2, r3, #4
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	601a      	str	r2, [r3, #0]
}
 800ea26:	bf00      	nop
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	40010000 	.word	0x40010000
 800ea38:	40000400 	.word	0x40000400
 800ea3c:	40000800 	.word	0x40000800
 800ea40:	40000c00 	.word	0x40000c00
 800ea44:	40010400 	.word	0x40010400
 800ea48:	40014000 	.word	0x40014000
 800ea4c:	40014400 	.word	0x40014400
 800ea50:	40014800 	.word	0x40014800
 800ea54:	40001800 	.word	0x40001800
 800ea58:	40001c00 	.word	0x40001c00
 800ea5c:	40002000 	.word	0x40002000

0800ea60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b087      	sub	sp, #28
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a1b      	ldr	r3, [r3, #32]
 800ea6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a1b      	ldr	r3, [r3, #32]
 800ea74:	f023 0201 	bic.w	r2, r3, #1
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	699b      	ldr	r3, [r3, #24]
 800ea86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	4b2b      	ldr	r3, [pc, #172]	@ (800eb38 <TIM_OC1_SetConfig+0xd8>)
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f023 0303 	bic.w	r3, r3, #3
 800ea96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f023 0302 	bic.w	r3, r3, #2
 800eaa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a21      	ldr	r2, [pc, #132]	@ (800eb3c <TIM_OC1_SetConfig+0xdc>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d003      	beq.n	800eac4 <TIM_OC1_SetConfig+0x64>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a20      	ldr	r2, [pc, #128]	@ (800eb40 <TIM_OC1_SetConfig+0xe0>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d10c      	bne.n	800eade <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f023 0308 	bic.w	r3, r3, #8
 800eaca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	697a      	ldr	r2, [r7, #20]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	f023 0304 	bic.w	r3, r3, #4
 800eadc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a16      	ldr	r2, [pc, #88]	@ (800eb3c <TIM_OC1_SetConfig+0xdc>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d003      	beq.n	800eaee <TIM_OC1_SetConfig+0x8e>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4a15      	ldr	r2, [pc, #84]	@ (800eb40 <TIM_OC1_SetConfig+0xe0>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d111      	bne.n	800eb12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eaf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eafc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	693a      	ldr	r2, [r7, #16]
 800eb04:	4313      	orrs	r3, r2
 800eb06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	693a      	ldr	r2, [r7, #16]
 800eb16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	685a      	ldr	r2, [r3, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	697a      	ldr	r2, [r7, #20]
 800eb2a:	621a      	str	r2, [r3, #32]
}
 800eb2c:	bf00      	nop
 800eb2e:	371c      	adds	r7, #28
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	fffeff8f 	.word	0xfffeff8f
 800eb3c:	40010000 	.word	0x40010000
 800eb40:	40010400 	.word	0x40010400

0800eb44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6a1b      	ldr	r3, [r3, #32]
 800eb58:	f023 0210 	bic.w	r2, r3, #16
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	699b      	ldr	r3, [r3, #24]
 800eb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	4b2e      	ldr	r3, [pc, #184]	@ (800ec28 <TIM_OC2_SetConfig+0xe4>)
 800eb70:	4013      	ands	r3, r2
 800eb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	021b      	lsls	r3, r3, #8
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	4313      	orrs	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f023 0320 	bic.w	r3, r3, #32
 800eb8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a23      	ldr	r2, [pc, #140]	@ (800ec2c <TIM_OC2_SetConfig+0xe8>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d003      	beq.n	800ebac <TIM_OC2_SetConfig+0x68>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a22      	ldr	r2, [pc, #136]	@ (800ec30 <TIM_OC2_SetConfig+0xec>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d10d      	bne.n	800ebc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	011b      	lsls	r3, r3, #4
 800ebba:	697a      	ldr	r2, [r7, #20]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4a18      	ldr	r2, [pc, #96]	@ (800ec2c <TIM_OC2_SetConfig+0xe8>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d003      	beq.n	800ebd8 <TIM_OC2_SetConfig+0x94>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a17      	ldr	r2, [pc, #92]	@ (800ec30 <TIM_OC2_SetConfig+0xec>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d113      	bne.n	800ec00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ebde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	693a      	ldr	r2, [r7, #16]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	621a      	str	r2, [r3, #32]
}
 800ec1a:	bf00      	nop
 800ec1c:	371c      	adds	r7, #28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	feff8fff 	.word	0xfeff8fff
 800ec2c:	40010000 	.word	0x40010000
 800ec30:	40010400 	.word	0x40010400

0800ec34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b087      	sub	sp, #28
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a1b      	ldr	r3, [r3, #32]
 800ec48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ed14 <TIM_OC3_SetConfig+0xe0>)
 800ec60:	4013      	ands	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0303 	bic.w	r3, r3, #3
 800ec6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	021b      	lsls	r3, r3, #8
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a22      	ldr	r2, [pc, #136]	@ (800ed18 <TIM_OC3_SetConfig+0xe4>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d003      	beq.n	800ec9a <TIM_OC3_SetConfig+0x66>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a21      	ldr	r2, [pc, #132]	@ (800ed1c <TIM_OC3_SetConfig+0xe8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d10d      	bne.n	800ecb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	021b      	lsls	r3, r3, #8
 800eca8:	697a      	ldr	r2, [r7, #20]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ecb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a17      	ldr	r2, [pc, #92]	@ (800ed18 <TIM_OC3_SetConfig+0xe4>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d003      	beq.n	800ecc6 <TIM_OC3_SetConfig+0x92>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a16      	ldr	r2, [pc, #88]	@ (800ed1c <TIM_OC3_SetConfig+0xe8>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d113      	bne.n	800ecee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	011b      	lsls	r3, r3, #4
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	011b      	lsls	r3, r3, #4
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	697a      	ldr	r2, [r7, #20]
 800ed06:	621a      	str	r2, [r3, #32]
}
 800ed08:	bf00      	nop
 800ed0a:	371c      	adds	r7, #28
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr
 800ed14:	fffeff8f 	.word	0xfffeff8f
 800ed18:	40010000 	.word	0x40010000
 800ed1c:	40010400 	.word	0x40010400

0800ed20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b087      	sub	sp, #28
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a1b      	ldr	r3, [r3, #32]
 800ed2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6a1b      	ldr	r3, [r3, #32]
 800ed34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	69db      	ldr	r3, [r3, #28]
 800ed46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	4b1e      	ldr	r3, [pc, #120]	@ (800edc4 <TIM_OC4_SetConfig+0xa4>)
 800ed4c:	4013      	ands	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	021b      	lsls	r3, r3, #8
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	031b      	lsls	r3, r3, #12
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	4313      	orrs	r3, r2
 800ed76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a13      	ldr	r2, [pc, #76]	@ (800edc8 <TIM_OC4_SetConfig+0xa8>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d003      	beq.n	800ed88 <TIM_OC4_SetConfig+0x68>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a12      	ldr	r2, [pc, #72]	@ (800edcc <TIM_OC4_SetConfig+0xac>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d109      	bne.n	800ed9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	019b      	lsls	r3, r3, #6
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	693a      	ldr	r2, [r7, #16]
 800edb4:	621a      	str	r2, [r3, #32]
}
 800edb6:	bf00      	nop
 800edb8:	371c      	adds	r7, #28
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	feff8fff 	.word	0xfeff8fff
 800edc8:	40010000 	.word	0x40010000
 800edcc:	40010400 	.word	0x40010400

0800edd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b087      	sub	sp, #28
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a1b      	ldr	r3, [r3, #32]
 800ede4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ee68 <TIM_OC5_SetConfig+0x98>)
 800edfc:	4013      	ands	r3, r2
 800edfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ee10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	041b      	lsls	r3, r3, #16
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a12      	ldr	r2, [pc, #72]	@ (800ee6c <TIM_OC5_SetConfig+0x9c>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d003      	beq.n	800ee2e <TIM_OC5_SetConfig+0x5e>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a11      	ldr	r2, [pc, #68]	@ (800ee70 <TIM_OC5_SetConfig+0xa0>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d109      	bne.n	800ee42 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	695b      	ldr	r3, [r3, #20]
 800ee3a:	021b      	lsls	r3, r3, #8
 800ee3c:	697a      	ldr	r2, [r7, #20]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	685a      	ldr	r2, [r3, #4]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	621a      	str	r2, [r3, #32]
}
 800ee5c:	bf00      	nop
 800ee5e:	371c      	adds	r7, #28
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	fffeff8f 	.word	0xfffeff8f
 800ee6c:	40010000 	.word	0x40010000
 800ee70:	40010400 	.word	0x40010400

0800ee74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b087      	sub	sp, #28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6a1b      	ldr	r3, [r3, #32]
 800ee82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a1b      	ldr	r3, [r3, #32]
 800ee88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ef10 <TIM_OC6_SetConfig+0x9c>)
 800eea0:	4013      	ands	r3, r2
 800eea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	021b      	lsls	r3, r3, #8
 800eeaa:	68fa      	ldr	r2, [r7, #12]
 800eeac:	4313      	orrs	r3, r2
 800eeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eeb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	051b      	lsls	r3, r3, #20
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	4313      	orrs	r3, r2
 800eec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a13      	ldr	r2, [pc, #76]	@ (800ef14 <TIM_OC6_SetConfig+0xa0>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d003      	beq.n	800eed4 <TIM_OC6_SetConfig+0x60>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a12      	ldr	r2, [pc, #72]	@ (800ef18 <TIM_OC6_SetConfig+0xa4>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d109      	bne.n	800eee8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eeda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	695b      	ldr	r3, [r3, #20]
 800eee0:	029b      	lsls	r3, r3, #10
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	4313      	orrs	r3, r2
 800eee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	697a      	ldr	r2, [r7, #20]
 800eeec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	621a      	str	r2, [r3, #32]
}
 800ef02:	bf00      	nop
 800ef04:	371c      	adds	r7, #28
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	feff8fff 	.word	0xfeff8fff
 800ef14:	40010000 	.word	0x40010000
 800ef18:	40010400 	.word	0x40010400

0800ef1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b087      	sub	sp, #28
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6a1b      	ldr	r3, [r3, #32]
 800ef2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	f023 0201 	bic.w	r2, r3, #1
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	699b      	ldr	r3, [r3, #24]
 800ef3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	011b      	lsls	r3, r3, #4
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	f023 030a 	bic.w	r3, r3, #10
 800ef58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ef5a:	697a      	ldr	r2, [r7, #20]
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	621a      	str	r2, [r3, #32]
}
 800ef6e:	bf00      	nop
 800ef70:	371c      	adds	r7, #28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b087      	sub	sp, #28
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	60f8      	str	r0, [r7, #12]
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
 800ef8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	6a1b      	ldr	r3, [r3, #32]
 800ef90:	f023 0210 	bic.w	r2, r3, #16
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	699b      	ldr	r3, [r3, #24]
 800ef9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800efa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	031b      	lsls	r3, r3, #12
 800efaa:	693a      	ldr	r2, [r7, #16]
 800efac:	4313      	orrs	r3, r2
 800efae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800efb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	011b      	lsls	r3, r3, #4
 800efbc:	697a      	ldr	r2, [r7, #20]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	693a      	ldr	r2, [r7, #16]
 800efc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	697a      	ldr	r2, [r7, #20]
 800efcc:	621a      	str	r2, [r3, #32]
}
 800efce:	bf00      	nop
 800efd0:	371c      	adds	r7, #28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr

0800efda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800efda:	b480      	push	{r7}
 800efdc:	b085      	sub	sp, #20
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	f043 0307 	orr.w	r3, r3, #7
 800effc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	609a      	str	r2, [r3, #8]
}
 800f004:	bf00      	nop
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f010:	b480      	push	{r7}
 800f012:	b087      	sub	sp, #28
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
 800f01c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f02a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	021a      	lsls	r2, r3, #8
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	431a      	orrs	r2, r3
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	4313      	orrs	r3, r2
 800f038:	697a      	ldr	r2, [r7, #20]
 800f03a:	4313      	orrs	r3, r2
 800f03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	697a      	ldr	r2, [r7, #20]
 800f042:	609a      	str	r2, [r3, #8]
}
 800f044:	bf00      	nop
 800f046:	371c      	adds	r7, #28
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f060:	2b01      	cmp	r3, #1
 800f062:	d101      	bne.n	800f068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f064:	2302      	movs	r3, #2
 800f066:	e06d      	b.n	800f144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2202      	movs	r2, #2
 800f074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a30      	ldr	r2, [pc, #192]	@ (800f150 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d004      	beq.n	800f09c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a2f      	ldr	r2, [pc, #188]	@ (800f154 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d108      	bne.n	800f0ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f0a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a20      	ldr	r2, [pc, #128]	@ (800f150 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d022      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0da:	d01d      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f158 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d018      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a1c      	ldr	r2, [pc, #112]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d013      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a1a      	ldr	r2, [pc, #104]	@ (800f160 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d00e      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a15      	ldr	r2, [pc, #84]	@ (800f154 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d009      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a16      	ldr	r2, [pc, #88]	@ (800f164 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d004      	beq.n	800f118 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a15      	ldr	r2, [pc, #84]	@ (800f168 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d10c      	bne.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f11e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	4313      	orrs	r3, r2
 800f128:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	40010000 	.word	0x40010000
 800f154:	40010400 	.word	0x40010400
 800f158:	40000400 	.word	0x40000400
 800f15c:	40000800 	.word	0x40000800
 800f160:	40000c00 	.word	0x40000c00
 800f164:	40014000 	.word	0x40014000
 800f168:	40001800 	.word	0x40001800

0800f16c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f176:	2300      	movs	r3, #0
 800f178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f180:	2b01      	cmp	r3, #1
 800f182:	d101      	bne.n	800f188 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f184:	2302      	movs	r3, #2
 800f186:	e065      	b.n	800f254 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2201      	movs	r2, #1
 800f18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	695b      	ldr	r3, [r3, #20]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	041b      	lsls	r3, r3, #16
 800f1fe:	4313      	orrs	r3, r2
 800f200:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a16      	ldr	r2, [pc, #88]	@ (800f260 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d004      	beq.n	800f216 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a14      	ldr	r2, [pc, #80]	@ (800f264 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d115      	bne.n	800f242 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f220:	051b      	lsls	r3, r3, #20
 800f222:	4313      	orrs	r3, r2
 800f224:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	69db      	ldr	r3, [r3, #28]
 800f230:	4313      	orrs	r3, r2
 800f232:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	4313      	orrs	r3, r2
 800f240:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f252:	2300      	movs	r3, #0
}
 800f254:	4618      	mov	r0, r3
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	40010000 	.word	0x40010000
 800f264:	40010400 	.word	0x40010400

0800f268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f270:	bf00      	nop
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f284:	bf00      	nop
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f298:	bf00      	nop
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr

0800f2a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e040      	b.n	800f338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7f5 fe56 	bl	8004f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2224      	movs	r2, #36	@ 0x24
 800f2d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f022 0201 	bic.w	r2, r2, #1
 800f2e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d002      	beq.n	800f2f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 ffb6 	bl	801025c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fd4f 	bl	800fd94 <UART_SetConfig>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d101      	bne.n	800f300 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e01b      	b.n	800f338 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f30e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	689a      	ldr	r2, [r3, #8]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f31e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f042 0201 	orr.w	r2, r2, #1
 800f32e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f001 f835 	bl	80103a0 <UART_CheckIdleState>
 800f336:	4603      	mov	r3, r0
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b08a      	sub	sp, #40	@ 0x28
 800f344:	af02      	add	r7, sp, #8
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	603b      	str	r3, [r7, #0]
 800f34c:	4613      	mov	r3, r2
 800f34e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f354:	2b20      	cmp	r3, #32
 800f356:	d177      	bne.n	800f448 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <HAL_UART_Transmit+0x24>
 800f35e:	88fb      	ldrh	r3, [r7, #6]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d101      	bne.n	800f368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	e070      	b.n	800f44a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2200      	movs	r2, #0
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2221      	movs	r2, #33	@ 0x21
 800f374:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f376:	f7f7 f8af 	bl	80064d8 <HAL_GetTick>
 800f37a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	88fa      	ldrh	r2, [r7, #6]
 800f380:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	88fa      	ldrh	r2, [r7, #6]
 800f388:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f394:	d108      	bne.n	800f3a8 <HAL_UART_Transmit+0x68>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d104      	bne.n	800f3a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	61bb      	str	r3, [r7, #24]
 800f3a6:	e003      	b.n	800f3b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f3b0:	e02f      	b.n	800f412 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	2180      	movs	r1, #128	@ 0x80
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f001 f846 	bl	801044e <UART_WaitOnFlagUntilTimeout>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d004      	beq.n	800f3d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	e03b      	b.n	800f44a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10b      	bne.n	800f3f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	881b      	ldrh	r3, [r3, #0]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f3e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	3302      	adds	r3, #2
 800f3ec:	61bb      	str	r3, [r7, #24]
 800f3ee:	e007      	b.n	800f400 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	781a      	ldrb	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f406:	b29b      	uxth	r3, r3
 800f408:	3b01      	subs	r3, #1
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f418:	b29b      	uxth	r3, r3
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1c9      	bne.n	800f3b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2200      	movs	r2, #0
 800f426:	2140      	movs	r1, #64	@ 0x40
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f001 f810 	bl	801044e <UART_WaitOnFlagUntilTimeout>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2220      	movs	r2, #32
 800f438:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f43a:	2303      	movs	r3, #3
 800f43c:	e005      	b.n	800f44a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2220      	movs	r2, #32
 800f442:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	e000      	b.n	800f44a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f448:	2302      	movs	r3, #2
  }
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3720      	adds	r7, #32
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f452:	b580      	push	{r7, lr}
 800f454:	b08a      	sub	sp, #40	@ 0x28
 800f456:	af02      	add	r7, sp, #8
 800f458:	60f8      	str	r0, [r7, #12]
 800f45a:	60b9      	str	r1, [r7, #8]
 800f45c:	603b      	str	r3, [r7, #0]
 800f45e:	4613      	mov	r3, r2
 800f460:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f468:	2b20      	cmp	r3, #32
 800f46a:	f040 80b5 	bne.w	800f5d8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d002      	beq.n	800f47a <HAL_UART_Receive+0x28>
 800f474:	88fb      	ldrh	r3, [r7, #6]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	e0ad      	b.n	800f5da <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2200      	movs	r2, #0
 800f482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2222      	movs	r2, #34	@ 0x22
 800f48a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2200      	movs	r2, #0
 800f492:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f494:	f7f7 f820 	bl	80064d8 <HAL_GetTick>
 800f498:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	88fa      	ldrh	r2, [r7, #6]
 800f49e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	88fa      	ldrh	r2, [r7, #6]
 800f4a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4b2:	d10e      	bne.n	800f4d2 <HAL_UART_Receive+0x80>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d105      	bne.n	800f4c8 <HAL_UART_Receive+0x76>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f4c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4c6:	e02d      	b.n	800f524 <HAL_UART_Receive+0xd2>
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	22ff      	movs	r2, #255	@ 0xff
 800f4cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4d0:	e028      	b.n	800f524 <HAL_UART_Receive+0xd2>
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10d      	bne.n	800f4f6 <HAL_UART_Receive+0xa4>
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d104      	bne.n	800f4ec <HAL_UART_Receive+0x9a>
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	22ff      	movs	r2, #255	@ 0xff
 800f4e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4ea:	e01b      	b.n	800f524 <HAL_UART_Receive+0xd2>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	227f      	movs	r2, #127	@ 0x7f
 800f4f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4f4:	e016      	b.n	800f524 <HAL_UART_Receive+0xd2>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4fe:	d10d      	bne.n	800f51c <HAL_UART_Receive+0xca>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d104      	bne.n	800f512 <HAL_UART_Receive+0xc0>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	227f      	movs	r2, #127	@ 0x7f
 800f50c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f510:	e008      	b.n	800f524 <HAL_UART_Receive+0xd2>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	223f      	movs	r2, #63	@ 0x3f
 800f516:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f51a:	e003      	b.n	800f524 <HAL_UART_Receive+0xd2>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2200      	movs	r2, #0
 800f520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f52a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f534:	d108      	bne.n	800f548 <HAL_UART_Receive+0xf6>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d104      	bne.n	800f548 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f53e:	2300      	movs	r3, #0
 800f540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	61bb      	str	r3, [r7, #24]
 800f546:	e003      	b.n	800f550 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f54c:	2300      	movs	r3, #0
 800f54e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f550:	e036      	b.n	800f5c0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	2200      	movs	r2, #0
 800f55a:	2120      	movs	r1, #32
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 ff76 	bl	801044e <UART_WaitOnFlagUntilTimeout>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d005      	beq.n	800f574 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2220      	movs	r2, #32
 800f56c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f570:	2303      	movs	r3, #3
 800f572:	e032      	b.n	800f5da <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10c      	bne.n	800f594 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f580:	b29a      	uxth	r2, r3
 800f582:	8a7b      	ldrh	r3, [r7, #18]
 800f584:	4013      	ands	r3, r2
 800f586:	b29a      	uxth	r2, r3
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	3302      	adds	r3, #2
 800f590:	61bb      	str	r3, [r7, #24]
 800f592:	e00c      	b.n	800f5ae <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	8a7b      	ldrh	r3, [r7, #18]
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	4013      	ands	r3, r2
 800f5a2:	b2da      	uxtb	r2, r3
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1c2      	bne.n	800f552 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2220      	movs	r2, #32
 800f5d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	e000      	b.n	800f5da <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f5d8:	2302      	movs	r3, #2
  }
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3720      	adds	r7, #32
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b08a      	sub	sp, #40	@ 0x28
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	60f8      	str	r0, [r7, #12]
 800f5ea:	60b9      	str	r1, [r7, #8]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5f6:	2b20      	cmp	r3, #32
 800f5f8:	d132      	bne.n	800f660 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <HAL_UART_Receive_DMA+0x24>
 800f600:	88fb      	ldrh	r3, [r7, #6]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	e02b      	b.n	800f662 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d018      	beq.n	800f650 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	e853 3f00 	ldrex	r3, [r3]
 800f62a:	613b      	str	r3, [r7, #16]
   return(result);
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f632:	627b      	str	r3, [r7, #36]	@ 0x24
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	461a      	mov	r2, r3
 800f63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63c:	623b      	str	r3, [r7, #32]
 800f63e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f640:	69f9      	ldr	r1, [r7, #28]
 800f642:	6a3a      	ldr	r2, [r7, #32]
 800f644:	e841 2300 	strex	r3, r2, [r1]
 800f648:	61bb      	str	r3, [r7, #24]
   return(result);
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1e6      	bne.n	800f61e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f650:	88fb      	ldrh	r3, [r7, #6]
 800f652:	461a      	mov	r2, r3
 800f654:	68b9      	ldr	r1, [r7, #8]
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	f000 ff66 	bl	8010528 <UART_Start_Receive_DMA>
 800f65c:	4603      	mov	r3, r0
 800f65e:	e000      	b.n	800f662 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f660:	2302      	movs	r3, #2
  }
}
 800f662:	4618      	mov	r0, r3
 800f664:	3728      	adds	r7, #40	@ 0x28
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b090      	sub	sp, #64	@ 0x40
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f67e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f68a:	2b80      	cmp	r3, #128	@ 0x80
 800f68c:	d139      	bne.n	800f702 <HAL_UART_DMAStop+0x98>
 800f68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f690:	2b21      	cmp	r3, #33	@ 0x21
 800f692:	d136      	bne.n	800f702 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3308      	adds	r3, #8
 800f69a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69c:	6a3b      	ldr	r3, [r7, #32]
 800f69e:	e853 3f00 	ldrex	r3, [r3]
 800f6a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f6b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6bc:	e841 2300 	strex	r3, r2, [r1]
 800f6c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1e5      	bne.n	800f694 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d015      	beq.n	800f6fc <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7f7 fd81 	bl	80071dc <HAL_DMA_Abort>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00d      	beq.n	800f6fc <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7f7 ff95 	bl	8007614 <HAL_DMA_GetError>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b20      	cmp	r3, #32
 800f6ee:	d105      	bne.n	800f6fc <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2210      	movs	r2, #16
 800f6f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	e044      	b.n	800f786 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f000 ffb3 	bl	8010668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f70c:	2b40      	cmp	r3, #64	@ 0x40
 800f70e:	d139      	bne.n	800f784 <HAL_UART_DMAStop+0x11a>
 800f710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f712:	2b22      	cmp	r3, #34	@ 0x22
 800f714:	d136      	bne.n	800f784 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	3308      	adds	r3, #8
 800f71c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	e853 3f00 	ldrex	r3, [r3]
 800f724:	60bb      	str	r3, [r7, #8]
   return(result);
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f72c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3308      	adds	r3, #8
 800f734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f736:	61ba      	str	r2, [r7, #24]
 800f738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73a:	6979      	ldr	r1, [r7, #20]
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	e841 2300 	strex	r3, r2, [r1]
 800f742:	613b      	str	r3, [r7, #16]
   return(result);
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1e5      	bne.n	800f716 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d015      	beq.n	800f77e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f756:	4618      	mov	r0, r3
 800f758:	f7f7 fd40 	bl	80071dc <HAL_DMA_Abort>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00d      	beq.n	800f77e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f766:	4618      	mov	r0, r3
 800f768:	f7f7 ff54 	bl	8007614 <HAL_DMA_GetError>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b20      	cmp	r3, #32
 800f770:	d105      	bne.n	800f77e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2210      	movs	r2, #16
 800f776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f77a:	2303      	movs	r3, #3
 800f77c:	e003      	b.n	800f786 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 ff98 	bl	80106b4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3740      	adds	r7, #64	@ 0x40
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
	...

0800f790 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b0ba      	sub	sp, #232	@ 0xe8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	69db      	ldr	r3, [r3, #28]
 800f79e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f7b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f7ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f7be:	4013      	ands	r3, r2
 800f7c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f7c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d115      	bne.n	800f7f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7d0:	f003 0320 	and.w	r3, r3, #32
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00f      	beq.n	800f7f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7dc:	f003 0320 	and.w	r3, r3, #32
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d009      	beq.n	800f7f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 82b1 	beq.w	800fd50 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	4798      	blx	r3
      }
      return;
 800f7f6:	e2ab      	b.n	800fd50 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 8117 	beq.w	800fa30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f806:	f003 0301 	and.w	r3, r3, #1
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d106      	bne.n	800f81c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f80e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f812:	4b85      	ldr	r3, [pc, #532]	@ (800fa28 <HAL_UART_IRQHandler+0x298>)
 800f814:	4013      	ands	r3, r2
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 810a 	beq.w	800fa30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	2b00      	cmp	r3, #0
 800f826:	d011      	beq.n	800f84c <HAL_UART_IRQHandler+0xbc>
 800f828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f82c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00b      	beq.n	800f84c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2201      	movs	r2, #1
 800f83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f842:	f043 0201 	orr.w	r2, r3, #1
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f850:	f003 0302 	and.w	r3, r3, #2
 800f854:	2b00      	cmp	r3, #0
 800f856:	d011      	beq.n	800f87c <HAL_UART_IRQHandler+0xec>
 800f858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00b      	beq.n	800f87c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2202      	movs	r2, #2
 800f86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f872:	f043 0204 	orr.w	r2, r3, #4
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f880:	f003 0304 	and.w	r3, r3, #4
 800f884:	2b00      	cmp	r3, #0
 800f886:	d011      	beq.n	800f8ac <HAL_UART_IRQHandler+0x11c>
 800f888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f88c:	f003 0301 	and.w	r3, r3, #1
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00b      	beq.n	800f8ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2204      	movs	r2, #4
 800f89a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8a2:	f043 0202 	orr.w	r2, r3, #2
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8b0:	f003 0308 	and.w	r3, r3, #8
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d017      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8bc:	f003 0320 	and.w	r3, r3, #32
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d105      	bne.n	800f8d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00b      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2208      	movs	r2, #8
 800f8d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8de:	f043 0208 	orr.w	r2, r3, #8
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d012      	beq.n	800f91a <HAL_UART_IRQHandler+0x18a>
 800f8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00c      	beq.n	800f91a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f910:	f043 0220 	orr.w	r2, r3, #32
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 8217 	beq.w	800fd54 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f92a:	f003 0320 	and.w	r3, r3, #32
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00d      	beq.n	800f94e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f936:	f003 0320 	and.w	r3, r3, #32
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d007      	beq.n	800f94e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f954:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f962:	2b40      	cmp	r3, #64	@ 0x40
 800f964:	d005      	beq.n	800f972 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f96a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d04f      	beq.n	800fa12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 fe9e 	bl	80106b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f982:	2b40      	cmp	r3, #64	@ 0x40
 800f984:	d141      	bne.n	800fa0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	3308      	adds	r3, #8
 800f98c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f990:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f994:	e853 3f00 	ldrex	r3, [r3]
 800f998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f99c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f9be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f9c2:	e841 2300 	strex	r3, r2, [r1]
 800f9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f9ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1d9      	bne.n	800f986 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d013      	beq.n	800fa02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9de:	4a13      	ldr	r2, [pc, #76]	@ (800fa2c <HAL_UART_IRQHandler+0x29c>)
 800f9e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f7 fc68 	bl	80072bc <HAL_DMA_Abort_IT>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d017      	beq.n	800fa22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa00:	e00f      	b.n	800fa22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7f6 fbf6 	bl	80061f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa08:	e00b      	b.n	800fa22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7f6 fbf2 	bl	80061f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa10:	e007      	b.n	800fa22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7f6 fbee 	bl	80061f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800fa20:	e198      	b.n	800fd54 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa22:	bf00      	nop
    return;
 800fa24:	e196      	b.n	800fd54 <HAL_UART_IRQHandler+0x5c4>
 800fa26:	bf00      	nop
 800fa28:	04000120 	.word	0x04000120
 800fa2c:	080109cb 	.word	0x080109cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	f040 8166 	bne.w	800fd06 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa3e:	f003 0310 	and.w	r3, r3, #16
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 815f 	beq.w	800fd06 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa4c:	f003 0310 	and.w	r3, r3, #16
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f000 8158 	beq.w	800fd06 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2210      	movs	r2, #16
 800fa5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa68:	2b40      	cmp	r3, #64	@ 0x40
 800fa6a:	f040 80d0 	bne.w	800fc0e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 80ab 	beq.w	800fbda <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	f080 80a3 	bcs.w	800fbda <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faa8:	f000 8086 	beq.w	800fbb8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fab8:	e853 3f00 	ldrex	r3, [r3]
 800fabc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	461a      	mov	r2, r3
 800fad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fada:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fade:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fae6:	e841 2300 	strex	r3, r2, [r1]
 800faea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800faee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1da      	bne.n	800faac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3308      	adds	r3, #8
 800fafc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb08:	f023 0301 	bic.w	r3, r3, #1
 800fb0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3308      	adds	r3, #8
 800fb16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb26:	e841 2300 	strex	r3, r2, [r1]
 800fb2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1e1      	bne.n	800faf6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	3308      	adds	r3, #8
 800fb38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb3c:	e853 3f00 	ldrex	r3, [r3]
 800fb40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3308      	adds	r3, #8
 800fb52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fb58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fb5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb5e:	e841 2300 	strex	r3, r2, [r1]
 800fb62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1e3      	bne.n	800fb32 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2220      	movs	r2, #32
 800fb6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb80:	e853 3f00 	ldrex	r3, [r3]
 800fb84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb88:	f023 0310 	bic.w	r3, r3, #16
 800fb8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	461a      	mov	r2, r3
 800fb96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fba2:	e841 2300 	strex	r3, r2, [r1]
 800fba6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1e4      	bne.n	800fb78 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f7 fb12 	bl	80071dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2202      	movs	r2, #2
 800fbbc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 f8d2 	bl	800fd7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fbd8:	e0be      	b.n	800fd58 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fbe0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	f040 80b7 	bne.w	800fd58 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbee:	69db      	ldr	r3, [r3, #28]
 800fbf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbf4:	f040 80b0 	bne.w	800fd58 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2202      	movs	r2, #2
 800fbfc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fc04:	4619      	mov	r1, r3
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f8b8 	bl	800fd7c <HAL_UARTEx_RxEventCallback>
      return;
 800fc0c:	e0a4      	b.n	800fd58 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 8096 	beq.w	800fd5c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800fc30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f000 8091 	beq.w	800fd5c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc42:	e853 3f00 	ldrex	r3, [r3]
 800fc46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	461a      	mov	r2, r3
 800fc58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fc5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc64:	e841 2300 	strex	r3, r2, [r1]
 800fc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1e4      	bne.n	800fc3a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3308      	adds	r3, #8
 800fc76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7a:	e853 3f00 	ldrex	r3, [r3]
 800fc7e:	623b      	str	r3, [r7, #32]
   return(result);
 800fc80:	6a3b      	ldr	r3, [r7, #32]
 800fc82:	f023 0301 	bic.w	r3, r3, #1
 800fc86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3308      	adds	r3, #8
 800fc90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fc94:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc9c:	e841 2300 	strex	r3, r2, [r1]
 800fca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1e3      	bne.n	800fc70 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2220      	movs	r2, #32
 800fcac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	e853 3f00 	ldrex	r3, [r3]
 800fcc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f023 0310 	bic.w	r3, r3, #16
 800fcd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	69b9      	ldr	r1, [r7, #24]
 800fce4:	69fa      	ldr	r2, [r7, #28]
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	617b      	str	r3, [r7, #20]
   return(result);
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e4      	bne.n	800fcbc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fcf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f83c 	bl	800fd7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd04:	e02a      	b.n	800fd5c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fd06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00e      	beq.n	800fd30 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fd12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d008      	beq.n	800fd30 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d01c      	beq.n	800fd60 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	4798      	blx	r3
    }
    return;
 800fd2e:	e017      	b.n	800fd60 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d012      	beq.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
 800fd3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00c      	beq.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 fe50 	bl	80109ee <UART_EndTransmit_IT>
    return;
 800fd4e:	e008      	b.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fd50:	bf00      	nop
 800fd52:	e006      	b.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fd54:	bf00      	nop
 800fd56:	e004      	b.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fd58:	bf00      	nop
 800fd5a:	e002      	b.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
      return;
 800fd5c:	bf00      	nop
 800fd5e:	e000      	b.n	800fd62 <HAL_UART_IRQHandler+0x5d2>
    return;
 800fd60:	bf00      	nop
  }

}
 800fd62:	37e8      	adds	r7, #232	@ 0xe8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fd70:	bf00      	nop
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	460b      	mov	r3, r1
 800fd86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd88:	bf00      	nop
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	689a      	ldr	r2, [r3, #8]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	431a      	orrs	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	431a      	orrs	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	69db      	ldr	r3, [r3, #28]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	4ba6      	ldr	r3, [pc, #664]	@ (8010058 <UART_SetConfig+0x2c4>)
 800fdc0:	4013      	ands	r3, r2
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	6812      	ldr	r2, [r2, #0]
 800fdc6:	6979      	ldr	r1, [r7, #20]
 800fdc8:	430b      	orrs	r3, r1
 800fdca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	68da      	ldr	r2, [r3, #12]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	430a      	orrs	r2, r1
 800fde0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	697a      	ldr	r2, [r7, #20]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	430a      	orrs	r2, r1
 800fe04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a94      	ldr	r2, [pc, #592]	@ (801005c <UART_SetConfig+0x2c8>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d120      	bne.n	800fe52 <UART_SetConfig+0xbe>
 800fe10:	4b93      	ldr	r3, [pc, #588]	@ (8010060 <UART_SetConfig+0x2cc>)
 800fe12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe16:	f003 0303 	and.w	r3, r3, #3
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	d816      	bhi.n	800fe4c <UART_SetConfig+0xb8>
 800fe1e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe24 <UART_SetConfig+0x90>)
 800fe20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe24:	0800fe35 	.word	0x0800fe35
 800fe28:	0800fe41 	.word	0x0800fe41
 800fe2c:	0800fe3b 	.word	0x0800fe3b
 800fe30:	0800fe47 	.word	0x0800fe47
 800fe34:	2301      	movs	r3, #1
 800fe36:	77fb      	strb	r3, [r7, #31]
 800fe38:	e150      	b.n	80100dc <UART_SetConfig+0x348>
 800fe3a:	2302      	movs	r3, #2
 800fe3c:	77fb      	strb	r3, [r7, #31]
 800fe3e:	e14d      	b.n	80100dc <UART_SetConfig+0x348>
 800fe40:	2304      	movs	r3, #4
 800fe42:	77fb      	strb	r3, [r7, #31]
 800fe44:	e14a      	b.n	80100dc <UART_SetConfig+0x348>
 800fe46:	2308      	movs	r3, #8
 800fe48:	77fb      	strb	r3, [r7, #31]
 800fe4a:	e147      	b.n	80100dc <UART_SetConfig+0x348>
 800fe4c:	2310      	movs	r3, #16
 800fe4e:	77fb      	strb	r3, [r7, #31]
 800fe50:	e144      	b.n	80100dc <UART_SetConfig+0x348>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a83      	ldr	r2, [pc, #524]	@ (8010064 <UART_SetConfig+0x2d0>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d132      	bne.n	800fec2 <UART_SetConfig+0x12e>
 800fe5c:	4b80      	ldr	r3, [pc, #512]	@ (8010060 <UART_SetConfig+0x2cc>)
 800fe5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe62:	f003 030c 	and.w	r3, r3, #12
 800fe66:	2b0c      	cmp	r3, #12
 800fe68:	d828      	bhi.n	800febc <UART_SetConfig+0x128>
 800fe6a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe70 <UART_SetConfig+0xdc>)
 800fe6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe70:	0800fea5 	.word	0x0800fea5
 800fe74:	0800febd 	.word	0x0800febd
 800fe78:	0800febd 	.word	0x0800febd
 800fe7c:	0800febd 	.word	0x0800febd
 800fe80:	0800feb1 	.word	0x0800feb1
 800fe84:	0800febd 	.word	0x0800febd
 800fe88:	0800febd 	.word	0x0800febd
 800fe8c:	0800febd 	.word	0x0800febd
 800fe90:	0800feab 	.word	0x0800feab
 800fe94:	0800febd 	.word	0x0800febd
 800fe98:	0800febd 	.word	0x0800febd
 800fe9c:	0800febd 	.word	0x0800febd
 800fea0:	0800feb7 	.word	0x0800feb7
 800fea4:	2300      	movs	r3, #0
 800fea6:	77fb      	strb	r3, [r7, #31]
 800fea8:	e118      	b.n	80100dc <UART_SetConfig+0x348>
 800feaa:	2302      	movs	r3, #2
 800feac:	77fb      	strb	r3, [r7, #31]
 800feae:	e115      	b.n	80100dc <UART_SetConfig+0x348>
 800feb0:	2304      	movs	r3, #4
 800feb2:	77fb      	strb	r3, [r7, #31]
 800feb4:	e112      	b.n	80100dc <UART_SetConfig+0x348>
 800feb6:	2308      	movs	r3, #8
 800feb8:	77fb      	strb	r3, [r7, #31]
 800feba:	e10f      	b.n	80100dc <UART_SetConfig+0x348>
 800febc:	2310      	movs	r3, #16
 800febe:	77fb      	strb	r3, [r7, #31]
 800fec0:	e10c      	b.n	80100dc <UART_SetConfig+0x348>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a68      	ldr	r2, [pc, #416]	@ (8010068 <UART_SetConfig+0x2d4>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d120      	bne.n	800ff0e <UART_SetConfig+0x17a>
 800fecc:	4b64      	ldr	r3, [pc, #400]	@ (8010060 <UART_SetConfig+0x2cc>)
 800fece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fed2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fed6:	2b30      	cmp	r3, #48	@ 0x30
 800fed8:	d013      	beq.n	800ff02 <UART_SetConfig+0x16e>
 800feda:	2b30      	cmp	r3, #48	@ 0x30
 800fedc:	d814      	bhi.n	800ff08 <UART_SetConfig+0x174>
 800fede:	2b20      	cmp	r3, #32
 800fee0:	d009      	beq.n	800fef6 <UART_SetConfig+0x162>
 800fee2:	2b20      	cmp	r3, #32
 800fee4:	d810      	bhi.n	800ff08 <UART_SetConfig+0x174>
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d002      	beq.n	800fef0 <UART_SetConfig+0x15c>
 800feea:	2b10      	cmp	r3, #16
 800feec:	d006      	beq.n	800fefc <UART_SetConfig+0x168>
 800feee:	e00b      	b.n	800ff08 <UART_SetConfig+0x174>
 800fef0:	2300      	movs	r3, #0
 800fef2:	77fb      	strb	r3, [r7, #31]
 800fef4:	e0f2      	b.n	80100dc <UART_SetConfig+0x348>
 800fef6:	2302      	movs	r3, #2
 800fef8:	77fb      	strb	r3, [r7, #31]
 800fefa:	e0ef      	b.n	80100dc <UART_SetConfig+0x348>
 800fefc:	2304      	movs	r3, #4
 800fefe:	77fb      	strb	r3, [r7, #31]
 800ff00:	e0ec      	b.n	80100dc <UART_SetConfig+0x348>
 800ff02:	2308      	movs	r3, #8
 800ff04:	77fb      	strb	r3, [r7, #31]
 800ff06:	e0e9      	b.n	80100dc <UART_SetConfig+0x348>
 800ff08:	2310      	movs	r3, #16
 800ff0a:	77fb      	strb	r3, [r7, #31]
 800ff0c:	e0e6      	b.n	80100dc <UART_SetConfig+0x348>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4a56      	ldr	r2, [pc, #344]	@ (801006c <UART_SetConfig+0x2d8>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d120      	bne.n	800ff5a <UART_SetConfig+0x1c6>
 800ff18:	4b51      	ldr	r3, [pc, #324]	@ (8010060 <UART_SetConfig+0x2cc>)
 800ff1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ff22:	2bc0      	cmp	r3, #192	@ 0xc0
 800ff24:	d013      	beq.n	800ff4e <UART_SetConfig+0x1ba>
 800ff26:	2bc0      	cmp	r3, #192	@ 0xc0
 800ff28:	d814      	bhi.n	800ff54 <UART_SetConfig+0x1c0>
 800ff2a:	2b80      	cmp	r3, #128	@ 0x80
 800ff2c:	d009      	beq.n	800ff42 <UART_SetConfig+0x1ae>
 800ff2e:	2b80      	cmp	r3, #128	@ 0x80
 800ff30:	d810      	bhi.n	800ff54 <UART_SetConfig+0x1c0>
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <UART_SetConfig+0x1a8>
 800ff36:	2b40      	cmp	r3, #64	@ 0x40
 800ff38:	d006      	beq.n	800ff48 <UART_SetConfig+0x1b4>
 800ff3a:	e00b      	b.n	800ff54 <UART_SetConfig+0x1c0>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	77fb      	strb	r3, [r7, #31]
 800ff40:	e0cc      	b.n	80100dc <UART_SetConfig+0x348>
 800ff42:	2302      	movs	r3, #2
 800ff44:	77fb      	strb	r3, [r7, #31]
 800ff46:	e0c9      	b.n	80100dc <UART_SetConfig+0x348>
 800ff48:	2304      	movs	r3, #4
 800ff4a:	77fb      	strb	r3, [r7, #31]
 800ff4c:	e0c6      	b.n	80100dc <UART_SetConfig+0x348>
 800ff4e:	2308      	movs	r3, #8
 800ff50:	77fb      	strb	r3, [r7, #31]
 800ff52:	e0c3      	b.n	80100dc <UART_SetConfig+0x348>
 800ff54:	2310      	movs	r3, #16
 800ff56:	77fb      	strb	r3, [r7, #31]
 800ff58:	e0c0      	b.n	80100dc <UART_SetConfig+0x348>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a44      	ldr	r2, [pc, #272]	@ (8010070 <UART_SetConfig+0x2dc>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d125      	bne.n	800ffb0 <UART_SetConfig+0x21c>
 800ff64:	4b3e      	ldr	r3, [pc, #248]	@ (8010060 <UART_SetConfig+0x2cc>)
 800ff66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ff6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff72:	d017      	beq.n	800ffa4 <UART_SetConfig+0x210>
 800ff74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff78:	d817      	bhi.n	800ffaa <UART_SetConfig+0x216>
 800ff7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff7e:	d00b      	beq.n	800ff98 <UART_SetConfig+0x204>
 800ff80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff84:	d811      	bhi.n	800ffaa <UART_SetConfig+0x216>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d003      	beq.n	800ff92 <UART_SetConfig+0x1fe>
 800ff8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff8e:	d006      	beq.n	800ff9e <UART_SetConfig+0x20a>
 800ff90:	e00b      	b.n	800ffaa <UART_SetConfig+0x216>
 800ff92:	2300      	movs	r3, #0
 800ff94:	77fb      	strb	r3, [r7, #31]
 800ff96:	e0a1      	b.n	80100dc <UART_SetConfig+0x348>
 800ff98:	2302      	movs	r3, #2
 800ff9a:	77fb      	strb	r3, [r7, #31]
 800ff9c:	e09e      	b.n	80100dc <UART_SetConfig+0x348>
 800ff9e:	2304      	movs	r3, #4
 800ffa0:	77fb      	strb	r3, [r7, #31]
 800ffa2:	e09b      	b.n	80100dc <UART_SetConfig+0x348>
 800ffa4:	2308      	movs	r3, #8
 800ffa6:	77fb      	strb	r3, [r7, #31]
 800ffa8:	e098      	b.n	80100dc <UART_SetConfig+0x348>
 800ffaa:	2310      	movs	r3, #16
 800ffac:	77fb      	strb	r3, [r7, #31]
 800ffae:	e095      	b.n	80100dc <UART_SetConfig+0x348>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4a2f      	ldr	r2, [pc, #188]	@ (8010074 <UART_SetConfig+0x2e0>)
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d125      	bne.n	8010006 <UART_SetConfig+0x272>
 800ffba:	4b29      	ldr	r3, [pc, #164]	@ (8010060 <UART_SetConfig+0x2cc>)
 800ffbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ffc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ffc8:	d017      	beq.n	800fffa <UART_SetConfig+0x266>
 800ffca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ffce:	d817      	bhi.n	8010000 <UART_SetConfig+0x26c>
 800ffd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffd4:	d00b      	beq.n	800ffee <UART_SetConfig+0x25a>
 800ffd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffda:	d811      	bhi.n	8010000 <UART_SetConfig+0x26c>
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d003      	beq.n	800ffe8 <UART_SetConfig+0x254>
 800ffe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ffe4:	d006      	beq.n	800fff4 <UART_SetConfig+0x260>
 800ffe6:	e00b      	b.n	8010000 <UART_SetConfig+0x26c>
 800ffe8:	2301      	movs	r3, #1
 800ffea:	77fb      	strb	r3, [r7, #31]
 800ffec:	e076      	b.n	80100dc <UART_SetConfig+0x348>
 800ffee:	2302      	movs	r3, #2
 800fff0:	77fb      	strb	r3, [r7, #31]
 800fff2:	e073      	b.n	80100dc <UART_SetConfig+0x348>
 800fff4:	2304      	movs	r3, #4
 800fff6:	77fb      	strb	r3, [r7, #31]
 800fff8:	e070      	b.n	80100dc <UART_SetConfig+0x348>
 800fffa:	2308      	movs	r3, #8
 800fffc:	77fb      	strb	r3, [r7, #31]
 800fffe:	e06d      	b.n	80100dc <UART_SetConfig+0x348>
 8010000:	2310      	movs	r3, #16
 8010002:	77fb      	strb	r3, [r7, #31]
 8010004:	e06a      	b.n	80100dc <UART_SetConfig+0x348>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a1b      	ldr	r2, [pc, #108]	@ (8010078 <UART_SetConfig+0x2e4>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d138      	bne.n	8010082 <UART_SetConfig+0x2ee>
 8010010:	4b13      	ldr	r3, [pc, #76]	@ (8010060 <UART_SetConfig+0x2cc>)
 8010012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010016:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 801001a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801001e:	d017      	beq.n	8010050 <UART_SetConfig+0x2bc>
 8010020:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010024:	d82a      	bhi.n	801007c <UART_SetConfig+0x2e8>
 8010026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801002a:	d00b      	beq.n	8010044 <UART_SetConfig+0x2b0>
 801002c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010030:	d824      	bhi.n	801007c <UART_SetConfig+0x2e8>
 8010032:	2b00      	cmp	r3, #0
 8010034:	d003      	beq.n	801003e <UART_SetConfig+0x2aa>
 8010036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801003a:	d006      	beq.n	801004a <UART_SetConfig+0x2b6>
 801003c:	e01e      	b.n	801007c <UART_SetConfig+0x2e8>
 801003e:	2300      	movs	r3, #0
 8010040:	77fb      	strb	r3, [r7, #31]
 8010042:	e04b      	b.n	80100dc <UART_SetConfig+0x348>
 8010044:	2302      	movs	r3, #2
 8010046:	77fb      	strb	r3, [r7, #31]
 8010048:	e048      	b.n	80100dc <UART_SetConfig+0x348>
 801004a:	2304      	movs	r3, #4
 801004c:	77fb      	strb	r3, [r7, #31]
 801004e:	e045      	b.n	80100dc <UART_SetConfig+0x348>
 8010050:	2308      	movs	r3, #8
 8010052:	77fb      	strb	r3, [r7, #31]
 8010054:	e042      	b.n	80100dc <UART_SetConfig+0x348>
 8010056:	bf00      	nop
 8010058:	efff69f3 	.word	0xefff69f3
 801005c:	40011000 	.word	0x40011000
 8010060:	40023800 	.word	0x40023800
 8010064:	40004400 	.word	0x40004400
 8010068:	40004800 	.word	0x40004800
 801006c:	40004c00 	.word	0x40004c00
 8010070:	40005000 	.word	0x40005000
 8010074:	40011400 	.word	0x40011400
 8010078:	40007800 	.word	0x40007800
 801007c:	2310      	movs	r3, #16
 801007e:	77fb      	strb	r3, [r7, #31]
 8010080:	e02c      	b.n	80100dc <UART_SetConfig+0x348>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a72      	ldr	r2, [pc, #456]	@ (8010250 <UART_SetConfig+0x4bc>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d125      	bne.n	80100d8 <UART_SetConfig+0x344>
 801008c:	4b71      	ldr	r3, [pc, #452]	@ (8010254 <UART_SetConfig+0x4c0>)
 801008e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010092:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010096:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801009a:	d017      	beq.n	80100cc <UART_SetConfig+0x338>
 801009c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80100a0:	d817      	bhi.n	80100d2 <UART_SetConfig+0x33e>
 80100a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100a6:	d00b      	beq.n	80100c0 <UART_SetConfig+0x32c>
 80100a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100ac:	d811      	bhi.n	80100d2 <UART_SetConfig+0x33e>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <UART_SetConfig+0x326>
 80100b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80100b6:	d006      	beq.n	80100c6 <UART_SetConfig+0x332>
 80100b8:	e00b      	b.n	80100d2 <UART_SetConfig+0x33e>
 80100ba:	2300      	movs	r3, #0
 80100bc:	77fb      	strb	r3, [r7, #31]
 80100be:	e00d      	b.n	80100dc <UART_SetConfig+0x348>
 80100c0:	2302      	movs	r3, #2
 80100c2:	77fb      	strb	r3, [r7, #31]
 80100c4:	e00a      	b.n	80100dc <UART_SetConfig+0x348>
 80100c6:	2304      	movs	r3, #4
 80100c8:	77fb      	strb	r3, [r7, #31]
 80100ca:	e007      	b.n	80100dc <UART_SetConfig+0x348>
 80100cc:	2308      	movs	r3, #8
 80100ce:	77fb      	strb	r3, [r7, #31]
 80100d0:	e004      	b.n	80100dc <UART_SetConfig+0x348>
 80100d2:	2310      	movs	r3, #16
 80100d4:	77fb      	strb	r3, [r7, #31]
 80100d6:	e001      	b.n	80100dc <UART_SetConfig+0x348>
 80100d8:	2310      	movs	r3, #16
 80100da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	69db      	ldr	r3, [r3, #28]
 80100e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100e4:	d15b      	bne.n	801019e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80100e6:	7ffb      	ldrb	r3, [r7, #31]
 80100e8:	2b08      	cmp	r3, #8
 80100ea:	d828      	bhi.n	801013e <UART_SetConfig+0x3aa>
 80100ec:	a201      	add	r2, pc, #4	@ (adr r2, 80100f4 <UART_SetConfig+0x360>)
 80100ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f2:	bf00      	nop
 80100f4:	08010119 	.word	0x08010119
 80100f8:	08010121 	.word	0x08010121
 80100fc:	08010129 	.word	0x08010129
 8010100:	0801013f 	.word	0x0801013f
 8010104:	0801012f 	.word	0x0801012f
 8010108:	0801013f 	.word	0x0801013f
 801010c:	0801013f 	.word	0x0801013f
 8010110:	0801013f 	.word	0x0801013f
 8010114:	08010137 	.word	0x08010137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010118:	f7fb f9f0 	bl	800b4fc <HAL_RCC_GetPCLK1Freq>
 801011c:	61b8      	str	r0, [r7, #24]
        break;
 801011e:	e013      	b.n	8010148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010120:	f7fb fa00 	bl	800b524 <HAL_RCC_GetPCLK2Freq>
 8010124:	61b8      	str	r0, [r7, #24]
        break;
 8010126:	e00f      	b.n	8010148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010128:	4b4b      	ldr	r3, [pc, #300]	@ (8010258 <UART_SetConfig+0x4c4>)
 801012a:	61bb      	str	r3, [r7, #24]
        break;
 801012c:	e00c      	b.n	8010148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801012e:	f7fb f913 	bl	800b358 <HAL_RCC_GetSysClockFreq>
 8010132:	61b8      	str	r0, [r7, #24]
        break;
 8010134:	e008      	b.n	8010148 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801013a:	61bb      	str	r3, [r7, #24]
        break;
 801013c:	e004      	b.n	8010148 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801013e:	2300      	movs	r3, #0
 8010140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010142:	2301      	movs	r3, #1
 8010144:	77bb      	strb	r3, [r7, #30]
        break;
 8010146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d074      	beq.n	8010238 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	005a      	lsls	r2, r3, #1
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	085b      	lsrs	r3, r3, #1
 8010158:	441a      	add	r2, r3
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010162:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	2b0f      	cmp	r3, #15
 8010168:	d916      	bls.n	8010198 <UART_SetConfig+0x404>
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010170:	d212      	bcs.n	8010198 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	b29b      	uxth	r3, r3
 8010176:	f023 030f 	bic.w	r3, r3, #15
 801017a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	085b      	lsrs	r3, r3, #1
 8010180:	b29b      	uxth	r3, r3
 8010182:	f003 0307 	and.w	r3, r3, #7
 8010186:	b29a      	uxth	r2, r3
 8010188:	89fb      	ldrh	r3, [r7, #14]
 801018a:	4313      	orrs	r3, r2
 801018c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	89fa      	ldrh	r2, [r7, #14]
 8010194:	60da      	str	r2, [r3, #12]
 8010196:	e04f      	b.n	8010238 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	77bb      	strb	r3, [r7, #30]
 801019c:	e04c      	b.n	8010238 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801019e:	7ffb      	ldrb	r3, [r7, #31]
 80101a0:	2b08      	cmp	r3, #8
 80101a2:	d828      	bhi.n	80101f6 <UART_SetConfig+0x462>
 80101a4:	a201      	add	r2, pc, #4	@ (adr r2, 80101ac <UART_SetConfig+0x418>)
 80101a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101aa:	bf00      	nop
 80101ac:	080101d1 	.word	0x080101d1
 80101b0:	080101d9 	.word	0x080101d9
 80101b4:	080101e1 	.word	0x080101e1
 80101b8:	080101f7 	.word	0x080101f7
 80101bc:	080101e7 	.word	0x080101e7
 80101c0:	080101f7 	.word	0x080101f7
 80101c4:	080101f7 	.word	0x080101f7
 80101c8:	080101f7 	.word	0x080101f7
 80101cc:	080101ef 	.word	0x080101ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101d0:	f7fb f994 	bl	800b4fc <HAL_RCC_GetPCLK1Freq>
 80101d4:	61b8      	str	r0, [r7, #24]
        break;
 80101d6:	e013      	b.n	8010200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101d8:	f7fb f9a4 	bl	800b524 <HAL_RCC_GetPCLK2Freq>
 80101dc:	61b8      	str	r0, [r7, #24]
        break;
 80101de:	e00f      	b.n	8010200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80101e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010258 <UART_SetConfig+0x4c4>)
 80101e2:	61bb      	str	r3, [r7, #24]
        break;
 80101e4:	e00c      	b.n	8010200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80101e6:	f7fb f8b7 	bl	800b358 <HAL_RCC_GetSysClockFreq>
 80101ea:	61b8      	str	r0, [r7, #24]
        break;
 80101ec:	e008      	b.n	8010200 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80101f2:	61bb      	str	r3, [r7, #24]
        break;
 80101f4:	e004      	b.n	8010200 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80101f6:	2300      	movs	r3, #0
 80101f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80101fa:	2301      	movs	r3, #1
 80101fc:	77bb      	strb	r3, [r7, #30]
        break;
 80101fe:	bf00      	nop
    }

    if (pclk != 0U)
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d018      	beq.n	8010238 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	085a      	lsrs	r2, r3, #1
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	441a      	add	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	fbb2 f3f3 	udiv	r3, r2, r3
 8010218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	2b0f      	cmp	r3, #15
 801021e:	d909      	bls.n	8010234 <UART_SetConfig+0x4a0>
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010226:	d205      	bcs.n	8010234 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	b29a      	uxth	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	60da      	str	r2, [r3, #12]
 8010232:	e001      	b.n	8010238 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010234:	2301      	movs	r3, #1
 8010236:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2200      	movs	r2, #0
 8010242:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010244:	7fbb      	ldrb	r3, [r7, #30]
}
 8010246:	4618      	mov	r0, r3
 8010248:	3720      	adds	r7, #32
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	40007c00 	.word	0x40007c00
 8010254:	40023800 	.word	0x40023800
 8010258:	00f42400 	.word	0x00f42400

0801025c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010268:	f003 0308 	and.w	r3, r3, #8
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00a      	beq.n	8010286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	430a      	orrs	r2, r1
 8010284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801028a:	f003 0301 	and.w	r3, r3, #1
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00a      	beq.n	80102a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	430a      	orrs	r2, r1
 80102a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ac:	f003 0302 	and.w	r3, r3, #2
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d00a      	beq.n	80102ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	430a      	orrs	r2, r1
 80102c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ce:	f003 0304 	and.w	r3, r3, #4
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00a      	beq.n	80102ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	430a      	orrs	r2, r1
 80102ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102f0:	f003 0310 	and.w	r3, r3, #16
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00a      	beq.n	801030e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	430a      	orrs	r2, r1
 801030c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010312:	f003 0320 	and.w	r3, r3, #32
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00a      	beq.n	8010330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	430a      	orrs	r2, r1
 801032e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010338:	2b00      	cmp	r3, #0
 801033a:	d01a      	beq.n	8010372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	430a      	orrs	r2, r1
 8010350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801035a:	d10a      	bne.n	8010372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	430a      	orrs	r2, r1
 8010370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00a      	beq.n	8010394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	430a      	orrs	r2, r1
 8010392:	605a      	str	r2, [r3, #4]
  }
}
 8010394:	bf00      	nop
 8010396:	370c      	adds	r7, #12
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b08c      	sub	sp, #48	@ 0x30
 80103a4:	af02      	add	r7, sp, #8
 80103a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80103b0:	f7f6 f892 	bl	80064d8 <HAL_GetTick>
 80103b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f003 0308 	and.w	r3, r3, #8
 80103c0:	2b08      	cmp	r3, #8
 80103c2:	d12e      	bne.n	8010422 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80103c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103cc:	2200      	movs	r2, #0
 80103ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 f83b 	bl	801044e <UART_WaitOnFlagUntilTimeout>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d021      	beq.n	8010422 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	e853 3f00 	ldrex	r3, [r3]
 80103ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80103f2:	623b      	str	r3, [r7, #32]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	461a      	mov	r2, r3
 80103fa:	6a3b      	ldr	r3, [r7, #32]
 80103fc:	61fb      	str	r3, [r7, #28]
 80103fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010400:	69b9      	ldr	r1, [r7, #24]
 8010402:	69fa      	ldr	r2, [r7, #28]
 8010404:	e841 2300 	strex	r3, r2, [r1]
 8010408:	617b      	str	r3, [r7, #20]
   return(result);
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1e6      	bne.n	80103de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2220      	movs	r2, #32
 8010414:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801041e:	2303      	movs	r3, #3
 8010420:	e011      	b.n	8010446 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2220      	movs	r2, #32
 8010426:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2220      	movs	r2, #32
 801042c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8010444:	2300      	movs	r3, #0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3728      	adds	r7, #40	@ 0x28
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b084      	sub	sp, #16
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	603b      	str	r3, [r7, #0]
 801045a:	4613      	mov	r3, r2
 801045c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801045e:	e04f      	b.n	8010500 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010466:	d04b      	beq.n	8010500 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010468:	f7f6 f836 	bl	80064d8 <HAL_GetTick>
 801046c:	4602      	mov	r2, r0
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	69ba      	ldr	r2, [r7, #24]
 8010474:	429a      	cmp	r2, r3
 8010476:	d302      	bcc.n	801047e <UART_WaitOnFlagUntilTimeout+0x30>
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d101      	bne.n	8010482 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801047e:	2303      	movs	r3, #3
 8010480:	e04e      	b.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f003 0304 	and.w	r3, r3, #4
 801048c:	2b00      	cmp	r3, #0
 801048e:	d037      	beq.n	8010500 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	2b80      	cmp	r3, #128	@ 0x80
 8010494:	d034      	beq.n	8010500 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	2b40      	cmp	r3, #64	@ 0x40
 801049a:	d031      	beq.n	8010500 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	69db      	ldr	r3, [r3, #28]
 80104a2:	f003 0308 	and.w	r3, r3, #8
 80104a6:	2b08      	cmp	r3, #8
 80104a8:	d110      	bne.n	80104cc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	2208      	movs	r2, #8
 80104b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f000 f8fe 	bl	80106b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2208      	movs	r2, #8
 80104bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e029      	b.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	69db      	ldr	r3, [r3, #28]
 80104d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104da:	d111      	bne.n	8010500 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f000 f8e4 	bl	80106b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2220      	movs	r2, #32
 80104f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2200      	movs	r2, #0
 80104f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80104fc:	2303      	movs	r3, #3
 80104fe:	e00f      	b.n	8010520 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	69da      	ldr	r2, [r3, #28]
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	4013      	ands	r3, r2
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	429a      	cmp	r2, r3
 801050e:	bf0c      	ite	eq
 8010510:	2301      	moveq	r3, #1
 8010512:	2300      	movne	r3, #0
 8010514:	b2db      	uxtb	r3, r3
 8010516:	461a      	mov	r2, r3
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	429a      	cmp	r2, r3
 801051c:	d0a0      	beq.n	8010460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b096      	sub	sp, #88	@ 0x58
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	4613      	mov	r3, r2
 8010534:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	88fa      	ldrh	r2, [r7, #6]
 8010540:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2222      	movs	r2, #34	@ 0x22
 8010550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010558:	2b00      	cmp	r3, #0
 801055a:	d028      	beq.n	80105ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010560:	4a3e      	ldr	r2, [pc, #248]	@ (801065c <UART_Start_Receive_DMA+0x134>)
 8010562:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010568:	4a3d      	ldr	r2, [pc, #244]	@ (8010660 <UART_Start_Receive_DMA+0x138>)
 801056a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010570:	4a3c      	ldr	r2, [pc, #240]	@ (8010664 <UART_Start_Receive_DMA+0x13c>)
 8010572:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010578:	2200      	movs	r2, #0
 801057a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3324      	adds	r3, #36	@ 0x24
 8010586:	4619      	mov	r1, r3
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801058c:	461a      	mov	r2, r3
 801058e:	88fb      	ldrh	r3, [r7, #6]
 8010590:	f7f6 fdc4 	bl	800711c <HAL_DMA_Start_IT>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d009      	beq.n	80105ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2210      	movs	r2, #16
 801059e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2220      	movs	r2, #32
 80105a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e051      	b.n	8010652 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	691b      	ldr	r3, [r3, #16]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d018      	beq.n	80105e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105be:	e853 3f00 	ldrex	r3, [r3]
 80105c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	461a      	mov	r2, r3
 80105d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80105da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105dc:	e841 2300 	strex	r3, r2, [r1]
 80105e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80105e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e6      	bne.n	80105b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	3308      	adds	r3, #8
 80105ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f2:	e853 3f00 	ldrex	r3, [r3]
 80105f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fa:	f043 0301 	orr.w	r3, r3, #1
 80105fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	3308      	adds	r3, #8
 8010606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010608:	637a      	str	r2, [r7, #52]	@ 0x34
 801060a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801060e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010610:	e841 2300 	strex	r3, r2, [r1]
 8010614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1e5      	bne.n	80105e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	3308      	adds	r3, #8
 8010622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	e853 3f00 	ldrex	r3, [r3]
 801062a:	613b      	str	r3, [r7, #16]
   return(result);
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3308      	adds	r3, #8
 801063a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801063c:	623a      	str	r2, [r7, #32]
 801063e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010640:	69f9      	ldr	r1, [r7, #28]
 8010642:	6a3a      	ldr	r2, [r7, #32]
 8010644:	e841 2300 	strex	r3, r2, [r1]
 8010648:	61bb      	str	r3, [r7, #24]
   return(result);
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e5      	bne.n	801061c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3758      	adds	r7, #88	@ 0x58
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	0801077d 	.word	0x0801077d
 8010660:	080108db 	.word	0x080108db
 8010664:	0801094d 	.word	0x0801094d

08010668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010668:	b480      	push	{r7}
 801066a:	b089      	sub	sp, #36	@ 0x24
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	e853 3f00 	ldrex	r3, [r3]
 801067c:	60bb      	str	r3, [r7, #8]
   return(result);
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010684:	61fb      	str	r3, [r7, #28]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	461a      	mov	r2, r3
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	61bb      	str	r3, [r7, #24]
 8010690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010692:	6979      	ldr	r1, [r7, #20]
 8010694:	69ba      	ldr	r2, [r7, #24]
 8010696:	e841 2300 	strex	r3, r2, [r1]
 801069a:	613b      	str	r3, [r7, #16]
   return(result);
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1e6      	bne.n	8010670 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2220      	movs	r2, #32
 80106a6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80106a8:	bf00      	nop
 80106aa:	3724      	adds	r7, #36	@ 0x24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b095      	sub	sp, #84	@ 0x54
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80106ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106da:	643b      	str	r3, [r7, #64]	@ 0x40
 80106dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80106e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80106e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e6      	bne.n	80106bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	3308      	adds	r3, #8
 80106f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	e853 3f00 	ldrex	r3, [r3]
 80106fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	f023 0301 	bic.w	r3, r3, #1
 8010704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	3308      	adds	r3, #8
 801070c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801070e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010716:	e841 2300 	strex	r3, r2, [r1]
 801071a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1e5      	bne.n	80106ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010726:	2b01      	cmp	r3, #1
 8010728:	d118      	bne.n	801075c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	e853 3f00 	ldrex	r3, [r3]
 8010736:	60bb      	str	r3, [r7, #8]
   return(result);
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	f023 0310 	bic.w	r3, r3, #16
 801073e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	461a      	mov	r2, r3
 8010746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010748:	61bb      	str	r3, [r7, #24]
 801074a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801074c:	6979      	ldr	r1, [r7, #20]
 801074e:	69ba      	ldr	r2, [r7, #24]
 8010750:	e841 2300 	strex	r3, r2, [r1]
 8010754:	613b      	str	r3, [r7, #16]
   return(result);
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1e6      	bne.n	801072a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2220      	movs	r2, #32
 8010760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010770:	bf00      	nop
 8010772:	3754      	adds	r7, #84	@ 0x54
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b09c      	sub	sp, #112	@ 0x70
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010788:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	69db      	ldr	r3, [r3, #28]
 801078e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010792:	d071      	beq.n	8010878 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010796:	2200      	movs	r2, #0
 8010798:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801079c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107a4:	e853 3f00 	ldrex	r3, [r3]
 80107a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80107aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	461a      	mov	r2, r3
 80107b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80107ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80107bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80107c2:	e841 2300 	strex	r3, r2, [r1]
 80107c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80107c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d1e6      	bne.n	801079c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	3308      	adds	r3, #8
 80107d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107d8:	e853 3f00 	ldrex	r3, [r3]
 80107dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80107de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e0:	f023 0301 	bic.w	r3, r3, #1
 80107e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80107e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	3308      	adds	r3, #8
 80107ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80107ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80107f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80107f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80107f6:	e841 2300 	strex	r3, r2, [r1]
 80107fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1e5      	bne.n	80107ce <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	3308      	adds	r3, #8
 8010808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801080a:	6a3b      	ldr	r3, [r7, #32]
 801080c:	e853 3f00 	ldrex	r3, [r3]
 8010810:	61fb      	str	r3, [r7, #28]
   return(result);
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010818:	663b      	str	r3, [r7, #96]	@ 0x60
 801081a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	3308      	adds	r3, #8
 8010820:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010824:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801082a:	e841 2300 	strex	r3, r2, [r1]
 801082e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1e5      	bne.n	8010802 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010838:	2220      	movs	r2, #32
 801083a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801083e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010842:	2b01      	cmp	r3, #1
 8010844:	d118      	bne.n	8010878 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	e853 3f00 	ldrex	r3, [r3]
 8010852:	60bb      	str	r3, [r7, #8]
   return(result);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	f023 0310 	bic.w	r3, r3, #16
 801085a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801085c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	461a      	mov	r2, r3
 8010862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010864:	61bb      	str	r3, [r7, #24]
 8010866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010868:	6979      	ldr	r1, [r7, #20]
 801086a:	69ba      	ldr	r2, [r7, #24]
 801086c:	e841 2300 	strex	r3, r2, [r1]
 8010870:	613b      	str	r3, [r7, #16]
   return(result);
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1e6      	bne.n	8010846 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801087a:	2200      	movs	r2, #0
 801087c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801087e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010882:	2b01      	cmp	r3, #1
 8010884:	d122      	bne.n	80108cc <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8010886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010888:	2200      	movs	r2, #0
 801088a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801089a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801089e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d204      	bcs.n	80108b0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80108a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80108ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80108b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80108b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80108bc:	b29b      	uxth	r3, r3
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	4619      	mov	r1, r3
 80108c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108c6:	f7ff fa59 	bl	800fd7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108ca:	e002      	b.n	80108d2 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 80108cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108ce:	f7f5 fc57 	bl	8006180 <HAL_UART_RxCpltCallback>
}
 80108d2:	bf00      	nop
 80108d4:	3770      	adds	r7, #112	@ 0x70
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b084      	sub	sp, #16
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2201      	movs	r2, #1
 80108ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d123      	bne.n	801093e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80108fc:	085b      	lsrs	r3, r3, #1
 80108fe:	b29a      	uxth	r2, r3
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010914:	897a      	ldrh	r2, [r7, #10]
 8010916:	429a      	cmp	r2, r3
 8010918:	d803      	bhi.n	8010922 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	897a      	ldrh	r2, [r7, #10]
 801091e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801092e:	b29b      	uxth	r3, r3
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	b29b      	uxth	r3, r3
 8010934:	4619      	mov	r1, r3
 8010936:	68f8      	ldr	r0, [r7, #12]
 8010938:	f7ff fa20 	bl	800fd7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801093c:	e002      	b.n	8010944 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7f5 fc42 	bl	80061c8 <HAL_UART_RxHalfCpltCallback>
}
 8010944:	bf00      	nop
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010958:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801095e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010966:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010972:	2b80      	cmp	r3, #128	@ 0x80
 8010974:	d109      	bne.n	801098a <UART_DMAError+0x3e>
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	2b21      	cmp	r3, #33	@ 0x21
 801097a:	d106      	bne.n	801098a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	2200      	movs	r2, #0
 8010980:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8010984:	6978      	ldr	r0, [r7, #20]
 8010986:	f7ff fe6f 	bl	8010668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010994:	2b40      	cmp	r3, #64	@ 0x40
 8010996:	d109      	bne.n	80109ac <UART_DMAError+0x60>
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b22      	cmp	r3, #34	@ 0x22
 801099c:	d106      	bne.n	80109ac <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80109a6:	6978      	ldr	r0, [r7, #20]
 80109a8:	f7ff fe84 	bl	80106b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109b2:	f043 0210 	orr.w	r2, r3, #16
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109bc:	6978      	ldr	r0, [r7, #20]
 80109be:	f7f5 fc19 	bl	80061f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109c2:	bf00      	nop
 80109c4:	3718      	adds	r7, #24
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b084      	sub	sp, #16
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2200      	movs	r2, #0
 80109dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f7f5 fc07 	bl	80061f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109e6:	bf00      	nop
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b088      	sub	sp, #32
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	e853 3f00 	ldrex	r3, [r3]
 8010a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a0a:	61fb      	str	r3, [r7, #28]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	461a      	mov	r2, r3
 8010a12:	69fb      	ldr	r3, [r7, #28]
 8010a14:	61bb      	str	r3, [r7, #24]
 8010a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a18:	6979      	ldr	r1, [r7, #20]
 8010a1a:	69ba      	ldr	r2, [r7, #24]
 8010a1c:	e841 2300 	strex	r3, r2, [r1]
 8010a20:	613b      	str	r3, [r7, #16]
   return(result);
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1e6      	bne.n	80109f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2220      	movs	r2, #32
 8010a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f7ff f997 	bl	800fd68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a3a:	bf00      	nop
 8010a3c:	3720      	adds	r7, #32
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
	...

08010a44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d121      	bne.n	8010a9a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	4b27      	ldr	r3, [pc, #156]	@ (8010af8 <FMC_SDRAM_Init+0xb4>)
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	6851      	ldr	r1, [r2, #4]
 8010a62:	683a      	ldr	r2, [r7, #0]
 8010a64:	6892      	ldr	r2, [r2, #8]
 8010a66:	4311      	orrs	r1, r2
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	68d2      	ldr	r2, [r2, #12]
 8010a6c:	4311      	orrs	r1, r2
 8010a6e:	683a      	ldr	r2, [r7, #0]
 8010a70:	6912      	ldr	r2, [r2, #16]
 8010a72:	4311      	orrs	r1, r2
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	6952      	ldr	r2, [r2, #20]
 8010a78:	4311      	orrs	r1, r2
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	6992      	ldr	r2, [r2, #24]
 8010a7e:	4311      	orrs	r1, r2
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	69d2      	ldr	r2, [r2, #28]
 8010a84:	4311      	orrs	r1, r2
 8010a86:	683a      	ldr	r2, [r7, #0]
 8010a88:	6a12      	ldr	r2, [r2, #32]
 8010a8a:	4311      	orrs	r1, r2
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010a90:	430a      	orrs	r2, r1
 8010a92:	431a      	orrs	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	e026      	b.n	8010ae8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	69d9      	ldr	r1, [r3, #28]
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	6a1b      	ldr	r3, [r3, #32]
 8010aaa:	4319      	orrs	r1, r3
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ab0:	430b      	orrs	r3, r1
 8010ab2:	431a      	orrs	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	685a      	ldr	r2, [r3, #4]
 8010abc:	4b0e      	ldr	r3, [pc, #56]	@ (8010af8 <FMC_SDRAM_Init+0xb4>)
 8010abe:	4013      	ands	r3, r2
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	6851      	ldr	r1, [r2, #4]
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	6892      	ldr	r2, [r2, #8]
 8010ac8:	4311      	orrs	r1, r2
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	68d2      	ldr	r2, [r2, #12]
 8010ace:	4311      	orrs	r1, r2
 8010ad0:	683a      	ldr	r2, [r7, #0]
 8010ad2:	6912      	ldr	r2, [r2, #16]
 8010ad4:	4311      	orrs	r1, r2
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	6952      	ldr	r2, [r2, #20]
 8010ada:	4311      	orrs	r1, r2
 8010adc:	683a      	ldr	r2, [r7, #0]
 8010ade:	6992      	ldr	r2, [r2, #24]
 8010ae0:	430a      	orrs	r2, r1
 8010ae2:	431a      	orrs	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	ffff8000 	.word	0xffff8000

08010afc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d128      	bne.n	8010b60 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	1e59      	subs	r1, r3, #1
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	3b01      	subs	r3, #1
 8010b22:	011b      	lsls	r3, r3, #4
 8010b24:	4319      	orrs	r1, r3
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	021b      	lsls	r3, r3, #8
 8010b2e:	4319      	orrs	r1, r3
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	031b      	lsls	r3, r3, #12
 8010b38:	4319      	orrs	r1, r3
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	691b      	ldr	r3, [r3, #16]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	041b      	lsls	r3, r3, #16
 8010b42:	4319      	orrs	r1, r3
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	695b      	ldr	r3, [r3, #20]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	051b      	lsls	r3, r3, #20
 8010b4c:	4319      	orrs	r1, r3
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	699b      	ldr	r3, [r3, #24]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	061b      	lsls	r3, r3, #24
 8010b56:	430b      	orrs	r3, r1
 8010b58:	431a      	orrs	r2, r3
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	609a      	str	r2, [r3, #8]
 8010b5e:	e02d      	b.n	8010bbc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	689a      	ldr	r2, [r3, #8]
 8010b64:	4b19      	ldr	r3, [pc, #100]	@ (8010bcc <FMC_SDRAM_Timing_Init+0xd0>)
 8010b66:	4013      	ands	r3, r2
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	68d2      	ldr	r2, [r2, #12]
 8010b6c:	3a01      	subs	r2, #1
 8010b6e:	0311      	lsls	r1, r2, #12
 8010b70:	68ba      	ldr	r2, [r7, #8]
 8010b72:	6952      	ldr	r2, [r2, #20]
 8010b74:	3a01      	subs	r2, #1
 8010b76:	0512      	lsls	r2, r2, #20
 8010b78:	430a      	orrs	r2, r1
 8010b7a:	431a      	orrs	r2, r3
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	1e59      	subs	r1, r3, #1
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	3b01      	subs	r3, #1
 8010b94:	011b      	lsls	r3, r3, #4
 8010b96:	4319      	orrs	r1, r3
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	689b      	ldr	r3, [r3, #8]
 8010b9c:	3b01      	subs	r3, #1
 8010b9e:	021b      	lsls	r3, r3, #8
 8010ba0:	4319      	orrs	r1, r3
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	041b      	lsls	r3, r3, #16
 8010baa:	4319      	orrs	r1, r3
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	699b      	ldr	r3, [r3, #24]
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	061b      	lsls	r3, r3, #24
 8010bb4:	430b      	orrs	r3, r1
 8010bb6:	431a      	orrs	r2, r3
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	ff0f0fff 	.word	0xff0f0fff

08010bd0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010bd0:	b084      	sub	sp, #16
 8010bd2:	b480      	push	{r7}
 8010bd4:	b085      	sub	sp, #20
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
 8010bda:	f107 001c 	add.w	r0, r7, #28
 8010bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010be2:	2300      	movs	r3, #0
 8010be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010be6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010be8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010bea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010bee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010bf2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010bf6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010bfa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	685a      	ldr	r2, [r3, #4]
 8010c06:	4b07      	ldr	r3, [pc, #28]	@ (8010c24 <SDMMC_Init+0x54>)
 8010c08:	4013      	ands	r3, r2
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	431a      	orrs	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010c12:	2300      	movs	r3, #0
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	b004      	add	sp, #16
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	ffff8100 	.word	0xffff8100

08010c28 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010c42:	b480      	push	{r7}
 8010c44:	b083      	sub	sp, #12
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010c56:	2300      	movs	r3, #0
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	370c      	adds	r7, #12
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr

08010c64 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2203      	movs	r2, #3
 8010c70:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010c72:	2300      	movs	r3, #0
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	370c      	adds	r7, #12
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f003 0303 	and.w	r3, r3, #3
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	370c      	adds	r7, #12
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr

08010c9c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010cc0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010cc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	4b06      	ldr	r3, [pc, #24]	@ (8010cec <SDMMC_SendCommand+0x50>)
 8010cd4:	4013      	ands	r3, r2
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010cde:	2300      	movs	r3, #0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	fffff000 	.word	0xfffff000

08010cf0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	691b      	ldr	r3, [r3, #16]
 8010cfc:	b2db      	uxtb	r3, r3
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b085      	sub	sp, #20
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	3314      	adds	r3, #20
 8010d18:	461a      	mov	r2, r3
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
}  
 8010d24:	4618      	mov	r0, r3
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	685a      	ldr	r2, [r3, #4]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d56:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010d5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010d62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	4313      	orrs	r3, r2
 8010d68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d6e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	431a      	orrs	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010d7a:	2300      	movs	r3, #0

}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3714      	adds	r7, #20
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b088      	sub	sp, #32
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010d96:	2310      	movs	r3, #16
 8010d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d9a:	2340      	movs	r3, #64	@ 0x40
 8010d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010da6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010da8:	f107 0308 	add.w	r3, r7, #8
 8010dac:	4619      	mov	r1, r3
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7ff ff74 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010db8:	2110      	movs	r1, #16
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fa1a 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dc2:	69fb      	ldr	r3, [r7, #28]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3720      	adds	r7, #32
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b088      	sub	sp, #32
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010dda:	2311      	movs	r3, #17
 8010ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dde:	2340      	movs	r3, #64	@ 0x40
 8010de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010de2:	2300      	movs	r3, #0
 8010de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dec:	f107 0308 	add.w	r3, r7, #8
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7ff ff52 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010dfc:	2111      	movs	r1, #17
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 f9f8 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e06:	69fb      	ldr	r3, [r7, #28]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3720      	adds	r7, #32
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b088      	sub	sp, #32
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010e1e:	2312      	movs	r3, #18
 8010e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e22:	2340      	movs	r3, #64	@ 0x40
 8010e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e26:	2300      	movs	r3, #0
 8010e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e30:	f107 0308 	add.w	r3, r7, #8
 8010e34:	4619      	mov	r1, r3
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7ff ff30 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e40:	2112      	movs	r1, #18
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 f9d6 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e4a:	69fb      	ldr	r3, [r7, #28]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3720      	adds	r7, #32
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b088      	sub	sp, #32
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010e62:	2318      	movs	r3, #24
 8010e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e66:	2340      	movs	r3, #64	@ 0x40
 8010e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e74:	f107 0308 	add.w	r3, r7, #8
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f7ff ff0e 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e84:	2118      	movs	r1, #24
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 f9b4 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e8e:	69fb      	ldr	r3, [r7, #28]
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3720      	adds	r7, #32
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b088      	sub	sp, #32
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010ea6:	2319      	movs	r3, #25
 8010ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eaa:	2340      	movs	r3, #64	@ 0x40
 8010eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eb8:	f107 0308 	add.w	r3, r7, #8
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f7ff feec 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ec8:	2119      	movs	r1, #25
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f992 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ed2:	69fb      	ldr	r3, [r7, #28]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3720      	adds	r7, #32
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b088      	sub	sp, #32
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ee8:	230c      	movs	r3, #12
 8010eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eec:	2340      	movs	r3, #64	@ 0x40
 8010eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010efa:	f107 0308 	add.w	r3, r7, #8
 8010efe:	4619      	mov	r1, r3
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ff fecb 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010f06:	4a05      	ldr	r2, [pc, #20]	@ (8010f1c <SDMMC_CmdStopTransfer+0x40>)
 8010f08:	210c      	movs	r1, #12
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 f972 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f12:	69fb      	ldr	r3, [r7, #28]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3720      	adds	r7, #32
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	05f5e100 	.word	0x05f5e100

08010f20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b08a      	sub	sp, #40	@ 0x28
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010f30:	2307      	movs	r3, #7
 8010f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f34:	2340      	movs	r3, #64	@ 0x40
 8010f36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f40:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f42:	f107 0310 	add.w	r3, r7, #16
 8010f46:	4619      	mov	r1, r3
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff fea7 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f52:	2107      	movs	r1, #7
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f000 f94d 	bl	80111f4 <SDMMC_GetCmdResp1>
 8010f5a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3728      	adds	r7, #40	@ 0x28
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b088      	sub	sp, #32
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f72:	2300      	movs	r3, #0
 8010f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010f76:	2300      	movs	r3, #0
 8010f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f84:	f107 0308 	add.w	r3, r7, #8
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff fe86 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f000 fb67 	bl	8011664 <SDMMC_GetCmdError>
 8010f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f98:	69fb      	ldr	r3, [r7, #28]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3720      	adds	r7, #32
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b088      	sub	sp, #32
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010faa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010fb0:	2308      	movs	r3, #8
 8010fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fb4:	2340      	movs	r3, #64	@ 0x40
 8010fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fc2:	f107 0308 	add.w	r3, r7, #8
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7ff fe67 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 fafa 	bl	80115c8 <SDMMC_GetCmdResp7>
 8010fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fd6:	69fb      	ldr	r3, [r7, #28]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b088      	sub	sp, #32
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010fee:	2337      	movs	r3, #55	@ 0x37
 8010ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ff2:	2340      	movs	r3, #64	@ 0x40
 8010ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011000:	f107 0308 	add.w	r3, r7, #8
 8011004:	4619      	mov	r1, r3
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7ff fe48 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011010:	2137      	movs	r1, #55	@ 0x37
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 f8ee 	bl	80111f4 <SDMMC_GetCmdResp1>
 8011018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801101a:	69fb      	ldr	r3, [r7, #28]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3720      	adds	r7, #32
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	4b0d      	ldr	r3, [pc, #52]	@ (8011068 <SDMMC_CmdAppOperCommand+0x44>)
 8011032:	4313      	orrs	r3, r2
 8011034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011036:	2329      	movs	r3, #41	@ 0x29
 8011038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801103a:	2340      	movs	r3, #64	@ 0x40
 801103c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801103e:	2300      	movs	r3, #0
 8011040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011048:	f107 0308 	add.w	r3, r7, #8
 801104c:	4619      	mov	r1, r3
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7ff fe24 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fa03 	bl	8011460 <SDMMC_GetCmdResp3>
 801105a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801105c:	69fb      	ldr	r3, [r7, #28]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3720      	adds	r7, #32
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	80100000 	.word	0x80100000

0801106c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801107a:	2306      	movs	r3, #6
 801107c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801107e:	2340      	movs	r3, #64	@ 0x40
 8011080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011082:	2300      	movs	r3, #0
 8011084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801108a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801108c:	f107 0308 	add.w	r3, r7, #8
 8011090:	4619      	mov	r1, r3
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff fe02 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011098:	f241 3288 	movw	r2, #5000	@ 0x1388
 801109c:	2106      	movs	r1, #6
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 f8a8 	bl	80111f4 <SDMMC_GetCmdResp1>
 80110a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a6:	69fb      	ldr	r3, [r7, #28]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3720      	adds	r7, #32
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b088      	sub	sp, #32
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80110b8:	2300      	movs	r3, #0
 80110ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80110bc:	2333      	movs	r3, #51	@ 0x33
 80110be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110c0:	2340      	movs	r3, #64	@ 0x40
 80110c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110c4:	2300      	movs	r3, #0
 80110c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110ce:	f107 0308 	add.w	r3, r7, #8
 80110d2:	4619      	mov	r1, r3
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff fde1 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80110da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110de:	2133      	movs	r1, #51	@ 0x33
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f887 	bl	80111f4 <SDMMC_GetCmdResp1>
 80110e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110e8:	69fb      	ldr	r3, [r7, #28]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3720      	adds	r7, #32
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b088      	sub	sp, #32
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80110fe:	2302      	movs	r3, #2
 8011100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011102:	23c0      	movs	r3, #192	@ 0xc0
 8011104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011106:	2300      	movs	r3, #0
 8011108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801110a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801110e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011110:	f107 0308 	add.w	r3, r7, #8
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff fdc0 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 f957 	bl	80113d0 <SDMMC_GetCmdResp2>
 8011122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011124:	69fb      	ldr	r3, [r7, #28]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3720      	adds	r7, #32
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}

0801112e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b088      	sub	sp, #32
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801113c:	2309      	movs	r3, #9
 801113e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011140:	23c0      	movs	r3, #192	@ 0xc0
 8011142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011144:	2300      	movs	r3, #0
 8011146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801114c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801114e:	f107 0308 	add.w	r3, r7, #8
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff fda1 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f000 f938 	bl	80113d0 <SDMMC_GetCmdResp2>
 8011160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011162:	69fb      	ldr	r3, [r7, #28]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3720      	adds	r7, #32
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b088      	sub	sp, #32
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011176:	2300      	movs	r3, #0
 8011178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801117a:	2303      	movs	r3, #3
 801117c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801117e:	2340      	movs	r3, #64	@ 0x40
 8011180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011182:	2300      	movs	r3, #0
 8011184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801118a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801118c:	f107 0308 	add.w	r3, r7, #8
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff fd82 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011198:	683a      	ldr	r2, [r7, #0]
 801119a:	2103      	movs	r1, #3
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f000 f99d 	bl	80114dc <SDMMC_GetCmdResp6>
 80111a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111a4:	69fb      	ldr	r3, [r7, #28]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3720      	adds	r7, #32
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b088      	sub	sp, #32
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80111bc:	230d      	movs	r3, #13
 80111be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111c0:	2340      	movs	r3, #64	@ 0x40
 80111c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111c4:	2300      	movs	r3, #0
 80111c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111ce:	f107 0308 	add.w	r3, r7, #8
 80111d2:	4619      	mov	r1, r3
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7ff fd61 	bl	8010c9c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80111da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111de:	210d      	movs	r1, #13
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f000 f807 	bl	80111f4 <SDMMC_GetCmdResp1>
 80111e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111e8:	69fb      	ldr	r3, [r7, #28]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3720      	adds	r7, #32
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
	...

080111f4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b088      	sub	sp, #32
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	460b      	mov	r3, r1
 80111fe:	607a      	str	r2, [r7, #4]
 8011200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011202:	4b70      	ldr	r3, [pc, #448]	@ (80113c4 <SDMMC_GetCmdResp1+0x1d0>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4a70      	ldr	r2, [pc, #448]	@ (80113c8 <SDMMC_GetCmdResp1+0x1d4>)
 8011208:	fba2 2303 	umull	r2, r3, r2, r3
 801120c:	0a5a      	lsrs	r2, r3, #9
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	fb02 f303 	mul.w	r3, r2, r3
 8011214:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	1e5a      	subs	r2, r3, #1
 801121a:	61fa      	str	r2, [r7, #28]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d102      	bne.n	8011226 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011220:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011224:	e0c9      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801122a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801122c:	69bb      	ldr	r3, [r7, #24]
 801122e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011232:	2b00      	cmp	r3, #0
 8011234:	d0ef      	beq.n	8011216 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1ea      	bne.n	8011216 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011244:	f003 0304 	and.w	r3, r3, #4
 8011248:	2b00      	cmp	r3, #0
 801124a:	d004      	beq.n	8011256 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2204      	movs	r2, #4
 8011250:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011252:	2304      	movs	r3, #4
 8011254:	e0b1      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801125a:	f003 0301 	and.w	r3, r3, #1
 801125e:	2b00      	cmp	r3, #0
 8011260:	d004      	beq.n	801126c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2201      	movs	r2, #1
 8011266:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011268:	2301      	movs	r3, #1
 801126a:	e0a6      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	22c5      	movs	r2, #197	@ 0xc5
 8011270:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f7ff fd3c 	bl	8010cf0 <SDMMC_GetCommandResponse>
 8011278:	4603      	mov	r3, r0
 801127a:	461a      	mov	r2, r3
 801127c:	7afb      	ldrb	r3, [r7, #11]
 801127e:	4293      	cmp	r3, r2
 8011280:	d001      	beq.n	8011286 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011282:	2301      	movs	r3, #1
 8011284:	e099      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011286:	2100      	movs	r1, #0
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f7ff fd3e 	bl	8010d0a <SDMMC_GetResponse>
 801128e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011290:	697a      	ldr	r2, [r7, #20]
 8011292:	4b4e      	ldr	r3, [pc, #312]	@ (80113cc <SDMMC_GetCmdResp1+0x1d8>)
 8011294:	4013      	ands	r3, r2
 8011296:	2b00      	cmp	r3, #0
 8011298:	d101      	bne.n	801129e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801129a:	2300      	movs	r3, #0
 801129c:	e08d      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	da02      	bge.n	80112aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80112a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80112a8:	e087      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80112b4:	2340      	movs	r3, #64	@ 0x40
 80112b6:	e080      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80112c2:	2380      	movs	r3, #128	@ 0x80
 80112c4:	e079      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d002      	beq.n	80112d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80112d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80112d4:	e071      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80112e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112e4:	e069      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d002      	beq.n	80112f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80112f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112f4:	e061      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d002      	beq.n	8011306 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011300:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011304:	e059      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801130c:	2b00      	cmp	r3, #0
 801130e:	d002      	beq.n	8011316 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011314:	e051      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011320:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011324:	e049      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801132c:	2b00      	cmp	r3, #0
 801132e:	d002      	beq.n	8011336 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011330:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011334:	e041      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801133c:	2b00      	cmp	r3, #0
 801133e:	d002      	beq.n	8011346 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011344:	e039      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011354:	e031      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011360:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011364:	e029      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801136c:	2b00      	cmp	r3, #0
 801136e:	d002      	beq.n	8011376 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011370:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011374:	e021      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801137c:	2b00      	cmp	r3, #0
 801137e:	d002      	beq.n	8011386 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011380:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011384:	e019      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011390:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011394:	e011      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80113a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80113a4:	e009      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	f003 0308 	and.w	r3, r3, #8
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d002      	beq.n	80113b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80113b0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80113b4:	e001      	b.n	80113ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80113b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3720      	adds	r7, #32
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20000020 	.word	0x20000020
 80113c8:	10624dd3 	.word	0x10624dd3
 80113cc:	fdffe008 	.word	0xfdffe008

080113d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80113d8:	4b1f      	ldr	r3, [pc, #124]	@ (8011458 <SDMMC_GetCmdResp2+0x88>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a1f      	ldr	r2, [pc, #124]	@ (801145c <SDMMC_GetCmdResp2+0x8c>)
 80113de:	fba2 2303 	umull	r2, r3, r2, r3
 80113e2:	0a5b      	lsrs	r3, r3, #9
 80113e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113e8:	fb02 f303 	mul.w	r3, r2, r3
 80113ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	1e5a      	subs	r2, r3, #1
 80113f2:	60fa      	str	r2, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d102      	bne.n	80113fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80113fc:	e026      	b.n	801144c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011402:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801140a:	2b00      	cmp	r3, #0
 801140c:	d0ef      	beq.n	80113ee <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1ea      	bne.n	80113ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801141c:	f003 0304 	and.w	r3, r3, #4
 8011420:	2b00      	cmp	r3, #0
 8011422:	d004      	beq.n	801142e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2204      	movs	r2, #4
 8011428:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801142a:	2304      	movs	r3, #4
 801142c:	e00e      	b.n	801144c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011432:	f003 0301 	and.w	r3, r3, #1
 8011436:	2b00      	cmp	r3, #0
 8011438:	d004      	beq.n	8011444 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2201      	movs	r2, #1
 801143e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011440:	2301      	movs	r3, #1
 8011442:	e003      	b.n	801144c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	22c5      	movs	r2, #197	@ 0xc5
 8011448:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3714      	adds	r7, #20
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr
 8011458:	20000020 	.word	0x20000020
 801145c:	10624dd3 	.word	0x10624dd3

08011460 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011468:	4b1a      	ldr	r3, [pc, #104]	@ (80114d4 <SDMMC_GetCmdResp3+0x74>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4a1a      	ldr	r2, [pc, #104]	@ (80114d8 <SDMMC_GetCmdResp3+0x78>)
 801146e:	fba2 2303 	umull	r2, r3, r2, r3
 8011472:	0a5b      	lsrs	r3, r3, #9
 8011474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011478:	fb02 f303 	mul.w	r3, r2, r3
 801147c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	1e5a      	subs	r2, r3, #1
 8011482:	60fa      	str	r2, [r7, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d102      	bne.n	801148e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011488:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801148c:	e01b      	b.n	80114c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801149a:	2b00      	cmp	r3, #0
 801149c:	d0ef      	beq.n	801147e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d1ea      	bne.n	801147e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114ac:	f003 0304 	and.w	r3, r3, #4
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d004      	beq.n	80114be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2204      	movs	r2, #4
 80114b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114ba:	2304      	movs	r3, #4
 80114bc:	e003      	b.n	80114c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	22c5      	movs	r2, #197	@ 0xc5
 80114c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80114c4:	2300      	movs	r3, #0
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	20000020 	.word	0x20000020
 80114d8:	10624dd3 	.word	0x10624dd3

080114dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b088      	sub	sp, #32
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	460b      	mov	r3, r1
 80114e6:	607a      	str	r2, [r7, #4]
 80114e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114ea:	4b35      	ldr	r3, [pc, #212]	@ (80115c0 <SDMMC_GetCmdResp6+0xe4>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4a35      	ldr	r2, [pc, #212]	@ (80115c4 <SDMMC_GetCmdResp6+0xe8>)
 80114f0:	fba2 2303 	umull	r2, r3, r2, r3
 80114f4:	0a5b      	lsrs	r3, r3, #9
 80114f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80114fa:	fb02 f303 	mul.w	r3, r2, r3
 80114fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	1e5a      	subs	r2, r3, #1
 8011504:	61fa      	str	r2, [r7, #28]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d102      	bne.n	8011510 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801150a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801150e:	e052      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011514:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801151c:	2b00      	cmp	r3, #0
 801151e:	d0ef      	beq.n	8011500 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1ea      	bne.n	8011500 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801152e:	f003 0304 	and.w	r3, r3, #4
 8011532:	2b00      	cmp	r3, #0
 8011534:	d004      	beq.n	8011540 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2204      	movs	r2, #4
 801153a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801153c:	2304      	movs	r3, #4
 801153e:	e03a      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b00      	cmp	r3, #0
 801154a:	d004      	beq.n	8011556 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2201      	movs	r2, #1
 8011550:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011552:	2301      	movs	r3, #1
 8011554:	e02f      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f7ff fbca 	bl	8010cf0 <SDMMC_GetCommandResponse>
 801155c:	4603      	mov	r3, r0
 801155e:	461a      	mov	r2, r3
 8011560:	7afb      	ldrb	r3, [r7, #11]
 8011562:	4293      	cmp	r3, r2
 8011564:	d001      	beq.n	801156a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011566:	2301      	movs	r3, #1
 8011568:	e025      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	22c5      	movs	r2, #197	@ 0xc5
 801156e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011570:	2100      	movs	r1, #0
 8011572:	68f8      	ldr	r0, [r7, #12]
 8011574:	f7ff fbc9 	bl	8010d0a <SDMMC_GetResponse>
 8011578:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011580:	2b00      	cmp	r3, #0
 8011582:	d106      	bne.n	8011592 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	0c1b      	lsrs	r3, r3, #16
 8011588:	b29a      	uxth	r2, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801158e:	2300      	movs	r3, #0
 8011590:	e011      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011598:	2b00      	cmp	r3, #0
 801159a:	d002      	beq.n	80115a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801159c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80115a0:	e009      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d002      	beq.n	80115b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80115ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80115b0:	e001      	b.n	80115b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80115b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3720      	adds	r7, #32
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	20000020 	.word	0x20000020
 80115c4:	10624dd3 	.word	0x10624dd3

080115c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80115d0:	4b22      	ldr	r3, [pc, #136]	@ (801165c <SDMMC_GetCmdResp7+0x94>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a22      	ldr	r2, [pc, #136]	@ (8011660 <SDMMC_GetCmdResp7+0x98>)
 80115d6:	fba2 2303 	umull	r2, r3, r2, r3
 80115da:	0a5b      	lsrs	r3, r3, #9
 80115dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80115e0:	fb02 f303 	mul.w	r3, r2, r3
 80115e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	1e5a      	subs	r2, r3, #1
 80115ea:	60fa      	str	r2, [r7, #12]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d102      	bne.n	80115f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80115f4:	e02c      	b.n	8011650 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011602:	2b00      	cmp	r3, #0
 8011604:	d0ef      	beq.n	80115e6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801160c:	2b00      	cmp	r3, #0
 801160e:	d1ea      	bne.n	80115e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011614:	f003 0304 	and.w	r3, r3, #4
 8011618:	2b00      	cmp	r3, #0
 801161a:	d004      	beq.n	8011626 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2204      	movs	r2, #4
 8011620:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011622:	2304      	movs	r3, #4
 8011624:	e014      	b.n	8011650 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801162a:	f003 0301 	and.w	r3, r3, #1
 801162e:	2b00      	cmp	r3, #0
 8011630:	d004      	beq.n	801163c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2201      	movs	r2, #1
 8011636:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011638:	2301      	movs	r3, #1
 801163a:	e009      	b.n	8011650 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011644:	2b00      	cmp	r3, #0
 8011646:	d002      	beq.n	801164e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2240      	movs	r2, #64	@ 0x40
 801164c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801164e:	2300      	movs	r3, #0
  
}
 8011650:	4618      	mov	r0, r3
 8011652:	3714      	adds	r7, #20
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr
 801165c:	20000020 	.word	0x20000020
 8011660:	10624dd3 	.word	0x10624dd3

08011664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801166c:	4b11      	ldr	r3, [pc, #68]	@ (80116b4 <SDMMC_GetCmdError+0x50>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a11      	ldr	r2, [pc, #68]	@ (80116b8 <SDMMC_GetCmdError+0x54>)
 8011672:	fba2 2303 	umull	r2, r3, r2, r3
 8011676:	0a5b      	lsrs	r3, r3, #9
 8011678:	f241 3288 	movw	r2, #5000	@ 0x1388
 801167c:	fb02 f303 	mul.w	r3, r2, r3
 8011680:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	1e5a      	subs	r2, r3, #1
 8011686:	60fa      	str	r2, [r7, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d102      	bne.n	8011692 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801168c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011690:	e009      	b.n	80116a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801169a:	2b00      	cmp	r3, #0
 801169c:	d0f1      	beq.n	8011682 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	22c5      	movs	r2, #197	@ 0xc5
 80116a2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3714      	adds	r7, #20
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	20000020 	.word	0x20000020
 80116b8:	10624dd3 	.word	0x10624dd3

080116bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	f043 0201 	orr.w	r2, r3, #1
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	370c      	adds	r7, #12
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr

080116de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80116de:	b480      	push	{r7}
 80116e0:	b083      	sub	sp, #12
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	689b      	ldr	r3, [r3, #8]
 80116ea:	f023 0201 	bic.w	r2, r3, #1
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80116f2:	2300      	movs	r3, #0
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	370c      	adds	r7, #12
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801170a:	2300      	movs	r3, #0
 801170c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3301      	adds	r3, #1
 8011712:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801171a:	d901      	bls.n	8011720 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801171c:	2303      	movs	r3, #3
 801171e:	e01b      	b.n	8011758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	daf2      	bge.n	801170e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011728:	2300      	movs	r3, #0
 801172a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	019b      	lsls	r3, r3, #6
 8011730:	f043 0220 	orr.w	r2, r3, #32
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	3301      	adds	r3, #1
 801173c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011744:	d901      	bls.n	801174a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011746:	2303      	movs	r3, #3
 8011748:	e006      	b.n	8011758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	691b      	ldr	r3, [r3, #16]
 801174e:	f003 0320 	and.w	r3, r3, #32
 8011752:	2b20      	cmp	r3, #32
 8011754:	d0f0      	beq.n	8011738 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801176c:	2300      	movs	r3, #0
 801176e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	3301      	adds	r3, #1
 8011774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801177c:	d901      	bls.n	8011782 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801177e:	2303      	movs	r3, #3
 8011780:	e018      	b.n	80117b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	691b      	ldr	r3, [r3, #16]
 8011786:	2b00      	cmp	r3, #0
 8011788:	daf2      	bge.n	8011770 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801178a:	2300      	movs	r3, #0
 801178c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2210      	movs	r2, #16
 8011792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	3301      	adds	r3, #1
 8011798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80117a0:	d901      	bls.n	80117a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80117a2:	2303      	movs	r3, #3
 80117a4:	e006      	b.n	80117b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	f003 0310 	and.w	r3, r3, #16
 80117ae:	2b10      	cmp	r3, #16
 80117b0:	d0f0      	beq.n	8011794 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3714      	adds	r7, #20
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b08b      	sub	sp, #44	@ 0x2c
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	4613      	mov	r3, r2
 80117cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80117d6:	88fb      	ldrh	r3, [r7, #6]
 80117d8:	089b      	lsrs	r3, r3, #2
 80117da:	b29b      	uxth	r3, r3
 80117dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80117de:	88fb      	ldrh	r3, [r7, #6]
 80117e0:	f003 0303 	and.w	r3, r3, #3
 80117e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80117e6:	2300      	movs	r3, #0
 80117e8:	623b      	str	r3, [r7, #32]
 80117ea:	e014      	b.n	8011816 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80117ec:	69bb      	ldr	r3, [r7, #24]
 80117ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80117f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fa:	3301      	adds	r3, #1
 80117fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80117fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011800:	3301      	adds	r3, #1
 8011802:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011806:	3301      	adds	r3, #1
 8011808:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180c:	3301      	adds	r3, #1
 801180e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	3301      	adds	r3, #1
 8011814:	623b      	str	r3, [r7, #32]
 8011816:	6a3a      	ldr	r2, [r7, #32]
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	429a      	cmp	r2, r3
 801181c:	d3e6      	bcc.n	80117ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801181e:	8bfb      	ldrh	r3, [r7, #30]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d01e      	beq.n	8011862 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011824:	2300      	movs	r3, #0
 8011826:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801182e:	461a      	mov	r2, r3
 8011830:	f107 0310 	add.w	r3, r7, #16
 8011834:	6812      	ldr	r2, [r2, #0]
 8011836:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011838:	693a      	ldr	r2, [r7, #16]
 801183a:	6a3b      	ldr	r3, [r7, #32]
 801183c:	b2db      	uxtb	r3, r3
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	fa22 f303 	lsr.w	r3, r2, r3
 8011844:	b2da      	uxtb	r2, r3
 8011846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011848:	701a      	strb	r2, [r3, #0]
      i++;
 801184a:	6a3b      	ldr	r3, [r7, #32]
 801184c:	3301      	adds	r3, #1
 801184e:	623b      	str	r3, [r7, #32]
      pDest++;
 8011850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011852:	3301      	adds	r3, #1
 8011854:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011856:	8bfb      	ldrh	r3, [r7, #30]
 8011858:	3b01      	subs	r3, #1
 801185a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801185c:	8bfb      	ldrh	r3, [r7, #30]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d1ea      	bne.n	8011838 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011864:	4618      	mov	r0, r3
 8011866:	372c      	adds	r7, #44	@ 0x2c
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011870:	b480      	push	{r7}
 8011872:	b085      	sub	sp, #20
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	695b      	ldr	r3, [r3, #20]
 801187c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	699b      	ldr	r3, [r3, #24]
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	4013      	ands	r3, r2
 8011886:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011888:	68fb      	ldr	r3, [r7, #12]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3714      	adds	r7, #20
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr

08011896 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011896:	b480      	push	{r7}
 8011898:	b085      	sub	sp, #20
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
 801189e:	460b      	mov	r3, r1
 80118a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80118a6:	78fb      	ldrb	r3, [r7, #3]
 80118a8:	015a      	lsls	r2, r3, #5
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	4413      	add	r3, r2
 80118ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80118b6:	78fb      	ldrb	r3, [r7, #3]
 80118b8:	015a      	lsls	r2, r3, #5
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	4413      	add	r3, r2
 80118be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	68ba      	ldr	r2, [r7, #8]
 80118c6:	4013      	ands	r3, r2
 80118c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118ca:	68bb      	ldr	r3, [r7, #8]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	695b      	ldr	r3, [r3, #20]
 80118e4:	f003 0301 	and.w	r3, r3, #1
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	68fa      	ldr	r2, [r7, #12]
 801190e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011912:	f023 0303 	bic.w	r3, r3, #3
 8011916:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	78fb      	ldrb	r3, [r7, #3]
 8011922:	f003 0303 	and.w	r3, r3, #3
 8011926:	68f9      	ldr	r1, [r7, #12]
 8011928:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 801192c:	4313      	orrs	r3, r2
 801192e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011930:	78fb      	ldrb	r3, [r7, #3]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d107      	bne.n	8011946 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801193c:	461a      	mov	r2, r3
 801193e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011942:	6053      	str	r3, [r2, #4]
 8011944:	e00c      	b.n	8011960 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011946:	78fb      	ldrb	r3, [r7, #3]
 8011948:	2b02      	cmp	r3, #2
 801194a:	d107      	bne.n	801195c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011952:	461a      	mov	r2, r3
 8011954:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011958:	6053      	str	r3, [r2, #4]
 801195a:	e001      	b.n	8011960 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801195c:	2301      	movs	r3, #1
 801195e:	e000      	b.n	8011962 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	4618      	mov	r0, r3
 8011964:	3714      	adds	r7, #20
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr

0801196e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801196e:	b480      	push	{r7}
 8011970:	b085      	sub	sp, #20
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011980:	695b      	ldr	r3, [r3, #20]
 8011982:	b29b      	uxth	r3, r3
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011990:	b480      	push	{r7}
 8011992:	b089      	sub	sp, #36	@ 0x24
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	460b      	mov	r3, r1
 801199a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80119a0:	78fb      	ldrb	r3, [r7, #3]
 80119a2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80119a4:	2300      	movs	r3, #0
 80119a6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	015a      	lsls	r2, r3, #5
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	4413      	add	r3, r2
 80119b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	0c9b      	lsrs	r3, r3, #18
 80119b8:	f003 0303 	and.w	r3, r3, #3
 80119bc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	015a      	lsls	r2, r3, #5
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	4413      	add	r3, r2
 80119c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	0fdb      	lsrs	r3, r3, #31
 80119ce:	f003 0301 	and.w	r3, r3, #1
 80119d2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	015a      	lsls	r2, r3, #5
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	4413      	add	r3, r2
 80119dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	0fdb      	lsrs	r3, r3, #31
 80119e4:	f003 0301 	and.w	r3, r3, #1
 80119e8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	f003 0320 	and.w	r3, r3, #32
 80119f2:	2b20      	cmp	r3, #32
 80119f4:	d10d      	bne.n	8011a12 <USB_HC_Halt+0x82>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10a      	bne.n	8011a12 <USB_HC_Halt+0x82>
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d005      	beq.n	8011a0e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	d002      	beq.n	8011a0e <USB_HC_Halt+0x7e>
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	2b03      	cmp	r3, #3
 8011a0c:	d101      	bne.n	8011a12 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	e0d8      	b.n	8011bc4 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d002      	beq.n	8011a1e <USB_HC_Halt+0x8e>
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	2b02      	cmp	r3, #2
 8011a1c:	d173      	bne.n	8011b06 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	015a      	lsls	r2, r3, #5
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	4413      	add	r3, r2
 8011a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	69ba      	ldr	r2, [r7, #24]
 8011a2e:	0151      	lsls	r1, r2, #5
 8011a30:	69fa      	ldr	r2, [r7, #28]
 8011a32:	440a      	add	r2, r1
 8011a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011a3c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	689b      	ldr	r3, [r3, #8]
 8011a42:	f003 0320 	and.w	r3, r3, #32
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d14a      	bne.n	8011ae0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a4e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d133      	bne.n	8011abe <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	015a      	lsls	r2, r3, #5
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	69ba      	ldr	r2, [r7, #24]
 8011a66:	0151      	lsls	r1, r2, #5
 8011a68:	69fa      	ldr	r2, [r7, #28]
 8011a6a:	440a      	add	r2, r1
 8011a6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	015a      	lsls	r2, r3, #5
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	69ba      	ldr	r2, [r7, #24]
 8011a86:	0151      	lsls	r1, r2, #5
 8011a88:	69fa      	ldr	r2, [r7, #28]
 8011a8a:	440a      	add	r2, r1
 8011a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011aa2:	d82e      	bhi.n	8011b02 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011aa4:	69bb      	ldr	r3, [r7, #24]
 8011aa6:	015a      	lsls	r2, r3, #5
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	4413      	add	r3, r2
 8011aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011aba:	d0ec      	beq.n	8011a96 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011abc:	e081      	b.n	8011bc2 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	015a      	lsls	r2, r3, #5
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	69ba      	ldr	r2, [r7, #24]
 8011ace:	0151      	lsls	r1, r2, #5
 8011ad0:	69fa      	ldr	r2, [r7, #28]
 8011ad2:	440a      	add	r2, r1
 8011ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011adc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011ade:	e070      	b.n	8011bc2 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	015a      	lsls	r2, r3, #5
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	69ba      	ldr	r2, [r7, #24]
 8011af0:	0151      	lsls	r1, r2, #5
 8011af2:	69fa      	ldr	r2, [r7, #28]
 8011af4:	440a      	add	r2, r1
 8011af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011afe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011b00:	e05f      	b.n	8011bc2 <USB_HC_Halt+0x232>
            break;
 8011b02:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011b04:	e05d      	b.n	8011bc2 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	015a      	lsls	r2, r3, #5
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	69ba      	ldr	r2, [r7, #24]
 8011b16:	0151      	lsls	r1, r2, #5
 8011b18:	69fa      	ldr	r2, [r7, #28]
 8011b1a:	440a      	add	r2, r1
 8011b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b24:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b2c:	691b      	ldr	r3, [r3, #16]
 8011b2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d133      	bne.n	8011b9e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	015a      	lsls	r2, r3, #5
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	69ba      	ldr	r2, [r7, #24]
 8011b46:	0151      	lsls	r1, r2, #5
 8011b48:	69fa      	ldr	r2, [r7, #28]
 8011b4a:	440a      	add	r2, r1
 8011b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b54:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011b56:	69bb      	ldr	r3, [r7, #24]
 8011b58:	015a      	lsls	r2, r3, #5
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	69ba      	ldr	r2, [r7, #24]
 8011b66:	0151      	lsls	r1, r2, #5
 8011b68:	69fa      	ldr	r2, [r7, #28]
 8011b6a:	440a      	add	r2, r1
 8011b6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011b74:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	3301      	adds	r3, #1
 8011b7a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b82:	d81d      	bhi.n	8011bc0 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011b84:	69bb      	ldr	r3, [r7, #24]
 8011b86:	015a      	lsls	r2, r3, #5
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b9a:	d0ec      	beq.n	8011b76 <USB_HC_Halt+0x1e6>
 8011b9c:	e011      	b.n	8011bc2 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	015a      	lsls	r2, r3, #5
 8011ba2:	69fb      	ldr	r3, [r7, #28]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	69ba      	ldr	r2, [r7, #24]
 8011bae:	0151      	lsls	r1, r2, #5
 8011bb0:	69fa      	ldr	r2, [r7, #28]
 8011bb2:	440a      	add	r2, r1
 8011bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011bb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011bbc:	6013      	str	r3, [r2, #0]
 8011bbe:	e000      	b.n	8011bc2 <USB_HC_Halt+0x232>
          break;
 8011bc0:	bf00      	nop
    }
  }

  return HAL_OK;
 8011bc2:	2300      	movs	r3, #0
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3724      	adds	r7, #36	@ 0x24
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b088      	sub	sp, #32
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011be0:	2300      	movs	r3, #0
 8011be2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f7ff fd7a 	bl	80116de <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011bea:	2110      	movs	r1, #16
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7ff fd87 	bl	8011700 <USB_FlushTxFifo>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7ff fdb1 	bl	8011764 <USB_FlushRxFifo>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d001      	beq.n	8011c0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011c08:	2301      	movs	r3, #1
 8011c0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	61bb      	str	r3, [r7, #24]
 8011c10:	e01f      	b.n	8011c52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	015a      	lsls	r2, r3, #5
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	4413      	add	r3, r2
 8011c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011c30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011c38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	015a      	lsls	r2, r3, #5
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	4413      	add	r3, r2
 8011c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c46:	461a      	mov	r2, r3
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	61bb      	str	r3, [r7, #24]
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	2b0f      	cmp	r3, #15
 8011c56:	d9dc      	bls.n	8011c12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011c58:	2300      	movs	r3, #0
 8011c5a:	61bb      	str	r3, [r7, #24]
 8011c5c:	e034      	b.n	8011cc8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	015a      	lsls	r2, r3, #5
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	4413      	add	r3, r2
 8011c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011c7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011c84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	015a      	lsls	r2, r3, #5
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c92:	461a      	mov	r2, r3
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011ca4:	d80c      	bhi.n	8011cc0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	015a      	lsls	r2, r3, #5
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	4413      	add	r3, r2
 8011cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011cbc:	d0ec      	beq.n	8011c98 <USB_StopHost+0xc8>
 8011cbe:	e000      	b.n	8011cc2 <USB_StopHost+0xf2>
        break;
 8011cc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	61bb      	str	r3, [r7, #24]
 8011cc8:	69bb      	ldr	r3, [r7, #24]
 8011cca:	2b0f      	cmp	r3, #15
 8011ccc:	d9c7      	bls.n	8011c5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011cda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f7ff fce9 	bl	80116bc <USB_EnableGlobalInt>

  return ret;
 8011cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3720      	adds	r7, #32
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011cf8:	4904      	ldr	r1, [pc, #16]	@ (8011d0c <MX_FATFS_Init+0x18>)
 8011cfa:	4805      	ldr	r0, [pc, #20]	@ (8011d10 <MX_FATFS_Init+0x1c>)
 8011cfc:	f003 f91e 	bl	8014f3c <FATFS_LinkDriver>
 8011d00:	4603      	mov	r3, r0
 8011d02:	461a      	mov	r2, r3
 8011d04:	4b03      	ldr	r3, [pc, #12]	@ (8011d14 <MX_FATFS_Init+0x20>)
 8011d06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011d08:	bf00      	nop
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	20001800 	.word	0x20001800
 8011d10:	0801ca14 	.word	0x0801ca14
 8011d14:	200017fc 	.word	0x200017fc

08011d18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011d1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011d32:	f000 f879 	bl	8011e28 <BSP_SD_IsDetected>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d001      	beq.n	8011d40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	e012      	b.n	8011d66 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011d40:	480b      	ldr	r0, [pc, #44]	@ (8011d70 <BSP_SD_Init+0x48>)
 8011d42:	f7fa feed 	bl	800cb20 <HAL_SD_Init>
 8011d46:	4603      	mov	r3, r0
 8011d48:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011d4a:	79fb      	ldrb	r3, [r7, #7]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d109      	bne.n	8011d64 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011d50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011d54:	4806      	ldr	r0, [pc, #24]	@ (8011d70 <BSP_SD_Init+0x48>)
 8011d56:	f7fb fcc7 	bl	800d6e8 <HAL_SD_ConfigWideBusOperation>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d001      	beq.n	8011d64 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011d60:	2301      	movs	r3, #1
 8011d62:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011d64:	79fb      	ldrb	r3, [r7, #7]
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3708      	adds	r7, #8
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	20000ebc 	.word	0x20000ebc

08011d74 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b088      	sub	sp, #32
 8011d78:	af02      	add	r7, sp, #8
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
 8011d80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011d82:	2300      	movs	r3, #0
 8011d84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	68ba      	ldr	r2, [r7, #8]
 8011d8e:	68f9      	ldr	r1, [r7, #12]
 8011d90:	4806      	ldr	r0, [pc, #24]	@ (8011dac <BSP_SD_ReadBlocks+0x38>)
 8011d92:	f7fa ff75 	bl	800cc80 <HAL_SD_ReadBlocks>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d001      	beq.n	8011da0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3718      	adds	r7, #24
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	20000ebc 	.word	0x20000ebc

08011db0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b088      	sub	sp, #32
 8011db4:	af02      	add	r7, sp, #8
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	68f9      	ldr	r1, [r7, #12]
 8011dcc:	4806      	ldr	r0, [pc, #24]	@ (8011de8 <BSP_SD_WriteBlocks+0x38>)
 8011dce:	f7fb f935 	bl	800d03c <HAL_SD_WriteBlocks>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d001      	beq.n	8011ddc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011dd8:	2301      	movs	r3, #1
 8011dda:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3718      	adds	r7, #24
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	20000ebc 	.word	0x20000ebc

08011dec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011df0:	4805      	ldr	r0, [pc, #20]	@ (8011e08 <BSP_SD_GetCardState+0x1c>)
 8011df2:	f7fb fd13 	bl	800d81c <HAL_SD_GetCardState>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b04      	cmp	r3, #4
 8011dfa:	bf14      	ite	ne
 8011dfc:	2301      	movne	r3, #1
 8011dfe:	2300      	moveq	r3, #0
 8011e00:	b2db      	uxtb	r3, r3
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	20000ebc 	.word	0x20000ebc

08011e0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011e14:	6879      	ldr	r1, [r7, #4]
 8011e16:	4803      	ldr	r0, [pc, #12]	@ (8011e24 <BSP_SD_GetCardInfo+0x18>)
 8011e18:	f7fb fc3a 	bl	800d690 <HAL_SD_GetCardInfo>
}
 8011e1c:	bf00      	nop
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	20000ebc 	.word	0x20000ebc

08011e28 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011e32:	f000 f80b 	bl	8011e4c <BSP_PlatformIsDetected>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d101      	bne.n	8011e40 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011e40:	79fb      	ldrb	r3, [r7, #7]
 8011e42:	b2db      	uxtb	r3, r3
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3708      	adds	r7, #8
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011e52:	2301      	movs	r3, #1
 8011e54:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011e56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011e5a:	4806      	ldr	r0, [pc, #24]	@ (8011e74 <BSP_PlatformIsDetected+0x28>)
 8011e5c:	f7f6 fbac 	bl	80085b8 <HAL_GPIO_ReadPin>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d001      	beq.n	8011e6a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011e66:	2300      	movs	r3, #0
 8011e68:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	40020800 	.word	0x40020800

08011e78 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b087      	sub	sp, #28
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011e8a:	2320      	movs	r3, #32
 8011e8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e8e:	f3bf 8f4f 	dsb	sy
}
 8011e92:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011e94:	e00b      	b.n	8011eae <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011e96:	4a0d      	ldr	r2, [pc, #52]	@ (8011ecc <SCB_InvalidateDCache_by_Addr+0x54>)
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	693a      	ldr	r2, [r7, #16]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011ea6:	697a      	ldr	r2, [r7, #20]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	dcf0      	bgt.n	8011e96 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011eb4:	f3bf 8f4f 	dsb	sy
}
 8011eb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011eba:	f3bf 8f6f 	isb	sy
}
 8011ebe:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011ec0:	bf00      	nop
 8011ec2:	371c      	adds	r7, #28
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr
 8011ecc:	e000ed00 	.word	0xe000ed00

08011ed0 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b087      	sub	sp, #28
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011ee2:	2320      	movs	r3, #32
 8011ee4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011ee6:	f3bf 8f4f 	dsb	sy
}
 8011eea:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011eec:	e00b      	b.n	8011f06 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8011eee:	4a0d      	ldr	r2, [pc, #52]	@ (8011f24 <SCB_CleanDCache_by_Addr+0x54>)
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	693a      	ldr	r2, [r7, #16]
 8011efa:	4413      	add	r3, r2
 8011efc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011efe:	697a      	ldr	r2, [r7, #20]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	dcf0      	bgt.n	8011eee <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011f0c:	f3bf 8f4f 	dsb	sy
}
 8011f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011f12:	f3bf 8f6f 	isb	sy
}
 8011f16:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011f18:	bf00      	nop
 8011f1a:	371c      	adds	r7, #28
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr
 8011f24:	e000ed00 	.word	0xe000ed00

08011f28 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011f30:	f003 f850 	bl	8014fd4 <osKernelSysTick>
 8011f34:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011f36:	e006      	b.n	8011f46 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f38:	f7ff ff58 	bl	8011dec <BSP_SD_GetCardState>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d101      	bne.n	8011f46 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011f42:	2300      	movs	r3, #0
 8011f44:	e009      	b.n	8011f5a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011f46:	f003 f845 	bl	8014fd4 <osKernelSysTick>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	1ad3      	subs	r3, r2, r3
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d8f0      	bhi.n	8011f38 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
	...

08011f64 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011f9c <SD_CheckStatus+0x38>)
 8011f70:	2201      	movs	r2, #1
 8011f72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f74:	f7ff ff3a 	bl	8011dec <BSP_SD_GetCardState>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d107      	bne.n	8011f8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011f7e:	4b07      	ldr	r3, [pc, #28]	@ (8011f9c <SD_CheckStatus+0x38>)
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	b2db      	uxtb	r3, r3
 8011f84:	f023 0301 	bic.w	r3, r3, #1
 8011f88:	b2da      	uxtb	r2, r3
 8011f8a:	4b04      	ldr	r3, [pc, #16]	@ (8011f9c <SD_CheckStatus+0x38>)
 8011f8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011f8e:	4b03      	ldr	r3, [pc, #12]	@ (8011f9c <SD_CheckStatus+0x38>)
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	b2db      	uxtb	r3, r3
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	20000075 	.word	0x20000075

08011fa0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011fa0:	b590      	push	{r4, r7, lr}
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011faa:	4b1d      	ldr	r3, [pc, #116]	@ (8012020 <SD_initialize+0x80>)
 8011fac:	2201      	movs	r2, #1
 8011fae:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011fb0:	f003 f804 	bl	8014fbc <osKernelRunning>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d02b      	beq.n	8012012 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8011fba:	79fb      	ldrb	r3, [r7, #7]
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7ff ffd1 	bl	8011f64 <SD_CheckStatus>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	4b16      	ldr	r3, [pc, #88]	@ (8012020 <SD_initialize+0x80>)
 8011fc8:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011fca:	4b15      	ldr	r3, [pc, #84]	@ (8012020 <SD_initialize+0x80>)
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d01e      	beq.n	8012012 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011fd4:	4b13      	ldr	r3, [pc, #76]	@ (8012024 <SD_initialize+0x84>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d10e      	bne.n	8011ffa <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011fdc:	4b12      	ldr	r3, [pc, #72]	@ (8012028 <SD_initialize+0x88>)
 8011fde:	f107 0408 	add.w	r4, r7, #8
 8011fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011fe8:	f107 0308 	add.w	r3, r7, #8
 8011fec:	2100      	movs	r1, #0
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f003 f860 	bl	80150b4 <osMessageCreate>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8012024 <SD_initialize+0x84>)
 8011ff8:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8012024 <SD_initialize+0x84>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d107      	bne.n	8012012 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8012002:	4b07      	ldr	r3, [pc, #28]	@ (8012020 <SD_initialize+0x80>)
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	b2db      	uxtb	r3, r3
 8012008:	f043 0301 	orr.w	r3, r3, #1
 801200c:	b2da      	uxtb	r2, r3
 801200e:	4b04      	ldr	r3, [pc, #16]	@ (8012020 <SD_initialize+0x80>)
 8012010:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8012012:	4b03      	ldr	r3, [pc, #12]	@ (8012020 <SD_initialize+0x80>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	b2db      	uxtb	r3, r3
}
 8012018:	4618      	mov	r0, r3
 801201a:	371c      	adds	r7, #28
 801201c:	46bd      	mov	sp, r7
 801201e:	bd90      	pop	{r4, r7, pc}
 8012020:	20000075 	.word	0x20000075
 8012024:	20001c40 	.word	0x20001c40
 8012028:	0801c98c 	.word	0x0801c98c

0801202c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	4603      	mov	r3, r0
 8012034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012036:	79fb      	ldrb	r3, [r7, #7]
 8012038:	4618      	mov	r0, r3
 801203a:	f7ff ff93 	bl	8011f64 <SD_CheckStatus>
 801203e:	4603      	mov	r3, r0
}
 8012040:	4618      	mov	r0, r3
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08a      	sub	sp, #40	@ 0x28
 801204c:	af00      	add	r7, sp, #0
 801204e:	60b9      	str	r1, [r7, #8]
 8012050:	607a      	str	r2, [r7, #4]
 8012052:	603b      	str	r3, [r7, #0]
 8012054:	4603      	mov	r3, r0
 8012056:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012058:	2301      	movs	r3, #1
 801205a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801205e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012062:	f7ff ff61 	bl	8011f28 <SD_CheckStatusWithTimeout>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	da02      	bge.n	8012072 <SD_read+0x2a>
  {
    return res;
 801206c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012070:	e051      	b.n	8012116 <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	f003 0303 	and.w	r3, r3, #3
 8012078:	2b00      	cmp	r3, #0
 801207a:	d111      	bne.n	80120a0 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 801207c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012080:	683a      	ldr	r2, [r7, #0]
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	68b8      	ldr	r0, [r7, #8]
 8012086:	f7ff fe75 	bl	8011d74 <BSP_SD_ReadBlocks>
 801208a:	4603      	mov	r3, r0
 801208c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8012090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012094:	2b00      	cmp	r3, #0
 8012096:	d13c      	bne.n	8012112 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8012098:	2300      	movs	r3, #0
 801209a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801209e:	e038      	b.n	8012112 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 80120a0:	2300      	movs	r3, #0
 80120a2:	623b      	str	r3, [r7, #32]
 80120a4:	e024      	b.n	80120f0 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 80120a6:	6879      	ldr	r1, [r7, #4]
 80120a8:	1c4b      	adds	r3, r1, #1
 80120aa:	607b      	str	r3, [r7, #4]
 80120ac:	f247 5330 	movw	r3, #30000	@ 0x7530
 80120b0:	2201      	movs	r2, #1
 80120b2:	481b      	ldr	r0, [pc, #108]	@ (8012120 <SD_read+0xd8>)
 80120b4:	f7ff fe5e 	bl	8011d74 <BSP_SD_ReadBlocks>
 80120b8:	4603      	mov	r3, r0
 80120ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 80120be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d119      	bne.n	80120fa <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 80120c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80120ca:	4815      	ldr	r0, [pc, #84]	@ (8012120 <SD_read+0xd8>)
 80120cc:	f7ff fed4 	bl	8011e78 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	4a13      	ldr	r2, [pc, #76]	@ (8012120 <SD_read+0xd8>)
 80120d4:	4618      	mov	r0, r3
 80120d6:	4611      	mov	r1, r2
 80120d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80120dc:	461a      	mov	r2, r3
 80120de:	f005 fec2 	bl	8017e66 <memcpy>
          buff += BLOCKSIZE;
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80120e8:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	3301      	adds	r3, #1
 80120ee:	623b      	str	r3, [r7, #32]
 80120f0:	6a3b      	ldr	r3, [r7, #32]
 80120f2:	683a      	ldr	r2, [r7, #0]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d8d6      	bhi.n	80120a6 <SD_read+0x5e>
 80120f8:	e000      	b.n	80120fc <SD_read+0xb4>
        }
        else
        {
          break;
 80120fa:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	683a      	ldr	r2, [r7, #0]
 8012100:	429a      	cmp	r2, r3
 8012102:	d106      	bne.n	8012112 <SD_read+0xca>
 8012104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012108:	2b00      	cmp	r3, #0
 801210a:	d102      	bne.n	8012112 <SD_read+0xca>
        res = RES_OK;
 801210c:	2300      	movs	r3, #0
 801210e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 8012112:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8012116:	4618      	mov	r0, r3
 8012118:	3728      	adds	r7, #40	@ 0x28
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	20001a40 	.word	0x20001a40

08012124 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b08c      	sub	sp, #48	@ 0x30
 8012128:	af00      	add	r7, sp, #0
 801212a:	60b9      	str	r1, [r7, #8]
 801212c:	607a      	str	r2, [r7, #4]
 801212e:	603b      	str	r3, [r7, #0]
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012134:	2301      	movs	r3, #1
 8012136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801213a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801213e:	f7ff fef3 	bl	8011f28 <SD_CheckStatusWithTimeout>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	da02      	bge.n	801214e <SD_write+0x2a>
  {
    return res;
 8012148:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801214c:	e082      	b.n	8012254 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	f003 0303 	and.w	r3, r3, #3
 8012154:	2b00      	cmp	r3, #0
 8012156:	d17b      	bne.n	8012250 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	f023 031f 	bic.w	r3, r3, #31
 801215e:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8012160:	6a38      	ldr	r0, [r7, #32]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	025a      	lsls	r2, r3, #9
 8012166:	68b9      	ldr	r1, [r7, #8]
 8012168:	6a3b      	ldr	r3, [r7, #32]
 801216a:	1acb      	subs	r3, r1, r3
 801216c:	4413      	add	r3, r2
 801216e:	4619      	mov	r1, r3
 8012170:	f7ff feae 	bl	8011ed0 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8012174:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012178:	683a      	ldr	r2, [r7, #0]
 801217a:	6879      	ldr	r1, [r7, #4]
 801217c:	68b8      	ldr	r0, [r7, #8]
 801217e:	f7ff fe17 	bl	8011db0 <BSP_SD_WriteBlocks>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d103      	bne.n	8012190 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8012188:	2300      	movs	r3, #0
 801218a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801218e:	e05f      	b.n	8012250 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012190:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012194:	4831      	ldr	r0, [pc, #196]	@ (801225c <SD_write+0x138>)
 8012196:	f7ff fe6f 	bl	8011e78 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 801219a:	2300      	movs	r3, #0
 801219c:	627b      	str	r3, [r7, #36]	@ 0x24
 801219e:	e045      	b.n	801222c <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 80121a0:	4a2e      	ldr	r2, [pc, #184]	@ (801225c <SD_write+0x138>)
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	4610      	mov	r0, r2
 80121a6:	4619      	mov	r1, r3
 80121a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80121ac:	461a      	mov	r2, r3
 80121ae:	f005 fe5a 	bl	8017e66 <memcpy>
        buff += BLOCKSIZE;
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80121b8:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 80121ba:	6879      	ldr	r1, [r7, #4]
 80121bc:	1c4b      	adds	r3, r1, #1
 80121be:	607b      	str	r3, [r7, #4]
 80121c0:	f247 5330 	movw	r3, #30000	@ 0x7530
 80121c4:	2201      	movs	r2, #1
 80121c6:	4825      	ldr	r0, [pc, #148]	@ (801225c <SD_write+0x138>)
 80121c8:	f7ff fdf2 	bl	8011db0 <BSP_SD_WriteBlocks>
 80121cc:	4603      	mov	r3, r0
 80121ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 80121d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d12f      	bne.n	8012236 <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80121d6:	4b22      	ldr	r3, [pc, #136]	@ (8012260 <SD_write+0x13c>)
 80121d8:	6819      	ldr	r1, [r3, #0]
 80121da:	f107 0310 	add.w	r3, r7, #16
 80121de:	f247 5230 	movw	r2, #30000	@ 0x7530
 80121e2:	4618      	mov	r0, r3
 80121e4:	f002 ffce 	bl	8015184 <osMessageGet>

          if (event.status == osEventMessage)
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	2b10      	cmp	r3, #16
 80121ec:	d11b      	bne.n	8012226 <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d118      	bne.n	8012226 <SD_write+0x102>
            {
              timer = osKernelSysTick();
 80121f4:	f002 feee 	bl	8014fd4 <osKernelSysTick>
 80121f8:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 80121fa:	e006      	b.n	801220a <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 80121fc:	f7ff fdf6 	bl	8011dec <BSP_SD_GetCardState>
 8012200:	4603      	mov	r3, r0
 8012202:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 8012204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012206:	2b00      	cmp	r3, #0
 8012208:	d009      	beq.n	801221e <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 801220a:	f002 fee3 	bl	8014fd4 <osKernelSysTick>
 801220e:	4602      	mov	r2, r0
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012218:	4293      	cmp	r3, r2
 801221a:	d9ef      	bls.n	80121fc <SD_write+0xd8>
 801221c:	e000      	b.n	8012220 <SD_write+0xfc>
                  {
                    break;
 801221e:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8012220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012222:	2b00      	cmp	r3, #0
 8012224:	d109      	bne.n	801223a <SD_write+0x116>
      for (i = 0; i < count; i++)
 8012226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012228:	3301      	adds	r3, #1
 801222a:	627b      	str	r3, [r7, #36]	@ 0x24
 801222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801222e:	683a      	ldr	r2, [r7, #0]
 8012230:	429a      	cmp	r2, r3
 8012232:	d8b5      	bhi.n	80121a0 <SD_write+0x7c>
 8012234:	e002      	b.n	801223c <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 8012236:	bf00      	nop
 8012238:	e000      	b.n	801223c <SD_write+0x118>
                  break;
 801223a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 801223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	429a      	cmp	r2, r3
 8012242:	d105      	bne.n	8012250 <SD_write+0x12c>
 8012244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012246:	2b00      	cmp	r3, #0
 8012248:	d102      	bne.n	8012250 <SD_write+0x12c>
        res = RES_OK;
 801224a:	2300      	movs	r3, #0
 801224c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 8012250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012254:	4618      	mov	r0, r3
 8012256:	3730      	adds	r7, #48	@ 0x30
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}
 801225c:	20001a40 	.word	0x20001a40
 8012260:	20001c40 	.word	0x20001c40

08012264 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b08c      	sub	sp, #48	@ 0x30
 8012268:	af00      	add	r7, sp, #0
 801226a:	4603      	mov	r3, r0
 801226c:	603a      	str	r2, [r7, #0]
 801226e:	71fb      	strb	r3, [r7, #7]
 8012270:	460b      	mov	r3, r1
 8012272:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012274:	2301      	movs	r3, #1
 8012276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801227a:	4b25      	ldr	r3, [pc, #148]	@ (8012310 <SD_ioctl+0xac>)
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	b2db      	uxtb	r3, r3
 8012280:	f003 0301 	and.w	r3, r3, #1
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <SD_ioctl+0x28>
 8012288:	2303      	movs	r3, #3
 801228a:	e03c      	b.n	8012306 <SD_ioctl+0xa2>

  switch (cmd)
 801228c:	79bb      	ldrb	r3, [r7, #6]
 801228e:	2b03      	cmp	r3, #3
 8012290:	d834      	bhi.n	80122fc <SD_ioctl+0x98>
 8012292:	a201      	add	r2, pc, #4	@ (adr r2, 8012298 <SD_ioctl+0x34>)
 8012294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012298:	080122a9 	.word	0x080122a9
 801229c:	080122b1 	.word	0x080122b1
 80122a0:	080122c9 	.word	0x080122c9
 80122a4:	080122e3 	.word	0x080122e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80122a8:	2300      	movs	r3, #0
 80122aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122ae:	e028      	b.n	8012302 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80122b0:	f107 030c 	add.w	r3, r7, #12
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff fda9 	bl	8011e0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80122ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80122c0:	2300      	movs	r3, #0
 80122c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122c6:	e01c      	b.n	8012302 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80122c8:	f107 030c 	add.w	r3, r7, #12
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7ff fd9d 	bl	8011e0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80122d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122e0:	e00f      	b.n	8012302 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80122e2:	f107 030c 	add.w	r3, r7, #12
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ff fd90 	bl	8011e0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80122ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ee:	0a5a      	lsrs	r2, r3, #9
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80122f4:	2300      	movs	r3, #0
 80122f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122fa:	e002      	b.n	8012302 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80122fc:	2304      	movs	r3, #4
 80122fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8012302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012306:	4618      	mov	r0, r3
 8012308:	3730      	adds	r7, #48	@ 0x30
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}
 801230e:	bf00      	nop
 8012310:	20000075 	.word	0x20000075

08012314 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012322:	1c5a      	adds	r2, r3, #1
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 f804 	bl	8012338 <USBH_HandleSof>
}
 8012330:	bf00      	nop
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	b2db      	uxtb	r3, r3
 8012346:	2b0b      	cmp	r3, #11
 8012348:	d10a      	bne.n	8012360 <USBH_HandleSof+0x28>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801235a:	699b      	ldr	r3, [r3, #24]
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	4798      	blx	r3
  }
}
 8012360:	bf00      	nop
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2201      	movs	r2, #1
 8012374:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012378:	2300      	movs	r3, #0
 801237a:	2200      	movs	r2, #0
 801237c:	2101      	movs	r1, #1
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 f85b 	bl	801243a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8012384:	bf00      	nop
}
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2201      	movs	r2, #1
 80123a0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80123a4:	bf00      	nop
}
 80123a6:	370c      	adds	r7, #12
 80123a8:	46bd      	mov	sp, r7
 80123aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ae:	4770      	bx	lr

080123b0 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2201      	movs	r2, #1
 80123bc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80123d0:	2300      	movs	r3, #0
 80123d2:	2200      	movs	r2, #0
 80123d4:	2101      	movs	r1, #1
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f82f 	bl	801243a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80123dc:	2300      	movs	r3, #0
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3708      	adds	r7, #8
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b082      	sub	sp, #8
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2201      	movs	r2, #1
 80123f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2200      	movs	r2, #0
 8012402:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f005 f99c 	bl	8017744 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	791b      	ldrb	r3, [r3, #4]
 8012410:	4619      	mov	r1, r3
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f000 f847 	bl	80124a6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	795b      	ldrb	r3, [r3, #5]
 801241c:	4619      	mov	r1, r3
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 f841 	bl	80124a6 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012424:	2300      	movs	r3, #0
 8012426:	2200      	movs	r2, #0
 8012428:	2101      	movs	r1, #1
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 f805 	bl	801243a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012430:	2300      	movs	r3, #0
}
 8012432:	4618      	mov	r0, r3
 8012434:	3708      	adds	r7, #8
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b086      	sub	sp, #24
 801243e:	af00      	add	r7, sp, #0
 8012440:	60f8      	str	r0, [r7, #12]
 8012442:	607a      	str	r2, [r7, #4]
 8012444:	603b      	str	r3, [r7, #0]
 8012446:	460b      	mov	r3, r1
 8012448:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 801244a:	7afa      	ldrb	r2, [r7, #11]
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012458:	4618      	mov	r0, r3
 801245a:	f002 ff07 	bl	801526c <osMessageWaiting>
 801245e:	4603      	mov	r3, r0
 8012460:	f1c3 0310 	rsb	r3, r3, #16
 8012464:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d009      	beq.n	8012480 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	4619      	mov	r1, r3
 801247c:	f002 fe42 	bl	8015104 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012480:	bf00      	nop
 8012482:	3718      	adds	r7, #24
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012490:	2300      	movs	r3, #0
 8012492:	2200      	movs	r2, #0
 8012494:	2101      	movs	r1, #1
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f7ff ffcf 	bl	801243a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}

080124a6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80124a6:	b480      	push	{r7}
 80124a8:	b083      	sub	sp, #12
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
 80124ae:	460b      	mov	r3, r1
 80124b0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80124b2:	78fb      	ldrb	r3, [r7, #3]
 80124b4:	2b0f      	cmp	r3, #15
 80124b6:	d80d      	bhi.n	80124d4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80124b8:	78fb      	ldrb	r3, [r7, #3]
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	33e0      	adds	r3, #224	@ 0xe0
 80124be:	009b      	lsls	r3, r3, #2
 80124c0:	4413      	add	r3, r2
 80124c2:	685a      	ldr	r2, [r3, #4]
 80124c4:	78fb      	ldrb	r3, [r7, #3]
 80124c6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80124ca:	6879      	ldr	r1, [r7, #4]
 80124cc:	33e0      	adds	r3, #224	@ 0xe0
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	440b      	add	r3, r1
 80124d2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr
	...

080124e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	4603      	mov	r3, r0
 80124ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80124ee:	79fb      	ldrb	r3, [r7, #7]
 80124f0:	4a08      	ldr	r2, [pc, #32]	@ (8012514 <disk_status+0x30>)
 80124f2:	009b      	lsls	r3, r3, #2
 80124f4:	4413      	add	r3, r2
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	79fa      	ldrb	r2, [r7, #7]
 80124fc:	4905      	ldr	r1, [pc, #20]	@ (8012514 <disk_status+0x30>)
 80124fe:	440a      	add	r2, r1
 8012500:	7a12      	ldrb	r2, [r2, #8]
 8012502:	4610      	mov	r0, r2
 8012504:	4798      	blx	r3
 8012506:	4603      	mov	r3, r0
 8012508:	73fb      	strb	r3, [r7, #15]
  return stat;
 801250a:	7bfb      	ldrb	r3, [r7, #15]
}
 801250c:	4618      	mov	r0, r3
 801250e:	3710      	adds	r7, #16
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	20001c4c 	.word	0x20001c4c

08012518 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	4603      	mov	r3, r0
 8012520:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012522:	2300      	movs	r3, #0
 8012524:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012526:	79fb      	ldrb	r3, [r7, #7]
 8012528:	4a0d      	ldr	r2, [pc, #52]	@ (8012560 <disk_initialize+0x48>)
 801252a:	5cd3      	ldrb	r3, [r2, r3]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d111      	bne.n	8012554 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	4a0b      	ldr	r2, [pc, #44]	@ (8012560 <disk_initialize+0x48>)
 8012534:	2101      	movs	r1, #1
 8012536:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012538:	79fb      	ldrb	r3, [r7, #7]
 801253a:	4a09      	ldr	r2, [pc, #36]	@ (8012560 <disk_initialize+0x48>)
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	4413      	add	r3, r2
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	79fa      	ldrb	r2, [r7, #7]
 8012546:	4906      	ldr	r1, [pc, #24]	@ (8012560 <disk_initialize+0x48>)
 8012548:	440a      	add	r2, r1
 801254a:	7a12      	ldrb	r2, [r2, #8]
 801254c:	4610      	mov	r0, r2
 801254e:	4798      	blx	r3
 8012550:	4603      	mov	r3, r0
 8012552:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012554:	7bfb      	ldrb	r3, [r7, #15]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3710      	adds	r7, #16
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	20001c4c 	.word	0x20001c4c

08012564 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012564:	b590      	push	{r4, r7, lr}
 8012566:	b087      	sub	sp, #28
 8012568:	af00      	add	r7, sp, #0
 801256a:	60b9      	str	r1, [r7, #8]
 801256c:	607a      	str	r2, [r7, #4]
 801256e:	603b      	str	r3, [r7, #0]
 8012570:	4603      	mov	r3, r0
 8012572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012574:	7bfb      	ldrb	r3, [r7, #15]
 8012576:	4a0a      	ldr	r2, [pc, #40]	@ (80125a0 <disk_read+0x3c>)
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	689c      	ldr	r4, [r3, #8]
 8012580:	7bfb      	ldrb	r3, [r7, #15]
 8012582:	4a07      	ldr	r2, [pc, #28]	@ (80125a0 <disk_read+0x3c>)
 8012584:	4413      	add	r3, r2
 8012586:	7a18      	ldrb	r0, [r3, #8]
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	68b9      	ldr	r1, [r7, #8]
 801258e:	47a0      	blx	r4
 8012590:	4603      	mov	r3, r0
 8012592:	75fb      	strb	r3, [r7, #23]
  return res;
 8012594:	7dfb      	ldrb	r3, [r7, #23]
}
 8012596:	4618      	mov	r0, r3
 8012598:	371c      	adds	r7, #28
 801259a:	46bd      	mov	sp, r7
 801259c:	bd90      	pop	{r4, r7, pc}
 801259e:	bf00      	nop
 80125a0:	20001c4c 	.word	0x20001c4c

080125a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80125a4:	b590      	push	{r4, r7, lr}
 80125a6:	b087      	sub	sp, #28
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60b9      	str	r1, [r7, #8]
 80125ac:	607a      	str	r2, [r7, #4]
 80125ae:	603b      	str	r3, [r7, #0]
 80125b0:	4603      	mov	r3, r0
 80125b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80125b4:	7bfb      	ldrb	r3, [r7, #15]
 80125b6:	4a0a      	ldr	r2, [pc, #40]	@ (80125e0 <disk_write+0x3c>)
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	4413      	add	r3, r2
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	68dc      	ldr	r4, [r3, #12]
 80125c0:	7bfb      	ldrb	r3, [r7, #15]
 80125c2:	4a07      	ldr	r2, [pc, #28]	@ (80125e0 <disk_write+0x3c>)
 80125c4:	4413      	add	r3, r2
 80125c6:	7a18      	ldrb	r0, [r3, #8]
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	68b9      	ldr	r1, [r7, #8]
 80125ce:	47a0      	blx	r4
 80125d0:	4603      	mov	r3, r0
 80125d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80125d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	371c      	adds	r7, #28
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd90      	pop	{r4, r7, pc}
 80125de:	bf00      	nop
 80125e0:	20001c4c 	.word	0x20001c4c

080125e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	603a      	str	r2, [r7, #0]
 80125ee:	71fb      	strb	r3, [r7, #7]
 80125f0:	460b      	mov	r3, r1
 80125f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80125f4:	79fb      	ldrb	r3, [r7, #7]
 80125f6:	4a09      	ldr	r2, [pc, #36]	@ (801261c <disk_ioctl+0x38>)
 80125f8:	009b      	lsls	r3, r3, #2
 80125fa:	4413      	add	r3, r2
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	691b      	ldr	r3, [r3, #16]
 8012600:	79fa      	ldrb	r2, [r7, #7]
 8012602:	4906      	ldr	r1, [pc, #24]	@ (801261c <disk_ioctl+0x38>)
 8012604:	440a      	add	r2, r1
 8012606:	7a10      	ldrb	r0, [r2, #8]
 8012608:	79b9      	ldrb	r1, [r7, #6]
 801260a:	683a      	ldr	r2, [r7, #0]
 801260c:	4798      	blx	r3
 801260e:	4603      	mov	r3, r0
 8012610:	73fb      	strb	r3, [r7, #15]
  return res;
 8012612:	7bfb      	ldrb	r3, [r7, #15]
}
 8012614:	4618      	mov	r0, r3
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	20001c4c 	.word	0x20001c4c

08012620 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012620:	b480      	push	{r7}
 8012622:	b085      	sub	sp, #20
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	3301      	adds	r3, #1
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012634:	021b      	lsls	r3, r3, #8
 8012636:	b21a      	sxth	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	b21b      	sxth	r3, r3
 801263e:	4313      	orrs	r3, r2
 8012640:	b21b      	sxth	r3, r3
 8012642:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012644:	89fb      	ldrh	r3, [r7, #14]
}
 8012646:	4618      	mov	r0, r3
 8012648:	3714      	adds	r7, #20
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012652:	b480      	push	{r7}
 8012654:	b085      	sub	sp, #20
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	3303      	adds	r3, #3
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	021b      	lsls	r3, r3, #8
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	3202      	adds	r2, #2
 801266a:	7812      	ldrb	r2, [r2, #0]
 801266c:	4313      	orrs	r3, r2
 801266e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	021b      	lsls	r3, r3, #8
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	3201      	adds	r2, #1
 8012678:	7812      	ldrb	r2, [r2, #0]
 801267a:	4313      	orrs	r3, r2
 801267c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	021b      	lsls	r3, r3, #8
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	7812      	ldrb	r2, [r2, #0]
 8012686:	4313      	orrs	r3, r2
 8012688:	60fb      	str	r3, [r7, #12]
	return rv;
 801268a:	68fb      	ldr	r3, [r7, #12]
}
 801268c:	4618      	mov	r0, r3
 801268e:	3714      	adds	r7, #20
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr

08012698 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	1c5a      	adds	r2, r3, #1
 80126a8:	607a      	str	r2, [r7, #4]
 80126aa:	887a      	ldrh	r2, [r7, #2]
 80126ac:	b2d2      	uxtb	r2, r2
 80126ae:	701a      	strb	r2, [r3, #0]
 80126b0:	887b      	ldrh	r3, [r7, #2]
 80126b2:	0a1b      	lsrs	r3, r3, #8
 80126b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	1c5a      	adds	r2, r3, #1
 80126ba:	607a      	str	r2, [r7, #4]
 80126bc:	887a      	ldrh	r2, [r7, #2]
 80126be:	b2d2      	uxtb	r2, r2
 80126c0:	701a      	strb	r2, [r3, #0]
}
 80126c2:	bf00      	nop
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr

080126ce <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80126ce:	b480      	push	{r7}
 80126d0:	b083      	sub	sp, #12
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
 80126d6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	1c5a      	adds	r2, r3, #1
 80126dc:	607a      	str	r2, [r7, #4]
 80126de:	683a      	ldr	r2, [r7, #0]
 80126e0:	b2d2      	uxtb	r2, r2
 80126e2:	701a      	strb	r2, [r3, #0]
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	0a1b      	lsrs	r3, r3, #8
 80126e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	1c5a      	adds	r2, r3, #1
 80126ee:	607a      	str	r2, [r7, #4]
 80126f0:	683a      	ldr	r2, [r7, #0]
 80126f2:	b2d2      	uxtb	r2, r2
 80126f4:	701a      	strb	r2, [r3, #0]
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	0a1b      	lsrs	r3, r3, #8
 80126fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	1c5a      	adds	r2, r3, #1
 8012700:	607a      	str	r2, [r7, #4]
 8012702:	683a      	ldr	r2, [r7, #0]
 8012704:	b2d2      	uxtb	r2, r2
 8012706:	701a      	strb	r2, [r3, #0]
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	0a1b      	lsrs	r3, r3, #8
 801270c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	1c5a      	adds	r2, r3, #1
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	683a      	ldr	r2, [r7, #0]
 8012716:	b2d2      	uxtb	r2, r2
 8012718:	701a      	strb	r2, [r3, #0]
}
 801271a:	bf00      	nop
 801271c:	370c      	adds	r7, #12
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr

08012726 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012726:	b480      	push	{r7}
 8012728:	b087      	sub	sp, #28
 801272a:	af00      	add	r7, sp, #0
 801272c:	60f8      	str	r0, [r7, #12]
 801272e:	60b9      	str	r1, [r7, #8]
 8012730:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00d      	beq.n	801275c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012740:	693a      	ldr	r2, [r7, #16]
 8012742:	1c53      	adds	r3, r2, #1
 8012744:	613b      	str	r3, [r7, #16]
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	1c59      	adds	r1, r3, #1
 801274a:	6179      	str	r1, [r7, #20]
 801274c:	7812      	ldrb	r2, [r2, #0]
 801274e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	3b01      	subs	r3, #1
 8012754:	607b      	str	r3, [r7, #4]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d1f1      	bne.n	8012740 <mem_cpy+0x1a>
	}
}
 801275c:	bf00      	nop
 801275e:	371c      	adds	r7, #28
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012768:	b480      	push	{r7}
 801276a:	b087      	sub	sp, #28
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	1c5a      	adds	r2, r3, #1
 801277c:	617a      	str	r2, [r7, #20]
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3b01      	subs	r3, #1
 8012788:	607b      	str	r3, [r7, #4]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d1f3      	bne.n	8012778 <mem_set+0x10>
}
 8012790:	bf00      	nop
 8012792:	bf00      	nop
 8012794:	371c      	adds	r7, #28
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr

0801279e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801279e:	b480      	push	{r7}
 80127a0:	b089      	sub	sp, #36	@ 0x24
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	60f8      	str	r0, [r7, #12]
 80127a6:	60b9      	str	r1, [r7, #8]
 80127a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	61fb      	str	r3, [r7, #28]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80127b2:	2300      	movs	r3, #0
 80127b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	61fa      	str	r2, [r7, #28]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	4619      	mov	r1, r3
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	1c5a      	adds	r2, r3, #1
 80127c4:	61ba      	str	r2, [r7, #24]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	1acb      	subs	r3, r1, r3
 80127ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	3b01      	subs	r3, #1
 80127d0:	607b      	str	r3, [r7, #4]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d002      	beq.n	80127de <mem_cmp+0x40>
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d0eb      	beq.n	80127b6 <mem_cmp+0x18>

	return r;
 80127de:	697b      	ldr	r3, [r7, #20]
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3724      	adds	r7, #36	@ 0x24
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr

080127ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80127f6:	e002      	b.n	80127fe <chk_chr+0x12>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	3301      	adds	r3, #1
 80127fc:	607b      	str	r3, [r7, #4]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d005      	beq.n	8012812 <chk_chr+0x26>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	4293      	cmp	r3, r2
 8012810:	d1f2      	bne.n	80127f8 <chk_chr+0xc>
	return *str;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	781b      	ldrb	r3, [r3, #0]
}
 8012816:	4618      	mov	r0, r3
 8012818:	370c      	adds	r7, #12
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr

08012822 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012822:	b580      	push	{r7, lr}
 8012824:	b086      	sub	sp, #24
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801282a:	2300      	movs	r3, #0
 801282c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	78db      	ldrb	r3, [r3, #3]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d034      	beq.n	80128a0 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801283a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	7858      	ldrb	r0, [r3, #1]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012846:	2301      	movs	r3, #1
 8012848:	697a      	ldr	r2, [r7, #20]
 801284a:	f7ff feab 	bl	80125a4 <disk_write>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d002      	beq.n	801285a <sync_window+0x38>
			res = FR_DISK_ERR;
 8012854:	2301      	movs	r3, #1
 8012856:	73fb      	strb	r3, [r7, #15]
 8012858:	e022      	b.n	80128a0 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2200      	movs	r2, #0
 801285e:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6a1b      	ldr	r3, [r3, #32]
 8012864:	697a      	ldr	r2, [r7, #20]
 8012866:	1ad2      	subs	r2, r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	699b      	ldr	r3, [r3, #24]
 801286c:	429a      	cmp	r2, r3
 801286e:	d217      	bcs.n	80128a0 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	789b      	ldrb	r3, [r3, #2]
 8012874:	613b      	str	r3, [r7, #16]
 8012876:	e010      	b.n	801289a <sync_window+0x78>
					wsect += fs->fsize;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	699b      	ldr	r3, [r3, #24]
 801287c:	697a      	ldr	r2, [r7, #20]
 801287e:	4413      	add	r3, r2
 8012880:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	7858      	ldrb	r0, [r3, #1]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801288c:	2301      	movs	r3, #1
 801288e:	697a      	ldr	r2, [r7, #20]
 8012890:	f7ff fe88 	bl	80125a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	3b01      	subs	r3, #1
 8012898:	613b      	str	r3, [r7, #16]
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d8eb      	bhi.n	8012878 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80128a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3718      	adds	r7, #24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}

080128aa <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128aa:	b580      	push	{r7, lr}
 80128ac:	b084      	sub	sp, #16
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80128b4:	2300      	movs	r3, #0
 80128b6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128bc:	683a      	ldr	r2, [r7, #0]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d01b      	beq.n	80128fa <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f7ff ffad 	bl	8012822 <sync_window>
 80128c8:	4603      	mov	r3, r0
 80128ca:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80128cc:	7bfb      	ldrb	r3, [r7, #15]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d113      	bne.n	80128fa <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	7858      	ldrb	r0, [r3, #1]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80128dc:	2301      	movs	r3, #1
 80128de:	683a      	ldr	r2, [r7, #0]
 80128e0:	f7ff fe40 	bl	8012564 <disk_read>
 80128e4:	4603      	mov	r3, r0
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d004      	beq.n	80128f4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80128ea:	f04f 33ff 	mov.w	r3, #4294967295
 80128ee:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128f0:	2301      	movs	r3, #1
 80128f2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	683a      	ldr	r2, [r7, #0]
 80128f8:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80128fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff ff88 	bl	8012822 <sync_window>
 8012912:	4603      	mov	r3, r0
 8012914:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012916:	7bfb      	ldrb	r3, [r7, #15]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d158      	bne.n	80129ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b03      	cmp	r3, #3
 8012922:	d148      	bne.n	80129b6 <sync_fs+0xb2>
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	791b      	ldrb	r3, [r3, #4]
 8012928:	2b01      	cmp	r3, #1
 801292a:	d144      	bne.n	80129b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	3330      	adds	r3, #48	@ 0x30
 8012930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012934:	2100      	movs	r1, #0
 8012936:	4618      	mov	r0, r3
 8012938:	f7ff ff16 	bl	8012768 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3330      	adds	r3, #48	@ 0x30
 8012940:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012944:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff fea5 	bl	8012698 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3330      	adds	r3, #48	@ 0x30
 8012952:	4921      	ldr	r1, [pc, #132]	@ (80129d8 <sync_fs+0xd4>)
 8012954:	4618      	mov	r0, r3
 8012956:	f7ff feba 	bl	80126ce <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3330      	adds	r3, #48	@ 0x30
 801295e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012962:	491e      	ldr	r1, [pc, #120]	@ (80129dc <sync_fs+0xd8>)
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff feb2 	bl	80126ce <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	3330      	adds	r3, #48	@ 0x30
 801296e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	691b      	ldr	r3, [r3, #16]
 8012976:	4619      	mov	r1, r3
 8012978:	4610      	mov	r0, r2
 801297a:	f7ff fea8 	bl	80126ce <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	3330      	adds	r3, #48	@ 0x30
 8012982:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	4619      	mov	r1, r3
 801298c:	4610      	mov	r0, r2
 801298e:	f7ff fe9e 	bl	80126ce <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	69db      	ldr	r3, [r3, #28]
 8012996:	1c5a      	adds	r2, r3, #1
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	7858      	ldrb	r0, [r3, #1]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129aa:	2301      	movs	r3, #1
 80129ac:	f7ff fdfa 	bl	80125a4 <disk_write>
			fs->fsi_flag = 0;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	785b      	ldrb	r3, [r3, #1]
 80129ba:	2200      	movs	r2, #0
 80129bc:	2100      	movs	r1, #0
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff fe10 	bl	80125e4 <disk_ioctl>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d001      	beq.n	80129ce <sync_fs+0xca>
 80129ca:	2301      	movs	r3, #1
 80129cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	41615252 	.word	0x41615252
 80129dc:	61417272 	.word	0x61417272

080129e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	3b02      	subs	r3, #2
 80129ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	695b      	ldr	r3, [r3, #20]
 80129f4:	3b02      	subs	r3, #2
 80129f6:	683a      	ldr	r2, [r7, #0]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d301      	bcc.n	8012a00 <clust2sect+0x20>
 80129fc:	2300      	movs	r3, #0
 80129fe:	e008      	b.n	8012a12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	895b      	ldrh	r3, [r3, #10]
 8012a04:	461a      	mov	r2, r3
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	fb03 f202 	mul.w	r2, r3, r2
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a10:	4413      	add	r3, r2
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr

08012a1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a1e:	b580      	push	{r7, lr}
 8012a20:	b086      	sub	sp, #24
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
 8012a26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d904      	bls.n	8012a3e <get_fat+0x20>
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	695b      	ldr	r3, [r3, #20]
 8012a38:	683a      	ldr	r2, [r7, #0]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d302      	bcc.n	8012a44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a3e:	2301      	movs	r3, #1
 8012a40:	617b      	str	r3, [r7, #20]
 8012a42:	e08e      	b.n	8012b62 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a44:	f04f 33ff 	mov.w	r3, #4294967295
 8012a48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	2b03      	cmp	r3, #3
 8012a50:	d061      	beq.n	8012b16 <get_fat+0xf8>
 8012a52:	2b03      	cmp	r3, #3
 8012a54:	dc7b      	bgt.n	8012b4e <get_fat+0x130>
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d002      	beq.n	8012a60 <get_fat+0x42>
 8012a5a:	2b02      	cmp	r3, #2
 8012a5c:	d041      	beq.n	8012ae2 <get_fat+0xc4>
 8012a5e:	e076      	b.n	8012b4e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	60fb      	str	r3, [r7, #12]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	085b      	lsrs	r3, r3, #1
 8012a68:	68fa      	ldr	r2, [r7, #12]
 8012a6a:	4413      	add	r3, r2
 8012a6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	6a1a      	ldr	r2, [r3, #32]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	0a5b      	lsrs	r3, r3, #9
 8012a76:	4413      	add	r3, r2
 8012a78:	4619      	mov	r1, r3
 8012a7a:	6938      	ldr	r0, [r7, #16]
 8012a7c:	f7ff ff15 	bl	80128aa <move_window>
 8012a80:	4603      	mov	r3, r0
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d166      	bne.n	8012b54 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	1c5a      	adds	r2, r3, #1
 8012a8a:	60fa      	str	r2, [r7, #12]
 8012a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a90:	693a      	ldr	r2, [r7, #16]
 8012a92:	4413      	add	r3, r2
 8012a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	6a1a      	ldr	r2, [r3, #32]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	0a5b      	lsrs	r3, r3, #9
 8012aa2:	4413      	add	r3, r2
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	6938      	ldr	r0, [r7, #16]
 8012aa8:	f7ff feff 	bl	80128aa <move_window>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d152      	bne.n	8012b58 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab8:	693a      	ldr	r2, [r7, #16]
 8012aba:	4413      	add	r3, r2
 8012abc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ac0:	021b      	lsls	r3, r3, #8
 8012ac2:	68ba      	ldr	r2, [r7, #8]
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	f003 0301 	and.w	r3, r3, #1
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <get_fat+0xba>
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	091b      	lsrs	r3, r3, #4
 8012ad6:	e002      	b.n	8012ade <get_fat+0xc0>
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ade:	617b      	str	r3, [r7, #20]
			break;
 8012ae0:	e03f      	b.n	8012b62 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	6a1a      	ldr	r2, [r3, #32]
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	0a1b      	lsrs	r3, r3, #8
 8012aea:	4413      	add	r3, r2
 8012aec:	4619      	mov	r1, r3
 8012aee:	6938      	ldr	r0, [r7, #16]
 8012af0:	f7ff fedb 	bl	80128aa <move_window>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d130      	bne.n	8012b5c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	005b      	lsls	r3, r3, #1
 8012b04:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b08:	4413      	add	r3, r2
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7ff fd88 	bl	8012620 <ld_word>
 8012b10:	4603      	mov	r3, r0
 8012b12:	617b      	str	r3, [r7, #20]
			break;
 8012b14:	e025      	b.n	8012b62 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	6a1a      	ldr	r2, [r3, #32]
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	09db      	lsrs	r3, r3, #7
 8012b1e:	4413      	add	r3, r2
 8012b20:	4619      	mov	r1, r3
 8012b22:	6938      	ldr	r0, [r7, #16]
 8012b24:	f7ff fec1 	bl	80128aa <move_window>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d118      	bne.n	8012b60 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	009b      	lsls	r3, r3, #2
 8012b38:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b3c:	4413      	add	r3, r2
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7ff fd87 	bl	8012652 <ld_dword>
 8012b44:	4603      	mov	r3, r0
 8012b46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012b4a:	617b      	str	r3, [r7, #20]
			break;
 8012b4c:	e009      	b.n	8012b62 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b4e:	2301      	movs	r3, #1
 8012b50:	617b      	str	r3, [r7, #20]
 8012b52:	e006      	b.n	8012b62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b54:	bf00      	nop
 8012b56:	e004      	b.n	8012b62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b58:	bf00      	nop
 8012b5a:	e002      	b.n	8012b62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b5c:	bf00      	nop
 8012b5e:	e000      	b.n	8012b62 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b60:	bf00      	nop
		}
	}

	return val;
 8012b62:	697b      	ldr	r3, [r7, #20]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3718      	adds	r7, #24
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b6c:	b590      	push	{r4, r7, lr}
 8012b6e:	b089      	sub	sp, #36	@ 0x24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b78:	2302      	movs	r3, #2
 8012b7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	2b01      	cmp	r3, #1
 8012b80:	f240 80d9 	bls.w	8012d36 <put_fat+0x1ca>
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	695b      	ldr	r3, [r3, #20]
 8012b88:	68ba      	ldr	r2, [r7, #8]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	f080 80d3 	bcs.w	8012d36 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	2b03      	cmp	r3, #3
 8012b96:	f000 8096 	beq.w	8012cc6 <put_fat+0x15a>
 8012b9a:	2b03      	cmp	r3, #3
 8012b9c:	f300 80cb 	bgt.w	8012d36 <put_fat+0x1ca>
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d002      	beq.n	8012baa <put_fat+0x3e>
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d06e      	beq.n	8012c86 <put_fat+0x11a>
 8012ba8:	e0c5      	b.n	8012d36 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	61bb      	str	r3, [r7, #24]
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	085b      	lsrs	r3, r3, #1
 8012bb2:	69ba      	ldr	r2, [r7, #24]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	6a1a      	ldr	r2, [r3, #32]
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	0a5b      	lsrs	r3, r3, #9
 8012bc0:	4413      	add	r3, r2
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	f7ff fe70 	bl	80128aa <move_window>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bce:	7ffb      	ldrb	r3, [r7, #31]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f040 80a9 	bne.w	8012d28 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	1c59      	adds	r1, r3, #1
 8012be0:	61b9      	str	r1, [r7, #24]
 8012be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012be6:	4413      	add	r3, r2
 8012be8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	f003 0301 	and.w	r3, r3, #1
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00d      	beq.n	8012c10 <put_fat+0xa4>
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	b25b      	sxtb	r3, r3
 8012bfa:	f003 030f 	and.w	r3, r3, #15
 8012bfe:	b25a      	sxtb	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	b25b      	sxtb	r3, r3
 8012c04:	011b      	lsls	r3, r3, #4
 8012c06:	b25b      	sxtb	r3, r3
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	b25b      	sxtb	r3, r3
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	e001      	b.n	8012c14 <put_fat+0xa8>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	697a      	ldr	r2, [r7, #20]
 8012c16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6a1a      	ldr	r2, [r3, #32]
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	0a5b      	lsrs	r3, r3, #9
 8012c26:	4413      	add	r3, r2
 8012c28:	4619      	mov	r1, r3
 8012c2a:	68f8      	ldr	r0, [r7, #12]
 8012c2c:	f7ff fe3d 	bl	80128aa <move_window>
 8012c30:	4603      	mov	r3, r0
 8012c32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c34:	7ffb      	ldrb	r3, [r7, #31]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d178      	bne.n	8012d2c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c46:	4413      	add	r3, r2
 8012c48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d003      	beq.n	8012c5c <put_fat+0xf0>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	091b      	lsrs	r3, r3, #4
 8012c58:	b2db      	uxtb	r3, r3
 8012c5a:	e00e      	b.n	8012c7a <put_fat+0x10e>
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	b25b      	sxtb	r3, r3
 8012c62:	f023 030f 	bic.w	r3, r3, #15
 8012c66:	b25a      	sxtb	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	0a1b      	lsrs	r3, r3, #8
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	f003 030f 	and.w	r3, r3, #15
 8012c72:	b25b      	sxtb	r3, r3
 8012c74:	4313      	orrs	r3, r2
 8012c76:	b25b      	sxtb	r3, r3
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	697a      	ldr	r2, [r7, #20]
 8012c7c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	2201      	movs	r2, #1
 8012c82:	70da      	strb	r2, [r3, #3]
			break;
 8012c84:	e057      	b.n	8012d36 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	6a1a      	ldr	r2, [r3, #32]
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	0a1b      	lsrs	r3, r3, #8
 8012c8e:	4413      	add	r3, r2
 8012c90:	4619      	mov	r1, r3
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f7ff fe09 	bl	80128aa <move_window>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c9c:	7ffb      	ldrb	r3, [r7, #31]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d146      	bne.n	8012d30 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	005b      	lsls	r3, r3, #1
 8012cac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012cb0:	4413      	add	r3, r2
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	b292      	uxth	r2, r2
 8012cb6:	4611      	mov	r1, r2
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7ff fced 	bl	8012698 <st_word>
			fs->wflag = 1;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	70da      	strb	r2, [r3, #3]
			break;
 8012cc4:	e037      	b.n	8012d36 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	6a1a      	ldr	r2, [r3, #32]
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	09db      	lsrs	r3, r3, #7
 8012cce:	4413      	add	r3, r2
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7ff fde9 	bl	80128aa <move_window>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cdc:	7ffb      	ldrb	r3, [r7, #31]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d128      	bne.n	8012d34 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012cf6:	4413      	add	r3, r2
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7ff fcaa 	bl	8012652 <ld_dword>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012d04:	4323      	orrs	r3, r4
 8012d06:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d16:	4413      	add	r3, r2
 8012d18:	6879      	ldr	r1, [r7, #4]
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7ff fcd7 	bl	80126ce <st_dword>
			fs->wflag = 1;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2201      	movs	r2, #1
 8012d24:	70da      	strb	r2, [r3, #3]
			break;
 8012d26:	e006      	b.n	8012d36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d28:	bf00      	nop
 8012d2a:	e004      	b.n	8012d36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d2c:	bf00      	nop
 8012d2e:	e002      	b.n	8012d36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d30:	bf00      	nop
 8012d32:	e000      	b.n	8012d36 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d34:	bf00      	nop
		}
	}
	return res;
 8012d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3724      	adds	r7, #36	@ 0x24
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd90      	pop	{r4, r7, pc}

08012d40 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b088      	sub	sp, #32
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d904      	bls.n	8012d66 <remove_chain+0x26>
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d301      	bcc.n	8012d6a <remove_chain+0x2a>
 8012d66:	2302      	movs	r3, #2
 8012d68:	e04b      	b.n	8012e02 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d00c      	beq.n	8012d8a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d70:	f04f 32ff 	mov.w	r2, #4294967295
 8012d74:	6879      	ldr	r1, [r7, #4]
 8012d76:	69b8      	ldr	r0, [r7, #24]
 8012d78:	f7ff fef8 	bl	8012b6c <put_fat>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d80:	7ffb      	ldrb	r3, [r7, #31]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d001      	beq.n	8012d8a <remove_chain+0x4a>
 8012d86:	7ffb      	ldrb	r3, [r7, #31]
 8012d88:	e03b      	b.n	8012e02 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d8a:	68b9      	ldr	r1, [r7, #8]
 8012d8c:	68f8      	ldr	r0, [r7, #12]
 8012d8e:	f7ff fe46 	bl	8012a1e <get_fat>
 8012d92:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d031      	beq.n	8012dfe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d101      	bne.n	8012da4 <remove_chain+0x64>
 8012da0:	2302      	movs	r3, #2
 8012da2:	e02e      	b.n	8012e02 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012daa:	d101      	bne.n	8012db0 <remove_chain+0x70>
 8012dac:	2301      	movs	r3, #1
 8012dae:	e028      	b.n	8012e02 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012db0:	2200      	movs	r2, #0
 8012db2:	68b9      	ldr	r1, [r7, #8]
 8012db4:	69b8      	ldr	r0, [r7, #24]
 8012db6:	f7ff fed9 	bl	8012b6c <put_fat>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012dbe:	7ffb      	ldrb	r3, [r7, #31]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <remove_chain+0x88>
 8012dc4:	7ffb      	ldrb	r3, [r7, #31]
 8012dc6:	e01c      	b.n	8012e02 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	691a      	ldr	r2, [r3, #16]
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	695b      	ldr	r3, [r3, #20]
 8012dd0:	3b02      	subs	r3, #2
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d20b      	bcs.n	8012dee <remove_chain+0xae>
			fs->free_clst++;
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	691b      	ldr	r3, [r3, #16]
 8012dda:	1c5a      	adds	r2, r3, #1
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012de0:	69bb      	ldr	r3, [r7, #24]
 8012de2:	791b      	ldrb	r3, [r3, #4]
 8012de4:	f043 0301 	orr.w	r3, r3, #1
 8012de8:	b2da      	uxtb	r2, r3
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	68ba      	ldr	r2, [r7, #8]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d3c6      	bcc.n	8012d8a <remove_chain+0x4a>
 8012dfc:	e000      	b.n	8012e00 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012dfe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3720      	adds	r7, #32
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b088      	sub	sp, #32
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
 8012e12:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d10d      	bne.n	8012e3c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d004      	beq.n	8012e36 <create_chain+0x2c>
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	695b      	ldr	r3, [r3, #20]
 8012e30:	69ba      	ldr	r2, [r7, #24]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d31b      	bcc.n	8012e6e <create_chain+0x64>
 8012e36:	2301      	movs	r3, #1
 8012e38:	61bb      	str	r3, [r7, #24]
 8012e3a:	e018      	b.n	8012e6e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012e3c:	6839      	ldr	r1, [r7, #0]
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7ff fded 	bl	8012a1e <get_fat>
 8012e44:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d801      	bhi.n	8012e50 <create_chain+0x46>
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	e070      	b.n	8012f32 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e56:	d101      	bne.n	8012e5c <create_chain+0x52>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	e06a      	b.n	8012f32 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	695b      	ldr	r3, [r3, #20]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d201      	bcs.n	8012e6a <create_chain+0x60>
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	e063      	b.n	8012f32 <create_chain+0x128>
		scl = clst;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	3301      	adds	r3, #1
 8012e76:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	695b      	ldr	r3, [r3, #20]
 8012e7c:	69fa      	ldr	r2, [r7, #28]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d307      	bcc.n	8012e92 <create_chain+0x88>
				ncl = 2;
 8012e82:	2302      	movs	r3, #2
 8012e84:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e86:	69fa      	ldr	r2, [r7, #28]
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d901      	bls.n	8012e92 <create_chain+0x88>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e04f      	b.n	8012f32 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e92:	69f9      	ldr	r1, [r7, #28]
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff fdc2 	bl	8012a1e <get_fat>
 8012e9a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d00e      	beq.n	8012ec0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d003      	beq.n	8012eb0 <create_chain+0xa6>
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eae:	d101      	bne.n	8012eb4 <create_chain+0xaa>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	e03e      	b.n	8012f32 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012eb4:	69fa      	ldr	r2, [r7, #28]
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d1da      	bne.n	8012e72 <create_chain+0x68>
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	e038      	b.n	8012f32 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012ec0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec6:	69f9      	ldr	r1, [r7, #28]
 8012ec8:	6938      	ldr	r0, [r7, #16]
 8012eca:	f7ff fe4f 	bl	8012b6c <put_fat>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d109      	bne.n	8012eec <create_chain+0xe2>
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d006      	beq.n	8012eec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012ede:	69fa      	ldr	r2, [r7, #28]
 8012ee0:	6839      	ldr	r1, [r7, #0]
 8012ee2:	6938      	ldr	r0, [r7, #16]
 8012ee4:	f7ff fe42 	bl	8012b6c <put_fat>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012eec:	7dfb      	ldrb	r3, [r7, #23]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d116      	bne.n	8012f20 <create_chain+0x116>
		fs->last_clst = ncl;
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	69fa      	ldr	r2, [r7, #28]
 8012ef6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	691a      	ldr	r2, [r3, #16]
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	695b      	ldr	r3, [r3, #20]
 8012f00:	3b02      	subs	r3, #2
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d804      	bhi.n	8012f10 <create_chain+0x106>
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	691b      	ldr	r3, [r3, #16]
 8012f0a:	1e5a      	subs	r2, r3, #1
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	791b      	ldrb	r3, [r3, #4]
 8012f14:	f043 0301 	orr.w	r3, r3, #1
 8012f18:	b2da      	uxtb	r2, r3
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	711a      	strb	r2, [r3, #4]
 8012f1e:	e007      	b.n	8012f30 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f20:	7dfb      	ldrb	r3, [r7, #23]
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d102      	bne.n	8012f2c <create_chain+0x122>
 8012f26:	f04f 33ff 	mov.w	r3, #4294967295
 8012f2a:	e000      	b.n	8012f2e <create_chain+0x124>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f30:	69fb      	ldr	r3, [r7, #28]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3720      	adds	r7, #32
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012f3a:	b480      	push	{r7}
 8012f3c:	b087      	sub	sp, #28
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f4e:	3304      	adds	r3, #4
 8012f50:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	0a5b      	lsrs	r3, r3, #9
 8012f56:	68fa      	ldr	r2, [r7, #12]
 8012f58:	8952      	ldrh	r2, [r2, #10]
 8012f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	1d1a      	adds	r2, r3, #4
 8012f64:	613a      	str	r2, [r7, #16]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d101      	bne.n	8012f74 <clmt_clust+0x3a>
 8012f70:	2300      	movs	r3, #0
 8012f72:	e010      	b.n	8012f96 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f74:	697a      	ldr	r2, [r7, #20]
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d307      	bcc.n	8012f8c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f7c:	697a      	ldr	r2, [r7, #20]
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	1ad3      	subs	r3, r2, r3
 8012f82:	617b      	str	r3, [r7, #20]
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	3304      	adds	r3, #4
 8012f88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f8a:	e7e9      	b.n	8012f60 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	4413      	add	r3, r2
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	371c      	adds	r7, #28
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr

08012fa2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b086      	sub	sp, #24
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	6078      	str	r0, [r7, #4]
 8012faa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012fb8:	d204      	bcs.n	8012fc4 <dir_sdi+0x22>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	f003 031f 	and.w	r3, r3, #31
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d001      	beq.n	8012fc8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012fc4:	2302      	movs	r3, #2
 8012fc6:	e063      	b.n	8013090 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	683a      	ldr	r2, [r7, #0]
 8012fcc:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d106      	bne.n	8012fe8 <dir_sdi+0x46>
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	2b02      	cmp	r3, #2
 8012fe0:	d902      	bls.n	8012fe8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10c      	bne.n	8013008 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	095b      	lsrs	r3, r3, #5
 8012ff2:	693a      	ldr	r2, [r7, #16]
 8012ff4:	8912      	ldrh	r2, [r2, #8]
 8012ff6:	4293      	cmp	r3, r2
 8012ff8:	d301      	bcc.n	8012ffe <dir_sdi+0x5c>
 8012ffa:	2302      	movs	r3, #2
 8012ffc:	e048      	b.n	8013090 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	619a      	str	r2, [r3, #24]
 8013006:	e029      	b.n	801305c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	895b      	ldrh	r3, [r3, #10]
 801300c:	025b      	lsls	r3, r3, #9
 801300e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013010:	e019      	b.n	8013046 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6979      	ldr	r1, [r7, #20]
 8013016:	4618      	mov	r0, r3
 8013018:	f7ff fd01 	bl	8012a1e <get_fat>
 801301c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013024:	d101      	bne.n	801302a <dir_sdi+0x88>
 8013026:	2301      	movs	r3, #1
 8013028:	e032      	b.n	8013090 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	2b01      	cmp	r3, #1
 801302e:	d904      	bls.n	801303a <dir_sdi+0x98>
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	695b      	ldr	r3, [r3, #20]
 8013034:	697a      	ldr	r2, [r7, #20]
 8013036:	429a      	cmp	r2, r3
 8013038:	d301      	bcc.n	801303e <dir_sdi+0x9c>
 801303a:	2302      	movs	r3, #2
 801303c:	e028      	b.n	8013090 <dir_sdi+0xee>
			ofs -= csz;
 801303e:	683a      	ldr	r2, [r7, #0]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013046:	683a      	ldr	r2, [r7, #0]
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	429a      	cmp	r2, r3
 801304c:	d2e1      	bcs.n	8013012 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801304e:	6979      	ldr	r1, [r7, #20]
 8013050:	6938      	ldr	r0, [r7, #16]
 8013052:	f7ff fcc5 	bl	80129e0 <clust2sect>
 8013056:	4602      	mov	r2, r0
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	697a      	ldr	r2, [r7, #20]
 8013060:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	699b      	ldr	r3, [r3, #24]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d101      	bne.n	801306e <dir_sdi+0xcc>
 801306a:	2302      	movs	r3, #2
 801306c:	e010      	b.n	8013090 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	699a      	ldr	r2, [r3, #24]
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	0a5b      	lsrs	r3, r3, #9
 8013076:	441a      	add	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013088:	441a      	add	r2, r3
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 801308e:	2300      	movs	r3, #0
}
 8013090:	4618      	mov	r0, r3
 8013092:	3718      	adds	r7, #24
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b086      	sub	sp, #24
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	691b      	ldr	r3, [r3, #16]
 80130ac:	3320      	adds	r3, #32
 80130ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	699b      	ldr	r3, [r3, #24]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d003      	beq.n	80130c0 <dir_next+0x28>
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80130be:	d301      	bcc.n	80130c4 <dir_next+0x2c>
 80130c0:	2304      	movs	r3, #4
 80130c2:	e0aa      	b.n	801321a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f040 8098 	bne.w	8013200 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	699b      	ldr	r3, [r3, #24]
 80130d4:	1c5a      	adds	r2, r3, #1
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	695b      	ldr	r3, [r3, #20]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10b      	bne.n	80130fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	095b      	lsrs	r3, r3, #5
 80130e6:	68fa      	ldr	r2, [r7, #12]
 80130e8:	8912      	ldrh	r2, [r2, #8]
 80130ea:	4293      	cmp	r3, r2
 80130ec:	f0c0 8088 	bcc.w	8013200 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2200      	movs	r2, #0
 80130f4:	619a      	str	r2, [r3, #24]
 80130f6:	2304      	movs	r3, #4
 80130f8:	e08f      	b.n	801321a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	0a5b      	lsrs	r3, r3, #9
 80130fe:	68fa      	ldr	r2, [r7, #12]
 8013100:	8952      	ldrh	r2, [r2, #10]
 8013102:	3a01      	subs	r2, #1
 8013104:	4013      	ands	r3, r2
 8013106:	2b00      	cmp	r3, #0
 8013108:	d17a      	bne.n	8013200 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801310a:	687a      	ldr	r2, [r7, #4]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	695b      	ldr	r3, [r3, #20]
 8013110:	4619      	mov	r1, r3
 8013112:	4610      	mov	r0, r2
 8013114:	f7ff fc83 	bl	8012a1e <get_fat>
 8013118:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	2b01      	cmp	r3, #1
 801311e:	d801      	bhi.n	8013124 <dir_next+0x8c>
 8013120:	2302      	movs	r3, #2
 8013122:	e07a      	b.n	801321a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312a:	d101      	bne.n	8013130 <dir_next+0x98>
 801312c:	2301      	movs	r3, #1
 801312e:	e074      	b.n	801321a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	695b      	ldr	r3, [r3, #20]
 8013134:	697a      	ldr	r2, [r7, #20]
 8013136:	429a      	cmp	r2, r3
 8013138:	d358      	bcc.n	80131ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d104      	bne.n	801314a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	619a      	str	r2, [r3, #24]
 8013146:	2304      	movs	r3, #4
 8013148:	e067      	b.n	801321a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	695b      	ldr	r3, [r3, #20]
 8013150:	4619      	mov	r1, r3
 8013152:	4610      	mov	r0, r2
 8013154:	f7ff fe59 	bl	8012e0a <create_chain>
 8013158:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d101      	bne.n	8013164 <dir_next+0xcc>
 8013160:	2307      	movs	r3, #7
 8013162:	e05a      	b.n	801321a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	2b01      	cmp	r3, #1
 8013168:	d101      	bne.n	801316e <dir_next+0xd6>
 801316a:	2302      	movs	r3, #2
 801316c:	e055      	b.n	801321a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013174:	d101      	bne.n	801317a <dir_next+0xe2>
 8013176:	2301      	movs	r3, #1
 8013178:	e04f      	b.n	801321a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801317a:	68f8      	ldr	r0, [r7, #12]
 801317c:	f7ff fb51 	bl	8012822 <sync_window>
 8013180:	4603      	mov	r3, r0
 8013182:	2b00      	cmp	r3, #0
 8013184:	d001      	beq.n	801318a <dir_next+0xf2>
 8013186:	2301      	movs	r3, #1
 8013188:	e047      	b.n	801321a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	3330      	adds	r3, #48	@ 0x30
 801318e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013192:	2100      	movs	r1, #0
 8013194:	4618      	mov	r0, r3
 8013196:	f7ff fae7 	bl	8012768 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801319a:	2300      	movs	r3, #0
 801319c:	613b      	str	r3, [r7, #16]
 801319e:	6979      	ldr	r1, [r7, #20]
 80131a0:	68f8      	ldr	r0, [r7, #12]
 80131a2:	f7ff fc1d 	bl	80129e0 <clust2sect>
 80131a6:	4602      	mov	r2, r0
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80131ac:	e012      	b.n	80131d4 <dir_next+0x13c>
						fs->wflag = 1;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2201      	movs	r2, #1
 80131b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f7ff fb34 	bl	8012822 <sync_window>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d001      	beq.n	80131c4 <dir_next+0x12c>
 80131c0:	2301      	movs	r3, #1
 80131c2:	e02a      	b.n	801321a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	3301      	adds	r3, #1
 80131c8:	613b      	str	r3, [r7, #16]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ce:	1c5a      	adds	r2, r3, #1
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	895b      	ldrh	r3, [r3, #10]
 80131d8:	461a      	mov	r2, r3
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	4293      	cmp	r3, r2
 80131de:	d3e6      	bcc.n	80131ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	1ad2      	subs	r2, r2, r3
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	697a      	ldr	r2, [r7, #20]
 80131f0:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80131f2:	6979      	ldr	r1, [r7, #20]
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f7ff fbf3 	bl	80129e0 <clust2sect>
 80131fa:	4602      	mov	r2, r0
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013212:	441a      	add	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013218:	2300      	movs	r3, #0
}
 801321a:	4618      	mov	r0, r3
 801321c:	3718      	adds	r7, #24
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}

08013222 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013222:	b580      	push	{r7, lr}
 8013224:	b086      	sub	sp, #24
 8013226:	af00      	add	r7, sp, #0
 8013228:	6078      	str	r0, [r7, #4]
 801322a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013232:	2100      	movs	r1, #0
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7ff feb4 	bl	8012fa2 <dir_sdi>
 801323a:	4603      	mov	r3, r0
 801323c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801323e:	7dfb      	ldrb	r3, [r7, #23]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d12b      	bne.n	801329c <dir_alloc+0x7a>
		n = 0;
 8013244:	2300      	movs	r3, #0
 8013246:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	699b      	ldr	r3, [r3, #24]
 801324c:	4619      	mov	r1, r3
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	f7ff fb2b 	bl	80128aa <move_window>
 8013254:	4603      	mov	r3, r0
 8013256:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013258:	7dfb      	ldrb	r3, [r7, #23]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d11d      	bne.n	801329a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	69db      	ldr	r3, [r3, #28]
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	2be5      	cmp	r3, #229	@ 0xe5
 8013266:	d004      	beq.n	8013272 <dir_alloc+0x50>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	69db      	ldr	r3, [r3, #28]
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d107      	bne.n	8013282 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	3301      	adds	r3, #1
 8013276:	613b      	str	r3, [r7, #16]
 8013278:	693a      	ldr	r2, [r7, #16]
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	429a      	cmp	r2, r3
 801327e:	d102      	bne.n	8013286 <dir_alloc+0x64>
 8013280:	e00c      	b.n	801329c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013282:	2300      	movs	r3, #0
 8013284:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013286:	2101      	movs	r1, #1
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ff ff05 	bl	8013098 <dir_next>
 801328e:	4603      	mov	r3, r0
 8013290:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013292:	7dfb      	ldrb	r3, [r7, #23]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d0d7      	beq.n	8013248 <dir_alloc+0x26>
 8013298:	e000      	b.n	801329c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801329a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801329c:	7dfb      	ldrb	r3, [r7, #23]
 801329e:	2b04      	cmp	r3, #4
 80132a0:	d101      	bne.n	80132a6 <dir_alloc+0x84>
 80132a2:	2307      	movs	r3, #7
 80132a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80132a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3718      	adds	r7, #24
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	331a      	adds	r3, #26
 80132be:	4618      	mov	r0, r3
 80132c0:	f7ff f9ae 	bl	8012620 <ld_word>
 80132c4:	4603      	mov	r3, r0
 80132c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	2b03      	cmp	r3, #3
 80132ce:	d109      	bne.n	80132e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	3314      	adds	r3, #20
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7ff f9a3 	bl	8012620 <ld_word>
 80132da:	4603      	mov	r3, r0
 80132dc:	041b      	lsls	r3, r3, #16
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	4313      	orrs	r3, r2
 80132e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80132e4:	68fb      	ldr	r3, [r7, #12]
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b084      	sub	sp, #16
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	331a      	adds	r3, #26
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	b292      	uxth	r2, r2
 8013302:	4611      	mov	r1, r2
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff f9c7 	bl	8012698 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	2b03      	cmp	r3, #3
 8013310:	d109      	bne.n	8013326 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	f103 0214 	add.w	r2, r3, #20
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	0c1b      	lsrs	r3, r3, #16
 801331c:	b29b      	uxth	r3, r3
 801331e:	4619      	mov	r1, r3
 8013320:	4610      	mov	r0, r2
 8013322:	f7ff f9b9 	bl	8012698 <st_word>
	}
}
 8013326:	bf00      	nop
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801332e:	b580      	push	{r7, lr}
 8013330:	b086      	sub	sp, #24
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801333c:	2100      	movs	r1, #0
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f7ff fe2f 	bl	8012fa2 <dir_sdi>
 8013344:	4603      	mov	r3, r0
 8013346:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013348:	7dfb      	ldrb	r3, [r7, #23]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d001      	beq.n	8013352 <dir_find+0x24>
 801334e:	7dfb      	ldrb	r3, [r7, #23]
 8013350:	e03e      	b.n	80133d0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	699b      	ldr	r3, [r3, #24]
 8013356:	4619      	mov	r1, r3
 8013358:	6938      	ldr	r0, [r7, #16]
 801335a:	f7ff faa6 	bl	80128aa <move_window>
 801335e:	4603      	mov	r3, r0
 8013360:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013362:	7dfb      	ldrb	r3, [r7, #23]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d12f      	bne.n	80133c8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	69db      	ldr	r3, [r3, #28]
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013370:	7bfb      	ldrb	r3, [r7, #15]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d102      	bne.n	801337c <dir_find+0x4e>
 8013376:	2304      	movs	r3, #4
 8013378:	75fb      	strb	r3, [r7, #23]
 801337a:	e028      	b.n	80133ce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	69db      	ldr	r3, [r3, #28]
 8013380:	330b      	adds	r3, #11
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013388:	b2da      	uxtb	r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	69db      	ldr	r3, [r3, #28]
 8013392:	330b      	adds	r3, #11
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	f003 0308 	and.w	r3, r3, #8
 801339a:	2b00      	cmp	r3, #0
 801339c:	d10a      	bne.n	80133b4 <dir_find+0x86>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	69d8      	ldr	r0, [r3, #28]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	3320      	adds	r3, #32
 80133a6:	220b      	movs	r2, #11
 80133a8:	4619      	mov	r1, r3
 80133aa:	f7ff f9f8 	bl	801279e <mem_cmp>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d00b      	beq.n	80133cc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80133b4:	2100      	movs	r1, #0
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7ff fe6e 	bl	8013098 <dir_next>
 80133bc:	4603      	mov	r3, r0
 80133be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80133c0:	7dfb      	ldrb	r3, [r7, #23]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d0c5      	beq.n	8013352 <dir_find+0x24>
 80133c6:	e002      	b.n	80133ce <dir_find+0xa0>
		if (res != FR_OK) break;
 80133c8:	bf00      	nop
 80133ca:	e000      	b.n	80133ce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133cc:	bf00      	nop

	return res;
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3718      	adds	r7, #24
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b084      	sub	sp, #16
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80133e6:	2101      	movs	r1, #1
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7ff ff1a 	bl	8013222 <dir_alloc>
 80133ee:	4603      	mov	r3, r0
 80133f0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80133f2:	7bfb      	ldrb	r3, [r7, #15]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d11c      	bne.n	8013432 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	699b      	ldr	r3, [r3, #24]
 80133fc:	4619      	mov	r1, r3
 80133fe:	68b8      	ldr	r0, [r7, #8]
 8013400:	f7ff fa53 	bl	80128aa <move_window>
 8013404:	4603      	mov	r3, r0
 8013406:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013408:	7bfb      	ldrb	r3, [r7, #15]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d111      	bne.n	8013432 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	69db      	ldr	r3, [r3, #28]
 8013412:	2220      	movs	r2, #32
 8013414:	2100      	movs	r1, #0
 8013416:	4618      	mov	r0, r3
 8013418:	f7ff f9a6 	bl	8012768 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	69d8      	ldr	r0, [r3, #28]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	3320      	adds	r3, #32
 8013424:	220b      	movs	r2, #11
 8013426:	4619      	mov	r1, r3
 8013428:	f7ff f97d 	bl	8012726 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	2201      	movs	r2, #1
 8013430:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013432:	7bfb      	ldrb	r3, [r7, #15]
}
 8013434:	4618      	mov	r0, r3
 8013436:	3710      	adds	r7, #16
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b088      	sub	sp, #32
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	3320      	adds	r3, #32
 8013450:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013452:	220b      	movs	r2, #11
 8013454:	2120      	movs	r1, #32
 8013456:	68b8      	ldr	r0, [r7, #8]
 8013458:	f7ff f986 	bl	8012768 <mem_set>
	si = i = 0; ni = 8;
 801345c:	2300      	movs	r3, #0
 801345e:	613b      	str	r3, [r7, #16]
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	61fb      	str	r3, [r7, #28]
 8013464:	2308      	movs	r3, #8
 8013466:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	61fa      	str	r2, [r7, #28]
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	4413      	add	r3, r2
 8013472:	781b      	ldrb	r3, [r3, #0]
 8013474:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013476:	7efb      	ldrb	r3, [r7, #27]
 8013478:	2b20      	cmp	r3, #32
 801347a:	d94e      	bls.n	801351a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801347c:	7efb      	ldrb	r3, [r7, #27]
 801347e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013480:	d006      	beq.n	8013490 <create_name+0x54>
 8013482:	7efb      	ldrb	r3, [r7, #27]
 8013484:	2b5c      	cmp	r3, #92	@ 0x5c
 8013486:	d110      	bne.n	80134aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013488:	e002      	b.n	8013490 <create_name+0x54>
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	3301      	adds	r3, #1
 801348e:	61fb      	str	r3, [r7, #28]
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	69fb      	ldr	r3, [r7, #28]
 8013494:	4413      	add	r3, r2
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	2b2f      	cmp	r3, #47	@ 0x2f
 801349a:	d0f6      	beq.n	801348a <create_name+0x4e>
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	4413      	add	r3, r2
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80134a6:	d0f0      	beq.n	801348a <create_name+0x4e>
			break;
 80134a8:	e038      	b.n	801351c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80134aa:	7efb      	ldrb	r3, [r7, #27]
 80134ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80134ae:	d003      	beq.n	80134b8 <create_name+0x7c>
 80134b0:	693a      	ldr	r2, [r7, #16]
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d30c      	bcc.n	80134d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	2b0b      	cmp	r3, #11
 80134bc:	d002      	beq.n	80134c4 <create_name+0x88>
 80134be:	7efb      	ldrb	r3, [r7, #27]
 80134c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80134c2:	d001      	beq.n	80134c8 <create_name+0x8c>
 80134c4:	2306      	movs	r3, #6
 80134c6:	e044      	b.n	8013552 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80134c8:	2308      	movs	r3, #8
 80134ca:	613b      	str	r3, [r7, #16]
 80134cc:	230b      	movs	r3, #11
 80134ce:	617b      	str	r3, [r7, #20]
			continue;
 80134d0:	e022      	b.n	8013518 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80134d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	da04      	bge.n	80134e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80134da:	7efb      	ldrb	r3, [r7, #27]
 80134dc:	3b80      	subs	r3, #128	@ 0x80
 80134de:	4a1f      	ldr	r2, [pc, #124]	@ (801355c <create_name+0x120>)
 80134e0:	5cd3      	ldrb	r3, [r2, r3]
 80134e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80134e4:	7efb      	ldrb	r3, [r7, #27]
 80134e6:	4619      	mov	r1, r3
 80134e8:	481d      	ldr	r0, [pc, #116]	@ (8013560 <create_name+0x124>)
 80134ea:	f7ff f97f 	bl	80127ec <chk_chr>
 80134ee:	4603      	mov	r3, r0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d001      	beq.n	80134f8 <create_name+0xbc>
 80134f4:	2306      	movs	r3, #6
 80134f6:	e02c      	b.n	8013552 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80134f8:	7efb      	ldrb	r3, [r7, #27]
 80134fa:	2b60      	cmp	r3, #96	@ 0x60
 80134fc:	d905      	bls.n	801350a <create_name+0xce>
 80134fe:	7efb      	ldrb	r3, [r7, #27]
 8013500:	2b7a      	cmp	r3, #122	@ 0x7a
 8013502:	d802      	bhi.n	801350a <create_name+0xce>
 8013504:	7efb      	ldrb	r3, [r7, #27]
 8013506:	3b20      	subs	r3, #32
 8013508:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	1c5a      	adds	r2, r3, #1
 801350e:	613a      	str	r2, [r7, #16]
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	4413      	add	r3, r2
 8013514:	7efa      	ldrb	r2, [r7, #27]
 8013516:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013518:	e7a6      	b.n	8013468 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801351a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801351c:	68fa      	ldr	r2, [r7, #12]
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	441a      	add	r2, r3
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d101      	bne.n	8013530 <create_name+0xf4>
 801352c:	2306      	movs	r3, #6
 801352e:	e010      	b.n	8013552 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	2be5      	cmp	r3, #229	@ 0xe5
 8013536:	d102      	bne.n	801353e <create_name+0x102>
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	2205      	movs	r2, #5
 801353c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801353e:	7efb      	ldrb	r3, [r7, #27]
 8013540:	2b20      	cmp	r3, #32
 8013542:	d801      	bhi.n	8013548 <create_name+0x10c>
 8013544:	2204      	movs	r2, #4
 8013546:	e000      	b.n	801354a <create_name+0x10e>
 8013548:	2200      	movs	r2, #0
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	330b      	adds	r3, #11
 801354e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013550:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013552:	4618      	mov	r0, r3
 8013554:	3720      	adds	r7, #32
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	0801ca28 	.word	0x0801ca28
 8013560:	0801c99c 	.word	0x0801c99c

08013564 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b086      	sub	sp, #24
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013578:	e002      	b.n	8013580 <follow_path+0x1c>
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	3301      	adds	r3, #1
 801357e:	603b      	str	r3, [r7, #0]
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	2b2f      	cmp	r3, #47	@ 0x2f
 8013586:	d0f8      	beq.n	801357a <follow_path+0x16>
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	2b5c      	cmp	r3, #92	@ 0x5c
 801358e:	d0f4      	beq.n	801357a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	2200      	movs	r2, #0
 8013594:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	2b1f      	cmp	r3, #31
 801359c:	d80a      	bhi.n	80135b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2280      	movs	r2, #128	@ 0x80
 80135a2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80135a6:	2100      	movs	r1, #0
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff fcfa 	bl	8012fa2 <dir_sdi>
 80135ae:	4603      	mov	r3, r0
 80135b0:	75fb      	strb	r3, [r7, #23]
 80135b2:	e043      	b.n	801363c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135b4:	463b      	mov	r3, r7
 80135b6:	4619      	mov	r1, r3
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7ff ff3f 	bl	801343c <create_name>
 80135be:	4603      	mov	r3, r0
 80135c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80135c2:	7dfb      	ldrb	r3, [r7, #23]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d134      	bne.n	8013632 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7ff feb0 	bl	801332e <dir_find>
 80135ce:	4603      	mov	r3, r0
 80135d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80135d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80135da:	7dfb      	ldrb	r3, [r7, #23]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d00a      	beq.n	80135f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80135e0:	7dfb      	ldrb	r3, [r7, #23]
 80135e2:	2b04      	cmp	r3, #4
 80135e4:	d127      	bne.n	8013636 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80135e6:	7afb      	ldrb	r3, [r7, #11]
 80135e8:	f003 0304 	and.w	r3, r3, #4
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d122      	bne.n	8013636 <follow_path+0xd2>
 80135f0:	2305      	movs	r3, #5
 80135f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80135f4:	e01f      	b.n	8013636 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135f6:	7afb      	ldrb	r3, [r7, #11]
 80135f8:	f003 0304 	and.w	r3, r3, #4
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d11c      	bne.n	801363a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	799b      	ldrb	r3, [r3, #6]
 8013604:	f003 0310 	and.w	r3, r3, #16
 8013608:	2b00      	cmp	r3, #0
 801360a:	d102      	bne.n	8013612 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801360c:	2305      	movs	r3, #5
 801360e:	75fb      	strb	r3, [r7, #23]
 8013610:	e014      	b.n	801363c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	691b      	ldr	r3, [r3, #16]
 801361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013620:	4413      	add	r3, r2
 8013622:	4619      	mov	r1, r3
 8013624:	68f8      	ldr	r0, [r7, #12]
 8013626:	f7ff fe43 	bl	80132b0 <ld_clust>
 801362a:	4602      	mov	r2, r0
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013630:	e7c0      	b.n	80135b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8013632:	bf00      	nop
 8013634:	e002      	b.n	801363c <follow_path+0xd8>
				break;
 8013636:	bf00      	nop
 8013638:	e000      	b.n	801363c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801363a:	bf00      	nop
			}
		}
	}

	return res;
 801363c:	7dfb      	ldrb	r3, [r7, #23]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3718      	adds	r7, #24
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013646:	b480      	push	{r7}
 8013648:	b087      	sub	sp, #28
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801364e:	f04f 33ff 	mov.w	r3, #4294967295
 8013652:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d031      	beq.n	80136c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	617b      	str	r3, [r7, #20]
 8013662:	e002      	b.n	801366a <get_ldnumber+0x24>
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	3301      	adds	r3, #1
 8013668:	617b      	str	r3, [r7, #20]
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	2b20      	cmp	r3, #32
 8013670:	d903      	bls.n	801367a <get_ldnumber+0x34>
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	2b3a      	cmp	r3, #58	@ 0x3a
 8013678:	d1f4      	bne.n	8013664 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013680:	d11c      	bne.n	80136bc <get_ldnumber+0x76>
			tp = *path;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	1c5a      	adds	r2, r3, #1
 801368c:	60fa      	str	r2, [r7, #12]
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	3b30      	subs	r3, #48	@ 0x30
 8013692:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	2b09      	cmp	r3, #9
 8013698:	d80e      	bhi.n	80136b8 <get_ldnumber+0x72>
 801369a:	68fa      	ldr	r2, [r7, #12]
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	429a      	cmp	r2, r3
 80136a0:	d10a      	bne.n	80136b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d107      	bne.n	80136b8 <get_ldnumber+0x72>
					vol = (int)i;
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	3301      	adds	r3, #1
 80136b0:	617b      	str	r3, [r7, #20]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	697a      	ldr	r2, [r7, #20]
 80136b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	e002      	b.n	80136c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80136bc:	2300      	movs	r3, #0
 80136be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80136c0:	693b      	ldr	r3, [r7, #16]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	371c      	adds	r7, #28
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr
	...

080136d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2200      	movs	r2, #0
 80136de:	70da      	strb	r2, [r3, #3]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f04f 32ff 	mov.w	r2, #4294967295
 80136e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80136e8:	6839      	ldr	r1, [r7, #0]
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f7ff f8dd 	bl	80128aa <move_window>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d001      	beq.n	80136fa <check_fs+0x2a>
 80136f6:	2304      	movs	r3, #4
 80136f8:	e038      	b.n	801376c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	3330      	adds	r3, #48	@ 0x30
 80136fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013702:	4618      	mov	r0, r3
 8013704:	f7fe ff8c 	bl	8012620 <ld_word>
 8013708:	4603      	mov	r3, r0
 801370a:	461a      	mov	r2, r3
 801370c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013710:	429a      	cmp	r2, r3
 8013712:	d001      	beq.n	8013718 <check_fs+0x48>
 8013714:	2303      	movs	r3, #3
 8013716:	e029      	b.n	801376c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801371e:	2be9      	cmp	r3, #233	@ 0xe9
 8013720:	d009      	beq.n	8013736 <check_fs+0x66>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013728:	2beb      	cmp	r3, #235	@ 0xeb
 801372a:	d11e      	bne.n	801376a <check_fs+0x9a>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013732:	2b90      	cmp	r3, #144	@ 0x90
 8013734:	d119      	bne.n	801376a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	3330      	adds	r3, #48	@ 0x30
 801373a:	3336      	adds	r3, #54	@ 0x36
 801373c:	4618      	mov	r0, r3
 801373e:	f7fe ff88 	bl	8012652 <ld_dword>
 8013742:	4603      	mov	r3, r0
 8013744:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013748:	4a0a      	ldr	r2, [pc, #40]	@ (8013774 <check_fs+0xa4>)
 801374a:	4293      	cmp	r3, r2
 801374c:	d101      	bne.n	8013752 <check_fs+0x82>
 801374e:	2300      	movs	r3, #0
 8013750:	e00c      	b.n	801376c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	3330      	adds	r3, #48	@ 0x30
 8013756:	3352      	adds	r3, #82	@ 0x52
 8013758:	4618      	mov	r0, r3
 801375a:	f7fe ff7a 	bl	8012652 <ld_dword>
 801375e:	4603      	mov	r3, r0
 8013760:	4a05      	ldr	r2, [pc, #20]	@ (8013778 <check_fs+0xa8>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d101      	bne.n	801376a <check_fs+0x9a>
 8013766:	2300      	movs	r3, #0
 8013768:	e000      	b.n	801376c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801376a:	2302      	movs	r3, #2
}
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	00544146 	.word	0x00544146
 8013778:	33544146 	.word	0x33544146

0801377c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b096      	sub	sp, #88	@ 0x58
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	4613      	mov	r3, r2
 8013788:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	2200      	movs	r2, #0
 801378e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013790:	68f8      	ldr	r0, [r7, #12]
 8013792:	f7ff ff58 	bl	8013646 <get_ldnumber>
 8013796:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801379a:	2b00      	cmp	r3, #0
 801379c:	da01      	bge.n	80137a2 <find_volume+0x26>
 801379e:	230b      	movs	r3, #11
 80137a0:	e22a      	b.n	8013bf8 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80137a2:	4aa1      	ldr	r2, [pc, #644]	@ (8013a28 <find_volume+0x2ac>)
 80137a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80137ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d101      	bne.n	80137b6 <find_volume+0x3a>
 80137b2:	230c      	movs	r3, #12
 80137b4:	e220      	b.n	8013bf8 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80137bc:	79fb      	ldrb	r3, [r7, #7]
 80137be:	f023 0301 	bic.w	r3, r3, #1
 80137c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80137c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d01a      	beq.n	8013802 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80137cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ce:	785b      	ldrb	r3, [r3, #1]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe fe87 	bl	80124e4 <disk_status>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80137dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137e0:	f003 0301 	and.w	r3, r3, #1
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10c      	bne.n	8013802 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80137e8:	79fb      	ldrb	r3, [r7, #7]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d007      	beq.n	80137fe <find_volume+0x82>
 80137ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137f2:	f003 0304 	and.w	r3, r3, #4
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d001      	beq.n	80137fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80137fa:	230a      	movs	r3, #10
 80137fc:	e1fc      	b.n	8013bf8 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 80137fe:	2300      	movs	r3, #0
 8013800:	e1fa      	b.n	8013bf8 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013804:	2200      	movs	r2, #0
 8013806:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801380a:	b2da      	uxtb	r2, r3
 801380c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013812:	785b      	ldrb	r3, [r3, #1]
 8013814:	4618      	mov	r0, r3
 8013816:	f7fe fe7f 	bl	8012518 <disk_initialize>
 801381a:	4603      	mov	r3, r0
 801381c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013824:	f003 0301 	and.w	r3, r3, #1
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801382c:	2303      	movs	r3, #3
 801382e:	e1e3      	b.n	8013bf8 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013830:	79fb      	ldrb	r3, [r7, #7]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d007      	beq.n	8013846 <find_volume+0xca>
 8013836:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801383a:	f003 0304 	and.w	r3, r3, #4
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013842:	230a      	movs	r3, #10
 8013844:	e1d8      	b.n	8013bf8 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013846:	2300      	movs	r3, #0
 8013848:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801384a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801384c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801384e:	f7ff ff3f 	bl	80136d0 <check_fs>
 8013852:	4603      	mov	r3, r0
 8013854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013858:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801385c:	2b02      	cmp	r3, #2
 801385e:	d149      	bne.n	80138f4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013860:	2300      	movs	r3, #0
 8013862:	643b      	str	r3, [r7, #64]	@ 0x40
 8013864:	e01e      	b.n	80138a4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013868:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801386c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801386e:	011b      	lsls	r3, r3, #4
 8013870:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013874:	4413      	add	r3, r2
 8013876:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801387a:	3304      	adds	r3, #4
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d006      	beq.n	8013890 <find_volume+0x114>
 8013882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013884:	3308      	adds	r3, #8
 8013886:	4618      	mov	r0, r3
 8013888:	f7fe fee3 	bl	8012652 <ld_dword>
 801388c:	4602      	mov	r2, r0
 801388e:	e000      	b.n	8013892 <find_volume+0x116>
 8013890:	2200      	movs	r2, #0
 8013892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	3358      	adds	r3, #88	@ 0x58
 8013898:	443b      	add	r3, r7
 801389a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801389e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138a0:	3301      	adds	r3, #1
 80138a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80138a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138a6:	2b03      	cmp	r3, #3
 80138a8:	d9dd      	bls.n	8013866 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80138aa:	2300      	movs	r3, #0
 80138ac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80138ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d002      	beq.n	80138ba <find_volume+0x13e>
 80138b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138b6:	3b01      	subs	r3, #1
 80138b8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80138ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138bc:	009b      	lsls	r3, r3, #2
 80138be:	3358      	adds	r3, #88	@ 0x58
 80138c0:	443b      	add	r3, r7
 80138c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80138c6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80138c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d005      	beq.n	80138da <find_volume+0x15e>
 80138ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80138d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80138d2:	f7ff fefd 	bl	80136d0 <check_fs>
 80138d6:	4603      	mov	r3, r0
 80138d8:	e000      	b.n	80138dc <find_volume+0x160>
 80138da:	2303      	movs	r3, #3
 80138dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d905      	bls.n	80138f4 <find_volume+0x178>
 80138e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138ea:	3301      	adds	r3, #1
 80138ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80138ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138f0:	2b03      	cmp	r3, #3
 80138f2:	d9e2      	bls.n	80138ba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138f8:	2b04      	cmp	r3, #4
 80138fa:	d101      	bne.n	8013900 <find_volume+0x184>
 80138fc:	2301      	movs	r3, #1
 80138fe:	e17b      	b.n	8013bf8 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013904:	2b01      	cmp	r3, #1
 8013906:	d901      	bls.n	801390c <find_volume+0x190>
 8013908:	230d      	movs	r3, #13
 801390a:	e175      	b.n	8013bf8 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	3330      	adds	r3, #48	@ 0x30
 8013910:	330b      	adds	r3, #11
 8013912:	4618      	mov	r0, r3
 8013914:	f7fe fe84 	bl	8012620 <ld_word>
 8013918:	4603      	mov	r3, r0
 801391a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801391e:	d001      	beq.n	8013924 <find_volume+0x1a8>
 8013920:	230d      	movs	r3, #13
 8013922:	e169      	b.n	8013bf8 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013926:	3330      	adds	r3, #48	@ 0x30
 8013928:	3316      	adds	r3, #22
 801392a:	4618      	mov	r0, r3
 801392c:	f7fe fe78 	bl	8012620 <ld_word>
 8013930:	4603      	mov	r3, r0
 8013932:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013936:	2b00      	cmp	r3, #0
 8013938:	d106      	bne.n	8013948 <find_volume+0x1cc>
 801393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801393c:	3330      	adds	r3, #48	@ 0x30
 801393e:	3324      	adds	r3, #36	@ 0x24
 8013940:	4618      	mov	r0, r3
 8013942:	f7fe fe86 	bl	8012652 <ld_dword>
 8013946:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801394a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801394c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013950:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8013954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013956:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	789b      	ldrb	r3, [r3, #2]
 801395c:	2b01      	cmp	r3, #1
 801395e:	d005      	beq.n	801396c <find_volume+0x1f0>
 8013960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013962:	789b      	ldrb	r3, [r3, #2]
 8013964:	2b02      	cmp	r3, #2
 8013966:	d001      	beq.n	801396c <find_volume+0x1f0>
 8013968:	230d      	movs	r3, #13
 801396a:	e145      	b.n	8013bf8 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801396e:	789b      	ldrb	r3, [r3, #2]
 8013970:	461a      	mov	r2, r3
 8013972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013974:	fb02 f303 	mul.w	r3, r2, r3
 8013978:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801397c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013980:	461a      	mov	r2, r3
 8013982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013984:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013988:	895b      	ldrh	r3, [r3, #10]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d008      	beq.n	80139a0 <find_volume+0x224>
 801398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013990:	895b      	ldrh	r3, [r3, #10]
 8013992:	461a      	mov	r2, r3
 8013994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013996:	895b      	ldrh	r3, [r3, #10]
 8013998:	3b01      	subs	r3, #1
 801399a:	4013      	ands	r3, r2
 801399c:	2b00      	cmp	r3, #0
 801399e:	d001      	beq.n	80139a4 <find_volume+0x228>
 80139a0:	230d      	movs	r3, #13
 80139a2:	e129      	b.n	8013bf8 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80139a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a6:	3330      	adds	r3, #48	@ 0x30
 80139a8:	3311      	adds	r3, #17
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fe fe38 	bl	8012620 <ld_word>
 80139b0:	4603      	mov	r3, r0
 80139b2:	461a      	mov	r2, r3
 80139b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80139b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ba:	891b      	ldrh	r3, [r3, #8]
 80139bc:	f003 030f 	and.w	r3, r3, #15
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d001      	beq.n	80139ca <find_volume+0x24e>
 80139c6:	230d      	movs	r3, #13
 80139c8:	e116      	b.n	8013bf8 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80139ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139cc:	3330      	adds	r3, #48	@ 0x30
 80139ce:	3313      	adds	r3, #19
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fe fe25 	bl	8012620 <ld_word>
 80139d6:	4603      	mov	r3, r0
 80139d8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80139da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d106      	bne.n	80139ee <find_volume+0x272>
 80139e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e2:	3330      	adds	r3, #48	@ 0x30
 80139e4:	3320      	adds	r3, #32
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fe fe33 	bl	8012652 <ld_dword>
 80139ec:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f0:	3330      	adds	r3, #48	@ 0x30
 80139f2:	330e      	adds	r3, #14
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7fe fe13 	bl	8012620 <ld_word>
 80139fa:	4603      	mov	r3, r0
 80139fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d101      	bne.n	8013a08 <find_volume+0x28c>
 8013a04:	230d      	movs	r3, #13
 8013a06:	e0f7      	b.n	8013bf8 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a08:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a0c:	4413      	add	r3, r2
 8013a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a10:	8912      	ldrh	r2, [r2, #8]
 8013a12:	0912      	lsrs	r2, r2, #4
 8013a14:	b292      	uxth	r2, r2
 8013a16:	4413      	add	r3, r2
 8013a18:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d204      	bcs.n	8013a2c <find_volume+0x2b0>
 8013a22:	230d      	movs	r3, #13
 8013a24:	e0e8      	b.n	8013bf8 <find_volume+0x47c>
 8013a26:	bf00      	nop
 8013a28:	20001c44 	.word	0x20001c44
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a34:	8952      	ldrh	r2, [r2, #10]
 8013a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a3a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <find_volume+0x2ca>
 8013a42:	230d      	movs	r3, #13
 8013a44:	e0d8      	b.n	8013bf8 <find_volume+0x47c>
		fmt = FS_FAT32;
 8013a46:	2303      	movs	r3, #3
 8013a48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d802      	bhi.n	8013a5c <find_volume+0x2e0>
 8013a56:	2302      	movs	r3, #2
 8013a58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d802      	bhi.n	8013a6c <find_volume+0x2f0>
 8013a66:	2301      	movs	r3, #1
 8013a68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6e:	1c9a      	adds	r2, r3, #2
 8013a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a72:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a78:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a7e:	441a      	add	r2, r3
 8013a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a82:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a88:	441a      	add	r2, r3
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8013a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013a92:	2b03      	cmp	r3, #3
 8013a94:	d11e      	bne.n	8013ad4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a98:	3330      	adds	r3, #48	@ 0x30
 8013a9a:	332a      	adds	r3, #42	@ 0x2a
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7fe fdbf 	bl	8012620 <ld_word>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d001      	beq.n	8013aac <find_volume+0x330>
 8013aa8:	230d      	movs	r3, #13
 8013aaa:	e0a5      	b.n	8013bf8 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aae:	891b      	ldrh	r3, [r3, #8]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <find_volume+0x33c>
 8013ab4:	230d      	movs	r3, #13
 8013ab6:	e09f      	b.n	8013bf8 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aba:	3330      	adds	r3, #48	@ 0x30
 8013abc:	332c      	adds	r3, #44	@ 0x2c
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fe fdc7 	bl	8012652 <ld_dword>
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ac8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013acc:	695b      	ldr	r3, [r3, #20]
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ad2:	e01f      	b.n	8013b14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad6:	891b      	ldrh	r3, [r3, #8]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d101      	bne.n	8013ae0 <find_volume+0x364>
 8013adc:	230d      	movs	r3, #13
 8013ade:	e08b      	b.n	8013bf8 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae2:	6a1a      	ldr	r2, [r3, #32]
 8013ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ae6:	441a      	add	r2, r3
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aea:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013aec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013af0:	2b02      	cmp	r3, #2
 8013af2:	d103      	bne.n	8013afc <find_volume+0x380>
 8013af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af6:	695b      	ldr	r3, [r3, #20]
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	e00a      	b.n	8013b12 <find_volume+0x396>
 8013afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013afe:	695a      	ldr	r2, [r3, #20]
 8013b00:	4613      	mov	r3, r2
 8013b02:	005b      	lsls	r3, r3, #1
 8013b04:	4413      	add	r3, r2
 8013b06:	085a      	lsrs	r2, r3, #1
 8013b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b0a:	695b      	ldr	r3, [r3, #20]
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b12:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b16:	699a      	ldr	r2, [r3, #24]
 8013b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b1a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8013b1e:	0a5b      	lsrs	r3, r3, #9
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d201      	bcs.n	8013b28 <find_volume+0x3ac>
 8013b24:	230d      	movs	r3, #13
 8013b26:	e067      	b.n	8013bf8 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b2e:	611a      	str	r2, [r3, #16]
 8013b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b32:	691a      	ldr	r2, [r3, #16]
 8013b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b36:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3a:	2280      	movs	r2, #128	@ 0x80
 8013b3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013b42:	2b03      	cmp	r3, #3
 8013b44:	d149      	bne.n	8013bda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b48:	3330      	adds	r3, #48	@ 0x30
 8013b4a:	3330      	adds	r3, #48	@ 0x30
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7fe fd67 	bl	8012620 <ld_word>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d140      	bne.n	8013bda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013b60:	f7fe fea3 	bl	80128aa <move_window>
 8013b64:	4603      	mov	r3, r0
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d137      	bne.n	8013bda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b72:	3330      	adds	r3, #48	@ 0x30
 8013b74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fe fd51 	bl	8012620 <ld_word>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	461a      	mov	r2, r3
 8013b82:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d127      	bne.n	8013bda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8c:	3330      	adds	r3, #48	@ 0x30
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fe fd5f 	bl	8012652 <ld_dword>
 8013b94:	4603      	mov	r3, r0
 8013b96:	4a1a      	ldr	r2, [pc, #104]	@ (8013c00 <find_volume+0x484>)
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d11e      	bne.n	8013bda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b9e:	3330      	adds	r3, #48	@ 0x30
 8013ba0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fe fd54 	bl	8012652 <ld_dword>
 8013baa:	4603      	mov	r3, r0
 8013bac:	4a15      	ldr	r2, [pc, #84]	@ (8013c04 <find_volume+0x488>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d113      	bne.n	8013bda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb4:	3330      	adds	r3, #48	@ 0x30
 8013bb6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7fe fd49 	bl	8012652 <ld_dword>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc8:	3330      	adds	r3, #48	@ 0x30
 8013bca:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fe fd3f 	bl	8012652 <ld_dword>
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bdc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013be0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013be2:	4b09      	ldr	r3, [pc, #36]	@ (8013c08 <find_volume+0x48c>)
 8013be4:	881b      	ldrh	r3, [r3, #0]
 8013be6:	3301      	adds	r3, #1
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	4b07      	ldr	r3, [pc, #28]	@ (8013c08 <find_volume+0x48c>)
 8013bec:	801a      	strh	r2, [r3, #0]
 8013bee:	4b06      	ldr	r3, [pc, #24]	@ (8013c08 <find_volume+0x48c>)
 8013bf0:	881a      	ldrh	r2, [r3, #0]
 8013bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf4:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8013bf6:	2300      	movs	r3, #0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3758      	adds	r7, #88	@ 0x58
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	41615252 	.word	0x41615252
 8013c04:	61417272 	.word	0x61417272
 8013c08:	20001c48 	.word	0x20001c48

08013c0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c16:	2309      	movs	r3, #9
 8013c18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d01c      	beq.n	8013c5a <validate+0x4e>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d018      	beq.n	8013c5a <validate+0x4e>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d013      	beq.n	8013c5a <validate+0x4e>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	889a      	ldrh	r2, [r3, #4]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	88db      	ldrh	r3, [r3, #6]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d10c      	bne.n	8013c5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	785b      	ldrb	r3, [r3, #1]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fe fc4c 	bl	80124e4 <disk_status>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	f003 0301 	and.w	r3, r3, #1
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d101      	bne.n	8013c5a <validate+0x4e>
			res = FR_OK;
 8013c56:	2300      	movs	r3, #0
 8013c58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c5a:	7bfb      	ldrb	r3, [r7, #15]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d102      	bne.n	8013c66 <validate+0x5a>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	e000      	b.n	8013c68 <validate+0x5c>
 8013c66:	2300      	movs	r3, #0
 8013c68:	683a      	ldr	r2, [r7, #0]
 8013c6a:	6013      	str	r3, [r2, #0]
	return res;
 8013c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
	...

08013c78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b088      	sub	sp, #32
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	4613      	mov	r3, r2
 8013c84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c8a:	f107 0310 	add.w	r3, r7, #16
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7ff fcd9 	bl	8013646 <get_ldnumber>
 8013c94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c96:	69fb      	ldr	r3, [r7, #28]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	da01      	bge.n	8013ca0 <f_mount+0x28>
 8013c9c:	230b      	movs	r3, #11
 8013c9e:	e028      	b.n	8013cf2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013ca0:	4a16      	ldr	r2, [pc, #88]	@ (8013cfc <f_mount+0x84>)
 8013ca2:	69fb      	ldr	r3, [r7, #28]
 8013ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ca8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d002      	beq.n	8013cb6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d002      	beq.n	8013cc2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	490d      	ldr	r1, [pc, #52]	@ (8013cfc <f_mount+0x84>)
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d002      	beq.n	8013cd8 <f_mount+0x60>
 8013cd2:	79fb      	ldrb	r3, [r7, #7]
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d001      	beq.n	8013cdc <f_mount+0x64>
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e00a      	b.n	8013cf2 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013cdc:	f107 010c 	add.w	r1, r7, #12
 8013ce0:	f107 0308 	add.w	r3, r7, #8
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7ff fd48 	bl	801377c <find_volume>
 8013cec:	4603      	mov	r3, r0
 8013cee:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3720      	adds	r7, #32
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20001c44 	.word	0x20001c44

08013d00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b098      	sub	sp, #96	@ 0x60
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	60b9      	str	r1, [r7, #8]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d101      	bne.n	8013d18 <f_open+0x18>
 8013d14:	2309      	movs	r3, #9
 8013d16:	e17a      	b.n	801400e <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d18:	79fb      	ldrb	r3, [r7, #7]
 8013d1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013d20:	79fa      	ldrb	r2, [r7, #7]
 8013d22:	f107 0114 	add.w	r1, r7, #20
 8013d26:	f107 0308 	add.w	r3, r7, #8
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7ff fd26 	bl	801377c <find_volume>
 8013d30:	4603      	mov	r3, r0
 8013d32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013d36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	f040 815e 	bne.w	8013ffc <f_open+0x2fc>
		dj.obj.fs = fs;
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d44:	68ba      	ldr	r2, [r7, #8]
 8013d46:	f107 0318 	add.w	r3, r7, #24
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7ff fc09 	bl	8013564 <follow_path>
 8013d52:	4603      	mov	r3, r0
 8013d54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d107      	bne.n	8013d70 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d64:	b25b      	sxtb	r3, r3
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	da02      	bge.n	8013d70 <f_open+0x70>
				res = FR_INVALID_NAME;
 8013d6a:	2306      	movs	r3, #6
 8013d6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d70:	79fb      	ldrb	r3, [r7, #7]
 8013d72:	f003 031c 	and.w	r3, r3, #28
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d078      	beq.n	8013e6c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8013d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d010      	beq.n	8013da4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d86:	2b04      	cmp	r3, #4
 8013d88:	d107      	bne.n	8013d9a <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8013d8a:	f107 0318 	add.w	r3, r7, #24
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7ff fb22 	bl	80133d8 <dir_register>
 8013d94:	4603      	mov	r3, r0
 8013d96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d9a:	79fb      	ldrb	r3, [r7, #7]
 8013d9c:	f043 0308 	orr.w	r3, r3, #8
 8013da0:	71fb      	strb	r3, [r7, #7]
 8013da2:	e010      	b.n	8013dc6 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013da4:	7fbb      	ldrb	r3, [r7, #30]
 8013da6:	f003 0311 	and.w	r3, r3, #17
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d003      	beq.n	8013db6 <f_open+0xb6>
					res = FR_DENIED;
 8013dae:	2307      	movs	r3, #7
 8013db0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013db4:	e007      	b.n	8013dc6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	f003 0304 	and.w	r3, r3, #4
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d002      	beq.n	8013dc6 <f_open+0xc6>
 8013dc0:	2308      	movs	r3, #8
 8013dc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d168      	bne.n	8013ea0 <f_open+0x1a0>
 8013dce:	79fb      	ldrb	r3, [r7, #7]
 8013dd0:	f003 0308 	and.w	r3, r3, #8
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d063      	beq.n	8013ea0 <f_open+0x1a0>
				dw = GET_FATTIME();
 8013dd8:	f7fd ff9e 	bl	8011d18 <get_fattime>
 8013ddc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013de0:	330e      	adds	r3, #14
 8013de2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fe fc72 	bl	80126ce <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dec:	3316      	adds	r3, #22
 8013dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7fe fc6c 	bl	80126ce <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013df8:	330b      	adds	r3, #11
 8013dfa:	2220      	movs	r2, #32
 8013dfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e02:	4611      	mov	r1, r2
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7ff fa53 	bl	80132b0 <ld_clust>
 8013e0a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013e10:	2200      	movs	r2, #0
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7ff fa6b 	bl	80132ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e1a:	331c      	adds	r3, #28
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fe fc55 	bl	80126ce <st_dword>
					fs->wflag = 1;
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	2201      	movs	r2, #1
 8013e28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d037      	beq.n	8013ea0 <f_open+0x1a0>
						dw = fs->winsect;
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e34:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013e36:	f107 0318 	add.w	r3, r7, #24
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fe ff7e 	bl	8012d40 <remove_chain>
 8013e44:	4603      	mov	r3, r0
 8013e46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d126      	bne.n	8013ea0 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fe fd27 	bl	80128aa <move_window>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e66:	3a01      	subs	r2, #1
 8013e68:	60da      	str	r2, [r3, #12]
 8013e6a:	e019      	b.n	8013ea0 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d115      	bne.n	8013ea0 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e74:	7fbb      	ldrb	r3, [r7, #30]
 8013e76:	f003 0310 	and.w	r3, r3, #16
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d003      	beq.n	8013e86 <f_open+0x186>
					res = FR_NO_FILE;
 8013e7e:	2304      	movs	r3, #4
 8013e80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013e84:	e00c      	b.n	8013ea0 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e86:	79fb      	ldrb	r3, [r7, #7]
 8013e88:	f003 0302 	and.w	r3, r3, #2
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d007      	beq.n	8013ea0 <f_open+0x1a0>
 8013e90:	7fbb      	ldrb	r3, [r7, #30]
 8013e92:	f003 0301 	and.w	r3, r3, #1
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d002      	beq.n	8013ea0 <f_open+0x1a0>
						res = FR_DENIED;
 8013e9a:	2307      	movs	r3, #7
 8013e9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10f      	bne.n	8013ec8 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013ea8:	79fb      	ldrb	r3, [r7, #7]
 8013eaa:	f003 0308 	and.w	r3, r3, #8
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d003      	beq.n	8013eba <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8013eb2:	79fb      	ldrb	r3, [r7, #7]
 8013eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8013ec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	f040 8095 	bne.w	8013ffc <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ed6:	4611      	mov	r1, r2
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7ff f9e9 	bl	80132b0 <ld_clust>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ee6:	331c      	adds	r3, #28
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fe fbb2 	bl	8012652 <ld_dword>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013efa:	697a      	ldr	r2, [r7, #20]
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	88da      	ldrh	r2, [r3, #6]
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	79fa      	ldrb	r2, [r7, #7]
 8013f0c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	2200      	movs	r2, #0
 8013f12:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	2200      	movs	r2, #0
 8013f18:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	332c      	adds	r3, #44	@ 0x2c
 8013f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f28:	2100      	movs	r1, #0
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fe fc1c 	bl	8012768 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f30:	79fb      	ldrb	r3, [r7, #7]
 8013f32:	f003 0320 	and.w	r3, r3, #32
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d060      	beq.n	8013ffc <f_open+0x2fc>
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	68db      	ldr	r3, [r3, #12]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d05c      	beq.n	8013ffc <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	68da      	ldr	r2, [r3, #12]
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	895b      	ldrh	r3, [r3, #10]
 8013f4e:	025b      	lsls	r3, r3, #9
 8013f50:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	689b      	ldr	r3, [r3, #8]
 8013f56:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f5e:	e016      	b.n	8013f8e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fe fd5a 	bl	8012a1e <get_fat>
 8013f6a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d802      	bhi.n	8013f78 <f_open+0x278>
 8013f72:	2302      	movs	r3, #2
 8013f74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f7e:	d102      	bne.n	8013f86 <f_open+0x286>
 8013f80:	2301      	movs	r3, #1
 8013f82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f8a:	1ad3      	subs	r3, r2, r3
 8013f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d103      	bne.n	8013f9e <f_open+0x29e>
 8013f96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d8e0      	bhi.n	8013f60 <f_open+0x260>
				}
				fp->clust = clst;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013fa2:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d127      	bne.n	8013ffc <f_open+0x2fc>
 8013fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d022      	beq.n	8013ffc <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fe fd10 	bl	80129e0 <clust2sect>
 8013fc0:	6478      	str	r0, [r7, #68]	@ 0x44
 8013fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d103      	bne.n	8013fd0 <f_open+0x2d0>
						res = FR_INT_ERR;
 8013fc8:	2302      	movs	r3, #2
 8013fca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013fce:	e015      	b.n	8013ffc <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fd2:	0a5a      	lsrs	r2, r3, #9
 8013fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fd6:	441a      	add	r2, r3
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	7858      	ldrb	r0, [r3, #1]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	69da      	ldr	r2, [r3, #28]
 8013fea:	2301      	movs	r3, #1
 8013fec:	f7fe faba 	bl	8012564 <disk_read>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d002      	beq.n	8013ffc <f_open+0x2fc>
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014000:	2b00      	cmp	r3, #0
 8014002:	d002      	beq.n	801400a <f_open+0x30a>
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2200      	movs	r2, #0
 8014008:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801400a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801400e:	4618      	mov	r0, r3
 8014010:	3760      	adds	r7, #96	@ 0x60
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014016:	b580      	push	{r7, lr}
 8014018:	b08c      	sub	sp, #48	@ 0x30
 801401a:	af00      	add	r7, sp, #0
 801401c:	60f8      	str	r0, [r7, #12]
 801401e:	60b9      	str	r1, [r7, #8]
 8014020:	607a      	str	r2, [r7, #4]
 8014022:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	2200      	movs	r2, #0
 801402c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f107 0210 	add.w	r2, r7, #16
 8014034:	4611      	mov	r1, r2
 8014036:	4618      	mov	r0, r3
 8014038:	f7ff fde8 	bl	8013c0c <validate>
 801403c:	4603      	mov	r3, r0
 801403e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014046:	2b00      	cmp	r3, #0
 8014048:	d107      	bne.n	801405a <f_write+0x44>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	7c5b      	ldrb	r3, [r3, #17]
 801404e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014056:	2b00      	cmp	r3, #0
 8014058:	d002      	beq.n	8014060 <f_write+0x4a>
 801405a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801405e:	e14b      	b.n	80142f8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	7c1b      	ldrb	r3, [r3, #16]
 8014064:	f003 0302 	and.w	r3, r3, #2
 8014068:	2b00      	cmp	r3, #0
 801406a:	d101      	bne.n	8014070 <f_write+0x5a>
 801406c:	2307      	movs	r3, #7
 801406e:	e143      	b.n	80142f8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	695a      	ldr	r2, [r3, #20]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	441a      	add	r2, r3
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	695b      	ldr	r3, [r3, #20]
 801407c:	429a      	cmp	r2, r3
 801407e:	f080 812d 	bcs.w	80142dc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	695b      	ldr	r3, [r3, #20]
 8014086:	43db      	mvns	r3, r3
 8014088:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801408a:	e127      	b.n	80142dc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	695b      	ldr	r3, [r3, #20]
 8014090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014094:	2b00      	cmp	r3, #0
 8014096:	f040 80e3 	bne.w	8014260 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	695b      	ldr	r3, [r3, #20]
 801409e:	0a5b      	lsrs	r3, r3, #9
 80140a0:	693a      	ldr	r2, [r7, #16]
 80140a2:	8952      	ldrh	r2, [r2, #10]
 80140a4:	3a01      	subs	r2, #1
 80140a6:	4013      	ands	r3, r2
 80140a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80140aa:	69bb      	ldr	r3, [r7, #24]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d143      	bne.n	8014138 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	695b      	ldr	r3, [r3, #20]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d10c      	bne.n	80140d2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	689b      	ldr	r3, [r3, #8]
 80140bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80140be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d11a      	bne.n	80140fa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2100      	movs	r1, #0
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fe fe9e 	bl	8012e0a <create_chain>
 80140ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 80140d0:	e013      	b.n	80140fa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d007      	beq.n	80140ea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	695b      	ldr	r3, [r3, #20]
 80140de:	4619      	mov	r1, r3
 80140e0:	68f8      	ldr	r0, [r7, #12]
 80140e2:	f7fe ff2a 	bl	8012f3a <clmt_clust>
 80140e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80140e8:	e007      	b.n	80140fa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80140ea:	68fa      	ldr	r2, [r7, #12]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	699b      	ldr	r3, [r3, #24]
 80140f0:	4619      	mov	r1, r3
 80140f2:	4610      	mov	r0, r2
 80140f4:	f7fe fe89 	bl	8012e0a <create_chain>
 80140f8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80140fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f000 80f2 	beq.w	80142e6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014104:	2b01      	cmp	r3, #1
 8014106:	d104      	bne.n	8014112 <f_write+0xfc>
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2202      	movs	r2, #2
 801410c:	745a      	strb	r2, [r3, #17]
 801410e:	2302      	movs	r3, #2
 8014110:	e0f2      	b.n	80142f8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014118:	d104      	bne.n	8014124 <f_write+0x10e>
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	2201      	movs	r2, #1
 801411e:	745a      	strb	r2, [r3, #17]
 8014120:	2301      	movs	r3, #1
 8014122:	e0e9      	b.n	80142f8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014128:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	689b      	ldr	r3, [r3, #8]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d102      	bne.n	8014138 <f_write+0x122>
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014136:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	7c1b      	ldrb	r3, [r3, #16]
 801413c:	b25b      	sxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	da18      	bge.n	8014174 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	7858      	ldrb	r0, [r3, #1]
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	69da      	ldr	r2, [r3, #28]
 8014150:	2301      	movs	r3, #1
 8014152:	f7fe fa27 	bl	80125a4 <disk_write>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d004      	beq.n	8014166 <f_write+0x150>
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2201      	movs	r2, #1
 8014160:	745a      	strb	r2, [r3, #17]
 8014162:	2301      	movs	r3, #1
 8014164:	e0c8      	b.n	80142f8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	7c1b      	ldrb	r3, [r3, #16]
 801416a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801416e:	b2da      	uxtb	r2, r3
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014174:	693a      	ldr	r2, [r7, #16]
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	699b      	ldr	r3, [r3, #24]
 801417a:	4619      	mov	r1, r3
 801417c:	4610      	mov	r0, r2
 801417e:	f7fe fc2f 	bl	80129e0 <clust2sect>
 8014182:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d104      	bne.n	8014194 <f_write+0x17e>
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2202      	movs	r2, #2
 801418e:	745a      	strb	r2, [r3, #17]
 8014190:	2302      	movs	r3, #2
 8014192:	e0b1      	b.n	80142f8 <f_write+0x2e2>
			sect += csect;
 8014194:	697a      	ldr	r2, [r7, #20]
 8014196:	69bb      	ldr	r3, [r7, #24]
 8014198:	4413      	add	r3, r2
 801419a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	0a5b      	lsrs	r3, r3, #9
 80141a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80141a2:	6a3b      	ldr	r3, [r7, #32]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d03c      	beq.n	8014222 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141a8:	69ba      	ldr	r2, [r7, #24]
 80141aa:	6a3b      	ldr	r3, [r7, #32]
 80141ac:	4413      	add	r3, r2
 80141ae:	693a      	ldr	r2, [r7, #16]
 80141b0:	8952      	ldrh	r2, [r2, #10]
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d905      	bls.n	80141c2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	895b      	ldrh	r3, [r3, #10]
 80141ba:	461a      	mov	r2, r3
 80141bc:	69bb      	ldr	r3, [r7, #24]
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141c2:	693b      	ldr	r3, [r7, #16]
 80141c4:	7858      	ldrb	r0, [r3, #1]
 80141c6:	6a3b      	ldr	r3, [r7, #32]
 80141c8:	697a      	ldr	r2, [r7, #20]
 80141ca:	69f9      	ldr	r1, [r7, #28]
 80141cc:	f7fe f9ea 	bl	80125a4 <disk_write>
 80141d0:	4603      	mov	r3, r0
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d004      	beq.n	80141e0 <f_write+0x1ca>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2201      	movs	r2, #1
 80141da:	745a      	strb	r2, [r3, #17]
 80141dc:	2301      	movs	r3, #1
 80141de:	e08b      	b.n	80142f8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	69da      	ldr	r2, [r3, #28]
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	1ad3      	subs	r3, r2, r3
 80141e8:	6a3a      	ldr	r2, [r7, #32]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d915      	bls.n	801421a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	69da      	ldr	r2, [r3, #28]
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	1ad3      	subs	r3, r2, r3
 80141fc:	025b      	lsls	r3, r3, #9
 80141fe:	69fa      	ldr	r2, [r7, #28]
 8014200:	4413      	add	r3, r2
 8014202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014206:	4619      	mov	r1, r3
 8014208:	f7fe fa8d 	bl	8012726 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	7c1b      	ldrb	r3, [r3, #16]
 8014210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014214:	b2da      	uxtb	r2, r3
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801421a:	6a3b      	ldr	r3, [r7, #32]
 801421c:	025b      	lsls	r3, r3, #9
 801421e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014220:	e03f      	b.n	80142a2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	69db      	ldr	r3, [r3, #28]
 8014226:	697a      	ldr	r2, [r7, #20]
 8014228:	429a      	cmp	r2, r3
 801422a:	d016      	beq.n	801425a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	695a      	ldr	r2, [r3, #20]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014234:	429a      	cmp	r2, r3
 8014236:	d210      	bcs.n	801425a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	7858      	ldrb	r0, [r3, #1]
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8014242:	2301      	movs	r3, #1
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	f7fe f98d 	bl	8012564 <disk_read>
 801424a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801424c:	2b00      	cmp	r3, #0
 801424e:	d004      	beq.n	801425a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2201      	movs	r2, #1
 8014254:	745a      	strb	r2, [r3, #17]
 8014256:	2301      	movs	r3, #1
 8014258:	e04e      	b.n	80142f8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	697a      	ldr	r2, [r7, #20]
 801425e:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	695b      	ldr	r3, [r3, #20]
 8014264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014268:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801426c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801426e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	429a      	cmp	r2, r3
 8014274:	d901      	bls.n	801427a <f_write+0x264>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	695b      	ldr	r3, [r3, #20]
 8014284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014288:	4413      	add	r3, r2
 801428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801428c:	69f9      	ldr	r1, [r7, #28]
 801428e:	4618      	mov	r0, r3
 8014290:	f7fe fa49 	bl	8012726 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	7c1b      	ldrb	r3, [r3, #16]
 8014298:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801429c:	b2da      	uxtb	r2, r3
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80142a2:	69fa      	ldr	r2, [r7, #28]
 80142a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a6:	4413      	add	r3, r2
 80142a8:	61fb      	str	r3, [r7, #28]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	695a      	ldr	r2, [r3, #20]
 80142ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142b0:	441a      	add	r2, r3
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	615a      	str	r2, [r3, #20]
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	68da      	ldr	r2, [r3, #12]
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	695b      	ldr	r3, [r3, #20]
 80142be:	429a      	cmp	r2, r3
 80142c0:	bf38      	it	cc
 80142c2:	461a      	movcc	r2, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	60da      	str	r2, [r3, #12]
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	681a      	ldr	r2, [r3, #0]
 80142cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ce:	441a      	add	r2, r3
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	601a      	str	r2, [r3, #0]
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d8:	1ad3      	subs	r3, r2, r3
 80142da:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f47f aed4 	bne.w	801408c <f_write+0x76>
 80142e4:	e000      	b.n	80142e8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80142e6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	7c1b      	ldrb	r3, [r3, #16]
 80142ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142f0:	b2da      	uxtb	r2, r3
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80142f6:	2300      	movs	r3, #0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3730      	adds	r7, #48	@ 0x30
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b086      	sub	sp, #24
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f107 0208 	add.w	r2, r7, #8
 801430e:	4611      	mov	r1, r2
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fc7b 	bl	8013c0c <validate>
 8014316:	4603      	mov	r3, r0
 8014318:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801431a:	7dfb      	ldrb	r3, [r7, #23]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d168      	bne.n	80143f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	7c1b      	ldrb	r3, [r3, #16]
 8014324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014328:	2b00      	cmp	r3, #0
 801432a:	d062      	beq.n	80143f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	7c1b      	ldrb	r3, [r3, #16]
 8014330:	b25b      	sxtb	r3, r3
 8014332:	2b00      	cmp	r3, #0
 8014334:	da15      	bge.n	8014362 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	7858      	ldrb	r0, [r3, #1]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	69da      	ldr	r2, [r3, #28]
 8014344:	2301      	movs	r3, #1
 8014346:	f7fe f92d 	bl	80125a4 <disk_write>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d001      	beq.n	8014354 <f_sync+0x54>
 8014350:	2301      	movs	r3, #1
 8014352:	e04f      	b.n	80143f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	7c1b      	ldrb	r3, [r3, #16]
 8014358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801435c:	b2da      	uxtb	r2, r3
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014362:	f7fd fcd9 	bl	8011d18 <get_fattime>
 8014366:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014368:	68ba      	ldr	r2, [r7, #8]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6a1b      	ldr	r3, [r3, #32]
 801436e:	4619      	mov	r1, r3
 8014370:	4610      	mov	r0, r2
 8014372:	f7fe fa9a 	bl	80128aa <move_window>
 8014376:	4603      	mov	r3, r0
 8014378:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801437a:	7dfb      	ldrb	r3, [r7, #23]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d138      	bne.n	80143f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014384:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	330b      	adds	r3, #11
 801438a:	781a      	ldrb	r2, [r3, #0]
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	330b      	adds	r3, #11
 8014390:	f042 0220 	orr.w	r2, r2, #32
 8014394:	b2d2      	uxtb	r2, r2
 8014396:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6818      	ldr	r0, [r3, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	461a      	mov	r2, r3
 80143a2:	68f9      	ldr	r1, [r7, #12]
 80143a4:	f7fe ffa3 	bl	80132ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f103 021c 	add.w	r2, r3, #28
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	4619      	mov	r1, r3
 80143b4:	4610      	mov	r0, r2
 80143b6:	f7fe f98a 	bl	80126ce <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	3316      	adds	r3, #22
 80143be:	6939      	ldr	r1, [r7, #16]
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7fe f984 	bl	80126ce <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	3312      	adds	r3, #18
 80143ca:	2100      	movs	r1, #0
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7fe f963 	bl	8012698 <st_word>
					fs->wflag = 1;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	2201      	movs	r2, #1
 80143d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fe fa92 	bl	8012904 <sync_fs>
 80143e0:	4603      	mov	r3, r0
 80143e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	7c1b      	ldrb	r3, [r3, #16]
 80143e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80143ec:	b2da      	uxtb	r2, r3
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80143f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3718      	adds	r7, #24
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b084      	sub	sp, #16
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f7ff ff7b 	bl	8014300 <f_sync>
 801440a:	4603      	mov	r3, r0
 801440c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801440e:	7bfb      	ldrb	r3, [r7, #15]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10e      	bne.n	8014432 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f107 0208 	add.w	r2, r7, #8
 801441a:	4611      	mov	r1, r2
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff fbf5 	bl	8013c0c <validate>
 8014422:	4603      	mov	r3, r0
 8014424:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014426:	7bfb      	ldrb	r3, [r7, #15]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d102      	bne.n	8014432 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2200      	movs	r2, #0
 8014430:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014432:	7bfb      	ldrb	r3, [r7, #15]
}
 8014434:	4618      	mov	r0, r3
 8014436:	3710      	adds	r7, #16
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b096      	sub	sp, #88	@ 0x58
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014444:	f107 010c 	add.w	r1, r7, #12
 8014448:	1d3b      	adds	r3, r7, #4
 801444a:	2202      	movs	r2, #2
 801444c:	4618      	mov	r0, r3
 801444e:	f7ff f995 	bl	801377c <find_volume>
 8014452:	4603      	mov	r3, r0
 8014454:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 801445c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014460:	2b00      	cmp	r3, #0
 8014462:	f040 80ec 	bne.w	801463e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	f107 0310 	add.w	r3, r7, #16
 801446c:	4611      	mov	r1, r2
 801446e:	4618      	mov	r0, r3
 8014470:	f7ff f878 	bl	8013564 <follow_path>
 8014474:	4603      	mov	r3, r0
 8014476:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801447a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801447e:	2b00      	cmp	r3, #0
 8014480:	d102      	bne.n	8014488 <f_mkdir+0x4c>
 8014482:	2308      	movs	r3, #8
 8014484:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801448c:	2b04      	cmp	r3, #4
 801448e:	f040 80d6 	bne.w	801463e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014492:	f107 0310 	add.w	r3, r7, #16
 8014496:	2100      	movs	r1, #0
 8014498:	4618      	mov	r0, r3
 801449a:	f7fe fcb6 	bl	8012e0a <create_chain>
 801449e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	895b      	ldrh	r3, [r3, #10]
 80144a4:	025b      	lsls	r3, r3, #9
 80144a6:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 80144a8:	2300      	movs	r3, #0
 80144aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80144ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d102      	bne.n	80144ba <f_mkdir+0x7e>
 80144b4:	2307      	movs	r3, #7
 80144b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80144ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d102      	bne.n	80144c6 <f_mkdir+0x8a>
 80144c0:	2302      	movs	r3, #2
 80144c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80144c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144cc:	d102      	bne.n	80144d4 <f_mkdir+0x98>
 80144ce:	2301      	movs	r3, #1
 80144d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80144d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d106      	bne.n	80144ea <f_mkdir+0xae>
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	4618      	mov	r0, r3
 80144e0:	f7fe f99f 	bl	8012822 <sync_window>
 80144e4:	4603      	mov	r3, r0
 80144e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 80144ea:	f7fd fc15 	bl	8011d18 <get_fattime>
 80144ee:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80144f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d16a      	bne.n	80145ce <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7fe fa6f 	bl	80129e0 <clust2sect>
 8014502:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	3330      	adds	r3, #48	@ 0x30
 8014508:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 801450a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801450e:	2100      	movs	r1, #0
 8014510:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014512:	f7fe f929 	bl	8012768 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014516:	220b      	movs	r2, #11
 8014518:	2120      	movs	r1, #32
 801451a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801451c:	f7fe f924 	bl	8012768 <mem_set>
					dir[DIR_Name] = '.';
 8014520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014522:	222e      	movs	r2, #46	@ 0x2e
 8014524:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014528:	330b      	adds	r3, #11
 801452a:	2210      	movs	r2, #16
 801452c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801452e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014530:	3316      	adds	r3, #22
 8014532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014534:	4618      	mov	r0, r3
 8014536:	f7fe f8ca 	bl	80126ce <st_dword>
					st_clust(fs, dir, dcl);
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801453e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe fed4 	bl	80132ee <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014548:	3320      	adds	r3, #32
 801454a:	2220      	movs	r2, #32
 801454c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801454e:	4618      	mov	r0, r3
 8014550:	f7fe f8e9 	bl	8012726 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014556:	3321      	adds	r3, #33	@ 0x21
 8014558:	222e      	movs	r2, #46	@ 0x2e
 801455a:	701a      	strb	r2, [r3, #0]
 801455c:	69bb      	ldr	r3, [r7, #24]
 801455e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	2b03      	cmp	r3, #3
 8014566:	d106      	bne.n	8014576 <f_mkdir+0x13a>
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801456c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801456e:	429a      	cmp	r2, r3
 8014570:	d101      	bne.n	8014576 <f_mkdir+0x13a>
 8014572:	2300      	movs	r3, #0
 8014574:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801457a:	3320      	adds	r3, #32
 801457c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801457e:	4619      	mov	r1, r3
 8014580:	f7fe feb5 	bl	80132ee <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	895b      	ldrh	r3, [r3, #10]
 8014588:	653b      	str	r3, [r7, #80]	@ 0x50
 801458a:	e01b      	b.n	80145c4 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801458c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801458e:	1c5a      	adds	r2, r3, #1
 8014590:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014592:	68fa      	ldr	r2, [r7, #12]
 8014594:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2201      	movs	r2, #1
 801459a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fe f93f 	bl	8012822 <sync_window>
 80145a4:	4603      	mov	r3, r0
 80145a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80145aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10c      	bne.n	80145cc <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80145b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80145b6:	2100      	movs	r1, #0
 80145b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80145ba:	f7fe f8d5 	bl	8012768 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80145be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145c0:	3b01      	subs	r3, #1
 80145c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80145c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d1e0      	bne.n	801458c <f_mkdir+0x150>
 80145ca:	e000      	b.n	80145ce <f_mkdir+0x192>
					if (res != FR_OK) break;
 80145cc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80145ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d107      	bne.n	80145e6 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80145d6:	f107 0310 	add.w	r3, r7, #16
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fe fefc 	bl	80133d8 <dir_register>
 80145e0:	4603      	mov	r3, r0
 80145e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 80145e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d120      	bne.n	8014630 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80145ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80145f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145f4:	3316      	adds	r3, #22
 80145f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fe f868 	bl	80126ce <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014604:	4618      	mov	r0, r3
 8014606:	f7fe fe72 	bl	80132ee <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801460a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801460c:	330b      	adds	r3, #11
 801460e:	2210      	movs	r2, #16
 8014610:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	2201      	movs	r2, #1
 8014616:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014618:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801461c:	2b00      	cmp	r3, #0
 801461e:	d10e      	bne.n	801463e <f_mkdir+0x202>
					res = sync_fs(fs);
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	4618      	mov	r0, r3
 8014624:	f7fe f96e 	bl	8012904 <sync_fs>
 8014628:	4603      	mov	r3, r0
 801462a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801462e:	e006      	b.n	801463e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014630:	f107 0310 	add.w	r3, r7, #16
 8014634:	2200      	movs	r2, #0
 8014636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014638:	4618      	mov	r0, r3
 801463a:	f7fe fb81 	bl	8012d40 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801463e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8014642:	4618      	mov	r0, r3
 8014644:	3758      	adds	r7, #88	@ 0x58
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
	...

0801464c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801464c:	b590      	push	{r4, r7, lr}
 801464e:	b09d      	sub	sp, #116	@ 0x74
 8014650:	af00      	add	r7, sp, #0
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	607a      	str	r2, [r7, #4]
 8014656:	603b      	str	r3, [r7, #0]
 8014658:	460b      	mov	r3, r1
 801465a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 801465c:	2301      	movs	r3, #1
 801465e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014664:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014666:	f107 030c 	add.w	r3, r7, #12
 801466a:	4618      	mov	r0, r3
 801466c:	f7fe ffeb 	bl	8013646 <get_ldnumber>
 8014670:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014674:	2b00      	cmp	r3, #0
 8014676:	da02      	bge.n	801467e <f_mkfs+0x32>
 8014678:	230b      	movs	r3, #11
 801467a:	f000 bc0d 	b.w	8014e98 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801467e:	4a94      	ldr	r2, [pc, #592]	@ (80148d0 <f_mkfs+0x284>)
 8014680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d005      	beq.n	8014696 <f_mkfs+0x4a>
 801468a:	4a91      	ldr	r2, [pc, #580]	@ (80148d0 <f_mkfs+0x284>)
 801468c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801468e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014692:	2200      	movs	r2, #0
 8014694:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014698:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 801469c:	2300      	movs	r3, #0
 801469e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80146a2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7fd ff36 	bl	8012518 <disk_initialize>
 80146ac:	4603      	mov	r3, r0
 80146ae:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80146b2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80146b6:	f003 0301 	and.w	r3, r3, #1
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <f_mkfs+0x76>
 80146be:	2303      	movs	r3, #3
 80146c0:	e3ea      	b.n	8014e98 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80146c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80146c6:	f003 0304 	and.w	r3, r3, #4
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d001      	beq.n	80146d2 <f_mkfs+0x86>
 80146ce:	230a      	movs	r3, #10
 80146d0:	e3e2      	b.n	8014e98 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80146d2:	f107 0214 	add.w	r2, r7, #20
 80146d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80146da:	2103      	movs	r1, #3
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fd ff81 	bl	80125e4 <disk_ioctl>
 80146e2:	4603      	mov	r3, r0
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d10c      	bne.n	8014702 <f_mkfs+0xb6>
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d009      	beq.n	8014702 <f_mkfs+0xb6>
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80146f4:	d805      	bhi.n	8014702 <f_mkfs+0xb6>
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	1e5a      	subs	r2, r3, #1
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	4013      	ands	r3, r2
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d001      	beq.n	8014706 <f_mkfs+0xba>
 8014702:	2301      	movs	r3, #1
 8014704:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8014706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801470a:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d003      	beq.n	801471a <f_mkfs+0xce>
 8014712:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014714:	687a      	ldr	r2, [r7, #4]
 8014716:	429a      	cmp	r2, r3
 8014718:	d309      	bcc.n	801472e <f_mkfs+0xe2>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014720:	d805      	bhi.n	801472e <f_mkfs+0xe2>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	1e5a      	subs	r2, r3, #1
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	4013      	ands	r3, r2
 801472a:	2b00      	cmp	r3, #0
 801472c:	d001      	beq.n	8014732 <f_mkfs+0xe6>
 801472e:	2313      	movs	r3, #19
 8014730:	e3b2      	b.n	8014e98 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014732:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	fbb2 f3f3 	udiv	r3, r2, r3
 801473a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014740:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014742:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014746:	fbb2 f3f3 	udiv	r3, r2, r3
 801474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801474c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014750:	fb02 f303 	mul.w	r3, r2, r3
 8014754:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014758:	2b00      	cmp	r3, #0
 801475a:	d101      	bne.n	8014760 <f_mkfs+0x114>
 801475c:	230e      	movs	r3, #14
 801475e:	e39b      	b.n	8014e98 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014760:	f107 0210 	add.w	r2, r7, #16
 8014764:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014768:	2101      	movs	r1, #1
 801476a:	4618      	mov	r0, r3
 801476c:	f7fd ff3a 	bl	80125e4 <disk_ioctl>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	d001      	beq.n	801477a <f_mkfs+0x12e>
 8014776:	2301      	movs	r3, #1
 8014778:	e38e      	b.n	8014e98 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801477a:	7afb      	ldrb	r3, [r7, #11]
 801477c:	f003 0308 	and.w	r3, r3, #8
 8014780:	2b00      	cmp	r3, #0
 8014782:	d001      	beq.n	8014788 <f_mkfs+0x13c>
 8014784:	2300      	movs	r3, #0
 8014786:	e000      	b.n	801478a <f_mkfs+0x13e>
 8014788:	233f      	movs	r3, #63	@ 0x3f
 801478a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014790:	429a      	cmp	r2, r3
 8014792:	d901      	bls.n	8014798 <f_mkfs+0x14c>
 8014794:	230e      	movs	r3, #14
 8014796:	e37f      	b.n	8014e98 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014798:	693a      	ldr	r2, [r7, #16]
 801479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80147a4:	d801      	bhi.n	80147aa <f_mkfs+0x15e>
 80147a6:	230e      	movs	r3, #14
 80147a8:	e376      	b.n	8014e98 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2b80      	cmp	r3, #128	@ 0x80
 80147ae:	d901      	bls.n	80147b4 <f_mkfs+0x168>
 80147b0:	2313      	movs	r3, #19
 80147b2:	e371      	b.n	8014e98 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80147b4:	7afb      	ldrb	r3, [r7, #11]
 80147b6:	f003 0302 	and.w	r3, r3, #2
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d00d      	beq.n	80147da <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80147be:	7afb      	ldrb	r3, [r7, #11]
 80147c0:	f003 0307 	and.w	r3, r3, #7
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d004      	beq.n	80147d2 <f_mkfs+0x186>
 80147c8:	7afb      	ldrb	r3, [r7, #11]
 80147ca:	f003 0301 	and.w	r3, r3, #1
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d103      	bne.n	80147da <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80147d2:	2303      	movs	r3, #3
 80147d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80147d8:	e009      	b.n	80147ee <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80147da:	7afb      	ldrb	r3, [r7, #11]
 80147dc:	f003 0301 	and.w	r3, r3, #1
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d101      	bne.n	80147e8 <f_mkfs+0x19c>
 80147e4:	2313      	movs	r3, #19
 80147e6:	e357      	b.n	8014e98 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80147e8:	2302      	movs	r3, #2
 80147ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80147f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147f6:	2b03      	cmp	r3, #3
 80147f8:	d13c      	bne.n	8014874 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80147fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d11b      	bne.n	8014838 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	0c5b      	lsrs	r3, r3, #17
 8014804:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014806:	2300      	movs	r3, #0
 8014808:	64bb      	str	r3, [r7, #72]	@ 0x48
 801480a:	2301      	movs	r3, #1
 801480c:	653b      	str	r3, [r7, #80]	@ 0x50
 801480e:	e005      	b.n	801481c <f_mkfs+0x1d0>
 8014810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014812:	3301      	adds	r3, #1
 8014814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	653b      	str	r3, [r7, #80]	@ 0x50
 801481c:	4a2d      	ldr	r2, [pc, #180]	@ (80148d4 <f_mkfs+0x288>)
 801481e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d007      	beq.n	8014838 <f_mkfs+0x1ec>
 8014828:	4a2a      	ldr	r2, [pc, #168]	@ (80148d4 <f_mkfs+0x288>)
 801482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801482c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014830:	461a      	mov	r2, r3
 8014832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014834:	4293      	cmp	r3, r2
 8014836:	d2eb      	bcs.n	8014810 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014838:	693a      	ldr	r2, [r7, #16]
 801483a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014840:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8014842:	6a3b      	ldr	r3, [r7, #32]
 8014844:	3302      	adds	r3, #2
 8014846:	009a      	lsls	r2, r3, #2
 8014848:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801484a:	4413      	add	r3, r2
 801484c:	1e5a      	subs	r2, r3, #1
 801484e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014850:	fbb2 f3f3 	udiv	r3, r2, r3
 8014854:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8014856:	2320      	movs	r3, #32
 8014858:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 801485a:	2300      	movs	r3, #0
 801485c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801485e:	6a3b      	ldr	r3, [r7, #32]
 8014860:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014864:	4293      	cmp	r3, r2
 8014866:	d903      	bls.n	8014870 <f_mkfs+0x224>
 8014868:	6a3b      	ldr	r3, [r7, #32]
 801486a:	4a1b      	ldr	r2, [pc, #108]	@ (80148d8 <f_mkfs+0x28c>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d952      	bls.n	8014916 <f_mkfs+0x2ca>
 8014870:	230e      	movs	r3, #14
 8014872:	e311      	b.n	8014e98 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014876:	2b00      	cmp	r3, #0
 8014878:	d11b      	bne.n	80148b2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	0b1b      	lsrs	r3, r3, #12
 801487e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014880:	2300      	movs	r3, #0
 8014882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014884:	2301      	movs	r3, #1
 8014886:	653b      	str	r3, [r7, #80]	@ 0x50
 8014888:	e005      	b.n	8014896 <f_mkfs+0x24a>
 801488a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801488c:	3301      	adds	r3, #1
 801488e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	653b      	str	r3, [r7, #80]	@ 0x50
 8014896:	4a11      	ldr	r2, [pc, #68]	@ (80148dc <f_mkfs+0x290>)
 8014898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801489a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d007      	beq.n	80148b2 <f_mkfs+0x266>
 80148a2:	4a0e      	ldr	r2, [pc, #56]	@ (80148dc <f_mkfs+0x290>)
 80148a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148aa:	461a      	mov	r2, r3
 80148ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d2eb      	bcs.n	801488a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80148b2:	693a      	ldr	r2, [r7, #16]
 80148b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80148ba:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80148bc:	6a3b      	ldr	r3, [r7, #32]
 80148be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80148c2:	4293      	cmp	r3, r2
 80148c4:	d90c      	bls.n	80148e0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80148c6:	6a3b      	ldr	r3, [r7, #32]
 80148c8:	3302      	adds	r3, #2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80148ce:	e012      	b.n	80148f6 <f_mkfs+0x2aa>
 80148d0:	20001c44 	.word	0x20001c44
 80148d4:	0801caa8 	.word	0x0801caa8
 80148d8:	0ffffff5 	.word	0x0ffffff5
 80148dc:	0801cab8 	.word	0x0801cab8
				} else {
					fmt = FS_FAT12;
 80148e0:	2301      	movs	r3, #1
 80148e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80148e6:	6a3a      	ldr	r2, [r7, #32]
 80148e8:	4613      	mov	r3, r2
 80148ea:	005b      	lsls	r3, r3, #1
 80148ec:	4413      	add	r3, r2
 80148ee:	3301      	adds	r3, #1
 80148f0:	085b      	lsrs	r3, r3, #1
 80148f2:	3303      	adds	r3, #3
 80148f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80148f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80148f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148fa:	4413      	add	r3, r2
 80148fc:	1e5a      	subs	r2, r3, #1
 80148fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014900:	fbb2 f3f3 	udiv	r3, r2, r3
 8014904:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8014906:	2301      	movs	r3, #1
 8014908:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801490a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801490c:	015a      	lsls	r2, r3, #5
 801490e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014910:	fbb2 f3f3 	udiv	r3, r2, r3
 8014914:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8014916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801491a:	4413      	add	r3, r2
 801491c:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 801491e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014922:	fb03 f202 	mul.w	r2, r3, r2
 8014926:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014928:	4413      	add	r3, r2
 801492a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801492c:	4413      	add	r3, r2
 801492e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014930:	697a      	ldr	r2, [r7, #20]
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	4413      	add	r3, r2
 8014936:	1e5a      	subs	r2, r3, #1
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	425b      	negs	r3, r3
 801493c:	401a      	ands	r2, r3
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	1ad3      	subs	r3, r2, r3
 8014942:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014944:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014948:	2b03      	cmp	r3, #3
 801494a:	d108      	bne.n	801495e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 801494c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801494e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014950:	4413      	add	r3, r2
 8014952:	657b      	str	r3, [r7, #84]	@ 0x54
 8014954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014958:	4413      	add	r3, r2
 801495a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801495c:	e006      	b.n	801496c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801495e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014962:	fbb2 f3f3 	udiv	r3, r2, r3
 8014966:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014968:	4413      	add	r3, r2
 801496a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801496c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801496e:	011a      	lsls	r2, r3, #4
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	441a      	add	r2, r3
 8014974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014976:	1ad2      	subs	r2, r2, r3
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	429a      	cmp	r2, r3
 801497c:	d901      	bls.n	8014982 <f_mkfs+0x336>
 801497e:	230e      	movs	r3, #14
 8014980:	e28a      	b.n	8014e98 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014982:	693a      	ldr	r2, [r7, #16]
 8014984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014986:	1ad2      	subs	r2, r2, r3
 8014988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801498a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801498c:	fb01 f303 	mul.w	r3, r1, r3
 8014990:	1ad2      	subs	r2, r2, r3
 8014992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014994:	1ad2      	subs	r2, r2, r3
 8014996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014998:	fbb2 f3f3 	udiv	r3, r2, r3
 801499c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801499e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80149a2:	2b03      	cmp	r3, #3
 80149a4:	d10f      	bne.n	80149c6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80149a6:	6a3b      	ldr	r3, [r7, #32]
 80149a8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80149ac:	4293      	cmp	r3, r2
 80149ae:	d80a      	bhi.n	80149c6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d105      	bne.n	80149c2 <f_mkfs+0x376>
 80149b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149b8:	085b      	lsrs	r3, r3, #1
 80149ba:	607b      	str	r3, [r7, #4]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d144      	bne.n	8014a4c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80149c2:	230e      	movs	r3, #14
 80149c4:	e268      	b.n	8014e98 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80149c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80149ca:	2b02      	cmp	r3, #2
 80149cc:	d133      	bne.n	8014a36 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80149ce:	6a3b      	ldr	r3, [r7, #32]
 80149d0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80149d4:	4293      	cmp	r3, r2
 80149d6:	d91e      	bls.n	8014a16 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d107      	bne.n	80149ee <f_mkfs+0x3a2>
 80149de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149e0:	005b      	lsls	r3, r3, #1
 80149e2:	2b40      	cmp	r3, #64	@ 0x40
 80149e4:	d803      	bhi.n	80149ee <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80149e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149e8:	005b      	lsls	r3, r3, #1
 80149ea:	607b      	str	r3, [r7, #4]
 80149ec:	e033      	b.n	8014a56 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80149ee:	7afb      	ldrb	r3, [r7, #11]
 80149f0:	f003 0302 	and.w	r3, r3, #2
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d003      	beq.n	8014a00 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80149f8:	2303      	movs	r3, #3
 80149fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80149fe:	e02a      	b.n	8014a56 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d105      	bne.n	8014a12 <f_mkfs+0x3c6>
 8014a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	607b      	str	r3, [r7, #4]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2b80      	cmp	r3, #128	@ 0x80
 8014a10:	d91e      	bls.n	8014a50 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014a12:	230e      	movs	r3, #14
 8014a14:	e240      	b.n	8014e98 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014a16:	6a3b      	ldr	r3, [r7, #32]
 8014a18:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d80a      	bhi.n	8014a36 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d105      	bne.n	8014a32 <f_mkfs+0x3e6>
 8014a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a28:	005b      	lsls	r3, r3, #1
 8014a2a:	607b      	str	r3, [r7, #4]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b80      	cmp	r3, #128	@ 0x80
 8014a30:	d910      	bls.n	8014a54 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8014a32:	230e      	movs	r3, #14
 8014a34:	e230      	b.n	8014e98 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014a36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014a3a:	2b01      	cmp	r3, #1
 8014a3c:	d10c      	bne.n	8014a58 <f_mkfs+0x40c>
 8014a3e:	6a3b      	ldr	r3, [r7, #32]
 8014a40:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d907      	bls.n	8014a58 <f_mkfs+0x40c>
 8014a48:	230e      	movs	r3, #14
 8014a4a:	e225      	b.n	8014e98 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014a4c:	bf00      	nop
 8014a4e:	e6ce      	b.n	80147ee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a50:	bf00      	nop
 8014a52:	e6cc      	b.n	80147ee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a54:	bf00      	nop
			pau = au;
 8014a56:	e6ca      	b.n	80147ee <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8014a58:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8014a5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	2100      	movs	r1, #0
 8014a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a62:	f7fd fe81 	bl	8012768 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014a66:	220b      	movs	r2, #11
 8014a68:	49b2      	ldr	r1, [pc, #712]	@ (8014d34 <f_mkfs+0x6e8>)
 8014a6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a6c:	f7fd fe5b 	bl	8012726 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a72:	330b      	adds	r3, #11
 8014a74:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014a76:	4611      	mov	r1, r2
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7fd fe0d 	bl	8012698 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a80:	330d      	adds	r3, #13
 8014a82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a84:	b2d2      	uxtb	r2, r2
 8014a86:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a8a:	330e      	adds	r3, #14
 8014a8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a8e:	b292      	uxth	r2, r2
 8014a90:	4611      	mov	r1, r2
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fd fe00 	bl	8012698 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a9a:	3310      	adds	r3, #16
 8014a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014a9e:	b2d2      	uxtb	r2, r2
 8014aa0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa4:	f103 0211 	add.w	r2, r3, #17
 8014aa8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014aac:	2b03      	cmp	r3, #3
 8014aae:	d002      	beq.n	8014ab6 <f_mkfs+0x46a>
 8014ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	e000      	b.n	8014ab8 <f_mkfs+0x46c>
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	4619      	mov	r1, r3
 8014aba:	4610      	mov	r0, r2
 8014abc:	f7fd fdec 	bl	8012698 <st_word>
		if (sz_vol < 0x10000) {
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014ac6:	d208      	bcs.n	8014ada <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aca:	3313      	adds	r3, #19
 8014acc:	693a      	ldr	r2, [r7, #16]
 8014ace:	b292      	uxth	r2, r2
 8014ad0:	4611      	mov	r1, r2
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fd fde0 	bl	8012698 <st_word>
 8014ad8:	e006      	b.n	8014ae8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8014ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014adc:	3320      	adds	r3, #32
 8014ade:	693a      	ldr	r2, [r7, #16]
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fd fdf3 	bl	80126ce <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aea:	3315      	adds	r3, #21
 8014aec:	22f8      	movs	r2, #248	@ 0xf8
 8014aee:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af2:	3318      	adds	r3, #24
 8014af4:	213f      	movs	r1, #63	@ 0x3f
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fd fdce 	bl	8012698 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afe:	331a      	adds	r3, #26
 8014b00:	21ff      	movs	r1, #255	@ 0xff
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fd fdc8 	bl	8012698 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b0a:	331c      	adds	r3, #28
 8014b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fd fddd 	bl	80126ce <st_dword>
		if (fmt == FS_FAT32) {
 8014b14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b18:	2b03      	cmp	r3, #3
 8014b1a:	d131      	bne.n	8014b80 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8014b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b1e:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014b22:	f7fd f8f9 	bl	8011d18 <get_fattime>
 8014b26:	4603      	mov	r3, r0
 8014b28:	4619      	mov	r1, r3
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	f7fd fdcf 	bl	80126ce <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b32:	3324      	adds	r3, #36	@ 0x24
 8014b34:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7fd fdc9 	bl	80126ce <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8014b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b3e:	332c      	adds	r3, #44	@ 0x2c
 8014b40:	2102      	movs	r1, #2
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7fd fdc3 	bl	80126ce <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4a:	3330      	adds	r3, #48	@ 0x30
 8014b4c:	2101      	movs	r1, #1
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7fd fda2 	bl	8012698 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b56:	3332      	adds	r3, #50	@ 0x32
 8014b58:	2106      	movs	r1, #6
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fd fd9c 	bl	8012698 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b62:	3340      	adds	r3, #64	@ 0x40
 8014b64:	2280      	movs	r2, #128	@ 0x80
 8014b66:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b6a:	3342      	adds	r3, #66	@ 0x42
 8014b6c:	2229      	movs	r2, #41	@ 0x29
 8014b6e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b72:	3347      	adds	r3, #71	@ 0x47
 8014b74:	2213      	movs	r2, #19
 8014b76:	4970      	ldr	r1, [pc, #448]	@ (8014d38 <f_mkfs+0x6ec>)
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7fd fdd4 	bl	8012726 <mem_cpy>
 8014b7e:	e020      	b.n	8014bc2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b82:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014b86:	f7fd f8c7 	bl	8011d18 <get_fattime>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f7fd fd9d 	bl	80126ce <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b96:	3316      	adds	r3, #22
 8014b98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014b9a:	b292      	uxth	r2, r2
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7fd fd7a 	bl	8012698 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba6:	3324      	adds	r3, #36	@ 0x24
 8014ba8:	2280      	movs	r2, #128	@ 0x80
 8014baa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bae:	3326      	adds	r3, #38	@ 0x26
 8014bb0:	2229      	movs	r2, #41	@ 0x29
 8014bb2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb6:	332b      	adds	r3, #43	@ 0x2b
 8014bb8:	2213      	movs	r2, #19
 8014bba:	4960      	ldr	r1, [pc, #384]	@ (8014d3c <f_mkfs+0x6f0>)
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7fd fdb2 	bl	8012726 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014bc8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fd fd63 	bl	8012698 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014bd2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014bda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014bdc:	f7fd fce2 	bl	80125a4 <disk_write>
 8014be0:	4603      	mov	r3, r0
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d001      	beq.n	8014bea <f_mkfs+0x59e>
 8014be6:	2301      	movs	r3, #1
 8014be8:	e156      	b.n	8014e98 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014bea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014bee:	2b03      	cmp	r3, #3
 8014bf0:	d140      	bne.n	8014c74 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bf4:	1d9a      	adds	r2, r3, #6
 8014bf6:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014bfe:	f7fd fcd1 	bl	80125a4 <disk_write>
			mem_set(buf, 0, ss);
 8014c02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c04:	461a      	mov	r2, r3
 8014c06:	2100      	movs	r1, #0
 8014c08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c0a:	f7fd fdad 	bl	8012768 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014c0e:	494c      	ldr	r1, [pc, #304]	@ (8014d40 <f_mkfs+0x6f4>)
 8014c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c12:	f7fd fd5c 	bl	80126ce <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c18:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014c1c:	4949      	ldr	r1, [pc, #292]	@ (8014d44 <f_mkfs+0x6f8>)
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7fd fd55 	bl	80126ce <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c26:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	3b01      	subs	r3, #1
 8014c2e:	4619      	mov	r1, r3
 8014c30:	4610      	mov	r0, r2
 8014c32:	f7fd fd4c 	bl	80126ce <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c38:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014c3c:	2102      	movs	r1, #2
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fd fd45 	bl	80126ce <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c46:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014c4a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fd fd22 	bl	8012698 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c56:	1dda      	adds	r2, r3, #7
 8014c58:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c60:	f7fd fca0 	bl	80125a4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c66:	1c5a      	adds	r2, r3, #1
 8014c68:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c70:	f7fd fc98 	bl	80125a4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014c74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c76:	2100      	movs	r1, #0
 8014c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c7a:	f7fd fd75 	bl	8012768 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c80:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014c82:	2300      	movs	r3, #0
 8014c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c86:	e04b      	b.n	8014d20 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014c88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c8c:	2b03      	cmp	r3, #3
 8014c8e:	d113      	bne.n	8014cb8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014c90:	f06f 0107 	mvn.w	r1, #7
 8014c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c96:	f7fd fd1a 	bl	80126ce <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c9c:	3304      	adds	r3, #4
 8014c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7fd fd13 	bl	80126ce <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014caa:	3308      	adds	r3, #8
 8014cac:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fd fd0c 	bl	80126ce <st_dword>
 8014cb6:	e00b      	b.n	8014cd0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014cb8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d101      	bne.n	8014cc4 <f_mkfs+0x678>
 8014cc0:	4b21      	ldr	r3, [pc, #132]	@ (8014d48 <f_mkfs+0x6fc>)
 8014cc2:	e001      	b.n	8014cc8 <f_mkfs+0x67c>
 8014cc4:	f06f 0307 	mvn.w	r3, #7
 8014cc8:	4619      	mov	r1, r3
 8014cca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ccc:	f7fd fcff 	bl	80126ce <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014cd2:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014cd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd8:	4293      	cmp	r3, r2
 8014cda:	bf28      	it	cs
 8014cdc:	4613      	movcs	r3, r2
 8014cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014ce0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014ce6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014ce8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014cea:	f7fd fc5b 	bl	80125a4 <disk_write>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d001      	beq.n	8014cf8 <f_mkfs+0x6ac>
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	e0cf      	b.n	8014e98 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014cf8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d00:	f7fd fd32 	bl	8012768 <mem_set>
				sect += n; nsect -= n;
 8014d04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d08:	4413      	add	r3, r2
 8014d0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014d0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d10:	1ad3      	subs	r3, r2, r3
 8014d12:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d1dc      	bne.n	8014cd4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d3af      	bcc.n	8014c88 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014d28:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d2c:	2b03      	cmp	r3, #3
 8014d2e:	d10d      	bne.n	8014d4c <f_mkfs+0x700>
 8014d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d32:	e00c      	b.n	8014d4e <f_mkfs+0x702>
 8014d34:	0801c9ac 	.word	0x0801c9ac
 8014d38:	0801c9b8 	.word	0x0801c9b8
 8014d3c:	0801c9cc 	.word	0x0801c9cc
 8014d40:	41615252 	.word	0x41615252
 8014d44:	61417272 	.word	0x61417272
 8014d48:	00fffff8 	.word	0x00fffff8
 8014d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014d4e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d54:	4293      	cmp	r3, r2
 8014d56:	bf28      	it	cs
 8014d58:	4613      	movcs	r3, r2
 8014d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014d5c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014d66:	f7fd fc1d 	bl	80125a4 <disk_write>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d001      	beq.n	8014d74 <f_mkfs+0x728>
 8014d70:	2301      	movs	r3, #1
 8014d72:	e091      	b.n	8014e98 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014d74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d78:	4413      	add	r3, r2
 8014d7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8014d7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d80:	1ad3      	subs	r3, r2, r3
 8014d82:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014d84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d1e2      	bne.n	8014d50 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d8e:	2b03      	cmp	r3, #3
 8014d90:	d103      	bne.n	8014d9a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014d92:	230c      	movs	r3, #12
 8014d94:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014d98:	e010      	b.n	8014dbc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014d9a:	693b      	ldr	r3, [r7, #16]
 8014d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014da0:	d303      	bcc.n	8014daa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014da2:	2306      	movs	r3, #6
 8014da4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014da8:	e008      	b.n	8014dbc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014daa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014dae:	2b02      	cmp	r3, #2
 8014db0:	d101      	bne.n	8014db6 <f_mkfs+0x76a>
 8014db2:	2304      	movs	r3, #4
 8014db4:	e000      	b.n	8014db8 <f_mkfs+0x76c>
 8014db6:	2301      	movs	r3, #1
 8014db8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014dbc:	7afb      	ldrb	r3, [r7, #11]
 8014dbe:	f003 0308 	and.w	r3, r3, #8
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d15b      	bne.n	8014e7e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014dc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014dc8:	461a      	mov	r2, r3
 8014dca:	2100      	movs	r1, #0
 8014dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014dce:	f7fd fccb 	bl	8012768 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dd4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014dd8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7fd fc5b 	bl	8012698 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014de8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014dea:	69bb      	ldr	r3, [r7, #24]
 8014dec:	2200      	movs	r2, #0
 8014dee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	3301      	adds	r3, #1
 8014df4:	2201      	movs	r2, #1
 8014df6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	3302      	adds	r3, #2
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	3303      	adds	r3, #3
 8014e04:	2200      	movs	r2, #0
 8014e06:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	3304      	adds	r3, #4
 8014e0c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014e10:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014e12:	693a      	ldr	r2, [r7, #16]
 8014e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e16:	441a      	add	r2, r3
 8014e18:	4b21      	ldr	r3, [pc, #132]	@ (8014ea0 <f_mkfs+0x854>)
 8014e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8014e1e:	1ad2      	subs	r2, r2, r3
 8014e20:	0852      	lsrs	r2, r2, #1
 8014e22:	4413      	add	r3, r2
 8014e24:	0b5b      	lsrs	r3, r3, #13
 8014e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	3305      	adds	r3, #5
 8014e2c:	22fe      	movs	r2, #254	@ 0xfe
 8014e2e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e32:	089b      	lsrs	r3, r3, #2
 8014e34:	b2da      	uxtb	r2, r3
 8014e36:	69bb      	ldr	r3, [r7, #24]
 8014e38:	3306      	adds	r3, #6
 8014e3a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014e3e:	b2d2      	uxtb	r2, r2
 8014e40:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	3307      	adds	r3, #7
 8014e46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014e48:	b2d2      	uxtb	r2, r2
 8014e4a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014e4c:	69bb      	ldr	r3, [r7, #24]
 8014e4e:	3308      	adds	r3, #8
 8014e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7fd fc3b 	bl	80126ce <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	330c      	adds	r3, #12
 8014e5c:	693a      	ldr	r2, [r7, #16]
 8014e5e:	4611      	mov	r1, r2
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7fd fc34 	bl	80126ce <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014e66:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014e70:	f7fd fb98 	bl	80125a4 <disk_write>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <f_mkfs+0x832>
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e00c      	b.n	8014e98 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014e7e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014e82:	2200      	movs	r2, #0
 8014e84:	2100      	movs	r1, #0
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fd fbac 	bl	80125e4 <disk_ioctl>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d001      	beq.n	8014e96 <f_mkfs+0x84a>
 8014e92:	2301      	movs	r3, #1
 8014e94:	e000      	b.n	8014e98 <f_mkfs+0x84c>

	return FR_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3774      	adds	r7, #116	@ 0x74
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd90      	pop	{r4, r7, pc}
 8014ea0:	0515565b 	.word	0x0515565b

08014ea4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b087      	sub	sp, #28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	4613      	mov	r3, r2
 8014eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014eba:	4b1f      	ldr	r3, [pc, #124]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014ebc:	7a5b      	ldrb	r3, [r3, #9]
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d131      	bne.n	8014f28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014ec6:	7a5b      	ldrb	r3, [r3, #9]
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	461a      	mov	r2, r3
 8014ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014ece:	2100      	movs	r1, #0
 8014ed0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014ed2:	4b19      	ldr	r3, [pc, #100]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014ed4:	7a5b      	ldrb	r3, [r3, #9]
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	4a17      	ldr	r2, [pc, #92]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	4413      	add	r3, r2
 8014ede:	68fa      	ldr	r2, [r7, #12]
 8014ee0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014ee2:	4b15      	ldr	r3, [pc, #84]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014ee4:	7a5b      	ldrb	r3, [r3, #9]
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	461a      	mov	r2, r3
 8014eea:	4b13      	ldr	r3, [pc, #76]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014eec:	4413      	add	r3, r2
 8014eee:	79fa      	ldrb	r2, [r7, #7]
 8014ef0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014ef2:	4b11      	ldr	r3, [pc, #68]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014ef4:	7a5b      	ldrb	r3, [r3, #9]
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	1c5a      	adds	r2, r3, #1
 8014efa:	b2d1      	uxtb	r1, r2
 8014efc:	4a0e      	ldr	r2, [pc, #56]	@ (8014f38 <FATFS_LinkDriverEx+0x94>)
 8014efe:	7251      	strb	r1, [r2, #9]
 8014f00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014f02:	7dbb      	ldrb	r3, [r7, #22]
 8014f04:	3330      	adds	r3, #48	@ 0x30
 8014f06:	b2da      	uxtb	r2, r3
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	3301      	adds	r3, #1
 8014f10:	223a      	movs	r2, #58	@ 0x3a
 8014f12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	3302      	adds	r3, #2
 8014f18:	222f      	movs	r2, #47	@ 0x2f
 8014f1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	3303      	adds	r3, #3
 8014f20:	2200      	movs	r2, #0
 8014f22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014f24:	2300      	movs	r3, #0
 8014f26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	371c      	adds	r7, #28
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f34:	4770      	bx	lr
 8014f36:	bf00      	nop
 8014f38:	20001c4c 	.word	0x20001c4c

08014f3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014f46:	2200      	movs	r2, #0
 8014f48:	6839      	ldr	r1, [r7, #0]
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7ff ffaa 	bl	8014ea4 <FATFS_LinkDriverEx>
 8014f50:	4603      	mov	r3, r0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014f5a:	b480      	push	{r7}
 8014f5c:	b085      	sub	sp, #20
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	4603      	mov	r3, r0
 8014f62:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014f64:	2300      	movs	r3, #0
 8014f66:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014f6c:	2b84      	cmp	r3, #132	@ 0x84
 8014f6e:	d005      	beq.n	8014f7c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014f70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	4413      	add	r3, r2
 8014f78:	3303      	adds	r3, #3
 8014f7a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3714      	adds	r7, #20
 8014f82:	46bd      	mov	sp, r7
 8014f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f88:	4770      	bx	lr

08014f8a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014f8a:	b480      	push	{r7}
 8014f8c:	b083      	sub	sp, #12
 8014f8e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f90:	f3ef 8305 	mrs	r3, IPSR
 8014f94:	607b      	str	r3, [r7, #4]
  return(result);
 8014f96:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	bf14      	ite	ne
 8014f9c:	2301      	movne	r3, #1
 8014f9e:	2300      	moveq	r3, #0
 8014fa0:	b2db      	uxtb	r3, r3
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	370c      	adds	r7, #12
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fac:	4770      	bx	lr

08014fae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014fae:	b580      	push	{r7, lr}
 8014fb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014fb2:	f001 f9cd 	bl	8016350 <vTaskStartScheduler>
  
  return osOK;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014fc0:	f001 fe2e 	bl	8016c20 <xTaskGetSchedulerState>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d101      	bne.n	8014fce <osKernelRunning+0x12>
    return 0;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	e000      	b.n	8014fd0 <osKernelRunning+0x14>
  else
    return 1;
 8014fce:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014fd8:	f7ff ffd7 	bl	8014f8a <inHandlerMode>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d003      	beq.n	8014fea <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014fe2:	f001 fad9 	bl	8016598 <xTaskGetTickCountFromISR>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	e002      	b.n	8014ff0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014fea:	f001 fac5 	bl	8016578 <xTaskGetTickCount>
 8014fee:	4603      	mov	r3, r0
  }
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ff6:	b089      	sub	sp, #36	@ 0x24
 8014ff8:	af04      	add	r7, sp, #16
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	695b      	ldr	r3, [r3, #20]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d020      	beq.n	8015048 <osThreadCreate+0x54>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	699b      	ldr	r3, [r3, #24]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d01c      	beq.n	8015048 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	685c      	ldr	r4, [r3, #4]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	691e      	ldr	r6, [r3, #16]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015020:	4618      	mov	r0, r3
 8015022:	f7ff ff9a 	bl	8014f5a <makeFreeRtosPriority>
 8015026:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	695b      	ldr	r3, [r3, #20]
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015030:	9202      	str	r2, [sp, #8]
 8015032:	9301      	str	r3, [sp, #4]
 8015034:	9100      	str	r1, [sp, #0]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	4632      	mov	r2, r6
 801503a:	4629      	mov	r1, r5
 801503c:	4620      	mov	r0, r4
 801503e:	f000 ffa5 	bl	8015f8c <xTaskCreateStatic>
 8015042:	4603      	mov	r3, r0
 8015044:	60fb      	str	r3, [r7, #12]
 8015046:	e01c      	b.n	8015082 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	685c      	ldr	r4, [r3, #4]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015054:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801505c:	4618      	mov	r0, r3
 801505e:	f7ff ff7c 	bl	8014f5a <makeFreeRtosPriority>
 8015062:	4602      	mov	r2, r0
 8015064:	f107 030c 	add.w	r3, r7, #12
 8015068:	9301      	str	r3, [sp, #4]
 801506a:	9200      	str	r2, [sp, #0]
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	4632      	mov	r2, r6
 8015070:	4629      	mov	r1, r5
 8015072:	4620      	mov	r0, r4
 8015074:	f000 fff0 	bl	8016058 <xTaskCreate>
 8015078:	4603      	mov	r3, r0
 801507a:	2b01      	cmp	r3, #1
 801507c:	d001      	beq.n	8015082 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801507e:	2300      	movs	r3, #0
 8015080:	e000      	b.n	8015084 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015082:	68fb      	ldr	r3, [r7, #12]
}
 8015084:	4618      	mov	r0, r3
 8015086:	3714      	adds	r7, #20
 8015088:	46bd      	mov	sp, r7
 801508a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801508c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d001      	beq.n	80150a2 <osDelay+0x16>
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	e000      	b.n	80150a4 <osDelay+0x18>
 80150a2:	2301      	movs	r3, #1
 80150a4:	4618      	mov	r0, r3
 80150a6:	f001 f91b 	bl	80162e0 <vTaskDelay>
  
  return osOK;
 80150aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3710      	adds	r7, #16
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80150b4:	b590      	push	{r4, r7, lr}
 80150b6:	b085      	sub	sp, #20
 80150b8:	af02      	add	r7, sp, #8
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	689b      	ldr	r3, [r3, #8]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d011      	beq.n	80150ea <osMessageCreate+0x36>
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	68db      	ldr	r3, [r3, #12]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d00d      	beq.n	80150ea <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6818      	ldr	r0, [r3, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6859      	ldr	r1, [r3, #4]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	689a      	ldr	r2, [r3, #8]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	2400      	movs	r4, #0
 80150e0:	9400      	str	r4, [sp, #0]
 80150e2:	f000 f9f9 	bl	80154d8 <xQueueGenericCreateStatic>
 80150e6:	4603      	mov	r3, r0
 80150e8:	e008      	b.n	80150fc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6818      	ldr	r0, [r3, #0]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	2200      	movs	r2, #0
 80150f4:	4619      	mov	r1, r3
 80150f6:	f000 fa76 	bl	80155e6 <xQueueGenericCreate>
 80150fa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	370c      	adds	r7, #12
 8015100:	46bd      	mov	sp, r7
 8015102:	bd90      	pop	{r4, r7, pc}

08015104 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b086      	sub	sp, #24
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015110:	2300      	movs	r3, #0
 8015112:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d101      	bne.n	8015122 <osMessagePut+0x1e>
    ticks = 1;
 801511e:	2301      	movs	r3, #1
 8015120:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8015122:	f7ff ff32 	bl	8014f8a <inHandlerMode>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d018      	beq.n	801515e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801512c:	f107 0210 	add.w	r2, r7, #16
 8015130:	f107 0108 	add.w	r1, r7, #8
 8015134:	2300      	movs	r3, #0
 8015136:	68f8      	ldr	r0, [r7, #12]
 8015138:	f000 fbc2 	bl	80158c0 <xQueueGenericSendFromISR>
 801513c:	4603      	mov	r3, r0
 801513e:	2b01      	cmp	r3, #1
 8015140:	d001      	beq.n	8015146 <osMessagePut+0x42>
      return osErrorOS;
 8015142:	23ff      	movs	r3, #255	@ 0xff
 8015144:	e018      	b.n	8015178 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d014      	beq.n	8015176 <osMessagePut+0x72>
 801514c:	4b0c      	ldr	r3, [pc, #48]	@ (8015180 <osMessagePut+0x7c>)
 801514e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015152:	601a      	str	r2, [r3, #0]
 8015154:	f3bf 8f4f 	dsb	sy
 8015158:	f3bf 8f6f 	isb	sy
 801515c:	e00b      	b.n	8015176 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801515e:	f107 0108 	add.w	r1, r7, #8
 8015162:	2300      	movs	r3, #0
 8015164:	697a      	ldr	r2, [r7, #20]
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f000 faa0 	bl	80156ac <xQueueGenericSend>
 801516c:	4603      	mov	r3, r0
 801516e:	2b01      	cmp	r3, #1
 8015170:	d001      	beq.n	8015176 <osMessagePut+0x72>
      return osErrorOS;
 8015172:	23ff      	movs	r3, #255	@ 0xff
 8015174:	e000      	b.n	8015178 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8015176:	2300      	movs	r3, #0
}
 8015178:	4618      	mov	r0, r3
 801517a:	3718      	adds	r7, #24
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	e000ed04 	.word	0xe000ed04

08015184 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015184:	b590      	push	{r4, r7, lr}
 8015186:	b08b      	sub	sp, #44	@ 0x2c
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015194:	2300      	movs	r3, #0
 8015196:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d10a      	bne.n	80151b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801519e:	2380      	movs	r3, #128	@ 0x80
 80151a0:	617b      	str	r3, [r7, #20]
    return event;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	461c      	mov	r4, r3
 80151a6:	f107 0314 	add.w	r3, r7, #20
 80151aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80151ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80151b2:	e054      	b.n	801525e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80151b4:	2300      	movs	r3, #0
 80151b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80151b8:	2300      	movs	r3, #0
 80151ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c2:	d103      	bne.n	80151cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80151c4:	f04f 33ff 	mov.w	r3, #4294967295
 80151c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80151ca:	e009      	b.n	80151e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d006      	beq.n	80151e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80151d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d101      	bne.n	80151e0 <osMessageGet+0x5c>
      ticks = 1;
 80151dc:	2301      	movs	r3, #1
 80151de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80151e0:	f7ff fed3 	bl	8014f8a <inHandlerMode>
 80151e4:	4603      	mov	r3, r0
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d01c      	beq.n	8015224 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80151ea:	f107 0220 	add.w	r2, r7, #32
 80151ee:	f107 0314 	add.w	r3, r7, #20
 80151f2:	3304      	adds	r3, #4
 80151f4:	4619      	mov	r1, r3
 80151f6:	68b8      	ldr	r0, [r7, #8]
 80151f8:	f000 fcee 	bl	8015bd8 <xQueueReceiveFromISR>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b01      	cmp	r3, #1
 8015200:	d102      	bne.n	8015208 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8015202:	2310      	movs	r3, #16
 8015204:	617b      	str	r3, [r7, #20]
 8015206:	e001      	b.n	801520c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015208:	2300      	movs	r3, #0
 801520a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801520c:	6a3b      	ldr	r3, [r7, #32]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d01d      	beq.n	801524e <osMessageGet+0xca>
 8015212:	4b15      	ldr	r3, [pc, #84]	@ (8015268 <osMessageGet+0xe4>)
 8015214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015218:	601a      	str	r2, [r3, #0]
 801521a:	f3bf 8f4f 	dsb	sy
 801521e:	f3bf 8f6f 	isb	sy
 8015222:	e014      	b.n	801524e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015224:	f107 0314 	add.w	r3, r7, #20
 8015228:	3304      	adds	r3, #4
 801522a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801522c:	4619      	mov	r1, r3
 801522e:	68b8      	ldr	r0, [r7, #8]
 8015230:	f000 fbea 	bl	8015a08 <xQueueReceive>
 8015234:	4603      	mov	r3, r0
 8015236:	2b01      	cmp	r3, #1
 8015238:	d102      	bne.n	8015240 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801523a:	2310      	movs	r3, #16
 801523c:	617b      	str	r3, [r7, #20]
 801523e:	e006      	b.n	801524e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015242:	2b00      	cmp	r3, #0
 8015244:	d101      	bne.n	801524a <osMessageGet+0xc6>
 8015246:	2300      	movs	r3, #0
 8015248:	e000      	b.n	801524c <osMessageGet+0xc8>
 801524a:	2340      	movs	r3, #64	@ 0x40
 801524c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	461c      	mov	r4, r3
 8015252:	f107 0314 	add.w	r3, r7, #20
 8015256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801525a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	372c      	adds	r7, #44	@ 0x2c
 8015262:	46bd      	mov	sp, r7
 8015264:	bd90      	pop	{r4, r7, pc}
 8015266:	bf00      	nop
 8015268:	e000ed04 	.word	0xe000ed04

0801526c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8015274:	f7ff fe89 	bl	8014f8a <inHandlerMode>
 8015278:	4603      	mov	r3, r0
 801527a:	2b00      	cmp	r3, #0
 801527c:	d004      	beq.n	8015288 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f000 fd53 	bl	8015d2a <uxQueueMessagesWaitingFromISR>
 8015284:	4603      	mov	r3, r0
 8015286:	e003      	b.n	8015290 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f000 fd2d 	bl	8015ce8 <uxQueueMessagesWaiting>
 801528e:	4603      	mov	r3, r0
  }
}
 8015290:	4618      	mov	r0, r3
 8015292:	3708      	adds	r7, #8
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}

08015298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015298:	b480      	push	{r7}
 801529a:	b083      	sub	sp, #12
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f103 0208 	add.w	r2, r3, #8
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f04f 32ff 	mov.w	r2, #4294967295
 80152b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f103 0208 	add.w	r2, r3, #8
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f103 0208 	add.w	r2, r3, #8
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2200      	movs	r2, #0
 80152ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80152cc:	bf00      	nop
 80152ce:	370c      	adds	r7, #12
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr

080152d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80152d8:	b480      	push	{r7}
 80152da:	b083      	sub	sp, #12
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2200      	movs	r2, #0
 80152e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80152e6:	bf00      	nop
 80152e8:	370c      	adds	r7, #12
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80152f2:	b480      	push	{r7}
 80152f4:	b085      	sub	sp, #20
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	689a      	ldr	r2, [r3, #8]
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	689b      	ldr	r3, [r3, #8]
 8015314:	683a      	ldr	r2, [r7, #0]
 8015316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	1c5a      	adds	r2, r3, #1
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	601a      	str	r2, [r3, #0]
}
 801532e:	bf00      	nop
 8015330:	3714      	adds	r7, #20
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr

0801533a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801533a:	b480      	push	{r7}
 801533c:	b085      	sub	sp, #20
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015350:	d103      	bne.n	801535a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	691b      	ldr	r3, [r3, #16]
 8015356:	60fb      	str	r3, [r7, #12]
 8015358:	e00c      	b.n	8015374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	3308      	adds	r3, #8
 801535e:	60fb      	str	r3, [r7, #12]
 8015360:	e002      	b.n	8015368 <vListInsert+0x2e>
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	685b      	ldr	r3, [r3, #4]
 8015366:	60fb      	str	r3, [r7, #12]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	68ba      	ldr	r2, [r7, #8]
 8015370:	429a      	cmp	r2, r3
 8015372:	d2f6      	bcs.n	8015362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	685a      	ldr	r2, [r3, #4]
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	683a      	ldr	r2, [r7, #0]
 8015382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	68fa      	ldr	r2, [r7, #12]
 8015388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	683a      	ldr	r2, [r7, #0]
 801538e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	1c5a      	adds	r2, r3, #1
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	601a      	str	r2, [r3, #0]
}
 80153a0:	bf00      	nop
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	691b      	ldr	r3, [r3, #16]
 80153b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	6892      	ldr	r2, [r2, #8]
 80153c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	689b      	ldr	r3, [r3, #8]
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	6852      	ldr	r2, [r2, #4]
 80153cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d103      	bne.n	80153e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	689a      	ldr	r2, [r3, #8]
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2200      	movs	r2, #0
 80153e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	1e5a      	subs	r2, r3, #1
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3714      	adds	r7, #20
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d10d      	bne.n	8015430 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015418:	b672      	cpsid	i
 801541a:	f383 8811 	msr	BASEPRI, r3
 801541e:	f3bf 8f6f 	isb	sy
 8015422:	f3bf 8f4f 	dsb	sy
 8015426:	b662      	cpsie	i
 8015428:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801542a:	bf00      	nop
 801542c:	bf00      	nop
 801542e:	e7fd      	b.n	801542c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015430:	f001 fe14 	bl	801705c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801543c:	68f9      	ldr	r1, [r7, #12]
 801543e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015440:	fb01 f303 	mul.w	r3, r1, r3
 8015444:	441a      	add	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	2200      	movs	r2, #0
 801544e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015460:	3b01      	subs	r3, #1
 8015462:	68f9      	ldr	r1, [r7, #12]
 8015464:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015466:	fb01 f303 	mul.w	r3, r1, r3
 801546a:	441a      	add	r2, r3
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	22ff      	movs	r2, #255	@ 0xff
 8015474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	22ff      	movs	r2, #255	@ 0xff
 801547c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d114      	bne.n	80154b0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	691b      	ldr	r3, [r3, #16]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d01a      	beq.n	80154c4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	3310      	adds	r3, #16
 8015492:	4618      	mov	r0, r3
 8015494:	f001 f9fa 	bl	801688c <xTaskRemoveFromEventList>
 8015498:	4603      	mov	r3, r0
 801549a:	2b00      	cmp	r3, #0
 801549c:	d012      	beq.n	80154c4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801549e:	4b0d      	ldr	r3, [pc, #52]	@ (80154d4 <xQueueGenericReset+0xd4>)
 80154a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80154a4:	601a      	str	r2, [r3, #0]
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	f3bf 8f6f 	isb	sy
 80154ae:	e009      	b.n	80154c4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	3310      	adds	r3, #16
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7ff feef 	bl	8015298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	3324      	adds	r3, #36	@ 0x24
 80154be:	4618      	mov	r0, r3
 80154c0:	f7ff feea 	bl	8015298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80154c4:	f001 fe00 	bl	80170c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80154c8:	2301      	movs	r3, #1
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3710      	adds	r7, #16
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	e000ed04 	.word	0xe000ed04

080154d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b08e      	sub	sp, #56	@ 0x38
 80154dc:	af02      	add	r7, sp, #8
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	607a      	str	r2, [r7, #4]
 80154e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d10d      	bne.n	8015508 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80154ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154f0:	b672      	cpsid	i
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	b662      	cpsie	i
 8015500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8015502:	bf00      	nop
 8015504:	bf00      	nop
 8015506:	e7fd      	b.n	8015504 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d10d      	bne.n	801552a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015512:	b672      	cpsid	i
 8015514:	f383 8811 	msr	BASEPRI, r3
 8015518:	f3bf 8f6f 	isb	sy
 801551c:	f3bf 8f4f 	dsb	sy
 8015520:	b662      	cpsie	i
 8015522:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015524:	bf00      	nop
 8015526:	bf00      	nop
 8015528:	e7fd      	b.n	8015526 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d002      	beq.n	8015536 <xQueueGenericCreateStatic+0x5e>
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d001      	beq.n	801553a <xQueueGenericCreateStatic+0x62>
 8015536:	2301      	movs	r3, #1
 8015538:	e000      	b.n	801553c <xQueueGenericCreateStatic+0x64>
 801553a:	2300      	movs	r3, #0
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10d      	bne.n	801555c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8015540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015544:	b672      	cpsid	i
 8015546:	f383 8811 	msr	BASEPRI, r3
 801554a:	f3bf 8f6f 	isb	sy
 801554e:	f3bf 8f4f 	dsb	sy
 8015552:	b662      	cpsie	i
 8015554:	623b      	str	r3, [r7, #32]
}
 8015556:	bf00      	nop
 8015558:	bf00      	nop
 801555a:	e7fd      	b.n	8015558 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d102      	bne.n	8015568 <xQueueGenericCreateStatic+0x90>
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d101      	bne.n	801556c <xQueueGenericCreateStatic+0x94>
 8015568:	2301      	movs	r3, #1
 801556a:	e000      	b.n	801556e <xQueueGenericCreateStatic+0x96>
 801556c:	2300      	movs	r3, #0
 801556e:	2b00      	cmp	r3, #0
 8015570:	d10d      	bne.n	801558e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8015572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015576:	b672      	cpsid	i
 8015578:	f383 8811 	msr	BASEPRI, r3
 801557c:	f3bf 8f6f 	isb	sy
 8015580:	f3bf 8f4f 	dsb	sy
 8015584:	b662      	cpsie	i
 8015586:	61fb      	str	r3, [r7, #28]
}
 8015588:	bf00      	nop
 801558a:	bf00      	nop
 801558c:	e7fd      	b.n	801558a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801558e:	2348      	movs	r3, #72	@ 0x48
 8015590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	2b48      	cmp	r3, #72	@ 0x48
 8015596:	d00d      	beq.n	80155b4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8015598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801559c:	b672      	cpsid	i
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	b662      	cpsie	i
 80155ac:	61bb      	str	r3, [r7, #24]
}
 80155ae:	bf00      	nop
 80155b0:	bf00      	nop
 80155b2:	e7fd      	b.n	80155b0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80155b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80155ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d00d      	beq.n	80155dc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80155c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c2:	2201      	movs	r2, #1
 80155c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80155cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ce:	9300      	str	r3, [sp, #0]
 80155d0:	4613      	mov	r3, r2
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	68b9      	ldr	r1, [r7, #8]
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f000 f848 	bl	801566c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80155dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80155de:	4618      	mov	r0, r3
 80155e0:	3730      	adds	r7, #48	@ 0x30
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b08a      	sub	sp, #40	@ 0x28
 80155ea:	af02      	add	r7, sp, #8
 80155ec:	60f8      	str	r0, [r7, #12]
 80155ee:	60b9      	str	r1, [r7, #8]
 80155f0:	4613      	mov	r3, r2
 80155f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d10d      	bne.n	8015616 <xQueueGenericCreate+0x30>
	__asm volatile
 80155fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155fe:	b672      	cpsid	i
 8015600:	f383 8811 	msr	BASEPRI, r3
 8015604:	f3bf 8f6f 	isb	sy
 8015608:	f3bf 8f4f 	dsb	sy
 801560c:	b662      	cpsie	i
 801560e:	613b      	str	r3, [r7, #16]
}
 8015610:	bf00      	nop
 8015612:	bf00      	nop
 8015614:	e7fd      	b.n	8015612 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d102      	bne.n	8015622 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801561c:	2300      	movs	r3, #0
 801561e:	61fb      	str	r3, [r7, #28]
 8015620:	e004      	b.n	801562c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	68ba      	ldr	r2, [r7, #8]
 8015626:	fb02 f303 	mul.w	r3, r2, r3
 801562a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801562c:	69fb      	ldr	r3, [r7, #28]
 801562e:	3348      	adds	r3, #72	@ 0x48
 8015630:	4618      	mov	r0, r3
 8015632:	f001 fe41 	bl	80172b8 <pvPortMalloc>
 8015636:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d011      	beq.n	8015662 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	3348      	adds	r3, #72	@ 0x48
 8015646:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015648:	69bb      	ldr	r3, [r7, #24]
 801564a:	2200      	movs	r2, #0
 801564c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015650:	79fa      	ldrb	r2, [r7, #7]
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	9300      	str	r3, [sp, #0]
 8015656:	4613      	mov	r3, r2
 8015658:	697a      	ldr	r2, [r7, #20]
 801565a:	68b9      	ldr	r1, [r7, #8]
 801565c:	68f8      	ldr	r0, [r7, #12]
 801565e:	f000 f805 	bl	801566c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015662:	69bb      	ldr	r3, [r7, #24]
	}
 8015664:	4618      	mov	r0, r3
 8015666:	3720      	adds	r7, #32
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
 8015678:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d103      	bne.n	8015688 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	69ba      	ldr	r2, [r7, #24]
 8015684:	601a      	str	r2, [r3, #0]
 8015686:	e002      	b.n	801568e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015688:	69bb      	ldr	r3, [r7, #24]
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	68fa      	ldr	r2, [r7, #12]
 8015692:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015694:	69bb      	ldr	r3, [r7, #24]
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801569a:	2101      	movs	r1, #1
 801569c:	69b8      	ldr	r0, [r7, #24]
 801569e:	f7ff feaf 	bl	8015400 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80156a2:	bf00      	nop
 80156a4:	3710      	adds	r7, #16
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
	...

080156ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b08e      	sub	sp, #56	@ 0x38
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	607a      	str	r2, [r7, #4]
 80156b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80156ba:	2300      	movs	r3, #0
 80156bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80156c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d10d      	bne.n	80156e4 <xQueueGenericSend+0x38>
	__asm volatile
 80156c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156cc:	b672      	cpsid	i
 80156ce:	f383 8811 	msr	BASEPRI, r3
 80156d2:	f3bf 8f6f 	isb	sy
 80156d6:	f3bf 8f4f 	dsb	sy
 80156da:	b662      	cpsie	i
 80156dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80156de:	bf00      	nop
 80156e0:	bf00      	nop
 80156e2:	e7fd      	b.n	80156e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d103      	bne.n	80156f2 <xQueueGenericSend+0x46>
 80156ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d101      	bne.n	80156f6 <xQueueGenericSend+0x4a>
 80156f2:	2301      	movs	r3, #1
 80156f4:	e000      	b.n	80156f8 <xQueueGenericSend+0x4c>
 80156f6:	2300      	movs	r3, #0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d10d      	bne.n	8015718 <xQueueGenericSend+0x6c>
	__asm volatile
 80156fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015700:	b672      	cpsid	i
 8015702:	f383 8811 	msr	BASEPRI, r3
 8015706:	f3bf 8f6f 	isb	sy
 801570a:	f3bf 8f4f 	dsb	sy
 801570e:	b662      	cpsie	i
 8015710:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015712:	bf00      	nop
 8015714:	bf00      	nop
 8015716:	e7fd      	b.n	8015714 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	2b02      	cmp	r3, #2
 801571c:	d103      	bne.n	8015726 <xQueueGenericSend+0x7a>
 801571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015722:	2b01      	cmp	r3, #1
 8015724:	d101      	bne.n	801572a <xQueueGenericSend+0x7e>
 8015726:	2301      	movs	r3, #1
 8015728:	e000      	b.n	801572c <xQueueGenericSend+0x80>
 801572a:	2300      	movs	r3, #0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10d      	bne.n	801574c <xQueueGenericSend+0xa0>
	__asm volatile
 8015730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015734:	b672      	cpsid	i
 8015736:	f383 8811 	msr	BASEPRI, r3
 801573a:	f3bf 8f6f 	isb	sy
 801573e:	f3bf 8f4f 	dsb	sy
 8015742:	b662      	cpsie	i
 8015744:	623b      	str	r3, [r7, #32]
}
 8015746:	bf00      	nop
 8015748:	bf00      	nop
 801574a:	e7fd      	b.n	8015748 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801574c:	f001 fa68 	bl	8016c20 <xTaskGetSchedulerState>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	d102      	bne.n	801575c <xQueueGenericSend+0xb0>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d101      	bne.n	8015760 <xQueueGenericSend+0xb4>
 801575c:	2301      	movs	r3, #1
 801575e:	e000      	b.n	8015762 <xQueueGenericSend+0xb6>
 8015760:	2300      	movs	r3, #0
 8015762:	2b00      	cmp	r3, #0
 8015764:	d10d      	bne.n	8015782 <xQueueGenericSend+0xd6>
	__asm volatile
 8015766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801576a:	b672      	cpsid	i
 801576c:	f383 8811 	msr	BASEPRI, r3
 8015770:	f3bf 8f6f 	isb	sy
 8015774:	f3bf 8f4f 	dsb	sy
 8015778:	b662      	cpsie	i
 801577a:	61fb      	str	r3, [r7, #28]
}
 801577c:	bf00      	nop
 801577e:	bf00      	nop
 8015780:	e7fd      	b.n	801577e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015782:	f001 fc6b 	bl	801705c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801578e:	429a      	cmp	r2, r3
 8015790:	d302      	bcc.n	8015798 <xQueueGenericSend+0xec>
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	2b02      	cmp	r3, #2
 8015796:	d129      	bne.n	80157ec <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015798:	683a      	ldr	r2, [r7, #0]
 801579a:	68b9      	ldr	r1, [r7, #8]
 801579c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801579e:	f000 fae5 	bl	8015d6c <prvCopyDataToQueue>
 80157a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d010      	beq.n	80157ce <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ae:	3324      	adds	r3, #36	@ 0x24
 80157b0:	4618      	mov	r0, r3
 80157b2:	f001 f86b 	bl	801688c <xTaskRemoveFromEventList>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d013      	beq.n	80157e4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80157bc:	4b3f      	ldr	r3, [pc, #252]	@ (80158bc <xQueueGenericSend+0x210>)
 80157be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157c2:	601a      	str	r2, [r3, #0]
 80157c4:	f3bf 8f4f 	dsb	sy
 80157c8:	f3bf 8f6f 	isb	sy
 80157cc:	e00a      	b.n	80157e4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80157ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d007      	beq.n	80157e4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80157d4:	4b39      	ldr	r3, [pc, #228]	@ (80158bc <xQueueGenericSend+0x210>)
 80157d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157da:	601a      	str	r2, [r3, #0]
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80157e4:	f001 fc70 	bl	80170c8 <vPortExitCritical>
				return pdPASS;
 80157e8:	2301      	movs	r3, #1
 80157ea:	e063      	b.n	80158b4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d103      	bne.n	80157fa <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80157f2:	f001 fc69 	bl	80170c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80157f6:	2300      	movs	r3, #0
 80157f8:	e05c      	b.n	80158b4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80157fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d106      	bne.n	801580e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015800:	f107 0314 	add.w	r3, r7, #20
 8015804:	4618      	mov	r0, r3
 8015806:	f001 f8a7 	bl	8016958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801580a:	2301      	movs	r3, #1
 801580c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801580e:	f001 fc5b 	bl	80170c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015812:	f000 fe03 	bl	801641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015816:	f001 fc21 	bl	801705c <vPortEnterCritical>
 801581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801581c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015820:	b25b      	sxtb	r3, r3
 8015822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015826:	d103      	bne.n	8015830 <xQueueGenericSend+0x184>
 8015828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801582a:	2200      	movs	r2, #0
 801582c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015836:	b25b      	sxtb	r3, r3
 8015838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801583c:	d103      	bne.n	8015846 <xQueueGenericSend+0x19a>
 801583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015840:	2200      	movs	r2, #0
 8015842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015846:	f001 fc3f 	bl	80170c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801584a:	1d3a      	adds	r2, r7, #4
 801584c:	f107 0314 	add.w	r3, r7, #20
 8015850:	4611      	mov	r1, r2
 8015852:	4618      	mov	r0, r3
 8015854:	f001 f896 	bl	8016984 <xTaskCheckForTimeOut>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d124      	bne.n	80158a8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801585e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015860:	f000 fb7c 	bl	8015f5c <prvIsQueueFull>
 8015864:	4603      	mov	r3, r0
 8015866:	2b00      	cmp	r3, #0
 8015868:	d018      	beq.n	801589c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801586c:	3310      	adds	r3, #16
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	4611      	mov	r1, r2
 8015872:	4618      	mov	r0, r3
 8015874:	f000 ffe2 	bl	801683c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801587a:	f000 fb07 	bl	8015e8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801587e:	f000 fddb 	bl	8016438 <xTaskResumeAll>
 8015882:	4603      	mov	r3, r0
 8015884:	2b00      	cmp	r3, #0
 8015886:	f47f af7c 	bne.w	8015782 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801588a:	4b0c      	ldr	r3, [pc, #48]	@ (80158bc <xQueueGenericSend+0x210>)
 801588c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015890:	601a      	str	r2, [r3, #0]
 8015892:	f3bf 8f4f 	dsb	sy
 8015896:	f3bf 8f6f 	isb	sy
 801589a:	e772      	b.n	8015782 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801589c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801589e:	f000 faf5 	bl	8015e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80158a2:	f000 fdc9 	bl	8016438 <xTaskResumeAll>
 80158a6:	e76c      	b.n	8015782 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80158a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80158aa:	f000 faef 	bl	8015e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158ae:	f000 fdc3 	bl	8016438 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80158b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3738      	adds	r7, #56	@ 0x38
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	e000ed04 	.word	0xe000ed04

080158c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b08e      	sub	sp, #56	@ 0x38
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	607a      	str	r2, [r7, #4]
 80158cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80158d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d10d      	bne.n	80158f4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80158d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158dc:	b672      	cpsid	i
 80158de:	f383 8811 	msr	BASEPRI, r3
 80158e2:	f3bf 8f6f 	isb	sy
 80158e6:	f3bf 8f4f 	dsb	sy
 80158ea:	b662      	cpsie	i
 80158ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80158ee:	bf00      	nop
 80158f0:	bf00      	nop
 80158f2:	e7fd      	b.n	80158f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d103      	bne.n	8015902 <xQueueGenericSendFromISR+0x42>
 80158fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d101      	bne.n	8015906 <xQueueGenericSendFromISR+0x46>
 8015902:	2301      	movs	r3, #1
 8015904:	e000      	b.n	8015908 <xQueueGenericSendFromISR+0x48>
 8015906:	2300      	movs	r3, #0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d10d      	bne.n	8015928 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015910:	b672      	cpsid	i
 8015912:	f383 8811 	msr	BASEPRI, r3
 8015916:	f3bf 8f6f 	isb	sy
 801591a:	f3bf 8f4f 	dsb	sy
 801591e:	b662      	cpsie	i
 8015920:	623b      	str	r3, [r7, #32]
}
 8015922:	bf00      	nop
 8015924:	bf00      	nop
 8015926:	e7fd      	b.n	8015924 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	2b02      	cmp	r3, #2
 801592c:	d103      	bne.n	8015936 <xQueueGenericSendFromISR+0x76>
 801592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015932:	2b01      	cmp	r3, #1
 8015934:	d101      	bne.n	801593a <xQueueGenericSendFromISR+0x7a>
 8015936:	2301      	movs	r3, #1
 8015938:	e000      	b.n	801593c <xQueueGenericSendFromISR+0x7c>
 801593a:	2300      	movs	r3, #0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10d      	bne.n	801595c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8015940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015944:	b672      	cpsid	i
 8015946:	f383 8811 	msr	BASEPRI, r3
 801594a:	f3bf 8f6f 	isb	sy
 801594e:	f3bf 8f4f 	dsb	sy
 8015952:	b662      	cpsie	i
 8015954:	61fb      	str	r3, [r7, #28]
}
 8015956:	bf00      	nop
 8015958:	bf00      	nop
 801595a:	e7fd      	b.n	8015958 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801595c:	f001 fc66 	bl	801722c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015960:	f3ef 8211 	mrs	r2, BASEPRI
 8015964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015968:	b672      	cpsid	i
 801596a:	f383 8811 	msr	BASEPRI, r3
 801596e:	f3bf 8f6f 	isb	sy
 8015972:	f3bf 8f4f 	dsb	sy
 8015976:	b662      	cpsie	i
 8015978:	61ba      	str	r2, [r7, #24]
 801597a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801597c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801597e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015988:	429a      	cmp	r2, r3
 801598a:	d302      	bcc.n	8015992 <xQueueGenericSendFromISR+0xd2>
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	2b02      	cmp	r3, #2
 8015990:	d12c      	bne.n	80159ec <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015994:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801599c:	683a      	ldr	r2, [r7, #0]
 801599e:	68b9      	ldr	r1, [r7, #8]
 80159a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80159a2:	f000 f9e3 	bl	8015d6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80159a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80159aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159ae:	d112      	bne.n	80159d6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d016      	beq.n	80159e6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ba:	3324      	adds	r3, #36	@ 0x24
 80159bc:	4618      	mov	r0, r3
 80159be:	f000 ff65 	bl	801688c <xTaskRemoveFromEventList>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d00e      	beq.n	80159e6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d00b      	beq.n	80159e6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2201      	movs	r2, #1
 80159d2:	601a      	str	r2, [r3, #0]
 80159d4:	e007      	b.n	80159e6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80159d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80159da:	3301      	adds	r3, #1
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	b25a      	sxtb	r2, r3
 80159e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80159e6:	2301      	movs	r3, #1
 80159e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80159ea:	e001      	b.n	80159f0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80159ec:	2300      	movs	r3, #0
 80159ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80159f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80159fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3738      	adds	r7, #56	@ 0x38
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}
	...

08015a08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b08c      	sub	sp, #48	@ 0x30
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015a14:	2300      	movs	r3, #0
 8015a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d10d      	bne.n	8015a3e <xQueueReceive+0x36>
	__asm volatile
 8015a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a26:	b672      	cpsid	i
 8015a28:	f383 8811 	msr	BASEPRI, r3
 8015a2c:	f3bf 8f6f 	isb	sy
 8015a30:	f3bf 8f4f 	dsb	sy
 8015a34:	b662      	cpsie	i
 8015a36:	623b      	str	r3, [r7, #32]
}
 8015a38:	bf00      	nop
 8015a3a:	bf00      	nop
 8015a3c:	e7fd      	b.n	8015a3a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d103      	bne.n	8015a4c <xQueueReceive+0x44>
 8015a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d101      	bne.n	8015a50 <xQueueReceive+0x48>
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	e000      	b.n	8015a52 <xQueueReceive+0x4a>
 8015a50:	2300      	movs	r3, #0
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d10d      	bne.n	8015a72 <xQueueReceive+0x6a>
	__asm volatile
 8015a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a5a:	b672      	cpsid	i
 8015a5c:	f383 8811 	msr	BASEPRI, r3
 8015a60:	f3bf 8f6f 	isb	sy
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	b662      	cpsie	i
 8015a6a:	61fb      	str	r3, [r7, #28]
}
 8015a6c:	bf00      	nop
 8015a6e:	bf00      	nop
 8015a70:	e7fd      	b.n	8015a6e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a72:	f001 f8d5 	bl	8016c20 <xTaskGetSchedulerState>
 8015a76:	4603      	mov	r3, r0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d102      	bne.n	8015a82 <xQueueReceive+0x7a>
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d101      	bne.n	8015a86 <xQueueReceive+0x7e>
 8015a82:	2301      	movs	r3, #1
 8015a84:	e000      	b.n	8015a88 <xQueueReceive+0x80>
 8015a86:	2300      	movs	r3, #0
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d10d      	bne.n	8015aa8 <xQueueReceive+0xa0>
	__asm volatile
 8015a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a90:	b672      	cpsid	i
 8015a92:	f383 8811 	msr	BASEPRI, r3
 8015a96:	f3bf 8f6f 	isb	sy
 8015a9a:	f3bf 8f4f 	dsb	sy
 8015a9e:	b662      	cpsie	i
 8015aa0:	61bb      	str	r3, [r7, #24]
}
 8015aa2:	bf00      	nop
 8015aa4:	bf00      	nop
 8015aa6:	e7fd      	b.n	8015aa4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015aa8:	f001 fad8 	bl	801705c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ab0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d01f      	beq.n	8015af8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ab8:	68b9      	ldr	r1, [r7, #8]
 8015aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015abc:	f000 f9c0 	bl	8015e40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac2:	1e5a      	subs	r2, r3, #1
 8015ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aca:	691b      	ldr	r3, [r3, #16]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d00f      	beq.n	8015af0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ad2:	3310      	adds	r3, #16
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f000 fed9 	bl	801688c <xTaskRemoveFromEventList>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d007      	beq.n	8015af0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8015bd4 <xQueueReceive+0x1cc>)
 8015ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ae6:	601a      	str	r2, [r3, #0]
 8015ae8:	f3bf 8f4f 	dsb	sy
 8015aec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015af0:	f001 faea 	bl	80170c8 <vPortExitCritical>
				return pdPASS;
 8015af4:	2301      	movs	r3, #1
 8015af6:	e069      	b.n	8015bcc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d103      	bne.n	8015b06 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015afe:	f001 fae3 	bl	80170c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015b02:	2300      	movs	r3, #0
 8015b04:	e062      	b.n	8015bcc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d106      	bne.n	8015b1a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b0c:	f107 0310 	add.w	r3, r7, #16
 8015b10:	4618      	mov	r0, r3
 8015b12:	f000 ff21 	bl	8016958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b16:	2301      	movs	r3, #1
 8015b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b1a:	f001 fad5 	bl	80170c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b1e:	f000 fc7d 	bl	801641c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b22:	f001 fa9b 	bl	801705c <vPortEnterCritical>
 8015b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015b2c:	b25b      	sxtb	r3, r3
 8015b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b32:	d103      	bne.n	8015b3c <xQueueReceive+0x134>
 8015b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b36:	2200      	movs	r2, #0
 8015b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015b42:	b25b      	sxtb	r3, r3
 8015b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b48:	d103      	bne.n	8015b52 <xQueueReceive+0x14a>
 8015b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015b52:	f001 fab9 	bl	80170c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b56:	1d3a      	adds	r2, r7, #4
 8015b58:	f107 0310 	add.w	r3, r7, #16
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f000 ff10 	bl	8016984 <xTaskCheckForTimeOut>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d123      	bne.n	8015bb2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b6c:	f000 f9e0 	bl	8015f30 <prvIsQueueEmpty>
 8015b70:	4603      	mov	r3, r0
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d017      	beq.n	8015ba6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b78:	3324      	adds	r3, #36	@ 0x24
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	4611      	mov	r1, r2
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f000 fe5c 	bl	801683c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b86:	f000 f981 	bl	8015e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015b8a:	f000 fc55 	bl	8016438 <xTaskResumeAll>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d189      	bne.n	8015aa8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8015b94:	4b0f      	ldr	r3, [pc, #60]	@ (8015bd4 <xQueueReceive+0x1cc>)
 8015b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b9a:	601a      	str	r2, [r3, #0]
 8015b9c:	f3bf 8f4f 	dsb	sy
 8015ba0:	f3bf 8f6f 	isb	sy
 8015ba4:	e780      	b.n	8015aa8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ba8:	f000 f970 	bl	8015e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bac:	f000 fc44 	bl	8016438 <xTaskResumeAll>
 8015bb0:	e77a      	b.n	8015aa8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015bb4:	f000 f96a 	bl	8015e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bb8:	f000 fc3e 	bl	8016438 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015bbe:	f000 f9b7 	bl	8015f30 <prvIsQueueEmpty>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	f43f af6f 	beq.w	8015aa8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015bca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3730      	adds	r7, #48	@ 0x30
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	e000ed04 	.word	0xe000ed04

08015bd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b08e      	sub	sp, #56	@ 0x38
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d10d      	bne.n	8015c0a <xQueueReceiveFromISR+0x32>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bf2:	b672      	cpsid	i
 8015bf4:	f383 8811 	msr	BASEPRI, r3
 8015bf8:	f3bf 8f6f 	isb	sy
 8015bfc:	f3bf 8f4f 	dsb	sy
 8015c00:	b662      	cpsie	i
 8015c02:	623b      	str	r3, [r7, #32]
}
 8015c04:	bf00      	nop
 8015c06:	bf00      	nop
 8015c08:	e7fd      	b.n	8015c06 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d103      	bne.n	8015c18 <xQueueReceiveFromISR+0x40>
 8015c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d101      	bne.n	8015c1c <xQueueReceiveFromISR+0x44>
 8015c18:	2301      	movs	r3, #1
 8015c1a:	e000      	b.n	8015c1e <xQueueReceiveFromISR+0x46>
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d10d      	bne.n	8015c3e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8015c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c26:	b672      	cpsid	i
 8015c28:	f383 8811 	msr	BASEPRI, r3
 8015c2c:	f3bf 8f6f 	isb	sy
 8015c30:	f3bf 8f4f 	dsb	sy
 8015c34:	b662      	cpsie	i
 8015c36:	61fb      	str	r3, [r7, #28]
}
 8015c38:	bf00      	nop
 8015c3a:	bf00      	nop
 8015c3c:	e7fd      	b.n	8015c3a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c3e:	f001 faf5 	bl	801722c <vPortValidateInterruptPriority>
	__asm volatile
 8015c42:	f3ef 8211 	mrs	r2, BASEPRI
 8015c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c4a:	b672      	cpsid	i
 8015c4c:	f383 8811 	msr	BASEPRI, r3
 8015c50:	f3bf 8f6f 	isb	sy
 8015c54:	f3bf 8f4f 	dsb	sy
 8015c58:	b662      	cpsie	i
 8015c5a:	61ba      	str	r2, [r7, #24]
 8015c5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015c5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d02f      	beq.n	8015cce <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c78:	68b9      	ldr	r1, [r7, #8]
 8015c7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015c7c:	f000 f8e0 	bl	8015e40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c82:	1e5a      	subs	r2, r3, #1
 8015c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c86:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c90:	d112      	bne.n	8015cb8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c94:	691b      	ldr	r3, [r3, #16]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d016      	beq.n	8015cc8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c9c:	3310      	adds	r3, #16
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f000 fdf4 	bl	801688c <xTaskRemoveFromEventList>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00e      	beq.n	8015cc8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00b      	beq.n	8015cc8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	601a      	str	r2, [r3, #0]
 8015cb6:	e007      	b.n	8015cc8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	b25a      	sxtb	r2, r3
 8015cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015cc8:	2301      	movs	r3, #1
 8015cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ccc:	e001      	b.n	8015cd2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8015cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	f383 8811 	msr	BASEPRI, r3
}
 8015cdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3738      	adds	r7, #56	@ 0x38
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d10d      	bne.n	8015d12 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cfa:	b672      	cpsid	i
 8015cfc:	f383 8811 	msr	BASEPRI, r3
 8015d00:	f3bf 8f6f 	isb	sy
 8015d04:	f3bf 8f4f 	dsb	sy
 8015d08:	b662      	cpsie	i
 8015d0a:	60bb      	str	r3, [r7, #8]
}
 8015d0c:	bf00      	nop
 8015d0e:	bf00      	nop
 8015d10:	e7fd      	b.n	8015d0e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015d12:	f001 f9a3 	bl	801705c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d1a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015d1c:	f001 f9d4 	bl	80170c8 <vPortExitCritical>

	return uxReturn;
 8015d20:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d22:	4618      	mov	r0, r3
 8015d24:	3710      	adds	r7, #16
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}

08015d2a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015d2a:	b480      	push	{r7}
 8015d2c:	b087      	sub	sp, #28
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d10d      	bne.n	8015d58 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8015d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d40:	b672      	cpsid	i
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	b662      	cpsie	i
 8015d50:	60fb      	str	r3, [r7, #12]
}
 8015d52:	bf00      	nop
 8015d54:	bf00      	nop
 8015d56:	e7fd      	b.n	8015d54 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d5c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015d5e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d60:	4618      	mov	r0, r3
 8015d62:	371c      	adds	r7, #28
 8015d64:	46bd      	mov	sp, r7
 8015d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6a:	4770      	bx	lr

08015d6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	60f8      	str	r0, [r7, #12]
 8015d74:	60b9      	str	r1, [r7, #8]
 8015d76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d10d      	bne.n	8015da6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d14d      	bne.n	8015e2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	689b      	ldr	r3, [r3, #8]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f000 ff60 	bl	8016c5c <xTaskPriorityDisinherit>
 8015d9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	2200      	movs	r2, #0
 8015da2:	609a      	str	r2, [r3, #8]
 8015da4:	e043      	b.n	8015e2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d119      	bne.n	8015de0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	6858      	ldr	r0, [r3, #4]
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015db4:	461a      	mov	r2, r3
 8015db6:	68b9      	ldr	r1, [r7, #8]
 8015db8:	f002 f855 	bl	8017e66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	685a      	ldr	r2, [r3, #4]
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dc4:	441a      	add	r2, r3
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	685a      	ldr	r2, [r3, #4]
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	689b      	ldr	r3, [r3, #8]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d32b      	bcc.n	8015e2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	605a      	str	r2, [r3, #4]
 8015dde:	e026      	b.n	8015e2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	68d8      	ldr	r0, [r3, #12]
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015de8:	461a      	mov	r2, r3
 8015dea:	68b9      	ldr	r1, [r7, #8]
 8015dec:	f002 f83b 	bl	8017e66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	68da      	ldr	r2, [r3, #12]
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015df8:	425b      	negs	r3, r3
 8015dfa:	441a      	add	r2, r3
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	68da      	ldr	r2, [r3, #12]
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d207      	bcs.n	8015e1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	689a      	ldr	r2, [r3, #8]
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e14:	425b      	negs	r3, r3
 8015e16:	441a      	add	r2, r3
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2b02      	cmp	r3, #2
 8015e20:	d105      	bne.n	8015e2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d002      	beq.n	8015e2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	3b01      	subs	r3, #1
 8015e2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	1c5a      	adds	r2, r3, #1
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015e36:	697b      	ldr	r3, [r7, #20]
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3718      	adds	r7, #24
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d018      	beq.n	8015e84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	68da      	ldr	r2, [r3, #12]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e5a:	441a      	add	r2, r3
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	68da      	ldr	r2, [r3, #12]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	689b      	ldr	r3, [r3, #8]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d303      	bcc.n	8015e74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681a      	ldr	r2, [r3, #0]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	68d9      	ldr	r1, [r3, #12]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	6838      	ldr	r0, [r7, #0]
 8015e80:	f001 fff1 	bl	8017e66 <memcpy>
	}
}
 8015e84:	bf00      	nop
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}

08015e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015e94:	f001 f8e2 	bl	801705c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015e9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ea0:	e011      	b.n	8015ec6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d012      	beq.n	8015ed0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	3324      	adds	r3, #36	@ 0x24
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f000 fcec 	bl	801688c <xTaskRemoveFromEventList>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d001      	beq.n	8015ebe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015eba:	f000 fdcb 	bl	8016a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015ebe:	7bfb      	ldrb	r3, [r7, #15]
 8015ec0:	3b01      	subs	r3, #1
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	dce9      	bgt.n	8015ea2 <prvUnlockQueue+0x16>
 8015ece:	e000      	b.n	8015ed2 <prvUnlockQueue+0x46>
					break;
 8015ed0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	22ff      	movs	r2, #255	@ 0xff
 8015ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015eda:	f001 f8f5 	bl	80170c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015ede:	f001 f8bd 	bl	801705c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015ee8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015eea:	e011      	b.n	8015f10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	691b      	ldr	r3, [r3, #16]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d012      	beq.n	8015f1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3310      	adds	r3, #16
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f000 fcc7 	bl	801688c <xTaskRemoveFromEventList>
 8015efe:	4603      	mov	r3, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d001      	beq.n	8015f08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015f04:	f000 fda6 	bl	8016a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015f08:	7bbb      	ldrb	r3, [r7, #14]
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	b2db      	uxtb	r3, r3
 8015f0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	dce9      	bgt.n	8015eec <prvUnlockQueue+0x60>
 8015f18:	e000      	b.n	8015f1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015f1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	22ff      	movs	r2, #255	@ 0xff
 8015f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015f24:	f001 f8d0 	bl	80170c8 <vPortExitCritical>
}
 8015f28:	bf00      	nop
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f38:	f001 f890 	bl	801705c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d102      	bne.n	8015f4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015f44:	2301      	movs	r3, #1
 8015f46:	60fb      	str	r3, [r7, #12]
 8015f48:	e001      	b.n	8015f4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f4e:	f001 f8bb 	bl	80170c8 <vPortExitCritical>

	return xReturn;
 8015f52:	68fb      	ldr	r3, [r7, #12]
}
 8015f54:	4618      	mov	r0, r3
 8015f56:	3710      	adds	r7, #16
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b084      	sub	sp, #16
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f64:	f001 f87a 	bl	801705c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d102      	bne.n	8015f7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015f74:	2301      	movs	r3, #1
 8015f76:	60fb      	str	r3, [r7, #12]
 8015f78:	e001      	b.n	8015f7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f7e:	f001 f8a3 	bl	80170c8 <vPortExitCritical>

	return xReturn;
 8015f82:	68fb      	ldr	r3, [r7, #12]
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3710      	adds	r7, #16
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b08e      	sub	sp, #56	@ 0x38
 8015f90:	af04      	add	r7, sp, #16
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	607a      	str	r2, [r7, #4]
 8015f98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d10d      	bne.n	8015fbc <xTaskCreateStatic+0x30>
	__asm volatile
 8015fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fa4:	b672      	cpsid	i
 8015fa6:	f383 8811 	msr	BASEPRI, r3
 8015faa:	f3bf 8f6f 	isb	sy
 8015fae:	f3bf 8f4f 	dsb	sy
 8015fb2:	b662      	cpsie	i
 8015fb4:	623b      	str	r3, [r7, #32]
}
 8015fb6:	bf00      	nop
 8015fb8:	bf00      	nop
 8015fba:	e7fd      	b.n	8015fb8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10d      	bne.n	8015fde <xTaskCreateStatic+0x52>
	__asm volatile
 8015fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fc6:	b672      	cpsid	i
 8015fc8:	f383 8811 	msr	BASEPRI, r3
 8015fcc:	f3bf 8f6f 	isb	sy
 8015fd0:	f3bf 8f4f 	dsb	sy
 8015fd4:	b662      	cpsie	i
 8015fd6:	61fb      	str	r3, [r7, #28]
}
 8015fd8:	bf00      	nop
 8015fda:	bf00      	nop
 8015fdc:	e7fd      	b.n	8015fda <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015fde:	2358      	movs	r3, #88	@ 0x58
 8015fe0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	2b58      	cmp	r3, #88	@ 0x58
 8015fe6:	d00d      	beq.n	8016004 <xTaskCreateStatic+0x78>
	__asm volatile
 8015fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fec:	b672      	cpsid	i
 8015fee:	f383 8811 	msr	BASEPRI, r3
 8015ff2:	f3bf 8f6f 	isb	sy
 8015ff6:	f3bf 8f4f 	dsb	sy
 8015ffa:	b662      	cpsie	i
 8015ffc:	61bb      	str	r3, [r7, #24]
}
 8015ffe:	bf00      	nop
 8016000:	bf00      	nop
 8016002:	e7fd      	b.n	8016000 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016004:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016008:	2b00      	cmp	r3, #0
 801600a:	d01e      	beq.n	801604a <xTaskCreateStatic+0xbe>
 801600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801600e:	2b00      	cmp	r3, #0
 8016010:	d01b      	beq.n	801604a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016014:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801601a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801601e:	2202      	movs	r2, #2
 8016020:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016024:	2300      	movs	r3, #0
 8016026:	9303      	str	r3, [sp, #12]
 8016028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801602a:	9302      	str	r3, [sp, #8]
 801602c:	f107 0314 	add.w	r3, r7, #20
 8016030:	9301      	str	r3, [sp, #4]
 8016032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	687a      	ldr	r2, [r7, #4]
 801603a:	68b9      	ldr	r1, [r7, #8]
 801603c:	68f8      	ldr	r0, [r7, #12]
 801603e:	f000 f850 	bl	80160e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016044:	f000 f8e2 	bl	801620c <prvAddNewTaskToReadyList>
 8016048:	e001      	b.n	801604e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801604a:	2300      	movs	r3, #0
 801604c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801604e:	697b      	ldr	r3, [r7, #20]
	}
 8016050:	4618      	mov	r0, r3
 8016052:	3728      	adds	r7, #40	@ 0x28
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016058:	b580      	push	{r7, lr}
 801605a:	b08c      	sub	sp, #48	@ 0x30
 801605c:	af04      	add	r7, sp, #16
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	603b      	str	r3, [r7, #0]
 8016064:	4613      	mov	r3, r2
 8016066:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016068:	88fb      	ldrh	r3, [r7, #6]
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	4618      	mov	r0, r3
 801606e:	f001 f923 	bl	80172b8 <pvPortMalloc>
 8016072:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d00e      	beq.n	8016098 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801607a:	2058      	movs	r0, #88	@ 0x58
 801607c:	f001 f91c 	bl	80172b8 <pvPortMalloc>
 8016080:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d003      	beq.n	8016090 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	697a      	ldr	r2, [r7, #20]
 801608c:	631a      	str	r2, [r3, #48]	@ 0x30
 801608e:	e005      	b.n	801609c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016090:	6978      	ldr	r0, [r7, #20]
 8016092:	f001 f9e3 	bl	801745c <vPortFree>
 8016096:	e001      	b.n	801609c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016098:	2300      	movs	r3, #0
 801609a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801609c:	69fb      	ldr	r3, [r7, #28]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d017      	beq.n	80160d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80160a2:	69fb      	ldr	r3, [r7, #28]
 80160a4:	2200      	movs	r2, #0
 80160a6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80160aa:	88fa      	ldrh	r2, [r7, #6]
 80160ac:	2300      	movs	r3, #0
 80160ae:	9303      	str	r3, [sp, #12]
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	9302      	str	r3, [sp, #8]
 80160b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160b6:	9301      	str	r3, [sp, #4]
 80160b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160ba:	9300      	str	r3, [sp, #0]
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	68b9      	ldr	r1, [r7, #8]
 80160c0:	68f8      	ldr	r0, [r7, #12]
 80160c2:	f000 f80e 	bl	80160e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80160c6:	69f8      	ldr	r0, [r7, #28]
 80160c8:	f000 f8a0 	bl	801620c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80160cc:	2301      	movs	r3, #1
 80160ce:	61bb      	str	r3, [r7, #24]
 80160d0:	e002      	b.n	80160d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80160d2:	f04f 33ff 	mov.w	r3, #4294967295
 80160d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80160d8:	69bb      	ldr	r3, [r7, #24]
	}
 80160da:	4618      	mov	r0, r3
 80160dc:	3720      	adds	r7, #32
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}

080160e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80160e2:	b580      	push	{r7, lr}
 80160e4:	b088      	sub	sp, #32
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	60f8      	str	r0, [r7, #12]
 80160ea:	60b9      	str	r1, [r7, #8]
 80160ec:	607a      	str	r2, [r7, #4]
 80160ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80160f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	009b      	lsls	r3, r3, #2
 80160f8:	461a      	mov	r2, r3
 80160fa:	21a5      	movs	r1, #165	@ 0xa5
 80160fc:	f001 fdf2 	bl	8017ce4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016104:	6879      	ldr	r1, [r7, #4]
 8016106:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801610a:	440b      	add	r3, r1
 801610c:	009b      	lsls	r3, r3, #2
 801610e:	4413      	add	r3, r2
 8016110:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016112:	69bb      	ldr	r3, [r7, #24]
 8016114:	f023 0307 	bic.w	r3, r3, #7
 8016118:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	f003 0307 	and.w	r3, r3, #7
 8016120:	2b00      	cmp	r3, #0
 8016122:	d00d      	beq.n	8016140 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8016124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016128:	b672      	cpsid	i
 801612a:	f383 8811 	msr	BASEPRI, r3
 801612e:	f3bf 8f6f 	isb	sy
 8016132:	f3bf 8f4f 	dsb	sy
 8016136:	b662      	cpsie	i
 8016138:	617b      	str	r3, [r7, #20]
}
 801613a:	bf00      	nop
 801613c:	bf00      	nop
 801613e:	e7fd      	b.n	801613c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d01f      	beq.n	8016186 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016146:	2300      	movs	r3, #0
 8016148:	61fb      	str	r3, [r7, #28]
 801614a:	e012      	b.n	8016172 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801614c:	68ba      	ldr	r2, [r7, #8]
 801614e:	69fb      	ldr	r3, [r7, #28]
 8016150:	4413      	add	r3, r2
 8016152:	7819      	ldrb	r1, [r3, #0]
 8016154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016156:	69fb      	ldr	r3, [r7, #28]
 8016158:	4413      	add	r3, r2
 801615a:	3334      	adds	r3, #52	@ 0x34
 801615c:	460a      	mov	r2, r1
 801615e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	4413      	add	r3, r2
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d006      	beq.n	801617a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	3301      	adds	r3, #1
 8016170:	61fb      	str	r3, [r7, #28]
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	2b0f      	cmp	r3, #15
 8016176:	d9e9      	bls.n	801614c <prvInitialiseNewTask+0x6a>
 8016178:	e000      	b.n	801617c <prvInitialiseNewTask+0x9a>
			{
				break;
 801617a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801617e:	2200      	movs	r2, #0
 8016180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016184:	e003      	b.n	801618e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016188:	2200      	movs	r2, #0
 801618a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016190:	2b06      	cmp	r3, #6
 8016192:	d901      	bls.n	8016198 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016194:	2306      	movs	r3, #6
 8016196:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801619a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801619c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80161a2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80161a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a6:	2200      	movs	r2, #0
 80161a8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80161aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ac:	3304      	adds	r3, #4
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7ff f892 	bl	80152d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80161b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161b6:	3318      	adds	r3, #24
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7ff f88d 	bl	80152d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80161be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161c6:	f1c3 0207 	rsb	r2, r3, #7
 80161ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80161ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80161d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161d6:	2200      	movs	r2, #0
 80161d8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80161da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161dc:	2200      	movs	r2, #0
 80161de:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80161e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161e2:	2200      	movs	r2, #0
 80161e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80161e8:	683a      	ldr	r2, [r7, #0]
 80161ea:	68f9      	ldr	r1, [r7, #12]
 80161ec:	69b8      	ldr	r0, [r7, #24]
 80161ee:	f000 fe27 	bl	8016e40 <pxPortInitialiseStack>
 80161f2:	4602      	mov	r2, r0
 80161f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80161f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d002      	beq.n	8016204 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80161fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016202:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016204:	bf00      	nop
 8016206:	3720      	adds	r7, #32
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016214:	f000 ff22 	bl	801705c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016218:	4b2a      	ldr	r3, [pc, #168]	@ (80162c4 <prvAddNewTaskToReadyList+0xb8>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	3301      	adds	r3, #1
 801621e:	4a29      	ldr	r2, [pc, #164]	@ (80162c4 <prvAddNewTaskToReadyList+0xb8>)
 8016220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016222:	4b29      	ldr	r3, [pc, #164]	@ (80162c8 <prvAddNewTaskToReadyList+0xbc>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d109      	bne.n	801623e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801622a:	4a27      	ldr	r2, [pc, #156]	@ (80162c8 <prvAddNewTaskToReadyList+0xbc>)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016230:	4b24      	ldr	r3, [pc, #144]	@ (80162c4 <prvAddNewTaskToReadyList+0xb8>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2b01      	cmp	r3, #1
 8016236:	d110      	bne.n	801625a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016238:	f000 fc32 	bl	8016aa0 <prvInitialiseTaskLists>
 801623c:	e00d      	b.n	801625a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801623e:	4b23      	ldr	r3, [pc, #140]	@ (80162cc <prvAddNewTaskToReadyList+0xc0>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d109      	bne.n	801625a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016246:	4b20      	ldr	r3, [pc, #128]	@ (80162c8 <prvAddNewTaskToReadyList+0xbc>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016250:	429a      	cmp	r2, r3
 8016252:	d802      	bhi.n	801625a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016254:	4a1c      	ldr	r2, [pc, #112]	@ (80162c8 <prvAddNewTaskToReadyList+0xbc>)
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801625a:	4b1d      	ldr	r3, [pc, #116]	@ (80162d0 <prvAddNewTaskToReadyList+0xc4>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	3301      	adds	r3, #1
 8016260:	4a1b      	ldr	r2, [pc, #108]	@ (80162d0 <prvAddNewTaskToReadyList+0xc4>)
 8016262:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016268:	2201      	movs	r2, #1
 801626a:	409a      	lsls	r2, r3
 801626c:	4b19      	ldr	r3, [pc, #100]	@ (80162d4 <prvAddNewTaskToReadyList+0xc8>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	4313      	orrs	r3, r2
 8016272:	4a18      	ldr	r2, [pc, #96]	@ (80162d4 <prvAddNewTaskToReadyList+0xc8>)
 8016274:	6013      	str	r3, [r2, #0]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801627a:	4613      	mov	r3, r2
 801627c:	009b      	lsls	r3, r3, #2
 801627e:	4413      	add	r3, r2
 8016280:	009b      	lsls	r3, r3, #2
 8016282:	4a15      	ldr	r2, [pc, #84]	@ (80162d8 <prvAddNewTaskToReadyList+0xcc>)
 8016284:	441a      	add	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	3304      	adds	r3, #4
 801628a:	4619      	mov	r1, r3
 801628c:	4610      	mov	r0, r2
 801628e:	f7ff f830 	bl	80152f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016292:	f000 ff19 	bl	80170c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016296:	4b0d      	ldr	r3, [pc, #52]	@ (80162cc <prvAddNewTaskToReadyList+0xc0>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d00e      	beq.n	80162bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801629e:	4b0a      	ldr	r3, [pc, #40]	@ (80162c8 <prvAddNewTaskToReadyList+0xbc>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162a8:	429a      	cmp	r2, r3
 80162aa:	d207      	bcs.n	80162bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80162ac:	4b0b      	ldr	r3, [pc, #44]	@ (80162dc <prvAddNewTaskToReadyList+0xd0>)
 80162ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162b2:	601a      	str	r2, [r3, #0]
 80162b4:	f3bf 8f4f 	dsb	sy
 80162b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162bc:	bf00      	nop
 80162be:	3708      	adds	r7, #8
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	20001d58 	.word	0x20001d58
 80162c8:	20001c58 	.word	0x20001c58
 80162cc:	20001d64 	.word	0x20001d64
 80162d0:	20001d74 	.word	0x20001d74
 80162d4:	20001d60 	.word	0x20001d60
 80162d8:	20001c5c 	.word	0x20001c5c
 80162dc:	e000ed04 	.word	0xe000ed04

080162e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b084      	sub	sp, #16
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80162e8:	2300      	movs	r3, #0
 80162ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d01a      	beq.n	8016328 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80162f2:	4b15      	ldr	r3, [pc, #84]	@ (8016348 <vTaskDelay+0x68>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d00d      	beq.n	8016316 <vTaskDelay+0x36>
	__asm volatile
 80162fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162fe:	b672      	cpsid	i
 8016300:	f383 8811 	msr	BASEPRI, r3
 8016304:	f3bf 8f6f 	isb	sy
 8016308:	f3bf 8f4f 	dsb	sy
 801630c:	b662      	cpsie	i
 801630e:	60bb      	str	r3, [r7, #8]
}
 8016310:	bf00      	nop
 8016312:	bf00      	nop
 8016314:	e7fd      	b.n	8016312 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8016316:	f000 f881 	bl	801641c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801631a:	2100      	movs	r1, #0
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 fd29 	bl	8016d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016322:	f000 f889 	bl	8016438 <xTaskResumeAll>
 8016326:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d107      	bne.n	801633e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801632e:	4b07      	ldr	r3, [pc, #28]	@ (801634c <vTaskDelay+0x6c>)
 8016330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016334:	601a      	str	r2, [r3, #0]
 8016336:	f3bf 8f4f 	dsb	sy
 801633a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801633e:	bf00      	nop
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	20001d80 	.word	0x20001d80
 801634c:	e000ed04 	.word	0xe000ed04

08016350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b08a      	sub	sp, #40	@ 0x28
 8016354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016356:	2300      	movs	r3, #0
 8016358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801635a:	2300      	movs	r3, #0
 801635c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801635e:	463a      	mov	r2, r7
 8016360:	1d39      	adds	r1, r7, #4
 8016362:	f107 0308 	add.w	r3, r7, #8
 8016366:	4618      	mov	r0, r3
 8016368:	f7eb fe10 	bl	8001f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	68ba      	ldr	r2, [r7, #8]
 8016372:	9202      	str	r2, [sp, #8]
 8016374:	9301      	str	r3, [sp, #4]
 8016376:	2300      	movs	r3, #0
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	2300      	movs	r3, #0
 801637c:	460a      	mov	r2, r1
 801637e:	4921      	ldr	r1, [pc, #132]	@ (8016404 <vTaskStartScheduler+0xb4>)
 8016380:	4821      	ldr	r0, [pc, #132]	@ (8016408 <vTaskStartScheduler+0xb8>)
 8016382:	f7ff fe03 	bl	8015f8c <xTaskCreateStatic>
 8016386:	4603      	mov	r3, r0
 8016388:	4a20      	ldr	r2, [pc, #128]	@ (801640c <vTaskStartScheduler+0xbc>)
 801638a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801638c:	4b1f      	ldr	r3, [pc, #124]	@ (801640c <vTaskStartScheduler+0xbc>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d002      	beq.n	801639a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016394:	2301      	movs	r3, #1
 8016396:	617b      	str	r3, [r7, #20]
 8016398:	e001      	b.n	801639e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801639a:	2300      	movs	r3, #0
 801639c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	2b01      	cmp	r3, #1
 80163a2:	d118      	bne.n	80163d6 <vTaskStartScheduler+0x86>
	__asm volatile
 80163a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163a8:	b672      	cpsid	i
 80163aa:	f383 8811 	msr	BASEPRI, r3
 80163ae:	f3bf 8f6f 	isb	sy
 80163b2:	f3bf 8f4f 	dsb	sy
 80163b6:	b662      	cpsie	i
 80163b8:	613b      	str	r3, [r7, #16]
}
 80163ba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80163bc:	4b14      	ldr	r3, [pc, #80]	@ (8016410 <vTaskStartScheduler+0xc0>)
 80163be:	f04f 32ff 	mov.w	r2, #4294967295
 80163c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80163c4:	4b13      	ldr	r3, [pc, #76]	@ (8016414 <vTaskStartScheduler+0xc4>)
 80163c6:	2201      	movs	r2, #1
 80163c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80163ca:	4b13      	ldr	r3, [pc, #76]	@ (8016418 <vTaskStartScheduler+0xc8>)
 80163cc:	2200      	movs	r2, #0
 80163ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80163d0:	f000 fdc6 	bl	8016f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80163d4:	e011      	b.n	80163fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163dc:	d10d      	bne.n	80163fa <vTaskStartScheduler+0xaa>
	__asm volatile
 80163de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163e2:	b672      	cpsid	i
 80163e4:	f383 8811 	msr	BASEPRI, r3
 80163e8:	f3bf 8f6f 	isb	sy
 80163ec:	f3bf 8f4f 	dsb	sy
 80163f0:	b662      	cpsie	i
 80163f2:	60fb      	str	r3, [r7, #12]
}
 80163f4:	bf00      	nop
 80163f6:	bf00      	nop
 80163f8:	e7fd      	b.n	80163f6 <vTaskStartScheduler+0xa6>
}
 80163fa:	bf00      	nop
 80163fc:	3718      	adds	r7, #24
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	0801c9e0 	.word	0x0801c9e0
 8016408:	08016a6d 	.word	0x08016a6d
 801640c:	20001d7c 	.word	0x20001d7c
 8016410:	20001d78 	.word	0x20001d78
 8016414:	20001d64 	.word	0x20001d64
 8016418:	20001d5c 	.word	0x20001d5c

0801641c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801641c:	b480      	push	{r7}
 801641e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016420:	4b04      	ldr	r3, [pc, #16]	@ (8016434 <vTaskSuspendAll+0x18>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	3301      	adds	r3, #1
 8016426:	4a03      	ldr	r2, [pc, #12]	@ (8016434 <vTaskSuspendAll+0x18>)
 8016428:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801642a:	bf00      	nop
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr
 8016434:	20001d80 	.word	0x20001d80

08016438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801643e:	2300      	movs	r3, #0
 8016440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016442:	2300      	movs	r3, #0
 8016444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016446:	4b43      	ldr	r3, [pc, #268]	@ (8016554 <xTaskResumeAll+0x11c>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d10d      	bne.n	801646a <xTaskResumeAll+0x32>
	__asm volatile
 801644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016452:	b672      	cpsid	i
 8016454:	f383 8811 	msr	BASEPRI, r3
 8016458:	f3bf 8f6f 	isb	sy
 801645c:	f3bf 8f4f 	dsb	sy
 8016460:	b662      	cpsie	i
 8016462:	603b      	str	r3, [r7, #0]
}
 8016464:	bf00      	nop
 8016466:	bf00      	nop
 8016468:	e7fd      	b.n	8016466 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801646a:	f000 fdf7 	bl	801705c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801646e:	4b39      	ldr	r3, [pc, #228]	@ (8016554 <xTaskResumeAll+0x11c>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	3b01      	subs	r3, #1
 8016474:	4a37      	ldr	r2, [pc, #220]	@ (8016554 <xTaskResumeAll+0x11c>)
 8016476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016478:	4b36      	ldr	r3, [pc, #216]	@ (8016554 <xTaskResumeAll+0x11c>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d161      	bne.n	8016544 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016480:	4b35      	ldr	r3, [pc, #212]	@ (8016558 <xTaskResumeAll+0x120>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d05d      	beq.n	8016544 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016488:	e02e      	b.n	80164e8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801648a:	4b34      	ldr	r3, [pc, #208]	@ (801655c <xTaskResumeAll+0x124>)
 801648c:	68db      	ldr	r3, [r3, #12]
 801648e:	68db      	ldr	r3, [r3, #12]
 8016490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	3318      	adds	r3, #24
 8016496:	4618      	mov	r0, r3
 8016498:	f7fe ff88 	bl	80153ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	3304      	adds	r3, #4
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7fe ff83 	bl	80153ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164aa:	2201      	movs	r2, #1
 80164ac:	409a      	lsls	r2, r3
 80164ae:	4b2c      	ldr	r3, [pc, #176]	@ (8016560 <xTaskResumeAll+0x128>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	4313      	orrs	r3, r2
 80164b4:	4a2a      	ldr	r2, [pc, #168]	@ (8016560 <xTaskResumeAll+0x128>)
 80164b6:	6013      	str	r3, [r2, #0]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164bc:	4613      	mov	r3, r2
 80164be:	009b      	lsls	r3, r3, #2
 80164c0:	4413      	add	r3, r2
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	4a27      	ldr	r2, [pc, #156]	@ (8016564 <xTaskResumeAll+0x12c>)
 80164c6:	441a      	add	r2, r3
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	3304      	adds	r3, #4
 80164cc:	4619      	mov	r1, r3
 80164ce:	4610      	mov	r0, r2
 80164d0:	f7fe ff0f 	bl	80152f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164d8:	4b23      	ldr	r3, [pc, #140]	@ (8016568 <xTaskResumeAll+0x130>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164de:	429a      	cmp	r2, r3
 80164e0:	d302      	bcc.n	80164e8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80164e2:	4b22      	ldr	r3, [pc, #136]	@ (801656c <xTaskResumeAll+0x134>)
 80164e4:	2201      	movs	r2, #1
 80164e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164e8:	4b1c      	ldr	r3, [pc, #112]	@ (801655c <xTaskResumeAll+0x124>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d1cc      	bne.n	801648a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d001      	beq.n	80164fa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80164f6:	f000 fb73 	bl	8016be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80164fa:	4b1d      	ldr	r3, [pc, #116]	@ (8016570 <xTaskResumeAll+0x138>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d010      	beq.n	8016528 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016506:	f000 f859 	bl	80165bc <xTaskIncrementTick>
 801650a:	4603      	mov	r3, r0
 801650c:	2b00      	cmp	r3, #0
 801650e:	d002      	beq.n	8016516 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8016510:	4b16      	ldr	r3, [pc, #88]	@ (801656c <xTaskResumeAll+0x134>)
 8016512:	2201      	movs	r2, #1
 8016514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	3b01      	subs	r3, #1
 801651a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d1f1      	bne.n	8016506 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8016522:	4b13      	ldr	r3, [pc, #76]	@ (8016570 <xTaskResumeAll+0x138>)
 8016524:	2200      	movs	r2, #0
 8016526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016528:	4b10      	ldr	r3, [pc, #64]	@ (801656c <xTaskResumeAll+0x134>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d009      	beq.n	8016544 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016530:	2301      	movs	r3, #1
 8016532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016534:	4b0f      	ldr	r3, [pc, #60]	@ (8016574 <xTaskResumeAll+0x13c>)
 8016536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801653a:	601a      	str	r2, [r3, #0]
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016544:	f000 fdc0 	bl	80170c8 <vPortExitCritical>

	return xAlreadyYielded;
 8016548:	68bb      	ldr	r3, [r7, #8]
}
 801654a:	4618      	mov	r0, r3
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	20001d80 	.word	0x20001d80
 8016558:	20001d58 	.word	0x20001d58
 801655c:	20001d18 	.word	0x20001d18
 8016560:	20001d60 	.word	0x20001d60
 8016564:	20001c5c 	.word	0x20001c5c
 8016568:	20001c58 	.word	0x20001c58
 801656c:	20001d6c 	.word	0x20001d6c
 8016570:	20001d68 	.word	0x20001d68
 8016574:	e000ed04 	.word	0xe000ed04

08016578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016578:	b480      	push	{r7}
 801657a:	b083      	sub	sp, #12
 801657c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801657e:	4b05      	ldr	r3, [pc, #20]	@ (8016594 <xTaskGetTickCount+0x1c>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016584:	687b      	ldr	r3, [r7, #4]
}
 8016586:	4618      	mov	r0, r3
 8016588:	370c      	adds	r7, #12
 801658a:	46bd      	mov	sp, r7
 801658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016590:	4770      	bx	lr
 8016592:	bf00      	nop
 8016594:	20001d5c 	.word	0x20001d5c

08016598 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b082      	sub	sp, #8
 801659c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801659e:	f000 fe45 	bl	801722c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80165a2:	2300      	movs	r3, #0
 80165a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80165a6:	4b04      	ldr	r3, [pc, #16]	@ (80165b8 <xTaskGetTickCountFromISR+0x20>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165ac:	683b      	ldr	r3, [r7, #0]
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3708      	adds	r7, #8
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	bf00      	nop
 80165b8:	20001d5c 	.word	0x20001d5c

080165bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b086      	sub	sp, #24
 80165c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80165c2:	2300      	movs	r3, #0
 80165c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165c6:	4b50      	ldr	r3, [pc, #320]	@ (8016708 <xTaskIncrementTick+0x14c>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f040 808b 	bne.w	80166e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80165d0:	4b4e      	ldr	r3, [pc, #312]	@ (801670c <xTaskIncrementTick+0x150>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	3301      	adds	r3, #1
 80165d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80165d8:	4a4c      	ldr	r2, [pc, #304]	@ (801670c <xTaskIncrementTick+0x150>)
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d123      	bne.n	801662c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80165e4:	4b4a      	ldr	r3, [pc, #296]	@ (8016710 <xTaskIncrementTick+0x154>)
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00d      	beq.n	801660a <xTaskIncrementTick+0x4e>
	__asm volatile
 80165ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f2:	b672      	cpsid	i
 80165f4:	f383 8811 	msr	BASEPRI, r3
 80165f8:	f3bf 8f6f 	isb	sy
 80165fc:	f3bf 8f4f 	dsb	sy
 8016600:	b662      	cpsie	i
 8016602:	603b      	str	r3, [r7, #0]
}
 8016604:	bf00      	nop
 8016606:	bf00      	nop
 8016608:	e7fd      	b.n	8016606 <xTaskIncrementTick+0x4a>
 801660a:	4b41      	ldr	r3, [pc, #260]	@ (8016710 <xTaskIncrementTick+0x154>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	60fb      	str	r3, [r7, #12]
 8016610:	4b40      	ldr	r3, [pc, #256]	@ (8016714 <xTaskIncrementTick+0x158>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4a3e      	ldr	r2, [pc, #248]	@ (8016710 <xTaskIncrementTick+0x154>)
 8016616:	6013      	str	r3, [r2, #0]
 8016618:	4a3e      	ldr	r2, [pc, #248]	@ (8016714 <xTaskIncrementTick+0x158>)
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	6013      	str	r3, [r2, #0]
 801661e:	4b3e      	ldr	r3, [pc, #248]	@ (8016718 <xTaskIncrementTick+0x15c>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	3301      	adds	r3, #1
 8016624:	4a3c      	ldr	r2, [pc, #240]	@ (8016718 <xTaskIncrementTick+0x15c>)
 8016626:	6013      	str	r3, [r2, #0]
 8016628:	f000 fada 	bl	8016be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801662c:	4b3b      	ldr	r3, [pc, #236]	@ (801671c <xTaskIncrementTick+0x160>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	693a      	ldr	r2, [r7, #16]
 8016632:	429a      	cmp	r2, r3
 8016634:	d348      	bcc.n	80166c8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016636:	4b36      	ldr	r3, [pc, #216]	@ (8016710 <xTaskIncrementTick+0x154>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d104      	bne.n	801664a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016640:	4b36      	ldr	r3, [pc, #216]	@ (801671c <xTaskIncrementTick+0x160>)
 8016642:	f04f 32ff 	mov.w	r2, #4294967295
 8016646:	601a      	str	r2, [r3, #0]
					break;
 8016648:	e03e      	b.n	80166c8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801664a:	4b31      	ldr	r3, [pc, #196]	@ (8016710 <xTaskIncrementTick+0x154>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801665a:	693a      	ldr	r2, [r7, #16]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	429a      	cmp	r2, r3
 8016660:	d203      	bcs.n	801666a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016662:	4a2e      	ldr	r2, [pc, #184]	@ (801671c <xTaskIncrementTick+0x160>)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016668:	e02e      	b.n	80166c8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	3304      	adds	r3, #4
 801666e:	4618      	mov	r0, r3
 8016670:	f7fe fe9c 	bl	80153ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016678:	2b00      	cmp	r3, #0
 801667a:	d004      	beq.n	8016686 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801667c:	68bb      	ldr	r3, [r7, #8]
 801667e:	3318      	adds	r3, #24
 8016680:	4618      	mov	r0, r3
 8016682:	f7fe fe93 	bl	80153ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801668a:	2201      	movs	r2, #1
 801668c:	409a      	lsls	r2, r3
 801668e:	4b24      	ldr	r3, [pc, #144]	@ (8016720 <xTaskIncrementTick+0x164>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	4313      	orrs	r3, r2
 8016694:	4a22      	ldr	r2, [pc, #136]	@ (8016720 <xTaskIncrementTick+0x164>)
 8016696:	6013      	str	r3, [r2, #0]
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801669c:	4613      	mov	r3, r2
 801669e:	009b      	lsls	r3, r3, #2
 80166a0:	4413      	add	r3, r2
 80166a2:	009b      	lsls	r3, r3, #2
 80166a4:	4a1f      	ldr	r2, [pc, #124]	@ (8016724 <xTaskIncrementTick+0x168>)
 80166a6:	441a      	add	r2, r3
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	3304      	adds	r3, #4
 80166ac:	4619      	mov	r1, r3
 80166ae:	4610      	mov	r0, r2
 80166b0:	f7fe fe1f 	bl	80152f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166b8:	4b1b      	ldr	r3, [pc, #108]	@ (8016728 <xTaskIncrementTick+0x16c>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166be:	429a      	cmp	r2, r3
 80166c0:	d3b9      	bcc.n	8016636 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80166c2:	2301      	movs	r3, #1
 80166c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166c6:	e7b6      	b.n	8016636 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80166c8:	4b17      	ldr	r3, [pc, #92]	@ (8016728 <xTaskIncrementTick+0x16c>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166ce:	4915      	ldr	r1, [pc, #84]	@ (8016724 <xTaskIncrementTick+0x168>)
 80166d0:	4613      	mov	r3, r2
 80166d2:	009b      	lsls	r3, r3, #2
 80166d4:	4413      	add	r3, r2
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	440b      	add	r3, r1
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	2b01      	cmp	r3, #1
 80166de:	d907      	bls.n	80166f0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80166e0:	2301      	movs	r3, #1
 80166e2:	617b      	str	r3, [r7, #20]
 80166e4:	e004      	b.n	80166f0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80166e6:	4b11      	ldr	r3, [pc, #68]	@ (801672c <xTaskIncrementTick+0x170>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	3301      	adds	r3, #1
 80166ec:	4a0f      	ldr	r2, [pc, #60]	@ (801672c <xTaskIncrementTick+0x170>)
 80166ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80166f0:	4b0f      	ldr	r3, [pc, #60]	@ (8016730 <xTaskIncrementTick+0x174>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d001      	beq.n	80166fc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80166f8:	2301      	movs	r3, #1
 80166fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80166fc:	697b      	ldr	r3, [r7, #20]
}
 80166fe:	4618      	mov	r0, r3
 8016700:	3718      	adds	r7, #24
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	20001d80 	.word	0x20001d80
 801670c:	20001d5c 	.word	0x20001d5c
 8016710:	20001d10 	.word	0x20001d10
 8016714:	20001d14 	.word	0x20001d14
 8016718:	20001d70 	.word	0x20001d70
 801671c:	20001d78 	.word	0x20001d78
 8016720:	20001d60 	.word	0x20001d60
 8016724:	20001c5c 	.word	0x20001c5c
 8016728:	20001c58 	.word	0x20001c58
 801672c:	20001d68 	.word	0x20001d68
 8016730:	20001d6c 	.word	0x20001d6c

08016734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b088      	sub	sp, #32
 8016738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801673a:	4b3b      	ldr	r3, [pc, #236]	@ (8016828 <vTaskSwitchContext+0xf4>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d003      	beq.n	801674a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016742:	4b3a      	ldr	r3, [pc, #232]	@ (801682c <vTaskSwitchContext+0xf8>)
 8016744:	2201      	movs	r2, #1
 8016746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016748:	e069      	b.n	801681e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801674a:	4b38      	ldr	r3, [pc, #224]	@ (801682c <vTaskSwitchContext+0xf8>)
 801674c:	2200      	movs	r2, #0
 801674e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016750:	4b37      	ldr	r3, [pc, #220]	@ (8016830 <vTaskSwitchContext+0xfc>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016756:	61fb      	str	r3, [r7, #28]
 8016758:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801675c:	61bb      	str	r3, [r7, #24]
 801675e:	69fb      	ldr	r3, [r7, #28]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	69ba      	ldr	r2, [r7, #24]
 8016764:	429a      	cmp	r2, r3
 8016766:	d111      	bne.n	801678c <vTaskSwitchContext+0x58>
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	3304      	adds	r3, #4
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	69ba      	ldr	r2, [r7, #24]
 8016770:	429a      	cmp	r2, r3
 8016772:	d10b      	bne.n	801678c <vTaskSwitchContext+0x58>
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	3308      	adds	r3, #8
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	69ba      	ldr	r2, [r7, #24]
 801677c:	429a      	cmp	r2, r3
 801677e:	d105      	bne.n	801678c <vTaskSwitchContext+0x58>
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	330c      	adds	r3, #12
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	69ba      	ldr	r2, [r7, #24]
 8016788:	429a      	cmp	r2, r3
 801678a:	d008      	beq.n	801679e <vTaskSwitchContext+0x6a>
 801678c:	4b28      	ldr	r3, [pc, #160]	@ (8016830 <vTaskSwitchContext+0xfc>)
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	4b27      	ldr	r3, [pc, #156]	@ (8016830 <vTaskSwitchContext+0xfc>)
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	3334      	adds	r3, #52	@ 0x34
 8016796:	4619      	mov	r1, r3
 8016798:	4610      	mov	r0, r2
 801679a:	f7eb fbe4 	bl	8001f66 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801679e:	4b25      	ldr	r3, [pc, #148]	@ (8016834 <vTaskSwitchContext+0x100>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	fab3 f383 	clz	r3, r3
 80167aa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80167ac:	7afb      	ldrb	r3, [r7, #11]
 80167ae:	f1c3 031f 	rsb	r3, r3, #31
 80167b2:	617b      	str	r3, [r7, #20]
 80167b4:	4920      	ldr	r1, [pc, #128]	@ (8016838 <vTaskSwitchContext+0x104>)
 80167b6:	697a      	ldr	r2, [r7, #20]
 80167b8:	4613      	mov	r3, r2
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	4413      	add	r3, r2
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	440b      	add	r3, r1
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d10d      	bne.n	80167e4 <vTaskSwitchContext+0xb0>
	__asm volatile
 80167c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167cc:	b672      	cpsid	i
 80167ce:	f383 8811 	msr	BASEPRI, r3
 80167d2:	f3bf 8f6f 	isb	sy
 80167d6:	f3bf 8f4f 	dsb	sy
 80167da:	b662      	cpsie	i
 80167dc:	607b      	str	r3, [r7, #4]
}
 80167de:	bf00      	nop
 80167e0:	bf00      	nop
 80167e2:	e7fd      	b.n	80167e0 <vTaskSwitchContext+0xac>
 80167e4:	697a      	ldr	r2, [r7, #20]
 80167e6:	4613      	mov	r3, r2
 80167e8:	009b      	lsls	r3, r3, #2
 80167ea:	4413      	add	r3, r2
 80167ec:	009b      	lsls	r3, r3, #2
 80167ee:	4a12      	ldr	r2, [pc, #72]	@ (8016838 <vTaskSwitchContext+0x104>)
 80167f0:	4413      	add	r3, r2
 80167f2:	613b      	str	r3, [r7, #16]
 80167f4:	693b      	ldr	r3, [r7, #16]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	685a      	ldr	r2, [r3, #4]
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	605a      	str	r2, [r3, #4]
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	685a      	ldr	r2, [r3, #4]
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	3308      	adds	r3, #8
 8016806:	429a      	cmp	r2, r3
 8016808:	d104      	bne.n	8016814 <vTaskSwitchContext+0xe0>
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	685a      	ldr	r2, [r3, #4]
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	605a      	str	r2, [r3, #4]
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	4a05      	ldr	r2, [pc, #20]	@ (8016830 <vTaskSwitchContext+0xfc>)
 801681c:	6013      	str	r3, [r2, #0]
}
 801681e:	bf00      	nop
 8016820:	3720      	adds	r7, #32
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	20001d80 	.word	0x20001d80
 801682c:	20001d6c 	.word	0x20001d6c
 8016830:	20001c58 	.word	0x20001c58
 8016834:	20001d60 	.word	0x20001d60
 8016838:	20001c5c 	.word	0x20001c5c

0801683c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b084      	sub	sp, #16
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d10d      	bne.n	8016868 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016850:	b672      	cpsid	i
 8016852:	f383 8811 	msr	BASEPRI, r3
 8016856:	f3bf 8f6f 	isb	sy
 801685a:	f3bf 8f4f 	dsb	sy
 801685e:	b662      	cpsie	i
 8016860:	60fb      	str	r3, [r7, #12]
}
 8016862:	bf00      	nop
 8016864:	bf00      	nop
 8016866:	e7fd      	b.n	8016864 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016868:	4b07      	ldr	r3, [pc, #28]	@ (8016888 <vTaskPlaceOnEventList+0x4c>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	3318      	adds	r3, #24
 801686e:	4619      	mov	r1, r3
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f7fe fd62 	bl	801533a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016876:	2101      	movs	r1, #1
 8016878:	6838      	ldr	r0, [r7, #0]
 801687a:	f000 fa7b 	bl	8016d74 <prvAddCurrentTaskToDelayedList>
}
 801687e:	bf00      	nop
 8016880:	3710      	adds	r7, #16
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
 8016886:	bf00      	nop
 8016888:	20001c58 	.word	0x20001c58

0801688c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b086      	sub	sp, #24
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	68db      	ldr	r3, [r3, #12]
 8016898:	68db      	ldr	r3, [r3, #12]
 801689a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801689c:	693b      	ldr	r3, [r7, #16]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d10d      	bne.n	80168be <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80168a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168a6:	b672      	cpsid	i
 80168a8:	f383 8811 	msr	BASEPRI, r3
 80168ac:	f3bf 8f6f 	isb	sy
 80168b0:	f3bf 8f4f 	dsb	sy
 80168b4:	b662      	cpsie	i
 80168b6:	60fb      	str	r3, [r7, #12]
}
 80168b8:	bf00      	nop
 80168ba:	bf00      	nop
 80168bc:	e7fd      	b.n	80168ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	3318      	adds	r3, #24
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7fe fd72 	bl	80153ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168c8:	4b1d      	ldr	r3, [pc, #116]	@ (8016940 <xTaskRemoveFromEventList+0xb4>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d11c      	bne.n	801690a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80168d0:	693b      	ldr	r3, [r7, #16]
 80168d2:	3304      	adds	r3, #4
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7fe fd69 	bl	80153ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168de:	2201      	movs	r2, #1
 80168e0:	409a      	lsls	r2, r3
 80168e2:	4b18      	ldr	r3, [pc, #96]	@ (8016944 <xTaskRemoveFromEventList+0xb8>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	4313      	orrs	r3, r2
 80168e8:	4a16      	ldr	r2, [pc, #88]	@ (8016944 <xTaskRemoveFromEventList+0xb8>)
 80168ea:	6013      	str	r3, [r2, #0]
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168f0:	4613      	mov	r3, r2
 80168f2:	009b      	lsls	r3, r3, #2
 80168f4:	4413      	add	r3, r2
 80168f6:	009b      	lsls	r3, r3, #2
 80168f8:	4a13      	ldr	r2, [pc, #76]	@ (8016948 <xTaskRemoveFromEventList+0xbc>)
 80168fa:	441a      	add	r2, r3
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	3304      	adds	r3, #4
 8016900:	4619      	mov	r1, r3
 8016902:	4610      	mov	r0, r2
 8016904:	f7fe fcf5 	bl	80152f2 <vListInsertEnd>
 8016908:	e005      	b.n	8016916 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	3318      	adds	r3, #24
 801690e:	4619      	mov	r1, r3
 8016910:	480e      	ldr	r0, [pc, #56]	@ (801694c <xTaskRemoveFromEventList+0xc0>)
 8016912:	f7fe fcee 	bl	80152f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801691a:	4b0d      	ldr	r3, [pc, #52]	@ (8016950 <xTaskRemoveFromEventList+0xc4>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016920:	429a      	cmp	r2, r3
 8016922:	d905      	bls.n	8016930 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016924:	2301      	movs	r3, #1
 8016926:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016928:	4b0a      	ldr	r3, [pc, #40]	@ (8016954 <xTaskRemoveFromEventList+0xc8>)
 801692a:	2201      	movs	r2, #1
 801692c:	601a      	str	r2, [r3, #0]
 801692e:	e001      	b.n	8016934 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8016930:	2300      	movs	r3, #0
 8016932:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016934:	697b      	ldr	r3, [r7, #20]
}
 8016936:	4618      	mov	r0, r3
 8016938:	3718      	adds	r7, #24
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
 801693e:	bf00      	nop
 8016940:	20001d80 	.word	0x20001d80
 8016944:	20001d60 	.word	0x20001d60
 8016948:	20001c5c 	.word	0x20001c5c
 801694c:	20001d18 	.word	0x20001d18
 8016950:	20001c58 	.word	0x20001c58
 8016954:	20001d6c 	.word	0x20001d6c

08016958 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016960:	4b06      	ldr	r3, [pc, #24]	@ (801697c <vTaskInternalSetTimeOutState+0x24>)
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016968:	4b05      	ldr	r3, [pc, #20]	@ (8016980 <vTaskInternalSetTimeOutState+0x28>)
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	605a      	str	r2, [r3, #4]
}
 8016970:	bf00      	nop
 8016972:	370c      	adds	r7, #12
 8016974:	46bd      	mov	sp, r7
 8016976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697a:	4770      	bx	lr
 801697c:	20001d70 	.word	0x20001d70
 8016980:	20001d5c 	.word	0x20001d5c

08016984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b088      	sub	sp, #32
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d10d      	bne.n	80169b0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8016994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016998:	b672      	cpsid	i
 801699a:	f383 8811 	msr	BASEPRI, r3
 801699e:	f3bf 8f6f 	isb	sy
 80169a2:	f3bf 8f4f 	dsb	sy
 80169a6:	b662      	cpsie	i
 80169a8:	613b      	str	r3, [r7, #16]
}
 80169aa:	bf00      	nop
 80169ac:	bf00      	nop
 80169ae:	e7fd      	b.n	80169ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d10d      	bne.n	80169d2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80169b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169ba:	b672      	cpsid	i
 80169bc:	f383 8811 	msr	BASEPRI, r3
 80169c0:	f3bf 8f6f 	isb	sy
 80169c4:	f3bf 8f4f 	dsb	sy
 80169c8:	b662      	cpsie	i
 80169ca:	60fb      	str	r3, [r7, #12]
}
 80169cc:	bf00      	nop
 80169ce:	bf00      	nop
 80169d0:	e7fd      	b.n	80169ce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80169d2:	f000 fb43 	bl	801705c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80169d6:	4b1d      	ldr	r3, [pc, #116]	@ (8016a4c <xTaskCheckForTimeOut+0xc8>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	69ba      	ldr	r2, [r7, #24]
 80169e2:	1ad3      	subs	r3, r2, r3
 80169e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ee:	d102      	bne.n	80169f6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80169f0:	2300      	movs	r3, #0
 80169f2:	61fb      	str	r3, [r7, #28]
 80169f4:	e023      	b.n	8016a3e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	4b15      	ldr	r3, [pc, #84]	@ (8016a50 <xTaskCheckForTimeOut+0xcc>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d007      	beq.n	8016a12 <xTaskCheckForTimeOut+0x8e>
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	69ba      	ldr	r2, [r7, #24]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d302      	bcc.n	8016a12 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	61fb      	str	r3, [r7, #28]
 8016a10:	e015      	b.n	8016a3e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	697a      	ldr	r2, [r7, #20]
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d20b      	bcs.n	8016a34 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	681a      	ldr	r2, [r3, #0]
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	1ad2      	subs	r2, r2, r3
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f7ff ff95 	bl	8016958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	61fb      	str	r3, [r7, #28]
 8016a32:	e004      	b.n	8016a3e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	2200      	movs	r2, #0
 8016a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016a3e:	f000 fb43 	bl	80170c8 <vPortExitCritical>

	return xReturn;
 8016a42:	69fb      	ldr	r3, [r7, #28]
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3720      	adds	r7, #32
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}
 8016a4c:	20001d5c 	.word	0x20001d5c
 8016a50:	20001d70 	.word	0x20001d70

08016a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016a54:	b480      	push	{r7}
 8016a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016a58:	4b03      	ldr	r3, [pc, #12]	@ (8016a68 <vTaskMissedYield+0x14>)
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	601a      	str	r2, [r3, #0]
}
 8016a5e:	bf00      	nop
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr
 8016a68:	20001d6c 	.word	0x20001d6c

08016a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016a74:	f000 f854 	bl	8016b20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016a78:	4b07      	ldr	r3, [pc, #28]	@ (8016a98 <prvIdleTask+0x2c>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d907      	bls.n	8016a90 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016a80:	4b06      	ldr	r3, [pc, #24]	@ (8016a9c <prvIdleTask+0x30>)
 8016a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a86:	601a      	str	r2, [r3, #0]
 8016a88:	f3bf 8f4f 	dsb	sy
 8016a8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016a90:	f7eb fa62 	bl	8001f58 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016a94:	e7ee      	b.n	8016a74 <prvIdleTask+0x8>
 8016a96:	bf00      	nop
 8016a98:	20001c5c 	.word	0x20001c5c
 8016a9c:	e000ed04 	.word	0xe000ed04

08016aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	607b      	str	r3, [r7, #4]
 8016aaa:	e00c      	b.n	8016ac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	4413      	add	r3, r2
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	4a12      	ldr	r2, [pc, #72]	@ (8016b00 <prvInitialiseTaskLists+0x60>)
 8016ab8:	4413      	add	r3, r2
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fe fbec 	bl	8015298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	607b      	str	r3, [r7, #4]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	2b06      	cmp	r3, #6
 8016aca:	d9ef      	bls.n	8016aac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016acc:	480d      	ldr	r0, [pc, #52]	@ (8016b04 <prvInitialiseTaskLists+0x64>)
 8016ace:	f7fe fbe3 	bl	8015298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016ad2:	480d      	ldr	r0, [pc, #52]	@ (8016b08 <prvInitialiseTaskLists+0x68>)
 8016ad4:	f7fe fbe0 	bl	8015298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016ad8:	480c      	ldr	r0, [pc, #48]	@ (8016b0c <prvInitialiseTaskLists+0x6c>)
 8016ada:	f7fe fbdd 	bl	8015298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016ade:	480c      	ldr	r0, [pc, #48]	@ (8016b10 <prvInitialiseTaskLists+0x70>)
 8016ae0:	f7fe fbda 	bl	8015298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016ae4:	480b      	ldr	r0, [pc, #44]	@ (8016b14 <prvInitialiseTaskLists+0x74>)
 8016ae6:	f7fe fbd7 	bl	8015298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016aea:	4b0b      	ldr	r3, [pc, #44]	@ (8016b18 <prvInitialiseTaskLists+0x78>)
 8016aec:	4a05      	ldr	r2, [pc, #20]	@ (8016b04 <prvInitialiseTaskLists+0x64>)
 8016aee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016af0:	4b0a      	ldr	r3, [pc, #40]	@ (8016b1c <prvInitialiseTaskLists+0x7c>)
 8016af2:	4a05      	ldr	r2, [pc, #20]	@ (8016b08 <prvInitialiseTaskLists+0x68>)
 8016af4:	601a      	str	r2, [r3, #0]
}
 8016af6:	bf00      	nop
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
 8016afe:	bf00      	nop
 8016b00:	20001c5c 	.word	0x20001c5c
 8016b04:	20001ce8 	.word	0x20001ce8
 8016b08:	20001cfc 	.word	0x20001cfc
 8016b0c:	20001d18 	.word	0x20001d18
 8016b10:	20001d2c 	.word	0x20001d2c
 8016b14:	20001d44 	.word	0x20001d44
 8016b18:	20001d10 	.word	0x20001d10
 8016b1c:	20001d14 	.word	0x20001d14

08016b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b26:	e019      	b.n	8016b5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016b28:	f000 fa98 	bl	801705c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b2c:	4b10      	ldr	r3, [pc, #64]	@ (8016b70 <prvCheckTasksWaitingTermination+0x50>)
 8016b2e:	68db      	ldr	r3, [r3, #12]
 8016b30:	68db      	ldr	r3, [r3, #12]
 8016b32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	3304      	adds	r3, #4
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7fe fc37 	bl	80153ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8016b74 <prvCheckTasksWaitingTermination+0x54>)
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	3b01      	subs	r3, #1
 8016b44:	4a0b      	ldr	r2, [pc, #44]	@ (8016b74 <prvCheckTasksWaitingTermination+0x54>)
 8016b46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016b48:	4b0b      	ldr	r3, [pc, #44]	@ (8016b78 <prvCheckTasksWaitingTermination+0x58>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	3b01      	subs	r3, #1
 8016b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8016b78 <prvCheckTasksWaitingTermination+0x58>)
 8016b50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016b52:	f000 fab9 	bl	80170c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f000 f810 	bl	8016b7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b5c:	4b06      	ldr	r3, [pc, #24]	@ (8016b78 <prvCheckTasksWaitingTermination+0x58>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d1e1      	bne.n	8016b28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016b64:	bf00      	nop
 8016b66:	bf00      	nop
 8016b68:	3708      	adds	r7, #8
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}
 8016b6e:	bf00      	nop
 8016b70:	20001d2c 	.word	0x20001d2c
 8016b74:	20001d58 	.word	0x20001d58
 8016b78:	20001d40 	.word	0x20001d40

08016b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d108      	bne.n	8016ba0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b92:	4618      	mov	r0, r3
 8016b94:	f000 fc62 	bl	801745c <vPortFree>
				vPortFree( pxTCB );
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f000 fc5f 	bl	801745c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016b9e:	e01b      	b.n	8016bd8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d103      	bne.n	8016bb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f000 fc56 	bl	801745c <vPortFree>
	}
 8016bb0:	e012      	b.n	8016bd8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016bb8:	2b02      	cmp	r3, #2
 8016bba:	d00d      	beq.n	8016bd8 <prvDeleteTCB+0x5c>
	__asm volatile
 8016bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bc0:	b672      	cpsid	i
 8016bc2:	f383 8811 	msr	BASEPRI, r3
 8016bc6:	f3bf 8f6f 	isb	sy
 8016bca:	f3bf 8f4f 	dsb	sy
 8016bce:	b662      	cpsie	i
 8016bd0:	60fb      	str	r3, [r7, #12]
}
 8016bd2:	bf00      	nop
 8016bd4:	bf00      	nop
 8016bd6:	e7fd      	b.n	8016bd4 <prvDeleteTCB+0x58>
	}
 8016bd8:	bf00      	nop
 8016bda:	3710      	adds	r7, #16
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016be0:	b480      	push	{r7}
 8016be2:	b083      	sub	sp, #12
 8016be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016be6:	4b0c      	ldr	r3, [pc, #48]	@ (8016c18 <prvResetNextTaskUnblockTime+0x38>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d104      	bne.n	8016bfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8016c1c <prvResetNextTaskUnblockTime+0x3c>)
 8016bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8016bf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016bf8:	e008      	b.n	8016c0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bfa:	4b07      	ldr	r3, [pc, #28]	@ (8016c18 <prvResetNextTaskUnblockTime+0x38>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	68db      	ldr	r3, [r3, #12]
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	685b      	ldr	r3, [r3, #4]
 8016c08:	4a04      	ldr	r2, [pc, #16]	@ (8016c1c <prvResetNextTaskUnblockTime+0x3c>)
 8016c0a:	6013      	str	r3, [r2, #0]
}
 8016c0c:	bf00      	nop
 8016c0e:	370c      	adds	r7, #12
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr
 8016c18:	20001d10 	.word	0x20001d10
 8016c1c:	20001d78 	.word	0x20001d78

08016c20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016c20:	b480      	push	{r7}
 8016c22:	b083      	sub	sp, #12
 8016c24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016c26:	4b0b      	ldr	r3, [pc, #44]	@ (8016c54 <xTaskGetSchedulerState+0x34>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d102      	bne.n	8016c34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016c2e:	2301      	movs	r3, #1
 8016c30:	607b      	str	r3, [r7, #4]
 8016c32:	e008      	b.n	8016c46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c34:	4b08      	ldr	r3, [pc, #32]	@ (8016c58 <xTaskGetSchedulerState+0x38>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d102      	bne.n	8016c42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016c3c:	2302      	movs	r3, #2
 8016c3e:	607b      	str	r3, [r7, #4]
 8016c40:	e001      	b.n	8016c46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016c42:	2300      	movs	r3, #0
 8016c44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016c46:	687b      	ldr	r3, [r7, #4]
	}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	370c      	adds	r7, #12
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c52:	4770      	bx	lr
 8016c54:	20001d64 	.word	0x20001d64
 8016c58:	20001d80 	.word	0x20001d80

08016c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b086      	sub	sp, #24
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016c68:	2300      	movs	r3, #0
 8016c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d074      	beq.n	8016d5c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016c72:	4b3d      	ldr	r3, [pc, #244]	@ (8016d68 <xTaskPriorityDisinherit+0x10c>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	693a      	ldr	r2, [r7, #16]
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	d00d      	beq.n	8016c98 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c80:	b672      	cpsid	i
 8016c82:	f383 8811 	msr	BASEPRI, r3
 8016c86:	f3bf 8f6f 	isb	sy
 8016c8a:	f3bf 8f4f 	dsb	sy
 8016c8e:	b662      	cpsie	i
 8016c90:	60fb      	str	r3, [r7, #12]
}
 8016c92:	bf00      	nop
 8016c94:	bf00      	nop
 8016c96:	e7fd      	b.n	8016c94 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d10d      	bne.n	8016cbc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ca4:	b672      	cpsid	i
 8016ca6:	f383 8811 	msr	BASEPRI, r3
 8016caa:	f3bf 8f6f 	isb	sy
 8016cae:	f3bf 8f4f 	dsb	sy
 8016cb2:	b662      	cpsie	i
 8016cb4:	60bb      	str	r3, [r7, #8]
}
 8016cb6:	bf00      	nop
 8016cb8:	bf00      	nop
 8016cba:	e7fd      	b.n	8016cb8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016cc0:	1e5a      	subs	r2, r3, #1
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d044      	beq.n	8016d5c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d140      	bne.n	8016d5c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	3304      	adds	r3, #4
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fe fb64 	bl	80153ac <uxListRemove>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d115      	bne.n	8016d16 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016cea:	693b      	ldr	r3, [r7, #16]
 8016cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cee:	491f      	ldr	r1, [pc, #124]	@ (8016d6c <xTaskPriorityDisinherit+0x110>)
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	009b      	lsls	r3, r3, #2
 8016cf4:	4413      	add	r3, r2
 8016cf6:	009b      	lsls	r3, r3, #2
 8016cf8:	440b      	add	r3, r1
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d10a      	bne.n	8016d16 <xTaskPriorityDisinherit+0xba>
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d04:	2201      	movs	r2, #1
 8016d06:	fa02 f303 	lsl.w	r3, r2, r3
 8016d0a:	43da      	mvns	r2, r3
 8016d0c:	4b18      	ldr	r3, [pc, #96]	@ (8016d70 <xTaskPriorityDisinherit+0x114>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	4013      	ands	r3, r2
 8016d12:	4a17      	ldr	r2, [pc, #92]	@ (8016d70 <xTaskPriorityDisinherit+0x114>)
 8016d14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d22:	f1c3 0207 	rsb	r2, r3, #7
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d2e:	2201      	movs	r2, #1
 8016d30:	409a      	lsls	r2, r3
 8016d32:	4b0f      	ldr	r3, [pc, #60]	@ (8016d70 <xTaskPriorityDisinherit+0x114>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4313      	orrs	r3, r2
 8016d38:	4a0d      	ldr	r2, [pc, #52]	@ (8016d70 <xTaskPriorityDisinherit+0x114>)
 8016d3a:	6013      	str	r3, [r2, #0]
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016d40:	4613      	mov	r3, r2
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	4413      	add	r3, r2
 8016d46:	009b      	lsls	r3, r3, #2
 8016d48:	4a08      	ldr	r2, [pc, #32]	@ (8016d6c <xTaskPriorityDisinherit+0x110>)
 8016d4a:	441a      	add	r2, r3
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	3304      	adds	r3, #4
 8016d50:	4619      	mov	r1, r3
 8016d52:	4610      	mov	r0, r2
 8016d54:	f7fe facd 	bl	80152f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016d58:	2301      	movs	r3, #1
 8016d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016d5c:	697b      	ldr	r3, [r7, #20]
	}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3718      	adds	r7, #24
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}
 8016d66:	bf00      	nop
 8016d68:	20001c58 	.word	0x20001c58
 8016d6c:	20001c5c 	.word	0x20001c5c
 8016d70:	20001d60 	.word	0x20001d60

08016d74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b084      	sub	sp, #16
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016d7e:	4b29      	ldr	r3, [pc, #164]	@ (8016e24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d84:	4b28      	ldr	r3, [pc, #160]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	3304      	adds	r3, #4
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7fe fb0e 	bl	80153ac <uxListRemove>
 8016d90:	4603      	mov	r3, r0
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d10b      	bne.n	8016dae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016d96:	4b24      	ldr	r3, [pc, #144]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d9c:	2201      	movs	r2, #1
 8016d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8016da2:	43da      	mvns	r2, r3
 8016da4:	4b21      	ldr	r3, [pc, #132]	@ (8016e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4013      	ands	r3, r2
 8016daa:	4a20      	ldr	r2, [pc, #128]	@ (8016e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8016dac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016db4:	d10a      	bne.n	8016dcc <prvAddCurrentTaskToDelayedList+0x58>
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d007      	beq.n	8016dcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	3304      	adds	r3, #4
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	481a      	ldr	r0, [pc, #104]	@ (8016e30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016dc6:	f7fe fa94 	bl	80152f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016dca:	e026      	b.n	8016e1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016dcc:	68fa      	ldr	r2, [r7, #12]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4413      	add	r3, r2
 8016dd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016dd4:	4b14      	ldr	r3, [pc, #80]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	68ba      	ldr	r2, [r7, #8]
 8016dda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016ddc:	68ba      	ldr	r2, [r7, #8]
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d209      	bcs.n	8016df8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016de4:	4b13      	ldr	r3, [pc, #76]	@ (8016e34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016de6:	681a      	ldr	r2, [r3, #0]
 8016de8:	4b0f      	ldr	r3, [pc, #60]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	3304      	adds	r3, #4
 8016dee:	4619      	mov	r1, r3
 8016df0:	4610      	mov	r0, r2
 8016df2:	f7fe faa2 	bl	801533a <vListInsert>
}
 8016df6:	e010      	b.n	8016e1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016df8:	4b0f      	ldr	r3, [pc, #60]	@ (8016e38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	3304      	adds	r3, #4
 8016e02:	4619      	mov	r1, r3
 8016e04:	4610      	mov	r0, r2
 8016e06:	f7fe fa98 	bl	801533a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8016e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	68ba      	ldr	r2, [r7, #8]
 8016e10:	429a      	cmp	r2, r3
 8016e12:	d202      	bcs.n	8016e1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016e14:	4a09      	ldr	r2, [pc, #36]	@ (8016e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8016e16:	68bb      	ldr	r3, [r7, #8]
 8016e18:	6013      	str	r3, [r2, #0]
}
 8016e1a:	bf00      	nop
 8016e1c:	3710      	adds	r7, #16
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	20001d5c 	.word	0x20001d5c
 8016e28:	20001c58 	.word	0x20001c58
 8016e2c:	20001d60 	.word	0x20001d60
 8016e30:	20001d44 	.word	0x20001d44
 8016e34:	20001d14 	.word	0x20001d14
 8016e38:	20001d10 	.word	0x20001d10
 8016e3c:	20001d78 	.word	0x20001d78

08016e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016e40:	b480      	push	{r7}
 8016e42:	b085      	sub	sp, #20
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	60f8      	str	r0, [r7, #12]
 8016e48:	60b9      	str	r1, [r7, #8]
 8016e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	3b04      	subs	r3, #4
 8016e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	3b04      	subs	r3, #4
 8016e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	f023 0201 	bic.w	r2, r3, #1
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	3b04      	subs	r3, #4
 8016e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016e70:	4a0c      	ldr	r2, [pc, #48]	@ (8016ea4 <pxPortInitialiseStack+0x64>)
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	3b14      	subs	r3, #20
 8016e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	3b04      	subs	r3, #4
 8016e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	f06f 0202 	mvn.w	r2, #2
 8016e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	3b20      	subs	r3, #32
 8016e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016e96:	68fb      	ldr	r3, [r7, #12]
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3714      	adds	r7, #20
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr
 8016ea4:	08016ea9 	.word	0x08016ea9

08016ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016ea8:	b480      	push	{r7}
 8016eaa:	b085      	sub	sp, #20
 8016eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016eb2:	4b15      	ldr	r3, [pc, #84]	@ (8016f08 <prvTaskExitError+0x60>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eba:	d00d      	beq.n	8016ed8 <prvTaskExitError+0x30>
	__asm volatile
 8016ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ec0:	b672      	cpsid	i
 8016ec2:	f383 8811 	msr	BASEPRI, r3
 8016ec6:	f3bf 8f6f 	isb	sy
 8016eca:	f3bf 8f4f 	dsb	sy
 8016ece:	b662      	cpsie	i
 8016ed0:	60fb      	str	r3, [r7, #12]
}
 8016ed2:	bf00      	nop
 8016ed4:	bf00      	nop
 8016ed6:	e7fd      	b.n	8016ed4 <prvTaskExitError+0x2c>
	__asm volatile
 8016ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016edc:	b672      	cpsid	i
 8016ede:	f383 8811 	msr	BASEPRI, r3
 8016ee2:	f3bf 8f6f 	isb	sy
 8016ee6:	f3bf 8f4f 	dsb	sy
 8016eea:	b662      	cpsie	i
 8016eec:	60bb      	str	r3, [r7, #8]
}
 8016eee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016ef0:	bf00      	nop
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d0fc      	beq.n	8016ef2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016ef8:	bf00      	nop
 8016efa:	bf00      	nop
 8016efc:	3714      	adds	r7, #20
 8016efe:	46bd      	mov	sp, r7
 8016f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop
 8016f08:	20000078 	.word	0x20000078
 8016f0c:	00000000 	.word	0x00000000

08016f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016f10:	4b07      	ldr	r3, [pc, #28]	@ (8016f30 <pxCurrentTCBConst2>)
 8016f12:	6819      	ldr	r1, [r3, #0]
 8016f14:	6808      	ldr	r0, [r1, #0]
 8016f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1a:	f380 8809 	msr	PSP, r0
 8016f1e:	f3bf 8f6f 	isb	sy
 8016f22:	f04f 0000 	mov.w	r0, #0
 8016f26:	f380 8811 	msr	BASEPRI, r0
 8016f2a:	4770      	bx	lr
 8016f2c:	f3af 8000 	nop.w

08016f30 <pxCurrentTCBConst2>:
 8016f30:	20001c58 	.word	0x20001c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016f34:	bf00      	nop
 8016f36:	bf00      	nop

08016f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016f38:	4808      	ldr	r0, [pc, #32]	@ (8016f5c <prvPortStartFirstTask+0x24>)
 8016f3a:	6800      	ldr	r0, [r0, #0]
 8016f3c:	6800      	ldr	r0, [r0, #0]
 8016f3e:	f380 8808 	msr	MSP, r0
 8016f42:	f04f 0000 	mov.w	r0, #0
 8016f46:	f380 8814 	msr	CONTROL, r0
 8016f4a:	b662      	cpsie	i
 8016f4c:	b661      	cpsie	f
 8016f4e:	f3bf 8f4f 	dsb	sy
 8016f52:	f3bf 8f6f 	isb	sy
 8016f56:	df00      	svc	0
 8016f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016f5a:	bf00      	nop
 8016f5c:	e000ed08 	.word	0xe000ed08

08016f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016f66:	4b37      	ldr	r3, [pc, #220]	@ (8017044 <xPortStartScheduler+0xe4>)
 8016f68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	b2db      	uxtb	r3, r3
 8016f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	22ff      	movs	r2, #255	@ 0xff
 8016f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	b2db      	uxtb	r3, r3
 8016f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016f80:	78fb      	ldrb	r3, [r7, #3]
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016f88:	b2da      	uxtb	r2, r3
 8016f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8017048 <xPortStartScheduler+0xe8>)
 8016f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016f8e:	4b2f      	ldr	r3, [pc, #188]	@ (801704c <xPortStartScheduler+0xec>)
 8016f90:	2207      	movs	r2, #7
 8016f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f94:	e009      	b.n	8016faa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016f96:	4b2d      	ldr	r3, [pc, #180]	@ (801704c <xPortStartScheduler+0xec>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	3b01      	subs	r3, #1
 8016f9c:	4a2b      	ldr	r2, [pc, #172]	@ (801704c <xPortStartScheduler+0xec>)
 8016f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016fa0:	78fb      	ldrb	r3, [r7, #3]
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	005b      	lsls	r3, r3, #1
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016faa:	78fb      	ldrb	r3, [r7, #3]
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016fb2:	2b80      	cmp	r3, #128	@ 0x80
 8016fb4:	d0ef      	beq.n	8016f96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016fb6:	4b25      	ldr	r3, [pc, #148]	@ (801704c <xPortStartScheduler+0xec>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	f1c3 0307 	rsb	r3, r3, #7
 8016fbe:	2b04      	cmp	r3, #4
 8016fc0:	d00d      	beq.n	8016fde <xPortStartScheduler+0x7e>
	__asm volatile
 8016fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fc6:	b672      	cpsid	i
 8016fc8:	f383 8811 	msr	BASEPRI, r3
 8016fcc:	f3bf 8f6f 	isb	sy
 8016fd0:	f3bf 8f4f 	dsb	sy
 8016fd4:	b662      	cpsie	i
 8016fd6:	60bb      	str	r3, [r7, #8]
}
 8016fd8:	bf00      	nop
 8016fda:	bf00      	nop
 8016fdc:	e7fd      	b.n	8016fda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016fde:	4b1b      	ldr	r3, [pc, #108]	@ (801704c <xPortStartScheduler+0xec>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	021b      	lsls	r3, r3, #8
 8016fe4:	4a19      	ldr	r2, [pc, #100]	@ (801704c <xPortStartScheduler+0xec>)
 8016fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016fe8:	4b18      	ldr	r3, [pc, #96]	@ (801704c <xPortStartScheduler+0xec>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016ff0:	4a16      	ldr	r2, [pc, #88]	@ (801704c <xPortStartScheduler+0xec>)
 8016ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	b2da      	uxtb	r2, r3
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016ffc:	4b14      	ldr	r3, [pc, #80]	@ (8017050 <xPortStartScheduler+0xf0>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	4a13      	ldr	r2, [pc, #76]	@ (8017050 <xPortStartScheduler+0xf0>)
 8017002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017008:	4b11      	ldr	r3, [pc, #68]	@ (8017050 <xPortStartScheduler+0xf0>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	4a10      	ldr	r2, [pc, #64]	@ (8017050 <xPortStartScheduler+0xf0>)
 801700e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017014:	f000 f8dc 	bl	80171d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017018:	4b0e      	ldr	r3, [pc, #56]	@ (8017054 <xPortStartScheduler+0xf4>)
 801701a:	2200      	movs	r2, #0
 801701c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801701e:	f000 f8fb 	bl	8017218 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017022:	4b0d      	ldr	r3, [pc, #52]	@ (8017058 <xPortStartScheduler+0xf8>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	4a0c      	ldr	r2, [pc, #48]	@ (8017058 <xPortStartScheduler+0xf8>)
 8017028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801702c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801702e:	f7ff ff83 	bl	8016f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017032:	f7ff fb7f 	bl	8016734 <vTaskSwitchContext>
	prvTaskExitError();
 8017036:	f7ff ff37 	bl	8016ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801703a:	2300      	movs	r3, #0
}
 801703c:	4618      	mov	r0, r3
 801703e:	3710      	adds	r7, #16
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	e000e400 	.word	0xe000e400
 8017048:	20001d84 	.word	0x20001d84
 801704c:	20001d88 	.word	0x20001d88
 8017050:	e000ed20 	.word	0xe000ed20
 8017054:	20000078 	.word	0x20000078
 8017058:	e000ef34 	.word	0xe000ef34

0801705c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801705c:	b480      	push	{r7}
 801705e:	b083      	sub	sp, #12
 8017060:	af00      	add	r7, sp, #0
	__asm volatile
 8017062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017066:	b672      	cpsid	i
 8017068:	f383 8811 	msr	BASEPRI, r3
 801706c:	f3bf 8f6f 	isb	sy
 8017070:	f3bf 8f4f 	dsb	sy
 8017074:	b662      	cpsie	i
 8017076:	607b      	str	r3, [r7, #4]
}
 8017078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801707a:	4b11      	ldr	r3, [pc, #68]	@ (80170c0 <vPortEnterCritical+0x64>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	3301      	adds	r3, #1
 8017080:	4a0f      	ldr	r2, [pc, #60]	@ (80170c0 <vPortEnterCritical+0x64>)
 8017082:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017084:	4b0e      	ldr	r3, [pc, #56]	@ (80170c0 <vPortEnterCritical+0x64>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d112      	bne.n	80170b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801708c:	4b0d      	ldr	r3, [pc, #52]	@ (80170c4 <vPortEnterCritical+0x68>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	b2db      	uxtb	r3, r3
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00d      	beq.n	80170b2 <vPortEnterCritical+0x56>
	__asm volatile
 8017096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801709a:	b672      	cpsid	i
 801709c:	f383 8811 	msr	BASEPRI, r3
 80170a0:	f3bf 8f6f 	isb	sy
 80170a4:	f3bf 8f4f 	dsb	sy
 80170a8:	b662      	cpsie	i
 80170aa:	603b      	str	r3, [r7, #0]
}
 80170ac:	bf00      	nop
 80170ae:	bf00      	nop
 80170b0:	e7fd      	b.n	80170ae <vPortEnterCritical+0x52>
	}
}
 80170b2:	bf00      	nop
 80170b4:	370c      	adds	r7, #12
 80170b6:	46bd      	mov	sp, r7
 80170b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170bc:	4770      	bx	lr
 80170be:	bf00      	nop
 80170c0:	20000078 	.word	0x20000078
 80170c4:	e000ed04 	.word	0xe000ed04

080170c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80170c8:	b480      	push	{r7}
 80170ca:	b083      	sub	sp, #12
 80170cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80170ce:	4b13      	ldr	r3, [pc, #76]	@ (801711c <vPortExitCritical+0x54>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d10d      	bne.n	80170f2 <vPortExitCritical+0x2a>
	__asm volatile
 80170d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170da:	b672      	cpsid	i
 80170dc:	f383 8811 	msr	BASEPRI, r3
 80170e0:	f3bf 8f6f 	isb	sy
 80170e4:	f3bf 8f4f 	dsb	sy
 80170e8:	b662      	cpsie	i
 80170ea:	607b      	str	r3, [r7, #4]
}
 80170ec:	bf00      	nop
 80170ee:	bf00      	nop
 80170f0:	e7fd      	b.n	80170ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80170f2:	4b0a      	ldr	r3, [pc, #40]	@ (801711c <vPortExitCritical+0x54>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	3b01      	subs	r3, #1
 80170f8:	4a08      	ldr	r2, [pc, #32]	@ (801711c <vPortExitCritical+0x54>)
 80170fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80170fc:	4b07      	ldr	r3, [pc, #28]	@ (801711c <vPortExitCritical+0x54>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d105      	bne.n	8017110 <vPortExitCritical+0x48>
 8017104:	2300      	movs	r3, #0
 8017106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	f383 8811 	msr	BASEPRI, r3
}
 801710e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017110:	bf00      	nop
 8017112:	370c      	adds	r7, #12
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr
 801711c:	20000078 	.word	0x20000078

08017120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017120:	f3ef 8009 	mrs	r0, PSP
 8017124:	f3bf 8f6f 	isb	sy
 8017128:	4b15      	ldr	r3, [pc, #84]	@ (8017180 <pxCurrentTCBConst>)
 801712a:	681a      	ldr	r2, [r3, #0]
 801712c:	f01e 0f10 	tst.w	lr, #16
 8017130:	bf08      	it	eq
 8017132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713a:	6010      	str	r0, [r2, #0]
 801713c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017144:	b672      	cpsid	i
 8017146:	f380 8811 	msr	BASEPRI, r0
 801714a:	f3bf 8f4f 	dsb	sy
 801714e:	f3bf 8f6f 	isb	sy
 8017152:	b662      	cpsie	i
 8017154:	f7ff faee 	bl	8016734 <vTaskSwitchContext>
 8017158:	f04f 0000 	mov.w	r0, #0
 801715c:	f380 8811 	msr	BASEPRI, r0
 8017160:	bc09      	pop	{r0, r3}
 8017162:	6819      	ldr	r1, [r3, #0]
 8017164:	6808      	ldr	r0, [r1, #0]
 8017166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801716a:	f01e 0f10 	tst.w	lr, #16
 801716e:	bf08      	it	eq
 8017170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017174:	f380 8809 	msr	PSP, r0
 8017178:	f3bf 8f6f 	isb	sy
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop

08017180 <pxCurrentTCBConst>:
 8017180:	20001c58 	.word	0x20001c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017184:	bf00      	nop
 8017186:	bf00      	nop

08017188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
	__asm volatile
 801718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017192:	b672      	cpsid	i
 8017194:	f383 8811 	msr	BASEPRI, r3
 8017198:	f3bf 8f6f 	isb	sy
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	b662      	cpsie	i
 80171a2:	607b      	str	r3, [r7, #4]
}
 80171a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80171a6:	f7ff fa09 	bl	80165bc <xTaskIncrementTick>
 80171aa:	4603      	mov	r3, r0
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d003      	beq.n	80171b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80171b0:	4b06      	ldr	r3, [pc, #24]	@ (80171cc <SysTick_Handler+0x44>)
 80171b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171b6:	601a      	str	r2, [r3, #0]
 80171b8:	2300      	movs	r3, #0
 80171ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	f383 8811 	msr	BASEPRI, r3
}
 80171c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80171c4:	bf00      	nop
 80171c6:	3708      	adds	r7, #8
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	e000ed04 	.word	0xe000ed04

080171d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80171d0:	b480      	push	{r7}
 80171d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80171d4:	4b0b      	ldr	r3, [pc, #44]	@ (8017204 <vPortSetupTimerInterrupt+0x34>)
 80171d6:	2200      	movs	r2, #0
 80171d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80171da:	4b0b      	ldr	r3, [pc, #44]	@ (8017208 <vPortSetupTimerInterrupt+0x38>)
 80171dc:	2200      	movs	r2, #0
 80171de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80171e0:	4b0a      	ldr	r3, [pc, #40]	@ (801720c <vPortSetupTimerInterrupt+0x3c>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	4a0a      	ldr	r2, [pc, #40]	@ (8017210 <vPortSetupTimerInterrupt+0x40>)
 80171e6:	fba2 2303 	umull	r2, r3, r2, r3
 80171ea:	099b      	lsrs	r3, r3, #6
 80171ec:	4a09      	ldr	r2, [pc, #36]	@ (8017214 <vPortSetupTimerInterrupt+0x44>)
 80171ee:	3b01      	subs	r3, #1
 80171f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80171f2:	4b04      	ldr	r3, [pc, #16]	@ (8017204 <vPortSetupTimerInterrupt+0x34>)
 80171f4:	2207      	movs	r2, #7
 80171f6:	601a      	str	r2, [r3, #0]
}
 80171f8:	bf00      	nop
 80171fa:	46bd      	mov	sp, r7
 80171fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017200:	4770      	bx	lr
 8017202:	bf00      	nop
 8017204:	e000e010 	.word	0xe000e010
 8017208:	e000e018 	.word	0xe000e018
 801720c:	20000020 	.word	0x20000020
 8017210:	10624dd3 	.word	0x10624dd3
 8017214:	e000e014 	.word	0xe000e014

08017218 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017218:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017228 <vPortEnableVFP+0x10>
 801721c:	6801      	ldr	r1, [r0, #0]
 801721e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8017222:	6001      	str	r1, [r0, #0]
 8017224:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017226:	bf00      	nop
 8017228:	e000ed88 	.word	0xe000ed88

0801722c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801722c:	b480      	push	{r7}
 801722e:	b085      	sub	sp, #20
 8017230:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017232:	f3ef 8305 	mrs	r3, IPSR
 8017236:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b0f      	cmp	r3, #15
 801723c:	d917      	bls.n	801726e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801723e:	4a1a      	ldr	r2, [pc, #104]	@ (80172a8 <vPortValidateInterruptPriority+0x7c>)
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	4413      	add	r3, r2
 8017244:	781b      	ldrb	r3, [r3, #0]
 8017246:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017248:	4b18      	ldr	r3, [pc, #96]	@ (80172ac <vPortValidateInterruptPriority+0x80>)
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	7afa      	ldrb	r2, [r7, #11]
 801724e:	429a      	cmp	r2, r3
 8017250:	d20d      	bcs.n	801726e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8017252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017256:	b672      	cpsid	i
 8017258:	f383 8811 	msr	BASEPRI, r3
 801725c:	f3bf 8f6f 	isb	sy
 8017260:	f3bf 8f4f 	dsb	sy
 8017264:	b662      	cpsie	i
 8017266:	607b      	str	r3, [r7, #4]
}
 8017268:	bf00      	nop
 801726a:	bf00      	nop
 801726c:	e7fd      	b.n	801726a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801726e:	4b10      	ldr	r3, [pc, #64]	@ (80172b0 <vPortValidateInterruptPriority+0x84>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017276:	4b0f      	ldr	r3, [pc, #60]	@ (80172b4 <vPortValidateInterruptPriority+0x88>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	429a      	cmp	r2, r3
 801727c:	d90d      	bls.n	801729a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017282:	b672      	cpsid	i
 8017284:	f383 8811 	msr	BASEPRI, r3
 8017288:	f3bf 8f6f 	isb	sy
 801728c:	f3bf 8f4f 	dsb	sy
 8017290:	b662      	cpsie	i
 8017292:	603b      	str	r3, [r7, #0]
}
 8017294:	bf00      	nop
 8017296:	bf00      	nop
 8017298:	e7fd      	b.n	8017296 <vPortValidateInterruptPriority+0x6a>
	}
 801729a:	bf00      	nop
 801729c:	3714      	adds	r7, #20
 801729e:	46bd      	mov	sp, r7
 80172a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop
 80172a8:	e000e3f0 	.word	0xe000e3f0
 80172ac:	20001d84 	.word	0x20001d84
 80172b0:	e000ed0c 	.word	0xe000ed0c
 80172b4:	20001d88 	.word	0x20001d88

080172b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b08a      	sub	sp, #40	@ 0x28
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80172c0:	2300      	movs	r3, #0
 80172c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80172c4:	f7ff f8aa 	bl	801641c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80172c8:	4b5f      	ldr	r3, [pc, #380]	@ (8017448 <pvPortMalloc+0x190>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d101      	bne.n	80172d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80172d0:	f000 f924 	bl	801751c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80172d4:	4b5d      	ldr	r3, [pc, #372]	@ (801744c <pvPortMalloc+0x194>)
 80172d6:	681a      	ldr	r2, [r3, #0]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	4013      	ands	r3, r2
 80172dc:	2b00      	cmp	r3, #0
 80172de:	f040 8094 	bne.w	801740a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d020      	beq.n	801732a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80172e8:	2208      	movs	r2, #8
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	4413      	add	r3, r2
 80172ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f003 0307 	and.w	r3, r3, #7
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d017      	beq.n	801732a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f023 0307 	bic.w	r3, r3, #7
 8017300:	3308      	adds	r3, #8
 8017302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f003 0307 	and.w	r3, r3, #7
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00d      	beq.n	801732a <pvPortMalloc+0x72>
	__asm volatile
 801730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017312:	b672      	cpsid	i
 8017314:	f383 8811 	msr	BASEPRI, r3
 8017318:	f3bf 8f6f 	isb	sy
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	b662      	cpsie	i
 8017322:	617b      	str	r3, [r7, #20]
}
 8017324:	bf00      	nop
 8017326:	bf00      	nop
 8017328:	e7fd      	b.n	8017326 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d06c      	beq.n	801740a <pvPortMalloc+0x152>
 8017330:	4b47      	ldr	r3, [pc, #284]	@ (8017450 <pvPortMalloc+0x198>)
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	429a      	cmp	r2, r3
 8017338:	d867      	bhi.n	801740a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801733a:	4b46      	ldr	r3, [pc, #280]	@ (8017454 <pvPortMalloc+0x19c>)
 801733c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801733e:	4b45      	ldr	r3, [pc, #276]	@ (8017454 <pvPortMalloc+0x19c>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017344:	e004      	b.n	8017350 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8017346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	429a      	cmp	r2, r3
 8017358:	d903      	bls.n	8017362 <pvPortMalloc+0xaa>
 801735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d1f1      	bne.n	8017346 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017362:	4b39      	ldr	r3, [pc, #228]	@ (8017448 <pvPortMalloc+0x190>)
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017368:	429a      	cmp	r2, r3
 801736a:	d04e      	beq.n	801740a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801736c:	6a3b      	ldr	r3, [r7, #32]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	2208      	movs	r2, #8
 8017372:	4413      	add	r3, r2
 8017374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	6a3b      	ldr	r3, [r7, #32]
 801737c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017380:	685a      	ldr	r2, [r3, #4]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	1ad2      	subs	r2, r2, r3
 8017386:	2308      	movs	r3, #8
 8017388:	005b      	lsls	r3, r3, #1
 801738a:	429a      	cmp	r2, r3
 801738c:	d922      	bls.n	80173d4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801738e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	4413      	add	r3, r2
 8017394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017396:	69bb      	ldr	r3, [r7, #24]
 8017398:	f003 0307 	and.w	r3, r3, #7
 801739c:	2b00      	cmp	r3, #0
 801739e:	d00d      	beq.n	80173bc <pvPortMalloc+0x104>
	__asm volatile
 80173a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a4:	b672      	cpsid	i
 80173a6:	f383 8811 	msr	BASEPRI, r3
 80173aa:	f3bf 8f6f 	isb	sy
 80173ae:	f3bf 8f4f 	dsb	sy
 80173b2:	b662      	cpsie	i
 80173b4:	613b      	str	r3, [r7, #16]
}
 80173b6:	bf00      	nop
 80173b8:	bf00      	nop
 80173ba:	e7fd      	b.n	80173b8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80173bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173be:	685a      	ldr	r2, [r3, #4]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	1ad2      	subs	r2, r2, r3
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80173c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ca:	687a      	ldr	r2, [r7, #4]
 80173cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80173ce:	69b8      	ldr	r0, [r7, #24]
 80173d0:	f000 f906 	bl	80175e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80173d4:	4b1e      	ldr	r3, [pc, #120]	@ (8017450 <pvPortMalloc+0x198>)
 80173d6:	681a      	ldr	r2, [r3, #0]
 80173d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	4a1c      	ldr	r2, [pc, #112]	@ (8017450 <pvPortMalloc+0x198>)
 80173e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80173e2:	4b1b      	ldr	r3, [pc, #108]	@ (8017450 <pvPortMalloc+0x198>)
 80173e4:	681a      	ldr	r2, [r3, #0]
 80173e6:	4b1c      	ldr	r3, [pc, #112]	@ (8017458 <pvPortMalloc+0x1a0>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d203      	bcs.n	80173f6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80173ee:	4b18      	ldr	r3, [pc, #96]	@ (8017450 <pvPortMalloc+0x198>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	4a19      	ldr	r2, [pc, #100]	@ (8017458 <pvPortMalloc+0x1a0>)
 80173f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80173f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f8:	685a      	ldr	r2, [r3, #4]
 80173fa:	4b14      	ldr	r3, [pc, #80]	@ (801744c <pvPortMalloc+0x194>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	431a      	orrs	r2, r3
 8017400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017402:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017406:	2200      	movs	r2, #0
 8017408:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801740a:	f7ff f815 	bl	8016438 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d101      	bne.n	8017418 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017414:	f7ea fdb2 	bl	8001f7c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	f003 0307 	and.w	r3, r3, #7
 801741e:	2b00      	cmp	r3, #0
 8017420:	d00d      	beq.n	801743e <pvPortMalloc+0x186>
	__asm volatile
 8017422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017426:	b672      	cpsid	i
 8017428:	f383 8811 	msr	BASEPRI, r3
 801742c:	f3bf 8f6f 	isb	sy
 8017430:	f3bf 8f4f 	dsb	sy
 8017434:	b662      	cpsie	i
 8017436:	60fb      	str	r3, [r7, #12]
}
 8017438:	bf00      	nop
 801743a:	bf00      	nop
 801743c:	e7fd      	b.n	801743a <pvPortMalloc+0x182>
	return pvReturn;
 801743e:	69fb      	ldr	r3, [r7, #28]
}
 8017440:	4618      	mov	r0, r3
 8017442:	3728      	adds	r7, #40	@ 0x28
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}
 8017448:	20011d94 	.word	0x20011d94
 801744c:	20011da0 	.word	0x20011da0
 8017450:	20011d98 	.word	0x20011d98
 8017454:	20011d8c 	.word	0x20011d8c
 8017458:	20011d9c 	.word	0x20011d9c

0801745c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b086      	sub	sp, #24
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d04e      	beq.n	801750c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801746e:	2308      	movs	r3, #8
 8017470:	425b      	negs	r3, r3
 8017472:	697a      	ldr	r2, [r7, #20]
 8017474:	4413      	add	r3, r2
 8017476:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	685a      	ldr	r2, [r3, #4]
 8017480:	4b24      	ldr	r3, [pc, #144]	@ (8017514 <vPortFree+0xb8>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	4013      	ands	r3, r2
 8017486:	2b00      	cmp	r3, #0
 8017488:	d10d      	bne.n	80174a6 <vPortFree+0x4a>
	__asm volatile
 801748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801748e:	b672      	cpsid	i
 8017490:	f383 8811 	msr	BASEPRI, r3
 8017494:	f3bf 8f6f 	isb	sy
 8017498:	f3bf 8f4f 	dsb	sy
 801749c:	b662      	cpsie	i
 801749e:	60fb      	str	r3, [r7, #12]
}
 80174a0:	bf00      	nop
 80174a2:	bf00      	nop
 80174a4:	e7fd      	b.n	80174a2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d00d      	beq.n	80174ca <vPortFree+0x6e>
	__asm volatile
 80174ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174b2:	b672      	cpsid	i
 80174b4:	f383 8811 	msr	BASEPRI, r3
 80174b8:	f3bf 8f6f 	isb	sy
 80174bc:	f3bf 8f4f 	dsb	sy
 80174c0:	b662      	cpsie	i
 80174c2:	60bb      	str	r3, [r7, #8]
}
 80174c4:	bf00      	nop
 80174c6:	bf00      	nop
 80174c8:	e7fd      	b.n	80174c6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	685a      	ldr	r2, [r3, #4]
 80174ce:	4b11      	ldr	r3, [pc, #68]	@ (8017514 <vPortFree+0xb8>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	4013      	ands	r3, r2
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d019      	beq.n	801750c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d115      	bne.n	801750c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	685a      	ldr	r2, [r3, #4]
 80174e4:	4b0b      	ldr	r3, [pc, #44]	@ (8017514 <vPortFree+0xb8>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	43db      	mvns	r3, r3
 80174ea:	401a      	ands	r2, r3
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80174f0:	f7fe ff94 	bl	801641c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80174f4:	693b      	ldr	r3, [r7, #16]
 80174f6:	685a      	ldr	r2, [r3, #4]
 80174f8:	4b07      	ldr	r3, [pc, #28]	@ (8017518 <vPortFree+0xbc>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	4413      	add	r3, r2
 80174fe:	4a06      	ldr	r2, [pc, #24]	@ (8017518 <vPortFree+0xbc>)
 8017500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017502:	6938      	ldr	r0, [r7, #16]
 8017504:	f000 f86c 	bl	80175e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017508:	f7fe ff96 	bl	8016438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801750c:	bf00      	nop
 801750e:	3718      	adds	r7, #24
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}
 8017514:	20011da0 	.word	0x20011da0
 8017518:	20011d98 	.word	0x20011d98

0801751c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801751c:	b480      	push	{r7}
 801751e:	b085      	sub	sp, #20
 8017520:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017526:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017528:	4b27      	ldr	r3, [pc, #156]	@ (80175c8 <prvHeapInit+0xac>)
 801752a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	f003 0307 	and.w	r3, r3, #7
 8017532:	2b00      	cmp	r3, #0
 8017534:	d00c      	beq.n	8017550 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	3307      	adds	r3, #7
 801753a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	f023 0307 	bic.w	r3, r3, #7
 8017542:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017544:	68ba      	ldr	r2, [r7, #8]
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	1ad3      	subs	r3, r2, r3
 801754a:	4a1f      	ldr	r2, [pc, #124]	@ (80175c8 <prvHeapInit+0xac>)
 801754c:	4413      	add	r3, r2
 801754e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017554:	4a1d      	ldr	r2, [pc, #116]	@ (80175cc <prvHeapInit+0xb0>)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801755a:	4b1c      	ldr	r3, [pc, #112]	@ (80175cc <prvHeapInit+0xb0>)
 801755c:	2200      	movs	r2, #0
 801755e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	68ba      	ldr	r2, [r7, #8]
 8017564:	4413      	add	r3, r2
 8017566:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017568:	2208      	movs	r2, #8
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	1a9b      	subs	r3, r3, r2
 801756e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f023 0307 	bic.w	r3, r3, #7
 8017576:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	4a15      	ldr	r2, [pc, #84]	@ (80175d0 <prvHeapInit+0xb4>)
 801757c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801757e:	4b14      	ldr	r3, [pc, #80]	@ (80175d0 <prvHeapInit+0xb4>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2200      	movs	r2, #0
 8017584:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017586:	4b12      	ldr	r3, [pc, #72]	@ (80175d0 <prvHeapInit+0xb4>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2200      	movs	r2, #0
 801758c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	68fa      	ldr	r2, [r7, #12]
 8017596:	1ad2      	subs	r2, r2, r3
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801759c:	4b0c      	ldr	r3, [pc, #48]	@ (80175d0 <prvHeapInit+0xb4>)
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	4a0a      	ldr	r2, [pc, #40]	@ (80175d4 <prvHeapInit+0xb8>)
 80175aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	685b      	ldr	r3, [r3, #4]
 80175b0:	4a09      	ldr	r2, [pc, #36]	@ (80175d8 <prvHeapInit+0xbc>)
 80175b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80175b4:	4b09      	ldr	r3, [pc, #36]	@ (80175dc <prvHeapInit+0xc0>)
 80175b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80175ba:	601a      	str	r2, [r3, #0]
}
 80175bc:	bf00      	nop
 80175be:	3714      	adds	r7, #20
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr
 80175c8:	20001d8c 	.word	0x20001d8c
 80175cc:	20011d8c 	.word	0x20011d8c
 80175d0:	20011d94 	.word	0x20011d94
 80175d4:	20011d9c 	.word	0x20011d9c
 80175d8:	20011d98 	.word	0x20011d98
 80175dc:	20011da0 	.word	0x20011da0

080175e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80175e0:	b480      	push	{r7}
 80175e2:	b085      	sub	sp, #20
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80175e8:	4b28      	ldr	r3, [pc, #160]	@ (801768c <prvInsertBlockIntoFreeList+0xac>)
 80175ea:	60fb      	str	r3, [r7, #12]
 80175ec:	e002      	b.n	80175f4 <prvInsertBlockIntoFreeList+0x14>
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d8f7      	bhi.n	80175ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	68ba      	ldr	r2, [r7, #8]
 8017608:	4413      	add	r3, r2
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	429a      	cmp	r2, r3
 801760e:	d108      	bne.n	8017622 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	685a      	ldr	r2, [r3, #4]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	685b      	ldr	r3, [r3, #4]
 8017618:	441a      	add	r2, r3
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	68ba      	ldr	r2, [r7, #8]
 801762c:	441a      	add	r2, r3
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	429a      	cmp	r2, r3
 8017634:	d118      	bne.n	8017668 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	4b15      	ldr	r3, [pc, #84]	@ (8017690 <prvInsertBlockIntoFreeList+0xb0>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	429a      	cmp	r2, r3
 8017640:	d00d      	beq.n	801765e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	685a      	ldr	r2, [r3, #4]
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	441a      	add	r2, r3
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	601a      	str	r2, [r3, #0]
 801765c:	e008      	b.n	8017670 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801765e:	4b0c      	ldr	r3, [pc, #48]	@ (8017690 <prvInsertBlockIntoFreeList+0xb0>)
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	601a      	str	r2, [r3, #0]
 8017666:	e003      	b.n	8017670 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017670:	68fa      	ldr	r2, [r7, #12]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	429a      	cmp	r2, r3
 8017676:	d002      	beq.n	801767e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801767e:	bf00      	nop
 8017680:	3714      	adds	r7, #20
 8017682:	46bd      	mov	sp, r7
 8017684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017688:	4770      	bx	lr
 801768a:	bf00      	nop
 801768c:	20011d8c 	.word	0x20011d8c
 8017690:	20011d94 	.word	0x20011d94

08017694 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b082      	sub	sp, #8
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7fa fe36 	bl	8012314 <USBH_LL_IncTimer>
}
 80176a8:	bf00      	nop
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176be:	4618      	mov	r0, r3
 80176c0:	f7fa fe76 	bl	80123b0 <USBH_LL_Connect>
}
 80176c4:	bf00      	nop
 80176c6:	3708      	adds	r7, #8
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176da:	4618      	mov	r0, r3
 80176dc:	f7fa fe83 	bl	80123e6 <USBH_LL_Disconnect>
}
 80176e0:	bf00      	nop
 80176e2:	3708      	adds	r7, #8
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}

080176e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b082      	sub	sp, #8
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	460b      	mov	r3, r1
 80176f2:	70fb      	strb	r3, [r7, #3]
 80176f4:	4613      	mov	r3, r2
 80176f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176fe:	4618      	mov	r0, r3
 8017700:	f7fa fec2 	bl	8012488 <USBH_LL_NotifyURBChange>
#endif
}
 8017704:	bf00      	nop
 8017706:	3708      	adds	r7, #8
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801771a:	4618      	mov	r0, r3
 801771c:	f7fa fe24 	bl	8012368 <USBH_LL_PortEnabled>
}
 8017720:	bf00      	nop
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}

08017728 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017736:	4618      	mov	r0, r3
 8017738:	f7fa fe28 	bl	801238c <USBH_LL_PortDisabled>
}
 801773c:	bf00      	nop
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b084      	sub	sp, #16
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801774c:	2300      	movs	r3, #0
 801774e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017750:	2300      	movs	r3, #0
 8017752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801775a:	4618      	mov	r0, r3
 801775c:	f7f1 f86d 	bl	800883a <HAL_HCD_Stop>
 8017760:	4603      	mov	r3, r0
 8017762:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017764:	7bfb      	ldrb	r3, [r7, #15]
 8017766:	4618      	mov	r0, r3
 8017768:	f000 f808 	bl	801777c <USBH_Get_USB_Status>
 801776c:	4603      	mov	r3, r0
 801776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017770:	7bbb      	ldrb	r3, [r7, #14]
}
 8017772:	4618      	mov	r0, r3
 8017774:	3710      	adds	r7, #16
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
	...

0801777c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801777c:	b480      	push	{r7}
 801777e:	b085      	sub	sp, #20
 8017780:	af00      	add	r7, sp, #0
 8017782:	4603      	mov	r3, r0
 8017784:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017786:	2300      	movs	r3, #0
 8017788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801778a:	79fb      	ldrb	r3, [r7, #7]
 801778c:	2b03      	cmp	r3, #3
 801778e:	d817      	bhi.n	80177c0 <USBH_Get_USB_Status+0x44>
 8017790:	a201      	add	r2, pc, #4	@ (adr r2, 8017798 <USBH_Get_USB_Status+0x1c>)
 8017792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017796:	bf00      	nop
 8017798:	080177a9 	.word	0x080177a9
 801779c:	080177af 	.word	0x080177af
 80177a0:	080177b5 	.word	0x080177b5
 80177a4:	080177bb 	.word	0x080177bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80177a8:	2300      	movs	r3, #0
 80177aa:	73fb      	strb	r3, [r7, #15]
    break;
 80177ac:	e00b      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80177ae:	2302      	movs	r3, #2
 80177b0:	73fb      	strb	r3, [r7, #15]
    break;
 80177b2:	e008      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80177b4:	2301      	movs	r3, #1
 80177b6:	73fb      	strb	r3, [r7, #15]
    break;
 80177b8:	e005      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80177ba:	2302      	movs	r3, #2
 80177bc:	73fb      	strb	r3, [r7, #15]
    break;
 80177be:	e002      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80177c0:	2302      	movs	r3, #2
 80177c2:	73fb      	strb	r3, [r7, #15]
    break;
 80177c4:	bf00      	nop
  }
  return usb_status;
 80177c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3714      	adds	r7, #20
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr

080177d4 <sbrk_aligned>:
 80177d4:	b570      	push	{r4, r5, r6, lr}
 80177d6:	4e0f      	ldr	r6, [pc, #60]	@ (8017814 <sbrk_aligned+0x40>)
 80177d8:	460c      	mov	r4, r1
 80177da:	6831      	ldr	r1, [r6, #0]
 80177dc:	4605      	mov	r5, r0
 80177de:	b911      	cbnz	r1, 80177e6 <sbrk_aligned+0x12>
 80177e0:	f000 faf2 	bl	8017dc8 <_sbrk_r>
 80177e4:	6030      	str	r0, [r6, #0]
 80177e6:	4621      	mov	r1, r4
 80177e8:	4628      	mov	r0, r5
 80177ea:	f000 faed 	bl	8017dc8 <_sbrk_r>
 80177ee:	1c43      	adds	r3, r0, #1
 80177f0:	d103      	bne.n	80177fa <sbrk_aligned+0x26>
 80177f2:	f04f 34ff 	mov.w	r4, #4294967295
 80177f6:	4620      	mov	r0, r4
 80177f8:	bd70      	pop	{r4, r5, r6, pc}
 80177fa:	1cc4      	adds	r4, r0, #3
 80177fc:	f024 0403 	bic.w	r4, r4, #3
 8017800:	42a0      	cmp	r0, r4
 8017802:	d0f8      	beq.n	80177f6 <sbrk_aligned+0x22>
 8017804:	1a21      	subs	r1, r4, r0
 8017806:	4628      	mov	r0, r5
 8017808:	f000 fade 	bl	8017dc8 <_sbrk_r>
 801780c:	3001      	adds	r0, #1
 801780e:	d1f2      	bne.n	80177f6 <sbrk_aligned+0x22>
 8017810:	e7ef      	b.n	80177f2 <sbrk_aligned+0x1e>
 8017812:	bf00      	nop
 8017814:	20012184 	.word	0x20012184

08017818 <_malloc_r>:
 8017818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801781c:	1ccd      	adds	r5, r1, #3
 801781e:	f025 0503 	bic.w	r5, r5, #3
 8017822:	3508      	adds	r5, #8
 8017824:	2d0c      	cmp	r5, #12
 8017826:	bf38      	it	cc
 8017828:	250c      	movcc	r5, #12
 801782a:	2d00      	cmp	r5, #0
 801782c:	4606      	mov	r6, r0
 801782e:	db01      	blt.n	8017834 <_malloc_r+0x1c>
 8017830:	42a9      	cmp	r1, r5
 8017832:	d904      	bls.n	801783e <_malloc_r+0x26>
 8017834:	230c      	movs	r3, #12
 8017836:	6033      	str	r3, [r6, #0]
 8017838:	2000      	movs	r0, #0
 801783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801783e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017914 <_malloc_r+0xfc>
 8017842:	f000 f869 	bl	8017918 <__malloc_lock>
 8017846:	f8d8 3000 	ldr.w	r3, [r8]
 801784a:	461c      	mov	r4, r3
 801784c:	bb44      	cbnz	r4, 80178a0 <_malloc_r+0x88>
 801784e:	4629      	mov	r1, r5
 8017850:	4630      	mov	r0, r6
 8017852:	f7ff ffbf 	bl	80177d4 <sbrk_aligned>
 8017856:	1c43      	adds	r3, r0, #1
 8017858:	4604      	mov	r4, r0
 801785a:	d158      	bne.n	801790e <_malloc_r+0xf6>
 801785c:	f8d8 4000 	ldr.w	r4, [r8]
 8017860:	4627      	mov	r7, r4
 8017862:	2f00      	cmp	r7, #0
 8017864:	d143      	bne.n	80178ee <_malloc_r+0xd6>
 8017866:	2c00      	cmp	r4, #0
 8017868:	d04b      	beq.n	8017902 <_malloc_r+0xea>
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	4639      	mov	r1, r7
 801786e:	4630      	mov	r0, r6
 8017870:	eb04 0903 	add.w	r9, r4, r3
 8017874:	f000 faa8 	bl	8017dc8 <_sbrk_r>
 8017878:	4581      	cmp	r9, r0
 801787a:	d142      	bne.n	8017902 <_malloc_r+0xea>
 801787c:	6821      	ldr	r1, [r4, #0]
 801787e:	1a6d      	subs	r5, r5, r1
 8017880:	4629      	mov	r1, r5
 8017882:	4630      	mov	r0, r6
 8017884:	f7ff ffa6 	bl	80177d4 <sbrk_aligned>
 8017888:	3001      	adds	r0, #1
 801788a:	d03a      	beq.n	8017902 <_malloc_r+0xea>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	442b      	add	r3, r5
 8017890:	6023      	str	r3, [r4, #0]
 8017892:	f8d8 3000 	ldr.w	r3, [r8]
 8017896:	685a      	ldr	r2, [r3, #4]
 8017898:	bb62      	cbnz	r2, 80178f4 <_malloc_r+0xdc>
 801789a:	f8c8 7000 	str.w	r7, [r8]
 801789e:	e00f      	b.n	80178c0 <_malloc_r+0xa8>
 80178a0:	6822      	ldr	r2, [r4, #0]
 80178a2:	1b52      	subs	r2, r2, r5
 80178a4:	d420      	bmi.n	80178e8 <_malloc_r+0xd0>
 80178a6:	2a0b      	cmp	r2, #11
 80178a8:	d917      	bls.n	80178da <_malloc_r+0xc2>
 80178aa:	1961      	adds	r1, r4, r5
 80178ac:	42a3      	cmp	r3, r4
 80178ae:	6025      	str	r5, [r4, #0]
 80178b0:	bf18      	it	ne
 80178b2:	6059      	strne	r1, [r3, #4]
 80178b4:	6863      	ldr	r3, [r4, #4]
 80178b6:	bf08      	it	eq
 80178b8:	f8c8 1000 	streq.w	r1, [r8]
 80178bc:	5162      	str	r2, [r4, r5]
 80178be:	604b      	str	r3, [r1, #4]
 80178c0:	4630      	mov	r0, r6
 80178c2:	f000 f82f 	bl	8017924 <__malloc_unlock>
 80178c6:	f104 000b 	add.w	r0, r4, #11
 80178ca:	1d23      	adds	r3, r4, #4
 80178cc:	f020 0007 	bic.w	r0, r0, #7
 80178d0:	1ac2      	subs	r2, r0, r3
 80178d2:	bf1c      	itt	ne
 80178d4:	1a1b      	subne	r3, r3, r0
 80178d6:	50a3      	strne	r3, [r4, r2]
 80178d8:	e7af      	b.n	801783a <_malloc_r+0x22>
 80178da:	6862      	ldr	r2, [r4, #4]
 80178dc:	42a3      	cmp	r3, r4
 80178de:	bf0c      	ite	eq
 80178e0:	f8c8 2000 	streq.w	r2, [r8]
 80178e4:	605a      	strne	r2, [r3, #4]
 80178e6:	e7eb      	b.n	80178c0 <_malloc_r+0xa8>
 80178e8:	4623      	mov	r3, r4
 80178ea:	6864      	ldr	r4, [r4, #4]
 80178ec:	e7ae      	b.n	801784c <_malloc_r+0x34>
 80178ee:	463c      	mov	r4, r7
 80178f0:	687f      	ldr	r7, [r7, #4]
 80178f2:	e7b6      	b.n	8017862 <_malloc_r+0x4a>
 80178f4:	461a      	mov	r2, r3
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	42a3      	cmp	r3, r4
 80178fa:	d1fb      	bne.n	80178f4 <_malloc_r+0xdc>
 80178fc:	2300      	movs	r3, #0
 80178fe:	6053      	str	r3, [r2, #4]
 8017900:	e7de      	b.n	80178c0 <_malloc_r+0xa8>
 8017902:	230c      	movs	r3, #12
 8017904:	6033      	str	r3, [r6, #0]
 8017906:	4630      	mov	r0, r6
 8017908:	f000 f80c 	bl	8017924 <__malloc_unlock>
 801790c:	e794      	b.n	8017838 <_malloc_r+0x20>
 801790e:	6005      	str	r5, [r0, #0]
 8017910:	e7d6      	b.n	80178c0 <_malloc_r+0xa8>
 8017912:	bf00      	nop
 8017914:	20012188 	.word	0x20012188

08017918 <__malloc_lock>:
 8017918:	4801      	ldr	r0, [pc, #4]	@ (8017920 <__malloc_lock+0x8>)
 801791a:	f000 baa2 	b.w	8017e62 <__retarget_lock_acquire_recursive>
 801791e:	bf00      	nop
 8017920:	200122cc 	.word	0x200122cc

08017924 <__malloc_unlock>:
 8017924:	4801      	ldr	r0, [pc, #4]	@ (801792c <__malloc_unlock+0x8>)
 8017926:	f000 ba9d 	b.w	8017e64 <__retarget_lock_release_recursive>
 801792a:	bf00      	nop
 801792c:	200122cc 	.word	0x200122cc

08017930 <std>:
 8017930:	2300      	movs	r3, #0
 8017932:	b510      	push	{r4, lr}
 8017934:	4604      	mov	r4, r0
 8017936:	e9c0 3300 	strd	r3, r3, [r0]
 801793a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801793e:	6083      	str	r3, [r0, #8]
 8017940:	8181      	strh	r1, [r0, #12]
 8017942:	6643      	str	r3, [r0, #100]	@ 0x64
 8017944:	81c2      	strh	r2, [r0, #14]
 8017946:	6183      	str	r3, [r0, #24]
 8017948:	4619      	mov	r1, r3
 801794a:	2208      	movs	r2, #8
 801794c:	305c      	adds	r0, #92	@ 0x5c
 801794e:	f000 f9c9 	bl	8017ce4 <memset>
 8017952:	4b0d      	ldr	r3, [pc, #52]	@ (8017988 <std+0x58>)
 8017954:	6263      	str	r3, [r4, #36]	@ 0x24
 8017956:	4b0d      	ldr	r3, [pc, #52]	@ (801798c <std+0x5c>)
 8017958:	62a3      	str	r3, [r4, #40]	@ 0x28
 801795a:	4b0d      	ldr	r3, [pc, #52]	@ (8017990 <std+0x60>)
 801795c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801795e:	4b0d      	ldr	r3, [pc, #52]	@ (8017994 <std+0x64>)
 8017960:	6323      	str	r3, [r4, #48]	@ 0x30
 8017962:	4b0d      	ldr	r3, [pc, #52]	@ (8017998 <std+0x68>)
 8017964:	6224      	str	r4, [r4, #32]
 8017966:	429c      	cmp	r4, r3
 8017968:	d006      	beq.n	8017978 <std+0x48>
 801796a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801796e:	4294      	cmp	r4, r2
 8017970:	d002      	beq.n	8017978 <std+0x48>
 8017972:	33d0      	adds	r3, #208	@ 0xd0
 8017974:	429c      	cmp	r4, r3
 8017976:	d105      	bne.n	8017984 <std+0x54>
 8017978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017980:	f000 ba6e 	b.w	8017e60 <__retarget_lock_init_recursive>
 8017984:	bd10      	pop	{r4, pc}
 8017986:	bf00      	nop
 8017988:	08017be1 	.word	0x08017be1
 801798c:	08017c07 	.word	0x08017c07
 8017990:	08017c3f 	.word	0x08017c3f
 8017994:	08017c63 	.word	0x08017c63
 8017998:	2001218c 	.word	0x2001218c

0801799c <stdio_exit_handler>:
 801799c:	4a02      	ldr	r2, [pc, #8]	@ (80179a8 <stdio_exit_handler+0xc>)
 801799e:	4903      	ldr	r1, [pc, #12]	@ (80179ac <stdio_exit_handler+0x10>)
 80179a0:	4803      	ldr	r0, [pc, #12]	@ (80179b0 <stdio_exit_handler+0x14>)
 80179a2:	f000 b869 	b.w	8017a78 <_fwalk_sglue>
 80179a6:	bf00      	nop
 80179a8:	2000007c 	.word	0x2000007c
 80179ac:	08018ea9 	.word	0x08018ea9
 80179b0:	2000008c 	.word	0x2000008c

080179b4 <cleanup_stdio>:
 80179b4:	6841      	ldr	r1, [r0, #4]
 80179b6:	4b0c      	ldr	r3, [pc, #48]	@ (80179e8 <cleanup_stdio+0x34>)
 80179b8:	4299      	cmp	r1, r3
 80179ba:	b510      	push	{r4, lr}
 80179bc:	4604      	mov	r4, r0
 80179be:	d001      	beq.n	80179c4 <cleanup_stdio+0x10>
 80179c0:	f001 fa72 	bl	8018ea8 <_fflush_r>
 80179c4:	68a1      	ldr	r1, [r4, #8]
 80179c6:	4b09      	ldr	r3, [pc, #36]	@ (80179ec <cleanup_stdio+0x38>)
 80179c8:	4299      	cmp	r1, r3
 80179ca:	d002      	beq.n	80179d2 <cleanup_stdio+0x1e>
 80179cc:	4620      	mov	r0, r4
 80179ce:	f001 fa6b 	bl	8018ea8 <_fflush_r>
 80179d2:	68e1      	ldr	r1, [r4, #12]
 80179d4:	4b06      	ldr	r3, [pc, #24]	@ (80179f0 <cleanup_stdio+0x3c>)
 80179d6:	4299      	cmp	r1, r3
 80179d8:	d004      	beq.n	80179e4 <cleanup_stdio+0x30>
 80179da:	4620      	mov	r0, r4
 80179dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179e0:	f001 ba62 	b.w	8018ea8 <_fflush_r>
 80179e4:	bd10      	pop	{r4, pc}
 80179e6:	bf00      	nop
 80179e8:	2001218c 	.word	0x2001218c
 80179ec:	200121f4 	.word	0x200121f4
 80179f0:	2001225c 	.word	0x2001225c

080179f4 <global_stdio_init.part.0>:
 80179f4:	b510      	push	{r4, lr}
 80179f6:	4b0b      	ldr	r3, [pc, #44]	@ (8017a24 <global_stdio_init.part.0+0x30>)
 80179f8:	4c0b      	ldr	r4, [pc, #44]	@ (8017a28 <global_stdio_init.part.0+0x34>)
 80179fa:	4a0c      	ldr	r2, [pc, #48]	@ (8017a2c <global_stdio_init.part.0+0x38>)
 80179fc:	601a      	str	r2, [r3, #0]
 80179fe:	4620      	mov	r0, r4
 8017a00:	2200      	movs	r2, #0
 8017a02:	2104      	movs	r1, #4
 8017a04:	f7ff ff94 	bl	8017930 <std>
 8017a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017a0c:	2201      	movs	r2, #1
 8017a0e:	2109      	movs	r1, #9
 8017a10:	f7ff ff8e 	bl	8017930 <std>
 8017a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017a18:	2202      	movs	r2, #2
 8017a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a1e:	2112      	movs	r1, #18
 8017a20:	f7ff bf86 	b.w	8017930 <std>
 8017a24:	200122c4 	.word	0x200122c4
 8017a28:	2001218c 	.word	0x2001218c
 8017a2c:	0801799d 	.word	0x0801799d

08017a30 <__sfp_lock_acquire>:
 8017a30:	4801      	ldr	r0, [pc, #4]	@ (8017a38 <__sfp_lock_acquire+0x8>)
 8017a32:	f000 ba16 	b.w	8017e62 <__retarget_lock_acquire_recursive>
 8017a36:	bf00      	nop
 8017a38:	200122cd 	.word	0x200122cd

08017a3c <__sfp_lock_release>:
 8017a3c:	4801      	ldr	r0, [pc, #4]	@ (8017a44 <__sfp_lock_release+0x8>)
 8017a3e:	f000 ba11 	b.w	8017e64 <__retarget_lock_release_recursive>
 8017a42:	bf00      	nop
 8017a44:	200122cd 	.word	0x200122cd

08017a48 <__sinit>:
 8017a48:	b510      	push	{r4, lr}
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	f7ff fff0 	bl	8017a30 <__sfp_lock_acquire>
 8017a50:	6a23      	ldr	r3, [r4, #32]
 8017a52:	b11b      	cbz	r3, 8017a5c <__sinit+0x14>
 8017a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a58:	f7ff bff0 	b.w	8017a3c <__sfp_lock_release>
 8017a5c:	4b04      	ldr	r3, [pc, #16]	@ (8017a70 <__sinit+0x28>)
 8017a5e:	6223      	str	r3, [r4, #32]
 8017a60:	4b04      	ldr	r3, [pc, #16]	@ (8017a74 <__sinit+0x2c>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1f5      	bne.n	8017a54 <__sinit+0xc>
 8017a68:	f7ff ffc4 	bl	80179f4 <global_stdio_init.part.0>
 8017a6c:	e7f2      	b.n	8017a54 <__sinit+0xc>
 8017a6e:	bf00      	nop
 8017a70:	080179b5 	.word	0x080179b5
 8017a74:	200122c4 	.word	0x200122c4

08017a78 <_fwalk_sglue>:
 8017a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a7c:	4607      	mov	r7, r0
 8017a7e:	4688      	mov	r8, r1
 8017a80:	4614      	mov	r4, r2
 8017a82:	2600      	movs	r6, #0
 8017a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a88:	f1b9 0901 	subs.w	r9, r9, #1
 8017a8c:	d505      	bpl.n	8017a9a <_fwalk_sglue+0x22>
 8017a8e:	6824      	ldr	r4, [r4, #0]
 8017a90:	2c00      	cmp	r4, #0
 8017a92:	d1f7      	bne.n	8017a84 <_fwalk_sglue+0xc>
 8017a94:	4630      	mov	r0, r6
 8017a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a9a:	89ab      	ldrh	r3, [r5, #12]
 8017a9c:	2b01      	cmp	r3, #1
 8017a9e:	d907      	bls.n	8017ab0 <_fwalk_sglue+0x38>
 8017aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	d003      	beq.n	8017ab0 <_fwalk_sglue+0x38>
 8017aa8:	4629      	mov	r1, r5
 8017aaa:	4638      	mov	r0, r7
 8017aac:	47c0      	blx	r8
 8017aae:	4306      	orrs	r6, r0
 8017ab0:	3568      	adds	r5, #104	@ 0x68
 8017ab2:	e7e9      	b.n	8017a88 <_fwalk_sglue+0x10>

08017ab4 <iprintf>:
 8017ab4:	b40f      	push	{r0, r1, r2, r3}
 8017ab6:	b507      	push	{r0, r1, r2, lr}
 8017ab8:	4906      	ldr	r1, [pc, #24]	@ (8017ad4 <iprintf+0x20>)
 8017aba:	ab04      	add	r3, sp, #16
 8017abc:	6808      	ldr	r0, [r1, #0]
 8017abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ac2:	6881      	ldr	r1, [r0, #8]
 8017ac4:	9301      	str	r3, [sp, #4]
 8017ac6:	f000 fd79 	bl	80185bc <_vfiprintf_r>
 8017aca:	b003      	add	sp, #12
 8017acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ad0:	b004      	add	sp, #16
 8017ad2:	4770      	bx	lr
 8017ad4:	20000088 	.word	0x20000088

08017ad8 <sniprintf>:
 8017ad8:	b40c      	push	{r2, r3}
 8017ada:	b530      	push	{r4, r5, lr}
 8017adc:	4b18      	ldr	r3, [pc, #96]	@ (8017b40 <sniprintf+0x68>)
 8017ade:	1e0c      	subs	r4, r1, #0
 8017ae0:	681d      	ldr	r5, [r3, #0]
 8017ae2:	b09d      	sub	sp, #116	@ 0x74
 8017ae4:	da08      	bge.n	8017af8 <sniprintf+0x20>
 8017ae6:	238b      	movs	r3, #139	@ 0x8b
 8017ae8:	602b      	str	r3, [r5, #0]
 8017aea:	f04f 30ff 	mov.w	r0, #4294967295
 8017aee:	b01d      	add	sp, #116	@ 0x74
 8017af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017af4:	b002      	add	sp, #8
 8017af6:	4770      	bx	lr
 8017af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b00:	f04f 0300 	mov.w	r3, #0
 8017b04:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017b06:	bf14      	ite	ne
 8017b08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b0c:	4623      	moveq	r3, r4
 8017b0e:	9304      	str	r3, [sp, #16]
 8017b10:	9307      	str	r3, [sp, #28]
 8017b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b16:	9002      	str	r0, [sp, #8]
 8017b18:	9006      	str	r0, [sp, #24]
 8017b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017b20:	ab21      	add	r3, sp, #132	@ 0x84
 8017b22:	a902      	add	r1, sp, #8
 8017b24:	4628      	mov	r0, r5
 8017b26:	9301      	str	r3, [sp, #4]
 8017b28:	f000 fa52 	bl	8017fd0 <_svfiprintf_r>
 8017b2c:	1c43      	adds	r3, r0, #1
 8017b2e:	bfbc      	itt	lt
 8017b30:	238b      	movlt	r3, #139	@ 0x8b
 8017b32:	602b      	strlt	r3, [r5, #0]
 8017b34:	2c00      	cmp	r4, #0
 8017b36:	d0da      	beq.n	8017aee <sniprintf+0x16>
 8017b38:	9b02      	ldr	r3, [sp, #8]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	701a      	strb	r2, [r3, #0]
 8017b3e:	e7d6      	b.n	8017aee <sniprintf+0x16>
 8017b40:	20000088 	.word	0x20000088

08017b44 <siprintf>:
 8017b44:	b40e      	push	{r1, r2, r3}
 8017b46:	b510      	push	{r4, lr}
 8017b48:	b09d      	sub	sp, #116	@ 0x74
 8017b4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017b4c:	9002      	str	r0, [sp, #8]
 8017b4e:	9006      	str	r0, [sp, #24]
 8017b50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017b54:	480a      	ldr	r0, [pc, #40]	@ (8017b80 <siprintf+0x3c>)
 8017b56:	9107      	str	r1, [sp, #28]
 8017b58:	9104      	str	r1, [sp, #16]
 8017b5a:	490a      	ldr	r1, [pc, #40]	@ (8017b84 <siprintf+0x40>)
 8017b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b60:	9105      	str	r1, [sp, #20]
 8017b62:	2400      	movs	r4, #0
 8017b64:	a902      	add	r1, sp, #8
 8017b66:	6800      	ldr	r0, [r0, #0]
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017b6c:	f000 fa30 	bl	8017fd0 <_svfiprintf_r>
 8017b70:	9b02      	ldr	r3, [sp, #8]
 8017b72:	701c      	strb	r4, [r3, #0]
 8017b74:	b01d      	add	sp, #116	@ 0x74
 8017b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b7a:	b003      	add	sp, #12
 8017b7c:	4770      	bx	lr
 8017b7e:	bf00      	nop
 8017b80:	20000088 	.word	0x20000088
 8017b84:	ffff0208 	.word	0xffff0208

08017b88 <siscanf>:
 8017b88:	b40e      	push	{r1, r2, r3}
 8017b8a:	b570      	push	{r4, r5, r6, lr}
 8017b8c:	b09d      	sub	sp, #116	@ 0x74
 8017b8e:	ac21      	add	r4, sp, #132	@ 0x84
 8017b90:	2500      	movs	r5, #0
 8017b92:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017b96:	f854 6b04 	ldr.w	r6, [r4], #4
 8017b9a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b9e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8017ba0:	9002      	str	r0, [sp, #8]
 8017ba2:	9006      	str	r0, [sp, #24]
 8017ba4:	f7e8 fb3e 	bl	8000224 <strlen>
 8017ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8017bd8 <siscanf+0x50>)
 8017baa:	9003      	str	r0, [sp, #12]
 8017bac:	9007      	str	r0, [sp, #28]
 8017bae:	480b      	ldr	r0, [pc, #44]	@ (8017bdc <siscanf+0x54>)
 8017bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017bb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bba:	4632      	mov	r2, r6
 8017bbc:	4623      	mov	r3, r4
 8017bbe:	a902      	add	r1, sp, #8
 8017bc0:	6800      	ldr	r0, [r0, #0]
 8017bc2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017bc4:	9514      	str	r5, [sp, #80]	@ 0x50
 8017bc6:	9401      	str	r4, [sp, #4]
 8017bc8:	f000 fb58 	bl	801827c <__ssvfiscanf_r>
 8017bcc:	b01d      	add	sp, #116	@ 0x74
 8017bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bd2:	b003      	add	sp, #12
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	08017c03 	.word	0x08017c03
 8017bdc:	20000088 	.word	0x20000088

08017be0 <__sread>:
 8017be0:	b510      	push	{r4, lr}
 8017be2:	460c      	mov	r4, r1
 8017be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be8:	f000 f8dc 	bl	8017da4 <_read_r>
 8017bec:	2800      	cmp	r0, #0
 8017bee:	bfab      	itete	ge
 8017bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8017bf4:	181b      	addge	r3, r3, r0
 8017bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017bfa:	bfac      	ite	ge
 8017bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017bfe:	81a3      	strhlt	r3, [r4, #12]
 8017c00:	bd10      	pop	{r4, pc}

08017c02 <__seofread>:
 8017c02:	2000      	movs	r0, #0
 8017c04:	4770      	bx	lr

08017c06 <__swrite>:
 8017c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c0a:	461f      	mov	r7, r3
 8017c0c:	898b      	ldrh	r3, [r1, #12]
 8017c0e:	05db      	lsls	r3, r3, #23
 8017c10:	4605      	mov	r5, r0
 8017c12:	460c      	mov	r4, r1
 8017c14:	4616      	mov	r6, r2
 8017c16:	d505      	bpl.n	8017c24 <__swrite+0x1e>
 8017c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c1c:	2302      	movs	r3, #2
 8017c1e:	2200      	movs	r2, #0
 8017c20:	f000 f8ae 	bl	8017d80 <_lseek_r>
 8017c24:	89a3      	ldrh	r3, [r4, #12]
 8017c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c2e:	81a3      	strh	r3, [r4, #12]
 8017c30:	4632      	mov	r2, r6
 8017c32:	463b      	mov	r3, r7
 8017c34:	4628      	mov	r0, r5
 8017c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3a:	f000 b8d5 	b.w	8017de8 <_write_r>

08017c3e <__sseek>:
 8017c3e:	b510      	push	{r4, lr}
 8017c40:	460c      	mov	r4, r1
 8017c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c46:	f000 f89b 	bl	8017d80 <_lseek_r>
 8017c4a:	1c43      	adds	r3, r0, #1
 8017c4c:	89a3      	ldrh	r3, [r4, #12]
 8017c4e:	bf15      	itete	ne
 8017c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017c5a:	81a3      	strheq	r3, [r4, #12]
 8017c5c:	bf18      	it	ne
 8017c5e:	81a3      	strhne	r3, [r4, #12]
 8017c60:	bd10      	pop	{r4, pc}

08017c62 <__sclose>:
 8017c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c66:	f000 b87b 	b.w	8017d60 <_close_r>

08017c6a <_vsniprintf_r>:
 8017c6a:	b530      	push	{r4, r5, lr}
 8017c6c:	4614      	mov	r4, r2
 8017c6e:	2c00      	cmp	r4, #0
 8017c70:	b09b      	sub	sp, #108	@ 0x6c
 8017c72:	4605      	mov	r5, r0
 8017c74:	461a      	mov	r2, r3
 8017c76:	da05      	bge.n	8017c84 <_vsniprintf_r+0x1a>
 8017c78:	238b      	movs	r3, #139	@ 0x8b
 8017c7a:	6003      	str	r3, [r0, #0]
 8017c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c80:	b01b      	add	sp, #108	@ 0x6c
 8017c82:	bd30      	pop	{r4, r5, pc}
 8017c84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017c88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c8c:	f04f 0300 	mov.w	r3, #0
 8017c90:	9319      	str	r3, [sp, #100]	@ 0x64
 8017c92:	bf14      	ite	ne
 8017c94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017c98:	4623      	moveq	r3, r4
 8017c9a:	9302      	str	r3, [sp, #8]
 8017c9c:	9305      	str	r3, [sp, #20]
 8017c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ca2:	9100      	str	r1, [sp, #0]
 8017ca4:	9104      	str	r1, [sp, #16]
 8017ca6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017caa:	4669      	mov	r1, sp
 8017cac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017cae:	f000 f98f 	bl	8017fd0 <_svfiprintf_r>
 8017cb2:	1c43      	adds	r3, r0, #1
 8017cb4:	bfbc      	itt	lt
 8017cb6:	238b      	movlt	r3, #139	@ 0x8b
 8017cb8:	602b      	strlt	r3, [r5, #0]
 8017cba:	2c00      	cmp	r4, #0
 8017cbc:	d0e0      	beq.n	8017c80 <_vsniprintf_r+0x16>
 8017cbe:	9b00      	ldr	r3, [sp, #0]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	701a      	strb	r2, [r3, #0]
 8017cc4:	e7dc      	b.n	8017c80 <_vsniprintf_r+0x16>
	...

08017cc8 <vsniprintf>:
 8017cc8:	b507      	push	{r0, r1, r2, lr}
 8017cca:	9300      	str	r3, [sp, #0]
 8017ccc:	4613      	mov	r3, r2
 8017cce:	460a      	mov	r2, r1
 8017cd0:	4601      	mov	r1, r0
 8017cd2:	4803      	ldr	r0, [pc, #12]	@ (8017ce0 <vsniprintf+0x18>)
 8017cd4:	6800      	ldr	r0, [r0, #0]
 8017cd6:	f7ff ffc8 	bl	8017c6a <_vsniprintf_r>
 8017cda:	b003      	add	sp, #12
 8017cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ce0:	20000088 	.word	0x20000088

08017ce4 <memset>:
 8017ce4:	4402      	add	r2, r0
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d100      	bne.n	8017cee <memset+0xa>
 8017cec:	4770      	bx	lr
 8017cee:	f803 1b01 	strb.w	r1, [r3], #1
 8017cf2:	e7f9      	b.n	8017ce8 <memset+0x4>

08017cf4 <strchr>:
 8017cf4:	b2c9      	uxtb	r1, r1
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cfe:	b112      	cbz	r2, 8017d06 <strchr+0x12>
 8017d00:	428a      	cmp	r2, r1
 8017d02:	d1f9      	bne.n	8017cf8 <strchr+0x4>
 8017d04:	4770      	bx	lr
 8017d06:	2900      	cmp	r1, #0
 8017d08:	bf18      	it	ne
 8017d0a:	2000      	movne	r0, #0
 8017d0c:	4770      	bx	lr

08017d0e <strncpy>:
 8017d0e:	b510      	push	{r4, lr}
 8017d10:	3901      	subs	r1, #1
 8017d12:	4603      	mov	r3, r0
 8017d14:	b132      	cbz	r2, 8017d24 <strncpy+0x16>
 8017d16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d1a:	f803 4b01 	strb.w	r4, [r3], #1
 8017d1e:	3a01      	subs	r2, #1
 8017d20:	2c00      	cmp	r4, #0
 8017d22:	d1f7      	bne.n	8017d14 <strncpy+0x6>
 8017d24:	441a      	add	r2, r3
 8017d26:	2100      	movs	r1, #0
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d100      	bne.n	8017d2e <strncpy+0x20>
 8017d2c:	bd10      	pop	{r4, pc}
 8017d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8017d32:	e7f9      	b.n	8017d28 <strncpy+0x1a>

08017d34 <strstr>:
 8017d34:	780a      	ldrb	r2, [r1, #0]
 8017d36:	b570      	push	{r4, r5, r6, lr}
 8017d38:	b96a      	cbnz	r2, 8017d56 <strstr+0x22>
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d109      	bne.n	8017d54 <strstr+0x20>
 8017d40:	460c      	mov	r4, r1
 8017d42:	4605      	mov	r5, r0
 8017d44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d0f6      	beq.n	8017d3a <strstr+0x6>
 8017d4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017d50:	429e      	cmp	r6, r3
 8017d52:	d0f7      	beq.n	8017d44 <strstr+0x10>
 8017d54:	3001      	adds	r0, #1
 8017d56:	7803      	ldrb	r3, [r0, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d1ef      	bne.n	8017d3c <strstr+0x8>
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	e7ec      	b.n	8017d3a <strstr+0x6>

08017d60 <_close_r>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4d06      	ldr	r5, [pc, #24]	@ (8017d7c <_close_r+0x1c>)
 8017d64:	2300      	movs	r3, #0
 8017d66:	4604      	mov	r4, r0
 8017d68:	4608      	mov	r0, r1
 8017d6a:	602b      	str	r3, [r5, #0]
 8017d6c:	f7ed fbe9 	bl	8005542 <_close>
 8017d70:	1c43      	adds	r3, r0, #1
 8017d72:	d102      	bne.n	8017d7a <_close_r+0x1a>
 8017d74:	682b      	ldr	r3, [r5, #0]
 8017d76:	b103      	cbz	r3, 8017d7a <_close_r+0x1a>
 8017d78:	6023      	str	r3, [r4, #0]
 8017d7a:	bd38      	pop	{r3, r4, r5, pc}
 8017d7c:	200122c8 	.word	0x200122c8

08017d80 <_lseek_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	4d07      	ldr	r5, [pc, #28]	@ (8017da0 <_lseek_r+0x20>)
 8017d84:	4604      	mov	r4, r0
 8017d86:	4608      	mov	r0, r1
 8017d88:	4611      	mov	r1, r2
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	602a      	str	r2, [r5, #0]
 8017d8e:	461a      	mov	r2, r3
 8017d90:	f7ed fbfe 	bl	8005590 <_lseek>
 8017d94:	1c43      	adds	r3, r0, #1
 8017d96:	d102      	bne.n	8017d9e <_lseek_r+0x1e>
 8017d98:	682b      	ldr	r3, [r5, #0]
 8017d9a:	b103      	cbz	r3, 8017d9e <_lseek_r+0x1e>
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	200122c8 	.word	0x200122c8

08017da4 <_read_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4d07      	ldr	r5, [pc, #28]	@ (8017dc4 <_read_r+0x20>)
 8017da8:	4604      	mov	r4, r0
 8017daa:	4608      	mov	r0, r1
 8017dac:	4611      	mov	r1, r2
 8017dae:	2200      	movs	r2, #0
 8017db0:	602a      	str	r2, [r5, #0]
 8017db2:	461a      	mov	r2, r3
 8017db4:	f7ed fb8c 	bl	80054d0 <_read>
 8017db8:	1c43      	adds	r3, r0, #1
 8017dba:	d102      	bne.n	8017dc2 <_read_r+0x1e>
 8017dbc:	682b      	ldr	r3, [r5, #0]
 8017dbe:	b103      	cbz	r3, 8017dc2 <_read_r+0x1e>
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	bd38      	pop	{r3, r4, r5, pc}
 8017dc4:	200122c8 	.word	0x200122c8

08017dc8 <_sbrk_r>:
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4d06      	ldr	r5, [pc, #24]	@ (8017de4 <_sbrk_r+0x1c>)
 8017dcc:	2300      	movs	r3, #0
 8017dce:	4604      	mov	r4, r0
 8017dd0:	4608      	mov	r0, r1
 8017dd2:	602b      	str	r3, [r5, #0]
 8017dd4:	f7ed fbea 	bl	80055ac <_sbrk>
 8017dd8:	1c43      	adds	r3, r0, #1
 8017dda:	d102      	bne.n	8017de2 <_sbrk_r+0x1a>
 8017ddc:	682b      	ldr	r3, [r5, #0]
 8017dde:	b103      	cbz	r3, 8017de2 <_sbrk_r+0x1a>
 8017de0:	6023      	str	r3, [r4, #0]
 8017de2:	bd38      	pop	{r3, r4, r5, pc}
 8017de4:	200122c8 	.word	0x200122c8

08017de8 <_write_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4d07      	ldr	r5, [pc, #28]	@ (8017e08 <_write_r+0x20>)
 8017dec:	4604      	mov	r4, r0
 8017dee:	4608      	mov	r0, r1
 8017df0:	4611      	mov	r1, r2
 8017df2:	2200      	movs	r2, #0
 8017df4:	602a      	str	r2, [r5, #0]
 8017df6:	461a      	mov	r2, r3
 8017df8:	f7ed fb87 	bl	800550a <_write>
 8017dfc:	1c43      	adds	r3, r0, #1
 8017dfe:	d102      	bne.n	8017e06 <_write_r+0x1e>
 8017e00:	682b      	ldr	r3, [r5, #0]
 8017e02:	b103      	cbz	r3, 8017e06 <_write_r+0x1e>
 8017e04:	6023      	str	r3, [r4, #0]
 8017e06:	bd38      	pop	{r3, r4, r5, pc}
 8017e08:	200122c8 	.word	0x200122c8

08017e0c <__errno>:
 8017e0c:	4b01      	ldr	r3, [pc, #4]	@ (8017e14 <__errno+0x8>)
 8017e0e:	6818      	ldr	r0, [r3, #0]
 8017e10:	4770      	bx	lr
 8017e12:	bf00      	nop
 8017e14:	20000088 	.word	0x20000088

08017e18 <__libc_init_array>:
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8017e50 <__libc_init_array+0x38>)
 8017e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8017e54 <__libc_init_array+0x3c>)
 8017e1e:	1b64      	subs	r4, r4, r5
 8017e20:	10a4      	asrs	r4, r4, #2
 8017e22:	2600      	movs	r6, #0
 8017e24:	42a6      	cmp	r6, r4
 8017e26:	d109      	bne.n	8017e3c <__libc_init_array+0x24>
 8017e28:	4d0b      	ldr	r5, [pc, #44]	@ (8017e58 <__libc_init_array+0x40>)
 8017e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8017e5c <__libc_init_array+0x44>)
 8017e2c:	f001 fb2c 	bl	8019488 <_init>
 8017e30:	1b64      	subs	r4, r4, r5
 8017e32:	10a4      	asrs	r4, r4, #2
 8017e34:	2600      	movs	r6, #0
 8017e36:	42a6      	cmp	r6, r4
 8017e38:	d105      	bne.n	8017e46 <__libc_init_array+0x2e>
 8017e3a:	bd70      	pop	{r4, r5, r6, pc}
 8017e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e40:	4798      	blx	r3
 8017e42:	3601      	adds	r6, #1
 8017e44:	e7ee      	b.n	8017e24 <__libc_init_array+0xc>
 8017e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e4a:	4798      	blx	r3
 8017e4c:	3601      	adds	r6, #1
 8017e4e:	e7f2      	b.n	8017e36 <__libc_init_array+0x1e>
 8017e50:	0801cc20 	.word	0x0801cc20
 8017e54:	0801cc20 	.word	0x0801cc20
 8017e58:	0801cc20 	.word	0x0801cc20
 8017e5c:	0801cc24 	.word	0x0801cc24

08017e60 <__retarget_lock_init_recursive>:
 8017e60:	4770      	bx	lr

08017e62 <__retarget_lock_acquire_recursive>:
 8017e62:	4770      	bx	lr

08017e64 <__retarget_lock_release_recursive>:
 8017e64:	4770      	bx	lr

08017e66 <memcpy>:
 8017e66:	440a      	add	r2, r1
 8017e68:	4291      	cmp	r1, r2
 8017e6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e6e:	d100      	bne.n	8017e72 <memcpy+0xc>
 8017e70:	4770      	bx	lr
 8017e72:	b510      	push	{r4, lr}
 8017e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e7c:	4291      	cmp	r1, r2
 8017e7e:	d1f9      	bne.n	8017e74 <memcpy+0xe>
 8017e80:	bd10      	pop	{r4, pc}
	...

08017e84 <_free_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4605      	mov	r5, r0
 8017e88:	2900      	cmp	r1, #0
 8017e8a:	d041      	beq.n	8017f10 <_free_r+0x8c>
 8017e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e90:	1f0c      	subs	r4, r1, #4
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	bfb8      	it	lt
 8017e96:	18e4      	addlt	r4, r4, r3
 8017e98:	f7ff fd3e 	bl	8017918 <__malloc_lock>
 8017e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8017f14 <_free_r+0x90>)
 8017e9e:	6813      	ldr	r3, [r2, #0]
 8017ea0:	b933      	cbnz	r3, 8017eb0 <_free_r+0x2c>
 8017ea2:	6063      	str	r3, [r4, #4]
 8017ea4:	6014      	str	r4, [r2, #0]
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017eac:	f7ff bd3a 	b.w	8017924 <__malloc_unlock>
 8017eb0:	42a3      	cmp	r3, r4
 8017eb2:	d908      	bls.n	8017ec6 <_free_r+0x42>
 8017eb4:	6820      	ldr	r0, [r4, #0]
 8017eb6:	1821      	adds	r1, r4, r0
 8017eb8:	428b      	cmp	r3, r1
 8017eba:	bf01      	itttt	eq
 8017ebc:	6819      	ldreq	r1, [r3, #0]
 8017ebe:	685b      	ldreq	r3, [r3, #4]
 8017ec0:	1809      	addeq	r1, r1, r0
 8017ec2:	6021      	streq	r1, [r4, #0]
 8017ec4:	e7ed      	b.n	8017ea2 <_free_r+0x1e>
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	b10b      	cbz	r3, 8017ed0 <_free_r+0x4c>
 8017ecc:	42a3      	cmp	r3, r4
 8017ece:	d9fa      	bls.n	8017ec6 <_free_r+0x42>
 8017ed0:	6811      	ldr	r1, [r2, #0]
 8017ed2:	1850      	adds	r0, r2, r1
 8017ed4:	42a0      	cmp	r0, r4
 8017ed6:	d10b      	bne.n	8017ef0 <_free_r+0x6c>
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	4401      	add	r1, r0
 8017edc:	1850      	adds	r0, r2, r1
 8017ede:	4283      	cmp	r3, r0
 8017ee0:	6011      	str	r1, [r2, #0]
 8017ee2:	d1e0      	bne.n	8017ea6 <_free_r+0x22>
 8017ee4:	6818      	ldr	r0, [r3, #0]
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	6053      	str	r3, [r2, #4]
 8017eea:	4408      	add	r0, r1
 8017eec:	6010      	str	r0, [r2, #0]
 8017eee:	e7da      	b.n	8017ea6 <_free_r+0x22>
 8017ef0:	d902      	bls.n	8017ef8 <_free_r+0x74>
 8017ef2:	230c      	movs	r3, #12
 8017ef4:	602b      	str	r3, [r5, #0]
 8017ef6:	e7d6      	b.n	8017ea6 <_free_r+0x22>
 8017ef8:	6820      	ldr	r0, [r4, #0]
 8017efa:	1821      	adds	r1, r4, r0
 8017efc:	428b      	cmp	r3, r1
 8017efe:	bf04      	itt	eq
 8017f00:	6819      	ldreq	r1, [r3, #0]
 8017f02:	685b      	ldreq	r3, [r3, #4]
 8017f04:	6063      	str	r3, [r4, #4]
 8017f06:	bf04      	itt	eq
 8017f08:	1809      	addeq	r1, r1, r0
 8017f0a:	6021      	streq	r1, [r4, #0]
 8017f0c:	6054      	str	r4, [r2, #4]
 8017f0e:	e7ca      	b.n	8017ea6 <_free_r+0x22>
 8017f10:	bd38      	pop	{r3, r4, r5, pc}
 8017f12:	bf00      	nop
 8017f14:	20012188 	.word	0x20012188

08017f18 <__ssputs_r>:
 8017f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f1c:	688e      	ldr	r6, [r1, #8]
 8017f1e:	461f      	mov	r7, r3
 8017f20:	42be      	cmp	r6, r7
 8017f22:	680b      	ldr	r3, [r1, #0]
 8017f24:	4682      	mov	sl, r0
 8017f26:	460c      	mov	r4, r1
 8017f28:	4690      	mov	r8, r2
 8017f2a:	d82d      	bhi.n	8017f88 <__ssputs_r+0x70>
 8017f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017f34:	d026      	beq.n	8017f84 <__ssputs_r+0x6c>
 8017f36:	6965      	ldr	r5, [r4, #20]
 8017f38:	6909      	ldr	r1, [r1, #16]
 8017f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f3e:	eba3 0901 	sub.w	r9, r3, r1
 8017f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017f46:	1c7b      	adds	r3, r7, #1
 8017f48:	444b      	add	r3, r9
 8017f4a:	106d      	asrs	r5, r5, #1
 8017f4c:	429d      	cmp	r5, r3
 8017f4e:	bf38      	it	cc
 8017f50:	461d      	movcc	r5, r3
 8017f52:	0553      	lsls	r3, r2, #21
 8017f54:	d527      	bpl.n	8017fa6 <__ssputs_r+0x8e>
 8017f56:	4629      	mov	r1, r5
 8017f58:	f7ff fc5e 	bl	8017818 <_malloc_r>
 8017f5c:	4606      	mov	r6, r0
 8017f5e:	b360      	cbz	r0, 8017fba <__ssputs_r+0xa2>
 8017f60:	6921      	ldr	r1, [r4, #16]
 8017f62:	464a      	mov	r2, r9
 8017f64:	f7ff ff7f 	bl	8017e66 <memcpy>
 8017f68:	89a3      	ldrh	r3, [r4, #12]
 8017f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f72:	81a3      	strh	r3, [r4, #12]
 8017f74:	6126      	str	r6, [r4, #16]
 8017f76:	6165      	str	r5, [r4, #20]
 8017f78:	444e      	add	r6, r9
 8017f7a:	eba5 0509 	sub.w	r5, r5, r9
 8017f7e:	6026      	str	r6, [r4, #0]
 8017f80:	60a5      	str	r5, [r4, #8]
 8017f82:	463e      	mov	r6, r7
 8017f84:	42be      	cmp	r6, r7
 8017f86:	d900      	bls.n	8017f8a <__ssputs_r+0x72>
 8017f88:	463e      	mov	r6, r7
 8017f8a:	6820      	ldr	r0, [r4, #0]
 8017f8c:	4632      	mov	r2, r6
 8017f8e:	4641      	mov	r1, r8
 8017f90:	f001 f8ba 	bl	8019108 <memmove>
 8017f94:	68a3      	ldr	r3, [r4, #8]
 8017f96:	1b9b      	subs	r3, r3, r6
 8017f98:	60a3      	str	r3, [r4, #8]
 8017f9a:	6823      	ldr	r3, [r4, #0]
 8017f9c:	4433      	add	r3, r6
 8017f9e:	6023      	str	r3, [r4, #0]
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fa6:	462a      	mov	r2, r5
 8017fa8:	f001 f8c8 	bl	801913c <_realloc_r>
 8017fac:	4606      	mov	r6, r0
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d1e0      	bne.n	8017f74 <__ssputs_r+0x5c>
 8017fb2:	6921      	ldr	r1, [r4, #16]
 8017fb4:	4650      	mov	r0, sl
 8017fb6:	f7ff ff65 	bl	8017e84 <_free_r>
 8017fba:	230c      	movs	r3, #12
 8017fbc:	f8ca 3000 	str.w	r3, [sl]
 8017fc0:	89a3      	ldrh	r3, [r4, #12]
 8017fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fc6:	81a3      	strh	r3, [r4, #12]
 8017fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fcc:	e7e9      	b.n	8017fa2 <__ssputs_r+0x8a>
	...

08017fd0 <_svfiprintf_r>:
 8017fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd4:	4698      	mov	r8, r3
 8017fd6:	898b      	ldrh	r3, [r1, #12]
 8017fd8:	061b      	lsls	r3, r3, #24
 8017fda:	b09d      	sub	sp, #116	@ 0x74
 8017fdc:	4607      	mov	r7, r0
 8017fde:	460d      	mov	r5, r1
 8017fe0:	4614      	mov	r4, r2
 8017fe2:	d510      	bpl.n	8018006 <_svfiprintf_r+0x36>
 8017fe4:	690b      	ldr	r3, [r1, #16]
 8017fe6:	b973      	cbnz	r3, 8018006 <_svfiprintf_r+0x36>
 8017fe8:	2140      	movs	r1, #64	@ 0x40
 8017fea:	f7ff fc15 	bl	8017818 <_malloc_r>
 8017fee:	6028      	str	r0, [r5, #0]
 8017ff0:	6128      	str	r0, [r5, #16]
 8017ff2:	b930      	cbnz	r0, 8018002 <_svfiprintf_r+0x32>
 8017ff4:	230c      	movs	r3, #12
 8017ff6:	603b      	str	r3, [r7, #0]
 8017ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8017ffc:	b01d      	add	sp, #116	@ 0x74
 8017ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018002:	2340      	movs	r3, #64	@ 0x40
 8018004:	616b      	str	r3, [r5, #20]
 8018006:	2300      	movs	r3, #0
 8018008:	9309      	str	r3, [sp, #36]	@ 0x24
 801800a:	2320      	movs	r3, #32
 801800c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018010:	f8cd 800c 	str.w	r8, [sp, #12]
 8018014:	2330      	movs	r3, #48	@ 0x30
 8018016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80181b4 <_svfiprintf_r+0x1e4>
 801801a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801801e:	f04f 0901 	mov.w	r9, #1
 8018022:	4623      	mov	r3, r4
 8018024:	469a      	mov	sl, r3
 8018026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801802a:	b10a      	cbz	r2, 8018030 <_svfiprintf_r+0x60>
 801802c:	2a25      	cmp	r2, #37	@ 0x25
 801802e:	d1f9      	bne.n	8018024 <_svfiprintf_r+0x54>
 8018030:	ebba 0b04 	subs.w	fp, sl, r4
 8018034:	d00b      	beq.n	801804e <_svfiprintf_r+0x7e>
 8018036:	465b      	mov	r3, fp
 8018038:	4622      	mov	r2, r4
 801803a:	4629      	mov	r1, r5
 801803c:	4638      	mov	r0, r7
 801803e:	f7ff ff6b 	bl	8017f18 <__ssputs_r>
 8018042:	3001      	adds	r0, #1
 8018044:	f000 80a7 	beq.w	8018196 <_svfiprintf_r+0x1c6>
 8018048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801804a:	445a      	add	r2, fp
 801804c:	9209      	str	r2, [sp, #36]	@ 0x24
 801804e:	f89a 3000 	ldrb.w	r3, [sl]
 8018052:	2b00      	cmp	r3, #0
 8018054:	f000 809f 	beq.w	8018196 <_svfiprintf_r+0x1c6>
 8018058:	2300      	movs	r3, #0
 801805a:	f04f 32ff 	mov.w	r2, #4294967295
 801805e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018062:	f10a 0a01 	add.w	sl, sl, #1
 8018066:	9304      	str	r3, [sp, #16]
 8018068:	9307      	str	r3, [sp, #28]
 801806a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801806e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018070:	4654      	mov	r4, sl
 8018072:	2205      	movs	r2, #5
 8018074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018078:	484e      	ldr	r0, [pc, #312]	@ (80181b4 <_svfiprintf_r+0x1e4>)
 801807a:	f7e8 f8e1 	bl	8000240 <memchr>
 801807e:	9a04      	ldr	r2, [sp, #16]
 8018080:	b9d8      	cbnz	r0, 80180ba <_svfiprintf_r+0xea>
 8018082:	06d0      	lsls	r0, r2, #27
 8018084:	bf44      	itt	mi
 8018086:	2320      	movmi	r3, #32
 8018088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801808c:	0711      	lsls	r1, r2, #28
 801808e:	bf44      	itt	mi
 8018090:	232b      	movmi	r3, #43	@ 0x2b
 8018092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018096:	f89a 3000 	ldrb.w	r3, [sl]
 801809a:	2b2a      	cmp	r3, #42	@ 0x2a
 801809c:	d015      	beq.n	80180ca <_svfiprintf_r+0xfa>
 801809e:	9a07      	ldr	r2, [sp, #28]
 80180a0:	4654      	mov	r4, sl
 80180a2:	2000      	movs	r0, #0
 80180a4:	f04f 0c0a 	mov.w	ip, #10
 80180a8:	4621      	mov	r1, r4
 80180aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180ae:	3b30      	subs	r3, #48	@ 0x30
 80180b0:	2b09      	cmp	r3, #9
 80180b2:	d94b      	bls.n	801814c <_svfiprintf_r+0x17c>
 80180b4:	b1b0      	cbz	r0, 80180e4 <_svfiprintf_r+0x114>
 80180b6:	9207      	str	r2, [sp, #28]
 80180b8:	e014      	b.n	80180e4 <_svfiprintf_r+0x114>
 80180ba:	eba0 0308 	sub.w	r3, r0, r8
 80180be:	fa09 f303 	lsl.w	r3, r9, r3
 80180c2:	4313      	orrs	r3, r2
 80180c4:	9304      	str	r3, [sp, #16]
 80180c6:	46a2      	mov	sl, r4
 80180c8:	e7d2      	b.n	8018070 <_svfiprintf_r+0xa0>
 80180ca:	9b03      	ldr	r3, [sp, #12]
 80180cc:	1d19      	adds	r1, r3, #4
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	9103      	str	r1, [sp, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	bfbb      	ittet	lt
 80180d6:	425b      	neglt	r3, r3
 80180d8:	f042 0202 	orrlt.w	r2, r2, #2
 80180dc:	9307      	strge	r3, [sp, #28]
 80180de:	9307      	strlt	r3, [sp, #28]
 80180e0:	bfb8      	it	lt
 80180e2:	9204      	strlt	r2, [sp, #16]
 80180e4:	7823      	ldrb	r3, [r4, #0]
 80180e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80180e8:	d10a      	bne.n	8018100 <_svfiprintf_r+0x130>
 80180ea:	7863      	ldrb	r3, [r4, #1]
 80180ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80180ee:	d132      	bne.n	8018156 <_svfiprintf_r+0x186>
 80180f0:	9b03      	ldr	r3, [sp, #12]
 80180f2:	1d1a      	adds	r2, r3, #4
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	9203      	str	r2, [sp, #12]
 80180f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80180fc:	3402      	adds	r4, #2
 80180fe:	9305      	str	r3, [sp, #20]
 8018100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80181c4 <_svfiprintf_r+0x1f4>
 8018104:	7821      	ldrb	r1, [r4, #0]
 8018106:	2203      	movs	r2, #3
 8018108:	4650      	mov	r0, sl
 801810a:	f7e8 f899 	bl	8000240 <memchr>
 801810e:	b138      	cbz	r0, 8018120 <_svfiprintf_r+0x150>
 8018110:	9b04      	ldr	r3, [sp, #16]
 8018112:	eba0 000a 	sub.w	r0, r0, sl
 8018116:	2240      	movs	r2, #64	@ 0x40
 8018118:	4082      	lsls	r2, r0
 801811a:	4313      	orrs	r3, r2
 801811c:	3401      	adds	r4, #1
 801811e:	9304      	str	r3, [sp, #16]
 8018120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018124:	4824      	ldr	r0, [pc, #144]	@ (80181b8 <_svfiprintf_r+0x1e8>)
 8018126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801812a:	2206      	movs	r2, #6
 801812c:	f7e8 f888 	bl	8000240 <memchr>
 8018130:	2800      	cmp	r0, #0
 8018132:	d036      	beq.n	80181a2 <_svfiprintf_r+0x1d2>
 8018134:	4b21      	ldr	r3, [pc, #132]	@ (80181bc <_svfiprintf_r+0x1ec>)
 8018136:	bb1b      	cbnz	r3, 8018180 <_svfiprintf_r+0x1b0>
 8018138:	9b03      	ldr	r3, [sp, #12]
 801813a:	3307      	adds	r3, #7
 801813c:	f023 0307 	bic.w	r3, r3, #7
 8018140:	3308      	adds	r3, #8
 8018142:	9303      	str	r3, [sp, #12]
 8018144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018146:	4433      	add	r3, r6
 8018148:	9309      	str	r3, [sp, #36]	@ 0x24
 801814a:	e76a      	b.n	8018022 <_svfiprintf_r+0x52>
 801814c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018150:	460c      	mov	r4, r1
 8018152:	2001      	movs	r0, #1
 8018154:	e7a8      	b.n	80180a8 <_svfiprintf_r+0xd8>
 8018156:	2300      	movs	r3, #0
 8018158:	3401      	adds	r4, #1
 801815a:	9305      	str	r3, [sp, #20]
 801815c:	4619      	mov	r1, r3
 801815e:	f04f 0c0a 	mov.w	ip, #10
 8018162:	4620      	mov	r0, r4
 8018164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018168:	3a30      	subs	r2, #48	@ 0x30
 801816a:	2a09      	cmp	r2, #9
 801816c:	d903      	bls.n	8018176 <_svfiprintf_r+0x1a6>
 801816e:	2b00      	cmp	r3, #0
 8018170:	d0c6      	beq.n	8018100 <_svfiprintf_r+0x130>
 8018172:	9105      	str	r1, [sp, #20]
 8018174:	e7c4      	b.n	8018100 <_svfiprintf_r+0x130>
 8018176:	fb0c 2101 	mla	r1, ip, r1, r2
 801817a:	4604      	mov	r4, r0
 801817c:	2301      	movs	r3, #1
 801817e:	e7f0      	b.n	8018162 <_svfiprintf_r+0x192>
 8018180:	ab03      	add	r3, sp, #12
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	462a      	mov	r2, r5
 8018186:	4b0e      	ldr	r3, [pc, #56]	@ (80181c0 <_svfiprintf_r+0x1f0>)
 8018188:	a904      	add	r1, sp, #16
 801818a:	4638      	mov	r0, r7
 801818c:	f3af 8000 	nop.w
 8018190:	1c42      	adds	r2, r0, #1
 8018192:	4606      	mov	r6, r0
 8018194:	d1d6      	bne.n	8018144 <_svfiprintf_r+0x174>
 8018196:	89ab      	ldrh	r3, [r5, #12]
 8018198:	065b      	lsls	r3, r3, #25
 801819a:	f53f af2d 	bmi.w	8017ff8 <_svfiprintf_r+0x28>
 801819e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181a0:	e72c      	b.n	8017ffc <_svfiprintf_r+0x2c>
 80181a2:	ab03      	add	r3, sp, #12
 80181a4:	9300      	str	r3, [sp, #0]
 80181a6:	462a      	mov	r2, r5
 80181a8:	4b05      	ldr	r3, [pc, #20]	@ (80181c0 <_svfiprintf_r+0x1f0>)
 80181aa:	a904      	add	r1, sp, #16
 80181ac:	4638      	mov	r0, r7
 80181ae:	f000 fb8b 	bl	80188c8 <_printf_i>
 80181b2:	e7ed      	b.n	8018190 <_svfiprintf_r+0x1c0>
 80181b4:	0801cac6 	.word	0x0801cac6
 80181b8:	0801cad0 	.word	0x0801cad0
 80181bc:	00000000 	.word	0x00000000
 80181c0:	08017f19 	.word	0x08017f19
 80181c4:	0801cacc 	.word	0x0801cacc

080181c8 <_sungetc_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	1c4b      	adds	r3, r1, #1
 80181cc:	4614      	mov	r4, r2
 80181ce:	d103      	bne.n	80181d8 <_sungetc_r+0x10>
 80181d0:	f04f 35ff 	mov.w	r5, #4294967295
 80181d4:	4628      	mov	r0, r5
 80181d6:	bd38      	pop	{r3, r4, r5, pc}
 80181d8:	8993      	ldrh	r3, [r2, #12]
 80181da:	f023 0320 	bic.w	r3, r3, #32
 80181de:	8193      	strh	r3, [r2, #12]
 80181e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80181e2:	6852      	ldr	r2, [r2, #4]
 80181e4:	b2cd      	uxtb	r5, r1
 80181e6:	b18b      	cbz	r3, 801820c <_sungetc_r+0x44>
 80181e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80181ea:	4293      	cmp	r3, r2
 80181ec:	dd08      	ble.n	8018200 <_sungetc_r+0x38>
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	1e5a      	subs	r2, r3, #1
 80181f2:	6022      	str	r2, [r4, #0]
 80181f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80181f8:	6863      	ldr	r3, [r4, #4]
 80181fa:	3301      	adds	r3, #1
 80181fc:	6063      	str	r3, [r4, #4]
 80181fe:	e7e9      	b.n	80181d4 <_sungetc_r+0xc>
 8018200:	4621      	mov	r1, r4
 8018202:	f000 feb2 	bl	8018f6a <__submore>
 8018206:	2800      	cmp	r0, #0
 8018208:	d0f1      	beq.n	80181ee <_sungetc_r+0x26>
 801820a:	e7e1      	b.n	80181d0 <_sungetc_r+0x8>
 801820c:	6921      	ldr	r1, [r4, #16]
 801820e:	6823      	ldr	r3, [r4, #0]
 8018210:	b151      	cbz	r1, 8018228 <_sungetc_r+0x60>
 8018212:	4299      	cmp	r1, r3
 8018214:	d208      	bcs.n	8018228 <_sungetc_r+0x60>
 8018216:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801821a:	42a9      	cmp	r1, r5
 801821c:	d104      	bne.n	8018228 <_sungetc_r+0x60>
 801821e:	3b01      	subs	r3, #1
 8018220:	3201      	adds	r2, #1
 8018222:	6023      	str	r3, [r4, #0]
 8018224:	6062      	str	r2, [r4, #4]
 8018226:	e7d5      	b.n	80181d4 <_sungetc_r+0xc>
 8018228:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801822c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018230:	6363      	str	r3, [r4, #52]	@ 0x34
 8018232:	2303      	movs	r3, #3
 8018234:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018236:	4623      	mov	r3, r4
 8018238:	f803 5f46 	strb.w	r5, [r3, #70]!
 801823c:	6023      	str	r3, [r4, #0]
 801823e:	2301      	movs	r3, #1
 8018240:	e7dc      	b.n	80181fc <_sungetc_r+0x34>

08018242 <__ssrefill_r>:
 8018242:	b510      	push	{r4, lr}
 8018244:	460c      	mov	r4, r1
 8018246:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018248:	b169      	cbz	r1, 8018266 <__ssrefill_r+0x24>
 801824a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801824e:	4299      	cmp	r1, r3
 8018250:	d001      	beq.n	8018256 <__ssrefill_r+0x14>
 8018252:	f7ff fe17 	bl	8017e84 <_free_r>
 8018256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018258:	6063      	str	r3, [r4, #4]
 801825a:	2000      	movs	r0, #0
 801825c:	6360      	str	r0, [r4, #52]	@ 0x34
 801825e:	b113      	cbz	r3, 8018266 <__ssrefill_r+0x24>
 8018260:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018262:	6023      	str	r3, [r4, #0]
 8018264:	bd10      	pop	{r4, pc}
 8018266:	6923      	ldr	r3, [r4, #16]
 8018268:	6023      	str	r3, [r4, #0]
 801826a:	2300      	movs	r3, #0
 801826c:	6063      	str	r3, [r4, #4]
 801826e:	89a3      	ldrh	r3, [r4, #12]
 8018270:	f043 0320 	orr.w	r3, r3, #32
 8018274:	81a3      	strh	r3, [r4, #12]
 8018276:	f04f 30ff 	mov.w	r0, #4294967295
 801827a:	e7f3      	b.n	8018264 <__ssrefill_r+0x22>

0801827c <__ssvfiscanf_r>:
 801827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018280:	460c      	mov	r4, r1
 8018282:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8018286:	2100      	movs	r1, #0
 8018288:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801828c:	49a6      	ldr	r1, [pc, #664]	@ (8018528 <__ssvfiscanf_r+0x2ac>)
 801828e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8018290:	f10d 0804 	add.w	r8, sp, #4
 8018294:	49a5      	ldr	r1, [pc, #660]	@ (801852c <__ssvfiscanf_r+0x2b0>)
 8018296:	4fa6      	ldr	r7, [pc, #664]	@ (8018530 <__ssvfiscanf_r+0x2b4>)
 8018298:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801829c:	4606      	mov	r6, r0
 801829e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80182a0:	9300      	str	r3, [sp, #0]
 80182a2:	f892 9000 	ldrb.w	r9, [r2]
 80182a6:	f1b9 0f00 	cmp.w	r9, #0
 80182aa:	f000 8158 	beq.w	801855e <__ssvfiscanf_r+0x2e2>
 80182ae:	f817 3009 	ldrb.w	r3, [r7, r9]
 80182b2:	f013 0308 	ands.w	r3, r3, #8
 80182b6:	f102 0501 	add.w	r5, r2, #1
 80182ba:	d019      	beq.n	80182f0 <__ssvfiscanf_r+0x74>
 80182bc:	6863      	ldr	r3, [r4, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	dd0f      	ble.n	80182e2 <__ssvfiscanf_r+0x66>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	781a      	ldrb	r2, [r3, #0]
 80182c6:	5cba      	ldrb	r2, [r7, r2]
 80182c8:	0712      	lsls	r2, r2, #28
 80182ca:	d401      	bmi.n	80182d0 <__ssvfiscanf_r+0x54>
 80182cc:	462a      	mov	r2, r5
 80182ce:	e7e8      	b.n	80182a2 <__ssvfiscanf_r+0x26>
 80182d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80182d2:	3201      	adds	r2, #1
 80182d4:	9245      	str	r2, [sp, #276]	@ 0x114
 80182d6:	6862      	ldr	r2, [r4, #4]
 80182d8:	3301      	adds	r3, #1
 80182da:	3a01      	subs	r2, #1
 80182dc:	6062      	str	r2, [r4, #4]
 80182de:	6023      	str	r3, [r4, #0]
 80182e0:	e7ec      	b.n	80182bc <__ssvfiscanf_r+0x40>
 80182e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80182e4:	4621      	mov	r1, r4
 80182e6:	4630      	mov	r0, r6
 80182e8:	4798      	blx	r3
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d0e9      	beq.n	80182c2 <__ssvfiscanf_r+0x46>
 80182ee:	e7ed      	b.n	80182cc <__ssvfiscanf_r+0x50>
 80182f0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80182f4:	f040 8085 	bne.w	8018402 <__ssvfiscanf_r+0x186>
 80182f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80182fa:	9343      	str	r3, [sp, #268]	@ 0x10c
 80182fc:	7853      	ldrb	r3, [r2, #1]
 80182fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018300:	bf02      	ittt	eq
 8018302:	2310      	moveq	r3, #16
 8018304:	1c95      	addeq	r5, r2, #2
 8018306:	9341      	streq	r3, [sp, #260]	@ 0x104
 8018308:	220a      	movs	r2, #10
 801830a:	46aa      	mov	sl, r5
 801830c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8018310:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8018314:	2b09      	cmp	r3, #9
 8018316:	d91e      	bls.n	8018356 <__ssvfiscanf_r+0xda>
 8018318:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8018534 <__ssvfiscanf_r+0x2b8>
 801831c:	2203      	movs	r2, #3
 801831e:	4658      	mov	r0, fp
 8018320:	f7e7 ff8e 	bl	8000240 <memchr>
 8018324:	b138      	cbz	r0, 8018336 <__ssvfiscanf_r+0xba>
 8018326:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018328:	eba0 000b 	sub.w	r0, r0, fp
 801832c:	2301      	movs	r3, #1
 801832e:	4083      	lsls	r3, r0
 8018330:	4313      	orrs	r3, r2
 8018332:	9341      	str	r3, [sp, #260]	@ 0x104
 8018334:	4655      	mov	r5, sl
 8018336:	f815 3b01 	ldrb.w	r3, [r5], #1
 801833a:	2b78      	cmp	r3, #120	@ 0x78
 801833c:	d806      	bhi.n	801834c <__ssvfiscanf_r+0xd0>
 801833e:	2b57      	cmp	r3, #87	@ 0x57
 8018340:	d810      	bhi.n	8018364 <__ssvfiscanf_r+0xe8>
 8018342:	2b25      	cmp	r3, #37	@ 0x25
 8018344:	d05d      	beq.n	8018402 <__ssvfiscanf_r+0x186>
 8018346:	d857      	bhi.n	80183f8 <__ssvfiscanf_r+0x17c>
 8018348:	2b00      	cmp	r3, #0
 801834a:	d075      	beq.n	8018438 <__ssvfiscanf_r+0x1bc>
 801834c:	2303      	movs	r3, #3
 801834e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018350:	230a      	movs	r3, #10
 8018352:	9342      	str	r3, [sp, #264]	@ 0x108
 8018354:	e088      	b.n	8018468 <__ssvfiscanf_r+0x1ec>
 8018356:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8018358:	fb02 1103 	mla	r1, r2, r3, r1
 801835c:	3930      	subs	r1, #48	@ 0x30
 801835e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018360:	4655      	mov	r5, sl
 8018362:	e7d2      	b.n	801830a <__ssvfiscanf_r+0x8e>
 8018364:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018368:	2a20      	cmp	r2, #32
 801836a:	d8ef      	bhi.n	801834c <__ssvfiscanf_r+0xd0>
 801836c:	a101      	add	r1, pc, #4	@ (adr r1, 8018374 <__ssvfiscanf_r+0xf8>)
 801836e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018372:	bf00      	nop
 8018374:	08018447 	.word	0x08018447
 8018378:	0801834d 	.word	0x0801834d
 801837c:	0801834d 	.word	0x0801834d
 8018380:	080184a1 	.word	0x080184a1
 8018384:	0801834d 	.word	0x0801834d
 8018388:	0801834d 	.word	0x0801834d
 801838c:	0801834d 	.word	0x0801834d
 8018390:	0801834d 	.word	0x0801834d
 8018394:	0801834d 	.word	0x0801834d
 8018398:	0801834d 	.word	0x0801834d
 801839c:	0801834d 	.word	0x0801834d
 80183a0:	080184b7 	.word	0x080184b7
 80183a4:	0801849d 	.word	0x0801849d
 80183a8:	080183ff 	.word	0x080183ff
 80183ac:	080183ff 	.word	0x080183ff
 80183b0:	080183ff 	.word	0x080183ff
 80183b4:	0801834d 	.word	0x0801834d
 80183b8:	08018459 	.word	0x08018459
 80183bc:	0801834d 	.word	0x0801834d
 80183c0:	0801834d 	.word	0x0801834d
 80183c4:	0801834d 	.word	0x0801834d
 80183c8:	0801834d 	.word	0x0801834d
 80183cc:	080184c7 	.word	0x080184c7
 80183d0:	08018461 	.word	0x08018461
 80183d4:	0801843f 	.word	0x0801843f
 80183d8:	0801834d 	.word	0x0801834d
 80183dc:	0801834d 	.word	0x0801834d
 80183e0:	080184c3 	.word	0x080184c3
 80183e4:	0801834d 	.word	0x0801834d
 80183e8:	0801849d 	.word	0x0801849d
 80183ec:	0801834d 	.word	0x0801834d
 80183f0:	0801834d 	.word	0x0801834d
 80183f4:	08018447 	.word	0x08018447
 80183f8:	3b45      	subs	r3, #69	@ 0x45
 80183fa:	2b02      	cmp	r3, #2
 80183fc:	d8a6      	bhi.n	801834c <__ssvfiscanf_r+0xd0>
 80183fe:	2305      	movs	r3, #5
 8018400:	e031      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 8018402:	6863      	ldr	r3, [r4, #4]
 8018404:	2b00      	cmp	r3, #0
 8018406:	dd0d      	ble.n	8018424 <__ssvfiscanf_r+0x1a8>
 8018408:	6823      	ldr	r3, [r4, #0]
 801840a:	781a      	ldrb	r2, [r3, #0]
 801840c:	454a      	cmp	r2, r9
 801840e:	f040 80a6 	bne.w	801855e <__ssvfiscanf_r+0x2e2>
 8018412:	3301      	adds	r3, #1
 8018414:	6862      	ldr	r2, [r4, #4]
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801841a:	3a01      	subs	r2, #1
 801841c:	3301      	adds	r3, #1
 801841e:	6062      	str	r2, [r4, #4]
 8018420:	9345      	str	r3, [sp, #276]	@ 0x114
 8018422:	e753      	b.n	80182cc <__ssvfiscanf_r+0x50>
 8018424:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018426:	4621      	mov	r1, r4
 8018428:	4630      	mov	r0, r6
 801842a:	4798      	blx	r3
 801842c:	2800      	cmp	r0, #0
 801842e:	d0eb      	beq.n	8018408 <__ssvfiscanf_r+0x18c>
 8018430:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018432:	2800      	cmp	r0, #0
 8018434:	f040 808b 	bne.w	801854e <__ssvfiscanf_r+0x2d2>
 8018438:	f04f 30ff 	mov.w	r0, #4294967295
 801843c:	e08b      	b.n	8018556 <__ssvfiscanf_r+0x2da>
 801843e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018440:	f042 0220 	orr.w	r2, r2, #32
 8018444:	9241      	str	r2, [sp, #260]	@ 0x104
 8018446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801844c:	9241      	str	r2, [sp, #260]	@ 0x104
 801844e:	2210      	movs	r2, #16
 8018450:	2b6e      	cmp	r3, #110	@ 0x6e
 8018452:	9242      	str	r2, [sp, #264]	@ 0x108
 8018454:	d902      	bls.n	801845c <__ssvfiscanf_r+0x1e0>
 8018456:	e005      	b.n	8018464 <__ssvfiscanf_r+0x1e8>
 8018458:	2300      	movs	r3, #0
 801845a:	9342      	str	r3, [sp, #264]	@ 0x108
 801845c:	2303      	movs	r3, #3
 801845e:	e002      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 8018460:	2308      	movs	r3, #8
 8018462:	9342      	str	r3, [sp, #264]	@ 0x108
 8018464:	2304      	movs	r3, #4
 8018466:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018468:	6863      	ldr	r3, [r4, #4]
 801846a:	2b00      	cmp	r3, #0
 801846c:	dd39      	ble.n	80184e2 <__ssvfiscanf_r+0x266>
 801846e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018470:	0659      	lsls	r1, r3, #25
 8018472:	d404      	bmi.n	801847e <__ssvfiscanf_r+0x202>
 8018474:	6823      	ldr	r3, [r4, #0]
 8018476:	781a      	ldrb	r2, [r3, #0]
 8018478:	5cba      	ldrb	r2, [r7, r2]
 801847a:	0712      	lsls	r2, r2, #28
 801847c:	d438      	bmi.n	80184f0 <__ssvfiscanf_r+0x274>
 801847e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8018480:	2b02      	cmp	r3, #2
 8018482:	dc47      	bgt.n	8018514 <__ssvfiscanf_r+0x298>
 8018484:	466b      	mov	r3, sp
 8018486:	4622      	mov	r2, r4
 8018488:	a941      	add	r1, sp, #260	@ 0x104
 801848a:	4630      	mov	r0, r6
 801848c:	f000 fb3a 	bl	8018b04 <_scanf_chars>
 8018490:	2801      	cmp	r0, #1
 8018492:	d064      	beq.n	801855e <__ssvfiscanf_r+0x2e2>
 8018494:	2802      	cmp	r0, #2
 8018496:	f47f af19 	bne.w	80182cc <__ssvfiscanf_r+0x50>
 801849a:	e7c9      	b.n	8018430 <__ssvfiscanf_r+0x1b4>
 801849c:	220a      	movs	r2, #10
 801849e:	e7d7      	b.n	8018450 <__ssvfiscanf_r+0x1d4>
 80184a0:	4629      	mov	r1, r5
 80184a2:	4640      	mov	r0, r8
 80184a4:	f000 fd28 	bl	8018ef8 <__sccl>
 80184a8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80184aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ae:	9341      	str	r3, [sp, #260]	@ 0x104
 80184b0:	4605      	mov	r5, r0
 80184b2:	2301      	movs	r3, #1
 80184b4:	e7d7      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 80184b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80184b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184bc:	9341      	str	r3, [sp, #260]	@ 0x104
 80184be:	2300      	movs	r3, #0
 80184c0:	e7d1      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 80184c2:	2302      	movs	r3, #2
 80184c4:	e7cf      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 80184c6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80184c8:	06c3      	lsls	r3, r0, #27
 80184ca:	f53f aeff 	bmi.w	80182cc <__ssvfiscanf_r+0x50>
 80184ce:	9b00      	ldr	r3, [sp, #0]
 80184d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80184d2:	1d19      	adds	r1, r3, #4
 80184d4:	9100      	str	r1, [sp, #0]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	07c0      	lsls	r0, r0, #31
 80184da:	bf4c      	ite	mi
 80184dc:	801a      	strhmi	r2, [r3, #0]
 80184de:	601a      	strpl	r2, [r3, #0]
 80184e0:	e6f4      	b.n	80182cc <__ssvfiscanf_r+0x50>
 80184e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80184e4:	4621      	mov	r1, r4
 80184e6:	4630      	mov	r0, r6
 80184e8:	4798      	blx	r3
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d0bf      	beq.n	801846e <__ssvfiscanf_r+0x1f2>
 80184ee:	e79f      	b.n	8018430 <__ssvfiscanf_r+0x1b4>
 80184f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80184f2:	3201      	adds	r2, #1
 80184f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80184f6:	6862      	ldr	r2, [r4, #4]
 80184f8:	3a01      	subs	r2, #1
 80184fa:	2a00      	cmp	r2, #0
 80184fc:	6062      	str	r2, [r4, #4]
 80184fe:	dd02      	ble.n	8018506 <__ssvfiscanf_r+0x28a>
 8018500:	3301      	adds	r3, #1
 8018502:	6023      	str	r3, [r4, #0]
 8018504:	e7b6      	b.n	8018474 <__ssvfiscanf_r+0x1f8>
 8018506:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018508:	4621      	mov	r1, r4
 801850a:	4630      	mov	r0, r6
 801850c:	4798      	blx	r3
 801850e:	2800      	cmp	r0, #0
 8018510:	d0b0      	beq.n	8018474 <__ssvfiscanf_r+0x1f8>
 8018512:	e78d      	b.n	8018430 <__ssvfiscanf_r+0x1b4>
 8018514:	2b04      	cmp	r3, #4
 8018516:	dc0f      	bgt.n	8018538 <__ssvfiscanf_r+0x2bc>
 8018518:	466b      	mov	r3, sp
 801851a:	4622      	mov	r2, r4
 801851c:	a941      	add	r1, sp, #260	@ 0x104
 801851e:	4630      	mov	r0, r6
 8018520:	f000 fb4a 	bl	8018bb8 <_scanf_i>
 8018524:	e7b4      	b.n	8018490 <__ssvfiscanf_r+0x214>
 8018526:	bf00      	nop
 8018528:	080181c9 	.word	0x080181c9
 801852c:	08018243 	.word	0x08018243
 8018530:	0801cb15 	.word	0x0801cb15
 8018534:	0801cacc 	.word	0x0801cacc
 8018538:	4b0a      	ldr	r3, [pc, #40]	@ (8018564 <__ssvfiscanf_r+0x2e8>)
 801853a:	2b00      	cmp	r3, #0
 801853c:	f43f aec6 	beq.w	80182cc <__ssvfiscanf_r+0x50>
 8018540:	466b      	mov	r3, sp
 8018542:	4622      	mov	r2, r4
 8018544:	a941      	add	r1, sp, #260	@ 0x104
 8018546:	4630      	mov	r0, r6
 8018548:	f3af 8000 	nop.w
 801854c:	e7a0      	b.n	8018490 <__ssvfiscanf_r+0x214>
 801854e:	89a3      	ldrh	r3, [r4, #12]
 8018550:	065b      	lsls	r3, r3, #25
 8018552:	f53f af71 	bmi.w	8018438 <__ssvfiscanf_r+0x1bc>
 8018556:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018560:	e7f9      	b.n	8018556 <__ssvfiscanf_r+0x2da>
 8018562:	bf00      	nop
 8018564:	00000000 	.word	0x00000000

08018568 <__sfputc_r>:
 8018568:	6893      	ldr	r3, [r2, #8]
 801856a:	3b01      	subs	r3, #1
 801856c:	2b00      	cmp	r3, #0
 801856e:	b410      	push	{r4}
 8018570:	6093      	str	r3, [r2, #8]
 8018572:	da08      	bge.n	8018586 <__sfputc_r+0x1e>
 8018574:	6994      	ldr	r4, [r2, #24]
 8018576:	42a3      	cmp	r3, r4
 8018578:	db01      	blt.n	801857e <__sfputc_r+0x16>
 801857a:	290a      	cmp	r1, #10
 801857c:	d103      	bne.n	8018586 <__sfputc_r+0x1e>
 801857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018582:	f000 bd2c 	b.w	8018fde <__swbuf_r>
 8018586:	6813      	ldr	r3, [r2, #0]
 8018588:	1c58      	adds	r0, r3, #1
 801858a:	6010      	str	r0, [r2, #0]
 801858c:	7019      	strb	r1, [r3, #0]
 801858e:	4608      	mov	r0, r1
 8018590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018594:	4770      	bx	lr

08018596 <__sfputs_r>:
 8018596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018598:	4606      	mov	r6, r0
 801859a:	460f      	mov	r7, r1
 801859c:	4614      	mov	r4, r2
 801859e:	18d5      	adds	r5, r2, r3
 80185a0:	42ac      	cmp	r4, r5
 80185a2:	d101      	bne.n	80185a8 <__sfputs_r+0x12>
 80185a4:	2000      	movs	r0, #0
 80185a6:	e007      	b.n	80185b8 <__sfputs_r+0x22>
 80185a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185ac:	463a      	mov	r2, r7
 80185ae:	4630      	mov	r0, r6
 80185b0:	f7ff ffda 	bl	8018568 <__sfputc_r>
 80185b4:	1c43      	adds	r3, r0, #1
 80185b6:	d1f3      	bne.n	80185a0 <__sfputs_r+0xa>
 80185b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185bc <_vfiprintf_r>:
 80185bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185c0:	460d      	mov	r5, r1
 80185c2:	b09d      	sub	sp, #116	@ 0x74
 80185c4:	4614      	mov	r4, r2
 80185c6:	4698      	mov	r8, r3
 80185c8:	4606      	mov	r6, r0
 80185ca:	b118      	cbz	r0, 80185d4 <_vfiprintf_r+0x18>
 80185cc:	6a03      	ldr	r3, [r0, #32]
 80185ce:	b90b      	cbnz	r3, 80185d4 <_vfiprintf_r+0x18>
 80185d0:	f7ff fa3a 	bl	8017a48 <__sinit>
 80185d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185d6:	07d9      	lsls	r1, r3, #31
 80185d8:	d405      	bmi.n	80185e6 <_vfiprintf_r+0x2a>
 80185da:	89ab      	ldrh	r3, [r5, #12]
 80185dc:	059a      	lsls	r2, r3, #22
 80185de:	d402      	bmi.n	80185e6 <_vfiprintf_r+0x2a>
 80185e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80185e2:	f7ff fc3e 	bl	8017e62 <__retarget_lock_acquire_recursive>
 80185e6:	89ab      	ldrh	r3, [r5, #12]
 80185e8:	071b      	lsls	r3, r3, #28
 80185ea:	d501      	bpl.n	80185f0 <_vfiprintf_r+0x34>
 80185ec:	692b      	ldr	r3, [r5, #16]
 80185ee:	b99b      	cbnz	r3, 8018618 <_vfiprintf_r+0x5c>
 80185f0:	4629      	mov	r1, r5
 80185f2:	4630      	mov	r0, r6
 80185f4:	f000 fd32 	bl	801905c <__swsetup_r>
 80185f8:	b170      	cbz	r0, 8018618 <_vfiprintf_r+0x5c>
 80185fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185fc:	07dc      	lsls	r4, r3, #31
 80185fe:	d504      	bpl.n	801860a <_vfiprintf_r+0x4e>
 8018600:	f04f 30ff 	mov.w	r0, #4294967295
 8018604:	b01d      	add	sp, #116	@ 0x74
 8018606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801860a:	89ab      	ldrh	r3, [r5, #12]
 801860c:	0598      	lsls	r0, r3, #22
 801860e:	d4f7      	bmi.n	8018600 <_vfiprintf_r+0x44>
 8018610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018612:	f7ff fc27 	bl	8017e64 <__retarget_lock_release_recursive>
 8018616:	e7f3      	b.n	8018600 <_vfiprintf_r+0x44>
 8018618:	2300      	movs	r3, #0
 801861a:	9309      	str	r3, [sp, #36]	@ 0x24
 801861c:	2320      	movs	r3, #32
 801861e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018622:	f8cd 800c 	str.w	r8, [sp, #12]
 8018626:	2330      	movs	r3, #48	@ 0x30
 8018628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80187d8 <_vfiprintf_r+0x21c>
 801862c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018630:	f04f 0901 	mov.w	r9, #1
 8018634:	4623      	mov	r3, r4
 8018636:	469a      	mov	sl, r3
 8018638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801863c:	b10a      	cbz	r2, 8018642 <_vfiprintf_r+0x86>
 801863e:	2a25      	cmp	r2, #37	@ 0x25
 8018640:	d1f9      	bne.n	8018636 <_vfiprintf_r+0x7a>
 8018642:	ebba 0b04 	subs.w	fp, sl, r4
 8018646:	d00b      	beq.n	8018660 <_vfiprintf_r+0xa4>
 8018648:	465b      	mov	r3, fp
 801864a:	4622      	mov	r2, r4
 801864c:	4629      	mov	r1, r5
 801864e:	4630      	mov	r0, r6
 8018650:	f7ff ffa1 	bl	8018596 <__sfputs_r>
 8018654:	3001      	adds	r0, #1
 8018656:	f000 80a7 	beq.w	80187a8 <_vfiprintf_r+0x1ec>
 801865a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801865c:	445a      	add	r2, fp
 801865e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018660:	f89a 3000 	ldrb.w	r3, [sl]
 8018664:	2b00      	cmp	r3, #0
 8018666:	f000 809f 	beq.w	80187a8 <_vfiprintf_r+0x1ec>
 801866a:	2300      	movs	r3, #0
 801866c:	f04f 32ff 	mov.w	r2, #4294967295
 8018670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018674:	f10a 0a01 	add.w	sl, sl, #1
 8018678:	9304      	str	r3, [sp, #16]
 801867a:	9307      	str	r3, [sp, #28]
 801867c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018680:	931a      	str	r3, [sp, #104]	@ 0x68
 8018682:	4654      	mov	r4, sl
 8018684:	2205      	movs	r2, #5
 8018686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801868a:	4853      	ldr	r0, [pc, #332]	@ (80187d8 <_vfiprintf_r+0x21c>)
 801868c:	f7e7 fdd8 	bl	8000240 <memchr>
 8018690:	9a04      	ldr	r2, [sp, #16]
 8018692:	b9d8      	cbnz	r0, 80186cc <_vfiprintf_r+0x110>
 8018694:	06d1      	lsls	r1, r2, #27
 8018696:	bf44      	itt	mi
 8018698:	2320      	movmi	r3, #32
 801869a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801869e:	0713      	lsls	r3, r2, #28
 80186a0:	bf44      	itt	mi
 80186a2:	232b      	movmi	r3, #43	@ 0x2b
 80186a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80186a8:	f89a 3000 	ldrb.w	r3, [sl]
 80186ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80186ae:	d015      	beq.n	80186dc <_vfiprintf_r+0x120>
 80186b0:	9a07      	ldr	r2, [sp, #28]
 80186b2:	4654      	mov	r4, sl
 80186b4:	2000      	movs	r0, #0
 80186b6:	f04f 0c0a 	mov.w	ip, #10
 80186ba:	4621      	mov	r1, r4
 80186bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186c0:	3b30      	subs	r3, #48	@ 0x30
 80186c2:	2b09      	cmp	r3, #9
 80186c4:	d94b      	bls.n	801875e <_vfiprintf_r+0x1a2>
 80186c6:	b1b0      	cbz	r0, 80186f6 <_vfiprintf_r+0x13a>
 80186c8:	9207      	str	r2, [sp, #28]
 80186ca:	e014      	b.n	80186f6 <_vfiprintf_r+0x13a>
 80186cc:	eba0 0308 	sub.w	r3, r0, r8
 80186d0:	fa09 f303 	lsl.w	r3, r9, r3
 80186d4:	4313      	orrs	r3, r2
 80186d6:	9304      	str	r3, [sp, #16]
 80186d8:	46a2      	mov	sl, r4
 80186da:	e7d2      	b.n	8018682 <_vfiprintf_r+0xc6>
 80186dc:	9b03      	ldr	r3, [sp, #12]
 80186de:	1d19      	adds	r1, r3, #4
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	9103      	str	r1, [sp, #12]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	bfbb      	ittet	lt
 80186e8:	425b      	neglt	r3, r3
 80186ea:	f042 0202 	orrlt.w	r2, r2, #2
 80186ee:	9307      	strge	r3, [sp, #28]
 80186f0:	9307      	strlt	r3, [sp, #28]
 80186f2:	bfb8      	it	lt
 80186f4:	9204      	strlt	r2, [sp, #16]
 80186f6:	7823      	ldrb	r3, [r4, #0]
 80186f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80186fa:	d10a      	bne.n	8018712 <_vfiprintf_r+0x156>
 80186fc:	7863      	ldrb	r3, [r4, #1]
 80186fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018700:	d132      	bne.n	8018768 <_vfiprintf_r+0x1ac>
 8018702:	9b03      	ldr	r3, [sp, #12]
 8018704:	1d1a      	adds	r2, r3, #4
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	9203      	str	r2, [sp, #12]
 801870a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801870e:	3402      	adds	r4, #2
 8018710:	9305      	str	r3, [sp, #20]
 8018712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80187e8 <_vfiprintf_r+0x22c>
 8018716:	7821      	ldrb	r1, [r4, #0]
 8018718:	2203      	movs	r2, #3
 801871a:	4650      	mov	r0, sl
 801871c:	f7e7 fd90 	bl	8000240 <memchr>
 8018720:	b138      	cbz	r0, 8018732 <_vfiprintf_r+0x176>
 8018722:	9b04      	ldr	r3, [sp, #16]
 8018724:	eba0 000a 	sub.w	r0, r0, sl
 8018728:	2240      	movs	r2, #64	@ 0x40
 801872a:	4082      	lsls	r2, r0
 801872c:	4313      	orrs	r3, r2
 801872e:	3401      	adds	r4, #1
 8018730:	9304      	str	r3, [sp, #16]
 8018732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018736:	4829      	ldr	r0, [pc, #164]	@ (80187dc <_vfiprintf_r+0x220>)
 8018738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801873c:	2206      	movs	r2, #6
 801873e:	f7e7 fd7f 	bl	8000240 <memchr>
 8018742:	2800      	cmp	r0, #0
 8018744:	d03f      	beq.n	80187c6 <_vfiprintf_r+0x20a>
 8018746:	4b26      	ldr	r3, [pc, #152]	@ (80187e0 <_vfiprintf_r+0x224>)
 8018748:	bb1b      	cbnz	r3, 8018792 <_vfiprintf_r+0x1d6>
 801874a:	9b03      	ldr	r3, [sp, #12]
 801874c:	3307      	adds	r3, #7
 801874e:	f023 0307 	bic.w	r3, r3, #7
 8018752:	3308      	adds	r3, #8
 8018754:	9303      	str	r3, [sp, #12]
 8018756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018758:	443b      	add	r3, r7
 801875a:	9309      	str	r3, [sp, #36]	@ 0x24
 801875c:	e76a      	b.n	8018634 <_vfiprintf_r+0x78>
 801875e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018762:	460c      	mov	r4, r1
 8018764:	2001      	movs	r0, #1
 8018766:	e7a8      	b.n	80186ba <_vfiprintf_r+0xfe>
 8018768:	2300      	movs	r3, #0
 801876a:	3401      	adds	r4, #1
 801876c:	9305      	str	r3, [sp, #20]
 801876e:	4619      	mov	r1, r3
 8018770:	f04f 0c0a 	mov.w	ip, #10
 8018774:	4620      	mov	r0, r4
 8018776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801877a:	3a30      	subs	r2, #48	@ 0x30
 801877c:	2a09      	cmp	r2, #9
 801877e:	d903      	bls.n	8018788 <_vfiprintf_r+0x1cc>
 8018780:	2b00      	cmp	r3, #0
 8018782:	d0c6      	beq.n	8018712 <_vfiprintf_r+0x156>
 8018784:	9105      	str	r1, [sp, #20]
 8018786:	e7c4      	b.n	8018712 <_vfiprintf_r+0x156>
 8018788:	fb0c 2101 	mla	r1, ip, r1, r2
 801878c:	4604      	mov	r4, r0
 801878e:	2301      	movs	r3, #1
 8018790:	e7f0      	b.n	8018774 <_vfiprintf_r+0x1b8>
 8018792:	ab03      	add	r3, sp, #12
 8018794:	9300      	str	r3, [sp, #0]
 8018796:	462a      	mov	r2, r5
 8018798:	4b12      	ldr	r3, [pc, #72]	@ (80187e4 <_vfiprintf_r+0x228>)
 801879a:	a904      	add	r1, sp, #16
 801879c:	4630      	mov	r0, r6
 801879e:	f3af 8000 	nop.w
 80187a2:	4607      	mov	r7, r0
 80187a4:	1c78      	adds	r0, r7, #1
 80187a6:	d1d6      	bne.n	8018756 <_vfiprintf_r+0x19a>
 80187a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187aa:	07d9      	lsls	r1, r3, #31
 80187ac:	d405      	bmi.n	80187ba <_vfiprintf_r+0x1fe>
 80187ae:	89ab      	ldrh	r3, [r5, #12]
 80187b0:	059a      	lsls	r2, r3, #22
 80187b2:	d402      	bmi.n	80187ba <_vfiprintf_r+0x1fe>
 80187b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187b6:	f7ff fb55 	bl	8017e64 <__retarget_lock_release_recursive>
 80187ba:	89ab      	ldrh	r3, [r5, #12]
 80187bc:	065b      	lsls	r3, r3, #25
 80187be:	f53f af1f 	bmi.w	8018600 <_vfiprintf_r+0x44>
 80187c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80187c4:	e71e      	b.n	8018604 <_vfiprintf_r+0x48>
 80187c6:	ab03      	add	r3, sp, #12
 80187c8:	9300      	str	r3, [sp, #0]
 80187ca:	462a      	mov	r2, r5
 80187cc:	4b05      	ldr	r3, [pc, #20]	@ (80187e4 <_vfiprintf_r+0x228>)
 80187ce:	a904      	add	r1, sp, #16
 80187d0:	4630      	mov	r0, r6
 80187d2:	f000 f879 	bl	80188c8 <_printf_i>
 80187d6:	e7e4      	b.n	80187a2 <_vfiprintf_r+0x1e6>
 80187d8:	0801cac6 	.word	0x0801cac6
 80187dc:	0801cad0 	.word	0x0801cad0
 80187e0:	00000000 	.word	0x00000000
 80187e4:	08018597 	.word	0x08018597
 80187e8:	0801cacc 	.word	0x0801cacc

080187ec <_printf_common>:
 80187ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187f0:	4616      	mov	r6, r2
 80187f2:	4698      	mov	r8, r3
 80187f4:	688a      	ldr	r2, [r1, #8]
 80187f6:	690b      	ldr	r3, [r1, #16]
 80187f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80187fc:	4293      	cmp	r3, r2
 80187fe:	bfb8      	it	lt
 8018800:	4613      	movlt	r3, r2
 8018802:	6033      	str	r3, [r6, #0]
 8018804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018808:	4607      	mov	r7, r0
 801880a:	460c      	mov	r4, r1
 801880c:	b10a      	cbz	r2, 8018812 <_printf_common+0x26>
 801880e:	3301      	adds	r3, #1
 8018810:	6033      	str	r3, [r6, #0]
 8018812:	6823      	ldr	r3, [r4, #0]
 8018814:	0699      	lsls	r1, r3, #26
 8018816:	bf42      	ittt	mi
 8018818:	6833      	ldrmi	r3, [r6, #0]
 801881a:	3302      	addmi	r3, #2
 801881c:	6033      	strmi	r3, [r6, #0]
 801881e:	6825      	ldr	r5, [r4, #0]
 8018820:	f015 0506 	ands.w	r5, r5, #6
 8018824:	d106      	bne.n	8018834 <_printf_common+0x48>
 8018826:	f104 0a19 	add.w	sl, r4, #25
 801882a:	68e3      	ldr	r3, [r4, #12]
 801882c:	6832      	ldr	r2, [r6, #0]
 801882e:	1a9b      	subs	r3, r3, r2
 8018830:	42ab      	cmp	r3, r5
 8018832:	dc26      	bgt.n	8018882 <_printf_common+0x96>
 8018834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018838:	6822      	ldr	r2, [r4, #0]
 801883a:	3b00      	subs	r3, #0
 801883c:	bf18      	it	ne
 801883e:	2301      	movne	r3, #1
 8018840:	0692      	lsls	r2, r2, #26
 8018842:	d42b      	bmi.n	801889c <_printf_common+0xb0>
 8018844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018848:	4641      	mov	r1, r8
 801884a:	4638      	mov	r0, r7
 801884c:	47c8      	blx	r9
 801884e:	3001      	adds	r0, #1
 8018850:	d01e      	beq.n	8018890 <_printf_common+0xa4>
 8018852:	6823      	ldr	r3, [r4, #0]
 8018854:	6922      	ldr	r2, [r4, #16]
 8018856:	f003 0306 	and.w	r3, r3, #6
 801885a:	2b04      	cmp	r3, #4
 801885c:	bf02      	ittt	eq
 801885e:	68e5      	ldreq	r5, [r4, #12]
 8018860:	6833      	ldreq	r3, [r6, #0]
 8018862:	1aed      	subeq	r5, r5, r3
 8018864:	68a3      	ldr	r3, [r4, #8]
 8018866:	bf0c      	ite	eq
 8018868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801886c:	2500      	movne	r5, #0
 801886e:	4293      	cmp	r3, r2
 8018870:	bfc4      	itt	gt
 8018872:	1a9b      	subgt	r3, r3, r2
 8018874:	18ed      	addgt	r5, r5, r3
 8018876:	2600      	movs	r6, #0
 8018878:	341a      	adds	r4, #26
 801887a:	42b5      	cmp	r5, r6
 801887c:	d11a      	bne.n	80188b4 <_printf_common+0xc8>
 801887e:	2000      	movs	r0, #0
 8018880:	e008      	b.n	8018894 <_printf_common+0xa8>
 8018882:	2301      	movs	r3, #1
 8018884:	4652      	mov	r2, sl
 8018886:	4641      	mov	r1, r8
 8018888:	4638      	mov	r0, r7
 801888a:	47c8      	blx	r9
 801888c:	3001      	adds	r0, #1
 801888e:	d103      	bne.n	8018898 <_printf_common+0xac>
 8018890:	f04f 30ff 	mov.w	r0, #4294967295
 8018894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018898:	3501      	adds	r5, #1
 801889a:	e7c6      	b.n	801882a <_printf_common+0x3e>
 801889c:	18e1      	adds	r1, r4, r3
 801889e:	1c5a      	adds	r2, r3, #1
 80188a0:	2030      	movs	r0, #48	@ 0x30
 80188a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80188a6:	4422      	add	r2, r4
 80188a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80188ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80188b0:	3302      	adds	r3, #2
 80188b2:	e7c7      	b.n	8018844 <_printf_common+0x58>
 80188b4:	2301      	movs	r3, #1
 80188b6:	4622      	mov	r2, r4
 80188b8:	4641      	mov	r1, r8
 80188ba:	4638      	mov	r0, r7
 80188bc:	47c8      	blx	r9
 80188be:	3001      	adds	r0, #1
 80188c0:	d0e6      	beq.n	8018890 <_printf_common+0xa4>
 80188c2:	3601      	adds	r6, #1
 80188c4:	e7d9      	b.n	801887a <_printf_common+0x8e>
	...

080188c8 <_printf_i>:
 80188c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80188cc:	7e0f      	ldrb	r7, [r1, #24]
 80188ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80188d0:	2f78      	cmp	r7, #120	@ 0x78
 80188d2:	4691      	mov	r9, r2
 80188d4:	4680      	mov	r8, r0
 80188d6:	460c      	mov	r4, r1
 80188d8:	469a      	mov	sl, r3
 80188da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80188de:	d807      	bhi.n	80188f0 <_printf_i+0x28>
 80188e0:	2f62      	cmp	r7, #98	@ 0x62
 80188e2:	d80a      	bhi.n	80188fa <_printf_i+0x32>
 80188e4:	2f00      	cmp	r7, #0
 80188e6:	f000 80d1 	beq.w	8018a8c <_printf_i+0x1c4>
 80188ea:	2f58      	cmp	r7, #88	@ 0x58
 80188ec:	f000 80b8 	beq.w	8018a60 <_printf_i+0x198>
 80188f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80188f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80188f8:	e03a      	b.n	8018970 <_printf_i+0xa8>
 80188fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80188fe:	2b15      	cmp	r3, #21
 8018900:	d8f6      	bhi.n	80188f0 <_printf_i+0x28>
 8018902:	a101      	add	r1, pc, #4	@ (adr r1, 8018908 <_printf_i+0x40>)
 8018904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018908:	08018961 	.word	0x08018961
 801890c:	08018975 	.word	0x08018975
 8018910:	080188f1 	.word	0x080188f1
 8018914:	080188f1 	.word	0x080188f1
 8018918:	080188f1 	.word	0x080188f1
 801891c:	080188f1 	.word	0x080188f1
 8018920:	08018975 	.word	0x08018975
 8018924:	080188f1 	.word	0x080188f1
 8018928:	080188f1 	.word	0x080188f1
 801892c:	080188f1 	.word	0x080188f1
 8018930:	080188f1 	.word	0x080188f1
 8018934:	08018a73 	.word	0x08018a73
 8018938:	0801899f 	.word	0x0801899f
 801893c:	08018a2d 	.word	0x08018a2d
 8018940:	080188f1 	.word	0x080188f1
 8018944:	080188f1 	.word	0x080188f1
 8018948:	08018a95 	.word	0x08018a95
 801894c:	080188f1 	.word	0x080188f1
 8018950:	0801899f 	.word	0x0801899f
 8018954:	080188f1 	.word	0x080188f1
 8018958:	080188f1 	.word	0x080188f1
 801895c:	08018a35 	.word	0x08018a35
 8018960:	6833      	ldr	r3, [r6, #0]
 8018962:	1d1a      	adds	r2, r3, #4
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	6032      	str	r2, [r6, #0]
 8018968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801896c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018970:	2301      	movs	r3, #1
 8018972:	e09c      	b.n	8018aae <_printf_i+0x1e6>
 8018974:	6833      	ldr	r3, [r6, #0]
 8018976:	6820      	ldr	r0, [r4, #0]
 8018978:	1d19      	adds	r1, r3, #4
 801897a:	6031      	str	r1, [r6, #0]
 801897c:	0606      	lsls	r6, r0, #24
 801897e:	d501      	bpl.n	8018984 <_printf_i+0xbc>
 8018980:	681d      	ldr	r5, [r3, #0]
 8018982:	e003      	b.n	801898c <_printf_i+0xc4>
 8018984:	0645      	lsls	r5, r0, #25
 8018986:	d5fb      	bpl.n	8018980 <_printf_i+0xb8>
 8018988:	f9b3 5000 	ldrsh.w	r5, [r3]
 801898c:	2d00      	cmp	r5, #0
 801898e:	da03      	bge.n	8018998 <_printf_i+0xd0>
 8018990:	232d      	movs	r3, #45	@ 0x2d
 8018992:	426d      	negs	r5, r5
 8018994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018998:	4858      	ldr	r0, [pc, #352]	@ (8018afc <_printf_i+0x234>)
 801899a:	230a      	movs	r3, #10
 801899c:	e011      	b.n	80189c2 <_printf_i+0xfa>
 801899e:	6821      	ldr	r1, [r4, #0]
 80189a0:	6833      	ldr	r3, [r6, #0]
 80189a2:	0608      	lsls	r0, r1, #24
 80189a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80189a8:	d402      	bmi.n	80189b0 <_printf_i+0xe8>
 80189aa:	0649      	lsls	r1, r1, #25
 80189ac:	bf48      	it	mi
 80189ae:	b2ad      	uxthmi	r5, r5
 80189b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80189b2:	4852      	ldr	r0, [pc, #328]	@ (8018afc <_printf_i+0x234>)
 80189b4:	6033      	str	r3, [r6, #0]
 80189b6:	bf14      	ite	ne
 80189b8:	230a      	movne	r3, #10
 80189ba:	2308      	moveq	r3, #8
 80189bc:	2100      	movs	r1, #0
 80189be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80189c2:	6866      	ldr	r6, [r4, #4]
 80189c4:	60a6      	str	r6, [r4, #8]
 80189c6:	2e00      	cmp	r6, #0
 80189c8:	db05      	blt.n	80189d6 <_printf_i+0x10e>
 80189ca:	6821      	ldr	r1, [r4, #0]
 80189cc:	432e      	orrs	r6, r5
 80189ce:	f021 0104 	bic.w	r1, r1, #4
 80189d2:	6021      	str	r1, [r4, #0]
 80189d4:	d04b      	beq.n	8018a6e <_printf_i+0x1a6>
 80189d6:	4616      	mov	r6, r2
 80189d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80189dc:	fb03 5711 	mls	r7, r3, r1, r5
 80189e0:	5dc7      	ldrb	r7, [r0, r7]
 80189e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80189e6:	462f      	mov	r7, r5
 80189e8:	42bb      	cmp	r3, r7
 80189ea:	460d      	mov	r5, r1
 80189ec:	d9f4      	bls.n	80189d8 <_printf_i+0x110>
 80189ee:	2b08      	cmp	r3, #8
 80189f0:	d10b      	bne.n	8018a0a <_printf_i+0x142>
 80189f2:	6823      	ldr	r3, [r4, #0]
 80189f4:	07df      	lsls	r7, r3, #31
 80189f6:	d508      	bpl.n	8018a0a <_printf_i+0x142>
 80189f8:	6923      	ldr	r3, [r4, #16]
 80189fa:	6861      	ldr	r1, [r4, #4]
 80189fc:	4299      	cmp	r1, r3
 80189fe:	bfde      	ittt	le
 8018a00:	2330      	movle	r3, #48	@ 0x30
 8018a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018a0a:	1b92      	subs	r2, r2, r6
 8018a0c:	6122      	str	r2, [r4, #16]
 8018a0e:	f8cd a000 	str.w	sl, [sp]
 8018a12:	464b      	mov	r3, r9
 8018a14:	aa03      	add	r2, sp, #12
 8018a16:	4621      	mov	r1, r4
 8018a18:	4640      	mov	r0, r8
 8018a1a:	f7ff fee7 	bl	80187ec <_printf_common>
 8018a1e:	3001      	adds	r0, #1
 8018a20:	d14a      	bne.n	8018ab8 <_printf_i+0x1f0>
 8018a22:	f04f 30ff 	mov.w	r0, #4294967295
 8018a26:	b004      	add	sp, #16
 8018a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a2c:	6823      	ldr	r3, [r4, #0]
 8018a2e:	f043 0320 	orr.w	r3, r3, #32
 8018a32:	6023      	str	r3, [r4, #0]
 8018a34:	4832      	ldr	r0, [pc, #200]	@ (8018b00 <_printf_i+0x238>)
 8018a36:	2778      	movs	r7, #120	@ 0x78
 8018a38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018a3c:	6823      	ldr	r3, [r4, #0]
 8018a3e:	6831      	ldr	r1, [r6, #0]
 8018a40:	061f      	lsls	r7, r3, #24
 8018a42:	f851 5b04 	ldr.w	r5, [r1], #4
 8018a46:	d402      	bmi.n	8018a4e <_printf_i+0x186>
 8018a48:	065f      	lsls	r7, r3, #25
 8018a4a:	bf48      	it	mi
 8018a4c:	b2ad      	uxthmi	r5, r5
 8018a4e:	6031      	str	r1, [r6, #0]
 8018a50:	07d9      	lsls	r1, r3, #31
 8018a52:	bf44      	itt	mi
 8018a54:	f043 0320 	orrmi.w	r3, r3, #32
 8018a58:	6023      	strmi	r3, [r4, #0]
 8018a5a:	b11d      	cbz	r5, 8018a64 <_printf_i+0x19c>
 8018a5c:	2310      	movs	r3, #16
 8018a5e:	e7ad      	b.n	80189bc <_printf_i+0xf4>
 8018a60:	4826      	ldr	r0, [pc, #152]	@ (8018afc <_printf_i+0x234>)
 8018a62:	e7e9      	b.n	8018a38 <_printf_i+0x170>
 8018a64:	6823      	ldr	r3, [r4, #0]
 8018a66:	f023 0320 	bic.w	r3, r3, #32
 8018a6a:	6023      	str	r3, [r4, #0]
 8018a6c:	e7f6      	b.n	8018a5c <_printf_i+0x194>
 8018a6e:	4616      	mov	r6, r2
 8018a70:	e7bd      	b.n	80189ee <_printf_i+0x126>
 8018a72:	6833      	ldr	r3, [r6, #0]
 8018a74:	6825      	ldr	r5, [r4, #0]
 8018a76:	6961      	ldr	r1, [r4, #20]
 8018a78:	1d18      	adds	r0, r3, #4
 8018a7a:	6030      	str	r0, [r6, #0]
 8018a7c:	062e      	lsls	r6, r5, #24
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	d501      	bpl.n	8018a86 <_printf_i+0x1be>
 8018a82:	6019      	str	r1, [r3, #0]
 8018a84:	e002      	b.n	8018a8c <_printf_i+0x1c4>
 8018a86:	0668      	lsls	r0, r5, #25
 8018a88:	d5fb      	bpl.n	8018a82 <_printf_i+0x1ba>
 8018a8a:	8019      	strh	r1, [r3, #0]
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	6123      	str	r3, [r4, #16]
 8018a90:	4616      	mov	r6, r2
 8018a92:	e7bc      	b.n	8018a0e <_printf_i+0x146>
 8018a94:	6833      	ldr	r3, [r6, #0]
 8018a96:	1d1a      	adds	r2, r3, #4
 8018a98:	6032      	str	r2, [r6, #0]
 8018a9a:	681e      	ldr	r6, [r3, #0]
 8018a9c:	6862      	ldr	r2, [r4, #4]
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	4630      	mov	r0, r6
 8018aa2:	f7e7 fbcd 	bl	8000240 <memchr>
 8018aa6:	b108      	cbz	r0, 8018aac <_printf_i+0x1e4>
 8018aa8:	1b80      	subs	r0, r0, r6
 8018aaa:	6060      	str	r0, [r4, #4]
 8018aac:	6863      	ldr	r3, [r4, #4]
 8018aae:	6123      	str	r3, [r4, #16]
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ab6:	e7aa      	b.n	8018a0e <_printf_i+0x146>
 8018ab8:	6923      	ldr	r3, [r4, #16]
 8018aba:	4632      	mov	r2, r6
 8018abc:	4649      	mov	r1, r9
 8018abe:	4640      	mov	r0, r8
 8018ac0:	47d0      	blx	sl
 8018ac2:	3001      	adds	r0, #1
 8018ac4:	d0ad      	beq.n	8018a22 <_printf_i+0x15a>
 8018ac6:	6823      	ldr	r3, [r4, #0]
 8018ac8:	079b      	lsls	r3, r3, #30
 8018aca:	d413      	bmi.n	8018af4 <_printf_i+0x22c>
 8018acc:	68e0      	ldr	r0, [r4, #12]
 8018ace:	9b03      	ldr	r3, [sp, #12]
 8018ad0:	4298      	cmp	r0, r3
 8018ad2:	bfb8      	it	lt
 8018ad4:	4618      	movlt	r0, r3
 8018ad6:	e7a6      	b.n	8018a26 <_printf_i+0x15e>
 8018ad8:	2301      	movs	r3, #1
 8018ada:	4632      	mov	r2, r6
 8018adc:	4649      	mov	r1, r9
 8018ade:	4640      	mov	r0, r8
 8018ae0:	47d0      	blx	sl
 8018ae2:	3001      	adds	r0, #1
 8018ae4:	d09d      	beq.n	8018a22 <_printf_i+0x15a>
 8018ae6:	3501      	adds	r5, #1
 8018ae8:	68e3      	ldr	r3, [r4, #12]
 8018aea:	9903      	ldr	r1, [sp, #12]
 8018aec:	1a5b      	subs	r3, r3, r1
 8018aee:	42ab      	cmp	r3, r5
 8018af0:	dcf2      	bgt.n	8018ad8 <_printf_i+0x210>
 8018af2:	e7eb      	b.n	8018acc <_printf_i+0x204>
 8018af4:	2500      	movs	r5, #0
 8018af6:	f104 0619 	add.w	r6, r4, #25
 8018afa:	e7f5      	b.n	8018ae8 <_printf_i+0x220>
 8018afc:	0801cad7 	.word	0x0801cad7
 8018b00:	0801cae8 	.word	0x0801cae8

08018b04 <_scanf_chars>:
 8018b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b08:	4615      	mov	r5, r2
 8018b0a:	688a      	ldr	r2, [r1, #8]
 8018b0c:	4680      	mov	r8, r0
 8018b0e:	460c      	mov	r4, r1
 8018b10:	b932      	cbnz	r2, 8018b20 <_scanf_chars+0x1c>
 8018b12:	698a      	ldr	r2, [r1, #24]
 8018b14:	2a00      	cmp	r2, #0
 8018b16:	bf14      	ite	ne
 8018b18:	f04f 32ff 	movne.w	r2, #4294967295
 8018b1c:	2201      	moveq	r2, #1
 8018b1e:	608a      	str	r2, [r1, #8]
 8018b20:	6822      	ldr	r2, [r4, #0]
 8018b22:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8018bb4 <_scanf_chars+0xb0>
 8018b26:	06d1      	lsls	r1, r2, #27
 8018b28:	bf5f      	itttt	pl
 8018b2a:	681a      	ldrpl	r2, [r3, #0]
 8018b2c:	1d11      	addpl	r1, r2, #4
 8018b2e:	6019      	strpl	r1, [r3, #0]
 8018b30:	6816      	ldrpl	r6, [r2, #0]
 8018b32:	2700      	movs	r7, #0
 8018b34:	69a0      	ldr	r0, [r4, #24]
 8018b36:	b188      	cbz	r0, 8018b5c <_scanf_chars+0x58>
 8018b38:	2801      	cmp	r0, #1
 8018b3a:	d107      	bne.n	8018b4c <_scanf_chars+0x48>
 8018b3c:	682b      	ldr	r3, [r5, #0]
 8018b3e:	781a      	ldrb	r2, [r3, #0]
 8018b40:	6963      	ldr	r3, [r4, #20]
 8018b42:	5c9b      	ldrb	r3, [r3, r2]
 8018b44:	b953      	cbnz	r3, 8018b5c <_scanf_chars+0x58>
 8018b46:	2f00      	cmp	r7, #0
 8018b48:	d031      	beq.n	8018bae <_scanf_chars+0xaa>
 8018b4a:	e022      	b.n	8018b92 <_scanf_chars+0x8e>
 8018b4c:	2802      	cmp	r0, #2
 8018b4e:	d120      	bne.n	8018b92 <_scanf_chars+0x8e>
 8018b50:	682b      	ldr	r3, [r5, #0]
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018b58:	071b      	lsls	r3, r3, #28
 8018b5a:	d41a      	bmi.n	8018b92 <_scanf_chars+0x8e>
 8018b5c:	6823      	ldr	r3, [r4, #0]
 8018b5e:	06da      	lsls	r2, r3, #27
 8018b60:	bf5e      	ittt	pl
 8018b62:	682b      	ldrpl	r3, [r5, #0]
 8018b64:	781b      	ldrbpl	r3, [r3, #0]
 8018b66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018b6a:	682a      	ldr	r2, [r5, #0]
 8018b6c:	686b      	ldr	r3, [r5, #4]
 8018b6e:	3201      	adds	r2, #1
 8018b70:	602a      	str	r2, [r5, #0]
 8018b72:	68a2      	ldr	r2, [r4, #8]
 8018b74:	3b01      	subs	r3, #1
 8018b76:	3a01      	subs	r2, #1
 8018b78:	606b      	str	r3, [r5, #4]
 8018b7a:	3701      	adds	r7, #1
 8018b7c:	60a2      	str	r2, [r4, #8]
 8018b7e:	b142      	cbz	r2, 8018b92 <_scanf_chars+0x8e>
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	dcd7      	bgt.n	8018b34 <_scanf_chars+0x30>
 8018b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018b88:	4629      	mov	r1, r5
 8018b8a:	4640      	mov	r0, r8
 8018b8c:	4798      	blx	r3
 8018b8e:	2800      	cmp	r0, #0
 8018b90:	d0d0      	beq.n	8018b34 <_scanf_chars+0x30>
 8018b92:	6823      	ldr	r3, [r4, #0]
 8018b94:	f013 0310 	ands.w	r3, r3, #16
 8018b98:	d105      	bne.n	8018ba6 <_scanf_chars+0xa2>
 8018b9a:	68e2      	ldr	r2, [r4, #12]
 8018b9c:	3201      	adds	r2, #1
 8018b9e:	60e2      	str	r2, [r4, #12]
 8018ba0:	69a2      	ldr	r2, [r4, #24]
 8018ba2:	b102      	cbz	r2, 8018ba6 <_scanf_chars+0xa2>
 8018ba4:	7033      	strb	r3, [r6, #0]
 8018ba6:	6923      	ldr	r3, [r4, #16]
 8018ba8:	443b      	add	r3, r7
 8018baa:	6123      	str	r3, [r4, #16]
 8018bac:	2000      	movs	r0, #0
 8018bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bb2:	bf00      	nop
 8018bb4:	0801cb15 	.word	0x0801cb15

08018bb8 <_scanf_i>:
 8018bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bbc:	4698      	mov	r8, r3
 8018bbe:	4b74      	ldr	r3, [pc, #464]	@ (8018d90 <_scanf_i+0x1d8>)
 8018bc0:	460c      	mov	r4, r1
 8018bc2:	4682      	mov	sl, r0
 8018bc4:	4616      	mov	r6, r2
 8018bc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018bca:	b087      	sub	sp, #28
 8018bcc:	ab03      	add	r3, sp, #12
 8018bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018bd2:	4b70      	ldr	r3, [pc, #448]	@ (8018d94 <_scanf_i+0x1dc>)
 8018bd4:	69a1      	ldr	r1, [r4, #24]
 8018bd6:	4a70      	ldr	r2, [pc, #448]	@ (8018d98 <_scanf_i+0x1e0>)
 8018bd8:	2903      	cmp	r1, #3
 8018bda:	bf08      	it	eq
 8018bdc:	461a      	moveq	r2, r3
 8018bde:	68a3      	ldr	r3, [r4, #8]
 8018be0:	9201      	str	r2, [sp, #4]
 8018be2:	1e5a      	subs	r2, r3, #1
 8018be4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018be8:	bf88      	it	hi
 8018bea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8018bee:	4627      	mov	r7, r4
 8018bf0:	bf82      	ittt	hi
 8018bf2:	eb03 0905 	addhi.w	r9, r3, r5
 8018bf6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8018bfa:	60a3      	strhi	r3, [r4, #8]
 8018bfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018c00:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8018c04:	bf98      	it	ls
 8018c06:	f04f 0900 	movls.w	r9, #0
 8018c0a:	6023      	str	r3, [r4, #0]
 8018c0c:	463d      	mov	r5, r7
 8018c0e:	f04f 0b00 	mov.w	fp, #0
 8018c12:	6831      	ldr	r1, [r6, #0]
 8018c14:	ab03      	add	r3, sp, #12
 8018c16:	7809      	ldrb	r1, [r1, #0]
 8018c18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018c1c:	2202      	movs	r2, #2
 8018c1e:	f7e7 fb0f 	bl	8000240 <memchr>
 8018c22:	b328      	cbz	r0, 8018c70 <_scanf_i+0xb8>
 8018c24:	f1bb 0f01 	cmp.w	fp, #1
 8018c28:	d159      	bne.n	8018cde <_scanf_i+0x126>
 8018c2a:	6862      	ldr	r2, [r4, #4]
 8018c2c:	b92a      	cbnz	r2, 8018c3a <_scanf_i+0x82>
 8018c2e:	6822      	ldr	r2, [r4, #0]
 8018c30:	2108      	movs	r1, #8
 8018c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018c36:	6061      	str	r1, [r4, #4]
 8018c38:	6022      	str	r2, [r4, #0]
 8018c3a:	6822      	ldr	r2, [r4, #0]
 8018c3c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8018c40:	6022      	str	r2, [r4, #0]
 8018c42:	68a2      	ldr	r2, [r4, #8]
 8018c44:	1e51      	subs	r1, r2, #1
 8018c46:	60a1      	str	r1, [r4, #8]
 8018c48:	b192      	cbz	r2, 8018c70 <_scanf_i+0xb8>
 8018c4a:	6832      	ldr	r2, [r6, #0]
 8018c4c:	1c51      	adds	r1, r2, #1
 8018c4e:	6031      	str	r1, [r6, #0]
 8018c50:	7812      	ldrb	r2, [r2, #0]
 8018c52:	f805 2b01 	strb.w	r2, [r5], #1
 8018c56:	6872      	ldr	r2, [r6, #4]
 8018c58:	3a01      	subs	r2, #1
 8018c5a:	2a00      	cmp	r2, #0
 8018c5c:	6072      	str	r2, [r6, #4]
 8018c5e:	dc07      	bgt.n	8018c70 <_scanf_i+0xb8>
 8018c60:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8018c64:	4631      	mov	r1, r6
 8018c66:	4650      	mov	r0, sl
 8018c68:	4790      	blx	r2
 8018c6a:	2800      	cmp	r0, #0
 8018c6c:	f040 8085 	bne.w	8018d7a <_scanf_i+0x1c2>
 8018c70:	f10b 0b01 	add.w	fp, fp, #1
 8018c74:	f1bb 0f03 	cmp.w	fp, #3
 8018c78:	d1cb      	bne.n	8018c12 <_scanf_i+0x5a>
 8018c7a:	6863      	ldr	r3, [r4, #4]
 8018c7c:	b90b      	cbnz	r3, 8018c82 <_scanf_i+0xca>
 8018c7e:	230a      	movs	r3, #10
 8018c80:	6063      	str	r3, [r4, #4]
 8018c82:	6863      	ldr	r3, [r4, #4]
 8018c84:	4945      	ldr	r1, [pc, #276]	@ (8018d9c <_scanf_i+0x1e4>)
 8018c86:	6960      	ldr	r0, [r4, #20]
 8018c88:	1ac9      	subs	r1, r1, r3
 8018c8a:	f000 f935 	bl	8018ef8 <__sccl>
 8018c8e:	f04f 0b00 	mov.w	fp, #0
 8018c92:	68a3      	ldr	r3, [r4, #8]
 8018c94:	6822      	ldr	r2, [r4, #0]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d03d      	beq.n	8018d16 <_scanf_i+0x15e>
 8018c9a:	6831      	ldr	r1, [r6, #0]
 8018c9c:	6960      	ldr	r0, [r4, #20]
 8018c9e:	f891 c000 	ldrb.w	ip, [r1]
 8018ca2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	d035      	beq.n	8018d16 <_scanf_i+0x15e>
 8018caa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8018cae:	d124      	bne.n	8018cfa <_scanf_i+0x142>
 8018cb0:	0510      	lsls	r0, r2, #20
 8018cb2:	d522      	bpl.n	8018cfa <_scanf_i+0x142>
 8018cb4:	f10b 0b01 	add.w	fp, fp, #1
 8018cb8:	f1b9 0f00 	cmp.w	r9, #0
 8018cbc:	d003      	beq.n	8018cc6 <_scanf_i+0x10e>
 8018cbe:	3301      	adds	r3, #1
 8018cc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8018cc4:	60a3      	str	r3, [r4, #8]
 8018cc6:	6873      	ldr	r3, [r6, #4]
 8018cc8:	3b01      	subs	r3, #1
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	6073      	str	r3, [r6, #4]
 8018cce:	dd1b      	ble.n	8018d08 <_scanf_i+0x150>
 8018cd0:	6833      	ldr	r3, [r6, #0]
 8018cd2:	3301      	adds	r3, #1
 8018cd4:	6033      	str	r3, [r6, #0]
 8018cd6:	68a3      	ldr	r3, [r4, #8]
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	60a3      	str	r3, [r4, #8]
 8018cdc:	e7d9      	b.n	8018c92 <_scanf_i+0xda>
 8018cde:	f1bb 0f02 	cmp.w	fp, #2
 8018ce2:	d1ae      	bne.n	8018c42 <_scanf_i+0x8a>
 8018ce4:	6822      	ldr	r2, [r4, #0]
 8018ce6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8018cea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018cee:	d1c4      	bne.n	8018c7a <_scanf_i+0xc2>
 8018cf0:	2110      	movs	r1, #16
 8018cf2:	6061      	str	r1, [r4, #4]
 8018cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018cf8:	e7a2      	b.n	8018c40 <_scanf_i+0x88>
 8018cfa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8018cfe:	6022      	str	r2, [r4, #0]
 8018d00:	780b      	ldrb	r3, [r1, #0]
 8018d02:	f805 3b01 	strb.w	r3, [r5], #1
 8018d06:	e7de      	b.n	8018cc6 <_scanf_i+0x10e>
 8018d08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018d0c:	4631      	mov	r1, r6
 8018d0e:	4650      	mov	r0, sl
 8018d10:	4798      	blx	r3
 8018d12:	2800      	cmp	r0, #0
 8018d14:	d0df      	beq.n	8018cd6 <_scanf_i+0x11e>
 8018d16:	6823      	ldr	r3, [r4, #0]
 8018d18:	05d9      	lsls	r1, r3, #23
 8018d1a:	d50d      	bpl.n	8018d38 <_scanf_i+0x180>
 8018d1c:	42bd      	cmp	r5, r7
 8018d1e:	d909      	bls.n	8018d34 <_scanf_i+0x17c>
 8018d20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018d28:	4632      	mov	r2, r6
 8018d2a:	4650      	mov	r0, sl
 8018d2c:	4798      	blx	r3
 8018d2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8018d32:	464d      	mov	r5, r9
 8018d34:	42bd      	cmp	r5, r7
 8018d36:	d028      	beq.n	8018d8a <_scanf_i+0x1d2>
 8018d38:	6822      	ldr	r2, [r4, #0]
 8018d3a:	f012 0210 	ands.w	r2, r2, #16
 8018d3e:	d113      	bne.n	8018d68 <_scanf_i+0x1b0>
 8018d40:	702a      	strb	r2, [r5, #0]
 8018d42:	6863      	ldr	r3, [r4, #4]
 8018d44:	9e01      	ldr	r6, [sp, #4]
 8018d46:	4639      	mov	r1, r7
 8018d48:	4650      	mov	r0, sl
 8018d4a:	47b0      	blx	r6
 8018d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8018d50:	6821      	ldr	r1, [r4, #0]
 8018d52:	1d1a      	adds	r2, r3, #4
 8018d54:	f8c8 2000 	str.w	r2, [r8]
 8018d58:	f011 0f20 	tst.w	r1, #32
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	d00f      	beq.n	8018d80 <_scanf_i+0x1c8>
 8018d60:	6018      	str	r0, [r3, #0]
 8018d62:	68e3      	ldr	r3, [r4, #12]
 8018d64:	3301      	adds	r3, #1
 8018d66:	60e3      	str	r3, [r4, #12]
 8018d68:	6923      	ldr	r3, [r4, #16]
 8018d6a:	1bed      	subs	r5, r5, r7
 8018d6c:	445d      	add	r5, fp
 8018d6e:	442b      	add	r3, r5
 8018d70:	6123      	str	r3, [r4, #16]
 8018d72:	2000      	movs	r0, #0
 8018d74:	b007      	add	sp, #28
 8018d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7a:	f04f 0b00 	mov.w	fp, #0
 8018d7e:	e7ca      	b.n	8018d16 <_scanf_i+0x15e>
 8018d80:	07ca      	lsls	r2, r1, #31
 8018d82:	bf4c      	ite	mi
 8018d84:	8018      	strhmi	r0, [r3, #0]
 8018d86:	6018      	strpl	r0, [r3, #0]
 8018d88:	e7eb      	b.n	8018d62 <_scanf_i+0x1aa>
 8018d8a:	2001      	movs	r0, #1
 8018d8c:	e7f2      	b.n	8018d74 <_scanf_i+0x1bc>
 8018d8e:	bf00      	nop
 8018d90:	0801c9e8 	.word	0x0801c9e8
 8018d94:	0801928d 	.word	0x0801928d
 8018d98:	0801936d 	.word	0x0801936d
 8018d9c:	0801cb09 	.word	0x0801cb09

08018da0 <__sflush_r>:
 8018da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da8:	0716      	lsls	r6, r2, #28
 8018daa:	4605      	mov	r5, r0
 8018dac:	460c      	mov	r4, r1
 8018dae:	d454      	bmi.n	8018e5a <__sflush_r+0xba>
 8018db0:	684b      	ldr	r3, [r1, #4]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	dc02      	bgt.n	8018dbc <__sflush_r+0x1c>
 8018db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	dd48      	ble.n	8018e4e <__sflush_r+0xae>
 8018dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018dbe:	2e00      	cmp	r6, #0
 8018dc0:	d045      	beq.n	8018e4e <__sflush_r+0xae>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018dc8:	682f      	ldr	r7, [r5, #0]
 8018dca:	6a21      	ldr	r1, [r4, #32]
 8018dcc:	602b      	str	r3, [r5, #0]
 8018dce:	d030      	beq.n	8018e32 <__sflush_r+0x92>
 8018dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018dd2:	89a3      	ldrh	r3, [r4, #12]
 8018dd4:	0759      	lsls	r1, r3, #29
 8018dd6:	d505      	bpl.n	8018de4 <__sflush_r+0x44>
 8018dd8:	6863      	ldr	r3, [r4, #4]
 8018dda:	1ad2      	subs	r2, r2, r3
 8018ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018dde:	b10b      	cbz	r3, 8018de4 <__sflush_r+0x44>
 8018de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018de2:	1ad2      	subs	r2, r2, r3
 8018de4:	2300      	movs	r3, #0
 8018de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018de8:	6a21      	ldr	r1, [r4, #32]
 8018dea:	4628      	mov	r0, r5
 8018dec:	47b0      	blx	r6
 8018dee:	1c43      	adds	r3, r0, #1
 8018df0:	89a3      	ldrh	r3, [r4, #12]
 8018df2:	d106      	bne.n	8018e02 <__sflush_r+0x62>
 8018df4:	6829      	ldr	r1, [r5, #0]
 8018df6:	291d      	cmp	r1, #29
 8018df8:	d82b      	bhi.n	8018e52 <__sflush_r+0xb2>
 8018dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8018ea4 <__sflush_r+0x104>)
 8018dfc:	40ca      	lsrs	r2, r1
 8018dfe:	07d6      	lsls	r6, r2, #31
 8018e00:	d527      	bpl.n	8018e52 <__sflush_r+0xb2>
 8018e02:	2200      	movs	r2, #0
 8018e04:	6062      	str	r2, [r4, #4]
 8018e06:	04d9      	lsls	r1, r3, #19
 8018e08:	6922      	ldr	r2, [r4, #16]
 8018e0a:	6022      	str	r2, [r4, #0]
 8018e0c:	d504      	bpl.n	8018e18 <__sflush_r+0x78>
 8018e0e:	1c42      	adds	r2, r0, #1
 8018e10:	d101      	bne.n	8018e16 <__sflush_r+0x76>
 8018e12:	682b      	ldr	r3, [r5, #0]
 8018e14:	b903      	cbnz	r3, 8018e18 <__sflush_r+0x78>
 8018e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8018e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018e1a:	602f      	str	r7, [r5, #0]
 8018e1c:	b1b9      	cbz	r1, 8018e4e <__sflush_r+0xae>
 8018e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018e22:	4299      	cmp	r1, r3
 8018e24:	d002      	beq.n	8018e2c <__sflush_r+0x8c>
 8018e26:	4628      	mov	r0, r5
 8018e28:	f7ff f82c 	bl	8017e84 <_free_r>
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e30:	e00d      	b.n	8018e4e <__sflush_r+0xae>
 8018e32:	2301      	movs	r3, #1
 8018e34:	4628      	mov	r0, r5
 8018e36:	47b0      	blx	r6
 8018e38:	4602      	mov	r2, r0
 8018e3a:	1c50      	adds	r0, r2, #1
 8018e3c:	d1c9      	bne.n	8018dd2 <__sflush_r+0x32>
 8018e3e:	682b      	ldr	r3, [r5, #0]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d0c6      	beq.n	8018dd2 <__sflush_r+0x32>
 8018e44:	2b1d      	cmp	r3, #29
 8018e46:	d001      	beq.n	8018e4c <__sflush_r+0xac>
 8018e48:	2b16      	cmp	r3, #22
 8018e4a:	d11e      	bne.n	8018e8a <__sflush_r+0xea>
 8018e4c:	602f      	str	r7, [r5, #0]
 8018e4e:	2000      	movs	r0, #0
 8018e50:	e022      	b.n	8018e98 <__sflush_r+0xf8>
 8018e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e56:	b21b      	sxth	r3, r3
 8018e58:	e01b      	b.n	8018e92 <__sflush_r+0xf2>
 8018e5a:	690f      	ldr	r7, [r1, #16]
 8018e5c:	2f00      	cmp	r7, #0
 8018e5e:	d0f6      	beq.n	8018e4e <__sflush_r+0xae>
 8018e60:	0793      	lsls	r3, r2, #30
 8018e62:	680e      	ldr	r6, [r1, #0]
 8018e64:	bf08      	it	eq
 8018e66:	694b      	ldreq	r3, [r1, #20]
 8018e68:	600f      	str	r7, [r1, #0]
 8018e6a:	bf18      	it	ne
 8018e6c:	2300      	movne	r3, #0
 8018e6e:	eba6 0807 	sub.w	r8, r6, r7
 8018e72:	608b      	str	r3, [r1, #8]
 8018e74:	f1b8 0f00 	cmp.w	r8, #0
 8018e78:	dde9      	ble.n	8018e4e <__sflush_r+0xae>
 8018e7a:	6a21      	ldr	r1, [r4, #32]
 8018e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018e7e:	4643      	mov	r3, r8
 8018e80:	463a      	mov	r2, r7
 8018e82:	4628      	mov	r0, r5
 8018e84:	47b0      	blx	r6
 8018e86:	2800      	cmp	r0, #0
 8018e88:	dc08      	bgt.n	8018e9c <__sflush_r+0xfc>
 8018e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e92:	81a3      	strh	r3, [r4, #12]
 8018e94:	f04f 30ff 	mov.w	r0, #4294967295
 8018e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9c:	4407      	add	r7, r0
 8018e9e:	eba8 0800 	sub.w	r8, r8, r0
 8018ea2:	e7e7      	b.n	8018e74 <__sflush_r+0xd4>
 8018ea4:	20400001 	.word	0x20400001

08018ea8 <_fflush_r>:
 8018ea8:	b538      	push	{r3, r4, r5, lr}
 8018eaa:	690b      	ldr	r3, [r1, #16]
 8018eac:	4605      	mov	r5, r0
 8018eae:	460c      	mov	r4, r1
 8018eb0:	b913      	cbnz	r3, 8018eb8 <_fflush_r+0x10>
 8018eb2:	2500      	movs	r5, #0
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	bd38      	pop	{r3, r4, r5, pc}
 8018eb8:	b118      	cbz	r0, 8018ec2 <_fflush_r+0x1a>
 8018eba:	6a03      	ldr	r3, [r0, #32]
 8018ebc:	b90b      	cbnz	r3, 8018ec2 <_fflush_r+0x1a>
 8018ebe:	f7fe fdc3 	bl	8017a48 <__sinit>
 8018ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d0f3      	beq.n	8018eb2 <_fflush_r+0xa>
 8018eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018ecc:	07d0      	lsls	r0, r2, #31
 8018ece:	d404      	bmi.n	8018eda <_fflush_r+0x32>
 8018ed0:	0599      	lsls	r1, r3, #22
 8018ed2:	d402      	bmi.n	8018eda <_fflush_r+0x32>
 8018ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ed6:	f7fe ffc4 	bl	8017e62 <__retarget_lock_acquire_recursive>
 8018eda:	4628      	mov	r0, r5
 8018edc:	4621      	mov	r1, r4
 8018ede:	f7ff ff5f 	bl	8018da0 <__sflush_r>
 8018ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018ee4:	07da      	lsls	r2, r3, #31
 8018ee6:	4605      	mov	r5, r0
 8018ee8:	d4e4      	bmi.n	8018eb4 <_fflush_r+0xc>
 8018eea:	89a3      	ldrh	r3, [r4, #12]
 8018eec:	059b      	lsls	r3, r3, #22
 8018eee:	d4e1      	bmi.n	8018eb4 <_fflush_r+0xc>
 8018ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ef2:	f7fe ffb7 	bl	8017e64 <__retarget_lock_release_recursive>
 8018ef6:	e7dd      	b.n	8018eb4 <_fflush_r+0xc>

08018ef8 <__sccl>:
 8018ef8:	b570      	push	{r4, r5, r6, lr}
 8018efa:	780b      	ldrb	r3, [r1, #0]
 8018efc:	4604      	mov	r4, r0
 8018efe:	2b5e      	cmp	r3, #94	@ 0x5e
 8018f00:	bf0b      	itete	eq
 8018f02:	784b      	ldrbeq	r3, [r1, #1]
 8018f04:	1c4a      	addne	r2, r1, #1
 8018f06:	1c8a      	addeq	r2, r1, #2
 8018f08:	2100      	movne	r1, #0
 8018f0a:	bf08      	it	eq
 8018f0c:	2101      	moveq	r1, #1
 8018f0e:	3801      	subs	r0, #1
 8018f10:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018f14:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018f18:	42a8      	cmp	r0, r5
 8018f1a:	d1fb      	bne.n	8018f14 <__sccl+0x1c>
 8018f1c:	b90b      	cbnz	r3, 8018f22 <__sccl+0x2a>
 8018f1e:	1e50      	subs	r0, r2, #1
 8018f20:	bd70      	pop	{r4, r5, r6, pc}
 8018f22:	f081 0101 	eor.w	r1, r1, #1
 8018f26:	54e1      	strb	r1, [r4, r3]
 8018f28:	4610      	mov	r0, r2
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018f30:	2d2d      	cmp	r5, #45	@ 0x2d
 8018f32:	d005      	beq.n	8018f40 <__sccl+0x48>
 8018f34:	2d5d      	cmp	r5, #93	@ 0x5d
 8018f36:	d016      	beq.n	8018f66 <__sccl+0x6e>
 8018f38:	2d00      	cmp	r5, #0
 8018f3a:	d0f1      	beq.n	8018f20 <__sccl+0x28>
 8018f3c:	462b      	mov	r3, r5
 8018f3e:	e7f2      	b.n	8018f26 <__sccl+0x2e>
 8018f40:	7846      	ldrb	r6, [r0, #1]
 8018f42:	2e5d      	cmp	r6, #93	@ 0x5d
 8018f44:	d0fa      	beq.n	8018f3c <__sccl+0x44>
 8018f46:	42b3      	cmp	r3, r6
 8018f48:	dcf8      	bgt.n	8018f3c <__sccl+0x44>
 8018f4a:	3002      	adds	r0, #2
 8018f4c:	461a      	mov	r2, r3
 8018f4e:	3201      	adds	r2, #1
 8018f50:	4296      	cmp	r6, r2
 8018f52:	54a1      	strb	r1, [r4, r2]
 8018f54:	dcfb      	bgt.n	8018f4e <__sccl+0x56>
 8018f56:	1af2      	subs	r2, r6, r3
 8018f58:	3a01      	subs	r2, #1
 8018f5a:	1c5d      	adds	r5, r3, #1
 8018f5c:	42b3      	cmp	r3, r6
 8018f5e:	bfa8      	it	ge
 8018f60:	2200      	movge	r2, #0
 8018f62:	18ab      	adds	r3, r5, r2
 8018f64:	e7e1      	b.n	8018f2a <__sccl+0x32>
 8018f66:	4610      	mov	r0, r2
 8018f68:	e7da      	b.n	8018f20 <__sccl+0x28>

08018f6a <__submore>:
 8018f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f6e:	460c      	mov	r4, r1
 8018f70:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f76:	4299      	cmp	r1, r3
 8018f78:	d11d      	bne.n	8018fb6 <__submore+0x4c>
 8018f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018f7e:	f7fe fc4b 	bl	8017818 <_malloc_r>
 8018f82:	b918      	cbnz	r0, 8018f8c <__submore+0x22>
 8018f84:	f04f 30ff 	mov.w	r0, #4294967295
 8018f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018f90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018f92:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018f96:	6360      	str	r0, [r4, #52]	@ 0x34
 8018f98:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018f9c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018fa0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018fa4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018fa8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018fac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018fb0:	6020      	str	r0, [r4, #0]
 8018fb2:	2000      	movs	r0, #0
 8018fb4:	e7e8      	b.n	8018f88 <__submore+0x1e>
 8018fb6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018fb8:	0077      	lsls	r7, r6, #1
 8018fba:	463a      	mov	r2, r7
 8018fbc:	f000 f8be 	bl	801913c <_realloc_r>
 8018fc0:	4605      	mov	r5, r0
 8018fc2:	2800      	cmp	r0, #0
 8018fc4:	d0de      	beq.n	8018f84 <__submore+0x1a>
 8018fc6:	eb00 0806 	add.w	r8, r0, r6
 8018fca:	4601      	mov	r1, r0
 8018fcc:	4632      	mov	r2, r6
 8018fce:	4640      	mov	r0, r8
 8018fd0:	f7fe ff49 	bl	8017e66 <memcpy>
 8018fd4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018fd8:	f8c4 8000 	str.w	r8, [r4]
 8018fdc:	e7e9      	b.n	8018fb2 <__submore+0x48>

08018fde <__swbuf_r>:
 8018fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe0:	460e      	mov	r6, r1
 8018fe2:	4614      	mov	r4, r2
 8018fe4:	4605      	mov	r5, r0
 8018fe6:	b118      	cbz	r0, 8018ff0 <__swbuf_r+0x12>
 8018fe8:	6a03      	ldr	r3, [r0, #32]
 8018fea:	b90b      	cbnz	r3, 8018ff0 <__swbuf_r+0x12>
 8018fec:	f7fe fd2c 	bl	8017a48 <__sinit>
 8018ff0:	69a3      	ldr	r3, [r4, #24]
 8018ff2:	60a3      	str	r3, [r4, #8]
 8018ff4:	89a3      	ldrh	r3, [r4, #12]
 8018ff6:	071a      	lsls	r2, r3, #28
 8018ff8:	d501      	bpl.n	8018ffe <__swbuf_r+0x20>
 8018ffa:	6923      	ldr	r3, [r4, #16]
 8018ffc:	b943      	cbnz	r3, 8019010 <__swbuf_r+0x32>
 8018ffe:	4621      	mov	r1, r4
 8019000:	4628      	mov	r0, r5
 8019002:	f000 f82b 	bl	801905c <__swsetup_r>
 8019006:	b118      	cbz	r0, 8019010 <__swbuf_r+0x32>
 8019008:	f04f 37ff 	mov.w	r7, #4294967295
 801900c:	4638      	mov	r0, r7
 801900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	6922      	ldr	r2, [r4, #16]
 8019014:	1a98      	subs	r0, r3, r2
 8019016:	6963      	ldr	r3, [r4, #20]
 8019018:	b2f6      	uxtb	r6, r6
 801901a:	4283      	cmp	r3, r0
 801901c:	4637      	mov	r7, r6
 801901e:	dc05      	bgt.n	801902c <__swbuf_r+0x4e>
 8019020:	4621      	mov	r1, r4
 8019022:	4628      	mov	r0, r5
 8019024:	f7ff ff40 	bl	8018ea8 <_fflush_r>
 8019028:	2800      	cmp	r0, #0
 801902a:	d1ed      	bne.n	8019008 <__swbuf_r+0x2a>
 801902c:	68a3      	ldr	r3, [r4, #8]
 801902e:	3b01      	subs	r3, #1
 8019030:	60a3      	str	r3, [r4, #8]
 8019032:	6823      	ldr	r3, [r4, #0]
 8019034:	1c5a      	adds	r2, r3, #1
 8019036:	6022      	str	r2, [r4, #0]
 8019038:	701e      	strb	r6, [r3, #0]
 801903a:	6962      	ldr	r2, [r4, #20]
 801903c:	1c43      	adds	r3, r0, #1
 801903e:	429a      	cmp	r2, r3
 8019040:	d004      	beq.n	801904c <__swbuf_r+0x6e>
 8019042:	89a3      	ldrh	r3, [r4, #12]
 8019044:	07db      	lsls	r3, r3, #31
 8019046:	d5e1      	bpl.n	801900c <__swbuf_r+0x2e>
 8019048:	2e0a      	cmp	r6, #10
 801904a:	d1df      	bne.n	801900c <__swbuf_r+0x2e>
 801904c:	4621      	mov	r1, r4
 801904e:	4628      	mov	r0, r5
 8019050:	f7ff ff2a 	bl	8018ea8 <_fflush_r>
 8019054:	2800      	cmp	r0, #0
 8019056:	d0d9      	beq.n	801900c <__swbuf_r+0x2e>
 8019058:	e7d6      	b.n	8019008 <__swbuf_r+0x2a>
	...

0801905c <__swsetup_r>:
 801905c:	b538      	push	{r3, r4, r5, lr}
 801905e:	4b29      	ldr	r3, [pc, #164]	@ (8019104 <__swsetup_r+0xa8>)
 8019060:	4605      	mov	r5, r0
 8019062:	6818      	ldr	r0, [r3, #0]
 8019064:	460c      	mov	r4, r1
 8019066:	b118      	cbz	r0, 8019070 <__swsetup_r+0x14>
 8019068:	6a03      	ldr	r3, [r0, #32]
 801906a:	b90b      	cbnz	r3, 8019070 <__swsetup_r+0x14>
 801906c:	f7fe fcec 	bl	8017a48 <__sinit>
 8019070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019074:	0719      	lsls	r1, r3, #28
 8019076:	d422      	bmi.n	80190be <__swsetup_r+0x62>
 8019078:	06da      	lsls	r2, r3, #27
 801907a:	d407      	bmi.n	801908c <__swsetup_r+0x30>
 801907c:	2209      	movs	r2, #9
 801907e:	602a      	str	r2, [r5, #0]
 8019080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019084:	81a3      	strh	r3, [r4, #12]
 8019086:	f04f 30ff 	mov.w	r0, #4294967295
 801908a:	e033      	b.n	80190f4 <__swsetup_r+0x98>
 801908c:	0758      	lsls	r0, r3, #29
 801908e:	d512      	bpl.n	80190b6 <__swsetup_r+0x5a>
 8019090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019092:	b141      	cbz	r1, 80190a6 <__swsetup_r+0x4a>
 8019094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019098:	4299      	cmp	r1, r3
 801909a:	d002      	beq.n	80190a2 <__swsetup_r+0x46>
 801909c:	4628      	mov	r0, r5
 801909e:	f7fe fef1 	bl	8017e84 <_free_r>
 80190a2:	2300      	movs	r3, #0
 80190a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80190a6:	89a3      	ldrh	r3, [r4, #12]
 80190a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80190ac:	81a3      	strh	r3, [r4, #12]
 80190ae:	2300      	movs	r3, #0
 80190b0:	6063      	str	r3, [r4, #4]
 80190b2:	6923      	ldr	r3, [r4, #16]
 80190b4:	6023      	str	r3, [r4, #0]
 80190b6:	89a3      	ldrh	r3, [r4, #12]
 80190b8:	f043 0308 	orr.w	r3, r3, #8
 80190bc:	81a3      	strh	r3, [r4, #12]
 80190be:	6923      	ldr	r3, [r4, #16]
 80190c0:	b94b      	cbnz	r3, 80190d6 <__swsetup_r+0x7a>
 80190c2:	89a3      	ldrh	r3, [r4, #12]
 80190c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80190c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80190cc:	d003      	beq.n	80190d6 <__swsetup_r+0x7a>
 80190ce:	4621      	mov	r1, r4
 80190d0:	4628      	mov	r0, r5
 80190d2:	f000 f973 	bl	80193bc <__smakebuf_r>
 80190d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190da:	f013 0201 	ands.w	r2, r3, #1
 80190de:	d00a      	beq.n	80190f6 <__swsetup_r+0x9a>
 80190e0:	2200      	movs	r2, #0
 80190e2:	60a2      	str	r2, [r4, #8]
 80190e4:	6962      	ldr	r2, [r4, #20]
 80190e6:	4252      	negs	r2, r2
 80190e8:	61a2      	str	r2, [r4, #24]
 80190ea:	6922      	ldr	r2, [r4, #16]
 80190ec:	b942      	cbnz	r2, 8019100 <__swsetup_r+0xa4>
 80190ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80190f2:	d1c5      	bne.n	8019080 <__swsetup_r+0x24>
 80190f4:	bd38      	pop	{r3, r4, r5, pc}
 80190f6:	0799      	lsls	r1, r3, #30
 80190f8:	bf58      	it	pl
 80190fa:	6962      	ldrpl	r2, [r4, #20]
 80190fc:	60a2      	str	r2, [r4, #8]
 80190fe:	e7f4      	b.n	80190ea <__swsetup_r+0x8e>
 8019100:	2000      	movs	r0, #0
 8019102:	e7f7      	b.n	80190f4 <__swsetup_r+0x98>
 8019104:	20000088 	.word	0x20000088

08019108 <memmove>:
 8019108:	4288      	cmp	r0, r1
 801910a:	b510      	push	{r4, lr}
 801910c:	eb01 0402 	add.w	r4, r1, r2
 8019110:	d902      	bls.n	8019118 <memmove+0x10>
 8019112:	4284      	cmp	r4, r0
 8019114:	4623      	mov	r3, r4
 8019116:	d807      	bhi.n	8019128 <memmove+0x20>
 8019118:	1e43      	subs	r3, r0, #1
 801911a:	42a1      	cmp	r1, r4
 801911c:	d008      	beq.n	8019130 <memmove+0x28>
 801911e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019126:	e7f8      	b.n	801911a <memmove+0x12>
 8019128:	4402      	add	r2, r0
 801912a:	4601      	mov	r1, r0
 801912c:	428a      	cmp	r2, r1
 801912e:	d100      	bne.n	8019132 <memmove+0x2a>
 8019130:	bd10      	pop	{r4, pc}
 8019132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801913a:	e7f7      	b.n	801912c <memmove+0x24>

0801913c <_realloc_r>:
 801913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019140:	4607      	mov	r7, r0
 8019142:	4614      	mov	r4, r2
 8019144:	460d      	mov	r5, r1
 8019146:	b921      	cbnz	r1, 8019152 <_realloc_r+0x16>
 8019148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801914c:	4611      	mov	r1, r2
 801914e:	f7fe bb63 	b.w	8017818 <_malloc_r>
 8019152:	b92a      	cbnz	r2, 8019160 <_realloc_r+0x24>
 8019154:	f7fe fe96 	bl	8017e84 <_free_r>
 8019158:	4625      	mov	r5, r4
 801915a:	4628      	mov	r0, r5
 801915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019160:	f000 f98a 	bl	8019478 <_malloc_usable_size_r>
 8019164:	4284      	cmp	r4, r0
 8019166:	4606      	mov	r6, r0
 8019168:	d802      	bhi.n	8019170 <_realloc_r+0x34>
 801916a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801916e:	d8f4      	bhi.n	801915a <_realloc_r+0x1e>
 8019170:	4621      	mov	r1, r4
 8019172:	4638      	mov	r0, r7
 8019174:	f7fe fb50 	bl	8017818 <_malloc_r>
 8019178:	4680      	mov	r8, r0
 801917a:	b908      	cbnz	r0, 8019180 <_realloc_r+0x44>
 801917c:	4645      	mov	r5, r8
 801917e:	e7ec      	b.n	801915a <_realloc_r+0x1e>
 8019180:	42b4      	cmp	r4, r6
 8019182:	4622      	mov	r2, r4
 8019184:	4629      	mov	r1, r5
 8019186:	bf28      	it	cs
 8019188:	4632      	movcs	r2, r6
 801918a:	f7fe fe6c 	bl	8017e66 <memcpy>
 801918e:	4629      	mov	r1, r5
 8019190:	4638      	mov	r0, r7
 8019192:	f7fe fe77 	bl	8017e84 <_free_r>
 8019196:	e7f1      	b.n	801917c <_realloc_r+0x40>

08019198 <_strtol_l.isra.0>:
 8019198:	2b24      	cmp	r3, #36	@ 0x24
 801919a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801919e:	4686      	mov	lr, r0
 80191a0:	4690      	mov	r8, r2
 80191a2:	d801      	bhi.n	80191a8 <_strtol_l.isra.0+0x10>
 80191a4:	2b01      	cmp	r3, #1
 80191a6:	d106      	bne.n	80191b6 <_strtol_l.isra.0+0x1e>
 80191a8:	f7fe fe30 	bl	8017e0c <__errno>
 80191ac:	2316      	movs	r3, #22
 80191ae:	6003      	str	r3, [r0, #0]
 80191b0:	2000      	movs	r0, #0
 80191b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191b6:	4834      	ldr	r0, [pc, #208]	@ (8019288 <_strtol_l.isra.0+0xf0>)
 80191b8:	460d      	mov	r5, r1
 80191ba:	462a      	mov	r2, r5
 80191bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191c0:	5d06      	ldrb	r6, [r0, r4]
 80191c2:	f016 0608 	ands.w	r6, r6, #8
 80191c6:	d1f8      	bne.n	80191ba <_strtol_l.isra.0+0x22>
 80191c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80191ca:	d110      	bne.n	80191ee <_strtol_l.isra.0+0x56>
 80191cc:	782c      	ldrb	r4, [r5, #0]
 80191ce:	2601      	movs	r6, #1
 80191d0:	1c95      	adds	r5, r2, #2
 80191d2:	f033 0210 	bics.w	r2, r3, #16
 80191d6:	d115      	bne.n	8019204 <_strtol_l.isra.0+0x6c>
 80191d8:	2c30      	cmp	r4, #48	@ 0x30
 80191da:	d10d      	bne.n	80191f8 <_strtol_l.isra.0+0x60>
 80191dc:	782a      	ldrb	r2, [r5, #0]
 80191de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80191e2:	2a58      	cmp	r2, #88	@ 0x58
 80191e4:	d108      	bne.n	80191f8 <_strtol_l.isra.0+0x60>
 80191e6:	786c      	ldrb	r4, [r5, #1]
 80191e8:	3502      	adds	r5, #2
 80191ea:	2310      	movs	r3, #16
 80191ec:	e00a      	b.n	8019204 <_strtol_l.isra.0+0x6c>
 80191ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80191f0:	bf04      	itt	eq
 80191f2:	782c      	ldrbeq	r4, [r5, #0]
 80191f4:	1c95      	addeq	r5, r2, #2
 80191f6:	e7ec      	b.n	80191d2 <_strtol_l.isra.0+0x3a>
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d1f6      	bne.n	80191ea <_strtol_l.isra.0+0x52>
 80191fc:	2c30      	cmp	r4, #48	@ 0x30
 80191fe:	bf14      	ite	ne
 8019200:	230a      	movne	r3, #10
 8019202:	2308      	moveq	r3, #8
 8019204:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019208:	f10c 3cff 	add.w	ip, ip, #4294967295
 801920c:	2200      	movs	r2, #0
 801920e:	fbbc f9f3 	udiv	r9, ip, r3
 8019212:	4610      	mov	r0, r2
 8019214:	fb03 ca19 	mls	sl, r3, r9, ip
 8019218:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801921c:	2f09      	cmp	r7, #9
 801921e:	d80f      	bhi.n	8019240 <_strtol_l.isra.0+0xa8>
 8019220:	463c      	mov	r4, r7
 8019222:	42a3      	cmp	r3, r4
 8019224:	dd1b      	ble.n	801925e <_strtol_l.isra.0+0xc6>
 8019226:	1c57      	adds	r7, r2, #1
 8019228:	d007      	beq.n	801923a <_strtol_l.isra.0+0xa2>
 801922a:	4581      	cmp	r9, r0
 801922c:	d314      	bcc.n	8019258 <_strtol_l.isra.0+0xc0>
 801922e:	d101      	bne.n	8019234 <_strtol_l.isra.0+0x9c>
 8019230:	45a2      	cmp	sl, r4
 8019232:	db11      	blt.n	8019258 <_strtol_l.isra.0+0xc0>
 8019234:	fb00 4003 	mla	r0, r0, r3, r4
 8019238:	2201      	movs	r2, #1
 801923a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801923e:	e7eb      	b.n	8019218 <_strtol_l.isra.0+0x80>
 8019240:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019244:	2f19      	cmp	r7, #25
 8019246:	d801      	bhi.n	801924c <_strtol_l.isra.0+0xb4>
 8019248:	3c37      	subs	r4, #55	@ 0x37
 801924a:	e7ea      	b.n	8019222 <_strtol_l.isra.0+0x8a>
 801924c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019250:	2f19      	cmp	r7, #25
 8019252:	d804      	bhi.n	801925e <_strtol_l.isra.0+0xc6>
 8019254:	3c57      	subs	r4, #87	@ 0x57
 8019256:	e7e4      	b.n	8019222 <_strtol_l.isra.0+0x8a>
 8019258:	f04f 32ff 	mov.w	r2, #4294967295
 801925c:	e7ed      	b.n	801923a <_strtol_l.isra.0+0xa2>
 801925e:	1c53      	adds	r3, r2, #1
 8019260:	d108      	bne.n	8019274 <_strtol_l.isra.0+0xdc>
 8019262:	2322      	movs	r3, #34	@ 0x22
 8019264:	f8ce 3000 	str.w	r3, [lr]
 8019268:	4660      	mov	r0, ip
 801926a:	f1b8 0f00 	cmp.w	r8, #0
 801926e:	d0a0      	beq.n	80191b2 <_strtol_l.isra.0+0x1a>
 8019270:	1e69      	subs	r1, r5, #1
 8019272:	e006      	b.n	8019282 <_strtol_l.isra.0+0xea>
 8019274:	b106      	cbz	r6, 8019278 <_strtol_l.isra.0+0xe0>
 8019276:	4240      	negs	r0, r0
 8019278:	f1b8 0f00 	cmp.w	r8, #0
 801927c:	d099      	beq.n	80191b2 <_strtol_l.isra.0+0x1a>
 801927e:	2a00      	cmp	r2, #0
 8019280:	d1f6      	bne.n	8019270 <_strtol_l.isra.0+0xd8>
 8019282:	f8c8 1000 	str.w	r1, [r8]
 8019286:	e794      	b.n	80191b2 <_strtol_l.isra.0+0x1a>
 8019288:	0801cb15 	.word	0x0801cb15

0801928c <_strtol_r>:
 801928c:	f7ff bf84 	b.w	8019198 <_strtol_l.isra.0>

08019290 <_strtoul_l.isra.0>:
 8019290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019294:	4e34      	ldr	r6, [pc, #208]	@ (8019368 <_strtoul_l.isra.0+0xd8>)
 8019296:	4686      	mov	lr, r0
 8019298:	460d      	mov	r5, r1
 801929a:	4628      	mov	r0, r5
 801929c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80192a0:	5d37      	ldrb	r7, [r6, r4]
 80192a2:	f017 0708 	ands.w	r7, r7, #8
 80192a6:	d1f8      	bne.n	801929a <_strtoul_l.isra.0+0xa>
 80192a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80192aa:	d110      	bne.n	80192ce <_strtoul_l.isra.0+0x3e>
 80192ac:	782c      	ldrb	r4, [r5, #0]
 80192ae:	2701      	movs	r7, #1
 80192b0:	1c85      	adds	r5, r0, #2
 80192b2:	f033 0010 	bics.w	r0, r3, #16
 80192b6:	d115      	bne.n	80192e4 <_strtoul_l.isra.0+0x54>
 80192b8:	2c30      	cmp	r4, #48	@ 0x30
 80192ba:	d10d      	bne.n	80192d8 <_strtoul_l.isra.0+0x48>
 80192bc:	7828      	ldrb	r0, [r5, #0]
 80192be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80192c2:	2858      	cmp	r0, #88	@ 0x58
 80192c4:	d108      	bne.n	80192d8 <_strtoul_l.isra.0+0x48>
 80192c6:	786c      	ldrb	r4, [r5, #1]
 80192c8:	3502      	adds	r5, #2
 80192ca:	2310      	movs	r3, #16
 80192cc:	e00a      	b.n	80192e4 <_strtoul_l.isra.0+0x54>
 80192ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80192d0:	bf04      	itt	eq
 80192d2:	782c      	ldrbeq	r4, [r5, #0]
 80192d4:	1c85      	addeq	r5, r0, #2
 80192d6:	e7ec      	b.n	80192b2 <_strtoul_l.isra.0+0x22>
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d1f6      	bne.n	80192ca <_strtoul_l.isra.0+0x3a>
 80192dc:	2c30      	cmp	r4, #48	@ 0x30
 80192de:	bf14      	ite	ne
 80192e0:	230a      	movne	r3, #10
 80192e2:	2308      	moveq	r3, #8
 80192e4:	f04f 38ff 	mov.w	r8, #4294967295
 80192e8:	2600      	movs	r6, #0
 80192ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80192ee:	fb03 f908 	mul.w	r9, r3, r8
 80192f2:	ea6f 0909 	mvn.w	r9, r9
 80192f6:	4630      	mov	r0, r6
 80192f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80192fc:	f1bc 0f09 	cmp.w	ip, #9
 8019300:	d810      	bhi.n	8019324 <_strtoul_l.isra.0+0x94>
 8019302:	4664      	mov	r4, ip
 8019304:	42a3      	cmp	r3, r4
 8019306:	dd1e      	ble.n	8019346 <_strtoul_l.isra.0+0xb6>
 8019308:	f1b6 3fff 	cmp.w	r6, #4294967295
 801930c:	d007      	beq.n	801931e <_strtoul_l.isra.0+0x8e>
 801930e:	4580      	cmp	r8, r0
 8019310:	d316      	bcc.n	8019340 <_strtoul_l.isra.0+0xb0>
 8019312:	d101      	bne.n	8019318 <_strtoul_l.isra.0+0x88>
 8019314:	45a1      	cmp	r9, r4
 8019316:	db13      	blt.n	8019340 <_strtoul_l.isra.0+0xb0>
 8019318:	fb00 4003 	mla	r0, r0, r3, r4
 801931c:	2601      	movs	r6, #1
 801931e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019322:	e7e9      	b.n	80192f8 <_strtoul_l.isra.0+0x68>
 8019324:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019328:	f1bc 0f19 	cmp.w	ip, #25
 801932c:	d801      	bhi.n	8019332 <_strtoul_l.isra.0+0xa2>
 801932e:	3c37      	subs	r4, #55	@ 0x37
 8019330:	e7e8      	b.n	8019304 <_strtoul_l.isra.0+0x74>
 8019332:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019336:	f1bc 0f19 	cmp.w	ip, #25
 801933a:	d804      	bhi.n	8019346 <_strtoul_l.isra.0+0xb6>
 801933c:	3c57      	subs	r4, #87	@ 0x57
 801933e:	e7e1      	b.n	8019304 <_strtoul_l.isra.0+0x74>
 8019340:	f04f 36ff 	mov.w	r6, #4294967295
 8019344:	e7eb      	b.n	801931e <_strtoul_l.isra.0+0x8e>
 8019346:	1c73      	adds	r3, r6, #1
 8019348:	d106      	bne.n	8019358 <_strtoul_l.isra.0+0xc8>
 801934a:	2322      	movs	r3, #34	@ 0x22
 801934c:	f8ce 3000 	str.w	r3, [lr]
 8019350:	4630      	mov	r0, r6
 8019352:	b932      	cbnz	r2, 8019362 <_strtoul_l.isra.0+0xd2>
 8019354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019358:	b107      	cbz	r7, 801935c <_strtoul_l.isra.0+0xcc>
 801935a:	4240      	negs	r0, r0
 801935c:	2a00      	cmp	r2, #0
 801935e:	d0f9      	beq.n	8019354 <_strtoul_l.isra.0+0xc4>
 8019360:	b106      	cbz	r6, 8019364 <_strtoul_l.isra.0+0xd4>
 8019362:	1e69      	subs	r1, r5, #1
 8019364:	6011      	str	r1, [r2, #0]
 8019366:	e7f5      	b.n	8019354 <_strtoul_l.isra.0+0xc4>
 8019368:	0801cb15 	.word	0x0801cb15

0801936c <_strtoul_r>:
 801936c:	f7ff bf90 	b.w	8019290 <_strtoul_l.isra.0>

08019370 <__swhatbuf_r>:
 8019370:	b570      	push	{r4, r5, r6, lr}
 8019372:	460c      	mov	r4, r1
 8019374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019378:	2900      	cmp	r1, #0
 801937a:	b096      	sub	sp, #88	@ 0x58
 801937c:	4615      	mov	r5, r2
 801937e:	461e      	mov	r6, r3
 8019380:	da0d      	bge.n	801939e <__swhatbuf_r+0x2e>
 8019382:	89a3      	ldrh	r3, [r4, #12]
 8019384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019388:	f04f 0100 	mov.w	r1, #0
 801938c:	bf14      	ite	ne
 801938e:	2340      	movne	r3, #64	@ 0x40
 8019390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019394:	2000      	movs	r0, #0
 8019396:	6031      	str	r1, [r6, #0]
 8019398:	602b      	str	r3, [r5, #0]
 801939a:	b016      	add	sp, #88	@ 0x58
 801939c:	bd70      	pop	{r4, r5, r6, pc}
 801939e:	466a      	mov	r2, sp
 80193a0:	f000 f848 	bl	8019434 <_fstat_r>
 80193a4:	2800      	cmp	r0, #0
 80193a6:	dbec      	blt.n	8019382 <__swhatbuf_r+0x12>
 80193a8:	9901      	ldr	r1, [sp, #4]
 80193aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80193ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80193b2:	4259      	negs	r1, r3
 80193b4:	4159      	adcs	r1, r3
 80193b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80193ba:	e7eb      	b.n	8019394 <__swhatbuf_r+0x24>

080193bc <__smakebuf_r>:
 80193bc:	898b      	ldrh	r3, [r1, #12]
 80193be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193c0:	079d      	lsls	r5, r3, #30
 80193c2:	4606      	mov	r6, r0
 80193c4:	460c      	mov	r4, r1
 80193c6:	d507      	bpl.n	80193d8 <__smakebuf_r+0x1c>
 80193c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80193cc:	6023      	str	r3, [r4, #0]
 80193ce:	6123      	str	r3, [r4, #16]
 80193d0:	2301      	movs	r3, #1
 80193d2:	6163      	str	r3, [r4, #20]
 80193d4:	b003      	add	sp, #12
 80193d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193d8:	ab01      	add	r3, sp, #4
 80193da:	466a      	mov	r2, sp
 80193dc:	f7ff ffc8 	bl	8019370 <__swhatbuf_r>
 80193e0:	9f00      	ldr	r7, [sp, #0]
 80193e2:	4605      	mov	r5, r0
 80193e4:	4639      	mov	r1, r7
 80193e6:	4630      	mov	r0, r6
 80193e8:	f7fe fa16 	bl	8017818 <_malloc_r>
 80193ec:	b948      	cbnz	r0, 8019402 <__smakebuf_r+0x46>
 80193ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193f2:	059a      	lsls	r2, r3, #22
 80193f4:	d4ee      	bmi.n	80193d4 <__smakebuf_r+0x18>
 80193f6:	f023 0303 	bic.w	r3, r3, #3
 80193fa:	f043 0302 	orr.w	r3, r3, #2
 80193fe:	81a3      	strh	r3, [r4, #12]
 8019400:	e7e2      	b.n	80193c8 <__smakebuf_r+0xc>
 8019402:	89a3      	ldrh	r3, [r4, #12]
 8019404:	6020      	str	r0, [r4, #0]
 8019406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801940a:	81a3      	strh	r3, [r4, #12]
 801940c:	9b01      	ldr	r3, [sp, #4]
 801940e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019412:	b15b      	cbz	r3, 801942c <__smakebuf_r+0x70>
 8019414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019418:	4630      	mov	r0, r6
 801941a:	f000 f81d 	bl	8019458 <_isatty_r>
 801941e:	b128      	cbz	r0, 801942c <__smakebuf_r+0x70>
 8019420:	89a3      	ldrh	r3, [r4, #12]
 8019422:	f023 0303 	bic.w	r3, r3, #3
 8019426:	f043 0301 	orr.w	r3, r3, #1
 801942a:	81a3      	strh	r3, [r4, #12]
 801942c:	89a3      	ldrh	r3, [r4, #12]
 801942e:	431d      	orrs	r5, r3
 8019430:	81a5      	strh	r5, [r4, #12]
 8019432:	e7cf      	b.n	80193d4 <__smakebuf_r+0x18>

08019434 <_fstat_r>:
 8019434:	b538      	push	{r3, r4, r5, lr}
 8019436:	4d07      	ldr	r5, [pc, #28]	@ (8019454 <_fstat_r+0x20>)
 8019438:	2300      	movs	r3, #0
 801943a:	4604      	mov	r4, r0
 801943c:	4608      	mov	r0, r1
 801943e:	4611      	mov	r1, r2
 8019440:	602b      	str	r3, [r5, #0]
 8019442:	f7ec f88a 	bl	800555a <_fstat>
 8019446:	1c43      	adds	r3, r0, #1
 8019448:	d102      	bne.n	8019450 <_fstat_r+0x1c>
 801944a:	682b      	ldr	r3, [r5, #0]
 801944c:	b103      	cbz	r3, 8019450 <_fstat_r+0x1c>
 801944e:	6023      	str	r3, [r4, #0]
 8019450:	bd38      	pop	{r3, r4, r5, pc}
 8019452:	bf00      	nop
 8019454:	200122c8 	.word	0x200122c8

08019458 <_isatty_r>:
 8019458:	b538      	push	{r3, r4, r5, lr}
 801945a:	4d06      	ldr	r5, [pc, #24]	@ (8019474 <_isatty_r+0x1c>)
 801945c:	2300      	movs	r3, #0
 801945e:	4604      	mov	r4, r0
 8019460:	4608      	mov	r0, r1
 8019462:	602b      	str	r3, [r5, #0]
 8019464:	f7ec f889 	bl	800557a <_isatty>
 8019468:	1c43      	adds	r3, r0, #1
 801946a:	d102      	bne.n	8019472 <_isatty_r+0x1a>
 801946c:	682b      	ldr	r3, [r5, #0]
 801946e:	b103      	cbz	r3, 8019472 <_isatty_r+0x1a>
 8019470:	6023      	str	r3, [r4, #0]
 8019472:	bd38      	pop	{r3, r4, r5, pc}
 8019474:	200122c8 	.word	0x200122c8

08019478 <_malloc_usable_size_r>:
 8019478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801947c:	1f18      	subs	r0, r3, #4
 801947e:	2b00      	cmp	r3, #0
 8019480:	bfbc      	itt	lt
 8019482:	580b      	ldrlt	r3, [r1, r0]
 8019484:	18c0      	addlt	r0, r0, r3
 8019486:	4770      	bx	lr

08019488 <_init>:
 8019488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801948a:	bf00      	nop
 801948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801948e:	bc08      	pop	{r3}
 8019490:	469e      	mov	lr, r3
 8019492:	4770      	bx	lr

08019494 <_fini>:
 8019494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019496:	bf00      	nop
 8019498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801949a:	bc08      	pop	{r3}
 801949c:	469e      	mov	lr, r3
 801949e:	4770      	bx	lr
