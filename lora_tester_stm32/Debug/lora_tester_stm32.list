
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d00  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000359c  08017ed0  08017ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b46c  0801b46c  0001d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b46c  0801b46c  0001c46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b474  0801b474  0001d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b474  0801b474  0001c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b478  0801b478  0001c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0801b47c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  0801b54c  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0801b5ec  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011e80  20000210  0801b68c  0001d210  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20012090  0801b68c  0001e090  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042a54  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009107  00000000  00000000  0005fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037f0  00000000  00000000  00068da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002ba0  00000000  00000000  0006c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037da4  00000000  00000000  0006f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b81f  00000000  00000000  000a6ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e12f  00000000  00000000  000f26f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00220822  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f71c  00000000  00000000  00220868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0022ff84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017eb8 	.word	0x08017eb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08017eb8 	.word	0x08017eb8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fd10 	bl	8005050 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f016 fcf2 	bl	8017028 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f016 fc02 	bl	8016e78 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fce0 	bl	8005050 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 fdf9 	bl	8005288 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fcd2 	bl	8005050 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fcca 	bl	8005050 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fcc5 	bl	8005050 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08017ed0 	.word	0x08017ed0
 80006d4:	08017eec 	.word	0x08017eec
 80006d8:	08017ef4 	.word	0x08017ef4
 80006dc:	08017f0c 	.word	0x08017f0c
 80006e0:	08017f3c 	.word	0x08017f3c
 80006e4:	08017f74 	.word	0x08017f74

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08017fe0 	.word	0x08017fe0
 800076c:	08017fe8 	.word	0x08017fe8
 8000770:	08017ff4 	.word	0x08017ff4
 8000774:	08017ffc 	.word	0x08017ffc
 8000778:	08018008 	.word	0x08018008
 800077c:	08018018 	.word	0x08018018
 8000780:	08018028 	.word	0x08018028
 8000784:	0801803c 	.word	0x0801803c
 8000788:	08018050 	.word	0x08018050
 800078c:	0801805c 	.word	0x0801805c
 8000790:	08018064 	.word	0x08018064
 8000794:	0801806c 	.word	0x0801806c

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 fc22 	bl	8005050 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	08018090 	.word	0x08018090
 8000820:	000493e0 	.word	0x000493e0
 8000824:	08018098 	.word	0x08018098

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8289 	beq.w	8000d4c <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 8261 	bhi.w	8000d0e <LoraStarter_Process+0x4e6>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c35 	.word	0x08000c35
 8000874:	08000c9b 	.word	0x08000c9b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 fbc6 	bl	8005050 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e22a      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 fbac 	bl	8005050 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e203      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1ff      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f7 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa99 	bl	8000e5c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 fb88 	bl	8005050 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1df      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f016 fb82 	bl	801705e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f016 fb7b 	bl	801705e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81d1 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 fb68 	bl	8005050 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 fb55 	bl	8005050 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1b1      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 fb49 	bl	8005050 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e19d      	b.n	8000d12 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 fb39 	bl	8005050 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e197      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8191 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa99 	bl	8000f2c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 818a 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2002      	movs	r0, #2
 8000a06:	f004 fb23 	bl	8005050 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 fb0c 	bl	8005050 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e16d      	b.n	8000d16 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f016 fa30 	bl	8016ee4 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f016 f9db 	bl	8016e78 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f004 fac1 	bl	8005050 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 faad 	bl	8005050 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e111      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 810d 	beq.w	8000d1a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa97 	bl	8001034 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8086 	bgt.w	8000c26 <LoraStarter_Process+0x3fe>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e080      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f004 fa92 	bl	8005050 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f004 fa18 	bl	8004f74 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e072      	b.n	8000c32 <LoraStarter_Process+0x40a>
 8000b4c:	080180d8 	.word	0x080180d8
 8000b50:	080180e0 	.word	0x080180e0
 8000b54:	08018118 	.word	0x08018118
 8000b58:	0801813c 	.word	0x0801813c
 8000b5c:	08018064 	.word	0x08018064
 8000b60:	0801815c 	.word	0x0801815c
 8000b64:	08018174 	.word	0x08018174
 8000b68:	08018194 	.word	0x08018194
 8000b6c:	080181c0 	.word	0x080181c0
 8000b70:	080181fc 	.word	0x080181fc
 8000b74:	08018220 	.word	0x08018220
 8000b78:	0801822c 	.word	0x0801822c
 8000b7c:	08018248 	.word	0x08018248
 8000b80:	0801827c 	.word	0x0801827c
 8000b84:	08018284 	.word	0x08018284
 8000b88:	08018294 	.word	0x08018294
 8000b8c:	080182b4 	.word	0x080182b4
 8000b90:	080182cc 	.word	0x080182cc
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496f      	ldr	r1, [pc, #444]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 fa5a 	bl	8005050 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f004 f9e0 	bl	8004f74 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e03a      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 fa45 	bl	8005050 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4962      	ldr	r1, [pc, #392]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f004 fa39 	bl	8005050 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da11      	bge.n	8000c16 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LoraStarter_Process+0x3dc>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	e000      	b.n	8000c06 <LoraStarter_Process+0x3de>
 8000c04:	4b57      	ldr	r3, [pc, #348]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c06:	4958      	ldr	r1, [pc, #352]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f004 fa21 	bl	8005050 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c14:	e00d      	b.n	8000c32 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f004 fa19 	bl	8005050 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220a      	movs	r2, #10
 8000c22:	701a      	strb	r2, [r3, #0]
                        break;
 8000c24:	e005      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4951      	ldr	r1, [pc, #324]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f004 fa10 	bl	8005050 <LOGGER_SendFormatted>
                        break;
 8000c30:	bf00      	nop
                }
            }
            break;
 8000c32:	e072      	b.n	8000d1a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c34:	f004 f99e 	bl	8004f74 <TIME_GetCurrentMs>
 8000c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LoraStarter_Process+0x422>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	e001      	b.n	8000c4e <LoraStarter_Process+0x426>
 8000c4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d809      	bhi.n	8000c78 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c68:	4942      	ldr	r1, [pc, #264]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f004 f9f0 	bl	8005050 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c76:	e051      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c86:	4413      	add	r3, r2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c90:	4939      	ldr	r1, [pc, #228]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f004 f9dc 	bl	8005050 <LOGGER_SendFormatted>
            break;
 8000c98:	e040      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c9a:	f004 f96b 	bl	8004f74 <TIME_GetCurrentMs>
 8000c9e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000caa:	4934      	ldr	r1, [pc, #208]	@ (8000d7c <LoraStarter_Process+0x554>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f004 f9cf 	bl	8005050 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cc0:	e02c      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d30e      	bcc.n	8000cf2 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4929      	ldr	r1, [pc, #164]	@ (8000d80 <LoraStarter_Process+0x558>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f004 f9b7 	bl	8005050 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
            break;
 8000cf0:	e014      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <LoraStarter_Process+0x55c>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f004 f9a2 	bl	8005050 <LOGGER_SendFormatted>
            break;
 8000d0c:	e006      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d1a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d012      	beq.n	8000d4e <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4604      	mov	r4, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcd5 	bl	80006e8 <get_state_name>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4622      	mov	r2, r4
 8000d42:	4911      	ldr	r1, [pc, #68]	@ (8000d88 <LoraStarter_Process+0x560>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f004 f983 	bl	8005050 <LOGGER_SendFormatted>
 8000d4a:	e000      	b.n	8000d4e <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000d4c:	bf00      	nop
    }
}
 8000d4e:	37f4      	adds	r7, #244	@ 0xf4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	080182e8 	.word	0x080182e8
 8000d58:	080182fc 	.word	0x080182fc
 8000d5c:	0801830c 	.word	0x0801830c
 8000d60:	08018324 	.word	0x08018324
 8000d64:	0801833c 	.word	0x0801833c
 8000d68:	08018340 	.word	0x08018340
 8000d6c:	0801835c 	.word	0x0801835c
 8000d70:	08018380 	.word	0x08018380
 8000d74:	0801839c 	.word	0x0801839c
 8000d78:	080183d8 	.word	0x080183d8
 8000d7c:	0801840c 	.word	0x0801840c
 8000d80:	08018424 	.word	0x08018424
 8000d84:	0801844c 	.word	0x0801844c
 8000d88:	08018480 	.word	0x08018480

08000d8c <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <Network_SendBinary+0x8c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	f083 0301 	eor.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000da4:	f06f 0301 	mvn.w	r3, #1
 8000da8:	e032      	b.n	8000e10 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <Network_SendBinary+0x2a>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000db6:	f06f 0303 	mvn.w	r3, #3
 8000dba:	e029      	b.n	8000e10 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <Network_SendBinary+0x90>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <Network_SendBinary+0x3e>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <Network_SendBinary+0x42>
 8000dc8:	e020      	b.n	8000e0c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e020      	b.n	8000e10 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fbdd 	bl	8001590 <SDStorage_WriteLog>
 8000dd6:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <Network_SendBinary+0x6a>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dc10      	bgt.n	8000e06 <Network_SendBinary+0x7a>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f113 0f05 	cmn.w	r3, #5
 8000dea:	d009      	beq.n	8000e00 <Network_SendBinary+0x74>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f113 0f02 	cmn.w	r3, #2
 8000df2:	d002      	beq.n	8000dfa <Network_SendBinary+0x6e>
 8000df4:	e007      	b.n	8000e06 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e00a      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000dfa:	f06f 0301 	mvn.w	r3, #1
 8000dfe:	e007      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000e00:	f06f 0303 	mvn.w	r3, #3
 8000e04:	e004      	b.n	8000e10 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e001      	b.n	8000e10 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000022c 	.word	0x2000022c
 8000e1c:	2000022d 	.word	0x2000022d

08000e20 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <Network_IsConnected+0x34>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10f      	bne.n	8000e4c <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <Network_IsConnected+0x38>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <Network_IsConnected+0x22>
 8000e34:	f000 fcac 	bl	8001790 <SDStorage_IsReady>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <Network_IsConnected+0x22>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <Network_IsConnected+0x24>
 8000e42:	2300      	movs	r3, #0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	e001      	b.n	8000e50 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <Network_IsConnected+0x38>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000022d 	.word	0x2000022d
 8000e58:	2000022c 	.word	0x2000022c

08000e5c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d105      	bne.n	8000e76 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000e6a:	4925      	ldr	r1, [pc, #148]	@ (8000f00 <is_response_ok+0xa4>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f004 f8ef 	bl	8005050 <LOGGER_SendFormatted>
        return false;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e03f      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4922      	ldr	r1, [pc, #136]	@ (8000f04 <is_response_ok+0xa8>)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f004 f8e8 	bl	8005050 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000e80:	4921      	ldr	r1, [pc, #132]	@ (8000f08 <is_response_ok+0xac>)
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff f9c4 	bl	8000210 <strcmp>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000e8e:	491f      	ldr	r1, [pc, #124]	@ (8000f0c <is_response_ok+0xb0>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f004 f8dd 	bl	8005050 <LOGGER_SendFormatted>
        return true;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e02d      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000e9a:	491d      	ldr	r1, [pc, #116]	@ (8000f10 <is_response_ok+0xb4>)
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff f9b7 	bl	8000210 <strcmp>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000ea8:	491a      	ldr	r1, [pc, #104]	@ (8000f14 <is_response_ok+0xb8>)
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f004 f8d0 	bl	8005050 <LOGGER_SendFormatted>
        return true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e020      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000eb4:	4918      	ldr	r1, [pc, #96]	@ (8000f18 <is_response_ok+0xbc>)
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff f9aa 	bl	8000210 <strcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d105      	bne.n	8000ece <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000ec2:	4916      	ldr	r1, [pc, #88]	@ (8000f1c <is_response_ok+0xc0>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f004 f8c3 	bl	8005050 <LOGGER_SendFormatted>
        return true;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e013      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000ece:	4914      	ldr	r1, [pc, #80]	@ (8000f20 <is_response_ok+0xc4>)
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f016 f8c4 	bl	801705e <strstr>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4911      	ldr	r1, [pc, #68]	@ (8000f24 <is_response_ok+0xc8>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f004 f8b5 	bl	8005050 <LOGGER_SendFormatted>
        return true;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e005      	b.n	8000ef6 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	490e      	ldr	r1, [pc, #56]	@ (8000f28 <is_response_ok+0xcc>)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f004 f8ae 	bl	8005050 <LOGGER_SendFormatted>
    return false;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	080184a0 	.word	0x080184a0
 8000f04:	080184d0 	.word	0x080184d0
 8000f08:	08018500 	.word	0x08018500
 8000f0c:	08018504 	.word	0x08018504
 8000f10:	0801852c 	.word	0x0801852c
 8000f14:	08018534 	.word	0x08018534
 8000f18:	08018568 	.word	0x08018568
 8000f1c:	0801856c 	.word	0x0801856c
 8000f20:	080185a0 	.word	0x080185a0
 8000f24:	080185a8 	.word	0x080185a8
 8000f28:	080185dc 	.word	0x080185dc

08000f2c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f38:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f3c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000f3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f42:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000f4c:	4934      	ldr	r1, [pc, #208]	@ (8001020 <is_join_response_ok+0xf4>)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f004 f87e 	bl	8005050 <LOGGER_SendFormatted>
        return false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e05e      	b.n	8001016 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000f58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4930      	ldr	r1, [pc, #192]	@ (8001024 <is_join_response_ok+0xf8>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f004 f873 	bl	8005050 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000f6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f6e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f72:	f107 0008 	add.w	r0, r7, #8
 8000f76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	f016 f85c 	bl	8017038 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000f80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f84:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f96:	e013      	b.n	8000fc0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000f98:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b0d      	cmp	r3, #13
 8000fa0:	d004      	beq.n	8000fac <is_join_response_ok+0x80>
 8000fa2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d104      	bne.n	8000fb6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000fac:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
            break;
 8000fb4:	e009      	b.n	8000fca <is_join_response_ok+0x9e>
        }
        pos++;
 8000fb6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000fc0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e6      	bne.n	8000f98 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4916      	ldr	r1, [pc, #88]	@ (8001028 <is_join_response_ok+0xfc>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f91d 	bl	8000210 <strcmp>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000fe4:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d009      	beq.n	8001000 <is_join_response_ok+0xd4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8000fec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ff0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <is_join_response_ok+0x100>)
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f004 f829 	bl	8005050 <LOGGER_SendFormatted>
 8000ffe:	e008      	b.n	8001012 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8001000:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001004:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <is_join_response_ok+0x104>)
 800100c:	2000      	movs	r0, #0
 800100e:	f004 f81f 	bl	8005050 <LOGGER_SendFormatted>
    }
    
    return result;
 8001012:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8001016:	4618      	mov	r0, r3
 8001018:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08018608 	.word	0x08018608
 8001024:	08018640 	.word	0x08018640
 8001028:	08018670 	.word	0x08018670
 800102c:	0801867c 	.word	0x0801867c
 8001030:	080186a4 	.word	0x080186a4

08001034 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8001042:	491e      	ldr	r1, [pc, #120]	@ (80010bc <ResponseHandler_ParseSendResponse+0x88>)
 8001044:	2000      	movs	r0, #0
 8001046:	f004 f803 	bl	8005050 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 800104a:	2303      	movs	r3, #3
 800104c:	e031      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	491b      	ldr	r1, [pc, #108]	@ (80010c0 <ResponseHandler_ParseSendResponse+0x8c>)
 8001052:	2000      	movs	r0, #0
 8001054:	f003 fffc 	bl	8005050 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8001058:	491a      	ldr	r1, [pc, #104]	@ (80010c4 <ResponseHandler_ParseSendResponse+0x90>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f015 ffff 	bl	801705e <strstr>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 8001066:	4918      	ldr	r1, [pc, #96]	@ (80010c8 <ResponseHandler_ParseSendResponse+0x94>)
 8001068:	2002      	movs	r0, #2
 800106a:	f003 fff1 	bl	8005050 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e01f      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001072:	4916      	ldr	r1, [pc, #88]	@ (80010cc <ResponseHandler_ParseSendResponse+0x98>)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f015 fff2 	bl	801705e <strstr>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001080:	4913      	ldr	r1, [pc, #76]	@ (80010d0 <ResponseHandler_ParseSendResponse+0x9c>)
 8001082:	2002      	movs	r0, #2
 8001084:	f003 ffe4 	bl	8005050 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e012      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800108c:	4911      	ldr	r1, [pc, #68]	@ (80010d4 <ResponseHandler_ParseSendResponse+0xa0>)
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f8be 	bl	8000210 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800109a:	490f      	ldr	r1, [pc, #60]	@ (80010d8 <ResponseHandler_ParseSendResponse+0xa4>)
 800109c:	2002      	movs	r0, #2
 800109e:	f003 ffd7 	bl	8005050 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 80010a2:	2302      	movs	r3, #2
 80010a4:	e005      	b.n	80010b2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	490c      	ldr	r1, [pc, #48]	@ (80010dc <ResponseHandler_ParseSendResponse+0xa8>)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f003 ffd0 	bl	8005050 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 80010b0:	2303      	movs	r3, #3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	080186d0 	.word	0x080186d0
 80010c0:	08018704 	.word	0x08018704
 80010c4:	08018734 	.word	0x08018734
 80010c8:	0801874c 	.word	0x0801874c
 80010cc:	08018780 	.word	0x08018780
 80010d0:	0801879c 	.word	0x0801879c
 80010d4:	080187d0 	.word	0x080187d0
 80010d8:	080187d8 	.word	0x080187d8
 80010dc:	08018804 	.word	0x08018804

080010e0 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <SCB_CleanInvalidateDCache+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ee:	f3bf 8f4f 	dsb	sy
}
 80010f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <SCB_CleanInvalidateDCache+0x74>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010fa:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0b5b      	lsrs	r3, r3, #13
 8001100:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001104:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800110e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	015a      	lsls	r2, r3, #5
 8001114:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001118:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800111e:	490d      	ldr	r1, [pc, #52]	@ (8001154 <SCB_CleanInvalidateDCache+0x74>)
 8001120:	4313      	orrs	r3, r2
 8001122:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ef      	bne.n	8001110 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	60fa      	str	r2, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1e5      	bne.n	8001106 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 800115e:	49af      	ldr	r1, [pc, #700]	@ (800141c <SDStorage_Init+0x2c4>)
 8001160:	2001      	movs	r0, #1
 8001162:	f003 ff75 	bl	8005050 <LOGGER_SendFormatted>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001166:	48ae      	ldr	r0, [pc, #696]	@ (8001420 <SDStorage_Init+0x2c8>)
 8001168:	f00b fe2e 	bl	800cdc8 <HAL_SD_GetCardState>
 800116c:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	49ac      	ldr	r1, [pc, #688]	@ (8001424 <SDStorage_Init+0x2cc>)
 8001172:	2001      	movs	r0, #1
 8001174:	f003 ff6c 	bl	8005050 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800117c:	e010      	b.n	80011a0 <SDStorage_Init+0x48>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	461a      	mov	r2, r3
 8001184:	49a8      	ldr	r1, [pc, #672]	@ (8001428 <SDStorage_Init+0x2d0>)
 8001186:	2001      	movs	r0, #1
 8001188:	f003 ff62 	bl	8005050 <LOGGER_SendFormatted>
        HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	@ 0x64
 800118e:	f004 fd37 	bl	8005c00 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001192:	48a3      	ldr	r0, [pc, #652]	@ (8001420 <SDStorage_Init+0x2c8>)
 8001194:	f00b fe18 	bl	800cdc8 <HAL_SD_GetCardState>
 8001198:	6178      	str	r0, [r7, #20]
        wait_count++;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	3301      	adds	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d002      	beq.n	80011ac <SDStorage_Init+0x54>
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b31      	cmp	r3, #49	@ 0x31
 80011aa:	dde8      	ble.n	800117e <SDStorage_Init+0x26>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d128      	bne.n	8001204 <SDStorage_Init+0xac>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 80011b2:	499e      	ldr	r1, [pc, #632]	@ (800142c <SDStorage_Init+0x2d4>)
 80011b4:	2001      	movs	r0, #1
 80011b6:	f003 ff4b 	bl	8005050 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 80011ba:	4b99      	ldr	r3, [pc, #612]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d02f      	beq.n	8001222 <SDStorage_Init+0xca>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 80011c2:	4b97      	ldr	r3, [pc, #604]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c6:	461a      	mov	r2, r3
 80011c8:	4999      	ldr	r1, [pc, #612]	@ (8001430 <SDStorage_Init+0x2d8>)
 80011ca:	2002      	movs	r0, #2
 80011cc:	f003 ff40 	bl	8005050 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 80011d0:	4b93      	ldr	r3, [pc, #588]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <SDStorage_Init+0x8c>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 80011dc:	4995      	ldr	r1, [pc, #596]	@ (8001434 <SDStorage_Init+0x2dc>)
 80011de:	2002      	movs	r0, #2
 80011e0:	f003 ff36 	bl	8005050 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 80011e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <SDStorage_Init+0xa4>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 80011f0:	4991      	ldr	r1, [pc, #580]	@ (8001438 <SDStorage_Init+0x2e0>)
 80011f2:	2002      	movs	r0, #2
 80011f4:	f003 ff2c 	bl	8005050 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80011f8:	f7ff ff72 	bl	80010e0 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 80011fc:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <SDStorage_Init+0x2c8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
 8001202:	e00e      	b.n	8001222 <SDStorage_Init+0xca>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	498d      	ldr	r1, [pc, #564]	@ (800143c <SDStorage_Init+0x2e4>)
 8001208:	2003      	movs	r0, #3
 800120a:	f003 ff21 	bl	8005050 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 800120e:	4b84      	ldr	r3, [pc, #528]	@ (8001420 <SDStorage_Init+0x2c8>)
 8001210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001212:	461a      	mov	r2, r3
 8001214:	498a      	ldr	r1, [pc, #552]	@ (8001440 <SDStorage_Init+0x2e8>)
 8001216:	2003      	movs	r0, #3
 8001218:	f003 ff1a 	bl	8005050 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e199      	b.n	8001556 <SDStorage_Init+0x3fe>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f010 f99a 	bl	801155c <disk_initialize>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	461a      	mov	r2, r3
 8001230:	4984      	ldr	r1, [pc, #528]	@ (8001444 <SDStorage_Init+0x2ec>)
 8001232:	2001      	movs	r0, #1
 8001234:	f003 ff0c 	bl	8005050 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <SDStorage_Init+0xfc>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800123e:	4982      	ldr	r1, [pc, #520]	@ (8001448 <SDStorage_Init+0x2f0>)
 8001240:	2003      	movs	r0, #3
 8001242:	f003 ff05 	bl	8005050 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001246:	4981      	ldr	r1, [pc, #516]	@ (800144c <SDStorage_Init+0x2f4>)
 8001248:	2003      	movs	r0, #3
 800124a:	f003 ff01 	bl	8005050 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e180      	b.n	8001556 <SDStorage_Init+0x3fe>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001254:	497e      	ldr	r1, [pc, #504]	@ (8001450 <SDStorage_Init+0x2f8>)
 8001256:	2001      	movs	r0, #1
 8001258:	f003 fefa 	bl	8005050 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 800125c:	497d      	ldr	r1, [pc, #500]	@ (8001454 <SDStorage_Init+0x2fc>)
 800125e:	2001      	movs	r0, #1
 8001260:	f003 fef6 	bl	8005050 <LOGGER_SendFormatted>
    HAL_Delay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001268:	f004 fcca 	bl	8005c00 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 800126c:	497a      	ldr	r1, [pc, #488]	@ (8001458 <SDStorage_Init+0x300>)
 800126e:	2002      	movs	r0, #2
 8001270:	f003 feee 	bl	8005050 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001274:	4979      	ldr	r1, [pc, #484]	@ (800145c <SDStorage_Init+0x304>)
 8001276:	2001      	movs	r0, #1
 8001278:	f003 feea 	bl	8005050 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 800127c:	4978      	ldr	r1, [pc, #480]	@ (8001460 <SDStorage_Init+0x308>)
 800127e:	2001      	movs	r0, #1
 8001280:	f003 fee6 	bl	8005050 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001284:	4977      	ldr	r1, [pc, #476]	@ (8001464 <SDStorage_Init+0x30c>)
 8001286:	2001      	movs	r0, #1
 8001288:	f003 fee2 	bl	8005050 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	e035      	b.n	8001302 <SDStorage_Init+0x1aa>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	461a      	mov	r2, r3
 800129c:	4972      	ldr	r1, [pc, #456]	@ (8001468 <SDStorage_Init+0x310>)
 800129e:	2001      	movs	r0, #1
 80012a0:	f003 fed6 	bl	8005050 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 80012a4:	2201      	movs	r2, #1
 80012a6:	4971      	ldr	r1, [pc, #452]	@ (800146c <SDStorage_Init+0x314>)
 80012a8:	4871      	ldr	r0, [pc, #452]	@ (8001470 <SDStorage_Init+0x318>)
 80012aa:	f011 fe79 	bl	8012fa0 <f_mount>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	461a      	mov	r2, r3
 80012b6:	496f      	ldr	r1, [pc, #444]	@ (8001474 <SDStorage_Init+0x31c>)
 80012b8:	2001      	movs	r0, #1
 80012ba:	f003 fec9 	bl	8005050 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <SDStorage_Init+0x17c>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3301      	adds	r3, #1
 80012c8:	461a      	mov	r2, r3
 80012ca:	496b      	ldr	r1, [pc, #428]	@ (8001478 <SDStorage_Init+0x320>)
 80012cc:	2001      	movs	r0, #1
 80012ce:	f003 febf 	bl	8005050 <LOGGER_SendFormatted>
            break;
 80012d2:	e019      	b.n	8001308 <SDStorage_Init+0x1b0>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3301      	adds	r3, #1
 80012d8:	461a      	mov	r2, r3
 80012da:	4968      	ldr	r1, [pc, #416]	@ (800147c <SDStorage_Init+0x324>)
 80012dc:	2002      	movs	r0, #2
 80012de:	f003 feb7 	bl	8005050 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	dc09      	bgt.n	80012fc <SDStorage_Init+0x1a4>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 80012e8:	4965      	ldr	r1, [pc, #404]	@ (8001480 <SDStorage_Init+0x328>)
 80012ea:	2001      	movs	r0, #1
 80012ec:	f003 feb0 	bl	8005050 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80012f0:	f7ff fef6 	bl	80010e0 <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 80012f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f8:	f004 fc82 	bl	8005c00 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3301      	adds	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b02      	cmp	r3, #2
 8001306:	ddc6      	ble.n	8001296 <SDStorage_Init+0x13e>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <SDStorage_Init+0x1be>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 800130e:	495d      	ldr	r1, [pc, #372]	@ (8001484 <SDStorage_Init+0x32c>)
 8001310:	2001      	movs	r0, #1
 8001312:	f003 fe9d 	bl	8005050 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80f8 	beq.w	800150e <SDStorage_Init+0x3b6>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	461a      	mov	r2, r3
 8001322:	4959      	ldr	r1, [pc, #356]	@ (8001488 <SDStorage_Init+0x330>)
 8001324:	2002      	movs	r0, #2
 8001326:	f003 fe93 	bl	8005050 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d12f      	bne.n	8001390 <SDStorage_Init+0x238>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 8001330:	4956      	ldr	r1, [pc, #344]	@ (800148c <SDStorage_Init+0x334>)
 8001332:	2002      	movs	r0, #2
 8001334:	f003 fe8c 	bl	8005050 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 8001338:	4955      	ldr	r1, [pc, #340]	@ (8001490 <SDStorage_Init+0x338>)
 800133a:	2001      	movs	r0, #1
 800133c:	f003 fe88 	bl	8005050 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 8001340:	4954      	ldr	r1, [pc, #336]	@ (8001494 <SDStorage_Init+0x33c>)
 8001342:	2001      	movs	r0, #1
 8001344:	f003 fe84 	bl	8005050 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 8001348:	4953      	ldr	r1, [pc, #332]	@ (8001498 <SDStorage_Init+0x340>)
 800134a:	2001      	movs	r0, #1
 800134c:	f003 fe80 	bl	8005050 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	4946      	ldr	r1, [pc, #280]	@ (800146c <SDStorage_Init+0x314>)
 8001354:	4846      	ldr	r0, [pc, #280]	@ (8001470 <SDStorage_Init+0x318>)
 8001356:	f011 fe23 	bl	8012fa0 <f_mount>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	461a      	mov	r2, r3
 8001362:	494e      	ldr	r1, [pc, #312]	@ (800149c <SDStorage_Init+0x344>)
 8001364:	2001      	movs	r0, #1
 8001366:	f003 fe73 	bl	8005050 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <SDStorage_Init+0x222>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001370:	494b      	ldr	r1, [pc, #300]	@ (80014a0 <SDStorage_Init+0x348>)
 8001372:	2001      	movs	r0, #1
 8001374:	f003 fe6c 	bl	8005050 <LOGGER_SendFormatted>
 8001378:	e0c9      	b.n	800150e <SDStorage_Init+0x3b6>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 800137a:	494a      	ldr	r1, [pc, #296]	@ (80014a4 <SDStorage_Init+0x34c>)
 800137c:	2003      	movs	r0, #3
 800137e:	f003 fe67 	bl	8005050 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 8001382:	4949      	ldr	r1, [pc, #292]	@ (80014a8 <SDStorage_Init+0x350>)
 8001384:	2003      	movs	r0, #3
 8001386:	f003 fe63 	bl	8005050 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e0e2      	b.n	8001556 <SDStorage_Init+0x3fe>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d003      	beq.n	800139e <SDStorage_Init+0x246>
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b0d      	cmp	r3, #13
 800139a:	f040 80ae 	bne.w	80014fa <SDStorage_Init+0x3a2>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800139e:	4943      	ldr	r1, [pc, #268]	@ (80014ac <SDStorage_Init+0x354>)
 80013a0:	2001      	movs	r0, #1
 80013a2:	f003 fe55 	bl	8005050 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 80013a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <SDStorage_Init+0x358>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	2107      	movs	r1, #7
 80013b2:	482e      	ldr	r0, [pc, #184]	@ (800146c <SDStorage_Init+0x314>)
 80013b4:	f012 fb18 	bl	80139e8 <f_mkfs>
 80013b8:	4603      	mov	r3, r0
 80013ba:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	461a      	mov	r2, r3
 80013c0:	493c      	ldr	r1, [pc, #240]	@ (80014b4 <SDStorage_Init+0x35c>)
 80013c2:	2001      	movs	r0, #1
 80013c4:	f003 fe44 	bl	8005050 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07c      	beq.n	80014c8 <SDStorage_Init+0x370>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 80013ce:	493a      	ldr	r1, [pc, #232]	@ (80014b8 <SDStorage_Init+0x360>)
 80013d0:	2001      	movs	r0, #1
 80013d2:	f003 fe3d 	bl	8005050 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 80013d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <SDStorage_Init+0x358>)
 80013de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013e2:	2102      	movs	r1, #2
 80013e4:	4821      	ldr	r0, [pc, #132]	@ (800146c <SDStorage_Init+0x314>)
 80013e6:	f012 faff 	bl	80139e8 <f_mkfs>
 80013ea:	4603      	mov	r3, r0
 80013ec:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4932      	ldr	r1, [pc, #200]	@ (80014bc <SDStorage_Init+0x364>)
 80013f4:	2001      	movs	r0, #1
 80013f6:	f003 fe2b 	bl	8005050 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d063      	beq.n	80014c8 <SDStorage_Init+0x370>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	461a      	mov	r2, r3
 8001404:	492e      	ldr	r1, [pc, #184]	@ (80014c0 <SDStorage_Init+0x368>)
 8001406:	2003      	movs	r0, #3
 8001408:	f003 fe22 	bl	8005050 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 800140c:	492d      	ldr	r1, [pc, #180]	@ (80014c4 <SDStorage_Init+0x36c>)
 800140e:	2003      	movs	r0, #3
 8001410:	f003 fe1e 	bl	8005050 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	e09d      	b.n	8001556 <SDStorage_Init+0x3fe>
 800141a:	bf00      	nop
 800141c:	08018834 	.word	0x08018834
 8001420:	20000e70 	.word	0x20000e70
 8001424:	08018864 	.word	0x08018864
 8001428:	0801888c 	.word	0x0801888c
 800142c:	080188cc 	.word	0x080188cc
 8001430:	08018908 	.word	0x08018908
 8001434:	08018938 	.word	0x08018938
 8001438:	08018974 	.word	0x08018974
 800143c:	080189ac 	.word	0x080189ac
 8001440:	080189f0 	.word	0x080189f0
 8001444:	08018a14 	.word	0x08018a14
 8001448:	08018a40 	.word	0x08018a40
 800144c:	08018a78 	.word	0x08018a78
 8001450:	08018ac4 	.word	0x08018ac4
 8001454:	08018b04 	.word	0x08018b04
 8001458:	08018b40 	.word	0x08018b40
 800145c:	08018b7c 	.word	0x08018b7c
 8001460:	08018bc0 	.word	0x08018bc0
 8001464:	08018c10 	.word	0x08018c10
 8001468:	08018c44 	.word	0x08018c44
 800146c:	200017ac 	.word	0x200017ac
 8001470:	200017b0 	.word	0x200017b0
 8001474:	08018c68 	.word	0x08018c68
 8001478:	08018c88 	.word	0x08018c88
 800147c:	08018cbc 	.word	0x08018cbc
 8001480:	08018cfc 	.word	0x08018cfc
 8001484:	08018d38 	.word	0x08018d38
 8001488:	08018d80 	.word	0x08018d80
 800148c:	08018dac 	.word	0x08018dac
 8001490:	08018dfc 	.word	0x08018dfc
 8001494:	08018e44 	.word	0x08018e44
 8001498:	08018e78 	.word	0x08018e78
 800149c:	08018eac 	.word	0x08018eac
 80014a0:	08018ed4 	.word	0x08018ed4
 80014a4:	08018efc 	.word	0x08018efc
 80014a8:	08018f34 	.word	0x08018f34
 80014ac:	08018f70 	.word	0x08018f70
 80014b0:	2000056c 	.word	0x2000056c
 80014b4:	08018fac 	.word	0x08018fac
 80014b8:	08018fd4 	.word	0x08018fd4
 80014bc:	08019008 	.word	0x08019008
 80014c0:	08019030 	.word	0x08019030
 80014c4:	0801905c 	.word	0x0801905c
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	4925      	ldr	r1, [pc, #148]	@ (8001560 <SDStorage_Init+0x408>)
 80014cc:	4825      	ldr	r0, [pc, #148]	@ (8001564 <SDStorage_Init+0x40c>)
 80014ce:	f011 fd67 	bl	8012fa0 <f_mount>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	461a      	mov	r2, r3
 80014da:	4923      	ldr	r1, [pc, #140]	@ (8001568 <SDStorage_Init+0x410>)
 80014dc:	2001      	movs	r0, #1
 80014de:	f003 fdb7 	bl	8005050 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d011      	beq.n	800150c <SDStorage_Init+0x3b4>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	461a      	mov	r2, r3
 80014ec:	491f      	ldr	r1, [pc, #124]	@ (800156c <SDStorage_Init+0x414>)
 80014ee:	2003      	movs	r0, #3
 80014f0:	f003 fdae 	bl	8005050 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	e02d      	b.n	8001556 <SDStorage_Init+0x3fe>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	461a      	mov	r2, r3
 80014fe:	491c      	ldr	r1, [pc, #112]	@ (8001570 <SDStorage_Init+0x418>)
 8001500:	2003      	movs	r0, #3
 8001502:	f003 fda5 	bl	8005050 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e024      	b.n	8001556 <SDStorage_Init+0x3fe>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 800150c:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 800150e:	4919      	ldr	r1, [pc, #100]	@ (8001574 <SDStorage_Init+0x41c>)
 8001510:	2001      	movs	r0, #1
 8001512:	f003 fd9d 	bl	8005050 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 8001516:	4918      	ldr	r1, [pc, #96]	@ (8001578 <SDStorage_Init+0x420>)
 8001518:	2001      	movs	r0, #1
 800151a:	f003 fd99 	bl	8005050 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 800151e:	f000 f9bb 	bl	8001898 <_create_log_directory>
 8001522:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <SDStorage_Init+0x424>)
 8001532:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <SDStorage_Init+0x428>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <SDStorage_Init+0x42c>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001544:	2100      	movs	r1, #0
 8001546:	4810      	ldr	r0, [pc, #64]	@ (8001588 <SDStorage_Init+0x430>)
 8001548:	f015 fd6e 	bl	8017028 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800154c:	490f      	ldr	r1, [pc, #60]	@ (800158c <SDStorage_Init+0x434>)
 800154e:	2001      	movs	r0, #1
 8001550:	f003 fd7e 	bl	8005050 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200017ac 	.word	0x200017ac
 8001564:	200017b0 	.word	0x200017b0
 8001568:	080190a0 	.word	0x080190a0
 800156c:	080190cc 	.word	0x080190cc
 8001570:	080190f8 	.word	0x080190f8
 8001574:	08019130 	.word	0x08019130
 8001578:	0801915c 	.word	0x0801915c
 800157c:	20000334 	.word	0x20000334
 8001580:	2000022e 	.word	0x2000022e
 8001584:	20000330 	.word	0x20000330
 8001588:	20000230 	.word	0x20000230
 800158c:	08019184 	.word	0x08019184

08001590 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800159a:	4b6e      	ldr	r3, [pc, #440]	@ (8001754 <SDStorage_WriteLog+0x1c4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 80015a8:	f06f 0301 	mvn.w	r3, #1
 80015ac:	e0cd      	b.n	800174a <SDStorage_WriteLog+0x1ba>
    }
    
    if (data == NULL || size == 0) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <SDStorage_WriteLog+0x2a>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 80015ba:	f06f 0304 	mvn.w	r3, #4
 80015be:	e0c4      	b.n	800174a <SDStorage_WriteLog+0x1ba>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80015c0:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80015c8:	4b64      	ldr	r3, [pc, #400]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80015d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015d4:	d907      	bls.n	80015e6 <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80015d6:	f000 f8e7 	bl	80017a8 <SDStorage_CreateNewLogFile>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 80015e0:	f06f 0302 	mvn.w	r3, #2
 80015e4:	e0b1      	b.n	800174a <SDStorage_WriteLog+0x1ba>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs 파일 쓰기
    if (!g_file_open) {
 80015e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f083 0301 	eor.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d031      	beq.n	8001658 <SDStorage_WriteLog+0xc8>
        // 파일이 닫혀있는 경우에만 새로 열기 (보통 첫 번째 호출)
        if (strlen(g_current_log_file) == 0) {
 80015f4:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10e      	bne.n	800161a <SDStorage_WriteLog+0x8a>
            if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80015fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001600:	4855      	ldr	r0, [pc, #340]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 8001602:	f000 f9ab 	bl	800195c <_generate_log_filename>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <SDStorage_WriteLog+0x8a>
                LOG_ERROR("[SDStorage] Failed to generate log filename");
 800160c:	4955      	ldr	r1, [pc, #340]	@ (8001764 <SDStorage_WriteLog+0x1d4>)
 800160e:	2003      	movs	r0, #3
 8001610:	f003 fd1e 	bl	8005050 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	e097      	b.n	800174a <SDStorage_WriteLog+0x1ba>
            }
        }
        
        // FatFs f_open 시도 (파일이 없으면 생성, 있으면 덮어쓰기)
        FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 800161a:	220a      	movs	r2, #10
 800161c:	494e      	ldr	r1, [pc, #312]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 800161e:	4852      	ldr	r0, [pc, #328]	@ (8001768 <SDStorage_WriteLog+0x1d8>)
 8001620:	f011 fd04 	bl	801302c <f_open>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
        
        if (open_result == FR_OK) {
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <SDStorage_WriteLog+0xb0>
            g_file_open = true;
 800162e:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
            LOG_DEBUG("[SDStorage] Log file opened for continuous logging: %s", g_current_log_file);
 8001634:	4a48      	ldr	r2, [pc, #288]	@ (8001758 <SDStorage_WriteLog+0x1c8>)
 8001636:	494d      	ldr	r1, [pc, #308]	@ (800176c <SDStorage_WriteLog+0x1dc>)
 8001638:	2000      	movs	r0, #0
 800163a:	f003 fd09 	bl	8005050 <LOGGER_SendFormatted>
 800163e:	e00b      	b.n	8001658 <SDStorage_WriteLog+0xc8>
        } else {
            LOG_ERROR("[SDStorage] f_open failed: %d - SD logging disabled", open_result);
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	461a      	mov	r2, r3
 8001644:	494a      	ldr	r1, [pc, #296]	@ (8001770 <SDStorage_WriteLog+0x1e0>)
 8001646:	2003      	movs	r0, #3
 8001648:	f003 fd02 	bl	8005050 <LOGGER_SendFormatted>
            g_file_open = false;
 800164c:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
            return SDSTORAGE_FILE_ERROR;
 8001652:	f06f 0302 	mvn.w	r3, #2
 8001656:	e078      	b.n	800174a <SDStorage_WriteLog+0x1ba>
        }
    }
    
    if (g_file_open) {
 8001658:	4b41      	ldr	r3, [pc, #260]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d04d      	beq.n	80016fc <SDStorage_WriteLog+0x16c>
        // FatFs 파일 쓰기 (Windows 호환) - 줄바꿈 자동 추가
        UINT bytes_written;
        
        // 원본 데이터 쓰기
        FRESULT write_result = f_write(&g_log_file, data, size, &bytes_written);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	483f      	ldr	r0, [pc, #252]	@ (8001768 <SDStorage_WriteLog+0x1d8>)
 800166a:	f011 fe99 	bl	80133a0 <f_write>
 800166e:	4603      	mov	r3, r0
 8001670:	75bb      	strb	r3, [r7, #22]
        
        if (write_result == FR_OK && bytes_written == size) {
 8001672:	7dbb      	ldrb	r3, [r7, #22]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d127      	bne.n	80016c8 <SDStorage_WriteLog+0x138>
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d123      	bne.n	80016c8 <SDStorage_WriteLog+0x138>
            // 줄바꿈 추가 (Windows 호환을 위해 \r\n 사용)
            UINT newline_written;
            FRESULT newline_result = f_write(&g_log_file, "\r\n", 2, &newline_written);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2202      	movs	r2, #2
 8001686:	493b      	ldr	r1, [pc, #236]	@ (8001774 <SDStorage_WriteLog+0x1e4>)
 8001688:	4837      	ldr	r0, [pc, #220]	@ (8001768 <SDStorage_WriteLog+0x1d8>)
 800168a:	f011 fe89 	bl	80133a0 <f_write>
 800168e:	4603      	mov	r3, r0
 8001690:	757b      	strb	r3, [r7, #21]
            
            if (newline_result == FR_OK) {
 8001692:	7d7b      	ldrb	r3, [r7, #21]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <SDStorage_WriteLog+0x11c>
                g_current_log_size += bytes_written + newline_written;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	441a      	add	r2, r3
 800169e:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80016a6:	6013      	str	r3, [r2, #0]
                return SDSTORAGE_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e04e      	b.n	800174a <SDStorage_WriteLog+0x1ba>
            } else {
                LOG_WARN("[SDStorage] Newline write failed: %d", newline_result);
 80016ac:	7d7b      	ldrb	r3, [r7, #21]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4931      	ldr	r1, [pc, #196]	@ (8001778 <SDStorage_WriteLog+0x1e8>)
 80016b2:	2002      	movs	r0, #2
 80016b4:	f003 fccc 	bl	8005050 <LOGGER_SendFormatted>
                g_current_log_size += bytes_written;  // 원본 데이터는 성공했으므로 카운트
 80016b8:	4b28      	ldr	r3, [pc, #160]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4413      	add	r3, r2
 80016c0:	4a26      	ldr	r2, [pc, #152]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 80016c2:	6013      	str	r3, [r2, #0]
                return SDSTORAGE_OK;  // 원본 데이터 쓰기는 성공했으므로 OK 반환
 80016c4:	2300      	movs	r3, #0
 80016c6:	e040      	b.n	800174a <SDStorage_WriteLog+0x1ba>
            }
        } else {
            if (write_result != FR_OK) {
 80016c8:	7dbb      	ldrb	r3, [r7, #22]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <SDStorage_WriteLog+0x152>
                LOG_ERROR("[SDStorage] f_write failed: %d - SD logging disabled", write_result);
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	461a      	mov	r2, r3
 80016d2:	492a      	ldr	r1, [pc, #168]	@ (800177c <SDStorage_WriteLog+0x1ec>)
 80016d4:	2003      	movs	r0, #3
 80016d6:	f003 fcbb 	bl	8005050 <LOGGER_SendFormatted>
                g_file_open = false;
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e00c      	b.n	80016fc <SDStorage_WriteLog+0x16c>
            } else if (bytes_written != size) {
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d008      	beq.n	80016fc <SDStorage_WriteLog+0x16c>
                LOG_WARN("[SDStorage] Partial write: %d/%d bytes", bytes_written, size);
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4924      	ldr	r1, [pc, #144]	@ (8001780 <SDStorage_WriteLog+0x1f0>)
 80016f0:	2002      	movs	r0, #2
 80016f2:	f003 fcad 	bl	8005050 <LOGGER_SendFormatted>
                return SDSTORAGE_DISK_FULL;
 80016f6:	f06f 0303 	mvn.w	r3, #3
 80016fa:	e026      	b.n	800174a <SDStorage_WriteLog+0x1ba>
            }
        }
    }
    
    if (!g_file_open) {
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <SDStorage_WriteLog+0x1d0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f083 0301 	eor.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <SDStorage_WriteLog+0x190>
        // FatFs 파일이 열리지 않은 경우 - 에러 반환
        LOG_ERROR("[SDStorage] File not open and FatFs f_open failed");
 800170a:	491e      	ldr	r1, [pc, #120]	@ (8001784 <SDStorage_WriteLog+0x1f4>)
 800170c:	2003      	movs	r0, #3
 800170e:	f003 fc9f 	bl	8005050 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Cannot write log data - SD logging unavailable");
 8001712:	491d      	ldr	r1, [pc, #116]	@ (8001788 <SDStorage_WriteLog+0x1f8>)
 8001714:	2003      	movs	r0, #3
 8001716:	f003 fc9b 	bl	8005050 <LOGGER_SendFormatted>
        return SDSTORAGE_FILE_ERROR;
 800171a:	f06f 0302 	mvn.w	r3, #2
 800171e:	e014      	b.n	800174a <SDStorage_WriteLog+0x1ba>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    FRESULT sync_result = f_sync(&g_log_file);
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <SDStorage_WriteLog+0x1d8>)
 8001722:	f011 ffb2 	bl	801368a <f_sync>
 8001726:	4603      	mov	r3, r0
 8001728:	753b      	strb	r3, [r7, #20]
    if (sync_result != FR_OK) {
 800172a:	7d3b      	ldrb	r3, [r7, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <SDStorage_WriteLog+0x1ac>
        LOG_WARN("[SDStorage] f_sync failed: %d", sync_result);
 8001730:	7d3b      	ldrb	r3, [r7, #20]
 8001732:	461a      	mov	r2, r3
 8001734:	4915      	ldr	r1, [pc, #84]	@ (800178c <SDStorage_WriteLog+0x1fc>)
 8001736:	2002      	movs	r0, #2
 8001738:	f003 fc8a 	bl	8005050 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a05      	ldr	r2, [pc, #20]	@ (800175c <SDStorage_WriteLog+0x1cc>)
 8001746:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000022e 	.word	0x2000022e
 8001758:	20000230 	.word	0x20000230
 800175c:	20000330 	.word	0x20000330
 8001760:	20000568 	.word	0x20000568
 8001764:	080191b8 	.word	0x080191b8
 8001768:	20000338 	.word	0x20000338
 800176c:	080191e4 	.word	0x080191e4
 8001770:	0801921c 	.word	0x0801921c
 8001774:	08019250 	.word	0x08019250
 8001778:	08019254 	.word	0x08019254
 800177c:	0801927c 	.word	0x0801927c
 8001780:	080192b4 	.word	0x080192b4
 8001784:	080192dc 	.word	0x080192dc
 8001788:	08019310 	.word	0x08019310
 800178c:	0801934c 	.word	0x0801934c

08001790 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <SDStorage_IsReady+0x14>)
 8001796:	781b      	ldrb	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000022e 	.word	0x2000022e

080017a8 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 80017ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <SDStorage_CreateNewLogFile+0xc0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f083 0301 	eor.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <SDStorage_CreateNewLogFile+0x1a>
        return SDSTORAGE_NOT_READY;
 80017bc:	f06f 0301 	mvn.w	r3, #1
 80017c0:	e04d      	b.n	800185e <SDStorage_CreateNewLogFile+0xb6>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 80017c2:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <SDStorage_CreateNewLogFile+0xc4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <SDStorage_CreateNewLogFile+0x2e>
        f_close(&g_log_file);
 80017ca:	4829      	ldr	r0, [pc, #164]	@ (8001870 <SDStorage_CreateNewLogFile+0xc8>)
 80017cc:	f011 ffdb 	bl	8013786 <f_close>
        g_file_open = false;
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <SDStorage_CreateNewLogFile+0xc4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80017d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017da:	4826      	ldr	r0, [pc, #152]	@ (8001874 <SDStorage_CreateNewLogFile+0xcc>)
 80017dc:	f000 f8be 	bl	800195c <_generate_log_filename>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <SDStorage_CreateNewLogFile+0x44>
        return SDSTORAGE_ERROR;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e038      	b.n	800185e <SDStorage_CreateNewLogFile+0xb6>
    }
    
    // 파일 생성 확인 (SD 쓰기 문제로 인한 블로킹 방지)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Attempting to create log file: %s", g_current_log_file);
 80017ec:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <SDStorage_CreateNewLogFile+0xcc>)
 80017ee:	4922      	ldr	r1, [pc, #136]	@ (8001878 <SDStorage_CreateNewLogFile+0xd0>)
 80017f0:	2001      	movs	r0, #1
 80017f2:	f003 fc2d 	bl	8005050 <LOGGER_SendFormatted>
    
    // 실제 파일 생성 시도 (test.txt와 동일한 플래그 사용)
    LOG_INFO("[SDStorage] Attempting to create new log file: %s", g_current_log_file);
 80017f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001874 <SDStorage_CreateNewLogFile+0xcc>)
 80017f8:	4920      	ldr	r1, [pc, #128]	@ (800187c <SDStorage_CreateNewLogFile+0xd4>)
 80017fa:	2001      	movs	r0, #1
 80017fc:	f003 fc28 	bl	8005050 <LOGGER_SendFormatted>
    FRESULT open_result = f_open(&g_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001800:	220a      	movs	r2, #10
 8001802:	491c      	ldr	r1, [pc, #112]	@ (8001874 <SDStorage_CreateNewLogFile+0xcc>)
 8001804:	481a      	ldr	r0, [pc, #104]	@ (8001870 <SDStorage_CreateNewLogFile+0xc8>)
 8001806:	f011 fc11 	bl	801302c <f_open>
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	461a      	mov	r2, r3
 8001812:	491b      	ldr	r1, [pc, #108]	@ (8001880 <SDStorage_CreateNewLogFile+0xd8>)
 8001814:	2001      	movs	r0, #1
 8001816:	f003 fc1b 	bl	8005050 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00f      	beq.n	8001840 <SDStorage_CreateNewLogFile+0x98>
        LOG_ERROR("[SDStorage] f_open failed: %d - SD write problem detected", open_result);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	461a      	mov	r2, r3
 8001824:	4917      	ldr	r1, [pc, #92]	@ (8001884 <SDStorage_CreateNewLogFile+0xdc>)
 8001826:	2003      	movs	r0, #3
 8001828:	f003 fc12 	bl	8005050 <LOGGER_SendFormatted>
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 800182c:	4916      	ldr	r1, [pc, #88]	@ (8001888 <SDStorage_CreateNewLogFile+0xe0>)
 800182e:	2002      	movs	r0, #2
 8001830:	f003 fc0e 	bl	8005050 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <SDStorage_CreateNewLogFile+0xc0>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 800183a:	f06f 0302 	mvn.w	r3, #2
 800183e:	e00e      	b.n	800185e <SDStorage_CreateNewLogFile+0xb6>
    }
    
    LOG_INFO("[SDStorage] File created successfully, keeping open for logging");
 8001840:	4912      	ldr	r1, [pc, #72]	@ (800188c <SDStorage_CreateNewLogFile+0xe4>)
 8001842:	2001      	movs	r0, #1
 8001844:	f003 fc04 	bl	8005050 <LOGGER_SendFormatted>
    g_file_open = true;  // 파일을 열어둔 상태로 유지
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <SDStorage_CreateNewLogFile+0xc4>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
    LOG_INFO("[SDStorage] File ready for immediate logging");
 800184e:	4910      	ldr	r1, [pc, #64]	@ (8001890 <SDStorage_CreateNewLogFile+0xe8>)
 8001850:	2001      	movs	r0, #1
 8001852:	f003 fbfd 	bl	8005050 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <SDStorage_CreateNewLogFile+0xec>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000022e 	.word	0x2000022e
 800186c:	20000568 	.word	0x20000568
 8001870:	20000338 	.word	0x20000338
 8001874:	20000230 	.word	0x20000230
 8001878:	0801936c 	.word	0x0801936c
 800187c:	0801939c 	.word	0x0801939c
 8001880:	080193d0 	.word	0x080193d0
 8001884:	080193f0 	.word	0x080193f0
 8001888:	0801942c 	.word	0x0801942c
 800188c:	0801946c 	.word	0x0801946c
 8001890:	080194ac 	.word	0x080194ac
 8001894:	20000330 	.word	0x20000330

08001898 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 800189e:	4924      	ldr	r1, [pc, #144]	@ (8001930 <_create_log_directory+0x98>)
 80018a0:	2001      	movs	r0, #1
 80018a2:	f003 fbd5 	bl	8005050 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	4922      	ldr	r1, [pc, #136]	@ (8001934 <_create_log_directory+0x9c>)
 80018aa:	4823      	ldr	r0, [pc, #140]	@ (8001938 <_create_log_directory+0xa0>)
 80018ac:	f011 fb78 	bl	8012fa0 <f_mount>
 80018b0:	4603      	mov	r3, r0
 80018b2:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4920      	ldr	r1, [pc, #128]	@ (800193c <_create_log_directory+0xa4>)
 80018ba:	2001      	movs	r0, #1
 80018bc:	f003 fbc8 	bl	8005050 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 80018c0:	230c      	movs	r3, #12
 80018c2:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 80018c4:	79bb      	ldrb	r3, [r7, #6]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 80018ca:	491d      	ldr	r1, [pc, #116]	@ (8001940 <_create_log_directory+0xa8>)
 80018cc:	2001      	movs	r0, #1
 80018ce:	f003 fbbf 	bl	8005050 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 80018d2:	481c      	ldr	r0, [pc, #112]	@ (8001944 <_create_log_directory+0xac>)
 80018d4:	f011 ff81 	bl	80137da <f_mkdir>
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	461a      	mov	r2, r3
 80018e0:	4919      	ldr	r1, [pc, #100]	@ (8001948 <_create_log_directory+0xb0>)
 80018e2:	2001      	movs	r0, #1
 80018e4:	f003 fbb4 	bl	8005050 <LOGGER_SendFormatted>
 80018e8:	e005      	b.n	80018f6 <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4917      	ldr	r1, [pc, #92]	@ (800194c <_create_log_directory+0xb4>)
 80018f0:	2003      	movs	r0, #3
 80018f2:	f003 fbad 	bl	8005050 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <_create_log_directory+0x6a>
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d105      	bne.n	800190e <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001902:	4913      	ldr	r1, [pc, #76]	@ (8001950 <_create_log_directory+0xb8>)
 8001904:	2001      	movs	r0, #1
 8001906:	f003 fba3 	bl	8005050 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 800190a:	2300      	movs	r3, #0
 800190c:	e00b      	b.n	8001926 <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	461a      	mov	r2, r3
 8001912:	4910      	ldr	r1, [pc, #64]	@ (8001954 <_create_log_directory+0xbc>)
 8001914:	2003      	movs	r0, #3
 8001916:	f003 fb9b 	bl	8005050 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 800191a:	490f      	ldr	r1, [pc, #60]	@ (8001958 <_create_log_directory+0xc0>)
 800191c:	2001      	movs	r0, #1
 800191e:	f003 fb97 	bl	8005050 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	080194dc 	.word	0x080194dc
 8001934:	200017ac 	.word	0x200017ac
 8001938:	200017b0 	.word	0x200017b0
 800193c:	08019514 	.word	0x08019514
 8001940:	0801953c 	.word	0x0801953c
 8001944:	08019570 	.word	0x08019570
 8001948:	0801957c 	.word	0x0801957c
 800194c:	0801959c 	.word	0x0801959c
 8001950:	080195c4 	.word	0x080195c4
 8001954:	080195fc 	.word	0x080195fc
 8001958:	08019634 	.word	0x08019634

0800195c <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001962:	af00      	add	r7, sp, #0
 8001964:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001968:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800196c:	6018      	str	r0, [r3, #0]
 800196e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8001972:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001976:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001978:	4b48      	ldr	r3, [pc, #288]	@ (8001a9c <_generate_log_filename+0x140>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d14a      	bne.n	8001a16 <_generate_log_filename+0xba>
        file_counter = 1;
 8001980:	4b46      	ldr	r3, [pc, #280]	@ (8001a9c <_generate_log_filename+0x140>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001986:	2301      	movs	r3, #1
 8001988:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800198c:	e034      	b.n	80019f8 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 800198e:	4b44      	ldr	r3, [pc, #272]	@ (8001aa0 <_generate_log_filename+0x144>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001996:	f107 000c 	add.w	r0, r7, #12
 800199a:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800199e:	4a41      	ldr	r2, [pc, #260]	@ (8001aa4 <_generate_log_filename+0x148>)
 80019a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019a4:	f015 fa68 	bl	8016e78 <sniprintf>
 80019a8:	e008      	b.n	80019bc <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 80019aa:	f107 000c 	add.w	r0, r7, #12
 80019ae:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80019b2:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa8 <_generate_log_filename+0x14c>)
 80019b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b8:	f015 fa5e 	bl	8016e78 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 80019bc:	f107 010c 	add.w	r1, r7, #12
 80019c0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80019c4:	2201      	movs	r2, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f011 fb30 	bl	801302c <f_open>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f887 333f 	strb.w	r3, [r7, #831]	@ 0x33f
            if (test_result == FR_OK) {
 80019d2:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d115      	bne.n	8001a06 <_generate_log_filename+0xaa>
                f_close(&test_file);
 80019da:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80019de:	4618      	mov	r0, r3
 80019e0:	f011 fed1 	bl	8013786 <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 80019e4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a2c      	ldr	r2, [pc, #176]	@ (8001a9c <_generate_log_filename+0x140>)
 80019ec:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 80019ee:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80019f2:	3301      	adds	r3, #1
 80019f4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80019f8:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80019fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a00:	4293      	cmp	r3, r2
 8001a02:	ddc4      	ble.n	800198e <_generate_log_filename+0x32>
 8001a04:	e000      	b.n	8001a08 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001a06:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001a08:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <_generate_log_filename+0x140>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4927      	ldr	r1, [pc, #156]	@ (8001aac <_generate_log_filename+0x150>)
 8001a10:	2000      	movs	r0, #0
 8001a12:	f003 fb1d 	bl	8005050 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <_generate_log_filename+0x144>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d011      	beq.n	8001a42 <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <_generate_log_filename+0x140>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8001a26:	f5a2 7152 	sub.w	r1, r2, #840	@ 0x348
 8001a2a:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8001a2e:	f5a2 7051 	sub.w	r0, r2, #836	@ 0x344
 8001a32:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa4 <_generate_log_filename+0x148>)
 8001a34:	6809      	ldr	r1, [r1, #0]
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	f015 fa1e 	bl	8016e78 <sniprintf>
 8001a3c:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8001a40:	e010      	b.n	8001a64 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <_generate_log_filename+0x140>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8001a4a:	f5a2 7152 	sub.w	r1, r2, #840	@ 0x348
 8001a4e:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8001a52:	f5a2 7051 	sub.w	r0, r2, #836	@ 0x344
 8001a56:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <_generate_log_filename+0x14c>)
 8001a58:	6809      	ldr	r1, [r1, #0]
 8001a5a:	6800      	ldr	r0, [r0, #0]
 8001a5c:	f015 fa0c 	bl	8016e78 <sniprintf>
 8001a60:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
    }
    
    file_counter++;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <_generate_log_filename+0x140>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <_generate_log_filename+0x140>)
 8001a6c:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 8001a6e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db08      	blt.n	8001a88 <_generate_log_filename+0x12c>
 8001a76:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001a7a:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8001a7e:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d802      	bhi.n	8001a8e <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8c:	e000      	b.n	8001a90 <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000076c 	.word	0x2000076c
 8001aa0:	20000334 	.word	0x20000334
 8001aa4:	08019670 	.word	0x08019670
 8001aa8:	08019688 	.word	0x08019688
 8001aac:	08019698 	.word	0x08019698

08001ab0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8001af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <vApplicationGetIdleTaskMemory+0x30>)
 8001afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2280      	movs	r2, #128	@ 0x80
 8001b00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000770 	.word	0x20000770
 8001b14:	200007c8 	.word	0x200007c8

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b09a      	sub	sp, #104	@ 0x68
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001b1e:	4b96      	ldr	r3, [pc, #600]	@ (8001d78 <main+0x260>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a94      	ldr	r2, [pc, #592]	@ (8001d78 <main+0x260>)
 8001b26:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f004 f83d 	bl	8005ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f966 	bl	8001dfc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b30:	f000 f9d6 	bl	8001ee0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b34:	f001 f998 	bl	8002e68 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001b38:	f001 ff7e 	bl	8003a38 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001b3c:	f001 ffa2 	bl	8003a84 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001b40:	f000 fa00 	bl	8001f44 <MX_ADC3_Init>
  MX_CRC_Init();
 8001b44:	f000 fa50 	bl	8001fe8 <MX_CRC_Init>
  MX_DCMI_Init();
 8001b48:	f000 fa70 	bl	800202c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001b4c:	f000 faa2 	bl	8002094 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001b50:	f000 fad2 	bl	80020f8 <MX_ETH_Init>
  MX_FMC_Init();
 8001b54:	f001 f938 	bl	8002dc8 <MX_FMC_Init>
  MX_I2C1_Init();
 8001b58:	f000 fb1c 	bl	8002194 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b5c:	f000 fb5a 	bl	8002214 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001b60:	f000 fb98 	bl	8002294 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001b64:	f000 fc18 	bl	8002398 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001b68:	f000 fc42 	bl	80023f0 <MX_RTC_Init>
  MX_SAI2_Init();
 8001b6c:	f000 fce4 	bl	8002538 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001b70:	f000 fd8a 	bl	8002688 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001b74:	f000 fdae 	bl	80026d4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001b78:	f000 fddc 	bl	8002734 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b7c:	f000 fe18 	bl	80027b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b80:	f000 fec2 	bl	8002908 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b84:	f000 ff36 	bl	80029f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b88:	f000 ffac 	bl	8002ae4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001b8c:	f001 f822 	bl	8002bd4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001b90:	f001 f874 	bl	8002c7c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001b94:	f001 f8b8 	bl	8002d08 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b98:	f001 f8e6 	bl	8002d68 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001b9c:	4b77      	ldr	r3, [pc, #476]	@ (8001d7c <main+0x264>)
 8001b9e:	4a78      	ldr	r2, [pc, #480]	@ (8001d80 <main+0x268>)
 8001ba0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ba2:	4b77      	ldr	r3, [pc, #476]	@ (8001d80 <main+0x268>)
 8001ba4:	4a75      	ldr	r2, [pc, #468]	@ (8001d7c <main+0x264>)
 8001ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001ba8:	4b74      	ldr	r3, [pc, #464]	@ (8001d7c <main+0x264>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b73      	ldr	r3, [pc, #460]	@ (8001d7c <main+0x264>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001bb8:	f00f f9c4 	bl	8010f44 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4871      	ldr	r0, [pc, #452]	@ (8001d84 <main+0x26c>)
 8001bc0:	f003 f9e6 	bl	8004f90 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <main+0x260>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	496f      	ldr	r1, [pc, #444]	@ (8001d88 <main+0x270>)
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f003 fa3f 	bl	8005050 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d8c <main+0x274>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <main+0xce>
 8001bde:	496c      	ldr	r1, [pc, #432]	@ (8001d90 <main+0x278>)
 8001be0:	2002      	movs	r0, #2
 8001be2:	f003 fa35 	bl	8005050 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001be6:	4b69      	ldr	r3, [pc, #420]	@ (8001d8c <main+0x274>)
 8001be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <main+0xe2>
 8001bf2:	4968      	ldr	r1, [pc, #416]	@ (8001d94 <main+0x27c>)
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	f003 fa2b 	bl	8005050 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001bfa:	4b64      	ldr	r3, [pc, #400]	@ (8001d8c <main+0x274>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <main+0xf6>
 8001c06:	4964      	ldr	r1, [pc, #400]	@ (8001d98 <main+0x280>)
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f003 fa21 	bl	8005050 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d8c <main+0x274>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <main+0x10a>
 8001c1a:	4960      	ldr	r1, [pc, #384]	@ (8001d9c <main+0x284>)
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f003 fa17 	bl	8005050 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001c22:	4b5a      	ldr	r3, [pc, #360]	@ (8001d8c <main+0x274>)
 8001c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <main+0x11e>
 8001c2e:	495c      	ldr	r1, [pc, #368]	@ (8001da0 <main+0x288>)
 8001c30:	2002      	movs	r0, #2
 8001c32:	f003 fa0d 	bl	8005050 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001c36:	4b55      	ldr	r3, [pc, #340]	@ (8001d8c <main+0x274>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <main+0x132>
 8001c42:	4958      	ldr	r1, [pc, #352]	@ (8001da4 <main+0x28c>)
 8001c44:	2002      	movs	r0, #2
 8001c46:	f003 fa03 	bl	8005050 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001c4a:	4b50      	ldr	r3, [pc, #320]	@ (8001d8c <main+0x274>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da03      	bge.n	8001c5a <main+0x142>
 8001c52:	4955      	ldr	r1, [pc, #340]	@ (8001da8 <main+0x290>)
 8001c54:	2002      	movs	r0, #2
 8001c56:	f003 f9fb 	bl	8005050 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d8c <main+0x274>)
 8001c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d8c <main+0x274>)
 8001c60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c64:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001c66:	4951      	ldr	r1, [pc, #324]	@ (8001dac <main+0x294>)
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f003 f9f1 	bl	8005050 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001c6e:	4b50      	ldr	r3, [pc, #320]	@ (8001db0 <main+0x298>)
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8001c76:	494f      	ldr	r1, [pc, #316]	@ (8001db4 <main+0x29c>)
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f003 f9e9 	bl	8005050 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8001c7e:	494e      	ldr	r1, [pc, #312]	@ (8001db8 <main+0x2a0>)
 8001c80:	2001      	movs	r0, #1
 8001c82:	f003 f9e5 	bl	8005050 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <main+0x264>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <main+0x264>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0210 	orr.w	r2, r2, #16
 8001c94:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8001c96:	4949      	ldr	r1, [pc, #292]	@ (8001dbc <main+0x2a4>)
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f003 f9d9 	bl	8005050 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8001c9e:	2388      	movs	r3, #136	@ 0x88
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	4947      	ldr	r1, [pc, #284]	@ (8001dc0 <main+0x2a8>)
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f003 f9d3 	bl	8005050 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8001caa:	4b46      	ldr	r3, [pc, #280]	@ (8001dc4 <main+0x2ac>)
 8001cac:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8001cb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f012 fbc7 	bl	8014450 <osMessageCreate>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a40      	ldr	r2, [pc, #256]	@ (8001dc8 <main+0x2b0>)
 8001cc6:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <main+0x2b0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8001cd0:	493e      	ldr	r1, [pc, #248]	@ (8001dcc <main+0x2b4>)
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f003 f9bc 	bl	8005050 <LOGGER_SendFormatted>
 8001cd8:	e003      	b.n	8001ce2 <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8001cda:	493d      	ldr	r1, [pc, #244]	@ (8001dd0 <main+0x2b8>)
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f003 f9b7 	bl	8005050 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd4 <main+0x2bc>)
 8001ce4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001ce8:	461d      	mov	r5, r3
 8001cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001cf6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f012 fb47 	bl	8014390 <osThreadCreate>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a34      	ldr	r2, [pc, #208]	@ (8001dd8 <main+0x2c0>)
 8001d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 8001d08:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <main+0x2c4>)
 8001d0a:	f107 0420 	add.w	r4, r7, #32
 8001d0e:	461d      	mov	r5, r3
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f012 fb34 	bl	8014390 <osThreadCreate>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <main+0x2c8>)
 8001d2c:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 8001d2e:	492d      	ldr	r1, [pc, #180]	@ (8001de4 <main+0x2cc>)
 8001d30:	2001      	movs	r0, #1
 8001d32:	f003 f98d 	bl	8005050 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 8001d36:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <main+0x2d0>)
 8001d38:	1d3c      	adds	r4, r7, #4
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f012 fb1f 	bl	8014390 <osThreadCreate>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <main+0x2d4>)
 8001d56:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8001d58:	4925      	ldr	r1, [pc, #148]	@ (8001df0 <main+0x2d8>)
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f003 f978 	bl	8005050 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8001d60:	4924      	ldr	r1, [pc, #144]	@ (8001df4 <main+0x2dc>)
 8001d62:	2001      	movs	r0, #1
 8001d64:	f003 f974 	bl	8005050 <LOGGER_SendFormatted>
  osKernelStart();
 8001d68:	f012 faef 	bl	801434a <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8001d6c:	4922      	ldr	r1, [pc, #136]	@ (8001df8 <main+0x2e0>)
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f003 f96e 	bl	8005050 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <main+0x25c>
 8001d78:	2000152c 	.word	0x2000152c
 8001d7c:	200011f4 	.word	0x200011f4
 8001d80:	200014cc 	.word	0x200014cc
 8001d84:	080196cc 	.word	0x080196cc
 8001d88:	080196d4 	.word	0x080196d4
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	080196f8 	.word	0x080196f8
 8001d94:	08019710 	.word	0x08019710
 8001d98:	08019728 	.word	0x08019728
 8001d9c:	08019740 	.word	0x08019740
 8001da0:	08019750 	.word	0x08019750
 8001da4:	08019768 	.word	0x08019768
 8001da8:	08019788 	.word	0x08019788
 8001dac:	080197a0 	.word	0x080197a0
 8001db0:	20000014 	.word	0x20000014
 8001db4:	080197e0 	.word	0x080197e0
 8001db8:	08019818 	.word	0x08019818
 8001dbc:	08019840 	.word	0x08019840
 8001dc0:	0801985c 	.word	0x0801985c
 8001dc4:	080199b0 	.word	0x080199b0
 8001dc8:	200012bc 	.word	0x200012bc
 8001dcc:	08019898 	.word	0x08019898
 8001dd0:	080198d4 	.word	0x080198d4
 8001dd4:	080199cc 	.word	0x080199cc
 8001dd8:	200012b0 	.word	0x200012b0
 8001ddc:	080199f4 	.word	0x080199f4
 8001de0:	200012b4 	.word	0x200012b4
 8001de4:	08019900 	.word	0x08019900
 8001de8:	08019a20 	.word	0x08019a20
 8001dec:	200012b8 	.word	0x200012b8
 8001df0:	08019934 	.word	0x08019934
 8001df4:	08019954 	.word	0x08019954
 8001df8:	08019978 	.word	0x08019978

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	@ 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	@ 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f015 f90c 	bl	8017028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e20:	f008 f958 	bl	800a0d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <SystemClock_Config+0xdc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed8 <SystemClock_Config+0xdc>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e30:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <SystemClock_Config+0xdc>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3c:	4b27      	ldr	r3, [pc, #156]	@ (8001edc <SystemClock_Config+0xe0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <SystemClock_Config+0xe0>)
 8001e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <SystemClock_Config+0xe0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e54:	2309      	movs	r3, #9
 8001e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	2302      	movs	r3, #2
 8001e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e6c:	2319      	movs	r3, #25
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001e74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e76:	2302      	movs	r3, #2
 8001e78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4618      	mov	r0, r3
 8001e84:	f008 fa48 	bl	800a318 <HAL_RCC_OscConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e8e:	f001 fdcd 	bl	8003a2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e92:	f008 f92f 	bl	800a0f4 <HAL_PWREx_EnableOverDrive>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001e9c:	f001 fdc6 	bl	8003a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2106      	movs	r1, #6
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f008 fcce 	bl	800a860 <HAL_RCC_ClockConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001eca:	f001 fdaf 	bl	8003a2c <Error_Handler>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3750      	adds	r7, #80	@ 0x50
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0a2      	sub	sp, #136	@ 0x88
 8001ee4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2284      	movs	r2, #132	@ 0x84
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f015 f89b 	bl	8017028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001ef2:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <PeriphCommonClock_Config+0x60>)
 8001ef4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001ef6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001efa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001efc:	2305      	movs	r3, #5
 8001efe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001f04:	2303      	movs	r3, #3
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f10:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001f12:	2300      	movs	r3, #0
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001f16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001f1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f008 feb2 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001f32:	f001 fd7b 	bl	8003a2c <Error_Handler>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3788      	adds	r7, #136	@ 0x88
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	00b00008 	.word	0x00b00008

08001f44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001f56:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f58:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <MX_ADC3_Init+0x9c>)
 8001f5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <MX_ADC3_Init+0xa0>)
 8001f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001fa4:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001fa6:	f003 fe4f 	bl	8005c48 <HAL_ADC_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001fb0:	f001 fd3c 	bl	8003a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_ADC3_Init+0x98>)
 8001fc6:	f003 fe83 	bl	8005cd0 <HAL_ADC_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001fd0:	f001 fd2c 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000a00 	.word	0x20000a00
 8001fe0:	40012200 	.word	0x40012200
 8001fe4:	0f000001 	.word	0x0f000001

08001fe8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <MX_CRC_Init+0x3c>)
 8001fee:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <MX_CRC_Init+0x40>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <MX_CRC_Init+0x3c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <MX_CRC_Init+0x3c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <MX_CRC_Init+0x3c>)
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002004:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <MX_CRC_Init+0x3c>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <MX_CRC_Init+0x3c>)
 800200c:	2201      	movs	r2, #1
 800200e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <MX_CRC_Init+0x3c>)
 8002012:	f004 f993 	bl	800633c <HAL_CRC_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800201c:	f001 fd06 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000a48 	.word	0x20000a48
 8002028:	40023000 	.word	0x40023000

0800202c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <MX_DCMI_Init+0x60>)
 8002032:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <MX_DCMI_Init+0x64>)
 8002034:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <MX_DCMI_Init+0x60>)
 8002038:	2200      	movs	r2, #0
 800203a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <MX_DCMI_Init+0x60>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <MX_DCMI_Init+0x60>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002048:	4b10      	ldr	r3, [pc, #64]	@ (800208c <MX_DCMI_Init+0x60>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800204e:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <MX_DCMI_Init+0x60>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002054:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <MX_DCMI_Init+0x60>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800205a:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <MX_DCMI_Init+0x60>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002060:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <MX_DCMI_Init+0x60>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <MX_DCMI_Init+0x60>)
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <MX_DCMI_Init+0x60>)
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <MX_DCMI_Init+0x60>)
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	@ (800208c <MX_DCMI_Init+0x60>)
 800207a:	f004 fa51 	bl	8006520 <HAL_DCMI_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002084:	f001 fcd2 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000a6c 	.word	0x20000a6c
 8002090:	50050000 	.word	0x50050000

08002094 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002098:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 800209a:	4a16      	ldr	r2, [pc, #88]	@ (80020f4 <MX_DMA2D_Init+0x60>)
 800209c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800209e:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80020aa:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80020c8:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020ca:	f004 ff17 	bl	8006efc <HAL_DMA2D_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80020d4:	f001 fcaa 	bl	8003a2c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80020d8:	2101      	movs	r1, #1
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_DMA2D_Init+0x5c>)
 80020dc:	f005 f868 	bl	80071b0 <HAL_DMA2D_ConfigLayer>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80020e6:	f001 fca1 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000abc 	.word	0x20000abc
 80020f4:	4002b000 	.word	0x4002b000

080020f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <MX_ETH_Init+0x84>)
 80020fe:	4a20      	ldr	r2, [pc, #128]	@ (8002180 <MX_ETH_Init+0x88>)
 8002100:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <MX_ETH_Init+0x8c>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002108:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <MX_ETH_Init+0x8c>)
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800210e:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <MX_ETH_Init+0x8c>)
 8002110:	22e1      	movs	r2, #225	@ 0xe1
 8002112:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002114:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <MX_ETH_Init+0x8c>)
 8002116:	2200      	movs	r2, #0
 8002118:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800211a:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <MX_ETH_Init+0x8c>)
 800211c:	2200      	movs	r2, #0
 800211e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <MX_ETH_Init+0x8c>)
 8002122:	2200      	movs	r2, #0
 8002124:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <MX_ETH_Init+0x84>)
 8002128:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <MX_ETH_Init+0x8c>)
 800212a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800212c:	4b13      	ldr	r3, [pc, #76]	@ (800217c <MX_ETH_Init+0x84>)
 800212e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002132:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_ETH_Init+0x84>)
 8002136:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <MX_ETH_Init+0x90>)
 8002138:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <MX_ETH_Init+0x84>)
 800213c:	4a13      	ldr	r2, [pc, #76]	@ (800218c <MX_ETH_Init+0x94>)
 800213e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002140:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_ETH_Init+0x84>)
 8002142:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002146:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002148:	480c      	ldr	r0, [pc, #48]	@ (800217c <MX_ETH_Init+0x84>)
 800214a:	f005 f8c3 	bl	80072d4 <HAL_ETH_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002154:	f001 fc6a 	bl	8003a2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002158:	2238      	movs	r2, #56	@ 0x38
 800215a:	2100      	movs	r1, #0
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <MX_ETH_Init+0x98>)
 800215e:	f014 ff63 	bl	8017028 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <MX_ETH_Init+0x98>)
 8002164:	2221      	movs	r2, #33	@ 0x21
 8002166:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <MX_ETH_Init+0x98>)
 800216a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800216e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002170:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <MX_ETH_Init+0x98>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000afc 	.word	0x20000afc
 8002180:	40028000 	.word	0x40028000
 8002184:	20001530 	.word	0x20001530
 8002188:	20000170 	.word	0x20000170
 800218c:	200000d0 	.word	0x200000d0
 8002190:	200009c8 	.word	0x200009c8

08002194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <MX_I2C1_Init+0x74>)
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <MX_I2C1_Init+0x78>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002210 <MX_I2C1_Init+0x7c>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ce:	480e      	ldr	r0, [pc, #56]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021d0:	f007 fb3a 	bl	8009848 <HAL_I2C_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021da:	f001 fc27 	bl	8003a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021de:	2100      	movs	r1, #0
 80021e0:	4809      	ldr	r0, [pc, #36]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021e2:	f007 fbcd 	bl	8009980 <HAL_I2CEx_ConfigAnalogFilter>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021ec:	f001 fc1e 	bl	8003a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021f0:	2100      	movs	r1, #0
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_I2C1_Init+0x74>)
 80021f4:	f007 fc0f 	bl	8009a16 <HAL_I2CEx_ConfigDigitalFilter>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021fe:	f001 fc15 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000bac 	.word	0x20000bac
 800220c:	40005400 	.word	0x40005400
 8002210:	00c0eaff 	.word	0x00c0eaff

08002214 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <MX_I2C3_Init+0x74>)
 800221a:	4a1c      	ldr	r2, [pc, #112]	@ (800228c <MX_I2C3_Init+0x78>)
 800221c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800221e:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002220:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <MX_I2C3_Init+0x7c>)
 8002222:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002224:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222a:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <MX_I2C3_Init+0x74>)
 800222c:	2201      	movs	r2, #1
 800222e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002236:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <MX_I2C3_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <MX_I2C3_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800224e:	480e      	ldr	r0, [pc, #56]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002250:	f007 fafa 	bl	8009848 <HAL_I2C_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800225a:	f001 fbe7 	bl	8003a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4809      	ldr	r0, [pc, #36]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002262:	f007 fb8d 	bl	8009980 <HAL_I2CEx_ConfigAnalogFilter>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800226c:	f001 fbde 	bl	8003a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002270:	2100      	movs	r1, #0
 8002272:	4805      	ldr	r0, [pc, #20]	@ (8002288 <MX_I2C3_Init+0x74>)
 8002274:	f007 fbcf 	bl	8009a16 <HAL_I2CEx_ConfigDigitalFilter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800227e:	f001 fbd5 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000c00 	.word	0x20000c00
 800228c:	40005c00 	.word	0x40005c00
 8002290:	00c0eaff 	.word	0x00c0eaff

08002294 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	@ 0x38
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2234      	movs	r2, #52	@ 0x34
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f014 fec1 	bl	8017028 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002394 <MX_LTDC_Init+0x100>)
 80022aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022ac:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022b2:	4b37      	ldr	r3, [pc, #220]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022b8:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022be:	4b34      	ldr	r3, [pc, #208]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80022c4:	4b32      	ldr	r3, [pc, #200]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022c6:	2228      	movs	r2, #40	@ 0x28
 80022c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80022ca:	4b31      	ldr	r3, [pc, #196]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022cc:	2209      	movs	r2, #9
 80022ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022d2:	2235      	movs	r2, #53	@ 0x35
 80022d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80022d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022d8:	220b      	movs	r2, #11
 80022da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80022dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022de:	f240 2215 	movw	r2, #533	@ 0x215
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80022e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022e6:	f240 121b 	movw	r2, #283	@ 0x11b
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022ee:	f240 2235 	movw	r2, #565	@ 0x235
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80022f4:	4b26      	ldr	r3, [pc, #152]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022f6:	f240 121d 	movw	r2, #285	@ 0x11d
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <MX_LTDC_Init+0xfc>)
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002304:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <MX_LTDC_Init+0xfc>)
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800230c:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <MX_LTDC_Init+0xfc>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002314:	481e      	ldr	r0, [pc, #120]	@ (8002390 <MX_LTDC_Init+0xfc>)
 8002316:	f007 fbca 	bl	8009aae <HAL_LTDC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002320:	f001 fb84 	bl	8003a2c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002328:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800232c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002332:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002336:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002338:	2302      	movs	r3, #2
 800233a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800233c:	23ff      	movs	r3, #255	@ 0xff
 800233e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002344:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002348:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800234a:	2307      	movs	r3, #7
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800234e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002354:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800235a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	@ (8002390 <MX_LTDC_Init+0xfc>)
 800237a:	f007 fcf7 	bl	8009d6c <HAL_LTDC_ConfigLayer>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002384:	f001 fb52 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3738      	adds	r7, #56	@ 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000c54 	.word	0x20000c54
 8002394:	40016800 	.word	0x40016800

08002398 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <MX_QUADSPI_Init+0x54>)
 80023a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023aa:	2204      	movs	r2, #4
 80023ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023b0:	2210      	movs	r2, #16
 80023b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023b6:	2218      	movs	r2, #24
 80023b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023bc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80023c0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MX_QUADSPI_Init+0x50>)
 80023d6:	f007 fedd 	bl	800a194 <HAL_QSPI_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80023e0:	f001 fb24 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000cfc 	.word	0x20000cfc
 80023ec:	a0001000 	.word	0xa0001000

080023f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b090      	sub	sp, #64	@ 0x40
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800240a:	463b      	mov	r3, r7
 800240c:	2228      	movs	r2, #40	@ 0x28
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f014 fe09 	bl	8017028 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002416:	4b46      	ldr	r3, [pc, #280]	@ (8002530 <MX_RTC_Init+0x140>)
 8002418:	4a46      	ldr	r2, [pc, #280]	@ (8002534 <MX_RTC_Init+0x144>)
 800241a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800241c:	4b44      	ldr	r3, [pc, #272]	@ (8002530 <MX_RTC_Init+0x140>)
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002422:	4b43      	ldr	r3, [pc, #268]	@ (8002530 <MX_RTC_Init+0x140>)
 8002424:	227f      	movs	r2, #127	@ 0x7f
 8002426:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002428:	4b41      	ldr	r3, [pc, #260]	@ (8002530 <MX_RTC_Init+0x140>)
 800242a:	22ff      	movs	r2, #255	@ 0xff
 800242c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800242e:	4b40      	ldr	r3, [pc, #256]	@ (8002530 <MX_RTC_Init+0x140>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002434:	4b3e      	ldr	r3, [pc, #248]	@ (8002530 <MX_RTC_Init+0x140>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800243a:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <MX_RTC_Init+0x140>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002440:	483b      	ldr	r0, [pc, #236]	@ (8002530 <MX_RTC_Init+0x140>)
 8002442:	f009 f955 	bl	800b6f0 <HAL_RTC_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800244c:	f001 faee 	bl	8003a2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800246a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246e:	2201      	movs	r2, #1
 8002470:	4619      	mov	r1, r3
 8002472:	482f      	ldr	r0, [pc, #188]	@ (8002530 <MX_RTC_Init+0x140>)
 8002474:	f009 f9be 	bl	800b7f4 <HAL_RTC_SetTime>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800247e:	f001 fad5 	bl	8003a2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800249a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800249e:	2201      	movs	r2, #1
 80024a0:	4619      	mov	r1, r3
 80024a2:	4823      	ldr	r0, [pc, #140]	@ (8002530 <MX_RTC_Init+0x140>)
 80024a4:	f009 fa40 	bl	800b928 <HAL_RTC_SetDate>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80024ae:	f001 fabd 	bl	8003a2c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80024dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	2201      	movs	r2, #1
 80024e6:	4619      	mov	r1, r3
 80024e8:	4811      	ldr	r0, [pc, #68]	@ (8002530 <MX_RTC_Init+0x140>)
 80024ea:	f009 faa1 	bl	800ba30 <HAL_RTC_SetAlarm>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80024f4:	f001 fa9a 	bl	8003a2c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80024f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80024fe:	463b      	mov	r3, r7
 8002500:	2201      	movs	r2, #1
 8002502:	4619      	mov	r1, r3
 8002504:	480a      	ldr	r0, [pc, #40]	@ (8002530 <MX_RTC_Init+0x140>)
 8002506:	f009 fa93 	bl	800ba30 <HAL_RTC_SetAlarm>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002510:	f001 fa8c 	bl	8003a2c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002514:	2202      	movs	r2, #2
 8002516:	2100      	movs	r1, #0
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_RTC_Init+0x140>)
 800251a:	f009 fc53 	bl	800bdc4 <HAL_RTCEx_SetTimeStamp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002524:	f001 fa82 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3740      	adds	r7, #64	@ 0x40
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000d48 	.word	0x20000d48
 8002534:	40002800 	.word	0x40002800

08002538 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800253c:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800253e:	4a4e      	ldr	r2, [pc, #312]	@ (8002678 <MX_SAI2_Init+0x140>)
 8002540:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002542:	4b4c      	ldr	r3, [pc, #304]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002548:	4b4a      	ldr	r3, [pc, #296]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800254e:	4b49      	ldr	r3, [pc, #292]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002550:	2240      	movs	r2, #64	@ 0x40
 8002552:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002554:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002556:	2200      	movs	r2, #0
 8002558:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800255a:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800255c:	2200      	movs	r2, #0
 800255e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002560:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800256c:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002572:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002578:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800257a:	4a40      	ldr	r2, [pc, #256]	@ (800267c <MX_SAI2_Init+0x144>)
 800257c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002584:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800258a:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002590:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002592:	2200      	movs	r2, #0
 8002594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002596:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <MX_SAI2_Init+0x13c>)
 8002598:	2208      	movs	r2, #8
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800259c:	4b35      	ldr	r3, [pc, #212]	@ (8002674 <MX_SAI2_Init+0x13c>)
 800259e:	2201      	movs	r2, #1
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80025a2:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80025ae:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80025b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80025c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80025c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80025cc:	4829      	ldr	r0, [pc, #164]	@ (8002674 <MX_SAI2_Init+0x13c>)
 80025ce:	f009 fc61 	bl	800be94 <HAL_SAI_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80025d8:	f001 fa28 	bl	8003a2c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80025dc:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <MX_SAI2_Init+0x148>)
 80025de:	4a29      	ldr	r2, [pc, #164]	@ (8002684 <MX_SAI2_Init+0x14c>)
 80025e0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80025e2:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <MX_SAI2_Init+0x148>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80025e8:	4b25      	ldr	r3, [pc, #148]	@ (8002680 <MX_SAI2_Init+0x148>)
 80025ea:	2203      	movs	r2, #3
 80025ec:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <MX_SAI2_Init+0x148>)
 80025f0:	2240      	movs	r2, #64	@ 0x40
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80025f4:	4b22      	ldr	r3, [pc, #136]	@ (8002680 <MX_SAI2_Init+0x148>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80025fa:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <MX_SAI2_Init+0x148>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002600:	4b1f      	ldr	r3, [pc, #124]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002602:	2201      	movs	r2, #1
 8002604:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800260c:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <MX_SAI2_Init+0x148>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002618:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <MX_SAI2_Init+0x148>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800261e:	4b18      	ldr	r3, [pc, #96]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002626:	2200      	movs	r2, #0
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <MX_SAI2_Init+0x148>)
 800262c:	2208      	movs	r2, #8
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002632:	2201      	movs	r2, #1
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002638:	2200      	movs	r2, #0
 800263a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800263c:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <MX_SAI2_Init+0x148>)
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002644:	2200      	movs	r2, #0
 8002646:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <MX_SAI2_Init+0x148>)
 800264a:	2200      	movs	r2, #0
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002650:	2200      	movs	r2, #0
 8002652:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002656:	2201      	movs	r2, #1
 8002658:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <MX_SAI2_Init+0x148>)
 800265c:	2200      	movs	r2, #0
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002660:	4807      	ldr	r0, [pc, #28]	@ (8002680 <MX_SAI2_Init+0x148>)
 8002662:	f009 fc17 	bl	800be94 <HAL_SAI_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800266c:	f001 f9de 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000d68 	.word	0x20000d68
 8002678:	40015c04 	.word	0x40015c04
 800267c:	0002ee00 	.word	0x0002ee00
 8002680:	20000dec 	.word	0x20000dec
 8002684:	40015c24 	.word	0x40015c24

08002688 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <MX_SDMMC1_SD_Init+0x48>)
 8002690:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 80026ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026b0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 80026b4:	2208      	movs	r2, #8
 80026b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80026b8:	4804      	ldr	r0, [pc, #16]	@ (80026cc <MX_SDMMC1_SD_Init+0x44>)
 80026ba:	f009 fda1 	bl	800c200 <HAL_SD_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 80026c4:	f001 f9b2 	bl	8003a2c <Error_Handler>
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000e70 	.word	0x20000e70
 80026d0:	40012c00 	.word	0x40012c00

080026d4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80026d8:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 80026da:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80026de:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80026e6:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80026f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80026fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002710:	4b07      	ldr	r3, [pc, #28]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 8002718:	2200      	movs	r2, #0
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800271c:	4804      	ldr	r0, [pc, #16]	@ (8002730 <MX_SPDIFRX_Init+0x5c>)
 800271e:	f00a fd2b 	bl	800d178 <HAL_SPDIFRX_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002728:	f001 f980 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000ef4 	.word	0x20000ef4

08002734 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <MX_SPI2_Init+0x74>)
 800273a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <MX_SPI2_Init+0x78>)
 800273c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800273e:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002744:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800274c:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <MX_SPI2_Init+0x74>)
 800274e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002752:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <MX_SPI2_Init+0x74>)
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002766:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <MX_SPI2_Init+0x74>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <MX_SPI2_Init+0x74>)
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002780:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002782:	2207      	movs	r2, #7
 8002784:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <MX_SPI2_Init+0x74>)
 800278e:	2208      	movs	r2, #8
 8002790:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	@ (80027a8 <MX_SPI2_Init+0x74>)
 8002794:	f00a fd4c 	bl	800d230 <HAL_SPI_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800279e:	f001 f945 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000f40 	.word	0x20000f40
 80027ac:	40003800 	.word	0x40003800

080027b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b09a      	sub	sp, #104	@ 0x68
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
 80027e0:	615a      	str	r2, [r3, #20]
 80027e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	222c      	movs	r2, #44	@ 0x2c
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f014 fc1c 	bl	8017028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027f0:	4b43      	ldr	r3, [pc, #268]	@ (8002900 <MX_TIM1_Init+0x150>)
 80027f2:	4a44      	ldr	r2, [pc, #272]	@ (8002904 <MX_TIM1_Init+0x154>)
 80027f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027f6:	4b42      	ldr	r3, [pc, #264]	@ (8002900 <MX_TIM1_Init+0x150>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fc:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <MX_TIM1_Init+0x150>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002802:	4b3f      	ldr	r3, [pc, #252]	@ (8002900 <MX_TIM1_Init+0x150>)
 8002804:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280a:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <MX_TIM1_Init+0x150>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002810:	4b3b      	ldr	r3, [pc, #236]	@ (8002900 <MX_TIM1_Init+0x150>)
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <MX_TIM1_Init+0x150>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800281c:	4838      	ldr	r0, [pc, #224]	@ (8002900 <MX_TIM1_Init+0x150>)
 800281e:	f00a fdb2 	bl	800d386 <HAL_TIM_Base_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002828:	f001 f900 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002830:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002832:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002836:	4619      	mov	r1, r3
 8002838:	4831      	ldr	r0, [pc, #196]	@ (8002900 <MX_TIM1_Init+0x150>)
 800283a:	f00b f8e5 	bl	800da08 <HAL_TIM_ConfigClockSource>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002844:	f001 f8f2 	bl	8003a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002848:	482d      	ldr	r0, [pc, #180]	@ (8002900 <MX_TIM1_Init+0x150>)
 800284a:	f00a fe6b 	bl	800d524 <HAL_TIM_PWM_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002854:	f001 f8ea 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002864:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002868:	4619      	mov	r1, r3
 800286a:	4825      	ldr	r0, [pc, #148]	@ (8002900 <MX_TIM1_Init+0x150>)
 800286c:	f00b fd5c 	bl	800e328 <HAL_TIMEx_MasterConfigSynchronization>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002876:	f001 f8d9 	bl	8003a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287a:	2360      	movs	r3, #96	@ 0x60
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002882:	2300      	movs	r3, #0
 8002884:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002886:	2300      	movs	r3, #0
 8002888:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002896:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800289a:	2200      	movs	r2, #0
 800289c:	4619      	mov	r1, r3
 800289e:	4818      	ldr	r0, [pc, #96]	@ (8002900 <MX_TIM1_Init+0x150>)
 80028a0:	f00a ff9e 	bl	800d7e0 <HAL_TIM_PWM_ConfigChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80028aa:	f001 f8bf 	bl	8003a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4807      	ldr	r0, [pc, #28]	@ (8002900 <MX_TIM1_Init+0x150>)
 80028e4:	f00b fdae 	bl	800e444 <HAL_TIMEx_ConfigBreakDeadTime>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80028ee:	f001 f89d 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028f2:	4803      	ldr	r0, [pc, #12]	@ (8002900 <MX_TIM1_Init+0x150>)
 80028f4:	f001 ff0e 	bl	8004714 <HAL_TIM_MspPostInit>

}
 80028f8:	bf00      	nop
 80028fa:	3768      	adds	r7, #104	@ 0x68
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000fa4 	.word	0x20000fa4
 8002904:	40010000 	.word	0x40010000

08002908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	@ 0x38
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002928:	463b      	mov	r3, r7
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	615a      	str	r2, [r3, #20]
 8002938:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800293a:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 800293c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002940:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002942:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295c:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002962:	4823      	ldr	r0, [pc, #140]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 8002964:	f00a fd0f 	bl	800d386 <HAL_TIM_Base_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800296e:	f001 f85d 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002978:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800297c:	4619      	mov	r1, r3
 800297e:	481c      	ldr	r0, [pc, #112]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 8002980:	f00b f842 	bl	800da08 <HAL_TIM_ConfigClockSource>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800298a:	f001 f84f 	bl	8003a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800298e:	4818      	ldr	r0, [pc, #96]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 8002990:	f00a fdc8 	bl	800d524 <HAL_TIM_PWM_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800299a:	f001 f847 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	4810      	ldr	r0, [pc, #64]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 80029ae:	f00b fcbb 	bl	800e328 <HAL_TIMEx_MasterConfigSynchronization>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80029b8:	f001 f838 	bl	8003a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029bc:	2360      	movs	r3, #96	@ 0x60
 80029be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029cc:	463b      	mov	r3, r7
 80029ce:	2200      	movs	r2, #0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4807      	ldr	r0, [pc, #28]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 80029d4:	f00a ff04 	bl	800d7e0 <HAL_TIM_PWM_ConfigChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80029de:	f001 f825 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029e2:	4803      	ldr	r0, [pc, #12]	@ (80029f0 <MX_TIM2_Init+0xe8>)
 80029e4:	f001 fe96 	bl	8004714 <HAL_TIM_MspPostInit>

}
 80029e8:	bf00      	nop
 80029ea:	3738      	adds	r7, #56	@ 0x38
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000ff0 	.word	0x20000ff0

080029f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	@ 0x38
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a14:	463b      	mov	r3, r7
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	611a      	str	r2, [r3, #16]
 8002a22:	615a      	str	r2, [r3, #20]
 8002a24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a26:	4b2d      	ldr	r3, [pc, #180]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a28:	4a2d      	ldr	r2, [pc, #180]	@ (8002ae0 <MX_TIM3_Init+0xec>)
 8002a2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a32:	4b2a      	ldr	r3, [pc, #168]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a38:	4b28      	ldr	r3, [pc, #160]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a40:	4b26      	ldr	r3, [pc, #152]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	4b25      	ldr	r3, [pc, #148]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a4c:	4823      	ldr	r0, [pc, #140]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a4e:	f00a fc9a 	bl	800d386 <HAL_TIM_Base_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a58:	f000 ffe8 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a66:	4619      	mov	r1, r3
 8002a68:	481c      	ldr	r0, [pc, #112]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a6a:	f00a ffcd 	bl	800da08 <HAL_TIM_ConfigClockSource>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a74:	f000 ffda 	bl	8003a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a78:	4818      	ldr	r0, [pc, #96]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a7a:	f00a fd53 	bl	800d524 <HAL_TIM_PWM_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a84:	f000 ffd2 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	4811      	ldr	r0, [pc, #68]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002a98:	f00b fc46 	bl	800e328 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002aa2:	f000 ffc3 	bl	8003a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa6:	2360      	movs	r3, #96	@ 0x60
 8002aa8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4807      	ldr	r0, [pc, #28]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002abe:	f00a fe8f 	bl	800d7e0 <HAL_TIM_PWM_ConfigChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ac8:	f000 ffb0 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002acc:	4803      	ldr	r0, [pc, #12]	@ (8002adc <MX_TIM3_Init+0xe8>)
 8002ace:	f001 fe21 	bl	8004714 <HAL_TIM_MspPostInit>

}
 8002ad2:	bf00      	nop
 8002ad4:	3738      	adds	r7, #56	@ 0x38
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000103c 	.word	0x2000103c
 8002ae0:	40000400 	.word	0x40000400

08002ae4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08e      	sub	sp, #56	@ 0x38
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b04:	463b      	mov	r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b16:	4b2d      	ldr	r3, [pc, #180]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b18:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <MX_TIM5_Init+0xec>)
 8002b1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b22:	4b2a      	ldr	r3, [pc, #168]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b28:	4b28      	ldr	r3, [pc, #160]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b30:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b36:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b3c:	4823      	ldr	r0, [pc, #140]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b3e:	f00a fc22 	bl	800d386 <HAL_TIM_Base_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002b48:	f000 ff70 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b56:	4619      	mov	r1, r3
 8002b58:	481c      	ldr	r0, [pc, #112]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b5a:	f00a ff55 	bl	800da08 <HAL_TIM_ConfigClockSource>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b64:	f000 ff62 	bl	8003a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b68:	4818      	ldr	r0, [pc, #96]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b6a:	f00a fcdb 	bl	800d524 <HAL_TIM_PWM_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b74:	f000 ff5a 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	4619      	mov	r1, r3
 8002b86:	4811      	ldr	r0, [pc, #68]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002b88:	f00b fbce 	bl	800e328 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b92:	f000 ff4b 	bl	8003a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b96:	2360      	movs	r3, #96	@ 0x60
 8002b98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	220c      	movs	r2, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	4807      	ldr	r0, [pc, #28]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002bae:	f00a fe17 	bl	800d7e0 <HAL_TIM_PWM_ConfigChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002bb8:	f000 ff38 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002bbc:	4803      	ldr	r0, [pc, #12]	@ (8002bcc <MX_TIM5_Init+0xe8>)
 8002bbe:	f001 fda9 	bl	8004714 <HAL_TIM_MspPostInit>

}
 8002bc2:	bf00      	nop
 8002bc4:	3738      	adds	r7, #56	@ 0x38
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20001088 	.word	0x20001088
 8002bd0:	40000c00 	.word	0x40000c00

08002bd4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002bf2:	4b20      	ldr	r3, [pc, #128]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002bf4:	4a20      	ldr	r2, [pc, #128]	@ (8002c78 <MX_TIM8_Init+0xa4>)
 8002bf6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c18:	4b16      	ldr	r3, [pc, #88]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c1e:	4815      	ldr	r0, [pc, #84]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c20:	f00a fbb1 	bl	800d386 <HAL_TIM_Base_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002c2a:	f000 feff 	bl	8003a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c34:	f107 0310 	add.w	r3, r7, #16
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480e      	ldr	r0, [pc, #56]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c3c:	f00a fee4 	bl	800da08 <HAL_TIM_ConfigClockSource>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002c46:	f000 fef1 	bl	8003a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4806      	ldr	r0, [pc, #24]	@ (8002c74 <MX_TIM8_Init+0xa0>)
 8002c5c:	f00b fb64 	bl	800e328 <HAL_TIMEx_MasterConfigSynchronization>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c66:	f000 fee1 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200010d4 	.word	0x200010d4
 8002c78:	40010400 	.word	0x40010400

08002c7c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
 8002c90:	615a      	str	r2, [r3, #20]
 8002c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002c96:	4a1b      	ldr	r2, [pc, #108]	@ (8002d04 <MX_TIM12_Init+0x88>)
 8002c98:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002c9a:	4b19      	ldr	r3, [pc, #100]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002ca8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cae:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002cba:	4811      	ldr	r0, [pc, #68]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002cbc:	f00a fc32 	bl	800d524 <HAL_TIM_PWM_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002cc6:	f000 feb1 	bl	8003a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cca:	2360      	movs	r3, #96	@ 0x60
 8002ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4807      	ldr	r0, [pc, #28]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002ce2:	f00a fd7d 	bl	800d7e0 <HAL_TIM_PWM_ConfigChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002cec:	f000 fe9e 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002cf0:	4803      	ldr	r0, [pc, #12]	@ (8002d00 <MX_TIM12_Init+0x84>)
 8002cf2:	f001 fd0f 	bl	8004714 <HAL_TIM_MspPostInit>

}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20001120 	.word	0x20001120
 8002d04:	40001800 	.word	0x40001800

08002d08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <MX_USART1_UART_Init+0x5c>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	@ (8002d60 <MX_USART1_UART_Init+0x58>)
 8002d4c:	f00b fc16 	bl	800e57c <HAL_UART_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d56:	f000 fe69 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000116c 	.word	0x2000116c
 8002d64:	40011000 	.word	0x40011000

08002d68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d6e:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <MX_USART6_UART_Init+0x5c>)
 8002d70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d72:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d80:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d8e:	220c      	movs	r2, #12
 8002d90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d98:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <MX_USART6_UART_Init+0x58>)
 8002dac:	f00b fbe6 	bl	800e57c <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002db6:	f000 fe39 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200011f4 	.word	0x200011f4
 8002dc4:	40011400 	.word	0x40011400

08002dc8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	615a      	str	r2, [r3, #20]
 8002dde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002de0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002de2:	4a20      	ldr	r2, [pc, #128]	@ (8002e64 <MX_FMC_Init+0x9c>)
 8002de4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002de6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002df2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002df4:	2204      	movs	r2, #4
 8002df6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e00:	2240      	movs	r2, #64	@ 0x40
 8002e02:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e06:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002e0a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e18:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e20:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002e30:	2304      	movs	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002e34:	2307      	movs	r3, #7
 8002e36:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4805      	ldr	r0, [pc, #20]	@ (8002e60 <MX_FMC_Init+0x98>)
 8002e4a:	f00a f961 	bl	800d110 <HAL_SDRAM_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002e54:	f000 fdea 	bl	8003a2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000127c 	.word	0x2000127c
 8002e64:	a0000140 	.word	0xa0000140

08002e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b090      	sub	sp, #64	@ 0x40
 8002e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e7e:	4bb0      	ldr	r3, [pc, #704]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	4aaf      	ldr	r2, [pc, #700]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002e84:	f043 0310 	orr.w	r3, r3, #16
 8002e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8a:	4bad      	ldr	r3, [pc, #692]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e96:	4baa      	ldr	r3, [pc, #680]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4aa9      	ldr	r2, [pc, #676]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4ba7      	ldr	r3, [pc, #668]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	4ba4      	ldr	r3, [pc, #656]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	4aa3      	ldr	r2, [pc, #652]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eba:	4ba1      	ldr	r3, [pc, #644]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a9d      	ldr	r2, [pc, #628]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ede:	4b98      	ldr	r3, [pc, #608]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	4a97      	ldr	r2, [pc, #604]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eea:	4b95      	ldr	r3, [pc, #596]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a91      	ldr	r2, [pc, #580]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b8f      	ldr	r3, [pc, #572]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a8b      	ldr	r2, [pc, #556]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b89      	ldr	r3, [pc, #548]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f26:	4b86      	ldr	r3, [pc, #536]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4a85      	ldr	r2, [pc, #532]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f32:	4b83      	ldr	r3, [pc, #524]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f3e:	4b80      	ldr	r3, [pc, #512]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a7f      	ldr	r2, [pc, #508]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f56:	4b7a      	ldr	r3, [pc, #488]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a79      	ldr	r2, [pc, #484]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f5c:	f043 0320 	orr.w	r3, r3, #32
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b77      	ldr	r3, [pc, #476]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f6e:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	4a73      	ldr	r2, [pc, #460]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7a:	4b71      	ldr	r3, [pc, #452]	@ (8003140 <MX_GPIO_Init+0x2d8>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002f86:	2201      	movs	r2, #1
 8002f88:	2120      	movs	r1, #32
 8002f8a:	486e      	ldr	r0, [pc, #440]	@ (8003144 <MX_GPIO_Init+0x2dc>)
 8002f8c:	f004 fe9c 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	210c      	movs	r1, #12
 8002f94:	486c      	ldr	r0, [pc, #432]	@ (8003148 <MX_GPIO_Init+0x2e0>)
 8002f96:	f004 fe97 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2108      	movs	r1, #8
 8002f9e:	486b      	ldr	r0, [pc, #428]	@ (800314c <MX_GPIO_Init+0x2e4>)
 8002fa0:	f004 fe92 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002faa:	4867      	ldr	r0, [pc, #412]	@ (8003148 <MX_GPIO_Init+0x2e0>)
 8002fac:	f004 fe8c 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fb6:	4866      	ldr	r0, [pc, #408]	@ (8003150 <MX_GPIO_Init+0x2e8>)
 8002fb8:	f004 fe86 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	21c8      	movs	r1, #200	@ 0xc8
 8002fc0:	4864      	ldr	r0, [pc, #400]	@ (8003154 <MX_GPIO_Init+0x2ec>)
 8002fc2:	f004 fe81 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	485f      	ldr	r0, [pc, #380]	@ (8003158 <MX_GPIO_Init+0x2f0>)
 8002fda:	f004 fcc9 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002fde:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8002fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4858      	ldr	r0, [pc, #352]	@ (800315c <MX_GPIO_Init+0x2f4>)
 8002ffc:	f004 fcb8 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003006:	2300      	movs	r3, #0
 8003008:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800300e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003012:	4619      	mov	r1, r3
 8003014:	4852      	ldr	r0, [pc, #328]	@ (8003160 <MX_GPIO_Init+0x2f8>)
 8003016:	f004 fcab 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800301a:	2340      	movs	r3, #64	@ 0x40
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800301e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003022:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800302c:	4619      	mov	r1, r3
 800302e:	4845      	ldr	r0, [pc, #276]	@ (8003144 <MX_GPIO_Init+0x2dc>)
 8003030:	f004 fc9e 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003034:	2320      	movs	r3, #32
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003038:	2301      	movs	r3, #1
 800303a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003048:	4619      	mov	r1, r3
 800304a:	483e      	ldr	r0, [pc, #248]	@ (8003144 <MX_GPIO_Init+0x2dc>)
 800304c:	f004 fc90 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003050:	f241 030c 	movw	r3, #4108	@ 0x100c
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003056:	2301      	movs	r3, #1
 8003058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003062:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003066:	4619      	mov	r1, r3
 8003068:	4837      	ldr	r0, [pc, #220]	@ (8003148 <MX_GPIO_Init+0x2e0>)
 800306a:	f004 fc81 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800306e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800307c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003080:	4619      	mov	r1, r3
 8003082:	4838      	ldr	r0, [pc, #224]	@ (8003164 <MX_GPIO_Init+0x2fc>)
 8003084:	f004 fc74 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003088:	2308      	movs	r3, #8
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800309c:	4619      	mov	r1, r3
 800309e:	482b      	ldr	r0, [pc, #172]	@ (800314c <MX_GPIO_Init+0x2e4>)
 80030a0:	f004 fc66 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80030a4:	2310      	movs	r3, #16
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030b4:	4619      	mov	r1, r3
 80030b6:	4823      	ldr	r0, [pc, #140]	@ (8003144 <MX_GPIO_Init+0x2dc>)
 80030b8:	f004 fc5a 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80030bc:	f248 0304 	movw	r3, #32772	@ 0x8004
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c2:	2300      	movs	r3, #0
 80030c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ce:	4619      	mov	r1, r3
 80030d0:	481f      	ldr	r0, [pc, #124]	@ (8003150 <MX_GPIO_Init+0x2e8>)
 80030d2:	f004 fc4d 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80030d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030dc:	2301      	movs	r3, #1
 80030de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80030e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ec:	4619      	mov	r1, r3
 80030ee:	4818      	ldr	r0, [pc, #96]	@ (8003150 <MX_GPIO_Init+0x2e8>)
 80030f0:	f004 fc3e 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80030f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003108:	4619      	mov	r1, r3
 800310a:	480f      	ldr	r0, [pc, #60]	@ (8003148 <MX_GPIO_Init+0x2e0>)
 800310c:	f004 fc30 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003110:	2310      	movs	r3, #16
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003120:	230a      	movs	r3, #10
 8003122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003128:	4619      	mov	r1, r3
 800312a:	4809      	ldr	r0, [pc, #36]	@ (8003150 <MX_GPIO_Init+0x2e8>)
 800312c:	f004 fc20 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003130:	23c8      	movs	r3, #200	@ 0xc8
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003134:	2301      	movs	r3, #1
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	637b      	str	r3, [r7, #52]	@ 0x34
 800313c:	e014      	b.n	8003168 <MX_GPIO_Init+0x300>
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	40022000 	.word	0x40022000
 800314c:	40022800 	.word	0x40022800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40021800 	.word	0x40021800
 8003158:	40021000 	.word	0x40021000
 800315c:	40020400 	.word	0x40020400
 8003160:	40022400 	.word	0x40022400
 8003164:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800316c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003170:	4619      	mov	r1, r3
 8003172:	4819      	ldr	r0, [pc, #100]	@ (80031d8 <MX_GPIO_Init+0x370>)
 8003174:	f004 fbfc 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003178:	2305      	movs	r3, #5
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003188:	230a      	movs	r3, #10
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003190:	4619      	mov	r1, r3
 8003192:	4812      	ldr	r0, [pc, #72]	@ (80031dc <MX_GPIO_Init+0x374>)
 8003194:	f004 fbec 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003198:	2304      	movs	r3, #4
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319c:	2300      	movs	r3, #0
 800319e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80031a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031a8:	4619      	mov	r1, r3
 80031aa:	480b      	ldr	r0, [pc, #44]	@ (80031d8 <MX_GPIO_Init+0x370>)
 80031ac:	f004 fbe0 	bl	8007970 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80031b0:	2328      	movs	r3, #40	@ 0x28
 80031b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031c0:	230a      	movs	r3, #10
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031c8:	4619      	mov	r1, r3
 80031ca:	4805      	ldr	r0, [pc, #20]	@ (80031e0 <MX_GPIO_Init+0x378>)
 80031cc:	f004 fbd0 	bl	8007970 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80031d0:	bf00      	nop
 80031d2:	3740      	adds	r7, #64	@ 0x40
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021800 	.word	0x40021800
 80031dc:	40020800 	.word	0x40020800
 80031e0:	40020000 	.word	0x40020000

080031e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b096      	sub	sp, #88	@ 0x58
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 80031ec:	49b6      	ldr	r1, [pc, #728]	@ (80034c8 <StartDefaultTask+0x2e4>)
 80031ee:	2002      	movs	r0, #2
 80031f0:	f001 ff2e 	bl	8005050 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 80031f4:	49b5      	ldr	r1, [pc, #724]	@ (80034cc <StartDefaultTask+0x2e8>)
 80031f6:	2001      	movs	r0, #1
 80031f8:	f001 ff2a 	bl	8005050 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80031fc:	49b4      	ldr	r1, [pc, #720]	@ (80034d0 <StartDefaultTask+0x2ec>)
 80031fe:	2001      	movs	r0, #1
 8003200:	f001 ff26 	bl	8005050 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003204:	49b3      	ldr	r1, [pc, #716]	@ (80034d4 <StartDefaultTask+0x2f0>)
 8003206:	2001      	movs	r0, #1
 8003208:	f001 ff22 	bl	8005050 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 800320c:	4bb2      	ldr	r3, [pc, #712]	@ (80034d8 <StartDefaultTask+0x2f4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4ab2      	ldr	r2, [pc, #712]	@ (80034dc <StartDefaultTask+0x2f8>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0c9b      	lsrs	r3, r3, #18
 8003218:	461a      	mov	r2, r3
 800321a:	49b1      	ldr	r1, [pc, #708]	@ (80034e0 <StartDefaultTask+0x2fc>)
 800321c:	2001      	movs	r0, #1
 800321e:	f001 ff17 	bl	8005050 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8003222:	49b0      	ldr	r1, [pc, #704]	@ (80034e4 <StartDefaultTask+0x300>)
 8003224:	2001      	movs	r0, #1
 8003226:	f001 ff13 	bl	8005050 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 800322a:	49af      	ldr	r1, [pc, #700]	@ (80034e8 <StartDefaultTask+0x304>)
 800322c:	2001      	movs	r0, #1
 800322e:	f001 ff0f 	bl	8005050 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8003232:	49ae      	ldr	r1, [pc, #696]	@ (80034ec <StartDefaultTask+0x308>)
 8003234:	2001      	movs	r0, #1
 8003236:	f001 ff0b 	bl	8005050 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 800323a:	49ad      	ldr	r1, [pc, #692]	@ (80034f0 <StartDefaultTask+0x30c>)
 800323c:	2001      	movs	r0, #1
 800323e:	f001 ff07 	bl	8005050 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 8003242:	49ac      	ldr	r1, [pc, #688]	@ (80034f4 <StartDefaultTask+0x310>)
 8003244:	2001      	movs	r0, #1
 8003246:	f001 ff03 	bl	8005050 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 800324a:	f7fd ff85 	bl	8001158 <SDStorage_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	4aa9      	ldr	r2, [pc, #676]	@ (80034f8 <StartDefaultTask+0x314>)
 8003252:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003254:	4ba8      	ldr	r3, [pc, #672]	@ (80034f8 <StartDefaultTask+0x314>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d124      	bne.n	80032a6 <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 800325c:	49a7      	ldr	r1, [pc, #668]	@ (80034fc <StartDefaultTask+0x318>)
 800325e:	2001      	movs	r0, #1
 8003260:	f001 fef6 	bl	8005050 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 8003264:	49a6      	ldr	r1, [pc, #664]	@ (8003500 <StartDefaultTask+0x31c>)
 8003266:	2001      	movs	r0, #1
 8003268:	f001 fef2 	bl	8005050 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 800326c:	4ba5      	ldr	r3, [pc, #660]	@ (8003504 <StartDefaultTask+0x320>)
 800326e:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 8003270:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003272:	f7fc ffd7 	bl	8000224 <strlen>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800327c:	f7fe f988 	bl	8001590 <SDStorage_WriteLog>
 8003280:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 8003282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 8003288:	499f      	ldr	r1, [pc, #636]	@ (8003508 <StartDefaultTask+0x324>)
 800328a:	2001      	movs	r0, #1
 800328c:	f001 fee0 	bl	8005050 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 8003290:	499e      	ldr	r1, [pc, #632]	@ (800350c <StartDefaultTask+0x328>)
 8003292:	2001      	movs	r0, #1
 8003294:	f001 fedc 	bl	8005050 <LOGGER_SendFormatted>
 8003298:	e010      	b.n	80032bc <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 800329a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800329c:	499c      	ldr	r1, [pc, #624]	@ (8003510 <StartDefaultTask+0x32c>)
 800329e:	2003      	movs	r0, #3
 80032a0:	f001 fed6 	bl	8005050 <LOGGER_SendFormatted>
 80032a4:	e00a      	b.n	80032bc <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 80032a6:	4b94      	ldr	r3, [pc, #592]	@ (80034f8 <StartDefaultTask+0x314>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	4999      	ldr	r1, [pc, #612]	@ (8003514 <StartDefaultTask+0x330>)
 80032ae:	2003      	movs	r0, #3
 80032b0:	f001 fece 	bl	8005050 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 80032b4:	4998      	ldr	r1, [pc, #608]	@ (8003518 <StartDefaultTask+0x334>)
 80032b6:	2001      	movs	r0, #1
 80032b8:	f001 feca 	bl	8005050 <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 80032bc:	4997      	ldr	r1, [pc, #604]	@ (800351c <StartDefaultTask+0x338>)
 80032be:	2001      	movs	r0, #1
 80032c0:	f001 fec6 	bl	8005050 <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 80032c4:	4996      	ldr	r1, [pc, #600]	@ (8003520 <StartDefaultTask+0x33c>)
 80032c6:	2001      	movs	r0, #1
 80032c8:	f001 fec2 	bl	8005050 <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 80032cc:	4895      	ldr	r0, [pc, #596]	@ (8003524 <StartDefaultTask+0x340>)
 80032ce:	f001 ffa3 	bl	8005218 <UART_Connect>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 80032d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 80032e0:	4991      	ldr	r1, [pc, #580]	@ (8003528 <StartDefaultTask+0x344>)
 80032e2:	2001      	movs	r0, #1
 80032e4:	f001 feb4 	bl	8005050 <LOGGER_SendFormatted>
 80032e8:	e006      	b.n	80032f8 <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 80032ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80032ee:	461a      	mov	r2, r3
 80032f0:	498e      	ldr	r1, [pc, #568]	@ (800352c <StartDefaultTask+0x348>)
 80032f2:	2003      	movs	r0, #3
 80032f4:	f001 feac 	bl	8005050 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80032f8:	498d      	ldr	r1, [pc, #564]	@ (8003530 <StartDefaultTask+0x34c>)
 80032fa:	2001      	movs	r0, #1
 80032fc:	f001 fea8 	bl	8005050 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 8003300:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003304:	f011 f890 	bl	8014428 <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	4989      	ldr	r1, [pc, #548]	@ (8003534 <StartDefaultTask+0x350>)
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd fa42 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 8003314:	4988      	ldr	r1, [pc, #544]	@ (8003538 <StartDefaultTask+0x354>)
 8003316:	2001      	movs	r0, #1
 8003318:	f001 fe9a 	bl	8005050 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	460b      	mov	r3, r1
 8003326:	4985      	ldr	r1, [pc, #532]	@ (800353c <StartDefaultTask+0x358>)
 8003328:	2001      	movs	r0, #1
 800332a:	f001 fe91 	bl	8005050 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 800332e:	4b72      	ldr	r3, [pc, #456]	@ (80034f8 <StartDefaultTask+0x314>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8003336:	4982      	ldr	r1, [pc, #520]	@ (8003540 <StartDefaultTask+0x35c>)
 8003338:	2001      	movs	r0, #1
 800333a:	f001 fe89 	bl	8005050 <LOGGER_SendFormatted>
 800333e:	e003      	b.n	8003348 <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003340:	4980      	ldr	r1, [pc, #512]	@ (8003544 <StartDefaultTask+0x360>)
 8003342:	2001      	movs	r0, #1
 8003344:	f001 fe84 	bl	8005050 <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 (터미널에서 모든 로그를 보기 위해 INFO 레벨 유지)
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003348:	4b6b      	ldr	r3, [pc, #428]	@ (80034f8 <StartDefaultTask+0x314>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <StartDefaultTask+0x182>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 8003350:	2002      	movs	r0, #2
 8003352:	f001 fe59 	bl	8005008 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 8003356:	2001      	movs	r0, #1
 8003358:	f001 fe46 	bl	8004fe8 <LOGGER_SetFilterLevel>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), INFO level for debugging");
 800335c:	497a      	ldr	r1, [pc, #488]	@ (8003548 <StartDefaultTask+0x364>)
 800335e:	2002      	movs	r0, #2
 8003360:	f001 fe76 	bl	8005050 <LOGGER_SendFormatted>
 8003364:	e009      	b.n	800337a <StartDefaultTask+0x196>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003366:	2000      	movs	r0, #0
 8003368:	f001 fe4e 	bl	8005008 <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 800336c:	2001      	movs	r0, #1
 800336e:	f001 fe3b 	bl	8004fe8 <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 8003372:	4976      	ldr	r1, [pc, #472]	@ (800354c <StartDefaultTask+0x368>)
 8003374:	2001      	movs	r0, #1
 8003376:	f001 fe6b 	bl	8005050 <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 800337a:	4975      	ldr	r1, [pc, #468]	@ (8003550 <StartDefaultTask+0x36c>)
 800337c:	2001      	movs	r0, #1
 800337e:	f001 fe67 	bl	8005050 <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 8003386:	4b73      	ldr	r3, [pc, #460]	@ (8003554 <StartDefaultTask+0x370>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <StartDefaultTask+0x1b6>
      rx_data = lora_rx_response;
 8003390:	4b71      	ldr	r3, [pc, #452]	@ (8003558 <StartDefaultTask+0x374>)
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 8003394:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <StartDefaultTask+0x370>)
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fa41 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 80033a6:	7b3b      	ldrb	r3, [r7, #12]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b6c      	ldr	r3, [pc, #432]	@ (800355c <StartDefaultTask+0x378>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d01a      	beq.n	80033e8 <StartDefaultTask+0x204>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 80033b2:	7b3b      	ldrb	r3, [r7, #12]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d008      	beq.n	80033ca <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 80033b8:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d005      	beq.n	80033ca <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_DONE ||
 80033be:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d002      	beq.n	80033ca <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_ERROR) {
 80033c4:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 80033c6:	2b0a      	cmp	r3, #10
 80033c8:	d10a      	bne.n	80033e0 <StartDefaultTask+0x1fc>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 80033ca:	7b3b      	ldrb	r3, [r7, #12]
 80033cc:	4619      	mov	r1, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	460a      	mov	r2, r1
 80033d8:	4961      	ldr	r1, [pc, #388]	@ (8003560 <StartDefaultTask+0x37c>)
 80033da:	2001      	movs	r0, #1
 80033dc:	f001 fe38 	bl	8005050 <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 80033e0:	7b3b      	ldrb	r3, [r7, #12]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b5d      	ldr	r3, [pc, #372]	@ (800355c <StartDefaultTask+0x378>)
 80033e6:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 80033e8:	7b3b      	ldrb	r3, [r7, #12]
 80033ea:	2b0a      	cmp	r3, #10
 80033ec:	d855      	bhi.n	800349a <StartDefaultTask+0x2b6>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <StartDefaultTask+0x210>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003421 	.word	0x08003421
 80033f8:	0800342b 	.word	0x0800342b
 80033fc:	08003443 	.word	0x08003443
 8003400:	0800344d 	.word	0x0800344d
 8003404:	08003457 	.word	0x08003457
 8003408:	0800344d 	.word	0x0800344d
 800340c:	08003457 	.word	0x08003457
 8003410:	08003461 	.word	0x08003461
 8003414:	0800346b 	.word	0x0800346b
 8003418:	08003475 	.word	0x08003475
 800341c:	08003475 	.word	0x08003475
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8003420:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003424:	f011 f800 	bl	8014428 <osDelay>
        break;
 8003428:	e03c      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	494c      	ldr	r1, [pc, #304]	@ (8003564 <StartDefaultTask+0x380>)
 8003432:	2001      	movs	r0, #1
 8003434:	f001 fe0c 	bl	8005050 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8003438:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800343c:	f010 fff4 	bl	8014428 <osDelay>
        break;
 8003440:	e030      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8003442:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003446:	f010 ffef 	bl	8014428 <osDelay>
        break;
 800344a:	e02b      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 800344c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003450:	f010 ffea 	bl	8014428 <osDelay>
        break;
 8003454:	e026      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8003456:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800345a:	f010 ffe5 	bl	8014428 <osDelay>
        break;
 800345e:	e021      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003460:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003464:	f010 ffe0 	bl	8014428 <osDelay>
        break;
 8003468:	e01c      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 800346a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800346e:	f010 ffdb 	bl	8014428 <osDelay>
        break;
 8003472:	e017      	b.n	80034a4 <StartDefaultTask+0x2c0>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003474:	7b3b      	ldrb	r3, [r7, #12]
 8003476:	2b09      	cmp	r3, #9
 8003478:	d101      	bne.n	800347e <StartDefaultTask+0x29a>
 800347a:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <StartDefaultTask+0x384>)
 800347c:	e000      	b.n	8003480 <StartDefaultTask+0x29c>
 800347e:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <StartDefaultTask+0x388>)
 8003480:	461a      	mov	r2, r3
 8003482:	493b      	ldr	r1, [pc, #236]	@ (8003570 <StartDefaultTask+0x38c>)
 8003484:	2001      	movs	r0, #1
 8003486:	f001 fde3 	bl	8005050 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 800348a:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 800348c:	4939      	ldr	r1, [pc, #228]	@ (8003574 <StartDefaultTask+0x390>)
 800348e:	2001      	movs	r0, #1
 8003490:	f001 fdde 	bl	8005050 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003498:	e005      	b.n	80034a6 <StartDefaultTask+0x2c2>
        osDelay(1000);
 800349a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800349e:	f010 ffc3 	bl	8014428 <osDelay>
        break;
 80034a2:	bf00      	nop
  {
 80034a4:	e76d      	b.n	8003382 <StartDefaultTask+0x19e>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 80034a6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80034aa:	f010 ffbd 	bl	8014428 <osDelay>
    idle_counter++;
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b0:	3301      	adds	r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 80034b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	461a      	mov	r2, r3
 80034ba:	492f      	ldr	r1, [pc, #188]	@ (8003578 <StartDefaultTask+0x394>)
 80034bc:	2001      	movs	r0, #1
 80034be:	f001 fdc7 	bl	8005050 <LOGGER_SendFormatted>
    osDelay(30000);
 80034c2:	bf00      	nop
 80034c4:	e7ef      	b.n	80034a6 <StartDefaultTask+0x2c2>
 80034c6:	bf00      	nop
 80034c8:	08019a3c 	.word	0x08019a3c
 80034cc:	08019a88 	.word	0x08019a88
 80034d0:	08019ac8 	.word	0x08019ac8
 80034d4:	08019b10 	.word	0x08019b10
 80034d8:	2000001c 	.word	0x2000001c
 80034dc:	431bde83 	.word	0x431bde83
 80034e0:	08019b3c 	.word	0x08019b3c
 80034e4:	08019b54 	.word	0x08019b54
 80034e8:	08019b7c 	.word	0x08019b7c
 80034ec:	08019bc8 	.word	0x08019bc8
 80034f0:	08019c04 	.word	0x08019c04
 80034f4:	08019c40 	.word	0x08019c40
 80034f8:	20000014 	.word	0x20000014
 80034fc:	08019c74 	.word	0x08019c74
 8003500:	08019ca4 	.word	0x08019ca4
 8003504:	08019cd8 	.word	0x08019cd8
 8003508:	08019d04 	.word	0x08019d04
 800350c:	08019d34 	.word	0x08019d34
 8003510:	08019d84 	.word	0x08019d84
 8003514:	08019dbc 	.word	0x08019dbc
 8003518:	08019df4 	.word	0x08019df4
 800351c:	08019e2c 	.word	0x08019e2c
 8003520:	08019e64 	.word	0x08019e64
 8003524:	08019ea0 	.word	0x08019ea0
 8003528:	08019ea8 	.word	0x08019ea8
 800352c:	08019ed4 	.word	0x08019ed4
 8003530:	08019f08 	.word	0x08019f08
 8003534:	08019f68 	.word	0x08019f68
 8003538:	08019f70 	.word	0x08019f70
 800353c:	08019f8c 	.word	0x08019f8c
 8003540:	08019fbc 	.word	0x08019fbc
 8003544:	08019ff4 	.word	0x08019ff4
 8003548:	0801a03c 	.word	0x0801a03c
 800354c:	0801a084 	.word	0x0801a084
 8003550:	0801a0ac 	.word	0x0801a0ac
 8003554:	200014c8 	.word	0x200014c8
 8003558:	200012c8 	.word	0x200012c8
 800355c:	20000018 	.word	0x20000018
 8003560:	0801a0dc 	.word	0x0801a0dc
 8003564:	0801a110 	.word	0x0801a110
 8003568:	0801a138 	.word	0x0801a138
 800356c:	0801a140 	.word	0x0801a140
 8003570:	0801a148 	.word	0x0801a148
 8003574:	0801a180 	.word	0x0801a180
 8003578:	0801a1a8 	.word	0x0801a1a8

0800357c <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b0b2      	sub	sp, #200	@ 0xc8
 8003580:	af02      	add	r7, sp, #8
 8003582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003584:	4971      	ldr	r1, [pc, #452]	@ (800374c <StartSDLoggingTask+0x1d0>)
 8003586:	2001      	movs	r0, #1
 8003588:	f001 fd62 	bl	8005050 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 800358c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003590:	f010 ff4a 	bl	8014428 <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003594:	496e      	ldr	r1, [pc, #440]	@ (8003750 <StartSDLoggingTask+0x1d4>)
 8003596:	2001      	movs	r0, #1
 8003598:	f001 fd5a 	bl	8005050 <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 80035a2:	2303      	movs	r3, #3
 80035a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035ae:	e054      	b.n	800365a <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 80035b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035ba:	4966      	ldr	r1, [pc, #408]	@ (8003754 <StartSDLoggingTask+0x1d8>)
 80035bc:	2001      	movs	r0, #1
 80035be:	f001 fd47 	bl	8005050 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 80035c2:	f002 fb11 	bl	8005be8 <HAL_GetTick>
 80035c6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 80035ca:	f242 7310 	movw	r3, #10000	@ 0x2710
 80035ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 80035d2:	f7fd fdc1 	bl	8001158 <SDStorage_Init>
 80035d6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 80035da:	f002 fb05 	bl	8005be8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 80035ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035fa:	4957      	ldr	r1, [pc, #348]	@ (8003758 <StartSDLoggingTask+0x1dc>)
 80035fc:	2001      	movs	r0, #1
 80035fe:	f001 fd27 	bl	8005050 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 800360a:	4954      	ldr	r1, [pc, #336]	@ (800375c <StartSDLoggingTask+0x1e0>)
 800360c:	2001      	movs	r0, #1
 800360e:	f001 fd1f 	bl	8005050 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003612:	4b53      	ldr	r3, [pc, #332]	@ (8003760 <StartSDLoggingTask+0x1e4>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003618:	4b52      	ldr	r3, [pc, #328]	@ (8003764 <StartSDLoggingTask+0x1e8>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
      break;
 800361e:	e022      	b.n	8003666 <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003620:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800362a:	494f      	ldr	r1, [pc, #316]	@ (8003768 <StartSDLoggingTask+0x1ec>)
 800362c:	2002      	movs	r0, #2
 800362e:	f001 fd0f 	bl	8005050 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003636:	3b01      	subs	r3, #1
 8003638:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800363c:	429a      	cmp	r2, r3
 800363e:	da07      	bge.n	8003650 <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003640:	494a      	ldr	r1, [pc, #296]	@ (800376c <StartSDLoggingTask+0x1f0>)
 8003642:	2001      	movs	r0, #1
 8003644:	f001 fd04 	bl	8005050 <LOGGER_SendFormatted>
        osDelay(5000);
 8003648:	f241 3088 	movw	r0, #5000	@ 0x1388
 800364c:	f010 feec 	bl	8014428 <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003654:	3301      	adds	r3, #1
 8003656:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800365a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800365e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003662:	429a      	cmp	r2, r3
 8003664:	dba4      	blt.n	80035b0 <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 8003666:	4b3f      	ldr	r3, [pc, #252]	@ (8003764 <StartSDLoggingTask+0x1e8>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003674:	493e      	ldr	r1, [pc, #248]	@ (8003770 <StartSDLoggingTask+0x1f4>)
 8003676:	2003      	movs	r0, #3
 8003678:	f001 fcea 	bl	8005050 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 800367c:	493d      	ldr	r1, [pc, #244]	@ (8003774 <StartSDLoggingTask+0x1f8>)
 800367e:	2001      	movs	r0, #1
 8003680:	f001 fce6 	bl	8005050 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003684:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003688:	f010 fece 	bl	8014428 <osDelay>
 800368c:	e7fa      	b.n	8003684 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 800368e:	493a      	ldr	r1, [pc, #232]	@ (8003778 <StartSDLoggingTask+0x1fc>)
 8003690:	2001      	movs	r0, #1
 8003692:	f001 fcdd 	bl	8005050 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003696:	4b39      	ldr	r3, [pc, #228]	@ (800377c <StartSDLoggingTask+0x200>)
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800369e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036a2:	4618      	mov	r0, r3
 80036a4:	f010 ff3c 	bl	8014520 <osMessageGet>
    
    if (event.status == osEventMessage) {
 80036a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d12d      	bne.n	800370c <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 80036b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036b4:	f107 0308 	add.w	r3, r7, #8
 80036b8:	4611      	mov	r1, r2
 80036ba:	2288      	movs	r2, #136	@ 0x88
 80036bc:	4618      	mov	r0, r3
 80036be:	f013 fd68 	bl	8017192 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 80036c2:	f002 fa91 	bl	8005be8 <HAL_GetTick>
 80036c6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 80036ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd ff5b 	bl	8001590 <SDStorage_WriteLog>
 80036da:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 80036de:	f002 fa83 	bl	8005be8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 80036ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 80036f6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80036fa:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80036fe:	4820      	ldr	r0, [pc, #128]	@ (8003780 <StartSDLoggingTask+0x204>)
 8003700:	f013 fba8 	bl	8016e54 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003704:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003708:	f010 fe8e 	bl	8014428 <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 800370c:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <StartSDLoggingTask+0x208>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <StartSDLoggingTask+0x208>)
 8003714:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003716:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <StartSDLoggingTask+0x208>)
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <StartSDLoggingTask+0x20c>)
 800371c:	fba3 2301 	umull	r2, r3, r3, r1
 8003720:	095a      	lsrs	r2, r3, #5
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	1aca      	subs	r2, r1, r3
 800372c:	2a00      	cmp	r2, #0
 800372e:	d108      	bne.n	8003742 <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 8003730:	f7fe f82e 	bl	8001790 <SDStorage_IsReady>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 800373a:	4914      	ldr	r1, [pc, #80]	@ (800378c <StartSDLoggingTask+0x210>)
 800373c:	2002      	movs	r0, #2
 800373e:	f001 fc87 	bl	8005050 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003742:	2032      	movs	r0, #50	@ 0x32
 8003744:	f010 fe70 	bl	8014428 <osDelay>
  {
 8003748:	e7a5      	b.n	8003696 <StartSDLoggingTask+0x11a>
 800374a:	bf00      	nop
 800374c:	0801a1d8 	.word	0x0801a1d8
 8003750:	0801a1f8 	.word	0x0801a1f8
 8003754:	0801a22c 	.word	0x0801a22c
 8003758:	0801a254 	.word	0x0801a254
 800375c:	0801a288 	.word	0x0801a288
 8003760:	20000014 	.word	0x20000014
 8003764:	200012c0 	.word	0x200012c0
 8003768:	0801a2b4 	.word	0x0801a2b4
 800376c:	0801a2ec 	.word	0x0801a2ec
 8003770:	0801a318 	.word	0x0801a318
 8003774:	0801a34c 	.word	0x0801a34c
 8003778:	0801a37c 	.word	0x0801a37c
 800377c:	200012bc 	.word	0x200012bc
 8003780:	0801a3b4 	.word	0x0801a3b4
 8003784:	20001538 	.word	0x20001538
 8003788:	88888889 	.word	0x88888889
 800378c:	0801a3ec 	.word	0x0801a3ec

08003790 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003796:	af02      	add	r7, sp, #8
 8003798:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800379c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80037a0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 80037a2:	4989      	ldr	r1, [pc, #548]	@ (80039c8 <StartReceiveTask+0x238>)
 80037a4:	2001      	movs	r0, #1
 80037a6:	f001 fc53 	bl	8005050 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 80037aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80037ae:	f010 fe3b 	bl	8014428 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 80037b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037b6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 80037be:	f107 0208 	add.w	r2, r7, #8
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fda0 	bl	8005310 <UART_Receive>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 80037d6:	4b7d      	ldr	r3, [pc, #500]	@ (80039cc <StartReceiveTask+0x23c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	4a7b      	ldr	r2, [pc, #492]	@ (80039cc <StartReceiveTask+0x23c>)
 80037de:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 80037e0:	4b7a      	ldr	r3, [pc, #488]	@ (80039cc <StartReceiveTask+0x23c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b7a      	ldr	r3, [pc, #488]	@ (80039d0 <StartReceiveTask+0x240>)
 80037e6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ea:	09db      	lsrs	r3, r3, #7
 80037ec:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <StartReceiveTask+0x98>
 80037fa:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d012      	beq.n	8003828 <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003802:	4b72      	ldr	r3, [pc, #456]	@ (80039cc <StartReceiveTask+0x23c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a72      	ldr	r2, [pc, #456]	@ (80039d0 <StartReceiveTask+0x240>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	09da      	lsrs	r2, r3, #7
 800380e:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003812:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003816:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	460b      	mov	r3, r1
 8003820:	496c      	ldr	r1, [pc, #432]	@ (80039d4 <StartReceiveTask+0x244>)
 8003822:	2000      	movs	r0, #0
 8003824:	f001 fc14 	bl	8005050 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003828:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 80c6 	bne.w	80039be <StartReceiveTask+0x22e>
 8003832:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003836:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f340 80be 	ble.w	80039be <StartReceiveTask+0x22e>
      // 수신 완료 - TDD ResponseHandler로 분석 (중복 로그 제거)
      
      // TDD ResponseHandler를 사용하여 응답 분석 (ResponseHandler에서 로그 출력)
      if (is_response_ok(local_buffer)) {
 8003842:	f107 030c 	add.w	r3, r7, #12
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fb08 	bl	8000e5c <is_response_ok>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d123      	bne.n	800389a <StartReceiveTask+0x10a>
        // OK 응답 - ResponseHandler에서 이미 로그 출력됨
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4960      	ldr	r1, [pc, #384]	@ (80039d8 <StartReceiveTask+0x248>)
 8003858:	4618      	mov	r0, r3
 800385a:	f013 fc00 	bl	801705e <strstr>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <StartReceiveTask+0xde>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003864:	495d      	ldr	r1, [pc, #372]	@ (80039dc <StartReceiveTask+0x24c>)
 8003866:	2002      	movs	r0, #2
 8003868:	f001 fbf2 	bl	8005050 <LOGGER_SendFormatted>
 800386c:	e015      	b.n	800389a <StartReceiveTask+0x10a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	495b      	ldr	r1, [pc, #364]	@ (80039e0 <StartReceiveTask+0x250>)
 8003874:	4618      	mov	r0, r3
 8003876:	f013 fbf2 	bl	801705e <strstr>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <StartReceiveTask+0xfa>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003880:	4958      	ldr	r1, [pc, #352]	@ (80039e4 <StartReceiveTask+0x254>)
 8003882:	2000      	movs	r0, #0
 8003884:	f001 fbe4 	bl	8005050 <LOGGER_SendFormatted>
 8003888:	e007      	b.n	800389a <StartReceiveTask+0x10a>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 800388a:	f107 030c 	add.w	r3, r7, #12
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd fbd0 	bl	8001034 <ResponseHandler_ParseSendResponse>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        // ResponseHandler에서 이미 로그 출력됨 - 중복 제거
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 800389a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800389e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	4619      	mov	r1, r3
 80038ac:	484e      	ldr	r0, [pc, #312]	@ (80039e8 <StartReceiveTask+0x258>)
 80038ae:	f013 fc70 	bl	8017192 <memcpy>
      rx_bytes_received = local_bytes_received;
 80038b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80038b6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	@ (80039ec <StartReceiveTask+0x25c>)
 80038be:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 80038c6:	f107 030c 	add.w	r3, r7, #12
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fac6 	bl	8000e5c <is_response_ok>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <StartReceiveTask+0x14e>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80038dc:	e03f      	b.n	800395e <StartReceiveTask+0x1ce>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	493d      	ldr	r1, [pc, #244]	@ (80039d8 <StartReceiveTask+0x248>)
 80038e4:	4618      	mov	r0, r3
 80038e6:	f013 fbba 	bl	801705e <strstr>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <StartReceiveTask+0x168>
        // JOIN 성공 응답
        is_lora_command_response = true;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80038f6:	e032      	b.n	800395e <StartReceiveTask+0x1ce>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	493c      	ldr	r1, [pc, #240]	@ (80039f0 <StartReceiveTask+0x260>)
 80038fe:	4618      	mov	r0, r3
 8003900:	f013 fbad 	bl	801705e <strstr>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <StartReceiveTask+0x182>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003910:	e025      	b.n	800395e <StartReceiveTask+0x1ce>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	4932      	ldr	r1, [pc, #200]	@ (80039e0 <StartReceiveTask+0x250>)
 8003918:	4618      	mov	r0, r3
 800391a:	f013 fba0 	bl	801705e <strstr>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d108      	bne.n	8003936 <StartReceiveTask+0x1a6>
 8003924:	f107 030c 	add.w	r3, r7, #12
 8003928:	4932      	ldr	r1, [pc, #200]	@ (80039f4 <StartReceiveTask+0x264>)
 800392a:	4618      	mov	r0, r3
 800392c:	f013 fb97 	bl	801705e <strstr>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <StartReceiveTask+0x1b0>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003936:	4930      	ldr	r1, [pc, #192]	@ (80039f8 <StartReceiveTask+0x268>)
 8003938:	2000      	movs	r0, #0
 800393a:	f001 fb89 	bl	8005050 <LOGGER_SendFormatted>
 800393e:	e00e      	b.n	800395e <StartReceiveTask+0x1ce>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fb75 	bl	8001034 <ResponseHandler_ParseSendResponse>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 8003950:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 8003954:	2b03      	cmp	r3, #3
 8003956:	d002      	beq.n	800395e <StartReceiveTask+0x1ce>
          is_lora_command_response = true;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 800395e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01d      	beq.n	80039a2 <StartReceiveTask+0x212>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003966:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800396a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	4619      	mov	r1, r3
 8003978:	4820      	ldr	r0, [pc, #128]	@ (80039fc <StartReceiveTask+0x26c>)
 800397a:	f013 fc0a 	bl	8017192 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 800397e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003982:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	@ (80039fc <StartReceiveTask+0x26c>)
 800398a:	2100      	movs	r1, #0
 800398c:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 800398e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <StartReceiveTask+0x270>)
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	461a      	mov	r2, r3
 800399a:	491a      	ldr	r1, [pc, #104]	@ (8003a04 <StartReceiveTask+0x274>)
 800399c:	2000      	movs	r0, #0
 800399e:	f001 fb57 	bl	8005050 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f013 fb3b 	bl	8017028 <memset>
      local_bytes_received = 0;
 80039b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039b6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 80039be:	2032      	movs	r0, #50	@ 0x32
 80039c0:	f010 fd32 	bl	8014428 <osDelay>
  {
 80039c4:	e6fb      	b.n	80037be <StartReceiveTask+0x2e>
 80039c6:	bf00      	nop
 80039c8:	0801a420 	.word	0x0801a420
 80039cc:	2000153c 	.word	0x2000153c
 80039d0:	1b4e81b5 	.word	0x1b4e81b5
 80039d4:	0801a448 	.word	0x0801a448
 80039d8:	0801a47c 	.word	0x0801a47c
 80039dc:	0801a488 	.word	0x0801a488
 80039e0:	0801a4bc 	.word	0x0801a4bc
 80039e4:	0801a4c8 	.word	0x0801a4c8
 80039e8:	200015a0 	.word	0x200015a0
 80039ec:	200012c4 	.word	0x200012c4
 80039f0:	0801a4f0 	.word	0x0801a4f0
 80039f4:	0801a4f8 	.word	0x0801a4f8
 80039f8:	0801a508 	.word	0x0801a508
 80039fc:	200012c8 	.word	0x200012c8
 8003a00:	200014c8 	.word	0x200014c8
 8003a04:	0801a544 	.word	0x0801a544

08003a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003a1a:	f002 f8d1 	bl	8005bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40001000 	.word	0x40001000

08003a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a30:	b672      	cpsid	i
}
 8003a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <Error_Handler+0x8>

08003a38 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <MX_DMA_Init+0x48>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a0f      	ldr	r2, [pc, #60]	@ (8003a80 <MX_DMA_Init+0x48>)
 8003a44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <MX_DMA_Init+0x48>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2105      	movs	r1, #5
 8003a5a:	2039      	movs	r0, #57	@ 0x39
 8003a5c:	f002 fc44 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003a60:	2039      	movs	r0, #57	@ 0x39
 8003a62:	f002 fc5d 	bl	8006320 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2105      	movs	r1, #5
 8003a6a:	2047      	movs	r0, #71	@ 0x47
 8003a6c:	f002 fc3c 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a70:	2047      	movs	r0, #71	@ 0x47
 8003a72:	f002 fc55 	bl	8006320 <HAL_NVIC_EnableIRQ>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800

08003a84 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d133      	bne.n	8003afa <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003a94:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <MX_USART6_DMA_Init+0x84>)
 8003a96:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003a9a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003a9e:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa0:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ab2:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab4:	4b13      	ldr	r3, [pc, #76]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003ac0:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003ac8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003acc:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ace:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 8003ad4:	480b      	ldr	r0, [pc, #44]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003ad6:	f002 fd9d 	bl	8006614 <HAL_DMA_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 8003ae4:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    return;
 8003aea:	e007      	b.n	8003afc <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003aec:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <MX_USART6_DMA_Init+0x88>)
 8003aee:	4a05      	ldr	r2, [pc, #20]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003af0:	675a      	str	r2, [r3, #116]	@ 0x74
 8003af2:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <MX_USART6_DMA_Init+0x80>)
 8003af4:	4a05      	ldr	r2, [pc, #20]	@ (8003b0c <MX_USART6_DMA_Init+0x88>)
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003af8:	e000      	b.n	8003afc <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8003afa:	bf00      	nop
}
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200014cc 	.word	0x200014cc
 8003b08:	40026428 	.word	0x40026428
 8003b0c:	200011f4 	.word	0x200011f4

08003b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b11      	ldr	r3, [pc, #68]	@ (8003b5c <HAL_MspInit+0x4c>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	4a10      	ldr	r2, [pc, #64]	@ (8003b5c <HAL_MspInit+0x4c>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b22:	4b0e      	ldr	r3, [pc, #56]	@ (8003b5c <HAL_MspInit+0x4c>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_MspInit+0x4c>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <HAL_MspInit+0x4c>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b3a:	4b08      	ldr	r3, [pc, #32]	@ (8003b5c <HAL_MspInit+0x4c>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	210f      	movs	r1, #15
 8003b4a:	f06f 0001 	mvn.w	r0, #1
 8003b4e:	f002 fbcb 	bl	80062e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a21      	ldr	r2, [pc, #132]	@ (8003c04 <HAL_ADC_MspInit+0xa4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d13c      	bne.n	8003bfc <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b82:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	4a20      	ldr	r2, [pc, #128]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003b88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003ba0:	f043 0320 	orr.w	r3, r3, #32
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4b18      	ldr	r3, [pc, #96]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a14      	ldr	r2, [pc, #80]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <HAL_ADC_MspInit+0xa8>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003bca:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003bce:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480b      	ldr	r0, [pc, #44]	@ (8003c0c <HAL_ADC_MspInit+0xac>)
 8003be0:	f003 fec6 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003be8:	2303      	movs	r3, #3
 8003bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4806      	ldr	r0, [pc, #24]	@ (8003c10 <HAL_ADC_MspInit+0xb0>)
 8003bf8:	f003 feba 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003bfc:	bf00      	nop
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40012200 	.word	0x40012200
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40020000 	.word	0x40020000

08003c14 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0a      	ldr	r2, [pc, #40]	@ (8003c4c <HAL_CRC_MspInit+0x38>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10b      	bne.n	8003c3e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c26:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <HAL_CRC_MspInit+0x3c>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <HAL_CRC_MspInit+0x3c>)
 8003c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_CRC_MspInit+0x3c>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023000 	.word	0x40023000
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	@ 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a50      	ldr	r2, [pc, #320]	@ (8003db4 <HAL_DCMI_MspInit+0x160>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	f040 809a 	bne.w	8003dac <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003c78:	4b4f      	ldr	r3, [pc, #316]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c84:	4b4c      	ldr	r3, [pc, #304]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c90:	4b49      	ldr	r3, [pc, #292]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4a48      	ldr	r2, [pc, #288]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9c:	4b46      	ldr	r3, [pc, #280]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ca8:	4b43      	ldr	r3, [pc, #268]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	4a42      	ldr	r2, [pc, #264]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cae:	f043 0308 	orr.w	r3, r3, #8
 8003cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb4:	4b40      	ldr	r3, [pc, #256]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cd8:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	4a36      	ldr	r2, [pc, #216]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce4:	4b34      	ldr	r3, [pc, #208]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf0:	4b31      	ldr	r3, [pc, #196]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	4a30      	ldr	r2, [pc, #192]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfc:	4b2e      	ldr	r3, [pc, #184]	@ (8003db8 <HAL_DCMI_MspInit+0x164>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003d08:	2360      	movs	r3, #96	@ 0x60
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	2300      	movs	r3, #0
 8003d16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d18:	230d      	movs	r3, #13
 8003d1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d20:	4619      	mov	r1, r3
 8003d22:	4826      	ldr	r0, [pc, #152]	@ (8003dbc <HAL_DCMI_MspInit+0x168>)
 8003d24:	f003 fe24 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003d28:	2308      	movs	r3, #8
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d38:	230d      	movs	r3, #13
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d40:	4619      	mov	r1, r3
 8003d42:	481f      	ldr	r0, [pc, #124]	@ (8003dc0 <HAL_DCMI_MspInit+0x16c>)
 8003d44:	f003 fe14 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d56:	2300      	movs	r3, #0
 8003d58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d5a:	230d      	movs	r3, #13
 8003d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d62:	4619      	mov	r1, r3
 8003d64:	4817      	ldr	r0, [pc, #92]	@ (8003dc4 <HAL_DCMI_MspInit+0x170>)
 8003d66:	f003 fe03 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003d6a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	2302      	movs	r3, #2
 8003d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d7c:	230d      	movs	r3, #13
 8003d7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d84:	4619      	mov	r1, r3
 8003d86:	4810      	ldr	r0, [pc, #64]	@ (8003dc8 <HAL_DCMI_MspInit+0x174>)
 8003d88:	f003 fdf2 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003d8c:	2350      	movs	r3, #80	@ 0x50
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d9c:	230d      	movs	r3, #13
 8003d9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003da4:	4619      	mov	r1, r3
 8003da6:	4809      	ldr	r0, [pc, #36]	@ (8003dcc <HAL_DCMI_MspInit+0x178>)
 8003da8:	f003 fde2 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8003dac:	bf00      	nop
 8003dae:	3738      	adds	r7, #56	@ 0x38
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	50050000 	.word	0x50050000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40020c00 	.word	0x40020c00
 8003dc4:	40021800 	.word	0x40021800
 8003dc8:	40021c00 	.word	0x40021c00
 8003dcc:	40020000 	.word	0x40020000

08003dd0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e14 <HAL_DMA2D_MspInit+0x44>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d113      	bne.n	8003e0a <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003de2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e18 <HAL_DMA2D_MspInit+0x48>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e18 <HAL_DMA2D_MspInit+0x48>)
 8003de8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <HAL_DMA2D_MspInit+0x48>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2105      	movs	r1, #5
 8003dfe:	205a      	movs	r0, #90	@ 0x5a
 8003e00:	f002 fa72 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003e04:	205a      	movs	r0, #90	@ 0x5a
 8003e06:	f002 fa8b 	bl	8006320 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	4002b000 	.word	0x4002b000
 8003e18:	40023800 	.word	0x40023800

08003e1c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	@ 0x38
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3f      	ldr	r2, [pc, #252]	@ (8003f38 <HAL_ETH_MspInit+0x11c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d178      	bne.n	8003f30 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	4a3e      	ldr	r2, [pc, #248]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	4a38      	ldr	r2, [pc, #224]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e62:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	4a32      	ldr	r2, [pc, #200]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7a:	4b30      	ldr	r3, [pc, #192]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e86:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e92:	4b2a      	ldr	r3, [pc, #168]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9e:	4b27      	ldr	r3, [pc, #156]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eaa:	4b24      	ldr	r3, [pc, #144]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	4b21      	ldr	r3, [pc, #132]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <HAL_ETH_MspInit+0x120>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8003ece:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003edc:	2303      	movs	r3, #3
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ee0:	230b      	movs	r3, #11
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4815      	ldr	r0, [pc, #84]	@ (8003f40 <HAL_ETH_MspInit+0x124>)
 8003eec:	f003 fd40 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003ef0:	2332      	movs	r3, #50	@ 0x32
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f00:	230b      	movs	r3, #11
 8003f02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480e      	ldr	r0, [pc, #56]	@ (8003f44 <HAL_ETH_MspInit+0x128>)
 8003f0c:	f003 fd30 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003f10:	2386      	movs	r3, #134	@ 0x86
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	2302      	movs	r3, #2
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f20:	230b      	movs	r3, #11
 8003f22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4807      	ldr	r0, [pc, #28]	@ (8003f48 <HAL_ETH_MspInit+0x12c>)
 8003f2c:	f003 fd20 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8003f30:	bf00      	nop
 8003f32:	3738      	adds	r7, #56	@ 0x38
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40028000 	.word	0x40028000
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40021800 	.word	0x40021800
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020000 	.word	0x40020000

08003f4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0ac      	sub	sp, #176	@ 0xb0
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f64:	f107 0318 	add.w	r3, r7, #24
 8003f68:	2284      	movs	r2, #132	@ 0x84
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f013 f85b 	bl	8017028 <memset>
  if(hi2c->Instance==I2C1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a44      	ldr	r2, [pc, #272]	@ (8004088 <HAL_I2C_MspInit+0x13c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d13d      	bne.n	8003ff8 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003f7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f86:	f107 0318 	add.w	r3, r7, #24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f006 fe80 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003f96:	f7ff fd49 	bl	8003a2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa6:	4b39      	ldr	r3, [pc, #228]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003fb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003fb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fba:	2312      	movs	r3, #18
 8003fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	482d      	ldr	r0, [pc, #180]	@ (8004090 <HAL_I2C_MspInit+0x144>)
 8003fda:	f003 fcc9 	bl	8007970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fde:	4b2b      	ldr	r3, [pc, #172]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8003fe4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fea:	4b28      	ldr	r3, [pc, #160]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003ff6:	e042      	b.n	800407e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	@ (8004094 <HAL_I2C_MspInit+0x148>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d13d      	bne.n	800407e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004002:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004006:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800400e:	f107 0318 	add.w	r3, r7, #24
 8004012:	4618      	mov	r0, r3
 8004014:	f006 fe3c 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800401e:	f7ff fd05 	bl	8003a2c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004022:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	4a19      	ldr	r2, [pc, #100]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8004028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402c:	6313      	str	r3, [r2, #48]	@ 0x30
 800402e:	4b17      	ldr	r3, [pc, #92]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800403a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800403e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004042:	2312      	movs	r3, #18
 8004044:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004048:	2301      	movs	r3, #1
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004054:	2304      	movs	r3, #4
 8004056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800405a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800405e:	4619      	mov	r1, r3
 8004060:	480d      	ldr	r0, [pc, #52]	@ (8004098 <HAL_I2C_MspInit+0x14c>)
 8004062:	f003 fc85 	bl	8007970 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	4a08      	ldr	r2, [pc, #32]	@ (800408c <HAL_I2C_MspInit+0x140>)
 800406c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004070:	6413      	str	r3, [r2, #64]	@ 0x40
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_I2C_MspInit+0x140>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
}
 800407e:	bf00      	nop
 8004080:	37b0      	adds	r7, #176	@ 0xb0
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40005400 	.word	0x40005400
 800408c:	40023800 	.word	0x40023800
 8004090:	40020400 	.word	0x40020400
 8004094:	40005c00 	.word	0x40005c00
 8004098:	40021c00 	.word	0x40021c00

0800409c <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08e      	sub	sp, #56	@ 0x38
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a55      	ldr	r2, [pc, #340]	@ (8004210 <HAL_LTDC_MspInit+0x174>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	f040 80a3 	bne.w	8004206 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80040c0:	4b54      	ldr	r3, [pc, #336]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c4:	4a53      	ldr	r2, [pc, #332]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80040cc:	4b51      	ldr	r3, [pc, #324]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040de:	f043 0310 	orr.w	r3, r3, #16
 80040e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80040f0:	4b48      	ldr	r3, [pc, #288]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	4a47      	ldr	r2, [pc, #284]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80040fc:	4b45      	ldr	r3, [pc, #276]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004108:	4b42      	ldr	r3, [pc, #264]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	4a41      	ldr	r2, [pc, #260]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 800410e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004112:	6313      	str	r3, [r2, #48]	@ 0x30
 8004114:	4b3f      	ldr	r3, [pc, #252]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004120:	4b3c      	ldr	r3, [pc, #240]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	4a3b      	ldr	r2, [pc, #236]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 8004126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800412a:	6313      	str	r3, [r2, #48]	@ 0x30
 800412c:	4b39      	ldr	r3, [pc, #228]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004138:	4b36      	ldr	r3, [pc, #216]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413c:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004142:	6313      	str	r3, [r2, #48]	@ 0x30
 8004144:	4b33      	ldr	r3, [pc, #204]	@ (8004214 <HAL_LTDC_MspInit+0x178>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004150:	2310      	movs	r3, #16
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	2302      	movs	r3, #2
 8004156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	2300      	movs	r3, #0
 800415a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415c:	2300      	movs	r3, #0
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004160:	230e      	movs	r3, #14
 8004162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004168:	4619      	mov	r1, r3
 800416a:	482b      	ldr	r0, [pc, #172]	@ (8004218 <HAL_LTDC_MspInit+0x17c>)
 800416c:	f003 fc00 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004170:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2302      	movs	r3, #2
 8004178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417e:	2300      	movs	r3, #0
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004182:	230e      	movs	r3, #14
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800418a:	4619      	mov	r1, r3
 800418c:	4823      	ldr	r0, [pc, #140]	@ (800421c <HAL_LTDC_MspInit+0x180>)
 800418e:	f003 fbef 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004192:	23f7      	movs	r3, #247	@ 0xf7
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004196:	2302      	movs	r3, #2
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	2300      	movs	r3, #0
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041a2:	230e      	movs	r3, #14
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80041a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041aa:	4619      	mov	r1, r3
 80041ac:	481c      	ldr	r0, [pc, #112]	@ (8004220 <HAL_LTDC_MspInit+0x184>)
 80041ae:	f003 fbdf 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80041b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b8:	2302      	movs	r3, #2
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c0:	2300      	movs	r3, #0
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80041c4:	2309      	movs	r3, #9
 80041c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80041c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041cc:	4619      	mov	r1, r3
 80041ce:	4815      	ldr	r0, [pc, #84]	@ (8004224 <HAL_LTDC_MspInit+0x188>)
 80041d0:	f003 fbce 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80041d4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2302      	movs	r3, #2
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	2300      	movs	r3, #0
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041e6:	230e      	movs	r3, #14
 80041e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80041ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ee:	4619      	mov	r1, r3
 80041f0:	480d      	ldr	r0, [pc, #52]	@ (8004228 <HAL_LTDC_MspInit+0x18c>)
 80041f2:	f003 fbbd 	bl	8007970 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2105      	movs	r1, #5
 80041fa:	2058      	movs	r0, #88	@ 0x58
 80041fc:	f002 f874 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004200:	2058      	movs	r0, #88	@ 0x58
 8004202:	f002 f88d 	bl	8006320 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004206:	bf00      	nop
 8004208:	3738      	adds	r7, #56	@ 0x38
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40016800 	.word	0x40016800
 8004214:	40023800 	.word	0x40023800
 8004218:	40021000 	.word	0x40021000
 800421c:	40022400 	.word	0x40022400
 8004220:	40022800 	.word	0x40022800
 8004224:	40021800 	.word	0x40021800
 8004228:	40022000 	.word	0x40022000

0800422c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	@ 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3b      	ldr	r2, [pc, #236]	@ (8004338 <HAL_QSPI_MspInit+0x10c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d170      	bne.n	8004330 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800424e:	4b3b      	ldr	r3, [pc, #236]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004252:	4a3a      	ldr	r2, [pc, #232]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	6393      	str	r3, [r2, #56]	@ 0x38
 800425a:	4b38      	ldr	r3, [pc, #224]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 800425c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004266:	4b35      	ldr	r3, [pc, #212]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	4a34      	ldr	r2, [pc, #208]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	6313      	str	r3, [r2, #48]	@ 0x30
 8004272:	4b32      	ldr	r3, [pc, #200]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427e:	4b2f      	ldr	r3, [pc, #188]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	4a2e      	ldr	r2, [pc, #184]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6313      	str	r3, [r2, #48]	@ 0x30
 800428a:	4b2c      	ldr	r3, [pc, #176]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004296:	4b29      	ldr	r3, [pc, #164]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	4a28      	ldr	r2, [pc, #160]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a2:	4b26      	ldr	r3, [pc, #152]	@ (800433c <HAL_QSPI_MspInit+0x110>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80042ae:	2304      	movs	r3, #4
 80042b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80042be:	2309      	movs	r3, #9
 80042c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80042c2:	f107 031c 	add.w	r3, r7, #28
 80042c6:	4619      	mov	r1, r3
 80042c8:	481d      	ldr	r0, [pc, #116]	@ (8004340 <HAL_QSPI_MspInit+0x114>)
 80042ca:	f003 fb51 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80042ce:	2340      	movs	r3, #64	@ 0x40
 80042d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d2:	2302      	movs	r3, #2
 80042d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042da:	2303      	movs	r3, #3
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80042de:	230a      	movs	r3, #10
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80042e2:	f107 031c 	add.w	r3, r7, #28
 80042e6:	4619      	mov	r1, r3
 80042e8:	4816      	ldr	r0, [pc, #88]	@ (8004344 <HAL_QSPI_MspInit+0x118>)
 80042ea:	f003 fb41 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042ee:	2304      	movs	r3, #4
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fa:	2303      	movs	r3, #3
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80042fe:	2309      	movs	r3, #9
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004302:	f107 031c 	add.w	r3, r7, #28
 8004306:	4619      	mov	r1, r3
 8004308:	480e      	ldr	r0, [pc, #56]	@ (8004344 <HAL_QSPI_MspInit+0x118>)
 800430a:	f003 fb31 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800430e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800431c:	2303      	movs	r3, #3
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004320:	2309      	movs	r3, #9
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	4619      	mov	r1, r3
 800432a:	4807      	ldr	r0, [pc, #28]	@ (8004348 <HAL_QSPI_MspInit+0x11c>)
 800432c:	f003 fb20 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004330:	bf00      	nop
 8004332:	3730      	adds	r7, #48	@ 0x30
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	a0001000 	.word	0xa0001000
 800433c:	40023800 	.word	0x40023800
 8004340:	40021000 	.word	0x40021000
 8004344:	40020400 	.word	0x40020400
 8004348:	40020c00 	.word	0x40020c00

0800434c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0a4      	sub	sp, #144	@ 0x90
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	2284      	movs	r2, #132	@ 0x84
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f012 fe63 	bl	8017028 <memset>
  if(hrtc->Instance==RTC)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a0e      	ldr	r2, [pc, #56]	@ (80043a0 <HAL_RTC_MspInit+0x54>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d114      	bne.n	8004396 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800436c:	2320      	movs	r3, #32
 800436e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004370:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004376:	f107 030c 	add.w	r3, r7, #12
 800437a:	4618      	mov	r0, r3
 800437c:	f006 fc88 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004386:	f7ff fb51 	bl	8003a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RTC_MspInit+0x58>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	4a05      	ldr	r2, [pc, #20]	@ (80043a4 <HAL_RTC_MspInit+0x58>)
 8004390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004394:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004396:	bf00      	nop
 8004398:	3790      	adds	r7, #144	@ 0x90
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40002800 	.word	0x40002800
 80043a4:	40023800 	.word	0x40023800

080043a8 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a25      	ldr	r2, [pc, #148]	@ (800445c <HAL_SD_MspInit+0xb4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d144      	bne.n	8004454 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80043ca:	4b25      	ldr	r3, [pc, #148]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	4a24      	ldr	r2, [pc, #144]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d6:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043fa:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	4a18      	ldr	r2, [pc, #96]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	6313      	str	r3, [r2, #48]	@ 0x30
 8004406:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <HAL_SD_MspInit+0xb8>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004412:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004416:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	2302      	movs	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004420:	2303      	movs	r3, #3
 8004422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004424:	230c      	movs	r3, #12
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4619      	mov	r1, r3
 800442e:	480d      	ldr	r0, [pc, #52]	@ (8004464 <HAL_SD_MspInit+0xbc>)
 8004430:	f003 fa9e 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004434:	2304      	movs	r3, #4
 8004436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004440:	2303      	movs	r3, #3
 8004442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004444:	230c      	movs	r3, #12
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004448:	f107 0314 	add.w	r3, r7, #20
 800444c:	4619      	mov	r1, r3
 800444e:	4806      	ldr	r0, [pc, #24]	@ (8004468 <HAL_SD_MspInit+0xc0>)
 8004450:	f003 fa8e 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004454:	bf00      	nop
 8004456:	3728      	adds	r7, #40	@ 0x28
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40023800 	.word	0x40023800
 8004464:	40020800 	.word	0x40020800
 8004468:	40020c00 	.word	0x40020c00

0800446c <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b0aa      	sub	sp, #168	@ 0xa8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	2284      	movs	r2, #132	@ 0x84
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f012 fdcb 	bl	8017028 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800449a:	d143      	bne.n	8004524 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 800449c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80044a2:	2364      	movs	r3, #100	@ 0x64
 80044a4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80044a6:	2302      	movs	r3, #2
 80044a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80044aa:	2302      	movs	r3, #2
 80044ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80044ae:	2302      	movs	r3, #2
 80044b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f006 fbe8 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80044c6:	f7ff fab1 	bl	8003a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80044ca:	4b18      	ldr	r3, [pc, #96]	@ (800452c <HAL_SPDIFRX_MspInit+0xc0>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	4a17      	ldr	r2, [pc, #92]	@ (800452c <HAL_SPDIFRX_MspInit+0xc0>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_SPDIFRX_MspInit+0xc0>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_SPDIFRX_MspInit+0xc0>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a11      	ldr	r2, [pc, #68]	@ (800452c <HAL_SPDIFRX_MspInit+0xc0>)
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b0f      	ldr	r3, [pc, #60]	@ (800452c <HAL_SPDIFRX_MspInit+0xc0>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80044fa:	2380      	movs	r3, #128	@ 0x80
 80044fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004512:	2308      	movs	r3, #8
 8004514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004518:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800451c:	4619      	mov	r1, r3
 800451e:	4804      	ldr	r0, [pc, #16]	@ (8004530 <HAL_SPDIFRX_MspInit+0xc4>)
 8004520:	f003 fa26 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004524:	bf00      	nop
 8004526:	37a8      	adds	r7, #168	@ 0xa8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	40020c00 	.word	0x40020c00

08004534 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	@ 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453c:	f107 0314 	add.w	r3, r7, #20
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a25      	ldr	r2, [pc, #148]	@ (80045e8 <HAL_SPI_MspInit+0xb4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d144      	bne.n	80045e0 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004556:	4b25      	ldr	r3, [pc, #148]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	4a24      	ldr	r2, [pc, #144]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 800455c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004560:	6413      	str	r3, [r2, #64]	@ 0x40
 8004562:	4b22      	ldr	r3, [pc, #136]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800456e:	4b1f      	ldr	r3, [pc, #124]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	4a1e      	ldr	r2, [pc, #120]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004578:	6313      	str	r3, [r2, #48]	@ 0x30
 800457a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004586:	4b19      	ldr	r3, [pc, #100]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	6313      	str	r3, [r2, #48]	@ 0x30
 8004592:	4b16      	ldr	r3, [pc, #88]	@ (80045ec <HAL_SPI_MspInit+0xb8>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800459e:	2302      	movs	r3, #2
 80045a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045ae:	2305      	movs	r3, #5
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80045b2:	f107 0314 	add.w	r3, r7, #20
 80045b6:	4619      	mov	r1, r3
 80045b8:	480d      	ldr	r0, [pc, #52]	@ (80045f0 <HAL_SPI_MspInit+0xbc>)
 80045ba:	f003 f9d9 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80045be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80045c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c4:	2302      	movs	r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045d0:	2305      	movs	r3, #5
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4619      	mov	r1, r3
 80045da:	4806      	ldr	r0, [pc, #24]	@ (80045f4 <HAL_SPI_MspInit+0xc0>)
 80045dc:	f003 f9c8 	bl	8007970 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80045e0:	bf00      	nop
 80045e2:	3728      	adds	r7, #40	@ 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40003800 	.word	0x40003800
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40022000 	.word	0x40022000
 80045f4:	40020400 	.word	0x40020400

080045f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	@ 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2e      	ldr	r2, [pc, #184]	@ (80046c0 <HAL_TIM_Base_MspInit+0xc8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d10c      	bne.n	8004624 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800460a:	4b2e      	ldr	r3, [pc, #184]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	4a2d      	ldr	r2, [pc, #180]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6453      	str	r3, [r2, #68]	@ 0x44
 8004616:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004622:	e046      	b.n	80046b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462c:	d10c      	bne.n	8004648 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800462e:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	4a24      	ldr	r2, [pc, #144]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6413      	str	r3, [r2, #64]	@ 0x40
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	69bb      	ldr	r3, [r7, #24]
}
 8004646:	e034      	b.n	80046b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <HAL_TIM_Base_MspInit+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004652:	4b1c      	ldr	r3, [pc, #112]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	6413      	str	r3, [r2, #64]	@ 0x40
 800465e:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]
}
 800466a:	e022      	b.n	80046b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <HAL_TIM_Base_MspInit+0xd4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10c      	bne.n	8004690 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004676:	4b13      	ldr	r3, [pc, #76]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 800467c:	f043 0308 	orr.w	r3, r3, #8
 8004680:	6413      	str	r3, [r2, #64]	@ 0x40
 8004682:	4b10      	ldr	r3, [pc, #64]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
}
 800468e:	e010      	b.n	80046b2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0e      	ldr	r2, [pc, #56]	@ (80046d0 <HAL_TIM_Base_MspInit+0xd8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d10b      	bne.n	80046b2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800469a:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	4a09      	ldr	r2, [pc, #36]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046a6:	4b07      	ldr	r3, [pc, #28]	@ (80046c4 <HAL_TIM_Base_MspInit+0xcc>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
}
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	@ 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400

080046d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <HAL_TIM_PWM_MspInit+0x38>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d10b      	bne.n	80046fe <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <HAL_TIM_PWM_MspInit+0x3c>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <HAL_TIM_PWM_MspInit+0x3c>)
 80046ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f2:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <HAL_TIM_PWM_MspInit+0x3c>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40001800 	.word	0x40001800
 8004710:	40023800 	.word	0x40023800

08004714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	@ 0x30
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	f107 031c 	add.w	r3, r7, #28
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a56      	ldr	r2, [pc, #344]	@ (800488c <HAL_TIM_MspPostInit+0x178>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d11d      	bne.n	8004772 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004736:	4b56      	ldr	r3, [pc, #344]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	4a55      	ldr	r2, [pc, #340]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	@ 0x30
 8004742:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800474e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	2302      	movs	r3, #2
 8004756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475c:	2300      	movs	r3, #0
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004760:	2301      	movs	r3, #1
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	4619      	mov	r1, r3
 800476a:	484a      	ldr	r0, [pc, #296]	@ (8004894 <HAL_TIM_MspPostInit+0x180>)
 800476c:	f003 f900 	bl	8007970 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004770:	e087      	b.n	8004882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477a:	d11d      	bne.n	80047b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477c:	4b44      	ldr	r3, [pc, #272]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	4a43      	ldr	r2, [pc, #268]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6313      	str	r3, [r2, #48]	@ 0x30
 8004788:	4b41      	ldr	r3, [pc, #260]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047a6:	2301      	movs	r3, #1
 80047a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4838      	ldr	r0, [pc, #224]	@ (8004894 <HAL_TIM_MspPostInit+0x180>)
 80047b2:	f003 f8dd 	bl	8007970 <HAL_GPIO_Init>
}
 80047b6:	e064      	b.n	8004882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a36      	ldr	r2, [pc, #216]	@ (8004898 <HAL_TIM_MspPostInit+0x184>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d11c      	bne.n	80047fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c2:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	4a32      	ldr	r2, [pc, #200]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ce:	4b30      	ldr	r3, [pc, #192]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80047da:	2310      	movs	r3, #16
 80047dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047ea:	2302      	movs	r3, #2
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80047ee:	f107 031c 	add.w	r3, r7, #28
 80047f2:	4619      	mov	r1, r3
 80047f4:	4829      	ldr	r0, [pc, #164]	@ (800489c <HAL_TIM_MspPostInit+0x188>)
 80047f6:	f003 f8bb 	bl	8007970 <HAL_GPIO_Init>
}
 80047fa:	e042      	b.n	8004882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a27      	ldr	r2, [pc, #156]	@ (80048a0 <HAL_TIM_MspPostInit+0x18c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d11c      	bne.n	8004840 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004806:	4b22      	ldr	r3, [pc, #136]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004810:	6313      	str	r3, [r2, #48]	@ 0x30
 8004812:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800481e:	2301      	movs	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004822:	2302      	movs	r3, #2
 8004824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	2300      	movs	r3, #0
 800482c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800482e:	2302      	movs	r3, #2
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004832:	f107 031c 	add.w	r3, r7, #28
 8004836:	4619      	mov	r1, r3
 8004838:	481a      	ldr	r0, [pc, #104]	@ (80048a4 <HAL_TIM_MspPostInit+0x190>)
 800483a:	f003 f899 	bl	8007970 <HAL_GPIO_Init>
}
 800483e:	e020      	b.n	8004882 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a18      	ldr	r2, [pc, #96]	@ (80048a8 <HAL_TIM_MspPostInit+0x194>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d11b      	bne.n	8004882 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800484a:	4b11      	ldr	r3, [pc, #68]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004854:	6313      	str	r3, [r2, #48]	@ 0x30
 8004856:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <HAL_TIM_MspPostInit+0x17c>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004862:	2340      	movs	r3, #64	@ 0x40
 8004864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486e:	2300      	movs	r3, #0
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004872:	2309      	movs	r3, #9
 8004874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	4619      	mov	r1, r3
 800487c:	480b      	ldr	r0, [pc, #44]	@ (80048ac <HAL_TIM_MspPostInit+0x198>)
 800487e:	f003 f877 	bl	8007970 <HAL_GPIO_Init>
}
 8004882:	bf00      	nop
 8004884:	3730      	adds	r7, #48	@ 0x30
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40023800 	.word	0x40023800
 8004894:	40020000 	.word	0x40020000
 8004898:	40000400 	.word	0x40000400
 800489c:	40020400 	.word	0x40020400
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40001800 	.word	0x40001800
 80048ac:	40021c00 	.word	0x40021c00

080048b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b0ae      	sub	sp, #184	@ 0xb8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048c8:	f107 0320 	add.w	r3, r7, #32
 80048cc:	2284      	movs	r2, #132	@ 0x84
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f012 fba9 	bl	8017028 <memset>
  if(huart->Instance==USART1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a53      	ldr	r2, [pc, #332]	@ (8004a28 <HAL_UART_MspInit+0x178>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d15d      	bne.n	800499c <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048e0:	2340      	movs	r3, #64	@ 0x40
 80048e2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048e4:	2300      	movs	r3, #0
 80048e6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048e8:	f107 0320 	add.w	r3, r7, #32
 80048ec:	4618      	mov	r0, r3
 80048ee:	f006 f9cf 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80048f8:	f7ff f898 	bl	8003a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048fc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80048fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004900:	4a4a      	ldr	r2, [pc, #296]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 8004902:	f043 0310 	orr.w	r3, r3, #16
 8004906:	6453      	str	r3, [r2, #68]	@ 0x44
 8004908:	4b48      	ldr	r3, [pc, #288]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 800490a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004914:	4b45      	ldr	r3, [pc, #276]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	4a44      	ldr	r2, [pc, #272]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004920:	4b42      	ldr	r3, [pc, #264]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	4a3e      	ldr	r2, [pc, #248]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6313      	str	r3, [r2, #48]	@ 0x30
 8004938:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494a:	2302      	movs	r3, #2
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004956:	2300      	movs	r3, #0
 8004958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800495c:	2307      	movs	r3, #7
 800495e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004962:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004966:	4619      	mov	r1, r3
 8004968:	4831      	ldr	r0, [pc, #196]	@ (8004a30 <HAL_UART_MspInit+0x180>)
 800496a:	f003 f801 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800496e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004976:	2302      	movs	r3, #2
 8004978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004982:	2300      	movs	r3, #0
 8004984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004988:	2307      	movs	r3, #7
 800498a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800498e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004992:	4619      	mov	r1, r3
 8004994:	4827      	ldr	r0, [pc, #156]	@ (8004a34 <HAL_UART_MspInit+0x184>)
 8004996:	f002 ffeb 	bl	8007970 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800499a:	e040      	b.n	8004a1e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a25      	ldr	r2, [pc, #148]	@ (8004a38 <HAL_UART_MspInit+0x188>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d13b      	bne.n	8004a1e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80049a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80049ac:	2300      	movs	r3, #0
 80049ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049b0:	f107 0320 	add.w	r3, r7, #32
 80049b4:	4618      	mov	r0, r3
 80049b6:	f006 f96b 	bl	800ac90 <HAL_RCCEx_PeriphCLKConfig>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80049c0:	f7ff f834 	bl	8003a2c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80049c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c8:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80049ca:	f043 0320 	orr.w	r3, r3, #32
 80049ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80049d0:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80049d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e0:	4a12      	ldr	r2, [pc, #72]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80049e8:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <HAL_UART_MspInit+0x17c>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80049f4:	23c0      	movs	r3, #192	@ 0xc0
 80049f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fa:	2302      	movs	r3, #2
 80049fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a06:	2303      	movs	r3, #3
 8004a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a12:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4808      	ldr	r0, [pc, #32]	@ (8004a3c <HAL_UART_MspInit+0x18c>)
 8004a1a:	f002 ffa9 	bl	8007970 <HAL_GPIO_Init>
}
 8004a1e:	bf00      	nop
 8004a20:	37b8      	adds	r7, #184	@ 0xb8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020400 	.word	0x40020400
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40011400 	.word	0x40011400
 8004a3c:	40020800 	.word	0x40020800

08004a40 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004a54:	4b3a      	ldr	r3, [pc, #232]	@ (8004b40 <HAL_FMC_MspInit+0x100>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d16d      	bne.n	8004b38 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004a5c:	4b38      	ldr	r3, [pc, #224]	@ (8004b40 <HAL_FMC_MspInit+0x100>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004a62:	4b38      	ldr	r3, [pc, #224]	@ (8004b44 <HAL_FMC_MspInit+0x104>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	4a37      	ldr	r2, [pc, #220]	@ (8004b44 <HAL_FMC_MspInit+0x104>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8004a6e:	4b35      	ldr	r3, [pc, #212]	@ (8004b44 <HAL_FMC_MspInit+0x104>)
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004a7a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004a7e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a90:	1d3b      	adds	r3, r7, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	482c      	ldr	r0, [pc, #176]	@ (8004b48 <HAL_FMC_MspInit+0x108>)
 8004a96:	f002 ff6b 	bl	8007970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004a9a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004a9e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004aac:	230c      	movs	r3, #12
 8004aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ab0:	1d3b      	adds	r3, r7, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4825      	ldr	r0, [pc, #148]	@ (8004b4c <HAL_FMC_MspInit+0x10c>)
 8004ab6:	f002 ff5b 	bl	8007970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004aba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004abe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004acc:	230c      	movs	r3, #12
 8004ace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	481e      	ldr	r0, [pc, #120]	@ (8004b50 <HAL_FMC_MspInit+0x110>)
 8004ad6:	f002 ff4b 	bl	8007970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004ada:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004ade:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004aec:	230c      	movs	r3, #12
 8004aee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4817      	ldr	r0, [pc, #92]	@ (8004b54 <HAL_FMC_MspInit+0x114>)
 8004af6:	f002 ff3b 	bl	8007970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004afa:	2328      	movs	r3, #40	@ 0x28
 8004afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b06:	2303      	movs	r3, #3
 8004b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4811      	ldr	r0, [pc, #68]	@ (8004b58 <HAL_FMC_MspInit+0x118>)
 8004b14:	f002 ff2c 	bl	8007970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004b18:	2308      	movs	r3, #8
 8004b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b24:	2303      	movs	r3, #3
 8004b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b28:	230c      	movs	r3, #12
 8004b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004b2c:	1d3b      	adds	r3, r7, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	480a      	ldr	r0, [pc, #40]	@ (8004b5c <HAL_FMC_MspInit+0x11c>)
 8004b32:	f002 ff1d 	bl	8007970 <HAL_GPIO_Init>
 8004b36:	e000      	b.n	8004b3a <HAL_FMC_MspInit+0xfa>
    return;
 8004b38:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20001540 	.word	0x20001540
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40021800 	.word	0x40021800
 8004b50:	40020c00 	.word	0x40020c00
 8004b54:	40021400 	.word	0x40021400
 8004b58:	40021c00 	.word	0x40021c00
 8004b5c:	40020800 	.word	0x40020800

08004b60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004b68:	f7ff ff6a 	bl	8004a40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	@ 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2b      	ldr	r2, [pc, #172]	@ (8004c30 <HAL_SAI_MspInit+0xbc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d124      	bne.n	8004bd0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004b86:	4b2b      	ldr	r3, [pc, #172]	@ (8004c34 <HAL_SAI_MspInit+0xc0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c38 <HAL_SAI_MspInit+0xc4>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	4a29      	ldr	r2, [pc, #164]	@ (8004c38 <HAL_SAI_MspInit+0xc4>)
 8004b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b9a:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <HAL_SAI_MspInit+0xc4>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004ba6:	4b23      	ldr	r3, [pc, #140]	@ (8004c34 <HAL_SAI_MspInit+0xc0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	4a21      	ldr	r2, [pc, #132]	@ (8004c34 <HAL_SAI_MspInit+0xc0>)
 8004bae:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004bb0:	23f0      	movs	r3, #240	@ 0xf0
 8004bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004bc0:	230a      	movs	r3, #10
 8004bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	4619      	mov	r1, r3
 8004bca:	481c      	ldr	r0, [pc, #112]	@ (8004c3c <HAL_SAI_MspInit+0xc8>)
 8004bcc:	f002 fed0 	bl	8007970 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <HAL_SAI_MspInit+0xcc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d125      	bne.n	8004c26 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004bda:	4b16      	ldr	r3, [pc, #88]	@ (8004c34 <HAL_SAI_MspInit+0xc0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004be2:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <HAL_SAI_MspInit+0xc4>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	4a14      	ldr	r2, [pc, #80]	@ (8004c38 <HAL_SAI_MspInit+0xc4>)
 8004be8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bee:	4b12      	ldr	r3, [pc, #72]	@ (8004c38 <HAL_SAI_MspInit+0xc4>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <HAL_SAI_MspInit+0xc0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <HAL_SAI_MspInit+0xc0>)
 8004c02:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004c16:	230a      	movs	r3, #10
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4808      	ldr	r0, [pc, #32]	@ (8004c44 <HAL_SAI_MspInit+0xd0>)
 8004c22:	f002 fea5 	bl	8007970 <HAL_GPIO_Init>

    }
}
 8004c26:	bf00      	nop
 8004c28:	3728      	adds	r7, #40	@ 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40015c04 	.word	0x40015c04
 8004c34:	20001544 	.word	0x20001544
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40022000 	.word	0x40022000
 8004c40:	40015c24 	.word	0x40015c24
 8004c44:	40021800 	.word	0x40021800

08004c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08e      	sub	sp, #56	@ 0x38
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004c58:	4b33      	ldr	r3, [pc, #204]	@ (8004d28 <HAL_InitTick+0xe0>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	4a32      	ldr	r2, [pc, #200]	@ (8004d28 <HAL_InitTick+0xe0>)
 8004c5e:	f043 0310 	orr.w	r3, r3, #16
 8004c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c64:	4b30      	ldr	r3, [pc, #192]	@ (8004d28 <HAL_InitTick+0xe0>)
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c70:	f107 0210 	add.w	r2, r7, #16
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 ffd6 	bl	800ac2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c8a:	f005 ffa7 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 8004c8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c90:	e004      	b.n	8004c9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c92:	f005 ffa3 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 8004c96:	4603      	mov	r3, r0
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9e:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <HAL_InitTick+0xe4>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	0c9b      	lsrs	r3, r3, #18
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004caa:	4b21      	ldr	r3, [pc, #132]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004cac:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <HAL_InitTick+0xec>)
 8004cae:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004cb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cca:	4b19      	ldr	r3, [pc, #100]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004cd0:	4817      	ldr	r0, [pc, #92]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004cd2:	f008 fb58 	bl	800d386 <HAL_TIM_Base_Init>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11b      	bne.n	8004d1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004ce4:	4812      	ldr	r0, [pc, #72]	@ (8004d30 <HAL_InitTick+0xe8>)
 8004ce6:	f008 fba5 	bl	800d434 <HAL_TIM_Base_Start_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004cf8:	2036      	movs	r0, #54	@ 0x36
 8004cfa:	f001 fb11 	bl	8006320 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b0f      	cmp	r3, #15
 8004d02:	d808      	bhi.n	8004d16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004d04:	2200      	movs	r2, #0
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	2036      	movs	r0, #54	@ 0x36
 8004d0a:	f001 faed 	bl	80062e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <HAL_InitTick+0xf0>)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e002      	b.n	8004d1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3738      	adds	r7, #56	@ 0x38
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	431bde83 	.word	0x431bde83
 8004d30:	20001548 	.word	0x20001548
 8004d34:	40001000 	.word	0x40001000
 8004d38:	20000068 	.word	0x20000068

08004d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d40:	bf00      	nop
 8004d42:	e7fd      	b.n	8004d40 <NMI_Handler+0x4>

08004d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <HardFault_Handler+0x4>

08004d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <MemManage_Handler+0x4>

08004d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <BusFault_Handler+0x4>

08004d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d60:	bf00      	nop
 8004d62:	e7fd      	b.n	8004d60 <UsageFault_Handler+0x4>

08004d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004d78:	4802      	ldr	r0, [pc, #8]	@ (8004d84 <TIM6_DAC_IRQHandler+0x10>)
 8004d7a:	f008 fc2a 	bl	800d5d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20001548 	.word	0x20001548

08004d88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004d8c:	4802      	ldr	r0, [pc, #8]	@ (8004d98 <OTG_FS_IRQHandler+0x10>)
 8004d8e:	f002 ffb4 	bl	8007cfa <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20011b64 	.word	0x20011b64

08004d9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004da0:	4802      	ldr	r0, [pc, #8]	@ (8004dac <LTDC_IRQHandler+0x10>)
 8004da2:	f004 ff21 	bl	8009be8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000c54 	.word	0x20000c54

08004db0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004db4:	4802      	ldr	r0, [pc, #8]	@ (8004dc0 <DMA2D_IRQHandler+0x10>)
 8004db6:	f002 f8eb 	bl	8006f90 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000abc 	.word	0x20000abc

08004dc4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004dc8:	4802      	ldr	r0, [pc, #8]	@ (8004dd4 <DMA2_Stream1_IRQHandler+0x10>)
 8004dca:	f001 fe21 	bl	8006a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200014cc 	.word	0x200014cc

08004dd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8004ddc:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <USART6_IRQHandler+0x2c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d106      	bne.n	8004df8 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <USART6_IRQHandler+0x2c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2210      	movs	r2, #16
 8004df0:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004df2:	4804      	ldr	r0, [pc, #16]	@ (8004e04 <USART6_IRQHandler+0x2c>)
 8004df4:	f000 fe1a 	bl	8005a2c <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004df8:	4802      	ldr	r0, [pc, #8]	@ (8004e04 <USART6_IRQHandler+0x2c>)
 8004dfa:	f009 fe35 	bl	800ea68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200011f4 	.word	0x200011f4

08004e08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e00a      	b.n	8004e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e1a:	f3af 8000 	nop.w
 8004e1e:	4601      	mov	r1, r0
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	60ba      	str	r2, [r7, #8]
 8004e26:	b2ca      	uxtb	r2, r1
 8004e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dbf0      	blt.n	8004e1a <_read+0x12>
  }

  return len;
 8004e38:	687b      	ldr	r3, [r7, #4]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e009      	b.n	8004e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	60ba      	str	r2, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3301      	adds	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dbf1      	blt.n	8004e54 <_write+0x12>
  }
  return len;
 8004e70:	687b      	ldr	r3, [r7, #4]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_close>:

int _close(int file)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ea2:	605a      	str	r2, [r3, #4]
  return 0;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <_isatty>:

int _isatty(int file)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004eba:	2301      	movs	r3, #1
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <_sbrk+0x5c>)
 8004eee:	4b15      	ldr	r3, [pc, #84]	@ (8004f44 <_sbrk+0x60>)
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ef8:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <_sbrk+0x64>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <_sbrk+0x64>)
 8004f02:	4a12      	ldr	r2, [pc, #72]	@ (8004f4c <_sbrk+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f06:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <_sbrk+0x64>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d207      	bcs.n	8004f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f14:	f012 f910 	bl	8017138 <__errno>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	e009      	b.n	8004f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f24:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <_sbrk+0x64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <_sbrk+0x64>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	4a05      	ldr	r2, [pc, #20]	@ (8004f48 <_sbrk+0x64>)
 8004f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20050000 	.word	0x20050000
 8004f44:	00000400 	.word	0x00000400
 8004f48:	20001594 	.word	0x20001594
 8004f4c:	20012090 	.word	0x20012090

08004f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <SystemInit+0x20>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	4a05      	ldr	r2, [pc, #20]	@ (8004f70 <SystemInit+0x20>)
 8004f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8004f78:	f000 f803 	bl	8004f82 <TIME_Platform_GetCurrentMs>
 8004f7c:	4603      	mov	r3, r0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 8004f86:	f000 fe2f 	bl	8005be8 <HAL_GetTick>
 8004f8a:	4603      	mov	r3, r0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <LOGGER_Connect+0x16>
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	e016      	b.n	8004fd4 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 8004fa6:	223f      	movs	r2, #63	@ 0x3f
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	480c      	ldr	r0, [pc, #48]	@ (8004fdc <LOGGER_Connect+0x4c>)
 8004fac:	f012 f844 	bl	8017038 <strncpy>
    current_config.server_port = port;
 8004fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe0 <LOGGER_Connect+0x50>)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8f1 	bl	80051a0 <LOGGER_Platform_Connect>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <LOGGER_Connect+0x40>
        logger_connected = true;
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <LOGGER_Connect+0x54>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000023 	.word	0x20000023
 8004fe0:	20000020 	.word	0x20000020
 8004fe4:	20001598 	.word	0x20001598

08004fe8 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 8004ff2:	4a04      	ldr	r2, [pc, #16]	@ (8005004 <LOGGER_SetFilterLevel+0x1c>)
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	7013      	strb	r3, [r2, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	2000159a 	.word	0x2000159a

08005008 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8005012:	4a0d      	ldr	r2, [pc, #52]	@ (8005048 <LOGGER_SetMode+0x40>)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 800501e:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <LOGGER_SetMode+0x44>)
 8005020:	2201      	movs	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 Network 연결 상태에 따라 결정
        logger_connected = Network_IsConnected();
    }
}
 8005024:	e00b      	b.n	800503e <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d002      	beq.n	8005032 <LOGGER_SetMode+0x2a>
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d105      	bne.n	800503e <LOGGER_SetMode+0x36>
        logger_connected = Network_IsConnected();
 8005032:	f7fb fef5 	bl	8000e20 <Network_IsConnected>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	4b04      	ldr	r3, [pc, #16]	@ (800504c <LOGGER_SetMode+0x44>)
 800503c:	701a      	strb	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20001599 	.word	0x20001599
 800504c:	20001598 	.word	0x20001598

08005050 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005050:	b40e      	push	{r1, r2, r3}
 8005052:	b590      	push	{r4, r7, lr}
 8005054:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8005058:	af00      	add	r7, sp, #0
 800505a:	4602      	mov	r2, r0
 800505c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005060:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8005064:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005066:	4b49      	ldr	r3, [pc, #292]	@ (800518c <LOGGER_SendFormatted+0x13c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800506e:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d37b      	bcc.n	8005170 <LOGGER_SendFormatted+0x120>
    if (level < current_config.level) return;
 8005078:	4b45      	ldr	r3, [pc, #276]	@ (8005190 <LOGGER_SendFormatted+0x140>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005080:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d374      	bcc.n	8005174 <LOGGER_SendFormatted+0x124>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 800508a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800508e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005092:	4a40      	ldr	r2, [pc, #256]	@ (8005194 <LOGGER_SendFormatted+0x144>)
 8005094:	461c      	mov	r4, r3
 8005096:	4613      	mov	r3, r2
 8005098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800509a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 800509e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050a2:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050ac:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80050b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b4:	f107 001c 	add.w	r0, r7, #28
 80050b8:	4a37      	ldr	r2, [pc, #220]	@ (8005198 <LOGGER_SendFormatted+0x148>)
 80050ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050be:	f011 fedb 	bl	8016e78 <sniprintf>
 80050c2:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 80050c6:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80050ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050d2:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 80050d4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050d8:	f107 021c 	add.w	r2, r7, #28
 80050dc:	18d0      	adds	r0, r2, r3
 80050de:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050e2:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80050e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050ea:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80050f4:	f011 ff8a 	bl	801700c <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 80050f8:	4b28      	ldr	r3, [pc, #160]	@ (800519c <LOGGER_SendFormatted+0x14c>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d01f      	beq.n	8005140 <LOGGER_SendFormatted+0xf0>
 8005100:	2b02      	cmp	r3, #2
 8005102:	dc3c      	bgt.n	800517e <LOGGER_SendFormatted+0x12e>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <LOGGER_SendFormatted+0xbe>
 8005108:	2b01      	cmp	r3, #1
 800510a:	d006      	beq.n	800511a <LOGGER_SendFormatted+0xca>
 800510c:	e037      	b.n	800517e <LOGGER_SendFormatted+0x12e>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 800510e:	f107 031c 	add.w	r3, r7, #28
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f850 	bl	80051b8 <LOGGER_Platform_Send>
            break;
 8005118:	e031      	b.n	800517e <LOGGER_SendFormatted+0x12e>
            
        case LOGGER_MODE_SD_ONLY:
            if (Network_IsConnected()) {
 800511a:	f7fb fe81 	bl	8000e20 <Network_IsConnected>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d029      	beq.n	8005178 <LOGGER_SendFormatted+0x128>
                Network_SendBinary(buffer, strlen(buffer) + 1);
 8005124:	f107 031c 	add.w	r3, r7, #28
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb f87b 	bl	8000224 <strlen>
 800512e:	4603      	mov	r3, r0
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	f107 031c 	add.w	r3, r7, #28
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb fe27 	bl	8000d8c <Network_SendBinary>
            }
            break;
 800513e:	e01b      	b.n	8005178 <LOGGER_SendFormatted+0x128>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8005140:	f107 031c 	add.w	r3, r7, #28
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f837 	bl	80051b8 <LOGGER_Platform_Send>
            // SD 출력 (에러 무시)
            if (Network_IsConnected()) {
 800514a:	f7fb fe69 	bl	8000e20 <Network_IsConnected>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <LOGGER_SendFormatted+0x12c>
                Network_SendBinary(buffer, strlen(buffer) + 1);
 8005154:	f107 031c 	add.w	r3, r7, #28
 8005158:	4618      	mov	r0, r3
 800515a:	f7fb f863 	bl	8000224 <strlen>
 800515e:	4603      	mov	r3, r0
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	f107 031c 	add.w	r3, r7, #28
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7fb fe0f 	bl	8000d8c <Network_SendBinary>
            }
            break;
 800516e:	e005      	b.n	800517c <LOGGER_SendFormatted+0x12c>
    if (level < filter_level) return;
 8005170:	bf00      	nop
 8005172:	e004      	b.n	800517e <LOGGER_SendFormatted+0x12e>
    if (level < current_config.level) return;
 8005174:	bf00      	nop
 8005176:	e002      	b.n	800517e <LOGGER_SendFormatted+0x12e>
            break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <LOGGER_SendFormatted+0x12e>
            break;
 800517c:	bf00      	nop
    }
}
 800517e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005182:	46bd      	mov	sp, r7
 8005184:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005188:	b003      	add	sp, #12
 800518a:	4770      	bx	lr
 800518c:	2000159a 	.word	0x2000159a
 8005190:	20000020 	.word	0x20000020
 8005194:	0801a5b0 	.word	0x0801a5b0
 8005198:	0801a5c0 	.word	0x0801a5c0
 800519c:	20001599 	.word	0x20001599

080051a0 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <LOGGER_Platform_Send+0x14>
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	e01c      	b.n	8005206 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fb f829 	bl	8000224 <strlen>
 80051d2:	4603      	mov	r3, r0
 80051d4:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dd12      	ble.n	8005202 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	480a      	ldr	r0, [pc, #40]	@ (8005210 <LOGGER_Platform_Send+0x58>)
 80051e8:	f009 fa16 	bl	800e618 <HAL_UART_Transmit>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d107      	bne.n	8005202 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80051f2:	2364      	movs	r3, #100	@ 0x64
 80051f4:	2202      	movs	r2, #2
 80051f6:	4907      	ldr	r1, [pc, #28]	@ (8005214 <LOGGER_Platform_Send+0x5c>)
 80051f8:	4805      	ldr	r0, [pc, #20]	@ (8005210 <LOGGER_Platform_Send+0x58>)
 80051fa:	f009 fa0d 	bl	800e618 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e001      	b.n	8005206 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	2000116c 	.word	0x2000116c
 8005214:	0801a5c4 	.word	0x0801a5c4

08005218 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8005226:	4913      	ldr	r1, [pc, #76]	@ (8005274 <UART_Connect+0x5c>)
 8005228:	2003      	movs	r0, #3
 800522a:	f7ff ff11 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e01c      	b.n	800526c <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4910      	ldr	r1, [pc, #64]	@ (8005278 <UART_Connect+0x60>)
 8005236:	2001      	movs	r0, #1
 8005238:	f7ff ff0a 	bl	8005050 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8ef 	bl	8005420 <UART_Platform_Connect>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <UART_Connect+0x46>
        uart_connected = true;
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <UART_Connect+0x64>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	490a      	ldr	r1, [pc, #40]	@ (8005280 <UART_Connect+0x68>)
 8005256:	2001      	movs	r0, #1
 8005258:	f7ff fefa 	bl	8005050 <LOGGER_SendFormatted>
 800525c:	e005      	b.n	800526a <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4908      	ldr	r1, [pc, #32]	@ (8005284 <UART_Connect+0x6c>)
 8005264:	2003      	movs	r0, #3
 8005266:	f7ff fef3 	bl	8005050 <LOGGER_SendFormatted>
    }

    return status;
 800526a:	7bfb      	ldrb	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	0801a5c8 	.word	0x0801a5c8
 8005278:	0801a5ec 	.word	0x0801a5ec
 800527c:	2000159b 	.word	0x2000159b
 8005280:	0801a604 	.word	0x0801a604
 8005284:	0801a628 	.word	0x0801a628

08005288 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <UART_Send+0x70>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 800529e:	4917      	ldr	r1, [pc, #92]	@ (80052fc <UART_Send+0x74>)
 80052a0:	2003      	movs	r0, #3
 80052a2:	f7ff fed5 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e022      	b.n	80052f0 <UART_Send+0x68>
    }

    if (data == NULL) {
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 80052b0:	4913      	ldr	r1, [pc, #76]	@ (8005300 <UART_Send+0x78>)
 80052b2:	2003      	movs	r0, #3
 80052b4:	f7ff fecc 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e019      	b.n	80052f0 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	4911      	ldr	r1, [pc, #68]	@ (8005304 <UART_Send+0x7c>)
 80052c0:	2000      	movs	r0, #0
 80052c2:	f7ff fec5 	bl	8005050 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f992 	bl	80055f0 <UART_Platform_Send>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	490b      	ldr	r1, [pc, #44]	@ (8005308 <UART_Send+0x80>)
 80052da:	2000      	movs	r0, #0
 80052dc:	f7ff feb8 	bl	8005050 <LOGGER_SendFormatted>
 80052e0:	e005      	b.n	80052ee <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4909      	ldr	r1, [pc, #36]	@ (800530c <UART_Send+0x84>)
 80052e8:	2003      	movs	r0, #3
 80052ea:	f7ff feb1 	bl	8005050 <LOGGER_SendFormatted>
    }

    return status;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2000159b 	.word	0x2000159b
 80052fc:	0801a654 	.word	0x0801a654
 8005300:	0801a678 	.word	0x0801a678
 8005304:	0801a698 	.word	0x0801a698
 8005308:	0801a6b0 	.word	0x0801a6b0
 800530c:	0801a6cc 	.word	0x0801a6cc

08005310 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 800531c:	4b22      	ldr	r3, [pc, #136]	@ (80053a8 <UART_Receive+0x98>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f083 0301 	eor.w	r3, r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 800532a:	4920      	ldr	r1, [pc, #128]	@ (80053ac <UART_Receive+0x9c>)
 800532c:	2003      	movs	r0, #3
 800532e:	f7ff fe8f 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e034      	b.n	80053a0 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <UART_Receive+0x38>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	dd02      	ble.n	8005348 <UART_Receive+0x38>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d105      	bne.n	8005354 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005348:	4919      	ldr	r1, [pc, #100]	@ (80053b0 <UART_Receive+0xa0>)
 800534a:	2003      	movs	r0, #3
 800534c:	f7ff fe80 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e025      	b.n	80053a0 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4917      	ldr	r1, [pc, #92]	@ (80053b4 <UART_Receive+0xa4>)
 8005358:	2000      	movs	r0, #0
 800535a:	f7ff fe79 	bl	8005050 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f980 	bl	8005668 <UART_Platform_Receive>
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	490f      	ldr	r1, [pc, #60]	@ (80053b8 <UART_Receive+0xa8>)
 800537a:	2000      	movs	r0, #0
 800537c:	f7ff fe68 	bl	8005050 <LOGGER_SendFormatted>
 8005380:	e00d      	b.n	800539e <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d104      	bne.n	8005392 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005388:	490c      	ldr	r1, [pc, #48]	@ (80053bc <UART_Receive+0xac>)
 800538a:	2000      	movs	r0, #0
 800538c:	f7ff fe60 	bl	8005050 <LOGGER_SendFormatted>
 8005390:	e005      	b.n	800539e <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	461a      	mov	r2, r3
 8005396:	490a      	ldr	r1, [pc, #40]	@ (80053c0 <UART_Receive+0xb0>)
 8005398:	2003      	movs	r0, #3
 800539a:	f7ff fe59 	bl	8005050 <LOGGER_SendFormatted>
    }

    return status;
 800539e:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	2000159b 	.word	0x2000159b
 80053ac:	0801a6f0 	.word	0x0801a6f0
 80053b0:	0801a718 	.word	0x0801a718
 80053b4:	0801a744 	.word	0x0801a744
 80053b8:	0801a76c 	.word	0x0801a76c
 80053bc:	0801a78c 	.word	0x0801a78c
 80053c0:	0801a7a4 	.word	0x0801a7a4

080053c4 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80053ce:	e007      	b.n	80053e0 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 80053d0:	4b12      	ldr	r3, [pc, #72]	@ (800541c <flush_rx_buffer+0x58>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3301      	adds	r3, #1
 80053de:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80053e0:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <flush_rx_buffer+0x58>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d106      	bne.n	80053fc <flush_rx_buffer+0x38>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b63      	cmp	r3, #99	@ 0x63
 80053f2:	dded      	ble.n	80053d0 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80053f4:	e002      	b.n	80053fc <flush_rx_buffer+0x38>
        flush_count++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3301      	adds	r3, #1
 80053fa:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80053fc:	1cf9      	adds	r1, r7, #3
 80053fe:	2301      	movs	r3, #1
 8005400:	2201      	movs	r2, #1
 8005402:	4806      	ldr	r0, [pc, #24]	@ (800541c <flush_rx_buffer+0x58>)
 8005404:	f009 f991 	bl	800e72a <HAL_UART_Receive>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <flush_rx_buffer+0x50>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b63      	cmp	r3, #99	@ 0x63
 8005412:	ddf0      	ble.n	80053f6 <flush_rx_buffer+0x32>
    }
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	200011f4 	.word	0x200011f4

08005420 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005428:	4b5b      	ldr	r3, [pc, #364]	@ (8005598 <UART_Platform_Connect+0x178>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 800542e:	4b5b      	ldr	r3, [pc, #364]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005430:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005432:	4b5a      	ldr	r3, [pc, #360]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005438:	4959      	ldr	r1, [pc, #356]	@ (80055a0 <UART_Platform_Connect+0x180>)
 800543a:	2001      	movs	r0, #1
 800543c:	f7ff fe08 	bl	8005050 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005440:	4b56      	ldr	r3, [pc, #344]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005448:	4956      	ldr	r1, [pc, #344]	@ (80055a4 <UART_Platform_Connect+0x184>)
 800544a:	2001      	movs	r0, #1
 800544c:	f7ff fe00 	bl	8005050 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005450:	4b52      	ldr	r3, [pc, #328]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	4952      	ldr	r1, [pc, #328]	@ (80055a8 <UART_Platform_Connect+0x188>)
 800545e:	2001      	movs	r0, #1
 8005460:	f7ff fdf6 	bl	8005050 <LOGGER_SendFormatted>
 8005464:	e018      	b.n	8005498 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005466:	4951      	ldr	r1, [pc, #324]	@ (80055ac <UART_Platform_Connect+0x18c>)
 8005468:	2003      	movs	r0, #3
 800546a:	f7ff fdf1 	bl	8005050 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800546e:	4b4b      	ldr	r3, [pc, #300]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005470:	4a4f      	ldr	r2, [pc, #316]	@ (80055b0 <UART_Platform_Connect+0x190>)
 8005472:	675a      	str	r2, [r3, #116]	@ 0x74
 8005474:	4b4e      	ldr	r3, [pc, #312]	@ (80055b0 <UART_Platform_Connect+0x190>)
 8005476:	4a49      	ldr	r2, [pc, #292]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005478:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 800547a:	4b48      	ldr	r3, [pc, #288]	@ (800559c <UART_Platform_Connect+0x17c>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005482:	494c      	ldr	r1, [pc, #304]	@ (80055b4 <UART_Platform_Connect+0x194>)
 8005484:	2001      	movs	r0, #1
 8005486:	f7ff fde3 	bl	8005050 <LOGGER_SendFormatted>
 800548a:	e005      	b.n	8005498 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 800548c:	494a      	ldr	r1, [pc, #296]	@ (80055b8 <UART_Platform_Connect+0x198>)
 800548e:	2003      	movs	r0, #3
 8005490:	f7ff fdde 	bl	8005050 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e07a      	b.n	800558e <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005498:	4b48      	ldr	r3, [pc, #288]	@ (80055bc <UART_Platform_Connect+0x19c>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 80054a0:	483e      	ldr	r0, [pc, #248]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054a2:	f009 fa4e 	bl	800e942 <HAL_UART_DMAStop>
        dma_receiving = false;
 80054a6:	4b45      	ldr	r3, [pc, #276]	@ (80055bc <UART_Platform_Connect+0x19c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 80054ac:	4944      	ldr	r1, [pc, #272]	@ (80055c0 <UART_Platform_Connect+0x1a0>)
 80054ae:	2001      	movs	r0, #1
 80054b0:	f7ff fdce 	bl	8005050 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 80054b4:	4b39      	ldr	r3, [pc, #228]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054b6:	2220      	movs	r2, #32
 80054b8:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 80054ba:	4b38      	ldr	r3, [pc, #224]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 80054c2:	4b36      	ldr	r3, [pc, #216]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d026      	beq.n	8005518 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 80054ca:	4b34      	ldr	r3, [pc, #208]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d01a      	beq.n	800550e <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 80054d8:	493a      	ldr	r1, [pc, #232]	@ (80055c4 <UART_Platform_Connect+0x1a4>)
 80054da:	2001      	movs	r0, #1
 80054dc:	f7ff fdb8 	bl	8005050 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 80054e0:	4b2e      	ldr	r3, [pc, #184]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f943 	bl	8006770 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 80054ea:	4b2c      	ldr	r3, [pc, #176]	@ (800559c <UART_Platform_Connect+0x17c>)
 80054ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 f890 	bl	8006614 <HAL_DMA_Init>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80054fa:	4933      	ldr	r1, [pc, #204]	@ (80055c8 <UART_Platform_Connect+0x1a8>)
 80054fc:	2003      	movs	r0, #3
 80054fe:	f7ff fda7 	bl	8005050 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e043      	b.n	800558e <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005506:	4931      	ldr	r1, [pc, #196]	@ (80055cc <UART_Platform_Connect+0x1ac>)
 8005508:	2001      	movs	r0, #1
 800550a:	f7ff fda1 	bl	8005050 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 800550e:	4b23      	ldr	r3, [pc, #140]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005518:	f7ff ff54 	bl	80053c4 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 800551c:	4b2c      	ldr	r3, [pc, #176]	@ (80055d0 <UART_Platform_Connect+0x1b0>)
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005522:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <UART_Platform_Connect+0x1b4>)
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005528:	4b2b      	ldr	r3, [pc, #172]	@ (80055d8 <UART_Platform_Connect+0x1b8>)
 800552a:	2200      	movs	r2, #0
 800552c:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 800552e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005532:	2100      	movs	r1, #0
 8005534:	4829      	ldr	r0, [pc, #164]	@ (80055dc <UART_Platform_Connect+0x1bc>)
 8005536:	f011 fd77 	bl	8017028 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 800553a:	4929      	ldr	r1, [pc, #164]	@ (80055e0 <UART_Platform_Connect+0x1c0>)
 800553c:	2001      	movs	r0, #1
 800553e:	f7ff fd87 	bl	8005050 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005546:	4925      	ldr	r1, [pc, #148]	@ (80055dc <UART_Platform_Connect+0x1bc>)
 8005548:	4814      	ldr	r0, [pc, #80]	@ (800559c <UART_Platform_Connect+0x17c>)
 800554a:	f009 f9b6 	bl	800e8ba <HAL_UART_Receive_DMA>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005558:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <UART_Platform_Connect+0x19c>)
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 800555e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005562:	4920      	ldr	r1, [pc, #128]	@ (80055e4 <UART_Platform_Connect+0x1c4>)
 8005564:	2001      	movs	r0, #1
 8005566:	f7ff fd73 	bl	8005050 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e00f      	b.n	800558e <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	461a      	mov	r2, r3
 8005572:	491d      	ldr	r1, [pc, #116]	@ (80055e8 <UART_Platform_Connect+0x1c8>)
 8005574:	2003      	movs	r0, #3
 8005576:	f7ff fd6b 	bl	8005050 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <UART_Platform_Connect+0x17c>)
 800557c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <UART_Platform_Connect+0x17c>)
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005584:	4919      	ldr	r1, [pc, #100]	@ (80055ec <UART_Platform_Connect+0x1cc>)
 8005586:	2003      	movs	r0, #3
 8005588:	f7ff fd62 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800558c:	2301      	movs	r3, #1
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	200017a0 	.word	0x200017a0
 800559c:	200011f4 	.word	0x200011f4
 80055a0:	0801a9a0 	.word	0x0801a9a0
 80055a4:	0801a9cc 	.word	0x0801a9cc
 80055a8:	0801a9f4 	.word	0x0801a9f4
 80055ac:	0801aa10 	.word	0x0801aa10
 80055b0:	200014cc 	.word	0x200014cc
 80055b4:	0801aa4c 	.word	0x0801aa4c
 80055b8:	0801aa78 	.word	0x0801aa78
 80055bc:	200017a1 	.word	0x200017a1
 80055c0:	0801aaa4 	.word	0x0801aaa4
 80055c4:	0801aad0 	.word	0x0801aad0
 80055c8:	0801ab00 	.word	0x0801ab00
 80055cc:	0801ab2c 	.word	0x0801ab2c
 80055d0:	2000159c 	.word	0x2000159c
 80055d4:	2000159d 	.word	0x2000159d
 80055d8:	2000159e 	.word	0x2000159e
 80055dc:	200015a0 	.word	0x200015a0
 80055e0:	0801ab58 	.word	0x0801ab58
 80055e4:	0801ab80 	.word	0x0801ab80
 80055e8:	0801abc4 	.word	0x0801abc4
 80055ec:	0801ac00 	.word	0x0801ac00

080055f0 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <UART_Platform_Send+0x1c>
 80055fe:	4b17      	ldr	r3, [pc, #92]	@ (800565c <UART_Platform_Send+0x6c>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <UART_Platform_Send+0x20>
 800560c:	2301      	movs	r3, #1
 800560e:	e021      	b.n	8005654 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fa fe07 	bl	8000224 <strlen>
 8005616:	4603      	mov	r3, r0
 8005618:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <UART_Platform_Send+0x34>
 8005620:	2300      	movs	r3, #0
 8005622:	e017      	b.n	8005654 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005624:	f7ff fece 	bl	80053c4 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	b29a      	uxth	r2, r3
 800562c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	480b      	ldr	r0, [pc, #44]	@ (8005660 <UART_Platform_Send+0x70>)
 8005634:	f008 fff0 	bl	800e618 <HAL_UART_Transmit>
 8005638:	4603      	mov	r3, r0
 800563a:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 800563c:	7afb      	ldrb	r3, [r7, #11]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e006      	b.n	8005654 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005646:	7afb      	ldrb	r3, [r7, #11]
 8005648:	461a      	mov	r2, r3
 800564a:	4906      	ldr	r1, [pc, #24]	@ (8005664 <UART_Platform_Send+0x74>)
 800564c:	2003      	movs	r0, #3
 800564e:	f7ff fcff 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005652:	2301      	movs	r3, #1
    }
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200017a0 	.word	0x200017a0
 8005660:	200011f4 	.word	0x200011f4
 8005664:	0801ac60 	.word	0x0801ac60

08005668 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <UART_Platform_Receive+0x26>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d006      	beq.n	800568e <UART_Platform_Receive+0x26>
 8005680:	4b74      	ldr	r3, [pc, #464]	@ (8005854 <UART_Platform_Receive+0x1ec>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f083 0301 	eor.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0dc      	b.n	800584c <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	dc04      	bgt.n	80056a2 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0d4      	b.n	800584c <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 80056a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005858 <UART_Platform_Receive+0x1f0>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f083 0301 	eor.w	r3, r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e0c8      	b.n	800584c <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 80056ba:	4b68      	ldr	r3, [pc, #416]	@ (800585c <UART_Platform_Receive+0x1f4>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 80056c4:	4b65      	ldr	r3, [pc, #404]	@ (800585c <UART_Platform_Receive+0x1f4>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 80056ca:	4965      	ldr	r1, [pc, #404]	@ (8005860 <UART_Platform_Receive+0x1f8>)
 80056cc:	2002      	movs	r0, #2
 80056ce:	f7ff fcbf 	bl	8005050 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0ba      	b.n	800584c <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 80056d6:	4b63      	ldr	r3, [pc, #396]	@ (8005864 <UART_Platform_Receive+0x1fc>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80b4 	beq.w	800584a <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 80056e2:	4b60      	ldr	r3, [pc, #384]	@ (8005864 <UART_Platform_Receive+0x1fc>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 80056e8:	4b5f      	ldr	r3, [pc, #380]	@ (8005868 <UART_Platform_Receive+0x200>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 80056ee:	8b7b      	ldrh	r3, [r7, #26]
 80056f0:	461a      	mov	r2, r3
 80056f2:	495e      	ldr	r1, [pc, #376]	@ (800586c <UART_Platform_Receive+0x204>)
 80056f4:	2000      	movs	r0, #0
 80056f6:	f7ff fcab 	bl	8005050 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 80056fa:	8b7b      	ldrh	r3, [r7, #26]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 809e 	beq.w	800583e <UART_Platform_Receive+0x1d6>
 8005702:	8b7b      	ldrh	r3, [r7, #26]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	f340 8099 	ble.w	800583e <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 800570c:	8b7b      	ldrh	r3, [r7, #26]
 800570e:	461a      	mov	r2, r3
 8005710:	4957      	ldr	r1, [pc, #348]	@ (8005870 <UART_Platform_Receive+0x208>)
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f011 fd3d 	bl	8017192 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8005718:	8b7b      	ldrh	r3, [r7, #26]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8005722:	8b7a      	ldrh	r2, [r7, #26]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8005728:	8b7a      	ldrh	r2, [r7, #26]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4951      	ldr	r1, [pc, #324]	@ (8005874 <UART_Platform_Receive+0x20c>)
 800572e:	2000      	movs	r0, #0
 8005730:	f7ff fc8e 	bl	8005050 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8005734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005738:	2100      	movs	r1, #0
 800573a:	484d      	ldr	r0, [pc, #308]	@ (8005870 <UART_Platform_Receive+0x208>)
 800573c:	f011 fc74 	bl	8017028 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005740:	484d      	ldr	r0, [pc, #308]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005742:	f009 f8fe 	bl	800e942 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8005746:	4b4c      	ldr	r3, [pc, #304]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 800574e:	4b4a      	ldr	r3, [pc, #296]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2202      	movs	r2, #2
 8005754:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8005756:	4b48      	ldr	r3, [pc, #288]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2204      	movs	r2, #4
 800575c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 800575e:	4b46      	ldr	r3, [pc, #280]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2208      	movs	r2, #8
 8005764:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8005766:	4b44      	ldr	r3, [pc, #272]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 800576e:	4b42      	ldr	r3, [pc, #264]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005772:	2b00      	cmp	r3, #0
 8005774:	d025      	beq.n	80057c2 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8005776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800577a:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800577c:	e00b      	b.n	8005796 <UART_Platform_Receive+0x12e>
                    timeout--;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3b01      	subs	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e002      	b.n	8005790 <UART_Platform_Receive+0x128>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b63      	cmp	r3, #99	@ 0x63
 8005794:	ddf9      	ble.n	800578a <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005796:	4b38      	ldr	r3, [pc, #224]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800579a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <UART_Platform_Receive+0x142>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	dce9      	bgt.n	800577e <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 80057b0:	4932      	ldr	r1, [pc, #200]	@ (800587c <UART_Platform_Receive+0x214>)
 80057b2:	2002      	movs	r0, #2
 80057b4:	f7ff fc4c 	bl	8005050 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80057b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005878 <UART_Platform_Receive+0x210>)
 80057ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 80057c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005878 <UART_Platform_Receive+0x210>)
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 80057ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005878 <UART_Platform_Receive+0x210>)
 80057cc:	2220      	movs	r2, #32
 80057ce:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e002      	b.n	80057dc <UART_Platform_Receive+0x174>
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80057e2:	4293      	cmp	r3, r2
 80057e4:	ddf7      	ble.n	80057d6 <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80057e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ea:	4921      	ldr	r1, [pc, #132]	@ (8005870 <UART_Platform_Receive+0x208>)
 80057ec:	4822      	ldr	r0, [pc, #136]	@ (8005878 <UART_Platform_Receive+0x210>)
 80057ee:	f009 f864 	bl	800e8ba <HAL_UART_Receive_DMA>
 80057f2:	4603      	mov	r3, r0
 80057f4:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80057f6:	7e7b      	ldrb	r3, [r7, #25]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 80057fc:	4920      	ldr	r1, [pc, #128]	@ (8005880 <UART_Platform_Receive+0x218>)
 80057fe:	2000      	movs	r0, #0
 8005800:	f7ff fc26 	bl	8005050 <LOGGER_SendFormatted>
 8005804:	e019      	b.n	800583a <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8005806:	7e7a      	ldrb	r2, [r7, #25]
 8005808:	4b1b      	ldr	r3, [pc, #108]	@ (8005878 <UART_Platform_Receive+0x210>)
 800580a:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800580c:	4b1a      	ldr	r3, [pc, #104]	@ (8005878 <UART_Platform_Receive+0x210>)
 800580e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	491b      	ldr	r1, [pc, #108]	@ (8005884 <UART_Platform_Receive+0x21c>)
 8005818:	2002      	movs	r0, #2
 800581a:	f7ff fc19 	bl	8005050 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 800581e:	4b16      	ldr	r3, [pc, #88]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8005826:	4b14      	ldr	r3, [pc, #80]	@ (8005878 <UART_Platform_Receive+0x210>)
 8005828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	4915      	ldr	r1, [pc, #84]	@ (8005888 <UART_Platform_Receive+0x220>)
 8005834:	2002      	movs	r0, #2
 8005836:	f7ff fc0b 	bl	8005050 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e006      	b.n	800584c <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 800583e:	8b7a      	ldrh	r2, [r7, #26]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4912      	ldr	r1, [pc, #72]	@ (800588c <UART_Platform_Receive+0x224>)
 8005844:	2002      	movs	r0, #2
 8005846:	f7ff fc03 	bl	8005050 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 800584a:	2302      	movs	r3, #2
}
 800584c:	4618      	mov	r0, r3
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	200017a0 	.word	0x200017a0
 8005858:	200017a1 	.word	0x200017a1
 800585c:	2000159d 	.word	0x2000159d
 8005860:	0801ac98 	.word	0x0801ac98
 8005864:	2000159c 	.word	0x2000159c
 8005868:	2000159e 	.word	0x2000159e
 800586c:	0801acc8 	.word	0x0801acc8
 8005870:	200015a0 	.word	0x200015a0
 8005874:	0801acec 	.word	0x0801acec
 8005878:	200011f4 	.word	0x200011f4
 800587c:	0801ad18 	.word	0x0801ad18
 8005880:	0801ad54 	.word	0x0801ad54
 8005884:	0801ad84 	.word	0x0801ad84
 8005888:	0801adcc 	.word	0x0801adcc
 800588c:	0801ade8 	.word	0x0801ade8

08005890 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a0a      	ldr	r2, [pc, #40]	@ (80058c8 <HAL_UART_RxCpltCallback+0x38>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d10e      	bne.n	80058c0 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 80058a2:	4b0a      	ldr	r3, [pc, #40]	@ (80058cc <HAL_UART_RxCpltCallback+0x3c>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 80058a8:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_UART_RxCpltCallback+0x40>)
 80058aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ae:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <HAL_UART_RxCpltCallback+0x40>)
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	4906      	ldr	r1, [pc, #24]	@ (80058d4 <HAL_UART_RxCpltCallback+0x44>)
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7ff fbc8 	bl	8005050 <LOGGER_SendFormatted>
  }
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40011400 	.word	0x40011400
 80058cc:	2000159c 	.word	0x2000159c
 80058d0:	2000159e 	.word	0x2000159e
 80058d4:	0801ae24 	.word	0x0801ae24

080058d8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a05      	ldr	r2, [pc, #20]	@ (80058fc <HAL_UART_RxHalfCpltCallback+0x24>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d103      	bne.n	80058f2 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 80058ea:	4905      	ldr	r1, [pc, #20]	@ (8005900 <HAL_UART_RxHalfCpltCallback+0x28>)
 80058ec:	2002      	movs	r0, #2
 80058ee:	f7ff fbaf 	bl	8005050 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40011400 	.word	0x40011400
 8005900:	0801ae5c 	.word	0x0801ae5c

08005904 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a3c      	ldr	r2, [pc, #240]	@ (8005a04 <HAL_UART_ErrorCallback+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d171      	bne.n	80059fa <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8005916:	4b3c      	ldr	r3, [pc, #240]	@ (8005a08 <HAL_UART_ErrorCallback+0x104>)
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 800591c:	493b      	ldr	r1, [pc, #236]	@ (8005a0c <HAL_UART_ErrorCallback+0x108>)
 800591e:	2002      	movs	r0, #2
 8005920:	f7ff fb96 	bl	8005050 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b08      	cmp	r3, #8
 8005930:	d107      	bne.n	8005942 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2208      	movs	r2, #8
 8005938:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 800593a:	4935      	ldr	r1, [pc, #212]	@ (8005a10 <HAL_UART_ErrorCallback+0x10c>)
 800593c:	2002      	movs	r0, #2
 800593e:	f7ff fb87 	bl	8005050 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d107      	bne.n	8005960 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2204      	movs	r2, #4
 8005956:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8005958:	492e      	ldr	r1, [pc, #184]	@ (8005a14 <HAL_UART_ErrorCallback+0x110>)
 800595a:	2002      	movs	r0, #2
 800595c:	f7ff fb78 	bl	8005050 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d107      	bne.n	800597e <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2202      	movs	r2, #2
 8005974:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8005976:	4928      	ldr	r1, [pc, #160]	@ (8005a18 <HAL_UART_ErrorCallback+0x114>)
 8005978:	2002      	movs	r0, #2
 800597a:	f7ff fb69 	bl	8005050 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8005994:	4921      	ldr	r1, [pc, #132]	@ (8005a1c <HAL_UART_ErrorCallback+0x118>)
 8005996:	2002      	movs	r0, #2
 8005998:	f7ff fb5a 	bl	8005050 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f008 ffd0 	bl	800e942 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80059c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059c6:	2100      	movs	r1, #0
 80059c8:	4815      	ldr	r0, [pc, #84]	@ (8005a20 <HAL_UART_ErrorCallback+0x11c>)
 80059ca:	f011 fb2d 	bl	8017028 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80059ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d2:	4913      	ldr	r1, [pc, #76]	@ (8005a20 <HAL_UART_ErrorCallback+0x11c>)
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f008 ff70 	bl	800e8ba <HAL_UART_Receive_DMA>
 80059da:	4603      	mov	r3, r0
 80059dc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 80059e4:	490f      	ldr	r1, [pc, #60]	@ (8005a24 <HAL_UART_ErrorCallback+0x120>)
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7ff fb32 	bl	8005050 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80059ec:	e005      	b.n	80059fa <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	461a      	mov	r2, r3
 80059f2:	490d      	ldr	r1, [pc, #52]	@ (8005a28 <HAL_UART_ErrorCallback+0x124>)
 80059f4:	2003      	movs	r0, #3
 80059f6:	f7ff fb2b 	bl	8005050 <LOGGER_SendFormatted>
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40011400 	.word	0x40011400
 8005a08:	2000159d 	.word	0x2000159d
 8005a0c:	0801aea8 	.word	0x0801aea8
 8005a10:	0801aed4 	.word	0x0801aed4
 8005a14:	0801aef0 	.word	0x0801aef0
 8005a18:	0801af0c 	.word	0x0801af0c
 8005a1c:	0801af28 	.word	0x0801af28
 8005a20:	200015a0 	.word	0x200015a0
 8005a24:	0801af44 	.word	0x0801af44
 8005a28:	0801af78 	.word	0x0801af78

08005a2c <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a3e      	ldr	r2, [pc, #248]	@ (8005b34 <USER_UART_IDLECallback+0x108>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d175      	bne.n	8005b2a <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d103      	bne.n	8005a58 <USER_UART_IDLECallback+0x2c>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d103      	bne.n	8005a6e <USER_UART_IDLECallback+0x42>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d103      	bne.n	8005a84 <USER_UART_IDLECallback+0x58>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f043 0304 	orr.w	r3, r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d103      	bne.n	8005a9a <USER_UART_IDLECallback+0x6e>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f043 0308 	orr.w	r3, r3, #8
 8005a98:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8005aa4:	897b      	ldrh	r3, [r7, #10]
 8005aa6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <USER_UART_IDLECallback+0x10c>)
 8005aae:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005ab0:	4b21      	ldr	r3, [pc, #132]	@ (8005b38 <USER_UART_IDLECallback+0x10c>)
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d033      	beq.n	8005b22 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8005aba:	4b20      	ldr	r3, [pc, #128]	@ (8005b3c <USER_UART_IDLECallback+0x110>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b38 <USER_UART_IDLECallback+0x10c>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	491b      	ldr	r1, [pc, #108]	@ (8005b40 <USER_UART_IDLECallback+0x114>)
 8005ad2:	2002      	movs	r0, #2
 8005ad4:	f7ff fabc 	bl	8005050 <LOGGER_SendFormatted>
 8005ad8:	e007      	b.n	8005aea <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8005ada:	4b17      	ldr	r3, [pc, #92]	@ (8005b38 <USER_UART_IDLECallback+0x10c>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4918      	ldr	r1, [pc, #96]	@ (8005b44 <USER_UART_IDLECallback+0x118>)
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7ff fab3 	bl	8005050 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <USER_UART_IDLECallback+0x10c>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d912      	bls.n	8005b1a <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8005af4:	4b14      	ldr	r3, [pc, #80]	@ (8005b48 <USER_UART_IDLECallback+0x11c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <USER_UART_IDLECallback+0x11c>)
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	4618      	mov	r0, r3
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <USER_UART_IDLECallback+0x11c>)
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	461a      	mov	r2, r3
 8005b06:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <USER_UART_IDLECallback+0x11c>)
 8005b08:	78db      	ldrb	r3, [r3, #3]
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	9200      	str	r2, [sp, #0]
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460a      	mov	r2, r1
 8005b12:	490e      	ldr	r1, [pc, #56]	@ (8005b4c <USER_UART_IDLECallback+0x120>)
 8005b14:	2000      	movs	r0, #0
 8005b16:	f7ff fa9b 	bl	8005050 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f008 ff11 	bl	800e942 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005b20:	e003      	b.n	8005b2a <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8005b22:	490b      	ldr	r1, [pc, #44]	@ (8005b50 <USER_UART_IDLECallback+0x124>)
 8005b24:	2000      	movs	r0, #0
 8005b26:	f7ff fa93 	bl	8005050 <LOGGER_SendFormatted>
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40011400 	.word	0x40011400
 8005b38:	2000159e 	.word	0x2000159e
 8005b3c:	2000159c 	.word	0x2000159c
 8005b40:	0801afb0 	.word	0x0801afb0
 8005b44:	0801aff0 	.word	0x0801aff0
 8005b48:	200015a0 	.word	0x200015a0
 8005b4c:	0801b018 	.word	0x0801b018
 8005b50:	0801b044 	.word	0x0801b044

08005b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b58:	f7ff f9fa 	bl	8004f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b5c:	480c      	ldr	r0, [pc, #48]	@ (8005b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b5e:	490d      	ldr	r1, [pc, #52]	@ (8005b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b60:	4a0d      	ldr	r2, [pc, #52]	@ (8005b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b64:	e002      	b.n	8005b6c <LoopCopyDataInit>

08005b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b6a:	3304      	adds	r3, #4

08005b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b70:	d3f9      	bcc.n	8005b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b72:	4a0a      	ldr	r2, [pc, #40]	@ (8005b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b74:	4c0a      	ldr	r4, [pc, #40]	@ (8005ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b78:	e001      	b.n	8005b7e <LoopFillZerobss>

08005b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b7c:	3204      	adds	r2, #4

08005b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b80:	d3fb      	bcc.n	8005b7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005b82:	f011 fadf 	bl	8017144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b86:	f7fb ffc7 	bl	8001b18 <main>
  bx  lr    
 8005b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b94:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005b98:	0801b47c 	.word	0x0801b47c
  ldr r2, =_sbss
 8005b9c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005ba0:	20012090 	.word	0x20012090

08005ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ba4:	e7fe      	b.n	8005ba4 <ADC_IRQHandler>

08005ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005baa:	2003      	movs	r0, #3
 8005bac:	f000 fb91 	bl	80062d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f7ff f849 	bl	8004c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bb6:	f7fd ffab 	bl	8003b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bc4:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <HAL_IncTick+0x20>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <HAL_IncTick+0x24>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a04      	ldr	r2, [pc, #16]	@ (8005be4 <HAL_IncTick+0x24>)
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	2000006c 	.word	0x2000006c
 8005be4:	200017a4 	.word	0x200017a4

08005be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return uwTick;
 8005bec:	4b03      	ldr	r3, [pc, #12]	@ (8005bfc <HAL_GetTick+0x14>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	200017a4 	.word	0x200017a4

08005c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c08:	f7ff ffee 	bl	8005be8 <HAL_GetTick>
 8005c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c18:	d005      	beq.n	8005c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c44 <HAL_Delay+0x44>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c26:	bf00      	nop
 8005c28:	f7ff ffde 	bl	8005be8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d8f7      	bhi.n	8005c28 <HAL_Delay+0x28>
  {
  }
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	2000006c 	.word	0x2000006c

08005c48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e031      	b.n	8005cc2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fd ff7a 	bl	8003b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d116      	bne.n	8005cb4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8a:	4b10      	ldr	r3, [pc, #64]	@ (8005ccc <HAL_ADC_Init+0x84>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	f043 0202 	orr.w	r2, r3, #2
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f974 	bl	8005f84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	f043 0201 	orr.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cb2:	e001      	b.n	8005cb8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	ffffeefd 	.word	0xffffeefd

08005cd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x1c>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e13a      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x292>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d93a      	bls.n	8005d72 <HAL_ADC_ConfigChannel+0xa2>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d04:	d035      	beq.n	8005d72 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68d9      	ldr	r1, [r3, #12]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	3b1e      	subs	r3, #30
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43da      	mvns	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	400a      	ands	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a8f      	ldr	r2, [pc, #572]	@ (8005f70 <HAL_ADC_ConfigChannel+0x2a0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10a      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68d9      	ldr	r1, [r3, #12]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	061a      	lsls	r2, r3, #24
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d4a:	e039      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4403      	add	r3, r0
 8005d64:	3b1e      	subs	r3, #30
 8005d66:	409a      	lsls	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d70:	e026      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6919      	ldr	r1, [r3, #16]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2207      	movs	r2, #7
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43da      	mvns	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	400a      	ands	r2, r1
 8005d98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6919      	ldr	r1, [r3, #16]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	4618      	mov	r0, r3
 8005dac:	4603      	mov	r3, r0
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4403      	add	r3, r0
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	409a      	lsls	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d824      	bhi.n	8005e12 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3b05      	subs	r3, #5
 8005dda:	221f      	movs	r2, #31
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	43da      	mvns	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	400a      	ands	r2, r1
 8005de8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4618      	mov	r0, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	3b05      	subs	r3, #5
 8005e04:	fa00 f203 	lsl.w	r2, r0, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e10:	e04c      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d824      	bhi.n	8005e64 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	3b23      	subs	r3, #35	@ 0x23
 8005e2c:	221f      	movs	r2, #31
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43da      	mvns	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	400a      	ands	r2, r1
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4618      	mov	r0, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	3b23      	subs	r3, #35	@ 0x23
 8005e56:	fa00 f203 	lsl.w	r2, r0, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e62:	e023      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	3b41      	subs	r3, #65	@ 0x41
 8005e76:	221f      	movs	r2, #31
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43da      	mvns	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	400a      	ands	r2, r1
 8005e84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4618      	mov	r0, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3b41      	subs	r3, #65	@ 0x41
 8005ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a30      	ldr	r2, [pc, #192]	@ (8005f74 <HAL_ADC_ConfigChannel+0x2a4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10a      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x1fc>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ebe:	d105      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ec6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005eca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a28      	ldr	r2, [pc, #160]	@ (8005f74 <HAL_ADC_ConfigChannel+0x2a4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x226>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b12      	cmp	r3, #18
 8005edc:	d10b      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005ede:	4b26      	ldr	r3, [pc, #152]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ee4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ee8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005eea:	4b23      	ldr	r3, [pc, #140]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ef4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1e      	ldr	r2, [pc, #120]	@ (8005f74 <HAL_ADC_ConfigChannel+0x2a4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d12b      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x288>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1a      	ldr	r2, [pc, #104]	@ (8005f70 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <HAL_ADC_ConfigChannel+0x242>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b11      	cmp	r3, #17
 8005f10:	d122      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005f12:	4b19      	ldr	r3, [pc, #100]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4a18      	ldr	r2, [pc, #96]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005f18:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005f1c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005f1e:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a8>)
 8005f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f28:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a10      	ldr	r2, [pc, #64]	@ (8005f70 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d111      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005f34:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <HAL_ADC_ConfigChannel+0x2ac>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a11      	ldr	r2, [pc, #68]	@ (8005f80 <HAL_ADC_ConfigChannel+0x2b0>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0c9a      	lsrs	r2, r3, #18
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f4a:	e002      	b.n	8005f52 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f9      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	10000012 	.word	0x10000012
 8005f74:	40012000 	.word	0x40012000
 8005f78:	40012300 	.word	0x40012300
 8005f7c:	2000001c 	.word	0x2000001c
 8005f80:	431bde83 	.word	0x431bde83

08005f84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f8c:	4b78      	ldr	r3, [pc, #480]	@ (8006170 <ADC_Init+0x1ec>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a77      	ldr	r2, [pc, #476]	@ (8006170 <ADC_Init+0x1ec>)
 8005f92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f98:	4b75      	ldr	r3, [pc, #468]	@ (8006170 <ADC_Init+0x1ec>)
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4973      	ldr	r1, [pc, #460]	@ (8006170 <ADC_Init+0x1ec>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6859      	ldr	r1, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	021a      	lsls	r2, r3, #8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6859      	ldr	r1, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6899      	ldr	r1, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	4a58      	ldr	r2, [pc, #352]	@ (8006174 <ADC_Init+0x1f0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d022      	beq.n	800605e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6899      	ldr	r1, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6899      	ldr	r1, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e00f      	b.n	800607e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800606c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800607c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0202 	bic.w	r2, r2, #2
 800608c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	005a      	lsls	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01b      	beq.n	80060e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80060ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	3b01      	subs	r3, #1
 80060d8:	035a      	lsls	r2, r3, #13
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	e007      	b.n	80060f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	3b01      	subs	r3, #1
 8006110:	051a      	lsls	r2, r3, #20
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6899      	ldr	r1, [r3, #8]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006136:	025a      	lsls	r2, r3, #9
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800614e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6899      	ldr	r1, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	029a      	lsls	r2, r3, #10
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012300 	.word	0x40012300
 8006174:	0f000001 	.word	0x0f000001

08006178 <__NVIC_SetPriorityGrouping>:
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006188:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <__NVIC_SetPriorityGrouping+0x40>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006194:	4013      	ands	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80061a0:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <__NVIC_SetPriorityGrouping+0x44>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a6:	4a04      	ldr	r2, [pc, #16]	@ (80061b8 <__NVIC_SetPriorityGrouping+0x40>)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	60d3      	str	r3, [r2, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	05fa0000 	.word	0x05fa0000

080061c0 <__NVIC_GetPriorityGrouping>:
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c4:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <__NVIC_GetPriorityGrouping+0x18>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 0307 	and.w	r3, r3, #7
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <__NVIC_EnableIRQ>:
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	db0b      	blt.n	8006206 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	f003 021f 	and.w	r2, r3, #31
 80061f4:	4907      	ldr	r1, [pc, #28]	@ (8006214 <__NVIC_EnableIRQ+0x38>)
 80061f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2001      	movs	r0, #1
 80061fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e000e100 	.word	0xe000e100

08006218 <__NVIC_SetPriority>:
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006228:	2b00      	cmp	r3, #0
 800622a:	db0a      	blt.n	8006242 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	490c      	ldr	r1, [pc, #48]	@ (8006264 <__NVIC_SetPriority+0x4c>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	0112      	lsls	r2, r2, #4
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	440b      	add	r3, r1
 800623c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006240:	e00a      	b.n	8006258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	4908      	ldr	r1, [pc, #32]	@ (8006268 <__NVIC_SetPriority+0x50>)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	3b04      	subs	r3, #4
 8006250:	0112      	lsls	r2, r2, #4
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	440b      	add	r3, r1
 8006256:	761a      	strb	r2, [r3, #24]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000e100 	.word	0xe000e100
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <NVIC_EncodePriority>:
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	@ 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f1c3 0307 	rsb	r3, r3, #7
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf28      	it	cs
 800628a:	2304      	movcs	r3, #4
 800628c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3304      	adds	r3, #4
 8006292:	2b06      	cmp	r3, #6
 8006294:	d902      	bls.n	800629c <NVIC_EncodePriority+0x30>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3b03      	subs	r3, #3
 800629a:	e000      	b.n	800629e <NVIC_EncodePriority+0x32>
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	401a      	ands	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062b4:	f04f 31ff 	mov.w	r1, #4294967295
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43d9      	mvns	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	4313      	orrs	r3, r2
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3724      	adds	r7, #36	@ 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff4c 	bl	8006178 <__NVIC_SetPriorityGrouping>
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062fa:	f7ff ff61 	bl	80061c0 <__NVIC_GetPriorityGrouping>
 80062fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7ff ffb1 	bl	800626c <NVIC_EncodePriority>
 800630a:	4602      	mov	r2, r0
 800630c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff80 	bl	8006218 <__NVIC_SetPriority>
}
 8006318:	bf00      	nop
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff54 	bl	80061dc <__NVIC_EnableIRQ>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e054      	b.n	80063f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7f5b      	ldrb	r3, [r3, #29]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fd fc58 	bl	8003c14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	791b      	ldrb	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a22      	ldr	r2, [pc, #136]	@ (8006400 <HAL_CRC_Init+0xc4>)
 8006378:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0218 	bic.w	r2, r2, #24
 8006388:	609a      	str	r2, [r3, #8]
 800638a:	e00c      	b.n	80063a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6899      	ldr	r1, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	461a      	mov	r2, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f834 	bl	8006404 <HAL_CRCEx_Polynomial_Set>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e028      	b.n	80063f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	795b      	ldrb	r3, [r3, #5]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	611a      	str	r2, [r3, #16]
 80063b8:	e004      	b.n	80063c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6912      	ldr	r2, [r2, #16]
 80063c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	04c11db7 	.word	0x04c11db7

08006404 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006414:	231f      	movs	r3, #31
 8006416:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
 8006426:	e063      	b.n	80064f0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006428:	bf00      	nop
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	613a      	str	r2, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <HAL_CRCEx_Polynomial_Set+0x44>
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b18      	cmp	r3, #24
 800644c:	d846      	bhi.n	80064dc <HAL_CRCEx_Polynomial_Set+0xd8>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	080064e3 	.word	0x080064e3
 8006458:	080064dd 	.word	0x080064dd
 800645c:	080064dd 	.word	0x080064dd
 8006460:	080064dd 	.word	0x080064dd
 8006464:	080064dd 	.word	0x080064dd
 8006468:	080064dd 	.word	0x080064dd
 800646c:	080064dd 	.word	0x080064dd
 8006470:	080064dd 	.word	0x080064dd
 8006474:	080064d1 	.word	0x080064d1
 8006478:	080064dd 	.word	0x080064dd
 800647c:	080064dd 	.word	0x080064dd
 8006480:	080064dd 	.word	0x080064dd
 8006484:	080064dd 	.word	0x080064dd
 8006488:	080064dd 	.word	0x080064dd
 800648c:	080064dd 	.word	0x080064dd
 8006490:	080064dd 	.word	0x080064dd
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064dd 	.word	0x080064dd
 800649c:	080064dd 	.word	0x080064dd
 80064a0:	080064dd 	.word	0x080064dd
 80064a4:	080064dd 	.word	0x080064dd
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080064dd 	.word	0x080064dd
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	080064b9 	.word	0x080064b9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d913      	bls.n	80064e6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80064c2:	e010      	b.n	80064e6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b07      	cmp	r3, #7
 80064c8:	d90f      	bls.n	80064ea <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80064ce:	e00c      	b.n	80064ea <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d90b      	bls.n	80064ee <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80064da:	e008      	b.n	80064ee <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
        break;
 80064e0:	e006      	b.n	80064f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80064e2:	bf00      	nop
 80064e4:	e004      	b.n	80064f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80064ee:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 0118 	bic.w	r1, r3, #24
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006512:	7dfb      	ldrb	r3, [r7, #23]
}
 8006514:	4618      	mov	r0, r3
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e069      	b.n	8006606 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fd fb88 	bl	8003c54 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6819      	ldr	r1, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b2a      	ldr	r3, [pc, #168]	@ (8006610 <HAL_DCMI_Init+0xf0>)
 8006566:	400b      	ands	r3, r1
 8006568:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6819      	ldr	r1, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800657e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800658a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006596:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80065a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80065ae:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d112      	bne.n	80065e6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7f1b      	ldrb	r3, [r3, #28]
 80065c4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	7f5b      	ldrb	r3, [r3, #29]
 80065ca:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065cc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	7f9b      	ldrb	r3, [r3, #30]
 80065d2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80065d4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	7fdb      	ldrb	r3, [r3, #31]
 80065dc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80065e2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80065e4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 021e 	orr.w	r2, r2, #30
 80065f4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	ffe0f007 	.word	0xffe0f007

08006614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006620:	f7ff fae2 	bl	8005be8 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e099      	b.n	8006764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006650:	e00f      	b.n	8006672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006652:	f7ff fac9 	bl	8005be8 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b05      	cmp	r3, #5
 800665e:	d908      	bls.n	8006672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e078      	b.n	8006764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e8      	bne.n	8006652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4b38      	ldr	r3, [pc, #224]	@ (800676c <HAL_DMA_Init+0x158>)
 800668c:	4013      	ands	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800669e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d107      	bne.n	80066dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d4:	4313      	orrs	r3, r2
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0307 	bic.w	r3, r3, #7
 80066f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	2b04      	cmp	r3, #4
 8006704:	d117      	bne.n	8006736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb73 	bl	8006e04 <DMA_CheckFifoParam>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2240      	movs	r2, #64	@ 0x40
 8006728:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006732:	2301      	movs	r3, #1
 8006734:	e016      	b.n	8006764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb2a 	bl	8006d98 <DMA_CalcBaseAndBitshift>
 8006744:	4603      	mov	r3, r0
 8006746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674c:	223f      	movs	r2, #63	@ 0x3f
 800674e:	409a      	lsls	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	f010803f 	.word	0xf010803f

08006770 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e050      	b.n	8006824 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d101      	bne.n	8006792 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
 8006790:	e048      	b.n	8006824 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0201 	bic.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2221      	movs	r2, #33	@ 0x21
 80067d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fae0 	bl	8006d98 <DMA_CalcBaseAndBitshift>
 80067d8:	4603      	mov	r3, r0
 80067da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e0:	223f      	movs	r2, #63	@ 0x3f
 80067e2:	409a      	lsls	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006842:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_DMA_Start_IT+0x26>
 800684e:	2302      	movs	r3, #2
 8006850:	e048      	b.n	80068e4 <HAL_DMA_Start_IT+0xb8>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	d137      	bne.n	80068d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 fa5e 	bl	8006d3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006884:	223f      	movs	r2, #63	@ 0x3f
 8006886:	409a      	lsls	r2, r3
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0216 	orr.w	r2, r2, #22
 800689a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80068aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0208 	orr.w	r2, r2, #8
 80068c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e005      	b.n	80068e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068de:	2302      	movs	r3, #2
 80068e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068fa:	f7ff f975 	bl	8005be8 <HAL_GetTick>
 80068fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d008      	beq.n	800691e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e052      	b.n	80069c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0216 	bic.w	r2, r2, #22
 800692c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800693c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <HAL_DMA_Abort+0x62>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0208 	bic.w	r2, r2, #8
 800695c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800696e:	e013      	b.n	8006998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006970:	f7ff f93a 	bl	8005be8 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b05      	cmp	r3, #5
 800697c:	d90c      	bls.n	8006998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2203      	movs	r2, #3
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e015      	b.n	80069c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e4      	bne.n	8006970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069aa:	223f      	movs	r2, #63	@ 0x3f
 80069ac:	409a      	lsls	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d004      	beq.n	80069ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2280      	movs	r2, #128	@ 0x80
 80069e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e00c      	b.n	8006a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2205      	movs	r2, #5
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8006c58 <HAL_DMA_IRQHandler+0x248>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a8e      	ldr	r2, [pc, #568]	@ (8006c5c <HAL_DMA_IRQHandler+0x24c>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	0a9b      	lsrs	r3, r3, #10
 8006a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3a:	2208      	movs	r2, #8
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01a      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d013      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0204 	bic.w	r2, r2, #4
 8006a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a68:	2208      	movs	r2, #8
 8006a6a:	409a      	lsls	r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a74:	f043 0201 	orr.w	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a80:	2201      	movs	r2, #1
 8006a82:	409a      	lsls	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d012      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	409a      	lsls	r2, r3
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aaa:	f043 0202 	orr.w	r2, r3, #2
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d012      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae0:	f043 0204 	orr.w	r2, r3, #4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aec:	2210      	movs	r2, #16
 8006aee:	409a      	lsls	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d043      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d03c      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0a:	2210      	movs	r2, #16
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d108      	bne.n	8006b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d024      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
 8006b3e:	e01f      	b.n	8006b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01b      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
 8006b50:	e016      	b.n	8006b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d107      	bne.n	8006b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0208 	bic.w	r2, r2, #8
 8006b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b84:	2220      	movs	r2, #32
 8006b86:	409a      	lsls	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 808f 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8087 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d136      	bne.n	8006c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0216 	bic.w	r2, r2, #22
 8006bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d103      	bne.n	8006bea <HAL_DMA_IRQHandler+0x1da>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0208 	bic.w	r2, r2, #8
 8006bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bfe:	223f      	movs	r2, #63	@ 0x3f
 8006c00:	409a      	lsls	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d07e      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
        }
        return;
 8006c26:	e079      	b.n	8006d1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01d      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d031      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
 8006c54:	e02c      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
 8006c56:	bf00      	nop
 8006c58:	2000001c 	.word	0x2000001c
 8006c5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d023      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
 8006c70:	e01e      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10f      	bne.n	8006ca0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0210 	bic.w	r2, r2, #16
 8006c8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d032      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2205      	movs	r2, #5
 8006cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d307      	bcc.n	8006cf8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f2      	bne.n	8006cdc <HAL_DMA_IRQHandler+0x2cc>
 8006cf6:	e000      	b.n	8006cfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006cf8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	4798      	blx	r3
 8006d1a:	e000      	b.n	8006d1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d1c:	bf00      	nop
    }
  }
}
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b40      	cmp	r3, #64	@ 0x40
 8006d68:	d108      	bne.n	8006d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d7a:	e007      	b.n	8006d8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
}
 8006d8c:	bf00      	nop
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	3b10      	subs	r3, #16
 8006da8:	4a13      	ldr	r2, [pc, #76]	@ (8006df8 <DMA_CalcBaseAndBitshift+0x60>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	091b      	lsrs	r3, r3, #4
 8006db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006db2:	4a12      	ldr	r2, [pc, #72]	@ (8006dfc <DMA_CalcBaseAndBitshift+0x64>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d908      	bls.n	8006dd8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <DMA_CalcBaseAndBitshift+0x68>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	1d1a      	adds	r2, r3, #4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dd6:	e006      	b.n	8006de6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4b08      	ldr	r3, [pc, #32]	@ (8006e00 <DMA_CalcBaseAndBitshift+0x68>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	aaaaaaab 	.word	0xaaaaaaab
 8006dfc:	0801b37c 	.word	0x0801b37c
 8006e00:	fffffc00 	.word	0xfffffc00

08006e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11f      	bne.n	8006e5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d856      	bhi.n	8006ed2 <DMA_CheckFifoParam+0xce>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <DMA_CheckFifoParam+0x28>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e3d 	.word	0x08006e3d
 8006e38:	08006ed3 	.word	0x08006ed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d046      	beq.n	8006ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e4c:	e043      	b.n	8006ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e56:	d140      	bne.n	8006eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e5c:	e03d      	b.n	8006eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e66:	d121      	bne.n	8006eac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d837      	bhi.n	8006ede <DMA_CheckFifoParam+0xda>
 8006e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <DMA_CheckFifoParam+0x70>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006e8b 	.word	0x08006e8b
 8006e7c:	08006e85 	.word	0x08006e85
 8006e80:	08006e9d 	.word	0x08006e9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
      break;
 8006e88:	e030      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d025      	beq.n	8006ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e9a:	e022      	b.n	8006ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ea4:	d11f      	bne.n	8006ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006eaa:	e01c      	b.n	8006ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d903      	bls.n	8006eba <DMA_CheckFifoParam+0xb6>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d003      	beq.n	8006ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006eb8:	e018      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebe:	e015      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00e      	beq.n	8006eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e00b      	b.n	8006eea <DMA_CheckFifoParam+0xe6>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e00a      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e008      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006eda:	bf00      	nop
 8006edc:	e006      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e004      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e002      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;   
 8006ee6:	bf00      	nop
 8006ee8:	e000      	b.n	8006eec <DMA_CheckFifoParam+0xe8>
      break;
 8006eea:	bf00      	nop
    }
  } 
  
  return status; 
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e039      	b.n	8006f82 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fc ff54 	bl	8003dd0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4c:	f023 0107 	bic.w	r1, r3, #7
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f62:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <HAL_DMA2D_Init+0x90>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68d1      	ldr	r1, [r2, #12]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	ffffc000 	.word	0xffffc000

08006f90 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d026      	beq.n	8007000 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d021      	beq.n	8007000 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fca:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	f043 0201 	orr.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d026      	beq.n	8007058 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d021      	beq.n	8007058 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007022:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2220      	movs	r2, #32
 800702a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007030:	f043 0202 	orr.w	r2, r3, #2
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2204      	movs	r2, #4
 800703c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d026      	beq.n	80070b0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007068:	2b00      	cmp	r3, #0
 800706a:	d021      	beq.n	80070b0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800707a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2208      	movs	r2, #8
 8007082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007088:	f043 0204 	orr.w	r2, r3, #4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2204      	movs	r2, #4
 8007094:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d013      	beq.n	80070e2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00e      	beq.n	80070e2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070d2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2204      	movs	r2, #4
 80070da:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f853 	bl	8007188 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d024      	beq.n	8007136 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01f      	beq.n	8007136 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007104:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2202      	movs	r2, #2
 800710c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01f      	beq.n	8007180 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01a      	beq.n	8007180 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007158:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2210      	movs	r2, #16
 8007160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f80e 	bl	800719c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_DMA2D_ConfigLayer+0x20>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e079      	b.n	80072c4 <HAL_DMA2D_ConfigLayer+0x114>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	3318      	adds	r3, #24
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4413      	add	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80071fa:	4b35      	ldr	r3, [pc, #212]	@ (80072d0 <HAL_DMA2D_ConfigLayer+0x120>)
 80071fc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b0a      	cmp	r3, #10
 8007204:	d003      	beq.n	800720e <HAL_DMA2D_ConfigLayer+0x5e>
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b09      	cmp	r3, #9
 800720c:	d107      	bne.n	800721e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e005      	b.n	800722a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d120      	bne.n	8007272 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	43db      	mvns	r3, r3
 800723a:	ea02 0103 	and.w	r1, r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	430a      	orrs	r2, r1
 8007246:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2b0a      	cmp	r3, #10
 8007258:	d003      	beq.n	8007262 <HAL_DMA2D_ConfigLayer+0xb2>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b09      	cmp	r3, #9
 8007260:	d127      	bne.n	80072b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800726e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007270:	e01f      	b.n	80072b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	43db      	mvns	r3, r3
 800727c:	ea02 0103 	and.w	r1, r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	430a      	orrs	r2, r1
 8007288:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b0a      	cmp	r3, #10
 800729a:	d003      	beq.n	80072a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	d106      	bne.n	80072b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80072b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	ff03000f 	.word	0xff03000f

080072d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e086      	b.n	80073f4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fc fd8f 	bl	8003e1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072fe:	4b3f      	ldr	r3, [pc, #252]	@ (80073fc <HAL_ETH_Init+0x128>)
 8007300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007302:	4a3e      	ldr	r2, [pc, #248]	@ (80073fc <HAL_ETH_Init+0x128>)
 8007304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007308:	6453      	str	r3, [r2, #68]	@ 0x44
 800730a:	4b3c      	ldr	r3, [pc, #240]	@ (80073fc <HAL_ETH_Init+0x128>)
 800730c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007316:	4b3a      	ldr	r3, [pc, #232]	@ (8007400 <HAL_ETH_Init+0x12c>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	4a39      	ldr	r2, [pc, #228]	@ (8007400 <HAL_ETH_Init+0x12c>)
 800731c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007320:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007322:	4b37      	ldr	r3, [pc, #220]	@ (8007400 <HAL_ETH_Init+0x12c>)
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	4935      	ldr	r1, [pc, #212]	@ (8007400 <HAL_ETH_Init+0x12c>)
 800732c:	4313      	orrs	r3, r2
 800732e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007330:	4b33      	ldr	r3, [pc, #204]	@ (8007400 <HAL_ETH_Init+0x12c>)
 8007332:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800734a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800734c:	f7fe fc4c 	bl	8005be8 <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007352:	e011      	b.n	8007378 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007354:	f7fe fc48 	bl	8005be8 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007362:	d909      	bls.n	8007378 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2204      	movs	r2, #4
 8007368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	22e0      	movs	r2, #224	@ 0xe0
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e03d      	b.n	80073f4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e4      	bne.n	8007354 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f97a 	bl	8007684 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa25 	bl	80077e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa7b 	bl	8007892 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	461a      	mov	r2, r3
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f9e3 	bl	8007770 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80073b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <HAL_ETH_Init+0x130>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80073de:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2210      	movs	r2, #16
 80073ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40023800 	.word	0x40023800
 8007400:	40013800 	.word	0x40013800
 8007404:	00020060 	.word	0x00020060

08007408 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4b53      	ldr	r3, [pc, #332]	@ (800756c <ETH_SetMACConfig+0x164>)
 800741e:	4013      	ands	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	7b9b      	ldrb	r3, [r3, #14]
 8007426:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	7c12      	ldrb	r2, [r2, #16]
 800742c:	2a00      	cmp	r2, #0
 800742e:	d102      	bne.n	8007436 <ETH_SetMACConfig+0x2e>
 8007430:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007434:	e000      	b.n	8007438 <ETH_SetMACConfig+0x30>
 8007436:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007438:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	7c52      	ldrb	r2, [r2, #17]
 800743e:	2a00      	cmp	r2, #0
 8007440:	d102      	bne.n	8007448 <ETH_SetMACConfig+0x40>
 8007442:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007446:	e000      	b.n	800744a <ETH_SetMACConfig+0x42>
 8007448:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800744a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007450:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	7fdb      	ldrb	r3, [r3, #31]
 8007456:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007458:	431a      	orrs	r2, r3
                        macconf->Speed |
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800745e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	7f92      	ldrb	r2, [r2, #30]
 8007464:	2a00      	cmp	r2, #0
 8007466:	d102      	bne.n	800746e <ETH_SetMACConfig+0x66>
 8007468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800746c:	e000      	b.n	8007470 <ETH_SetMACConfig+0x68>
 800746e:	2200      	movs	r2, #0
                        macconf->Speed |
 8007470:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	7f1b      	ldrb	r3, [r3, #28]
 8007476:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007478:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800747e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	791b      	ldrb	r3, [r3, #4]
 8007484:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007486:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800748e:	2a00      	cmp	r2, #0
 8007490:	d102      	bne.n	8007498 <ETH_SetMACConfig+0x90>
 8007492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007496:	e000      	b.n	800749a <ETH_SetMACConfig+0x92>
 8007498:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800749a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	7bdb      	ldrb	r3, [r3, #15]
 80074a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80074a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80074a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80074b2:	4313      	orrs	r3, r2
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80074ca:	2001      	movs	r0, #1
 80074cc:	f7fe fb98 	bl	8005c00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80074e6:	4013      	ands	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	d101      	bne.n	80074fe <ETH_SetMACConfig+0xf6>
 80074fa:	2280      	movs	r2, #128	@ 0x80
 80074fc:	e000      	b.n	8007500 <ETH_SetMACConfig+0xf8>
 80074fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007500:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007506:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800750e:	2a01      	cmp	r2, #1
 8007510:	d101      	bne.n	8007516 <ETH_SetMACConfig+0x10e>
 8007512:	2208      	movs	r2, #8
 8007514:	e000      	b.n	8007518 <ETH_SetMACConfig+0x110>
 8007516:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007518:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007520:	2a01      	cmp	r2, #1
 8007522:	d101      	bne.n	8007528 <ETH_SetMACConfig+0x120>
 8007524:	2204      	movs	r2, #4
 8007526:	e000      	b.n	800752a <ETH_SetMACConfig+0x122>
 8007528:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800752a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007532:	2a01      	cmp	r2, #1
 8007534:	d101      	bne.n	800753a <ETH_SetMACConfig+0x132>
 8007536:	2202      	movs	r2, #2
 8007538:	e000      	b.n	800753c <ETH_SetMACConfig+0x134>
 800753a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800753c:	4313      	orrs	r3, r2
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007554:	2001      	movs	r0, #1
 8007556:	f7fe fb53 	bl	8005c00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	619a      	str	r2, [r3, #24]
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	fd20810f 	.word	0xfd20810f

08007570 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4b3d      	ldr	r3, [pc, #244]	@ (8007680 <ETH_SetDMAConfig+0x110>)
 800758a:	4013      	ands	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	7b1b      	ldrb	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d102      	bne.n	800759c <ETH_SetDMAConfig+0x2c>
 8007596:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800759a:	e000      	b.n	800759e <ETH_SetDMAConfig+0x2e>
 800759c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	7b5b      	ldrb	r3, [r3, #13]
 80075a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80075a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	7f52      	ldrb	r2, [r2, #29]
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	d102      	bne.n	80075b4 <ETH_SetDMAConfig+0x44>
 80075ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80075b2:	e000      	b.n	80075b6 <ETH_SetDMAConfig+0x46>
 80075b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80075b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	7b9b      	ldrb	r3, [r3, #14]
 80075bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80075be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80075c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	7f1b      	ldrb	r3, [r3, #28]
 80075ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80075cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	7f9b      	ldrb	r3, [r3, #30]
 80075d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80075d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80075da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80075e4:	4313      	orrs	r3, r2
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f4:	461a      	mov	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007606:	2001      	movs	r0, #1
 8007608:	f7fe fafa 	bl	8005c00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007614:	461a      	mov	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	791b      	ldrb	r3, [r3, #4]
 800761e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007624:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800762a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007630:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007638:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800763a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007642:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007648:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007652:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007656:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007664:	2001      	movs	r0, #1
 8007666:	f7fe facb 	bl	8005c00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6013      	str	r3, [r2, #0]
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	f8de3f23 	.word	0xf8de3f23

08007684 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b0a6      	sub	sp, #152	@ 0x98
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007698:	2300      	movs	r3, #0
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800769c:	2300      	movs	r3, #0
 800769e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80076c6:	2300      	movs	r3, #0
 80076c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80076da:	2300      	movs	r3, #0
 80076dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80076ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80076f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80076f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80076fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff fe7f 	bl	8007408 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800770a:	2301      	movs	r3, #1
 800770c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800770e:	2301      	movs	r3, #1
 8007710:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007712:	2301      	movs	r3, #1
 8007714:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8007718:	2301      	movs	r3, #1
 800771a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800771c:	2300      	movs	r3, #0
 800771e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8007720:	2300      	movs	r3, #0
 8007722:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8007726:	2300      	movs	r3, #0
 8007728:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800772c:	2300      	movs	r3, #0
 800772e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8007730:	2301      	movs	r3, #1
 8007732:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007736:	2301      	movs	r3, #1
 8007738:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800773a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800773e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007740:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007744:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007746:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800774a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007752:	2300      	movs	r3, #0
 8007754:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800775a:	f107 0308 	add.w	r3, r7, #8
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff ff05 	bl	8007570 <ETH_SetDMAConfig>
}
 8007766:	bf00      	nop
 8007768:	3798      	adds	r7, #152	@ 0x98
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3305      	adds	r3, #5
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	3204      	adds	r2, #4
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4b11      	ldr	r3, [pc, #68]	@ (80077d8 <ETH_MACAddressConfig+0x68>)
 8007792:	4413      	add	r3, r2
 8007794:	461a      	mov	r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3303      	adds	r3, #3
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	061a      	lsls	r2, r3, #24
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3302      	adds	r3, #2
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3301      	adds	r3, #1
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	4313      	orrs	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	7812      	ldrb	r2, [r2, #0]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4b06      	ldr	r3, [pc, #24]	@ (80077dc <ETH_MACAddressConfig+0x6c>)
 80077c2:	4413      	add	r3, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	6013      	str	r3, [r2, #0]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40028040 	.word	0x40028040
 80077dc:	40028044 	.word	0x40028044

080077e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e03e      	b.n	800786c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68d9      	ldr	r1, [r3, #12]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	440b      	add	r3, r1
 80077fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2200      	movs	r2, #0
 800780a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	3206      	adds	r2, #6
 8007820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d80c      	bhi.n	8007850 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68d9      	ldr	r1, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	440b      	add	r3, r1
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	e004      	b.n	800785a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	461a      	mov	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b03      	cmp	r3, #3
 8007870:	d9bd      	bls.n	80077ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007884:	611a      	str	r2, [r3, #16]
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e048      	b.n	8007932 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6919      	ldr	r1, [r3, #16]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	440b      	add	r3, r1
 80078b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2200      	movs	r2, #0
 80078c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	3212      	adds	r2, #18
 80078fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d80c      	bhi.n	8007922 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6919      	ldr	r1, [r3, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	440b      	add	r3, r1
 800791a:	461a      	mov	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	60da      	str	r2, [r3, #12]
 8007920:	e004      	b.n	800792c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	461a      	mov	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3301      	adds	r3, #1
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b03      	cmp	r3, #3
 8007936:	d9b3      	bls.n	80078a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691a      	ldr	r2, [r3, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007962:	60da      	str	r2, [r3, #12]
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	@ 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007982:	2300      	movs	r3, #0
 8007984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007986:	2300      	movs	r3, #0
 8007988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800798a:	2300      	movs	r3, #0
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	e175      	b.n	8007c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007990:	2201      	movs	r2, #1
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4013      	ands	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	f040 8164 	bne.w	8007c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d005      	beq.n	80079c6 <HAL_GPIO_Init+0x56>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d130      	bne.n	8007a28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	2203      	movs	r2, #3
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43db      	mvns	r3, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4013      	ands	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079fc:	2201      	movs	r2, #1
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 0201 	and.w	r2, r3, #1
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d017      	beq.n	8007a64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2203      	movs	r2, #3
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d123      	bne.n	8007ab8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	08da      	lsrs	r2, r3, #3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3208      	adds	r2, #8
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	220f      	movs	r2, #15
 8007a88:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4013      	ands	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	08da      	lsrs	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3208      	adds	r2, #8
 8007ab2:	69b9      	ldr	r1, [r7, #24]
 8007ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4013      	ands	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 0203 	and.w	r2, r3, #3
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 80be 	beq.w	8007c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007afa:	4b66      	ldr	r3, [pc, #408]	@ (8007c94 <HAL_GPIO_Init+0x324>)
 8007afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afe:	4a65      	ldr	r2, [pc, #404]	@ (8007c94 <HAL_GPIO_Init+0x324>)
 8007b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b06:	4b63      	ldr	r3, [pc, #396]	@ (8007c94 <HAL_GPIO_Init+0x324>)
 8007b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007b12:	4a61      	ldr	r2, [pc, #388]	@ (8007c98 <HAL_GPIO_Init+0x328>)
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	089b      	lsrs	r3, r3, #2
 8007b18:	3302      	adds	r3, #2
 8007b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	220f      	movs	r2, #15
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a58      	ldr	r2, [pc, #352]	@ (8007c9c <HAL_GPIO_Init+0x32c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d037      	beq.n	8007bae <HAL_GPIO_Init+0x23e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a57      	ldr	r2, [pc, #348]	@ (8007ca0 <HAL_GPIO_Init+0x330>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d031      	beq.n	8007baa <HAL_GPIO_Init+0x23a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a56      	ldr	r2, [pc, #344]	@ (8007ca4 <HAL_GPIO_Init+0x334>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d02b      	beq.n	8007ba6 <HAL_GPIO_Init+0x236>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a55      	ldr	r2, [pc, #340]	@ (8007ca8 <HAL_GPIO_Init+0x338>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d025      	beq.n	8007ba2 <HAL_GPIO_Init+0x232>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a54      	ldr	r2, [pc, #336]	@ (8007cac <HAL_GPIO_Init+0x33c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01f      	beq.n	8007b9e <HAL_GPIO_Init+0x22e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a53      	ldr	r2, [pc, #332]	@ (8007cb0 <HAL_GPIO_Init+0x340>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d019      	beq.n	8007b9a <HAL_GPIO_Init+0x22a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a52      	ldr	r2, [pc, #328]	@ (8007cb4 <HAL_GPIO_Init+0x344>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_GPIO_Init+0x226>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a51      	ldr	r2, [pc, #324]	@ (8007cb8 <HAL_GPIO_Init+0x348>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00d      	beq.n	8007b92 <HAL_GPIO_Init+0x222>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a50      	ldr	r2, [pc, #320]	@ (8007cbc <HAL_GPIO_Init+0x34c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d007      	beq.n	8007b8e <HAL_GPIO_Init+0x21e>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a4f      	ldr	r2, [pc, #316]	@ (8007cc0 <HAL_GPIO_Init+0x350>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d101      	bne.n	8007b8a <HAL_GPIO_Init+0x21a>
 8007b86:	2309      	movs	r3, #9
 8007b88:	e012      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	e010      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007b8e:	2308      	movs	r3, #8
 8007b90:	e00e      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007b92:	2307      	movs	r3, #7
 8007b94:	e00c      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007b96:	2306      	movs	r3, #6
 8007b98:	e00a      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007b9a:	2305      	movs	r3, #5
 8007b9c:	e008      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007b9e:	2304      	movs	r3, #4
 8007ba0:	e006      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e004      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e002      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <HAL_GPIO_Init+0x240>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	f002 0203 	and.w	r2, r2, #3
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	4093      	lsls	r3, r2
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007bc0:	4935      	ldr	r1, [pc, #212]	@ (8007c98 <HAL_GPIO_Init+0x328>)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	089b      	lsrs	r3, r3, #2
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bce:	4b3d      	ldr	r3, [pc, #244]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bf2:	4a34      	ldr	r2, [pc, #208]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bf8:	4b32      	ldr	r3, [pc, #200]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	4013      	ands	r3, r2
 8007c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c1c:	4a29      	ldr	r2, [pc, #164]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c22:	4b28      	ldr	r3, [pc, #160]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c46:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	43db      	mvns	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c70:	4a14      	ldr	r2, [pc, #80]	@ (8007cc4 <HAL_GPIO_Init+0x354>)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	f67f ae86 	bls.w	8007990 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	3724      	adds	r7, #36	@ 0x24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40023800 	.word	0x40023800
 8007c98:	40013800 	.word	0x40013800
 8007c9c:	40020000 	.word	0x40020000
 8007ca0:	40020400 	.word	0x40020400
 8007ca4:	40020800 	.word	0x40020800
 8007ca8:	40020c00 	.word	0x40020c00
 8007cac:	40021000 	.word	0x40021000
 8007cb0:	40021400 	.word	0x40021400
 8007cb4:	40021800 	.word	0x40021800
 8007cb8:	40021c00 	.word	0x40021c00
 8007cbc:	40022000 	.word	0x40022000
 8007cc0:	40022400 	.word	0x40022400
 8007cc4:	40013c00 	.word	0x40013c00

08007cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cd8:	787b      	ldrb	r3, [r7, #1]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cde:	887a      	ldrh	r2, [r7, #2]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007ce4:	e003      	b.n	8007cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	041a      	lsls	r2, r3, #16
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	619a      	str	r2, [r3, #24]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f008 ff09 	bl	8010b28 <USB_GetMode>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f040 80fb 	bne.w	8007f14 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f008 fecc 	bl	8010ac0 <USB_ReadInterrupts>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80f1 	beq.w	8007f12 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f008 fec3 	bl	8010ac0 <USB_ReadInterrupts>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d44:	d104      	bne.n	8007d50 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8007d4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f008 feb3 	bl	8010ac0 <USB_ReadInterrupts>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d64:	d104      	bne.n	8007d70 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f008 fea3 	bl	8010ac0 <USB_ReadInterrupts>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d84:	d104      	bne.n	8007d90 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007d8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f008 fe93 	bl	8010ac0 <USB_ReadInterrupts>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d103      	bne.n	8007dac <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2202      	movs	r2, #2
 8007daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f008 fe85 	bl	8010ac0 <USB_ReadInterrupts>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dc0:	d120      	bne.n	8007e04 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007dca:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d113      	bne.n	8007e04 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007ddc:	2110      	movs	r1, #16
 8007dde:	6938      	ldr	r0, [r7, #16]
 8007de0:	f008 fdb6 	bl	8010950 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007de4:	6938      	ldr	r0, [r7, #16]
 8007de6:	f008 fde5 	bl	80109b4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7a5b      	ldrb	r3, [r3, #9]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d105      	bne.n	8007dfe <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f008 fea3 	bl	8010b44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f00e fe34 	bl	8016a6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f008 fe59 	bl	8010ac0 <USB_ReadInterrupts>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e18:	d102      	bne.n	8007e20 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fca1 	bl	8009762 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f008 fe4b 	bl	8010ac0 <USB_ReadInterrupts>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d106      	bne.n	8007e42 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f00e fdfd 	bl	8016a34 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2208      	movs	r2, #8
 8007e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f008 fe3a 	bl	8010ac0 <USB_ReadInterrupts>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e56:	d139      	bne.n	8007ecc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f008 feae 	bl	8010bbe <USB_HC_ReadInterrupt>
 8007e62:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e025      	b.n	8007eb6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	fa22 f303 	lsr.w	r3, r2, r3
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d018      	beq.n	8007eb0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e94:	d106      	bne.n	8007ea4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f859 	bl	8007f54 <HCD_HC_IN_IRQHandler>
 8007ea2:	e005      	b.n	8007eb0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 febb 	bl	8008c26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	795b      	ldrb	r3, [r3, #5]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d3d3      	bcc.n	8007e6a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f008 fdf5 	bl	8010ac0 <USB_ReadInterrupts>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b10      	cmp	r3, #16
 8007ede:	d101      	bne.n	8007ee4 <HAL_HCD_IRQHandler+0x1ea>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <HAL_HCD_IRQHandler+0x1ec>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d014      	beq.n	8007f14 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0210 	bic.w	r2, r2, #16
 8007ef8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fb52 	bl	80095a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0210 	orr.w	r2, r2, #16
 8007f0e:	619a      	str	r2, [r3, #24]
 8007f10:	e000      	b.n	8007f14 <HAL_HCD_IRQHandler+0x21a>
      return;
 8007f12:	bf00      	nop
    }
  }
}
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d101      	bne.n	8007f30 <HAL_HCD_Stop+0x16>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e00d      	b.n	8007f4c <HAL_HCD_Stop+0x32>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f008 ff6f 	bl	8010e20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f008 fdb7 	bl	8010ae6 <USB_ReadChInterrupts>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d11a      	bne.n	8007fb8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2304      	movs	r3, #4
 8007f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	011b      	lsls	r3, r3, #4
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	334d      	adds	r3, #77	@ 0x4d
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f008 fe15 	bl	8010be0 <USB_HC_Halt>
 8007fb6:	e09e      	b.n	80080f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	78fa      	ldrb	r2, [r7, #3]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f008 fd90 	bl	8010ae6 <USB_ReadChInterrupts>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd0:	d11b      	bne.n	800800a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	334d      	adds	r3, #77	@ 0x4d
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f008 fdec 	bl	8010be0 <USB_HC_Halt>
 8008008:	e075      	b.n	80080f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	78fa      	ldrb	r2, [r7, #3]
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f008 fd67 	bl	8010ae6 <USB_ReadChInterrupts>
 8008018:	4603      	mov	r3, r0
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b08      	cmp	r3, #8
 8008020:	d11a      	bne.n	8008058 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802e:	461a      	mov	r2, r3
 8008030:	2308      	movs	r3, #8
 8008032:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	334d      	adds	r3, #77	@ 0x4d
 8008044:	2206      	movs	r2, #6
 8008046:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f008 fdc5 	bl	8010be0 <USB_HC_Halt>
 8008056:	e04e      	b.n	80080f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f008 fd40 	bl	8010ae6 <USB_ReadChInterrupts>
 8008066:	4603      	mov	r3, r0
 8008068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800806c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008070:	d11b      	bne.n	80080aa <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	4413      	add	r3, r2
 800807a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807e:	461a      	mov	r2, r3
 8008080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008084:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	4613      	mov	r3, r2
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	334d      	adds	r3, #77	@ 0x4d
 8008096:	2209      	movs	r2, #9
 8008098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f008 fd9c 	bl	8010be0 <USB_HC_Halt>
 80080a8:	e025      	b.n	80080f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f008 fd17 	bl	8010ae6 <USB_ReadChInterrupts>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080be:	2b80      	cmp	r3, #128	@ 0x80
 80080c0:	d119      	bne.n	80080f6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ce:	461a      	mov	r2, r3
 80080d0:	2380      	movs	r3, #128	@ 0x80
 80080d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	334d      	adds	r3, #77	@ 0x4d
 80080e4:	2207      	movs	r2, #7
 80080e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f008 fd75 	bl	8010be0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f008 fcf1 	bl	8010ae6 <USB_ReadChInterrupts>
 8008104:	4603      	mov	r3, r0
 8008106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800810a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810e:	d112      	bne.n	8008136 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	78fa      	ldrb	r2, [r7, #3]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f008 fd61 	bl	8010be0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812a:	461a      	mov	r2, r3
 800812c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008130:	6093      	str	r3, [r2, #8]
 8008132:	f000 bd75 	b.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f008 fcd1 	bl	8010ae6 <USB_ReadChInterrupts>
 8008144:	4603      	mov	r3, r0
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b01      	cmp	r3, #1
 800814c:	f040 8128 	bne.w	80083a0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	4413      	add	r3, r2
 8008158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800815c:	461a      	mov	r2, r3
 800815e:	2320      	movs	r3, #32
 8008160:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	331b      	adds	r3, #27
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d119      	bne.n	80081ac <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	1a9b      	subs	r3, r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	331b      	adds	r3, #27
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4413      	add	r3, r2
 8008194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081aa:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	799b      	ldrb	r3, [r3, #6]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01b      	beq.n	80081ec <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4613      	mov	r3, r2
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3330      	adds	r3, #48	@ 0x30
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	1ac9      	subs	r1, r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4403      	add	r3, r0
 80081e8:	3338      	adds	r3, #56	@ 0x38
 80081ea:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	334d      	adds	r3, #77	@ 0x4d
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	3344      	adds	r3, #68	@ 0x44
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008220:	461a      	mov	r2, r3
 8008222:	2301      	movs	r3, #1
 8008224:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	3326      	adds	r3, #38	@ 0x26
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	4613      	mov	r3, r2
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	3326      	adds	r3, #38	@ 0x26
 800824c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800824e:	2b02      	cmp	r3, #2
 8008250:	d110      	bne.n	8008274 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f008 fcc0 	bl	8010be0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826c:	461a      	mov	r2, r3
 800826e:	2310      	movs	r3, #16
 8008270:	6093      	str	r3, [r2, #8]
 8008272:	e03d      	b.n	80082f0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008274:	78fa      	ldrb	r2, [r7, #3]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	3326      	adds	r3, #38	@ 0x26
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d00a      	beq.n	80082a0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4613      	mov	r3, r2
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	1a9b      	subs	r3, r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	440b      	add	r3, r1
 8008298:	3326      	adds	r3, #38	@ 0x26
 800829a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800829c:	2b01      	cmp	r3, #1
 800829e:	d127      	bne.n	80082f0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082be:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	334c      	adds	r3, #76	@ 0x4c
 80082d0:	2201      	movs	r2, #1
 80082d2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80082d4:	78fa      	ldrb	r2, [r7, #3]
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	334c      	adds	r3, #76	@ 0x4c
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f00e fbcc 	bl	8016a88 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	799b      	ldrb	r3, [r3, #6]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d13b      	bne.n	8008370 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	3338      	adds	r3, #56	@ 0x38
 8008308:	6819      	ldr	r1, [r3, #0]
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4613      	mov	r3, r2
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4403      	add	r3, r0
 8008318:	3328      	adds	r3, #40	@ 0x28
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	440b      	add	r3, r1
 800831e:	1e59      	subs	r1, r3, #1
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4613      	mov	r3, r2
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4403      	add	r3, r0
 800832e:	3328      	adds	r3, #40	@ 0x28
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	fbb1 f3f3 	udiv	r3, r1, r3
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 8470 	beq.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	333c      	adds	r3, #60	@ 0x3c
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	f083 0301 	eor.w	r3, r3, #1
 8008358:	b2d8      	uxtb	r0, r3
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	333c      	adds	r3, #60	@ 0x3c
 8008368:	4602      	mov	r2, r0
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	f000 bc58 	b.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	1a9b      	subs	r3, r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	333c      	adds	r3, #60	@ 0x3c
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	f083 0301 	eor.w	r3, r3, #1
 8008388:	b2d8      	uxtb	r0, r3
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	1a9b      	subs	r3, r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	333c      	adds	r3, #60	@ 0x3c
 8008398:	4602      	mov	r2, r0
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	f000 bc40 	b.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	78fa      	ldrb	r2, [r7, #3]
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f008 fb9c 	bl	8010ae6 <USB_ReadChInterrupts>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d131      	bne.n	800841c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80083b8:	78fb      	ldrb	r3, [r7, #3]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c4:	461a      	mov	r2, r3
 80083c6:	2320      	movs	r3, #32
 80083c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	331a      	adds	r3, #26
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 841f 	bne.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	331b      	adds	r3, #27
 80083f2:	2201      	movs	r2, #1
 80083f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80083f6:	78fa      	ldrb	r2, [r7, #3]
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	334d      	adds	r3, #77	@ 0x4d
 8008406:	2203      	movs	r2, #3
 8008408:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f008 fbe4 	bl	8010be0 <USB_HC_Halt>
 8008418:	f000 bc02 	b.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f008 fb5e 	bl	8010ae6 <USB_ReadChInterrupts>
 800842a:	4603      	mov	r3, r0
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b02      	cmp	r3, #2
 8008432:	f040 8305 	bne.w	8008a40 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4413      	add	r3, r2
 800843e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008442:	461a      	mov	r2, r3
 8008444:	2302      	movs	r3, #2
 8008446:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	334d      	adds	r3, #77	@ 0x4d
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d114      	bne.n	8008488 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4613      	mov	r3, r2
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	1a9b      	subs	r3, r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	334d      	adds	r3, #77	@ 0x4d
 800846e:	2202      	movs	r2, #2
 8008470:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	334c      	adds	r3, #76	@ 0x4c
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e2cc      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	334d      	adds	r3, #77	@ 0x4d
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d114      	bne.n	80084c8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4613      	mov	r3, r2
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	1a9b      	subs	r3, r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	440b      	add	r3, r1
 80084ac:	334d      	adds	r3, #77	@ 0x4d
 80084ae:	2202      	movs	r2, #2
 80084b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	440b      	add	r3, r1
 80084c0:	334c      	adds	r3, #76	@ 0x4c
 80084c2:	2205      	movs	r2, #5
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e2ac      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	334d      	adds	r3, #77	@ 0x4d
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b07      	cmp	r3, #7
 80084dc:	d00b      	beq.n	80084f6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	334d      	adds	r3, #77	@ 0x4d
 80084ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80084f0:	2b09      	cmp	r3, #9
 80084f2:	f040 80a6 	bne.w	8008642 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	334d      	adds	r3, #77	@ 0x4d
 8008506:	2202      	movs	r2, #2
 8008508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	4613      	mov	r3, r2
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	3344      	adds	r3, #68	@ 0x44
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	1c59      	adds	r1, r3, #1
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4403      	add	r3, r0
 800852a:	3344      	adds	r3, #68	@ 0x44
 800852c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	3344      	adds	r3, #68	@ 0x44
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d943      	bls.n	80085cc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008544:	78fa      	ldrb	r2, [r7, #3]
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	4613      	mov	r3, r2
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	3344      	adds	r3, #68	@ 0x44
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	331a      	adds	r3, #26
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d123      	bne.n	80085b6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	331b      	adds	r3, #27
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	331c      	adds	r3, #28
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4413      	add	r3, r2
 800859e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80085b6:	78fa      	ldrb	r2, [r7, #3]
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	440b      	add	r3, r1
 80085c4:	334c      	adds	r3, #76	@ 0x4c
 80085c6:	2204      	movs	r2, #4
 80085c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80085ca:	e229      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80085cc:	78fa      	ldrb	r2, [r7, #3]
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	334c      	adds	r3, #76	@ 0x4c
 80085dc:	2202      	movs	r2, #2
 80085de:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	4613      	mov	r3, r2
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	3326      	adds	r3, #38	@ 0x26
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00b      	beq.n	800860e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3326      	adds	r3, #38	@ 0x26
 8008606:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008608:	2b02      	cmp	r3, #2
 800860a:	f040 8209 	bne.w	8008a20 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008624:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800862c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863a:	461a      	mov	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008640:	e1ee      	b.n	8008a20 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	334d      	adds	r3, #77	@ 0x4d
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b05      	cmp	r3, #5
 8008656:	f040 80c8 	bne.w	80087ea <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	334d      	adds	r3, #77	@ 0x4d
 800866a:	2202      	movs	r2, #2
 800866c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	440b      	add	r3, r1
 800867c:	331b      	adds	r3, #27
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	f040 81ce 	bne.w	8008a22 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	011b      	lsls	r3, r3, #4
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	3326      	adds	r3, #38	@ 0x26
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b03      	cmp	r3, #3
 800869a:	d16b      	bne.n	8008774 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	3348      	adds	r3, #72	@ 0x48
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1c59      	adds	r1, r3, #1
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4403      	add	r3, r0
 80086bc:	3348      	adds	r3, #72	@ 0x48
 80086be:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3348      	adds	r3, #72	@ 0x48
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d943      	bls.n	800875e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80086d6:	78fa      	ldrb	r2, [r7, #3]
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3348      	adds	r3, #72	@ 0x48
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	331b      	adds	r3, #27
 80086fa:	2200      	movs	r2, #0
 80086fc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3344      	adds	r3, #68	@ 0x44
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d809      	bhi.n	8008728 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008714:	78fa      	ldrb	r2, [r7, #3]
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	331c      	adds	r3, #28
 8008724:	2201      	movs	r2, #1
 8008726:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	440a      	add	r2, r1
 800873e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008746:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	4613      	mov	r3, r2
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	334c      	adds	r3, #76	@ 0x4c
 8008758:	2204      	movs	r2, #4
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e014      	b.n	8008788 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	4613      	mov	r3, r2
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	334c      	adds	r3, #76	@ 0x4c
 800876e:	2202      	movs	r2, #2
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e009      	b.n	8008788 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	1a9b      	subs	r3, r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	334c      	adds	r3, #76	@ 0x4c
 8008784:	2202      	movs	r2, #2
 8008786:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008788:	78fa      	ldrb	r2, [r7, #3]
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	3326      	adds	r3, #38	@ 0x26
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3326      	adds	r3, #38	@ 0x26
 80087ae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	f040 8136 	bne.w	8008a22 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e2:	461a      	mov	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	e11b      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	334d      	adds	r3, #77	@ 0x4d
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	f040 8081 	bne.w	8008904 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	334d      	adds	r3, #77	@ 0x4d
 8008812:	2202      	movs	r2, #2
 8008814:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	1a9b      	subs	r3, r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	440b      	add	r3, r1
 8008824:	331b      	adds	r3, #27
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b01      	cmp	r3, #1
 800882a:	f040 80fa 	bne.w	8008a22 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	334c      	adds	r3, #76	@ 0x4c
 800883e:	2202      	movs	r2, #2
 8008840:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	0151      	lsls	r1, r2, #5
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	440a      	add	r2, r1
 8008858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008860:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	0151      	lsls	r1, r2, #5
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	440a      	add	r2, r1
 8008878:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800887c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008880:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	440a      	add	r2, r1
 8008898:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800889c:	f023 0320 	bic.w	r3, r3, #32
 80088a0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	1a9b      	subs	r3, r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	440b      	add	r3, r1
 80088b0:	3326      	adds	r3, #38	@ 0x26
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80088b8:	78fa      	ldrb	r2, [r7, #3]
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	4613      	mov	r3, r2
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	3326      	adds	r3, #38	@ 0x26
 80088c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	f040 80a9 	bne.w	8008a22 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fc:	461a      	mov	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	e08e      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4613      	mov	r3, r2
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	334d      	adds	r3, #77	@ 0x4d
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b04      	cmp	r3, #4
 8008918:	d143      	bne.n	80089a2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	334d      	adds	r3, #77	@ 0x4d
 800892a:	2202      	movs	r2, #2
 800892c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	334c      	adds	r3, #76	@ 0x4c
 800893e:	2202      	movs	r2, #2
 8008940:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	440b      	add	r3, r1
 8008950:	3326      	adds	r3, #38	@ 0x26
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	3326      	adds	r3, #38	@ 0x26
 8008968:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800896a:	2b02      	cmp	r3, #2
 800896c:	d159      	bne.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	4413      	add	r3, r2
 8008976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008984:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800898c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899a:	461a      	mov	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e03f      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	440b      	add	r3, r1
 80089b0:	334d      	adds	r3, #77	@ 0x4d
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d126      	bne.n	8008a06 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	4613      	mov	r3, r2
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	1a9b      	subs	r3, r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	440b      	add	r3, r1
 80089c6:	334d      	adds	r3, #77	@ 0x4d
 80089c8:	2202      	movs	r2, #2
 80089ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3344      	adds	r3, #68	@ 0x44
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	1c59      	adds	r1, r3, #1
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4403      	add	r3, r0
 80089ec:	3344      	adds	r3, #68	@ 0x44
 80089ee:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	334c      	adds	r3, #76	@ 0x4c
 8008a00:	2204      	movs	r2, #4
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e00d      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	1a9b      	subs	r3, r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	334d      	adds	r3, #77	@ 0x4d
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	f000 8100 	beq.w	8008c1e <HCD_HC_IN_IRQHandler+0xcca>
 8008a1e:	e000      	b.n	8008a22 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a20:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	334c      	adds	r3, #76	@ 0x4c
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f00e f825 	bl	8016a88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a3e:	e0ef      	b.n	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	78fa      	ldrb	r2, [r7, #3]
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f008 f84c 	bl	8010ae6 <USB_ReadChInterrupts>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a54:	2b40      	cmp	r3, #64	@ 0x40
 8008a56:	d12f      	bne.n	8008ab8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a64:	461a      	mov	r2, r3
 8008a66:	2340      	movs	r3, #64	@ 0x40
 8008a68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	334d      	adds	r3, #77	@ 0x4d
 8008a7a:	2205      	movs	r2, #5
 8008a7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	331a      	adds	r3, #26
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d109      	bne.n	8008aa8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	3344      	adds	r3, #68	@ 0x44
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f008 f895 	bl	8010be0 <USB_HC_Halt>
 8008ab6:	e0b3      	b.n	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f008 f810 	bl	8010ae6 <USB_ReadChInterrupts>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	f040 80a7 	bne.w	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	011b      	lsls	r3, r3, #4
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	3326      	adds	r3, #38	@ 0x26
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d11b      	bne.n	8008b20 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4613      	mov	r3, r2
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	3344      	adds	r3, #68	@ 0x44
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	334d      	adds	r3, #77	@ 0x4d
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f008 f861 	bl	8010be0 <USB_HC_Halt>
 8008b1e:	e03f      	b.n	8008ba0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	4613      	mov	r3, r2
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3326      	adds	r3, #38	@ 0x26
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	440b      	add	r3, r1
 8008b44:	3326      	adds	r3, #38	@ 0x26
 8008b46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d129      	bne.n	8008ba0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008b4c:	78fa      	ldrb	r2, [r7, #3]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3344      	adds	r3, #68	@ 0x44
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	799b      	ldrb	r3, [r3, #6]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <HCD_HC_IN_IRQHandler+0xc2a>
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	1a9b      	subs	r3, r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	331b      	adds	r3, #27
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d110      	bne.n	8008ba0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	4613      	mov	r3, r2
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	334d      	adds	r3, #77	@ 0x4d
 8008b8e:	2204      	movs	r2, #4
 8008b90:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f008 f820 	bl	8010be0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	331b      	adds	r3, #27
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d129      	bne.n	8008c0a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	1a9b      	subs	r3, r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	440b      	add	r3, r1
 8008bc4:	331b      	adds	r3, #27
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	78fa      	ldrb	r2, [r7, #3]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008be8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c04:	f043 0320 	orr.w	r3, r3, #32
 8008c08:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c16:	461a      	mov	r2, r3
 8008c18:	2310      	movs	r3, #16
 8008c1a:	6093      	str	r3, [r2, #8]
 8008c1c:	e000      	b.n	8008c20 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008c1e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f007 ff4e 	bl	8010ae6 <USB_ReadChInterrupts>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d11b      	bne.n	8008c8c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c60:	461a      	mov	r2, r3
 8008c62:	2304      	movs	r3, #4
 8008c64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	440b      	add	r3, r1
 8008c74:	334d      	adds	r3, #77	@ 0x4d
 8008c76:	2207      	movs	r2, #7
 8008c78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f007 ffac 	bl	8010be0 <USB_HC_Halt>
 8008c88:	f000 bc89 	b.w	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	78fa      	ldrb	r2, [r7, #3]
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f007 ff26 	bl	8010ae6 <USB_ReadChInterrupts>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	f040 8082 	bne.w	8008daa <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3319      	adds	r3, #25
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d124      	bne.n	8008d18 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008cce:	78fa      	ldrb	r2, [r7, #3]
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	011b      	lsls	r3, r3, #4
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	3319      	adds	r3, #25
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	334c      	adds	r3, #76	@ 0x4c
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	334d      	adds	r3, #77	@ 0x4d
 8008d06:	2203      	movs	r2, #3
 8008d08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f007 ff64 	bl	8010be0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	331a      	adds	r3, #26
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f040 8437 	bne.w	800959e <HCD_HC_OUT_IRQHandler+0x978>
 8008d30:	78fa      	ldrb	r2, [r7, #3]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	4613      	mov	r3, r2
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	1a9b      	subs	r3, r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	331b      	adds	r3, #27
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 842b 	bne.w	800959e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	3326      	adds	r3, #38	@ 0x26
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d009      	beq.n	8008d72 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	331b      	adds	r3, #27
 8008d6e:	2201      	movs	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	334d      	adds	r3, #77	@ 0x4d
 8008d82:	2203      	movs	r2, #3
 8008d84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f007 ff26 	bl	8010be0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d94:	78fa      	ldrb	r2, [r7, #3]
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	3344      	adds	r3, #68	@ 0x44
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e3f9      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f007 fe97 	bl	8010ae6 <USB_ReadChInterrupts>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc2:	d111      	bne.n	8008de8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dd6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	78fa      	ldrb	r2, [r7, #3]
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f007 fefd 	bl	8010be0 <USB_HC_Halt>
 8008de6:	e3da      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f007 fe78 	bl	8010ae6 <USB_ReadChInterrupts>
 8008df6:	4603      	mov	r3, r0
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d168      	bne.n	8008ed2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008e00:	78fa      	ldrb	r2, [r7, #3]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4613      	mov	r3, r2
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	440b      	add	r3, r1
 8008e0e:	3344      	adds	r3, #68	@ 0x44
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	78fa      	ldrb	r2, [r7, #3]
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f007 fe62 	bl	8010ae6 <USB_ReadChInterrupts>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e28:	2b40      	cmp	r3, #64	@ 0x40
 8008e2a:	d112      	bne.n	8008e52 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	3319      	adds	r3, #25
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	2340      	movs	r3, #64	@ 0x40
 8008e50:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008e52:	78fa      	ldrb	r2, [r7, #3]
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	331b      	adds	r3, #27
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d019      	beq.n	8008e9c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008e68:	78fa      	ldrb	r2, [r7, #3]
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	440b      	add	r3, r1
 8008e76:	331b      	adds	r3, #27
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	78fa      	ldrb	r2, [r7, #3]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e9a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2301      	movs	r3, #1
 8008eac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008eae:	78fa      	ldrb	r2, [r7, #3]
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	1a9b      	subs	r3, r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	440b      	add	r3, r1
 8008ebc:	334d      	adds	r3, #77	@ 0x4d
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f007 fe88 	bl	8010be0 <USB_HC_Halt>
 8008ed0:	e365      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f007 fe03 	bl	8010ae6 <USB_ReadChInterrupts>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ee6:	2b40      	cmp	r3, #64	@ 0x40
 8008ee8:	d139      	bne.n	8008f5e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	334d      	adds	r3, #77	@ 0x4d
 8008efa:	2205      	movs	r2, #5
 8008efc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	331a      	adds	r3, #26
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	440b      	add	r3, r1
 8008f22:	3319      	adds	r3, #25
 8008f24:	2201      	movs	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8008f28:	78fa      	ldrb	r2, [r7, #3]
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	440b      	add	r3, r1
 8008f36:	3344      	adds	r3, #68	@ 0x44
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f007 fe4b 	bl	8010be0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f56:	461a      	mov	r2, r3
 8008f58:	2340      	movs	r3, #64	@ 0x40
 8008f5a:	6093      	str	r3, [r2, #8]
 8008f5c:	e31f      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f007 fdbd 	bl	8010ae6 <USB_ReadChInterrupts>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f003 0308 	and.w	r3, r3, #8
 8008f72:	2b08      	cmp	r3, #8
 8008f74:	d11a      	bne.n	8008fac <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f82:	461a      	mov	r2, r3
 8008f84:	2308      	movs	r3, #8
 8008f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	1a9b      	subs	r3, r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	334d      	adds	r3, #77	@ 0x4d
 8008f98:	2206      	movs	r2, #6
 8008f9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f007 fe1b 	bl	8010be0 <USB_HC_Halt>
 8008faa:	e2f8      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f007 fd96 	bl	8010ae6 <USB_ReadChInterrupts>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b10      	cmp	r3, #16
 8008fc2:	d144      	bne.n	800904e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	3344      	adds	r3, #68	@ 0x44
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008fd8:	78fa      	ldrb	r2, [r7, #3]
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	334d      	adds	r3, #77	@ 0x4d
 8008fe8:	2204      	movs	r2, #4
 8008fea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008fec:	78fa      	ldrb	r2, [r7, #3]
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	1a9b      	subs	r3, r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	440b      	add	r3, r1
 8008ffa:	3319      	adds	r3, #25
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d114      	bne.n	800902c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	3318      	adds	r3, #24
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009018:	78fa      	ldrb	r2, [r7, #3]
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	3319      	adds	r3, #25
 8009028:	2201      	movs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f007 fdd3 	bl	8010be0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009046:	461a      	mov	r2, r3
 8009048:	2310      	movs	r3, #16
 800904a:	6093      	str	r3, [r2, #8]
 800904c:	e2a7      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	4611      	mov	r1, r2
 8009056:	4618      	mov	r0, r3
 8009058:	f007 fd45 	bl	8010ae6 <USB_ReadChInterrupts>
 800905c:	4603      	mov	r3, r0
 800905e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009062:	2b80      	cmp	r3, #128	@ 0x80
 8009064:	f040 8083 	bne.w	800916e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	799b      	ldrb	r3, [r3, #6]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d111      	bne.n	8009094 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	4613      	mov	r3, r2
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	1a9b      	subs	r3, r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	440b      	add	r3, r1
 800907e:	334d      	adds	r3, #77	@ 0x4d
 8009080:	2207      	movs	r2, #7
 8009082:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f007 fda7 	bl	8010be0 <USB_HC_Halt>
 8009092:	e062      	b.n	800915a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	3344      	adds	r3, #68	@ 0x44
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4403      	add	r3, r0
 80090b4:	3344      	adds	r3, #68	@ 0x44
 80090b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090b8:	78fa      	ldrb	r2, [r7, #3]
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	4613      	mov	r3, r2
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	3344      	adds	r3, #68	@ 0x44
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d922      	bls.n	8009114 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80090ce:	78fa      	ldrb	r2, [r7, #3]
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	3344      	adds	r3, #68	@ 0x44
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	4613      	mov	r3, r2
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	440b      	add	r3, r1
 80090f0:	334c      	adds	r3, #76	@ 0x4c
 80090f2:	2204      	movs	r2, #4
 80090f4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80090f6:	78fa      	ldrb	r2, [r7, #3]
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	4613      	mov	r3, r2
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	334c      	adds	r3, #76	@ 0x4c
 8009106:	781a      	ldrb	r2, [r3, #0]
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f00d fcbb 	bl	8016a88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009112:	e022      	b.n	800915a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009114:	78fa      	ldrb	r2, [r7, #3]
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	4613      	mov	r3, r2
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	334c      	adds	r3, #76	@ 0x4c
 8009124:	2202      	movs	r2, #2
 8009126:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800913e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009146:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009154:	461a      	mov	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	4413      	add	r3, r2
 8009162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009166:	461a      	mov	r2, r3
 8009168:	2380      	movs	r3, #128	@ 0x80
 800916a:	6093      	str	r3, [r2, #8]
 800916c:	e217      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	78fa      	ldrb	r2, [r7, #3]
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f007 fcb5 	bl	8010ae6 <USB_ReadChInterrupts>
 800917c:	4603      	mov	r3, r0
 800917e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009186:	d11b      	bne.n	80091c0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	4613      	mov	r3, r2
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	1a9b      	subs	r3, r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	334d      	adds	r3, #77	@ 0x4d
 8009198:	2209      	movs	r2, #9
 800919a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	78fa      	ldrb	r2, [r7, #3]
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f007 fd1b 	bl	8010be0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b6:	461a      	mov	r2, r3
 80091b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091bc:	6093      	str	r3, [r2, #8]
 80091be:	e1ee      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4611      	mov	r1, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f007 fc8c 	bl	8010ae6 <USB_ReadChInterrupts>
 80091ce:	4603      	mov	r3, r0
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	f040 81df 	bne.w	8009598 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e6:	461a      	mov	r2, r3
 80091e8:	2302      	movs	r3, #2
 80091ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	334d      	adds	r3, #77	@ 0x4d
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	f040 8093 	bne.w	800932a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	334d      	adds	r3, #77	@ 0x4d
 8009214:	2202      	movs	r2, #2
 8009216:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	334c      	adds	r3, #76	@ 0x4c
 8009228:	2201      	movs	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	440b      	add	r3, r1
 800923a:	3326      	adds	r3, #38	@ 0x26
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d00b      	beq.n	800925a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	1a9b      	subs	r3, r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	3326      	adds	r3, #38	@ 0x26
 8009252:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009254:	2b03      	cmp	r3, #3
 8009256:	f040 8190 	bne.w	800957a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	799b      	ldrb	r3, [r3, #6]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d115      	bne.n	800928e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	333d      	adds	r3, #61	@ 0x3d
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	f083 0301 	eor.w	r3, r3, #1
 800927a:	b2d8      	uxtb	r0, r3
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	011b      	lsls	r3, r3, #4
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	440b      	add	r3, r1
 8009288:	333d      	adds	r3, #61	@ 0x3d
 800928a:	4602      	mov	r2, r0
 800928c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	799b      	ldrb	r3, [r3, #6]
 8009292:	2b01      	cmp	r3, #1
 8009294:	f040 8171 	bne.w	800957a <HCD_HC_OUT_IRQHandler+0x954>
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4613      	mov	r3, r2
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	3334      	adds	r3, #52	@ 0x34
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8165 	beq.w	800957a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	4613      	mov	r3, r2
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	3334      	adds	r3, #52	@ 0x34
 80092c0:	6819      	ldr	r1, [r3, #0]
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	1a9b      	subs	r3, r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4403      	add	r3, r0
 80092d0:	3328      	adds	r3, #40	@ 0x28
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	440b      	add	r3, r1
 80092d6:	1e59      	subs	r1, r3, #1
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4613      	mov	r3, r2
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	1a9b      	subs	r3, r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4403      	add	r3, r0
 80092e6:	3328      	adds	r3, #40	@ 0x28
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80092ee:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 813f 	beq.w	800957a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	1a9b      	subs	r3, r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	333d      	adds	r3, #61	@ 0x3d
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	f083 0301 	eor.w	r3, r3, #1
 8009314:	b2d8      	uxtb	r0, r3
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	1a9b      	subs	r3, r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	333d      	adds	r3, #61	@ 0x3d
 8009324:	4602      	mov	r2, r0
 8009326:	701a      	strb	r2, [r3, #0]
 8009328:	e127      	b.n	800957a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	1a9b      	subs	r3, r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	334d      	adds	r3, #77	@ 0x4d
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b03      	cmp	r3, #3
 800933e:	d120      	bne.n	8009382 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009340:	78fa      	ldrb	r2, [r7, #3]
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	4613      	mov	r3, r2
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	1a9b      	subs	r3, r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	334d      	adds	r3, #77	@ 0x4d
 8009350:	2202      	movs	r2, #2
 8009352:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4613      	mov	r3, r2
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	440b      	add	r3, r1
 8009362:	331b      	adds	r3, #27
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b01      	cmp	r3, #1
 8009368:	f040 8107 	bne.w	800957a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	334c      	adds	r3, #76	@ 0x4c
 800937c:	2202      	movs	r2, #2
 800937e:	701a      	strb	r2, [r3, #0]
 8009380:	e0fb      	b.n	800957a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4613      	mov	r3, r2
 8009388:	011b      	lsls	r3, r3, #4
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	440b      	add	r3, r1
 8009390:	334d      	adds	r3, #77	@ 0x4d
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b04      	cmp	r3, #4
 8009396:	d13a      	bne.n	800940e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009398:	78fa      	ldrb	r2, [r7, #3]
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	011b      	lsls	r3, r3, #4
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	334d      	adds	r3, #77	@ 0x4d
 80093a8:	2202      	movs	r2, #2
 80093aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80093ac:	78fa      	ldrb	r2, [r7, #3]
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4613      	mov	r3, r2
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	334c      	adds	r3, #76	@ 0x4c
 80093bc:	2202      	movs	r2, #2
 80093be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	331b      	adds	r3, #27
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	f040 80d1 	bne.w	800957a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	011b      	lsls	r3, r3, #4
 80093e0:	1a9b      	subs	r3, r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	331b      	adds	r3, #27
 80093e8:	2200      	movs	r2, #0
 80093ea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	440a      	add	r2, r1
 8009402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800940a:	6053      	str	r3, [r2, #4]
 800940c:	e0b5      	b.n	800957a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	011b      	lsls	r3, r3, #4
 8009416:	1a9b      	subs	r3, r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	334d      	adds	r3, #77	@ 0x4d
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b05      	cmp	r3, #5
 8009422:	d114      	bne.n	800944e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4613      	mov	r3, r2
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	1a9b      	subs	r3, r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	334d      	adds	r3, #77	@ 0x4d
 8009434:	2202      	movs	r2, #2
 8009436:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009438:	78fa      	ldrb	r2, [r7, #3]
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4613      	mov	r3, r2
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	1a9b      	subs	r3, r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	440b      	add	r3, r1
 8009446:	334c      	adds	r3, #76	@ 0x4c
 8009448:	2202      	movs	r2, #2
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	e095      	b.n	800957a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	334d      	adds	r3, #77	@ 0x4d
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b06      	cmp	r3, #6
 8009462:	d114      	bne.n	800948e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4613      	mov	r3, r2
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	334d      	adds	r3, #77	@ 0x4d
 8009474:	2202      	movs	r2, #2
 8009476:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	334c      	adds	r3, #76	@ 0x4c
 8009488:	2205      	movs	r2, #5
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	e075      	b.n	800957a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800948e:	78fa      	ldrb	r2, [r7, #3]
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	334d      	adds	r3, #77	@ 0x4d
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2b07      	cmp	r3, #7
 80094a2:	d00a      	beq.n	80094ba <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80094a4:	78fa      	ldrb	r2, [r7, #3]
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	4613      	mov	r3, r2
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	440b      	add	r3, r1
 80094b2:	334d      	adds	r3, #77	@ 0x4d
 80094b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	d170      	bne.n	800959c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	334d      	adds	r3, #77	@ 0x4d
 80094ca:	2202      	movs	r2, #2
 80094cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80094ce:	78fa      	ldrb	r2, [r7, #3]
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	3344      	adds	r3, #68	@ 0x44
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	1c59      	adds	r1, r3, #1
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4613      	mov	r3, r2
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4403      	add	r3, r0
 80094ee:	3344      	adds	r3, #68	@ 0x44
 80094f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	3344      	adds	r3, #68	@ 0x44
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d914      	bls.n	8009532 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009508:	78fa      	ldrb	r2, [r7, #3]
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	4613      	mov	r3, r2
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	1a9b      	subs	r3, r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	3344      	adds	r3, #68	@ 0x44
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	1a9b      	subs	r3, r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	334c      	adds	r3, #76	@ 0x4c
 800952c:	2204      	movs	r2, #4
 800952e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009530:	e022      	b.n	8009578 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	334c      	adds	r3, #76	@ 0x4c
 8009542:	2202      	movs	r2, #2
 8009544:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4413      	add	r3, r2
 800954e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800955c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009564:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	4413      	add	r3, r2
 800956e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009572:	461a      	mov	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009578:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	4613      	mov	r3, r2
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	1a9b      	subs	r3, r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	440b      	add	r3, r1
 8009588:	334c      	adds	r3, #76	@ 0x4c
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f00d fa79 	bl	8016a88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009596:	e002      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800959c:	bf00      	nop
  }
}
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08a      	sub	sp, #40	@ 0x28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	0c5b      	lsrs	r3, r3, #17
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	091b      	lsrs	r3, r3, #4
 80095d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d004      	beq.n	80095ea <HCD_RXQLVL_IRQHandler+0x46>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	f000 80b6 	beq.w	8009754 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80095e8:	e0b7      	b.n	800975a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 80b3 	beq.w	8009758 <HCD_RXQLVL_IRQHandler+0x1b4>
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	4613      	mov	r3, r2
 80095f8:	011b      	lsls	r3, r3, #4
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	332c      	adds	r3, #44	@ 0x2c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80a7 	beq.w	8009758 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4613      	mov	r3, r2
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	1a9b      	subs	r3, r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	440b      	add	r3, r1
 8009618:	3338      	adds	r3, #56	@ 0x38
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	18d1      	adds	r1, r2, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	69ba      	ldr	r2, [r7, #24]
 8009624:	4613      	mov	r3, r2
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	1a9b      	subs	r3, r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4403      	add	r3, r0
 800962e:	3334      	adds	r3, #52	@ 0x34
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4299      	cmp	r1, r3
 8009634:	f200 8083 	bhi.w	800973e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6818      	ldr	r0, [r3, #0]
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	4613      	mov	r3, r2
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	1a9b      	subs	r3, r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	440b      	add	r3, r1
 800964a:	332c      	adds	r3, #44	@ 0x2c
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	b292      	uxth	r2, r2
 8009652:	4619      	mov	r1, r3
 8009654:	f007 f9dc 	bl	8010a10 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	4613      	mov	r3, r2
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	332c      	adds	r3, #44	@ 0x2c
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	18d1      	adds	r1, r2, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	69ba      	ldr	r2, [r7, #24]
 8009672:	4613      	mov	r3, r2
 8009674:	011b      	lsls	r3, r3, #4
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4403      	add	r3, r0
 800967c:	332c      	adds	r3, #44	@ 0x2c
 800967e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	4613      	mov	r3, r2
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	440b      	add	r3, r1
 800968e:	3338      	adds	r3, #56	@ 0x38
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	18d1      	adds	r1, r2, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	4613      	mov	r3, r2
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4403      	add	r3, r0
 80096a4:	3338      	adds	r3, #56	@ 0x38
 80096a6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	0cdb      	lsrs	r3, r3, #19
 80096b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	4613      	mov	r3, r2
 80096c4:	011b      	lsls	r3, r3, #4
 80096c6:	1a9b      	subs	r3, r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	3328      	adds	r3, #40	@ 0x28
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d13f      	bne.n	8009758 <HCD_RXQLVL_IRQHandler+0x1b4>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d03c      	beq.n	8009758 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800970a:	461a      	mov	r2, r3
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	4613      	mov	r3, r2
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	440b      	add	r3, r1
 800971e:	333c      	adds	r3, #60	@ 0x3c
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f083 0301 	eor.w	r3, r3, #1
 8009726:	b2d8      	uxtb	r0, r3
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	4613      	mov	r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	333c      	adds	r3, #60	@ 0x3c
 8009738:	4602      	mov	r2, r0
 800973a:	701a      	strb	r2, [r3, #0]
      break;
 800973c:	e00c      	b.n	8009758 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	4613      	mov	r3, r2
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	334c      	adds	r3, #76	@ 0x4c
 800974e:	2204      	movs	r2, #4
 8009750:	701a      	strb	r2, [r3, #0]
      break;
 8009752:	e001      	b.n	8009758 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009754:	bf00      	nop
 8009756:	e000      	b.n	800975a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009758:	bf00      	nop
  }
}
 800975a:	bf00      	nop
 800975c:	3728      	adds	r7, #40	@ 0x28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800978e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b02      	cmp	r3, #2
 8009798:	d10b      	bne.n	80097b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d102      	bne.n	80097aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f00d f953 	bl	8016a50 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f043 0302 	orr.w	r3, r3, #2
 80097b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f003 0308 	and.w	r3, r3, #8
 80097b8:	2b08      	cmp	r3, #8
 80097ba:	d132      	bne.n	8009822 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f043 0308 	orr.w	r3, r3, #8
 80097c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0304 	and.w	r3, r3, #4
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	d126      	bne.n	800981c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7a5b      	ldrb	r3, [r3, #9]
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d113      	bne.n	80097fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80097dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097e0:	d106      	bne.n	80097f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2102      	movs	r1, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f007 f9ab 	bl	8010b44 <USB_InitFSLSPClkSel>
 80097ee:	e011      	b.n	8009814 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2101      	movs	r1, #1
 80097f6:	4618      	mov	r0, r3
 80097f8:	f007 f9a4 	bl	8010b44 <USB_InitFSLSPClkSel>
 80097fc:	e00a      	b.n	8009814 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	79db      	ldrb	r3, [r3, #7]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d106      	bne.n	8009814 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800980c:	461a      	mov	r2, r3
 800980e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009812:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f00d f949 	bl	8016aac <HAL_HCD_PortEnabled_Callback>
 800981a:	e002      	b.n	8009822 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f00d f953 	bl	8016ac8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b20      	cmp	r3, #32
 800982a:	d103      	bne.n	8009834 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f043 0320 	orr.w	r3, r3, #32
 8009832:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800983a:	461a      	mov	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6013      	str	r3, [r2, #0]
}
 8009840:	bf00      	nop
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e08b      	b.n	8009972 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d106      	bne.n	8009874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fa fb6c 	bl	8003f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2224      	movs	r2, #36	@ 0x24
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009898:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d107      	bne.n	80098c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098be:	609a      	str	r2, [r3, #8]
 80098c0:	e006      	b.n	80098d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80098ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d108      	bne.n	80098ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098e6:	605a      	str	r2, [r3, #4]
 80098e8:	e007      	b.n	80098fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6859      	ldr	r1, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b1d      	ldr	r3, [pc, #116]	@ (800997c <HAL_I2C_Init+0x134>)
 8009906:	430b      	orrs	r3, r1
 8009908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691a      	ldr	r2, [r3, #16]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	69d9      	ldr	r1, [r3, #28]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f042 0201 	orr.w	r2, r2, #1
 8009952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	02008000 	.word	0x02008000

08009980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b20      	cmp	r3, #32
 8009994:	d138      	bne.n	8009a08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800999c:	2b01      	cmp	r3, #1
 800999e:	d101      	bne.n	80099a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80099a0:	2302      	movs	r3, #2
 80099a2:	e032      	b.n	8009a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2224      	movs	r2, #36	@ 0x24
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6819      	ldr	r1, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e000      	b.n	8009a0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a08:	2302      	movs	r3, #2
  }
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b085      	sub	sp, #20
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d139      	bne.n	8009aa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a36:	2302      	movs	r3, #2
 8009a38:	e033      	b.n	8009aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2224      	movs	r2, #36	@ 0x24
 8009a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0201 	bic.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0201 	orr.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e000      	b.n	8009aa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009aa0:	2302      	movs	r3, #2
  }
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e08f      	b.n	8009be0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fa fae1 	bl	800409c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	699a      	ldr	r2, [r3, #24]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009af0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6999      	ldr	r1, [r3, #24]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009b06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6999      	ldr	r1, [r3, #24]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a19      	ldr	r1, [r3, #32]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	041b      	lsls	r3, r3, #16
 8009b48:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5c:	041b      	lsls	r3, r3, #16
 8009b5e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0206 	orr.w	r2, r2, #6
 8009bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0201 	orr.w	r2, r2, #1
 8009bcc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bfe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d023      	beq.n	8009c52 <HAL_LTDC_IRQHandler+0x6a>
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01e      	beq.n	8009c52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0204 	bic.w	r2, r2, #4
 8009c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2204      	movs	r2, #4
 8009c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c32:	f043 0201 	orr.w	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f86f 	bl	8009d30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d023      	beq.n	8009ca4 <HAL_LTDC_IRQHandler+0xbc>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01e      	beq.n	8009ca4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0202 	bic.w	r2, r2, #2
 8009c74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c84:	f043 0202 	orr.w	r2, r3, #2
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2204      	movs	r2, #4
 8009c92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f846 	bl	8009d30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01b      	beq.n	8009ce6 <HAL_LTDC_IRQHandler+0xfe>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d016      	beq.n	8009ce6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f022 0201 	bic.w	r2, r2, #1
 8009cc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f82f 	bl	8009d44 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01b      	beq.n	8009d28 <HAL_LTDC_IRQHandler+0x140>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d016      	beq.n	8009d28 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f022 0208 	bic.w	r2, r2, #8
 8009d08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2208      	movs	r2, #8
 8009d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f818 	bl	8009d58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009d6c:	b5b0      	push	{r4, r5, r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_LTDC_ConfigLayer+0x1a>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e02c      	b.n	8009de0 <HAL_LTDC_ConfigLayer+0x74>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2202      	movs	r2, #2
 8009d92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2134      	movs	r1, #52	@ 0x34
 8009d9c:	fb01 f303 	mul.w	r3, r1, r3
 8009da0:	4413      	add	r3, r2
 8009da2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4614      	mov	r4, r2
 8009daa:	461d      	mov	r5, r3
 8009dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f811 	bl	8009de8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bdb0      	pop	{r4, r5, r7, pc}

08009de8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b089      	sub	sp, #36	@ 0x24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	0c1b      	lsrs	r3, r3, #16
 8009e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e04:	4413      	add	r3, r2
 8009e06:	041b      	lsls	r3, r3, #16
 8009e08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	01db      	lsls	r3, r3, #7
 8009e14:	4413      	add	r3, r2
 8009e16:	3384      	adds	r3, #132	@ 0x84
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	6812      	ldr	r2, [r2, #0]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	01d2      	lsls	r2, r2, #7
 8009e24:	440a      	add	r2, r1
 8009e26:	3284      	adds	r2, #132	@ 0x84
 8009e28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009e2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	0c1b      	lsrs	r3, r3, #16
 8009e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4619      	mov	r1, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	01db      	lsls	r3, r3, #7
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3384      	adds	r3, #132	@ 0x84
 8009e50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009e56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e66:	4413      	add	r3, r2
 8009e68:	041b      	lsls	r3, r3, #16
 8009e6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	01db      	lsls	r3, r3, #7
 8009e76:	4413      	add	r3, r2
 8009e78:	3384      	adds	r3, #132	@ 0x84
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	4611      	mov	r1, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	01d2      	lsls	r2, r2, #7
 8009e86:	440a      	add	r2, r1
 8009e88:	3284      	adds	r2, #132	@ 0x84
 8009e8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009e8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e9e:	4413      	add	r3, r2
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	01db      	lsls	r3, r3, #7
 8009eac:	440b      	add	r3, r1
 8009eae:	3384      	adds	r3, #132	@ 0x84
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	01db      	lsls	r3, r3, #7
 8009ec2:	4413      	add	r3, r2
 8009ec4:	3384      	adds	r3, #132	@ 0x84
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	01d2      	lsls	r2, r2, #7
 8009ed2:	440a      	add	r2, r1
 8009ed4:	3284      	adds	r2, #132	@ 0x84
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	01db      	lsls	r3, r3, #7
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3384      	adds	r3, #132	@ 0x84
 8009eea:	461a      	mov	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f02:	041b      	lsls	r3, r3, #16
 8009f04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	061b      	lsls	r3, r3, #24
 8009f0c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f14:	461a      	mov	r2, r3
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4619      	mov	r1, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	01db      	lsls	r3, r3, #7
 8009f28:	440b      	add	r3, r1
 8009f2a:	3384      	adds	r3, #132	@ 0x84
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	01db      	lsls	r3, r3, #7
 8009f3e:	4413      	add	r3, r2
 8009f40:	3384      	adds	r3, #132	@ 0x84
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	01d2      	lsls	r2, r2, #7
 8009f4e:	440a      	add	r2, r1
 8009f50:	3284      	adds	r2, #132	@ 0x84
 8009f52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	01db      	lsls	r3, r3, #7
 8009f62:	4413      	add	r3, r2
 8009f64:	3384      	adds	r3, #132	@ 0x84
 8009f66:	461a      	mov	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	01db      	lsls	r3, r3, #7
 8009f78:	4413      	add	r3, r2
 8009f7a:	3384      	adds	r3, #132	@ 0x84
 8009f7c:	69da      	ldr	r2, [r3, #28]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	01db      	lsls	r3, r3, #7
 8009f88:	440b      	add	r3, r1
 8009f8a:	3384      	adds	r3, #132	@ 0x84
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4b4f      	ldr	r3, [pc, #316]	@ (800a0cc <LTDC_SetConfig+0x2e4>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	68f9      	ldr	r1, [r7, #12]
 8009f9e:	6809      	ldr	r1, [r1, #0]
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	01c9      	lsls	r1, r1, #7
 8009fa6:	4401      	add	r1, r0
 8009fa8:	3184      	adds	r1, #132	@ 0x84
 8009faa:	4313      	orrs	r3, r2
 8009fac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	01db      	lsls	r3, r3, #7
 8009fb8:	4413      	add	r3, r2
 8009fba:	3384      	adds	r3, #132	@ 0x84
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009fcc:	2304      	movs	r3, #4
 8009fce:	61fb      	str	r3, [r7, #28]
 8009fd0:	e01b      	b.n	800a00a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	e014      	b.n	800a00a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d00b      	beq.n	800a000 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d007      	beq.n	800a000 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d003      	beq.n	800a000 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ffc:	2b07      	cmp	r3, #7
 8009ffe:	d102      	bne.n	800a006 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a000:	2302      	movs	r3, #2
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	e001      	b.n	800a00a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a006:	2301      	movs	r3, #1
 800a008:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	01db      	lsls	r3, r3, #7
 800a014:	4413      	add	r3, r2
 800a016:	3384      	adds	r3, #132	@ 0x84
 800a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	6812      	ldr	r2, [r2, #0]
 800a01e:	4611      	mov	r1, r2
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	01d2      	lsls	r2, r2, #7
 800a024:	440a      	add	r2, r1
 800a026:	3284      	adds	r2, #132	@ 0x84
 800a028:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a02c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	fb02 f303 	mul.w	r3, r2, r3
 800a038:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6859      	ldr	r1, [r3, #4]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	1acb      	subs	r3, r1, r3
 800a044:	69f9      	ldr	r1, [r7, #28]
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a04c:	68f9      	ldr	r1, [r7, #12]
 800a04e:	6809      	ldr	r1, [r1, #0]
 800a050:	4608      	mov	r0, r1
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	01c9      	lsls	r1, r1, #7
 800a056:	4401      	add	r1, r0
 800a058:	3184      	adds	r1, #132	@ 0x84
 800a05a:	4313      	orrs	r3, r2
 800a05c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	01db      	lsls	r3, r3, #7
 800a068:	4413      	add	r3, r2
 800a06a:	3384      	adds	r3, #132	@ 0x84
 800a06c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4619      	mov	r1, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	01db      	lsls	r3, r3, #7
 800a078:	440b      	add	r3, r1
 800a07a:	3384      	adds	r3, #132	@ 0x84
 800a07c:	4619      	mov	r1, r3
 800a07e:	4b14      	ldr	r3, [pc, #80]	@ (800a0d0 <LTDC_SetConfig+0x2e8>)
 800a080:	4013      	ands	r3, r2
 800a082:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	01db      	lsls	r3, r3, #7
 800a08e:	4413      	add	r3, r2
 800a090:	3384      	adds	r3, #132	@ 0x84
 800a092:	461a      	mov	r2, r3
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a098:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	01db      	lsls	r3, r3, #7
 800a0a4:	4413      	add	r3, r2
 800a0a6:	3384      	adds	r3, #132	@ 0x84
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	6812      	ldr	r2, [r2, #0]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	01d2      	lsls	r2, r2, #7
 800a0b4:	440a      	add	r2, r1
 800a0b6:	3284      	adds	r2, #132	@ 0x84
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	6013      	str	r3, [r2, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	3724      	adds	r7, #36	@ 0x24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	fffff8f8 	.word	0xfffff8f8
 800a0d0:	fffff800 	.word	0xfffff800

0800a0d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a04      	ldr	r2, [pc, #16]	@ (800a0f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0e2:	6013      	str	r3, [r2, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40007000 	.word	0x40007000

0800a0f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a0fe:	4b23      	ldr	r3, [pc, #140]	@ (800a18c <HAL_PWREx_EnableOverDrive+0x98>)
 800a100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a102:	4a22      	ldr	r2, [pc, #136]	@ (800a18c <HAL_PWREx_EnableOverDrive+0x98>)
 800a104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a108:	6413      	str	r3, [r2, #64]	@ 0x40
 800a10a:	4b20      	ldr	r3, [pc, #128]	@ (800a18c <HAL_PWREx_EnableOverDrive+0x98>)
 800a10c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a10e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a116:	4b1e      	ldr	r3, [pc, #120]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a1d      	ldr	r2, [pc, #116]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a11c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a120:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a122:	f7fb fd61 	bl	8005be8 <HAL_GetTick>
 800a126:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a128:	e009      	b.n	800a13e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a12a:	f7fb fd5d 	bl	8005be8 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a138:	d901      	bls.n	800a13e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e022      	b.n	800a184 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a13e:	4b14      	ldr	r3, [pc, #80]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a14a:	d1ee      	bne.n	800a12a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a14c:	4b10      	ldr	r3, [pc, #64]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a0f      	ldr	r2, [pc, #60]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a156:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a158:	f7fb fd46 	bl	8005be8 <HAL_GetTick>
 800a15c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a15e:	e009      	b.n	800a174 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a160:	f7fb fd42 	bl	8005be8 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a16e:	d901      	bls.n	800a174 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e007      	b.n	800a184 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a174:	4b06      	ldr	r3, [pc, #24]	@ (800a190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a17c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a180:	d1ee      	bne.n	800a160 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	40023800 	.word	0x40023800
 800a190:	40007000 	.word	0x40007000

0800a194 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a19c:	f7fb fd24 	bl	8005be8 <HAL_GetTick>
 800a1a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e067      	b.n	800a27c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10b      	bne.n	800a1d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7fa f833 	bl	800422c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a1c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f85e 	bl	800a28c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	021a      	lsls	r2, r3, #8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2120      	movs	r1, #32
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f856 	bl	800a2a8 <QSPI_WaitFlagStateUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d135      	bne.n	800a272 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <HAL_QSPI_Init+0xf0>)
 800a20e:	4013      	ands	r3, r2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6852      	ldr	r2, [r2, #4]
 800a214:	0611      	lsls	r1, r2, #24
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68d2      	ldr	r2, [r2, #12]
 800a21a:	4311      	orrs	r1, r2
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	69d2      	ldr	r2, [r2, #28]
 800a220:	4311      	orrs	r1, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	6a12      	ldr	r2, [r2, #32]
 800a226:	4311      	orrs	r1, r2
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	4b14      	ldr	r3, [pc, #80]	@ (800a288 <HAL_QSPI_Init+0xf4>)
 800a238:	4013      	ands	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6912      	ldr	r2, [r2, #16]
 800a23e:	0411      	lsls	r1, r2, #16
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	6952      	ldr	r2, [r2, #20]
 800a244:	4311      	orrs	r1, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6992      	ldr	r2, [r2, #24]
 800a24a:	4311      	orrs	r1, r2
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	430b      	orrs	r3, r1
 800a252:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	00ffff2f 	.word	0x00ffff2f
 800a288:	ffe0f8fe 	.word	0xffe0f8fe

0800a28c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	683a      	ldr	r2, [r7, #0]
 800a29a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a2b8:	e01a      	b.n	800a2f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d016      	beq.n	800a2f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2c2:	f7fb fc91 	bl	8005be8 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d302      	bcc.n	800a2d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10b      	bne.n	800a2f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2204      	movs	r2, #4
 800a2dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2e4:	f043 0201 	orr.w	r2, r3, #1
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e00e      	b.n	800a30e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	689a      	ldr	r2, [r3, #8]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	2301      	movne	r3, #1
 800a300:	2300      	moveq	r3, #0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d1d6      	bne.n	800a2ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a320:	2300      	movs	r3, #0
 800a322:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e291      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8087 	beq.w	800a44a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a33c:	4b96      	ldr	r3, [pc, #600]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f003 030c 	and.w	r3, r3, #12
 800a344:	2b04      	cmp	r3, #4
 800a346:	d00c      	beq.n	800a362 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a348:	4b93      	ldr	r3, [pc, #588]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f003 030c 	and.w	r3, r3, #12
 800a350:	2b08      	cmp	r3, #8
 800a352:	d112      	bne.n	800a37a <HAL_RCC_OscConfig+0x62>
 800a354:	4b90      	ldr	r3, [pc, #576]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a35c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a360:	d10b      	bne.n	800a37a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a362:	4b8d      	ldr	r3, [pc, #564]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d06c      	beq.n	800a448 <HAL_RCC_OscConfig+0x130>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d168      	bne.n	800a448 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e26b      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a382:	d106      	bne.n	800a392 <HAL_RCC_OscConfig+0x7a>
 800a384:	4b84      	ldr	r3, [pc, #528]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a83      	ldr	r2, [pc, #524]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a38a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	e02e      	b.n	800a3f0 <HAL_RCC_OscConfig+0xd8>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x9c>
 800a39a:	4b7f      	ldr	r3, [pc, #508]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a7e      	ldr	r2, [pc, #504]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	4b7c      	ldr	r3, [pc, #496]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a7b      	ldr	r2, [pc, #492]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	e01d      	b.n	800a3f0 <HAL_RCC_OscConfig+0xd8>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3bc:	d10c      	bne.n	800a3d8 <HAL_RCC_OscConfig+0xc0>
 800a3be:	4b76      	ldr	r3, [pc, #472]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a75      	ldr	r2, [pc, #468]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	4b73      	ldr	r3, [pc, #460]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a72      	ldr	r2, [pc, #456]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	e00b      	b.n	800a3f0 <HAL_RCC_OscConfig+0xd8>
 800a3d8:	4b6f      	ldr	r3, [pc, #444]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a6e      	ldr	r2, [pc, #440]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	4b6c      	ldr	r3, [pc, #432]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a6b      	ldr	r2, [pc, #428]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a3ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d013      	beq.n	800a420 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f8:	f7fb fbf6 	bl	8005be8 <HAL_GetTick>
 800a3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a400:	f7fb fbf2 	bl	8005be8 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b64      	cmp	r3, #100	@ 0x64
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e21f      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a412:	4b61      	ldr	r3, [pc, #388]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0f0      	beq.n	800a400 <HAL_RCC_OscConfig+0xe8>
 800a41e:	e014      	b.n	800a44a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a420:	f7fb fbe2 	bl	8005be8 <HAL_GetTick>
 800a424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a426:	e008      	b.n	800a43a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a428:	f7fb fbde 	bl	8005be8 <HAL_GetTick>
 800a42c:	4602      	mov	r2, r0
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	2b64      	cmp	r3, #100	@ 0x64
 800a434:	d901      	bls.n	800a43a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e20b      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a43a:	4b57      	ldr	r3, [pc, #348]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f0      	bne.n	800a428 <HAL_RCC_OscConfig+0x110>
 800a446:	e000      	b.n	800a44a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d069      	beq.n	800a52a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a456:	4b50      	ldr	r3, [pc, #320]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f003 030c 	and.w	r3, r3, #12
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00b      	beq.n	800a47a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a462:	4b4d      	ldr	r3, [pc, #308]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 030c 	and.w	r3, r3, #12
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	d11c      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x190>
 800a46e:	4b4a      	ldr	r3, [pc, #296]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d116      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a47a:	4b47      	ldr	r3, [pc, #284]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_RCC_OscConfig+0x17a>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d001      	beq.n	800a492 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e1df      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a492:	4b41      	ldr	r3, [pc, #260]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	493d      	ldr	r1, [pc, #244]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4a6:	e040      	b.n	800a52a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d023      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4b0:	4b39      	ldr	r3, [pc, #228]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a38      	ldr	r2, [pc, #224]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4b6:	f043 0301 	orr.w	r3, r3, #1
 800a4ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4bc:	f7fb fb94 	bl	8005be8 <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4c4:	f7fb fb90 	bl	8005be8 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e1bd      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4d6:	4b30      	ldr	r3, [pc, #192]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f0      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	4929      	ldr	r1, [pc, #164]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	600b      	str	r3, [r1, #0]
 800a4f6:	e018      	b.n	800a52a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4f8:	4b27      	ldr	r3, [pc, #156]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a26      	ldr	r2, [pc, #152]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a4fe:	f023 0301 	bic.w	r3, r3, #1
 800a502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a504:	f7fb fb70 	bl	8005be8 <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a50c:	f7fb fb6c 	bl	8005be8 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b02      	cmp	r3, #2
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e199      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a51e:	4b1e      	ldr	r3, [pc, #120]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1f0      	bne.n	800a50c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0308 	and.w	r3, r3, #8
 800a532:	2b00      	cmp	r3, #0
 800a534:	d038      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d019      	beq.n	800a572 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a53e:	4b16      	ldr	r3, [pc, #88]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a542:	4a15      	ldr	r2, [pc, #84]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a544:	f043 0301 	orr.w	r3, r3, #1
 800a548:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a54a:	f7fb fb4d 	bl	8005be8 <HAL_GetTick>
 800a54e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a550:	e008      	b.n	800a564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a552:	f7fb fb49 	bl	8005be8 <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d901      	bls.n	800a564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e176      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a568:	f003 0302 	and.w	r3, r3, #2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0f0      	beq.n	800a552 <HAL_RCC_OscConfig+0x23a>
 800a570:	e01a      	b.n	800a5a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a576:	4a08      	ldr	r2, [pc, #32]	@ (800a598 <HAL_RCC_OscConfig+0x280>)
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a57e:	f7fb fb33 	bl	8005be8 <HAL_GetTick>
 800a582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a584:	e00a      	b.n	800a59c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a586:	f7fb fb2f 	bl	8005be8 <HAL_GetTick>
 800a58a:	4602      	mov	r2, r0
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	2b02      	cmp	r3, #2
 800a592:	d903      	bls.n	800a59c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e15c      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
 800a598:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a59c:	4b91      	ldr	r3, [pc, #580]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a59e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5a0:	f003 0302 	and.w	r3, r3, #2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1ee      	bne.n	800a586 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80a4 	beq.w	800a6fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5b6:	4b8b      	ldr	r3, [pc, #556]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10d      	bne.n	800a5de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5c2:	4b88      	ldr	r3, [pc, #544]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c6:	4a87      	ldr	r2, [pc, #540]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a5ce:	4b85      	ldr	r3, [pc, #532]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5d6:	60bb      	str	r3, [r7, #8]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5de:	4b82      	ldr	r3, [pc, #520]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d118      	bne.n	800a61c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a5ea:	4b7f      	ldr	r3, [pc, #508]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a7e      	ldr	r2, [pc, #504]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a5f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5f6:	f7fb faf7 	bl	8005be8 <HAL_GetTick>
 800a5fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5fc:	e008      	b.n	800a610 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5fe:	f7fb faf3 	bl	8005be8 <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	2b64      	cmp	r3, #100	@ 0x64
 800a60a:	d901      	bls.n	800a610 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e120      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a610:	4b75      	ldr	r3, [pc, #468]	@ (800a7e8 <HAL_RCC_OscConfig+0x4d0>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0f0      	beq.n	800a5fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d106      	bne.n	800a632 <HAL_RCC_OscConfig+0x31a>
 800a624:	4b6f      	ldr	r3, [pc, #444]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a628:	4a6e      	ldr	r2, [pc, #440]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a630:	e02d      	b.n	800a68e <HAL_RCC_OscConfig+0x376>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10c      	bne.n	800a654 <HAL_RCC_OscConfig+0x33c>
 800a63a:	4b6a      	ldr	r3, [pc, #424]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a63e:	4a69      	ldr	r2, [pc, #420]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a640:	f023 0301 	bic.w	r3, r3, #1
 800a644:	6713      	str	r3, [r2, #112]	@ 0x70
 800a646:	4b67      	ldr	r3, [pc, #412]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a64a:	4a66      	ldr	r2, [pc, #408]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a64c:	f023 0304 	bic.w	r3, r3, #4
 800a650:	6713      	str	r3, [r2, #112]	@ 0x70
 800a652:	e01c      	b.n	800a68e <HAL_RCC_OscConfig+0x376>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	2b05      	cmp	r3, #5
 800a65a:	d10c      	bne.n	800a676 <HAL_RCC_OscConfig+0x35e>
 800a65c:	4b61      	ldr	r3, [pc, #388]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a65e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a660:	4a60      	ldr	r2, [pc, #384]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a662:	f043 0304 	orr.w	r3, r3, #4
 800a666:	6713      	str	r3, [r2, #112]	@ 0x70
 800a668:	4b5e      	ldr	r3, [pc, #376]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66c:	4a5d      	ldr	r2, [pc, #372]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	6713      	str	r3, [r2, #112]	@ 0x70
 800a674:	e00b      	b.n	800a68e <HAL_RCC_OscConfig+0x376>
 800a676:	4b5b      	ldr	r3, [pc, #364]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a67a:	4a5a      	ldr	r2, [pc, #360]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	6713      	str	r3, [r2, #112]	@ 0x70
 800a682:	4b58      	ldr	r3, [pc, #352]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a686:	4a57      	ldr	r2, [pc, #348]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a688:	f023 0304 	bic.w	r3, r3, #4
 800a68c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d015      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a696:	f7fb faa7 	bl	8005be8 <HAL_GetTick>
 800a69a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a69c:	e00a      	b.n	800a6b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a69e:	f7fb faa3 	bl	8005be8 <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d901      	bls.n	800a6b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e0ce      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6b4:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0ee      	beq.n	800a69e <HAL_RCC_OscConfig+0x386>
 800a6c0:	e014      	b.n	800a6ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6c2:	f7fb fa91 	bl	8005be8 <HAL_GetTick>
 800a6c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6c8:	e00a      	b.n	800a6e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ca:	f7fb fa8d 	bl	8005be8 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e0b8      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6e0:	4b40      	ldr	r3, [pc, #256]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1ee      	bne.n	800a6ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d105      	bne.n	800a6fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f6:	4a3b      	ldr	r2, [pc, #236]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a6f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80a4 	beq.w	800a850 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a708:	4b36      	ldr	r3, [pc, #216]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f003 030c 	and.w	r3, r3, #12
 800a710:	2b08      	cmp	r3, #8
 800a712:	d06b      	beq.n	800a7ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d149      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a71c:	4b31      	ldr	r3, [pc, #196]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a30      	ldr	r2, [pc, #192]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a728:	f7fb fa5e 	bl	8005be8 <HAL_GetTick>
 800a72c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a72e:	e008      	b.n	800a742 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a730:	f7fb fa5a 	bl	8005be8 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d901      	bls.n	800a742 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e087      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a742:	4b28      	ldr	r3, [pc, #160]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f0      	bne.n	800a730 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69da      	ldr	r2, [r3, #28]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	431a      	orrs	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75c:	019b      	lsls	r3, r3, #6
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a764:	085b      	lsrs	r3, r3, #1
 800a766:	3b01      	subs	r3, #1
 800a768:	041b      	lsls	r3, r3, #16
 800a76a:	431a      	orrs	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a770:	061b      	lsls	r3, r3, #24
 800a772:	4313      	orrs	r3, r2
 800a774:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a776:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a77a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a77c:	4b19      	ldr	r3, [pc, #100]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a18      	ldr	r2, [pc, #96]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a788:	f7fb fa2e 	bl	8005be8 <HAL_GetTick>
 800a78c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a790:	f7fb fa2a 	bl	8005be8 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e057      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7a2:	4b10      	ldr	r3, [pc, #64]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f0      	beq.n	800a790 <HAL_RCC_OscConfig+0x478>
 800a7ae:	e04f      	b.n	800a850 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7bc:	f7fb fa14 	bl	8005be8 <HAL_GetTick>
 800a7c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7c2:	e008      	b.n	800a7d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7c4:	f7fb fa10 	bl	8005be8 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e03d      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7d6:	4b03      	ldr	r3, [pc, #12]	@ (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f0      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x4ac>
 800a7e2:	e035      	b.n	800a850 <HAL_RCC_OscConfig+0x538>
 800a7e4:	40023800 	.word	0x40023800
 800a7e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a85c <HAL_RCC_OscConfig+0x544>)
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d028      	beq.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a804:	429a      	cmp	r2, r3
 800a806:	d121      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a812:	429a      	cmp	r2, r3
 800a814:	d11a      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a81c:	4013      	ands	r3, r2
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a824:	4293      	cmp	r3, r2
 800a826:	d111      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a832:	085b      	lsrs	r3, r3, #1
 800a834:	3b01      	subs	r3, #1
 800a836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a838:	429a      	cmp	r2, r3
 800a83a:	d107      	bne.n	800a84c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a848:	429a      	cmp	r2, r3
 800a84a:	d001      	beq.n	800a850 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e000      	b.n	800a852 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40023800 	.word	0x40023800

0800a860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e0d0      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a878:	4b6a      	ldr	r3, [pc, #424]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 030f 	and.w	r3, r3, #15
 800a880:	683a      	ldr	r2, [r7, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d910      	bls.n	800a8a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a886:	4b67      	ldr	r3, [pc, #412]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f023 020f 	bic.w	r2, r3, #15
 800a88e:	4965      	ldr	r1, [pc, #404]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	4313      	orrs	r3, r2
 800a894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a896:	4b63      	ldr	r3, [pc, #396]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 030f 	and.w	r3, r3, #15
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d001      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0b8      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d020      	beq.n	800a8f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8c0:	4b59      	ldr	r3, [pc, #356]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	4a58      	ldr	r2, [pc, #352]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a8ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0308 	and.w	r3, r3, #8
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d005      	beq.n	800a8e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8d8:	4b53      	ldr	r3, [pc, #332]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	4a52      	ldr	r2, [pc, #328]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a8e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8e4:	4b50      	ldr	r3, [pc, #320]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	494d      	ldr	r1, [pc, #308]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d040      	beq.n	800a984 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d107      	bne.n	800a91a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a90a:	4b47      	ldr	r3, [pc, #284]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d115      	bne.n	800a942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e07f      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d107      	bne.n	800a932 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a922:	4b41      	ldr	r3, [pc, #260]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d109      	bne.n	800a942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e073      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a932:	4b3d      	ldr	r3, [pc, #244]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e06b      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a942:	4b39      	ldr	r3, [pc, #228]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f023 0203 	bic.w	r2, r3, #3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	4936      	ldr	r1, [pc, #216]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a950:	4313      	orrs	r3, r2
 800a952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a954:	f7fb f948 	bl	8005be8 <HAL_GetTick>
 800a958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a95a:	e00a      	b.n	800a972 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a95c:	f7fb f944 	bl	8005be8 <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d901      	bls.n	800a972 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e053      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a972:	4b2d      	ldr	r3, [pc, #180]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f003 020c 	and.w	r2, r3, #12
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	429a      	cmp	r2, r3
 800a982:	d1eb      	bne.n	800a95c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a984:	4b27      	ldr	r3, [pc, #156]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 030f 	and.w	r3, r3, #15
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d210      	bcs.n	800a9b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a992:	4b24      	ldr	r3, [pc, #144]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f023 020f 	bic.w	r2, r3, #15
 800a99a:	4922      	ldr	r1, [pc, #136]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9a2:	4b20      	ldr	r3, [pc, #128]	@ (800aa24 <HAL_RCC_ClockConfig+0x1c4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 030f 	and.w	r3, r3, #15
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d001      	beq.n	800a9b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e032      	b.n	800aa1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d008      	beq.n	800a9d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9c0:	4b19      	ldr	r3, [pc, #100]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	4916      	ldr	r1, [pc, #88]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9de:	4b12      	ldr	r3, [pc, #72]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	490e      	ldr	r1, [pc, #56]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9f2:	f000 f821 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800aa28 <HAL_RCC_ClockConfig+0x1c8>)
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	091b      	lsrs	r3, r3, #4
 800a9fe:	f003 030f 	and.w	r3, r3, #15
 800aa02:	490a      	ldr	r1, [pc, #40]	@ (800aa2c <HAL_RCC_ClockConfig+0x1cc>)
 800aa04:	5ccb      	ldrb	r3, [r1, r3]
 800aa06:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0a:	4a09      	ldr	r2, [pc, #36]	@ (800aa30 <HAL_RCC_ClockConfig+0x1d0>)
 800aa0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa0e:	4b09      	ldr	r3, [pc, #36]	@ (800aa34 <HAL_RCC_ClockConfig+0x1d4>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fa f918 	bl	8004c48 <HAL_InitTick>

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	40023c00 	.word	0x40023c00
 800aa28:	40023800 	.word	0x40023800
 800aa2c:	0801b364 	.word	0x0801b364
 800aa30:	2000001c 	.word	0x2000001c
 800aa34:	20000068 	.word	0x20000068

0800aa38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa3c:	b090      	sub	sp, #64	@ 0x40
 800aa3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa48:	2300      	movs	r3, #0
 800aa4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa50:	4b59      	ldr	r3, [pc, #356]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	f003 030c 	and.w	r3, r3, #12
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d00d      	beq.n	800aa78 <HAL_RCC_GetSysClockFreq+0x40>
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	f200 80a1 	bhi.w	800aba4 <HAL_RCC_GetSysClockFreq+0x16c>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <HAL_RCC_GetSysClockFreq+0x34>
 800aa66:	2b04      	cmp	r3, #4
 800aa68:	d003      	beq.n	800aa72 <HAL_RCC_GetSysClockFreq+0x3a>
 800aa6a:	e09b      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa6c:	4b53      	ldr	r3, [pc, #332]	@ (800abbc <HAL_RCC_GetSysClockFreq+0x184>)
 800aa6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa70:	e09b      	b.n	800abaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa72:	4b53      	ldr	r3, [pc, #332]	@ (800abc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa76:	e098      	b.n	800abaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa78:	4b4f      	ldr	r3, [pc, #316]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aa82:	4b4d      	ldr	r3, [pc, #308]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d028      	beq.n	800aae0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa8e:	4b4a      	ldr	r3, [pc, #296]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	099b      	lsrs	r3, r3, #6
 800aa94:	2200      	movs	r2, #0
 800aa96:	623b      	str	r3, [r7, #32]
 800aa98:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	4b47      	ldr	r3, [pc, #284]	@ (800abc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aaa4:	fb03 f201 	mul.w	r2, r3, r1
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	fb00 f303 	mul.w	r3, r0, r3
 800aaae:	4413      	add	r3, r2
 800aab0:	4a43      	ldr	r2, [pc, #268]	@ (800abc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aab2:	fba0 1202 	umull	r1, r2, r0, r2
 800aab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aab8:	460a      	mov	r2, r1
 800aaba:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aabc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aabe:	4413      	add	r3, r2
 800aac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac4:	2200      	movs	r2, #0
 800aac6:	61bb      	str	r3, [r7, #24]
 800aac8:	61fa      	str	r2, [r7, #28]
 800aaca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800aad2:	f7f5 fc05 	bl	80002e0 <__aeabi_uldivmod>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4613      	mov	r3, r2
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aade:	e053      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aae0:	4b35      	ldr	r3, [pc, #212]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	099b      	lsrs	r3, r3, #6
 800aae6:	2200      	movs	r2, #0
 800aae8:	613b      	str	r3, [r7, #16]
 800aaea:	617a      	str	r2, [r7, #20]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800aaf2:	f04f 0b00 	mov.w	fp, #0
 800aaf6:	4652      	mov	r2, sl
 800aaf8:	465b      	mov	r3, fp
 800aafa:	f04f 0000 	mov.w	r0, #0
 800aafe:	f04f 0100 	mov.w	r1, #0
 800ab02:	0159      	lsls	r1, r3, #5
 800ab04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab08:	0150      	lsls	r0, r2, #5
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	ebb2 080a 	subs.w	r8, r2, sl
 800ab12:	eb63 090b 	sbc.w	r9, r3, fp
 800ab16:	f04f 0200 	mov.w	r2, #0
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ab22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ab26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ab2a:	ebb2 0408 	subs.w	r4, r2, r8
 800ab2e:	eb63 0509 	sbc.w	r5, r3, r9
 800ab32:	f04f 0200 	mov.w	r2, #0
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	00eb      	lsls	r3, r5, #3
 800ab3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab40:	00e2      	lsls	r2, r4, #3
 800ab42:	4614      	mov	r4, r2
 800ab44:	461d      	mov	r5, r3
 800ab46:	eb14 030a 	adds.w	r3, r4, sl
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	eb45 030b 	adc.w	r3, r5, fp
 800ab50:	607b      	str	r3, [r7, #4]
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	f04f 0300 	mov.w	r3, #0
 800ab5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab5e:	4629      	mov	r1, r5
 800ab60:	028b      	lsls	r3, r1, #10
 800ab62:	4621      	mov	r1, r4
 800ab64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab68:	4621      	mov	r1, r4
 800ab6a:	028a      	lsls	r2, r1, #10
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab72:	2200      	movs	r2, #0
 800ab74:	60bb      	str	r3, [r7, #8]
 800ab76:	60fa      	str	r2, [r7, #12]
 800ab78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab7c:	f7f5 fbb0 	bl	80002e0 <__aeabi_uldivmod>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4613      	mov	r3, r2
 800ab86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ab88:	4b0b      	ldr	r3, [pc, #44]	@ (800abb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	0c1b      	lsrs	r3, r3, #16
 800ab8e:	f003 0303 	and.w	r3, r3, #3
 800ab92:	3301      	adds	r3, #1
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ab98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aba2:	e002      	b.n	800abaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aba4:	4b05      	ldr	r3, [pc, #20]	@ (800abbc <HAL_RCC_GetSysClockFreq+0x184>)
 800aba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800abac:	4618      	mov	r0, r3
 800abae:	3740      	adds	r7, #64	@ 0x40
 800abb0:	46bd      	mov	sp, r7
 800abb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abb6:	bf00      	nop
 800abb8:	40023800 	.word	0x40023800
 800abbc:	00f42400 	.word	0x00f42400
 800abc0:	017d7840 	.word	0x017d7840

0800abc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abc8:	4b03      	ldr	r3, [pc, #12]	@ (800abd8 <HAL_RCC_GetHCLKFreq+0x14>)
 800abca:	681b      	ldr	r3, [r3, #0]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	2000001c 	.word	0x2000001c

0800abdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800abe0:	f7ff fff0 	bl	800abc4 <HAL_RCC_GetHCLKFreq>
 800abe4:	4602      	mov	r2, r0
 800abe6:	4b05      	ldr	r3, [pc, #20]	@ (800abfc <HAL_RCC_GetPCLK1Freq+0x20>)
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	0a9b      	lsrs	r3, r3, #10
 800abec:	f003 0307 	and.w	r3, r3, #7
 800abf0:	4903      	ldr	r1, [pc, #12]	@ (800ac00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abf2:	5ccb      	ldrb	r3, [r1, r3]
 800abf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	40023800 	.word	0x40023800
 800ac00:	0801b374 	.word	0x0801b374

0800ac04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac08:	f7ff ffdc 	bl	800abc4 <HAL_RCC_GetHCLKFreq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	0b5b      	lsrs	r3, r3, #13
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	4903      	ldr	r1, [pc, #12]	@ (800ac28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac1a:	5ccb      	ldrb	r3, [r1, r3]
 800ac1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	40023800 	.word	0x40023800
 800ac28:	0801b374 	.word	0x0801b374

0800ac2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	220f      	movs	r2, #15
 800ac3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac3c:	4b12      	ldr	r3, [pc, #72]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0203 	and.w	r2, r3, #3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ac48:	4b0f      	ldr	r3, [pc, #60]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ac54:	4b0c      	ldr	r3, [pc, #48]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ac60:	4b09      	ldr	r3, [pc, #36]	@ (800ac88 <HAL_RCC_GetClockConfig+0x5c>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	08db      	lsrs	r3, r3, #3
 800ac66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ac6e:	4b07      	ldr	r3, [pc, #28]	@ (800ac8c <HAL_RCC_GetClockConfig+0x60>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 020f 	and.w	r2, r3, #15
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	601a      	str	r2, [r3, #0]
}
 800ac7a:	bf00      	nop
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	40023800 	.word	0x40023800
 800ac8c:	40023c00 	.word	0x40023c00

0800ac90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d012      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800acb8:	4b69      	ldr	r3, [pc, #420]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	4a68      	ldr	r2, [pc, #416]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acbe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800acc2:	6093      	str	r3, [r2, #8]
 800acc4:	4b66      	ldr	r3, [pc, #408]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800accc:	4964      	ldr	r1, [pc, #400]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800acda:	2301      	movs	r3, #1
 800acdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d017      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800acea:	4b5d      	ldr	r3, [pc, #372]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acf0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf8:	4959      	ldr	r1, [pc, #356]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad08:	d101      	bne.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d101      	bne.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ad16:	2301      	movs	r3, #1
 800ad18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d017      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ad26:	4b4e      	ldr	r3, [pc, #312]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad2c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad34:	494a      	ldr	r1, [pc, #296]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad44:	d101      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ad46:	2301      	movs	r3, #1
 800ad48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ad52:	2301      	movs	r3, #1
 800ad54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ad62:	2301      	movs	r3, #1
 800ad64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 808b 	beq.w	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad74:	4b3a      	ldr	r3, [pc, #232]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad78:	4a39      	ldr	r2, [pc, #228]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad7e:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad80:	4b37      	ldr	r3, [pc, #220]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad88:	60bb      	str	r3, [r7, #8]
 800ad8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad8c:	4b35      	ldr	r3, [pc, #212]	@ (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a34      	ldr	r2, [pc, #208]	@ (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad98:	f7fa ff26 	bl	8005be8 <HAL_GetTick>
 800ad9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad9e:	e008      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ada0:	f7fa ff22 	bl	8005be8 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b64      	cmp	r3, #100	@ 0x64
 800adac:	d901      	bls.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e357      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800adb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0f0      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800adbe:	4b28      	ldr	r3, [pc, #160]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d035      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	429a      	cmp	r2, r3
 800adda:	d02e      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800addc:	4b20      	ldr	r3, [pc, #128]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ade0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ade4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ade6:	4b1e      	ldr	r3, [pc, #120]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ade8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adea:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adf0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adf6:	4a1a      	ldr	r2, [pc, #104]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adfc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ae04:	4b16      	ldr	r3, [pc, #88]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d114      	bne.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae10:	f7fa feea 	bl	8005be8 <HAL_GetTick>
 800ae14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae16:	e00a      	b.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae18:	f7fa fee6 	bl	8005be8 <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d901      	bls.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e319      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0ee      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae46:	d111      	bne.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ae48:	4b05      	ldr	r3, [pc, #20]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ae54:	4b04      	ldr	r3, [pc, #16]	@ (800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ae56:	400b      	ands	r3, r1
 800ae58:	4901      	ldr	r1, [pc, #4]	@ (800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	608b      	str	r3, [r1, #8]
 800ae5e:	e00b      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ae60:	40023800 	.word	0x40023800
 800ae64:	40007000 	.word	0x40007000
 800ae68:	0ffffcff 	.word	0x0ffffcff
 800ae6c:	4baa      	ldr	r3, [pc, #680]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	4aa9      	ldr	r2, [pc, #676]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ae76:	6093      	str	r3, [r2, #8]
 800ae78:	4ba7      	ldr	r3, [pc, #668]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae84:	49a4      	ldr	r1, [pc, #656]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0310 	and.w	r3, r3, #16
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d010      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae96:	4ba0      	ldr	r3, [pc, #640]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae9c:	4a9e      	ldr	r2, [pc, #632]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aea2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800aea6:	4b9c      	ldr	r3, [pc, #624]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb0:	4999      	ldr	r1, [pc, #612]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aec4:	4b94      	ldr	r3, [pc, #592]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aed2:	4991      	ldr	r1, [pc, #580]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aed4:	4313      	orrs	r3, r2
 800aed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aee6:	4b8c      	ldr	r3, [pc, #560]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aef4:	4988      	ldr	r1, [pc, #544]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800af08:	4b83      	ldr	r3, [pc, #524]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af16:	4980      	ldr	r1, [pc, #512]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800af2a:	4b7b      	ldr	r3, [pc, #492]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af30:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af38:	4977      	ldr	r1, [pc, #476]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af4c:	4b72      	ldr	r3, [pc, #456]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af52:	f023 0203 	bic.w	r2, r3, #3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5a:	496f      	ldr	r1, [pc, #444]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af6e:	4b6a      	ldr	r3, [pc, #424]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af74:	f023 020c 	bic.w	r2, r3, #12
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af7c:	4966      	ldr	r1, [pc, #408]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af90:	4b61      	ldr	r3, [pc, #388]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af96:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af9e:	495e      	ldr	r1, [pc, #376]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800afb2:	4b59      	ldr	r3, [pc, #356]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc0:	4955      	ldr	r1, [pc, #340]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800afd4:	4b50      	ldr	r3, [pc, #320]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe2:	494d      	ldr	r1, [pc, #308]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800aff6:	4b48      	ldr	r3, [pc, #288]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b004:	4944      	ldr	r1, [pc, #272]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b006:	4313      	orrs	r3, r2
 800b008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00a      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b018:	4b3f      	ldr	r3, [pc, #252]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b026:	493c      	ldr	r1, [pc, #240]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00a      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b03a:	4b37      	ldr	r3, [pc, #220]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b040:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b048:	4933      	ldr	r1, [pc, #204]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00a      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b05c:	4b2e      	ldr	r3, [pc, #184]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b062:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b06a:	492b      	ldr	r1, [pc, #172]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d011      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b07e:	4b26      	ldr	r3, [pc, #152]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b084:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b08c:	4922      	ldr	r1, [pc, #136]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b09c:	d101      	bne.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0308 	and.w	r3, r3, #8
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b0be:	4b16      	ldr	r3, [pc, #88]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0cc:	4912      	ldr	r1, [pc, #72]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f0:	4909      	ldr	r1, [pc, #36]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d006      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80d9 	beq.w	800b2be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b10c:	4b02      	ldr	r3, [pc, #8]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a01      	ldr	r2, [pc, #4]	@ (800b118 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b116:	e001      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b118:	40023800 	.word	0x40023800
 800b11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b11e:	f7fa fd63 	bl	8005be8 <HAL_GetTick>
 800b122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b126:	f7fa fd5f 	bl	8005be8 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b64      	cmp	r3, #100	@ 0x64
 800b132:	d901      	bls.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e194      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b138:	4b6c      	ldr	r3, [pc, #432]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1f0      	bne.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d021      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b154:	2b00      	cmp	r3, #0
 800b156:	d11d      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b158:	4b64      	ldr	r3, [pc, #400]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b15e:	0c1b      	lsrs	r3, r3, #16
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b166:	4b61      	ldr	r3, [pc, #388]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b16c:	0e1b      	lsrs	r3, r3, #24
 800b16e:	f003 030f 	and.w	r3, r3, #15
 800b172:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	019a      	lsls	r2, r3, #6
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	431a      	orrs	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	061b      	lsls	r3, r3, #24
 800b184:	431a      	orrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	071b      	lsls	r3, r3, #28
 800b18c:	4957      	ldr	r1, [pc, #348]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a8:	d00a      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d02e      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1be:	d129      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b1c0:	4b4a      	ldr	r3, [pc, #296]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	f003 0303 	and.w	r3, r3, #3
 800b1cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1ce:	4b47      	ldr	r3, [pc, #284]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1d4:	0f1b      	lsrs	r3, r3, #28
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	019a      	lsls	r2, r3, #6
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	061b      	lsls	r3, r3, #24
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	071b      	lsls	r3, r3, #28
 800b1f4:	493d      	ldr	r1, [pc, #244]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b1fc:	4b3b      	ldr	r3, [pc, #236]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b202:	f023 021f 	bic.w	r2, r3, #31
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	3b01      	subs	r3, #1
 800b20c:	4937      	ldr	r1, [pc, #220]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01d      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b220:	4b32      	ldr	r3, [pc, #200]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b226:	0e1b      	lsrs	r3, r3, #24
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b22e:	4b2f      	ldr	r3, [pc, #188]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b234:	0f1b      	lsrs	r3, r3, #28
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	019a      	lsls	r2, r3, #6
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	431a      	orrs	r2, r3
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	061b      	lsls	r3, r3, #24
 800b24e:	431a      	orrs	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	071b      	lsls	r3, r3, #28
 800b254:	4925      	ldr	r1, [pc, #148]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b256:	4313      	orrs	r3, r2
 800b258:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d011      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	019a      	lsls	r2, r3, #6
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	041b      	lsls	r3, r3, #16
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	061b      	lsls	r3, r3, #24
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	071b      	lsls	r3, r3, #28
 800b284:	4919      	ldr	r1, [pc, #100]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b28c:	4b17      	ldr	r3, [pc, #92]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a16      	ldr	r2, [pc, #88]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b298:	f7fa fca6 	bl	8005be8 <HAL_GetTick>
 800b29c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b29e:	e008      	b.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b2a0:	f7fa fca2 	bl	8005be8 <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b64      	cmp	r3, #100	@ 0x64
 800b2ac:	d901      	bls.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e0d7      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0f0      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	f040 80cd 	bne.w	800b460 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b2c6:	4b09      	ldr	r3, [pc, #36]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a08      	ldr	r2, [pc, #32]	@ (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2d2:	f7fa fc89 	bl	8005be8 <HAL_GetTick>
 800b2d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2d8:	e00a      	b.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b2da:	f7fa fc85 	bl	8005be8 <HAL_GetTick>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	2b64      	cmp	r3, #100	@ 0x64
 800b2e6:	d903      	bls.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e0ba      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b2ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2f0:	4b5e      	ldr	r3, [pc, #376]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2fc:	d0ed      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d009      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d02e      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	d12a      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b326:	4b51      	ldr	r3, [pc, #324]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b32c:	0c1b      	lsrs	r3, r3, #16
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b334:	4b4d      	ldr	r3, [pc, #308]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b33a:	0f1b      	lsrs	r3, r3, #28
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	019a      	lsls	r2, r3, #6
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	041b      	lsls	r3, r3, #16
 800b34c:	431a      	orrs	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	061b      	lsls	r3, r3, #24
 800b354:	431a      	orrs	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	071b      	lsls	r3, r3, #28
 800b35a:	4944      	ldr	r1, [pc, #272]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b362:	4b42      	ldr	r3, [pc, #264]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b368:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b370:	3b01      	subs	r3, #1
 800b372:	021b      	lsls	r3, r3, #8
 800b374:	493d      	ldr	r1, [pc, #244]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b376:	4313      	orrs	r3, r2
 800b378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d022      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b38c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b390:	d11d      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b392:	4b36      	ldr	r3, [pc, #216]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b398:	0e1b      	lsrs	r3, r3, #24
 800b39a:	f003 030f 	and.w	r3, r3, #15
 800b39e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b3a0:	4b32      	ldr	r3, [pc, #200]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	0f1b      	lsrs	r3, r3, #28
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	019a      	lsls	r2, r3, #6
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	041b      	lsls	r3, r3, #16
 800b3ba:	431a      	orrs	r2, r3
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	061b      	lsls	r3, r3, #24
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	071b      	lsls	r3, r3, #28
 800b3c6:	4929      	ldr	r1, [pc, #164]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d028      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b3da:	4b24      	ldr	r3, [pc, #144]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e0:	0e1b      	lsrs	r3, r3, #24
 800b3e2:	f003 030f 	and.w	r3, r3, #15
 800b3e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3e8:	4b20      	ldr	r3, [pc, #128]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	019a      	lsls	r2, r3, #6
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	041b      	lsls	r3, r3, #16
 800b400:	431a      	orrs	r2, r3
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	061b      	lsls	r3, r3, #24
 800b406:	431a      	orrs	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	071b      	lsls	r3, r3, #28
 800b40e:	4917      	ldr	r1, [pc, #92]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b410:	4313      	orrs	r3, r2
 800b412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b416:	4b15      	ldr	r3, [pc, #84]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b41c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b424:	4911      	ldr	r1, [pc, #68]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b426:	4313      	orrs	r3, r2
 800b428:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b42c:	4b0f      	ldr	r3, [pc, #60]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a0e      	ldr	r2, [pc, #56]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b438:	f7fa fbd6 	bl	8005be8 <HAL_GetTick>
 800b43c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b43e:	e008      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b440:	f7fa fbd2 	bl	8005be8 <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b64      	cmp	r3, #100	@ 0x64
 800b44c:	d901      	bls.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e007      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b452:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b45a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b45e:	d1ef      	bne.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3720      	adds	r7, #32
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	40023800 	.word	0x40023800

0800b470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b48e:	f040 808d 	bne.w	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b492:	4b93      	ldr	r3, [pc, #588]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b498:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b4a0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4a8:	d07c      	beq.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4b0:	d87b      	bhi.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4be:	d039      	beq.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b4c0:	e073      	b.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b4c2:	4b87      	ldr	r3, [pc, #540]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d108      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b4ce:	4b84      	ldr	r3, [pc, #528]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4d6:	4a83      	ldr	r2, [pc, #524]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4dc:	613b      	str	r3, [r7, #16]
 800b4de:	e007      	b.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b4e0:	4b7f      	ldr	r3, [pc, #508]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4e8:	4a7f      	ldr	r2, [pc, #508]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b4f0:	4b7b      	ldr	r3, [pc, #492]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4f6:	0e1b      	lsrs	r3, r3, #24
 800b4f8:	f003 030f 	and.w	r3, r3, #15
 800b4fc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b4fe:	4b78      	ldr	r3, [pc, #480]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b504:	099b      	lsrs	r3, r3, #6
 800b506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	fb03 f202 	mul.w	r2, r3, r2
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	fbb2 f3f3 	udiv	r3, r2, r3
 800b516:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b518:	4b71      	ldr	r3, [pc, #452]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	f003 031f 	and.w	r3, r3, #31
 800b524:	3301      	adds	r3, #1
 800b526:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b530:	617b      	str	r3, [r7, #20]
        break;
 800b532:	e03b      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b534:	4b6a      	ldr	r3, [pc, #424]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d108      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b540:	4b67      	ldr	r3, [pc, #412]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b548:	4a66      	ldr	r2, [pc, #408]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54e:	613b      	str	r3, [r7, #16]
 800b550:	e007      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b552:	4b63      	ldr	r3, [pc, #396]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b55a:	4a63      	ldr	r2, [pc, #396]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b560:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b562:	4b5f      	ldr	r3, [pc, #380]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b568:	0e1b      	lsrs	r3, r3, #24
 800b56a:	f003 030f 	and.w	r3, r3, #15
 800b56e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b570:	4b5b      	ldr	r3, [pc, #364]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b576:	099b      	lsrs	r3, r3, #6
 800b578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	fb03 f202 	mul.w	r2, r3, r2
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	fbb2 f3f3 	udiv	r3, r2, r3
 800b588:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b58a:	4b55      	ldr	r3, [pc, #340]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b590:	f003 031f 	and.w	r3, r3, #31
 800b594:	3301      	adds	r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a0:	617b      	str	r3, [r7, #20]
        break;
 800b5a2:	e003      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5a4:	4b51      	ldr	r3, [pc, #324]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b5a6:	617b      	str	r3, [r7, #20]
        break;
 800b5a8:	e000      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b5aa:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5b2:	f040 808d 	bne.w	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b5c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5cc:	d07c      	beq.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5d4:	d87b      	bhi.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5e2:	d039      	beq.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b5e4:	e073      	b.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b5e6:	4b3e      	ldr	r3, [pc, #248]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d108      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b5f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5fa:	4a3a      	ldr	r2, [pc, #232]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b600:	613b      	str	r3, [r7, #16]
 800b602:	e007      	b.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b604:	4b36      	ldr	r3, [pc, #216]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b60c:	4a36      	ldr	r2, [pc, #216]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b612:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b614:	4b32      	ldr	r3, [pc, #200]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b61a:	0e1b      	lsrs	r3, r3, #24
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b622:	4b2f      	ldr	r3, [pc, #188]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b628:	099b      	lsrs	r3, r3, #6
 800b62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	fb03 f202 	mul.w	r2, r3, r2
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b63c:	4b28      	ldr	r3, [pc, #160]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	f003 031f 	and.w	r3, r3, #31
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	fbb2 f3f3 	udiv	r3, r2, r3
 800b654:	617b      	str	r3, [r7, #20]
        break;
 800b656:	e03b      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b658:	4b21      	ldr	r3, [pc, #132]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d108      	bne.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b664:	4b1e      	ldr	r3, [pc, #120]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b66c:	4a1d      	ldr	r2, [pc, #116]	@ (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	e007      	b.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b676:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b67e:	4a1a      	ldr	r2, [pc, #104]	@ (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b680:	fbb2 f3f3 	udiv	r3, r2, r3
 800b684:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b686:	4b16      	ldr	r3, [pc, #88]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b68c:	0e1b      	lsrs	r3, r3, #24
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b694:	4b12      	ldr	r3, [pc, #72]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b69a:	099b      	lsrs	r3, r3, #6
 800b69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	fb03 f202 	mul.w	r2, r3, r2
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ac:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6b4:	f003 031f 	and.w	r3, r3, #31
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c4:	617b      	str	r3, [r7, #20]
        break;
 800b6c6:	e003      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6c8:	4b08      	ldr	r3, [pc, #32]	@ (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b6ca:	617b      	str	r3, [r7, #20]
        break;
 800b6cc:	e000      	b.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b6ce:	bf00      	nop
      }
    }
  }

  return frequency;
 800b6d0:	697b      	ldr	r3, [r7, #20]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	00f42400 	.word	0x00f42400
 800b6e8:	017d7840 	.word	0x017d7840
 800b6ec:	00bb8000 	.word	0x00bb8000

0800b6f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e071      	b.n	800b7e6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7f5b      	ldrb	r3, [r3, #29]
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7f8 fe1a 	bl	800434c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f003 0310 	and.w	r3, r3, #16
 800b728:	2b10      	cmp	r3, #16
 800b72a:	d053      	beq.n	800b7d4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	22ca      	movs	r2, #202	@ 0xca
 800b732:	625a      	str	r2, [r3, #36]	@ 0x24
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2253      	movs	r2, #83	@ 0x53
 800b73a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fac7 	bl	800bcd0 <RTC_EnterInitMode>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b746:	7bfb      	ldrb	r3, [r7, #15]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d12a      	bne.n	800b7a2 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6899      	ldr	r1, [r3, #8]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b26      	ldr	r3, [pc, #152]	@ (800b7f0 <HAL_RTC_Init+0x100>)
 800b758:	400b      	ands	r3, r1
 800b75a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6899      	ldr	r1, [r3, #8]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	431a      	orrs	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	431a      	orrs	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	430a      	orrs	r2, r1
 800b778:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	68d2      	ldr	r2, [r2, #12]
 800b782:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6919      	ldr	r1, [r3, #16]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	041a      	lsls	r2, r3, #16
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	430a      	orrs	r2, r1
 800b796:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fad0 	bl	800bd3e <RTC_ExitInitMode>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d110      	bne.n	800b7ca <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 0208 	bic.w	r2, r2, #8
 800b7b6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	699a      	ldr	r2, [r3, #24]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	22ff      	movs	r2, #255	@ 0xff
 800b7d0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b7d2:	e001      	b.n	800b7d8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	ff8fffbf 	.word	0xff8fffbf

0800b7f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7f4:	b590      	push	{r4, r7, lr}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b800:	2300      	movs	r3, #0
 800b802:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	7f1b      	ldrb	r3, [r3, #28]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d101      	bne.n	800b810 <HAL_RTC_SetTime+0x1c>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e085      	b.n	800b91c <HAL_RTC_SetTime+0x128>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2201      	movs	r2, #1
 800b814:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2202      	movs	r2, #2
 800b81a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d126      	bne.n	800b870 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d102      	bne.n	800b836 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2200      	movs	r2, #0
 800b834:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 faa4 	bl	800bd88 <RTC_ByteToBcd2>
 800b840:	4603      	mov	r3, r0
 800b842:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fa9d 	bl	800bd88 <RTC_ByteToBcd2>
 800b84e:	4603      	mov	r3, r0
 800b850:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b852:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	789b      	ldrb	r3, [r3, #2]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 fa95 	bl	800bd88 <RTC_ByteToBcd2>
 800b85e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b860:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	78db      	ldrb	r3, [r3, #3]
 800b868:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b86a:	4313      	orrs	r3, r2
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e018      	b.n	800b8a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2200      	movs	r2, #0
 800b882:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b890:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b896:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	78db      	ldrb	r3, [r3, #3]
 800b89c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	22ca      	movs	r2, #202	@ 0xca
 800b8a8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2253      	movs	r2, #83	@ 0x53
 800b8b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 fa0c 	bl	800bcd0 <RTC_EnterInitMode>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b8bc:	7cfb      	ldrb	r3, [r7, #19]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d11e      	bne.n	800b900 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6979      	ldr	r1, [r7, #20]
 800b8c8:	4b16      	ldr	r3, [pc, #88]	@ (800b924 <HAL_RTC_SetTime+0x130>)
 800b8ca:	400b      	ands	r3, r1
 800b8cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b8dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6899      	ldr	r1, [r3, #8]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	68da      	ldr	r2, [r3, #12]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fa21 	bl	800bd3e <RTC_ExitInitMode>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b900:	7cfb      	ldrb	r3, [r7, #19]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d102      	bne.n	800b90c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	22ff      	movs	r2, #255	@ 0xff
 800b912:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	771a      	strb	r2, [r3, #28]

  return status;
 800b91a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	371c      	adds	r7, #28
 800b920:	46bd      	mov	sp, r7
 800b922:	bd90      	pop	{r4, r7, pc}
 800b924:	007f7f7f 	.word	0x007f7f7f

0800b928 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	7f1b      	ldrb	r3, [r3, #28]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_RTC_SetDate+0x1c>
 800b940:	2302      	movs	r3, #2
 800b942:	e06f      	b.n	800ba24 <HAL_RTC_SetDate+0xfc>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2201      	movs	r2, #1
 800b948:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2202      	movs	r2, #2
 800b94e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10e      	bne.n	800b974 <HAL_RTC_SetDate+0x4c>
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	f003 0310 	and.w	r3, r3, #16
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	785b      	ldrb	r3, [r3, #1]
 800b966:	f023 0310 	bic.w	r3, r3, #16
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	330a      	adds	r3, #10
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d11c      	bne.n	800b9b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	78db      	ldrb	r3, [r3, #3]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fa02 	bl	800bd88 <RTC_ByteToBcd2>
 800b984:	4603      	mov	r3, r0
 800b986:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f9fb 	bl	800bd88 <RTC_ByteToBcd2>
 800b992:	4603      	mov	r3, r0
 800b994:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b996:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	789b      	ldrb	r3, [r3, #2]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 f9f3 	bl	800bd88 <RTC_ByteToBcd2>
 800b9a2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b9a4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	e00e      	b.n	800b9d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	78db      	ldrb	r3, [r3, #3]
 800b9b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	785b      	ldrb	r3, [r3, #1]
 800b9be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b9c0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b9c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	22ca      	movs	r2, #202	@ 0xca
 800b9d8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2253      	movs	r2, #83	@ 0x53
 800b9e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 f974 	bl	800bcd0 <RTC_EnterInitMode>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b9ec:	7cfb      	ldrb	r3, [r7, #19]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	6979      	ldr	r1, [r7, #20]
 800b9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800ba2c <HAL_RTC_SetDate+0x104>)
 800b9fa:	400b      	ands	r3, r1
 800b9fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f99d 	bl	800bd3e <RTC_ExitInitMode>
 800ba04:	4603      	mov	r3, r0
 800ba06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ba08:	7cfb      	ldrb	r3, [r7, #19]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d102      	bne.n	800ba14 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2201      	movs	r2, #1
 800ba12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	22ff      	movs	r2, #255	@ 0xff
 800ba1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	771a      	strb	r2, [r3, #28]

  return status;
 800ba22:	7cfb      	ldrb	r3, [r7, #19]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	371c      	adds	r7, #28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd90      	pop	{r4, r7, pc}
 800ba2c:	00ffff3f 	.word	0x00ffff3f

0800ba30 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	b089      	sub	sp, #36	@ 0x24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800ba44:	2300      	movs	r3, #0
 800ba46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	7f1b      	ldrb	r3, [r3, #28]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_RTC_SetAlarm+0x24>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e113      	b.n	800bc7c <HAL_RTC_SetAlarm+0x24c>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d137      	bne.n	800bad6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2200      	movs	r2, #0
 800ba78:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 f982 	bl	800bd88 <RTC_ByteToBcd2>
 800ba84:	4603      	mov	r3, r0
 800ba86:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	785b      	ldrb	r3, [r3, #1]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f97b 	bl	800bd88 <RTC_ByteToBcd2>
 800ba92:	4603      	mov	r3, r0
 800ba94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ba96:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	789b      	ldrb	r3, [r3, #2]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 f973 	bl	800bd88 <RTC_ByteToBcd2>
 800baa2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800baa4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	78db      	ldrb	r3, [r3, #3]
 800baac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800baae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 f965 	bl	800bd88 <RTC_ByteToBcd2>
 800babe:	4603      	mov	r3, r0
 800bac0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800bac2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800baca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bad0:	4313      	orrs	r3, r2
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e023      	b.n	800bb1e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2200      	movs	r2, #0
 800bae8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	785b      	ldrb	r3, [r3, #1]
 800baf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800baf6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bafc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	78db      	ldrb	r3, [r3, #3]
 800bb02:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bb04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bb0e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bb14:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800bb26:	4313      	orrs	r3, r2
 800bb28:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	22ca      	movs	r2, #202	@ 0xca
 800bb30:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2253      	movs	r2, #83	@ 0x53
 800bb38:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb42:	d148      	bne.n	800bbd6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689a      	ldr	r2, [r3, #8]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb52:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb62:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bb74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb76:	f7fa f837 	bl	8005be8 <HAL_GetTick>
 800bb7a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bb7c:	e013      	b.n	800bba6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb7e:	f7fa f833 	bl	8005be8 <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb8c:	d90b      	bls.n	800bba6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	22ff      	movs	r2, #255	@ 0xff
 800bb94:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2203      	movs	r2, #3
 800bb9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e06a      	b.n	800bc7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0e4      	beq.n	800bb7e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	689a      	ldr	r2, [r3, #8]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbd2:	609a      	str	r2, [r3, #8]
 800bbd4:	e047      	b.n	800bc66 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	689a      	ldr	r2, [r3, #8]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bbe4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	689a      	ldr	r2, [r3, #8]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bbf4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bc06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc08:	f7f9 ffee 	bl	8005be8 <HAL_GetTick>
 800bc0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bc0e:	e013      	b.n	800bc38 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bc10:	f7f9 ffea 	bl	8005be8 <HAL_GetTick>
 800bc14:	4602      	mov	r2, r0
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc1e:	d90b      	bls.n	800bc38 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	22ff      	movs	r2, #255	@ 0xff
 800bc26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2203      	movs	r2, #3
 800bc2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e021      	b.n	800bc7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0e4      	beq.n	800bc10 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69fa      	ldr	r2, [r7, #28]
 800bc4c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc64:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	22ff      	movs	r2, #255	@ 0xff
 800bc6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2201      	movs	r2, #1
 800bc72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3724      	adds	r7, #36	@ 0x24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd90      	pop	{r4, r7, pc}

0800bc84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a0d      	ldr	r2, [pc, #52]	@ (800bccc <HAL_RTC_WaitForSynchro+0x48>)
 800bc96:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc98:	f7f9 ffa6 	bl	8005be8 <HAL_GetTick>
 800bc9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc9e:	e009      	b.n	800bcb4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bca0:	f7f9 ffa2 	bl	8005be8 <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bcae:	d901      	bls.n	800bcb4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e007      	b.n	800bcc4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0ee      	beq.n	800bca0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	0001ff5f 	.word	0x0001ff5f

0800bcd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d122      	bne.n	800bd34 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bcfc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bcfe:	f7f9 ff73 	bl	8005be8 <HAL_GetTick>
 800bd02:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd04:	e00c      	b.n	800bd20 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bd06:	f7f9 ff6f 	bl	8005be8 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd14:	d904      	bls.n	800bd20 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2204      	movs	r2, #4
 800bd1a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <RTC_EnterInitMode+0x64>
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d1e8      	bne.n	800bd06 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68da      	ldr	r2, [r3, #12]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd58:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f003 0320 	and.w	r3, r3, #32
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff ff8b 	bl	800bc84 <HAL_RTC_WaitForSynchro>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d004      	beq.n	800bd7e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2204      	movs	r2, #4
 800bd78:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bd96:	e005      	b.n	800bda4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	3b0a      	subs	r3, #10
 800bda2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	d8f6      	bhi.n	800bd98 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	79fb      	ldrb	r3, [r7, #7]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	b2db      	uxtb	r3, r3
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	7f1b      	ldrb	r3, [r3, #28]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d101      	bne.n	800bde0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bddc:	2302      	movs	r3, #2
 800bdde:	e050      	b.n	800be82 <HAL_RTCEx_SetTimeStamp+0xbe>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2201      	movs	r2, #1
 800bde4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2202      	movs	r2, #2
 800bdea:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f022 0206 	bic.w	r2, r2, #6
 800bdfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	430a      	orrs	r2, r1
 800be0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689a      	ldr	r2, [r3, #8]
 800be12:	4b1f      	ldr	r3, [pc, #124]	@ (800be90 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800be14:	4013      	ands	r3, r2
 800be16:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	22ca      	movs	r2, #202	@ 0xca
 800be26:	625a      	str	r2, [r3, #36]	@ 0x24
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2253      	movs	r2, #83	@ 0x53
 800be2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800be48:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	b2da      	uxtb	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800be5a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689a      	ldr	r2, [r3, #8]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be6a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	22ff      	movs	r2, #255	@ 0xff
 800be72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2201      	movs	r2, #1
 800be78:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	fffff7f7 	.word	0xfffff7f7

0800be94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e156      	b.n	800c160 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7f8 fe54 	bl	8004b74 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2202      	movs	r2, #2
 800bed0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f95b 	bl	800c190 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d00c      	beq.n	800befc <HAL_SAI_Init+0x68>
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d80d      	bhi.n	800bf02 <HAL_SAI_Init+0x6e>
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <HAL_SAI_Init+0x5c>
 800beea:	2b01      	cmp	r3, #1
 800beec:	d003      	beq.n	800bef6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800beee:	e008      	b.n	800bf02 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	61fb      	str	r3, [r7, #28]
      break;
 800bef4:	e006      	b.n	800bf04 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bef6:	2310      	movs	r3, #16
 800bef8:	61fb      	str	r3, [r7, #28]
      break;
 800befa:	e003      	b.n	800bf04 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800befc:	2320      	movs	r3, #32
 800befe:	61fb      	str	r3, [r7, #28]
      break;
 800bf00:	e000      	b.n	800bf04 <HAL_SAI_Init+0x70>
      break;
 800bf02:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d81e      	bhi.n	800bf4a <HAL_SAI_Init+0xb6>
 800bf0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf14 <HAL_SAI_Init+0x80>)
 800bf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf12:	bf00      	nop
 800bf14:	0800bf25 	.word	0x0800bf25
 800bf18:	0800bf2b 	.word	0x0800bf2b
 800bf1c:	0800bf33 	.word	0x0800bf33
 800bf20:	0800bf3b 	.word	0x0800bf3b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
    }
    break;
 800bf28:	e010      	b.n	800bf4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bf2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf2e:	617b      	str	r3, [r7, #20]
    }
    break;
 800bf30:	e00c      	b.n	800bf4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bf32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf36:	617b      	str	r3, [r7, #20]
    }
    break;
 800bf38:	e008      	b.n	800bf4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bf3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf3e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	f043 0301 	orr.w	r3, r3, #1
 800bf46:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bf48:	e000      	b.n	800bf4c <HAL_SAI_Init+0xb8>
    default:
      break;
 800bf4a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a85      	ldr	r2, [pc, #532]	@ (800c168 <HAL_SAI_Init+0x2d4>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d004      	beq.n	800bf60 <HAL_SAI_Init+0xcc>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a84      	ldr	r2, [pc, #528]	@ (800c16c <HAL_SAI_Init+0x2d8>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d103      	bne.n	800bf68 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bf60:	4a83      	ldr	r2, [pc, #524]	@ (800c170 <HAL_SAI_Init+0x2dc>)
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	e002      	b.n	800bf6e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bf68:	4a82      	ldr	r2, [pc, #520]	@ (800c174 <HAL_SAI_Init+0x2e0>)
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d04c      	beq.n	800c010 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a7a      	ldr	r2, [pc, #488]	@ (800c168 <HAL_SAI_Init+0x2d4>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d004      	beq.n	800bf8e <HAL_SAI_Init+0xfa>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a78      	ldr	r2, [pc, #480]	@ (800c16c <HAL_SAI_Init+0x2d8>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d104      	bne.n	800bf98 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bf8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bf92:	f7ff fa6d 	bl	800b470 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf96:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a76      	ldr	r2, [pc, #472]	@ (800c178 <HAL_SAI_Init+0x2e4>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d004      	beq.n	800bfac <HAL_SAI_Init+0x118>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a75      	ldr	r2, [pc, #468]	@ (800c17c <HAL_SAI_Init+0x2e8>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d104      	bne.n	800bfb6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bfac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bfb0:	f7ff fa5e 	bl	800b470 <HAL_RCCEx_GetPeriphCLKFreq>
 800bfb4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	025b      	lsls	r3, r3, #9
 800bfc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfcc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4a6b      	ldr	r2, [pc, #428]	@ (800c180 <HAL_SAI_Init+0x2ec>)
 800bfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd6:	08da      	lsrs	r2, r3, #3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bfdc:	68f9      	ldr	r1, [r7, #12]
 800bfde:	4b68      	ldr	r3, [pc, #416]	@ (800c180 <HAL_SAI_Init+0x2ec>)
 800bfe0:	fba3 2301 	umull	r2, r3, r3, r1
 800bfe4:	08da      	lsrs	r2, r3, #3
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	1aca      	subs	r2, r1, r3
 800bff0:	2a08      	cmp	r2, #8
 800bff2:	d904      	bls.n	800bffe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6a1b      	ldr	r3, [r3, #32]
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c002:	2b04      	cmp	r3, #4
 800c004:	d104      	bne.n	800c010 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	085a      	lsrs	r2, r3, #1
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <HAL_SAI_Init+0x18c>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d109      	bne.n	800c034 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c024:	2b01      	cmp	r3, #1
 800c026:	d101      	bne.n	800c02c <HAL_SAI_Init+0x198>
 800c028:	2300      	movs	r3, #0
 800c02a:	e001      	b.n	800c030 <HAL_SAI_Init+0x19c>
 800c02c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c030:	61bb      	str	r3, [r7, #24]
 800c032:	e008      	b.n	800c046 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d102      	bne.n	800c042 <HAL_SAI_Init+0x1ae>
 800c03c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c040:	e000      	b.n	800c044 <HAL_SAI_Init+0x1b0>
 800c042:	2300      	movs	r3, #0
 800c044:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	4b4c      	ldr	r3, [pc, #304]	@ (800c184 <HAL_SAI_Init+0x2f0>)
 800c052:	400b      	ands	r3, r1
 800c054:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	6819      	ldr	r1, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685a      	ldr	r2, [r3, #4]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c064:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c06a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c070:	431a      	orrs	r2, r3
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c07e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c08a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	051b      	lsls	r3, r3, #20
 800c092:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	430a      	orrs	r2, r1
 800c09a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6859      	ldr	r1, [r3, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	4b38      	ldr	r3, [pc, #224]	@ (800c188 <HAL_SAI_Init+0x2f4>)
 800c0a8:	400b      	ands	r3, r1
 800c0aa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6859      	ldr	r1, [r3, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	699a      	ldr	r2, [r3, #24]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6899      	ldr	r1, [r3, #8]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	4b2d      	ldr	r3, [pc, #180]	@ (800c18c <HAL_SAI_Init+0x2f8>)
 800c0d6:	400b      	ands	r3, r1
 800c0d8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6899      	ldr	r1, [r3, #8]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c0ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c0f0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c0f6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c100:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	430a      	orrs	r2, r1
 800c108:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68d9      	ldr	r1, [r3, #12]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c118:	400b      	ands	r3, r1
 800c11a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68d9      	ldr	r1, [r3, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c12a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c130:	041b      	lsls	r3, r3, #16
 800c132:	431a      	orrs	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c138:	3b01      	subs	r3, #1
 800c13a:	021b      	lsls	r3, r3, #8
 800c13c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	430a      	orrs	r2, r1
 800c144:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2201      	movs	r2, #1
 800c152:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	40015804 	.word	0x40015804
 800c16c:	40015824 	.word	0x40015824
 800c170:	40015800 	.word	0x40015800
 800c174:	40015c00 	.word	0x40015c00
 800c178:	40015c04 	.word	0x40015c04
 800c17c:	40015c24 	.word	0x40015c24
 800c180:	cccccccd 	.word	0xcccccccd
 800c184:	ff05c010 	.word	0xff05c010
 800c188:	ffff1ff0 	.word	0xffff1ff0
 800c18c:	fff88000 	.word	0xfff88000

0800c190 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c198:	4b17      	ldr	r3, [pc, #92]	@ (800c1f8 <SAI_Disable+0x68>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a17      	ldr	r2, [pc, #92]	@ (800c1fc <SAI_Disable+0x6c>)
 800c19e:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a2:	0b1b      	lsrs	r3, r3, #12
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c1ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	1e5a      	subs	r2, r3, #1
 800c1c0:	60fa      	str	r2, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10a      	bne.n	800c1dc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	72fb      	strb	r3, [r7, #11]
      break;
 800c1da:	e006      	b.n	800c1ea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e8      	bne.n	800c1bc <SAI_Disable+0x2c>

  return status;
 800c1ea:	7afb      	ldrb	r3, [r7, #11]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	2000001c 	.word	0x2000001c
 800c1fc:	95cbec1b 	.word	0x95cbec1b

0800c200 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e022      	b.n	800c258 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d105      	bne.n	800c22a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7f8 f8bf 	bl	80043a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2203      	movs	r2, #3
 800c22e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f814 	bl	800c260 <HAL_SD_InitCard>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e00a      	b.n	800c258 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c260:	b5b0      	push	{r4, r5, r7, lr}
 800c262:	b08e      	sub	sp, #56	@ 0x38
 800c264:	af04      	add	r7, sp, #16
 800c266:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c268:	2300      	movs	r3, #0
 800c26a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c26c:	2300      	movs	r3, #0
 800c26e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c270:	2300      	movs	r3, #0
 800c272:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c274:	2300      	movs	r3, #0
 800c276:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c278:	2300      	movs	r3, #0
 800c27a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c27c:	2376      	movs	r3, #118	@ 0x76
 800c27e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681d      	ldr	r5, [r3, #0]
 800c284:	466c      	mov	r4, sp
 800c286:	f107 0318 	add.w	r3, r7, #24
 800c28a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c28e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c292:	f107 030c 	add.w	r3, r7, #12
 800c296:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c298:	4628      	mov	r0, r5
 800c29a:	f003 fe05 	bl	800fea8 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2ac:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f003 fe42 	bl	800ff3c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2c6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c2c8:	2002      	movs	r0, #2
 800c2ca:	f7f9 fc99 	bl	8005c00 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fe68 	bl	800cfa4 <SD_PowerON>
 800c2d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e02e      	b.n	800c352 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fd87 	bl	800ce08 <SD_InitCard>
 800c2fa:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00b      	beq.n	800c31a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	431a      	orrs	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c316:	2301      	movs	r3, #1
 800c318:	e01b      	b.n	800c352 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c322:	4618      	mov	r0, r3
 800c324:	f003 fe9c 	bl	8010060 <SDMMC_CmdBlockLength>
 800c328:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00f      	beq.n	800c350 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a09      	ldr	r2, [pc, #36]	@ (800c35c <HAL_SD_InitCard+0xfc>)
 800c336:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33e:	431a      	orrs	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3728      	adds	r7, #40	@ 0x28
 800c356:	46bd      	mov	sp, r7
 800c358:	bdb0      	pop	{r4, r5, r7, pc}
 800c35a:	bf00      	nop
 800c35c:	004005ff 	.word	0x004005ff

0800c360 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b092      	sub	sp, #72	@ 0x48
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c36e:	f7f9 fc3b 	bl	8005be8 <HAL_GetTick>
 800c372:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d107      	bne.n	800c392 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c386:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e1bd      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	f040 81b0 	bne.w	800c700 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c3a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	441a      	add	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d907      	bls.n	800c3c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e1a4      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2203      	movs	r2, #3
 800c3c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d002      	beq.n	800c3e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3de:	025b      	lsls	r3, r3, #9
 800c3e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	025b      	lsls	r3, r3, #9
 800c3ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3ee:	2390      	movs	r3, #144	@ 0x90
 800c3f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f107 0214 	add.w	r2, r7, #20
 800c406:	4611      	mov	r1, r2
 800c408:	4618      	mov	r0, r3
 800c40a:	f003 fdfd 	bl	8010008 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d90a      	bls.n	800c42a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2202      	movs	r2, #2
 800c418:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c420:	4618      	mov	r0, r3
 800c422:	f003 fe61 	bl	80100e8 <SDMMC_CmdReadMultiBlock>
 800c426:	6478      	str	r0, [r7, #68]	@ 0x44
 800c428:	e009      	b.n	800c43e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2201      	movs	r2, #1
 800c42e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c436:	4618      	mov	r0, r3
 800c438:	f003 fe34 	bl	80100a4 <SDMMC_CmdReadSingleBlock>
 800c43c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c43e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c440:	2b00      	cmp	r3, #0
 800c442:	d012      	beq.n	800c46a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a7a      	ldr	r2, [pc, #488]	@ (800c634 <HAL_SD_ReadBlocks+0x2d4>)
 800c44a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c452:	431a      	orrs	r2, r3
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e151      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c46e:	e061      	b.n	800c534 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d03c      	beq.n	800c4f8 <HAL_SD_ReadBlocks+0x198>
 800c47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d039      	beq.n	800c4f8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c484:	2300      	movs	r3, #0
 800c486:	643b      	str	r3, [r7, #64]	@ 0x40
 800c488:	e033      	b.n	800c4f2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4618      	mov	r0, r3
 800c490:	f003 fd36 	bl	800ff00 <SDMMC_ReadFIFO>
 800c494:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ac:	0a1b      	lsrs	r3, r3, #8
 800c4ae:	b2da      	uxtb	r2, r3
 800c4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c2:	0c1b      	lsrs	r3, r3, #16
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d8:	0e1b      	lsrs	r3, r3, #24
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c4ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f4:	2b07      	cmp	r3, #7
 800c4f6:	d9c8      	bls.n	800c48a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c4f8:	f7f9 fb76 	bl	8005be8 <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c504:	429a      	cmp	r2, r3
 800c506:	d902      	bls.n	800c50e <HAL_SD_ReadBlocks+0x1ae>
 800c508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d112      	bne.n	800c534 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a48      	ldr	r2, [pc, #288]	@ (800c634 <HAL_SD_ReadBlocks+0x2d4>)
 800c514:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c51a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c530:	2303      	movs	r3, #3
 800c532:	e0ec      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c53a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d096      	beq.n	800c470 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d022      	beq.n	800c596 <HAL_SD_ReadBlocks+0x236>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d91f      	bls.n	800c596 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d01b      	beq.n	800c596 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f003 fe26 	bl	80101b4 <SDMMC_CmdStopTransfer>
 800c568:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c56a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d012      	beq.n	800c596 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a2f      	ldr	r2, [pc, #188]	@ (800c634 <HAL_SD_ReadBlocks+0x2d4>)
 800c576:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c57c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c57e:	431a      	orrs	r2, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e0bb      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c59c:	f003 0308 	and.w	r3, r3, #8
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d012      	beq.n	800c5ca <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a22      	ldr	r2, [pc, #136]	@ (800c634 <HAL_SD_ReadBlocks+0x2d4>)
 800c5aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b0:	f043 0208 	orr.w	r2, r3, #8
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e0a1      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5d0:	f003 0302 	and.w	r3, r3, #2
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d012      	beq.n	800c5fe <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a15      	ldr	r2, [pc, #84]	@ (800c634 <HAL_SD_ReadBlocks+0x2d4>)
 800c5de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5e4:	f043 0202 	orr.w	r2, r3, #2
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e087      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c604:	f003 0320 	and.w	r3, r3, #32
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d064      	beq.n	800c6d6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a08      	ldr	r2, [pc, #32]	@ (800c634 <HAL_SD_ReadBlocks+0x2d4>)
 800c612:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c618:	f043 0220 	orr.w	r2, r3, #32
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e06d      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
 800c632:	bf00      	nop
 800c634:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f003 fc5f 	bl	800ff00 <SDMMC_ReadFIFO>
 800c642:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c646:	b2da      	uxtb	r2, r3
 800c648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c64e:	3301      	adds	r3, #1
 800c650:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c654:	3b01      	subs	r3, #1
 800c656:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c660:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c664:	3301      	adds	r3, #1
 800c666:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c66a:	3b01      	subs	r3, #1
 800c66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	0c1b      	lsrs	r3, r3, #16
 800c672:	b2da      	uxtb	r2, r3
 800c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c676:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67a:	3301      	adds	r3, #1
 800c67c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c680:	3b01      	subs	r3, #1
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c686:	0e1b      	lsrs	r3, r3, #24
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c690:	3301      	adds	r3, #1
 800c692:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c696:	3b01      	subs	r3, #1
 800c698:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c69a:	f7f9 faa5 	bl	8005be8 <HAL_GetTick>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d902      	bls.n	800c6b0 <HAL_SD_ReadBlocks+0x350>
 800c6aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d112      	bne.n	800c6d6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a18      	ldr	r2, [pc, #96]	@ (800c718 <HAL_SD_ReadBlocks+0x3b8>)
 800c6b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e01b      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <HAL_SD_ReadBlocks+0x38a>
 800c6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1a6      	bne.n	800c638 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c6f2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e006      	b.n	800c70e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c704:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
  }
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3748      	adds	r7, #72	@ 0x48
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	004005ff 	.word	0x004005ff

0800c71c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b092      	sub	sp, #72	@ 0x48
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c72a:	f7f9 fa5d 	bl	8005be8 <HAL_GetTick>
 800c72e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d107      	bne.n	800c74e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c742:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e165      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b01      	cmp	r3, #1
 800c758:	f040 8158 	bne.w	800ca0c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c762:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	441a      	add	r2, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d907      	bls.n	800c780 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c774:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e14c      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2203      	movs	r2, #3
 800c784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2200      	movs	r2, #0
 800c78e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c794:	2b01      	cmp	r3, #1
 800c796:	d002      	beq.n	800c79e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	025b      	lsls	r3, r3, #9
 800c79c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c79e:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	025b      	lsls	r3, r3, #9
 800c7a8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c7aa:	2390      	movs	r3, #144	@ 0x90
 800c7ac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f107 0218 	add.w	r2, r7, #24
 800c7c2:	4611      	mov	r1, r2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f003 fc1f 	bl	8010008 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d90a      	bls.n	800c7e6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2220      	movs	r2, #32
 800c7d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f003 fcc7 	bl	8010170 <SDMMC_CmdWriteMultiBlock>
 800c7e2:	6478      	str	r0, [r7, #68]	@ 0x44
 800c7e4:	e009      	b.n	800c7fa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2210      	movs	r2, #16
 800c7ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f003 fc9a 	bl	801012c <SDMMC_CmdWriteSingleBlock>
 800c7f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a87      	ldr	r2, [pc, #540]	@ (800ca24 <HAL_SD_WriteBlocks+0x308>)
 800c806:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c80e:	431a      	orrs	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	e0f9      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c82a:	e065      	b.n	800c8f8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d040      	beq.n	800c8bc <HAL_SD_WriteBlocks+0x1a0>
 800c83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d03d      	beq.n	800c8bc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c840:	2300      	movs	r3, #0
 800c842:	643b      	str	r3, [r7, #64]	@ 0x40
 800c844:	e037      	b.n	800c8b6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800c846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c84e:	3301      	adds	r3, #1
 800c850:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c854:	3b01      	subs	r3, #1
 800c856:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	021a      	lsls	r2, r3, #8
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	4313      	orrs	r3, r2
 800c862:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c866:	3301      	adds	r3, #1
 800c868:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c86c:	3b01      	subs	r3, #1
 800c86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	041a      	lsls	r2, r3, #16
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	4313      	orrs	r3, r2
 800c87a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c87e:	3301      	adds	r3, #1
 800c880:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c884:	3b01      	subs	r3, #1
 800c886:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	061a      	lsls	r2, r3, #24
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	4313      	orrs	r3, r2
 800c892:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c896:	3301      	adds	r3, #1
 800c898:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89c:	3b01      	subs	r3, #1
 800c89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f107 0214 	add.w	r2, r7, #20
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f003 fb35 	bl	800ff1a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8b8:	2b07      	cmp	r3, #7
 800c8ba:	d9c4      	bls.n	800c846 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c8bc:	f7f9 f994 	bl	8005be8 <HAL_GetTick>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d902      	bls.n	800c8d2 <HAL_SD_WriteBlocks+0x1b6>
 800c8cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d112      	bne.n	800c8f8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a53      	ldr	r2, [pc, #332]	@ (800ca24 <HAL_SD_WriteBlocks+0x308>)
 800c8d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e0:	431a      	orrs	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	e090      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8fe:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800c902:	2b00      	cmp	r3, #0
 800c904:	d092      	beq.n	800c82c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c90c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c910:	2b00      	cmp	r3, #0
 800c912:	d022      	beq.n	800c95a <HAL_SD_WriteBlocks+0x23e>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d91f      	bls.n	800c95a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d01b      	beq.n	800c95a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f003 fc44 	bl	80101b4 <SDMMC_CmdStopTransfer>
 800c92c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c92e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c930:	2b00      	cmp	r3, #0
 800c932:	d012      	beq.n	800c95a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a3a      	ldr	r2, [pc, #232]	@ (800ca24 <HAL_SD_WriteBlocks+0x308>)
 800c93a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c942:	431a      	orrs	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e05f      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c960:	f003 0308 	and.w	r3, r3, #8
 800c964:	2b00      	cmp	r3, #0
 800c966:	d012      	beq.n	800c98e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a2d      	ldr	r2, [pc, #180]	@ (800ca24 <HAL_SD_WriteBlocks+0x308>)
 800c96e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c974:	f043 0208 	orr.w	r2, r3, #8
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e045      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c994:	f003 0302 	and.w	r3, r3, #2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d012      	beq.n	800c9c2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a20      	ldr	r2, [pc, #128]	@ (800ca24 <HAL_SD_WriteBlocks+0x308>)
 800c9a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	f043 0202 	orr.w	r2, r3, #2
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e02b      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c8:	f003 0310 	and.w	r3, r3, #16
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d012      	beq.n	800c9f6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a13      	ldr	r2, [pc, #76]	@ (800ca24 <HAL_SD_WriteBlocks+0x308>)
 800c9d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9dc:	f043 0210 	orr.w	r2, r3, #16
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e011      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c9fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e006      	b.n	800ca1a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
  }
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3748      	adds	r7, #72	@ 0x48
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	004005ff 	.word	0x004005ff

0800ca28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca36:	0f9b      	lsrs	r3, r3, #30
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca42:	0e9b      	lsrs	r3, r3, #26
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 030f 	and.w	r3, r3, #15
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca54:	0e1b      	lsrs	r3, r3, #24
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca66:	0c1b      	lsrs	r3, r3, #16
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca72:	0a1b      	lsrs	r3, r3, #8
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca88:	0d1b      	lsrs	r3, r3, #20
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca94:	0c1b      	lsrs	r3, r3, #16
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	f003 030f 	and.w	r3, r3, #15
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caa6:	0bdb      	lsrs	r3, r3, #15
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cab8:	0b9b      	lsrs	r3, r3, #14
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caca:	0b5b      	lsrs	r3, r3, #13
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cadc:	0b1b      	lsrs	r3, r3, #12
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2200      	movs	r2, #0
 800caee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d163      	bne.n	800cbc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cafc:	009a      	lsls	r2, r3, #2
 800cafe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cb02:	4013      	ands	r3, r2
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800cb08:	0f92      	lsrs	r2, r2, #30
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb14:	0edb      	lsrs	r3, r3, #27
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	f003 0307 	and.w	r3, r3, #7
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb26:	0e1b      	lsrs	r3, r3, #24
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	f003 0307 	and.w	r3, r3, #7
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb38:	0d5b      	lsrs	r3, r3, #21
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb4a:	0c9b      	lsrs	r3, r3, #18
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f003 0307 	and.w	r3, r3, #7
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb5c:	0bdb      	lsrs	r3, r3, #15
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 0307 	and.w	r3, r3, #7
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	7e1b      	ldrb	r3, [r3, #24]
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	3302      	adds	r3, #2
 800cb80:	2201      	movs	r2, #1
 800cb82:	fa02 f303 	lsl.w	r3, r2, r3
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800cb8a:	fb03 f202 	mul.w	r2, r3, r2
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	7a1b      	ldrb	r3, [r3, #8]
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	f003 030f 	and.w	r3, r3, #15
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	409a      	lsls	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800cbac:	0a52      	lsrs	r2, r2, #9
 800cbae:	fb03 f202 	mul.w	r2, r3, r2
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbbc:	661a      	str	r2, [r3, #96]	@ 0x60
 800cbbe:	e031      	b.n	800cc24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d11d      	bne.n	800cc04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbcc:	041b      	lsls	r3, r3, #16
 800cbce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbd6:	0c1b      	lsrs	r3, r3, #16
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	029a      	lsls	r2, r3, #10
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbf8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	661a      	str	r2, [r3, #96]	@ 0x60
 800cc02:	e00f      	b.n	800cc24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a58      	ldr	r2, [pc, #352]	@ (800cd6c <HAL_SD_GetCardCSD+0x344>)
 800cc0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e09d      	b.n	800cd60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc28:	0b9b      	lsrs	r3, r3, #14
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc3a:	09db      	lsrs	r3, r3, #7
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc42:	b2da      	uxtb	r2, r3
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc5c:	0fdb      	lsrs	r3, r3, #31
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc68:	0f5b      	lsrs	r3, r3, #29
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	f003 0303 	and.w	r3, r3, #3
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc7a:	0e9b      	lsrs	r3, r3, #26
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc8c:	0d9b      	lsrs	r3, r3, #22
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 030f 	and.w	r3, r3, #15
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9e:	0d5b      	lsrs	r3, r3, #21
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	f003 0301 	and.w	r3, r3, #1
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccba:	0c1b      	lsrs	r3, r3, #16
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccce:	0bdb      	lsrs	r3, r3, #15
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cce2:	0b9b      	lsrs	r3, r3, #14
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccf6:	0b5b      	lsrs	r3, r3, #13
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0a:	0b1b      	lsrs	r3, r3, #12
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd1e:	0a9b      	lsrs	r3, r3, #10
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	f003 0303 	and.w	r3, r3, #3
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd32:	0a1b      	lsrs	r3, r3, #8
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd46:	085b      	lsrs	r3, r3, #1
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	004005ff 	.word	0x004005ff

0800cd70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cdd4:	f107 030c 	add.w	r3, r7, #12
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f970 	bl	800d0c0 <SD_SendStatus>
 800cde0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d005      	beq.n	800cdf4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	0a5b      	lsrs	r3, r3, #9
 800cdf8:	f003 030f 	and.w	r3, r3, #15
 800cdfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cdfe:	693b      	ldr	r3, [r7, #16]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3718      	adds	r7, #24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce08:	b5b0      	push	{r4, r5, r7, lr}
 800ce0a:	b094      	sub	sp, #80	@ 0x50
 800ce0c:	af04      	add	r7, sp, #16
 800ce0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ce10:	2301      	movs	r3, #1
 800ce12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f003 f89d 	bl	800ff58 <SDMMC_GetPowerState>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d102      	bne.n	800ce2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ce28:	e0b8      	b.n	800cf9c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d02f      	beq.n	800ce92 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f003 fa84 	bl	8010344 <SDMMC_CmdSendCID>
 800ce3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <SD_InitCard+0x40>
    {
      return errorstate;
 800ce44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce46:	e0a9      	b.n	800cf9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f003 f8c7 	bl	800ffe2 <SDMMC_GetResponse>
 800ce54:	4602      	mov	r2, r0
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2104      	movs	r1, #4
 800ce60:	4618      	mov	r0, r3
 800ce62:	f003 f8be 	bl	800ffe2 <SDMMC_GetResponse>
 800ce66:	4602      	mov	r2, r0
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2108      	movs	r1, #8
 800ce72:	4618      	mov	r0, r3
 800ce74:	f003 f8b5 	bl	800ffe2 <SDMMC_GetResponse>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	210c      	movs	r1, #12
 800ce84:	4618      	mov	r0, r3
 800ce86:	f003 f8ac 	bl	800ffe2 <SDMMC_GetResponse>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d00d      	beq.n	800ceb6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f107 020e 	add.w	r2, r7, #14
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f003 fa8a 	bl	80103be <SDMMC_CmdSetRelAdd>
 800ceaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ceac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d001      	beq.n	800ceb6 <SD_InitCard+0xae>
    {
      return errorstate;
 800ceb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceb4:	e072      	b.n	800cf9c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d036      	beq.n	800cf2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cebe:	89fb      	ldrh	r3, [r7, #14]
 800cec0:	461a      	mov	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cece:	041b      	lsls	r3, r3, #16
 800ced0:	4619      	mov	r1, r3
 800ced2:	4610      	mov	r0, r2
 800ced4:	f003 fa54 	bl	8010380 <SDMMC_CmdSendCSD>
 800ced8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ceda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee2:	e05b      	b.n	800cf9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2100      	movs	r1, #0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f003 f879 	bl	800ffe2 <SDMMC_GetResponse>
 800cef0:	4602      	mov	r2, r0
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2104      	movs	r1, #4
 800cefc:	4618      	mov	r0, r3
 800cefe:	f003 f870 	bl	800ffe2 <SDMMC_GetResponse>
 800cf02:	4602      	mov	r2, r0
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2108      	movs	r1, #8
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f003 f867 	bl	800ffe2 <SDMMC_GetResponse>
 800cf14:	4602      	mov	r2, r0
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	210c      	movs	r1, #12
 800cf20:	4618      	mov	r0, r3
 800cf22:	f003 f85e 	bl	800ffe2 <SDMMC_GetResponse>
 800cf26:	4602      	mov	r2, r0
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2104      	movs	r1, #4
 800cf32:	4618      	mov	r0, r3
 800cf34:	f003 f855 	bl	800ffe2 <SDMMC_GetResponse>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	0d1a      	lsrs	r2, r3, #20
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf40:	f107 0310 	add.w	r3, r7, #16
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff fd6e 	bl	800ca28 <HAL_SD_GetCardCSD>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cf56:	e021      	b.n	800cf9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6819      	ldr	r1, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf60:	041b      	lsls	r3, r3, #16
 800cf62:	2200      	movs	r2, #0
 800cf64:	461c      	mov	r4, r3
 800cf66:	4615      	mov	r5, r2
 800cf68:	4622      	mov	r2, r4
 800cf6a:	462b      	mov	r3, r5
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	f003 f943 	bl	80101f8 <SDMMC_CmdSelDesel>
 800cf72:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d001      	beq.n	800cf7e <SD_InitCard+0x176>
  {
    return errorstate;
 800cf7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf7c:	e00e      	b.n	800cf9c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681d      	ldr	r5, [r3, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	466c      	mov	r4, sp
 800cf86:	f103 0210 	add.w	r2, r3, #16
 800cf8a:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf90:	3304      	adds	r3, #4
 800cf92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf94:	4628      	mov	r0, r5
 800cf96:	f002 ff87 	bl	800fea8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3740      	adds	r7, #64	@ 0x40
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bdb0      	pop	{r4, r5, r7, pc}

0800cfa4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cfac:	2300      	movs	r3, #0
 800cfae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f003 f93e 	bl	801023e <SDMMC_CmdGoIdleState>
 800cfc2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <SD_PowerON+0x2a>
  {
    return errorstate;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	e072      	b.n	800d0b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f003 f951 	bl	801027a <SDMMC_CmdOperCond>
 800cfd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00d      	beq.n	800cffc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f003 f927 	bl	801023e <SDMMC_CmdGoIdleState>
 800cff0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	e05b      	b.n	800d0b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d006:	2b01      	cmp	r3, #1
 800d008:	d137      	bne.n	800d07a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2100      	movs	r1, #0
 800d010:	4618      	mov	r0, r3
 800d012:	f003 f951 	bl	80102b8 <SDMMC_CmdAppCommand>
 800d016:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d02d      	beq.n	800d07a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d01e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d022:	e047      	b.n	800d0b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f003 f944 	bl	80102b8 <SDMMC_CmdAppCommand>
 800d030:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d001      	beq.n	800d03c <SD_PowerON+0x98>
    {
      return errorstate;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	e03b      	b.n	800d0b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	491e      	ldr	r1, [pc, #120]	@ (800d0bc <SD_PowerON+0x118>)
 800d042:	4618      	mov	r0, r3
 800d044:	f003 f95a 	bl	80102fc <SDMMC_CmdAppOperCommand>
 800d048:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d050:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d054:	e02e      	b.n	800d0b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2100      	movs	r1, #0
 800d05c:	4618      	mov	r0, r3
 800d05e:	f002 ffc0 	bl	800ffe2 <SDMMC_GetResponse>
 800d062:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	0fdb      	lsrs	r3, r3, #31
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d101      	bne.n	800d070 <SD_PowerON+0xcc>
 800d06c:	2301      	movs	r3, #1
 800d06e:	e000      	b.n	800d072 <SD_PowerON+0xce>
 800d070:	2300      	movs	r3, #0
 800d072:	613b      	str	r3, [r7, #16]

    count++;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	3301      	adds	r3, #1
 800d078:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d080:	4293      	cmp	r3, r2
 800d082:	d802      	bhi.n	800d08a <SD_PowerON+0xe6>
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0cc      	beq.n	800d024 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d090:	4293      	cmp	r3, r2
 800d092:	d902      	bls.n	800d09a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d098:	e00c      	b.n	800d0b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	645a      	str	r2, [r3, #68]	@ 0x44
 800d0aa:	e002      	b.n	800d0b2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	c1100000 	.word	0xc1100000

0800d0c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d0d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d0d4:	e018      	b.n	800d108 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0de:	041b      	lsls	r3, r3, #16
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f003 f98c 	bl	8010400 <SDMMC_CmdSendStatus>
 800d0e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	e009      	b.n	800d108 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f002 ff71 	bl	800ffe2 <SDMMC_GetResponse>
 800d100:	4602      	mov	r2, r0
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e025      	b.n	800d170 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d106      	bne.n	800d13e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7f7 fd11 	bl	8004b60 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2202      	movs	r2, #2
 800d142:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4619      	mov	r1, r3
 800d150:	4610      	mov	r0, r2
 800d152:	f002 fde3 	bl	800fd1c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	461a      	mov	r2, r3
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	f002 fe37 	bl	800fdd4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2201      	movs	r2, #1
 800d16a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	e04c      	b.n	800d224 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d106      	bne.n	800d1a4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7f7 f964 	bl	800446c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f022 0203 	bic.w	r2, r2, #3
 800d1ba:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4b19      	ldr	r3, [pc, #100]	@ (800d22c <HAL_SPDIFRX_Init+0xb4>)
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d1d4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d1da:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d1e0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d1e6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d1ec:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d1f2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d1f8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800d1fe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800d204:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d206:	68fa      	ldr	r2, [r7, #12]
 800d208:	4313      	orrs	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	fff88407 	.word	0xfff88407

0800d230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d101      	bne.n	800d242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	e09d      	b.n	800d37e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d246:	2b00      	cmp	r3, #0
 800d248:	d108      	bne.n	800d25c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d252:	d009      	beq.n	800d268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	61da      	str	r2, [r3, #28]
 800d25a:	e005      	b.n	800d268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7f7 f956 	bl	8004534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d29e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d2a8:	d902      	bls.n	800d2b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e002      	b.n	800d2b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d2b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d2be:	d007      	beq.n	800d2d0 <HAL_SPI_Init+0xa0>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d2c8:	d002      	beq.n	800d2d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	f003 0302 	and.w	r3, r3, #2
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	695b      	ldr	r3, [r3, #20]
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2fe:	431a      	orrs	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d308:	431a      	orrs	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d312:	ea42 0103 	orr.w	r1, r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d31a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	430a      	orrs	r2, r1
 800d324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	0c1b      	lsrs	r3, r3, #16
 800d32c:	f003 0204 	and.w	r2, r3, #4
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	431a      	orrs	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d33e:	f003 0308 	and.w	r3, r3, #8
 800d342:	431a      	orrs	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d34c:	ea42 0103 	orr.w	r1, r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	69da      	ldr	r2, [r3, #28]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d36c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d101      	bne.n	800d398 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	e049      	b.n	800d42c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d106      	bne.n	800d3b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7f7 f923 	bl	80045f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	f000 fc11 	bl	800dbec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b01      	cmp	r3, #1
 800d446:	d001      	beq.n	800d44c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e054      	b.n	800d4f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68da      	ldr	r2, [r3, #12]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f042 0201 	orr.w	r2, r2, #1
 800d462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a26      	ldr	r2, [pc, #152]	@ (800d504 <HAL_TIM_Base_Start_IT+0xd0>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d022      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d476:	d01d      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a22      	ldr	r2, [pc, #136]	@ (800d508 <HAL_TIM_Base_Start_IT+0xd4>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d018      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a21      	ldr	r2, [pc, #132]	@ (800d50c <HAL_TIM_Base_Start_IT+0xd8>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d013      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a1f      	ldr	r2, [pc, #124]	@ (800d510 <HAL_TIM_Base_Start_IT+0xdc>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d00e      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a1e      	ldr	r2, [pc, #120]	@ (800d514 <HAL_TIM_Base_Start_IT+0xe0>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d009      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d518 <HAL_TIM_Base_Start_IT+0xe4>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d004      	beq.n	800d4b4 <HAL_TIM_Base_Start_IT+0x80>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a1b      	ldr	r2, [pc, #108]	@ (800d51c <HAL_TIM_Base_Start_IT+0xe8>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d115      	bne.n	800d4e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	689a      	ldr	r2, [r3, #8]
 800d4ba:	4b19      	ldr	r3, [pc, #100]	@ (800d520 <HAL_TIM_Base_Start_IT+0xec>)
 800d4bc:	4013      	ands	r3, r2
 800d4be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b06      	cmp	r3, #6
 800d4c4:	d015      	beq.n	800d4f2 <HAL_TIM_Base_Start_IT+0xbe>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4cc:	d011      	beq.n	800d4f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f042 0201 	orr.w	r2, r2, #1
 800d4dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4de:	e008      	b.n	800d4f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f042 0201 	orr.w	r2, r2, #1
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	e000      	b.n	800d4f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	40010000 	.word	0x40010000
 800d508:	40000400 	.word	0x40000400
 800d50c:	40000800 	.word	0x40000800
 800d510:	40000c00 	.word	0x40000c00
 800d514:	40010400 	.word	0x40010400
 800d518:	40014000 	.word	0x40014000
 800d51c:	40001800 	.word	0x40001800
 800d520:	00010007 	.word	0x00010007

0800d524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d101      	bne.n	800d536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	e049      	b.n	800d5ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7f7 f8c2 	bl	80046d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	3304      	adds	r3, #4
 800d560:	4619      	mov	r1, r3
 800d562:	4610      	mov	r0, r2
 800d564:	f000 fb42 	bl	800dbec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	f003 0302 	and.w	r3, r3, #2
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d020      	beq.n	800d636 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f003 0302 	and.w	r3, r3, #2
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d01b      	beq.n	800d636 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f06f 0202 	mvn.w	r2, #2
 800d606:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	f003 0303 	and.w	r3, r3, #3
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 fac7 	bl	800dbb0 <HAL_TIM_IC_CaptureCallback>
 800d622:	e005      	b.n	800d630 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fab9 	bl	800db9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 faca 	bl	800dbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	f003 0304 	and.w	r3, r3, #4
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d020      	beq.n	800d682 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b00      	cmp	r3, #0
 800d648:	d01b      	beq.n	800d682 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f06f 0204 	mvn.w	r2, #4
 800d652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 faa1 	bl	800dbb0 <HAL_TIM_IC_CaptureCallback>
 800d66e:	e005      	b.n	800d67c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fa93 	bl	800db9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 faa4 	bl	800dbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	f003 0308 	and.w	r3, r3, #8
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d020      	beq.n	800d6ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f003 0308 	and.w	r3, r3, #8
 800d692:	2b00      	cmp	r3, #0
 800d694:	d01b      	beq.n	800d6ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f06f 0208 	mvn.w	r2, #8
 800d69e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	69db      	ldr	r3, [r3, #28]
 800d6ac:	f003 0303 	and.w	r3, r3, #3
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fa7b 	bl	800dbb0 <HAL_TIM_IC_CaptureCallback>
 800d6ba:	e005      	b.n	800d6c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fa6d 	bl	800db9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fa7e 	bl	800dbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d020      	beq.n	800d71a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f003 0310 	and.w	r3, r3, #16
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d01b      	beq.n	800d71a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f06f 0210 	mvn.w	r2, #16
 800d6ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2208      	movs	r2, #8
 800d6f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	69db      	ldr	r3, [r3, #28]
 800d6f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d003      	beq.n	800d708 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fa55 	bl	800dbb0 <HAL_TIM_IC_CaptureCallback>
 800d706:	e005      	b.n	800d714 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fa47 	bl	800db9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 fa58 	bl	800dbc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	f003 0301 	and.w	r3, r3, #1
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00c      	beq.n	800d73e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d007      	beq.n	800d73e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f06f 0201 	mvn.w	r2, #1
 800d736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7f6 f965 	bl	8003a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d744:	2b00      	cmp	r3, #0
 800d746:	d104      	bne.n	800d752 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00c      	beq.n	800d76c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d007      	beq.n	800d76c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fef4 	bl	800e554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00c      	beq.n	800d790 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 feec 	bl	800e568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00c      	beq.n	800d7b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d007      	beq.n	800d7b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d7ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fa12 	bl	800dbd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00c      	beq.n	800d7d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f003 0320 	and.w	r3, r3, #32
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d007      	beq.n	800d7d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f06f 0220 	mvn.w	r2, #32
 800d7d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 feb4 	bl	800e540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7d8:	bf00      	nop
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d101      	bne.n	800d7fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	e0ff      	b.n	800d9fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b14      	cmp	r3, #20
 800d80a:	f200 80f0 	bhi.w	800d9ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d80e:	a201      	add	r2, pc, #4	@ (adr r2, 800d814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d814:	0800d869 	.word	0x0800d869
 800d818:	0800d9ef 	.word	0x0800d9ef
 800d81c:	0800d9ef 	.word	0x0800d9ef
 800d820:	0800d9ef 	.word	0x0800d9ef
 800d824:	0800d8a9 	.word	0x0800d8a9
 800d828:	0800d9ef 	.word	0x0800d9ef
 800d82c:	0800d9ef 	.word	0x0800d9ef
 800d830:	0800d9ef 	.word	0x0800d9ef
 800d834:	0800d8eb 	.word	0x0800d8eb
 800d838:	0800d9ef 	.word	0x0800d9ef
 800d83c:	0800d9ef 	.word	0x0800d9ef
 800d840:	0800d9ef 	.word	0x0800d9ef
 800d844:	0800d92b 	.word	0x0800d92b
 800d848:	0800d9ef 	.word	0x0800d9ef
 800d84c:	0800d9ef 	.word	0x0800d9ef
 800d850:	0800d9ef 	.word	0x0800d9ef
 800d854:	0800d96d 	.word	0x0800d96d
 800d858:	0800d9ef 	.word	0x0800d9ef
 800d85c:	0800d9ef 	.word	0x0800d9ef
 800d860:	0800d9ef 	.word	0x0800d9ef
 800d864:	0800d9ad 	.word	0x0800d9ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68b9      	ldr	r1, [r7, #8]
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fa62 	bl	800dd38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	699a      	ldr	r2, [r3, #24]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f042 0208 	orr.w	r2, r2, #8
 800d882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	699a      	ldr	r2, [r3, #24]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f022 0204 	bic.w	r2, r2, #4
 800d892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	6999      	ldr	r1, [r3, #24]
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	691a      	ldr	r2, [r3, #16]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	619a      	str	r2, [r3, #24]
      break;
 800d8a6:	e0a5      	b.n	800d9f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68b9      	ldr	r1, [r7, #8]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fab4 	bl	800de1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	699a      	ldr	r2, [r3, #24]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	699a      	ldr	r2, [r3, #24]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d8d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6999      	ldr	r1, [r3, #24]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	691b      	ldr	r3, [r3, #16]
 800d8de:	021a      	lsls	r2, r3, #8
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	430a      	orrs	r2, r1
 800d8e6:	619a      	str	r2, [r3, #24]
      break;
 800d8e8:	e084      	b.n	800d9f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68b9      	ldr	r1, [r7, #8]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 fb0b 	bl	800df0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	69da      	ldr	r2, [r3, #28]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f042 0208 	orr.w	r2, r2, #8
 800d904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	69da      	ldr	r2, [r3, #28]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f022 0204 	bic.w	r2, r2, #4
 800d914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	69d9      	ldr	r1, [r3, #28]
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	691a      	ldr	r2, [r3, #16]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	430a      	orrs	r2, r1
 800d926:	61da      	str	r2, [r3, #28]
      break;
 800d928:	e064      	b.n	800d9f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68b9      	ldr	r1, [r7, #8]
 800d930:	4618      	mov	r0, r3
 800d932:	f000 fb61 	bl	800dff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	69da      	ldr	r2, [r3, #28]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	69da      	ldr	r2, [r3, #28]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	69d9      	ldr	r1, [r3, #28]
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	691b      	ldr	r3, [r3, #16]
 800d960:	021a      	lsls	r2, r3, #8
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	430a      	orrs	r2, r1
 800d968:	61da      	str	r2, [r3, #28]
      break;
 800d96a:	e043      	b.n	800d9f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	4618      	mov	r0, r3
 800d974:	f000 fb98 	bl	800e0a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f042 0208 	orr.w	r2, r2, #8
 800d986:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f022 0204 	bic.w	r2, r2, #4
 800d996:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	691a      	ldr	r2, [r3, #16]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	430a      	orrs	r2, r1
 800d9a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9aa:	e023      	b.n	800d9f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68b9      	ldr	r1, [r7, #8]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 fbca 	bl	800e14c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	021a      	lsls	r2, r3, #8
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	430a      	orrs	r2, r1
 800d9ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d9ec:	e002      	b.n	800d9f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	75fb      	strb	r3, [r7, #23]
      break;
 800d9f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop

0800da08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d101      	bne.n	800da24 <HAL_TIM_ConfigClockSource+0x1c>
 800da20:	2302      	movs	r3, #2
 800da22:	e0b4      	b.n	800db8e <HAL_TIM_ConfigClockSource+0x186>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	4b56      	ldr	r3, [pc, #344]	@ (800db98 <HAL_TIM_ConfigClockSource+0x190>)
 800da40:	4013      	ands	r3, r2
 800da42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da5c:	d03e      	beq.n	800dadc <HAL_TIM_ConfigClockSource+0xd4>
 800da5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da62:	f200 8087 	bhi.w	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da6a:	f000 8086 	beq.w	800db7a <HAL_TIM_ConfigClockSource+0x172>
 800da6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da72:	d87f      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da74:	2b70      	cmp	r3, #112	@ 0x70
 800da76:	d01a      	beq.n	800daae <HAL_TIM_ConfigClockSource+0xa6>
 800da78:	2b70      	cmp	r3, #112	@ 0x70
 800da7a:	d87b      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da7c:	2b60      	cmp	r3, #96	@ 0x60
 800da7e:	d050      	beq.n	800db22 <HAL_TIM_ConfigClockSource+0x11a>
 800da80:	2b60      	cmp	r3, #96	@ 0x60
 800da82:	d877      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da84:	2b50      	cmp	r3, #80	@ 0x50
 800da86:	d03c      	beq.n	800db02 <HAL_TIM_ConfigClockSource+0xfa>
 800da88:	2b50      	cmp	r3, #80	@ 0x50
 800da8a:	d873      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da8c:	2b40      	cmp	r3, #64	@ 0x40
 800da8e:	d058      	beq.n	800db42 <HAL_TIM_ConfigClockSource+0x13a>
 800da90:	2b40      	cmp	r3, #64	@ 0x40
 800da92:	d86f      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da94:	2b30      	cmp	r3, #48	@ 0x30
 800da96:	d064      	beq.n	800db62 <HAL_TIM_ConfigClockSource+0x15a>
 800da98:	2b30      	cmp	r3, #48	@ 0x30
 800da9a:	d86b      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800da9c:	2b20      	cmp	r3, #32
 800da9e:	d060      	beq.n	800db62 <HAL_TIM_ConfigClockSource+0x15a>
 800daa0:	2b20      	cmp	r3, #32
 800daa2:	d867      	bhi.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d05c      	beq.n	800db62 <HAL_TIM_ConfigClockSource+0x15a>
 800daa8:	2b10      	cmp	r3, #16
 800daaa:	d05a      	beq.n	800db62 <HAL_TIM_ConfigClockSource+0x15a>
 800daac:	e062      	b.n	800db74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dabe:	f000 fc13 	bl	800e2e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	609a      	str	r2, [r3, #8]
      break;
 800dada:	e04f      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800daec:	f000 fbfc 	bl	800e2e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689a      	ldr	r2, [r3, #8]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dafe:	609a      	str	r2, [r3, #8]
      break;
 800db00:	e03c      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db0e:	461a      	mov	r2, r3
 800db10:	f000 fb70 	bl	800e1f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2150      	movs	r1, #80	@ 0x50
 800db1a:	4618      	mov	r0, r3
 800db1c:	f000 fbc9 	bl	800e2b2 <TIM_ITRx_SetConfig>
      break;
 800db20:	e02c      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db2e:	461a      	mov	r2, r3
 800db30:	f000 fb8f 	bl	800e252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2160      	movs	r1, #96	@ 0x60
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 fbb9 	bl	800e2b2 <TIM_ITRx_SetConfig>
      break;
 800db40:	e01c      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db4e:	461a      	mov	r2, r3
 800db50:	f000 fb50 	bl	800e1f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2140      	movs	r1, #64	@ 0x40
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 fba9 	bl	800e2b2 <TIM_ITRx_SetConfig>
      break;
 800db60:	e00c      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4619      	mov	r1, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f000 fba0 	bl	800e2b2 <TIM_ITRx_SetConfig>
      break;
 800db72:	e003      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800db74:	2301      	movs	r3, #1
 800db76:	73fb      	strb	r3, [r7, #15]
      break;
 800db78:	e000      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800db7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	fffeff88 	.word	0xfffeff88

0800db9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a43      	ldr	r2, [pc, #268]	@ (800dd0c <TIM_Base_SetConfig+0x120>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d013      	beq.n	800dc2c <TIM_Base_SetConfig+0x40>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc0a:	d00f      	beq.n	800dc2c <TIM_Base_SetConfig+0x40>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a40      	ldr	r2, [pc, #256]	@ (800dd10 <TIM_Base_SetConfig+0x124>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d00b      	beq.n	800dc2c <TIM_Base_SetConfig+0x40>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a3f      	ldr	r2, [pc, #252]	@ (800dd14 <TIM_Base_SetConfig+0x128>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d007      	beq.n	800dc2c <TIM_Base_SetConfig+0x40>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a3e      	ldr	r2, [pc, #248]	@ (800dd18 <TIM_Base_SetConfig+0x12c>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d003      	beq.n	800dc2c <TIM_Base_SetConfig+0x40>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a3d      	ldr	r2, [pc, #244]	@ (800dd1c <TIM_Base_SetConfig+0x130>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d108      	bne.n	800dc3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a32      	ldr	r2, [pc, #200]	@ (800dd0c <TIM_Base_SetConfig+0x120>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d02b      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc4c:	d027      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4a2f      	ldr	r2, [pc, #188]	@ (800dd10 <TIM_Base_SetConfig+0x124>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d023      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4a2e      	ldr	r2, [pc, #184]	@ (800dd14 <TIM_Base_SetConfig+0x128>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d01f      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4a2d      	ldr	r2, [pc, #180]	@ (800dd18 <TIM_Base_SetConfig+0x12c>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d01b      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	4a2c      	ldr	r2, [pc, #176]	@ (800dd1c <TIM_Base_SetConfig+0x130>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d017      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4a2b      	ldr	r2, [pc, #172]	@ (800dd20 <TIM_Base_SetConfig+0x134>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d013      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4a2a      	ldr	r2, [pc, #168]	@ (800dd24 <TIM_Base_SetConfig+0x138>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d00f      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a29      	ldr	r2, [pc, #164]	@ (800dd28 <TIM_Base_SetConfig+0x13c>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d00b      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a28      	ldr	r2, [pc, #160]	@ (800dd2c <TIM_Base_SetConfig+0x140>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d007      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a27      	ldr	r2, [pc, #156]	@ (800dd30 <TIM_Base_SetConfig+0x144>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d003      	beq.n	800dc9e <TIM_Base_SetConfig+0xb2>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a26      	ldr	r2, [pc, #152]	@ (800dd34 <TIM_Base_SetConfig+0x148>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d108      	bne.n	800dcb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	689a      	ldr	r2, [r3, #8]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a0e      	ldr	r2, [pc, #56]	@ (800dd0c <TIM_Base_SetConfig+0x120>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d003      	beq.n	800dcde <TIM_Base_SetConfig+0xf2>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a10      	ldr	r2, [pc, #64]	@ (800dd1c <TIM_Base_SetConfig+0x130>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d103      	bne.n	800dce6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	691a      	ldr	r2, [r3, #16]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f043 0204 	orr.w	r2, r3, #4
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	601a      	str	r2, [r3, #0]
}
 800dcfe:	bf00      	nop
 800dd00:	3714      	adds	r7, #20
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	40010000 	.word	0x40010000
 800dd10:	40000400 	.word	0x40000400
 800dd14:	40000800 	.word	0x40000800
 800dd18:	40000c00 	.word	0x40000c00
 800dd1c:	40010400 	.word	0x40010400
 800dd20:	40014000 	.word	0x40014000
 800dd24:	40014400 	.word	0x40014400
 800dd28:	40014800 	.word	0x40014800
 800dd2c:	40001800 	.word	0x40001800
 800dd30:	40001c00 	.word	0x40001c00
 800dd34:	40002000 	.word	0x40002000

0800dd38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a1b      	ldr	r3, [r3, #32]
 800dd4c:	f023 0201 	bic.w	r2, r3, #1
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4b2b      	ldr	r3, [pc, #172]	@ (800de10 <TIM_OC1_SetConfig+0xd8>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	f023 0302 	bic.w	r3, r3, #2
 800dd80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4a21      	ldr	r2, [pc, #132]	@ (800de14 <TIM_OC1_SetConfig+0xdc>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d003      	beq.n	800dd9c <TIM_OC1_SetConfig+0x64>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a20      	ldr	r2, [pc, #128]	@ (800de18 <TIM_OC1_SetConfig+0xe0>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d10c      	bne.n	800ddb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f023 0308 	bic.w	r3, r3, #8
 800dda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	697a      	ldr	r2, [r7, #20]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f023 0304 	bic.w	r3, r3, #4
 800ddb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a16      	ldr	r2, [pc, #88]	@ (800de14 <TIM_OC1_SetConfig+0xdc>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d003      	beq.n	800ddc6 <TIM_OC1_SetConfig+0x8e>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a15      	ldr	r2, [pc, #84]	@ (800de18 <TIM_OC1_SetConfig+0xe0>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d111      	bne.n	800ddea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ddd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	4313      	orrs	r3, r2
 800ddde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	621a      	str	r2, [r3, #32]
}
 800de04:	bf00      	nop
 800de06:	371c      	adds	r7, #28
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	fffeff8f 	.word	0xfffeff8f
 800de14:	40010000 	.word	0x40010000
 800de18:	40010400 	.word	0x40010400

0800de1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b087      	sub	sp, #28
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a1b      	ldr	r3, [r3, #32]
 800de30:	f023 0210 	bic.w	r2, r3, #16
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	699b      	ldr	r3, [r3, #24]
 800de42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	4b2e      	ldr	r3, [pc, #184]	@ (800df00 <TIM_OC2_SetConfig+0xe4>)
 800de48:	4013      	ands	r3, r2
 800de4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	021b      	lsls	r3, r3, #8
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f023 0320 	bic.w	r3, r3, #32
 800de66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	011b      	lsls	r3, r3, #4
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	4313      	orrs	r3, r2
 800de72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4a23      	ldr	r2, [pc, #140]	@ (800df04 <TIM_OC2_SetConfig+0xe8>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d003      	beq.n	800de84 <TIM_OC2_SetConfig+0x68>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a22      	ldr	r2, [pc, #136]	@ (800df08 <TIM_OC2_SetConfig+0xec>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d10d      	bne.n	800dea0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	011b      	lsls	r3, r3, #4
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	4313      	orrs	r3, r2
 800de96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a18      	ldr	r2, [pc, #96]	@ (800df04 <TIM_OC2_SetConfig+0xe8>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d003      	beq.n	800deb0 <TIM_OC2_SetConfig+0x94>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a17      	ldr	r2, [pc, #92]	@ (800df08 <TIM_OC2_SetConfig+0xec>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d113      	bne.n	800ded8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800deb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800debe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	695b      	ldr	r3, [r3, #20]
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	4313      	orrs	r3, r2
 800deca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	699b      	ldr	r3, [r3, #24]
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	693a      	ldr	r2, [r7, #16]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	693a      	ldr	r2, [r7, #16]
 800dedc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	621a      	str	r2, [r3, #32]
}
 800def2:	bf00      	nop
 800def4:	371c      	adds	r7, #28
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	feff8fff 	.word	0xfeff8fff
 800df04:	40010000 	.word	0x40010000
 800df08:	40010400 	.word	0x40010400

0800df0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a1b      	ldr	r3, [r3, #32]
 800df1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6a1b      	ldr	r3, [r3, #32]
 800df20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	69db      	ldr	r3, [r3, #28]
 800df32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	4b2d      	ldr	r3, [pc, #180]	@ (800dfec <TIM_OC3_SetConfig+0xe0>)
 800df38:	4013      	ands	r3, r2
 800df3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f023 0303 	bic.w	r3, r3, #3
 800df42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800df54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	021b      	lsls	r3, r3, #8
 800df5c:	697a      	ldr	r2, [r7, #20]
 800df5e:	4313      	orrs	r3, r2
 800df60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4a22      	ldr	r2, [pc, #136]	@ (800dff0 <TIM_OC3_SetConfig+0xe4>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d003      	beq.n	800df72 <TIM_OC3_SetConfig+0x66>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4a21      	ldr	r2, [pc, #132]	@ (800dff4 <TIM_OC3_SetConfig+0xe8>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d10d      	bne.n	800df8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	697a      	ldr	r2, [r7, #20]
 800df82:	4313      	orrs	r3, r2
 800df84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4a17      	ldr	r2, [pc, #92]	@ (800dff0 <TIM_OC3_SetConfig+0xe4>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d003      	beq.n	800df9e <TIM_OC3_SetConfig+0x92>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4a16      	ldr	r2, [pc, #88]	@ (800dff4 <TIM_OC3_SetConfig+0xe8>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d113      	bne.n	800dfc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dfa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dfac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	011b      	lsls	r3, r3, #4
 800dfb4:	693a      	ldr	r2, [r7, #16]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	011b      	lsls	r3, r3, #4
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	621a      	str	r2, [r3, #32]
}
 800dfe0:	bf00      	nop
 800dfe2:	371c      	adds	r7, #28
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	fffeff8f 	.word	0xfffeff8f
 800dff0:	40010000 	.word	0x40010000
 800dff4:	40010400 	.word	0x40010400

0800dff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b087      	sub	sp, #28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a1b      	ldr	r3, [r3, #32]
 800e00c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	69db      	ldr	r3, [r3, #28]
 800e01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	4b1e      	ldr	r3, [pc, #120]	@ (800e09c <TIM_OC4_SetConfig+0xa4>)
 800e024:	4013      	ands	r3, r2
 800e026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	021b      	lsls	r3, r3, #8
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	4313      	orrs	r3, r2
 800e03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	031b      	lsls	r3, r3, #12
 800e04a:	693a      	ldr	r2, [r7, #16]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a13      	ldr	r2, [pc, #76]	@ (800e0a0 <TIM_OC4_SetConfig+0xa8>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d003      	beq.n	800e060 <TIM_OC4_SetConfig+0x68>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a12      	ldr	r2, [pc, #72]	@ (800e0a4 <TIM_OC4_SetConfig+0xac>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d109      	bne.n	800e074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	019b      	lsls	r3, r3, #6
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	4313      	orrs	r3, r2
 800e072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	68fa      	ldr	r2, [r7, #12]
 800e07e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	693a      	ldr	r2, [r7, #16]
 800e08c:	621a      	str	r2, [r3, #32]
}
 800e08e:	bf00      	nop
 800e090:	371c      	adds	r7, #28
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	feff8fff 	.word	0xfeff8fff
 800e0a0:	40010000 	.word	0x40010000
 800e0a4:	40010400 	.word	0x40010400

0800e0a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b087      	sub	sp, #28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a1b      	ldr	r3, [r3, #32]
 800e0bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e140 <TIM_OC5_SetConfig+0x98>)
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e0e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	041b      	lsls	r3, r3, #16
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4a12      	ldr	r2, [pc, #72]	@ (800e144 <TIM_OC5_SetConfig+0x9c>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d003      	beq.n	800e106 <TIM_OC5_SetConfig+0x5e>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4a11      	ldr	r2, [pc, #68]	@ (800e148 <TIM_OC5_SetConfig+0xa0>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d109      	bne.n	800e11a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e10c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	695b      	ldr	r3, [r3, #20]
 800e112:	021b      	lsls	r3, r3, #8
 800e114:	697a      	ldr	r2, [r7, #20]
 800e116:	4313      	orrs	r3, r2
 800e118:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	697a      	ldr	r2, [r7, #20]
 800e11e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	685a      	ldr	r2, [r3, #4]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	693a      	ldr	r2, [r7, #16]
 800e132:	621a      	str	r2, [r3, #32]
}
 800e134:	bf00      	nop
 800e136:	371c      	adds	r7, #28
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	fffeff8f 	.word	0xfffeff8f
 800e144:	40010000 	.word	0x40010000
 800e148:	40010400 	.word	0x40010400

0800e14c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b087      	sub	sp, #28
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6a1b      	ldr	r3, [r3, #32]
 800e15a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	4b1c      	ldr	r3, [pc, #112]	@ (800e1e8 <TIM_OC6_SetConfig+0x9c>)
 800e178:	4013      	ands	r3, r2
 800e17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	021b      	lsls	r3, r3, #8
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	4313      	orrs	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e18e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	689b      	ldr	r3, [r3, #8]
 800e194:	051b      	lsls	r3, r3, #20
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	4313      	orrs	r3, r2
 800e19a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a13      	ldr	r2, [pc, #76]	@ (800e1ec <TIM_OC6_SetConfig+0xa0>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d003      	beq.n	800e1ac <TIM_OC6_SetConfig+0x60>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a12      	ldr	r2, [pc, #72]	@ (800e1f0 <TIM_OC6_SetConfig+0xa4>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d109      	bne.n	800e1c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	029b      	lsls	r3, r3, #10
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	685a      	ldr	r2, [r3, #4]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	693a      	ldr	r2, [r7, #16]
 800e1d8:	621a      	str	r2, [r3, #32]
}
 800e1da:	bf00      	nop
 800e1dc:	371c      	adds	r7, #28
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	feff8fff 	.word	0xfeff8fff
 800e1ec:	40010000 	.word	0x40010000
 800e1f0:	40010400 	.word	0x40010400

0800e1f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b087      	sub	sp, #28
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6a1b      	ldr	r3, [r3, #32]
 800e204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	6a1b      	ldr	r3, [r3, #32]
 800e20a:	f023 0201 	bic.w	r2, r3, #1
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e21e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	011b      	lsls	r3, r3, #4
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	4313      	orrs	r3, r2
 800e228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	f023 030a 	bic.w	r3, r3, #10
 800e230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e232:	697a      	ldr	r2, [r7, #20]
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	4313      	orrs	r3, r2
 800e238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	621a      	str	r2, [r3, #32]
}
 800e246:	bf00      	nop
 800e248:	371c      	adds	r7, #28
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e252:	b480      	push	{r7}
 800e254:	b087      	sub	sp, #28
 800e256:	af00      	add	r7, sp, #0
 800e258:	60f8      	str	r0, [r7, #12]
 800e25a:	60b9      	str	r1, [r7, #8]
 800e25c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6a1b      	ldr	r3, [r3, #32]
 800e262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6a1b      	ldr	r3, [r3, #32]
 800e268:	f023 0210 	bic.w	r2, r3, #16
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	699b      	ldr	r3, [r3, #24]
 800e274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e27c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	031b      	lsls	r3, r3, #12
 800e282:	693a      	ldr	r2, [r7, #16]
 800e284:	4313      	orrs	r3, r2
 800e286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e28e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	697a      	ldr	r2, [r7, #20]
 800e296:	4313      	orrs	r3, r2
 800e298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	621a      	str	r2, [r3, #32]
}
 800e2a6:	bf00      	nop
 800e2a8:	371c      	adds	r7, #28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e2b2:	b480      	push	{r7}
 800e2b4:	b085      	sub	sp, #20
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	f043 0307 	orr.w	r3, r3, #7
 800e2d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	609a      	str	r2, [r3, #8]
}
 800e2dc:	bf00      	nop
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b087      	sub	sp, #28
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	021a      	lsls	r2, r3, #8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	431a      	orrs	r2, r3
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	4313      	orrs	r3, r2
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	4313      	orrs	r3, r2
 800e314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	609a      	str	r2, [r3, #8]
}
 800e31c:	bf00      	nop
 800e31e:	371c      	adds	r7, #28
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d101      	bne.n	800e340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e33c:	2302      	movs	r3, #2
 800e33e:	e06d      	b.n	800e41c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a30      	ldr	r2, [pc, #192]	@ (800e428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d004      	beq.n	800e374 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a2f      	ldr	r2, [pc, #188]	@ (800e42c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d108      	bne.n	800e386 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e37a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	4313      	orrs	r3, r2
 800e384:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e38c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	4313      	orrs	r3, r2
 800e396:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a20      	ldr	r2, [pc, #128]	@ (800e428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d022      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3b2:	d01d      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a1d      	ldr	r2, [pc, #116]	@ (800e430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d018      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a1c      	ldr	r2, [pc, #112]	@ (800e434 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d013      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d00e      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a15      	ldr	r2, [pc, #84]	@ (800e42c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d009      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a16      	ldr	r2, [pc, #88]	@ (800e43c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d004      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a15      	ldr	r2, [pc, #84]	@ (800e440 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d10c      	bne.n	800e40a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	40010000 	.word	0x40010000
 800e42c:	40010400 	.word	0x40010400
 800e430:	40000400 	.word	0x40000400
 800e434:	40000800 	.word	0x40000800
 800e438:	40000c00 	.word	0x40000c00
 800e43c:	40014000 	.word	0x40014000
 800e440:	40001800 	.word	0x40001800

0800e444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e44e:	2300      	movs	r3, #0
 800e450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d101      	bne.n	800e460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e45c:	2302      	movs	r3, #2
 800e45e:	e065      	b.n	800e52c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2201      	movs	r2, #1
 800e464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	4313      	orrs	r3, r2
 800e474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	4313      	orrs	r3, r2
 800e482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	4313      	orrs	r3, r2
 800e490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	699b      	ldr	r3, [r3, #24]
 800e4d4:	041b      	lsls	r3, r3, #16
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a16      	ldr	r2, [pc, #88]	@ (800e538 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d004      	beq.n	800e4ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a14      	ldr	r2, [pc, #80]	@ (800e53c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d115      	bne.n	800e51a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f8:	051b      	lsls	r3, r3, #20
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	69db      	ldr	r3, [r3, #28]
 800e508:	4313      	orrs	r3, r2
 800e50a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	4313      	orrs	r3, r2
 800e518:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3714      	adds	r7, #20
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	40010000 	.word	0x40010000
 800e53c:	40010400 	.word	0x40010400

0800e540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e570:	bf00      	nop
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e040      	b.n	800e610 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7f6 f986 	bl	80048b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2224      	movs	r2, #36	@ 0x24
 800e5a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f022 0201 	bic.w	r2, r2, #1
 800e5b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 ffb6 	bl	800f534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 fd4f 	bl	800f06c <UART_SetConfig>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d101      	bne.n	800e5d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e01b      	b.n	800e610 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e5e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689a      	ldr	r2, [r3, #8]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f042 0201 	orr.w	r2, r2, #1
 800e606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f001 f835 	bl	800f678 <UART_CheckIdleState>
 800e60e:	4603      	mov	r3, r0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08a      	sub	sp, #40	@ 0x28
 800e61c:	af02      	add	r7, sp, #8
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	603b      	str	r3, [r7, #0]
 800e624:	4613      	mov	r3, r2
 800e626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e62c:	2b20      	cmp	r3, #32
 800e62e:	d177      	bne.n	800e720 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <HAL_UART_Transmit+0x24>
 800e636:	88fb      	ldrh	r3, [r7, #6]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e070      	b.n	800e722 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2221      	movs	r2, #33	@ 0x21
 800e64c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e64e:	f7f7 facb 	bl	8005be8 <HAL_GetTick>
 800e652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	88fa      	ldrh	r2, [r7, #6]
 800e658:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	88fa      	ldrh	r2, [r7, #6]
 800e660:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e66c:	d108      	bne.n	800e680 <HAL_UART_Transmit+0x68>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	691b      	ldr	r3, [r3, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d104      	bne.n	800e680 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e676:	2300      	movs	r3, #0
 800e678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	61bb      	str	r3, [r7, #24]
 800e67e:	e003      	b.n	800e688 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e684:	2300      	movs	r3, #0
 800e686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e688:	e02f      	b.n	800e6ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2200      	movs	r2, #0
 800e692:	2180      	movs	r1, #128	@ 0x80
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f001 f846 	bl	800f726 <UART_WaitOnFlagUntilTimeout>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2220      	movs	r2, #32
 800e6a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e03b      	b.n	800e722 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10b      	bne.n	800e6c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	881b      	ldrh	r3, [r3, #0]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e6be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	3302      	adds	r3, #2
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	e007      	b.n	800e6d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	781a      	ldrb	r2, [r3, #0]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1c9      	bne.n	800e68a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2140      	movs	r1, #64	@ 0x40
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f001 f810 	bl	800f726 <UART_WaitOnFlagUntilTimeout>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d004      	beq.n	800e716 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2220      	movs	r2, #32
 800e710:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e712:	2303      	movs	r3, #3
 800e714:	e005      	b.n	800e722 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2220      	movs	r2, #32
 800e71a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	e000      	b.n	800e722 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e720:	2302      	movs	r3, #2
  }
}
 800e722:	4618      	mov	r0, r3
 800e724:	3720      	adds	r7, #32
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b08a      	sub	sp, #40	@ 0x28
 800e72e:	af02      	add	r7, sp, #8
 800e730:	60f8      	str	r0, [r7, #12]
 800e732:	60b9      	str	r1, [r7, #8]
 800e734:	603b      	str	r3, [r7, #0]
 800e736:	4613      	mov	r3, r2
 800e738:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e740:	2b20      	cmp	r3, #32
 800e742:	f040 80b5 	bne.w	800e8b0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d002      	beq.n	800e752 <HAL_UART_Receive+0x28>
 800e74c:	88fb      	ldrh	r3, [r7, #6]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e0ad      	b.n	800e8b2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2200      	movs	r2, #0
 800e75a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2222      	movs	r2, #34	@ 0x22
 800e762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e76c:	f7f7 fa3c 	bl	8005be8 <HAL_GetTick>
 800e770:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	88fa      	ldrh	r2, [r7, #6]
 800e776:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	88fa      	ldrh	r2, [r7, #6]
 800e77e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e78a:	d10e      	bne.n	800e7aa <HAL_UART_Receive+0x80>
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d105      	bne.n	800e7a0 <HAL_UART_Receive+0x76>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e79a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e79e:	e02d      	b.n	800e7fc <HAL_UART_Receive+0xd2>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	22ff      	movs	r2, #255	@ 0xff
 800e7a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7a8:	e028      	b.n	800e7fc <HAL_UART_Receive+0xd2>
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10d      	bne.n	800e7ce <HAL_UART_Receive+0xa4>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	691b      	ldr	r3, [r3, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d104      	bne.n	800e7c4 <HAL_UART_Receive+0x9a>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	22ff      	movs	r2, #255	@ 0xff
 800e7be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7c2:	e01b      	b.n	800e7fc <HAL_UART_Receive+0xd2>
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	227f      	movs	r2, #127	@ 0x7f
 800e7c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7cc:	e016      	b.n	800e7fc <HAL_UART_Receive+0xd2>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7d6:	d10d      	bne.n	800e7f4 <HAL_UART_Receive+0xca>
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d104      	bne.n	800e7ea <HAL_UART_Receive+0xc0>
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	227f      	movs	r2, #127	@ 0x7f
 800e7e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7e8:	e008      	b.n	800e7fc <HAL_UART_Receive+0xd2>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	223f      	movs	r2, #63	@ 0x3f
 800e7ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e7f2:	e003      	b.n	800e7fc <HAL_UART_Receive+0xd2>
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e802:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e80c:	d108      	bne.n	800e820 <HAL_UART_Receive+0xf6>
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d104      	bne.n	800e820 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	61bb      	str	r3, [r7, #24]
 800e81e:	e003      	b.n	800e828 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e824:	2300      	movs	r3, #0
 800e826:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e828:	e036      	b.n	800e898 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2200      	movs	r2, #0
 800e832:	2120      	movs	r1, #32
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f000 ff76 	bl	800f726 <UART_WaitOnFlagUntilTimeout>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d005      	beq.n	800e84c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2220      	movs	r2, #32
 800e844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e848:	2303      	movs	r3, #3
 800e84a:	e032      	b.n	800e8b2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10c      	bne.n	800e86c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e858:	b29a      	uxth	r2, r3
 800e85a:	8a7b      	ldrh	r3, [r7, #18]
 800e85c:	4013      	ands	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	3302      	adds	r3, #2
 800e868:	61bb      	str	r3, [r7, #24]
 800e86a:	e00c      	b.n	800e886 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e872:	b2da      	uxtb	r2, r3
 800e874:	8a7b      	ldrh	r3, [r7, #18]
 800e876:	b2db      	uxtb	r3, r3
 800e878:	4013      	ands	r3, r2
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	3301      	adds	r3, #1
 800e884:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	3b01      	subs	r3, #1
 800e890:	b29a      	uxth	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1c2      	bne.n	800e82a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2220      	movs	r2, #32
 800e8a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	e000      	b.n	800e8b2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e8b0:	2302      	movs	r3, #2
  }
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3720      	adds	r7, #32
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b08a      	sub	sp, #40	@ 0x28
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ce:	2b20      	cmp	r3, #32
 800e8d0:	d132      	bne.n	800e938 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d002      	beq.n	800e8de <HAL_UART_Receive_DMA+0x24>
 800e8d8:	88fb      	ldrh	r3, [r7, #6]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e02b      	b.n	800e93a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d018      	beq.n	800e928 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	e853 3f00 	ldrex	r3, [r3]
 800e902:	613b      	str	r3, [r7, #16]
   return(result);
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e90a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	461a      	mov	r2, r3
 800e912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e914:	623b      	str	r3, [r7, #32]
 800e916:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	69f9      	ldr	r1, [r7, #28]
 800e91a:	6a3a      	ldr	r2, [r7, #32]
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	61bb      	str	r3, [r7, #24]
   return(result);
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e6      	bne.n	800e8f6 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e928:	88fb      	ldrh	r3, [r7, #6]
 800e92a:	461a      	mov	r2, r3
 800e92c:	68b9      	ldr	r1, [r7, #8]
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f000 ff66 	bl	800f800 <UART_Start_Receive_DMA>
 800e934:	4603      	mov	r3, r0
 800e936:	e000      	b.n	800e93a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e938:	2302      	movs	r3, #2
  }
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3728      	adds	r7, #40	@ 0x28
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b090      	sub	sp, #64	@ 0x40
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e956:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e962:	2b80      	cmp	r3, #128	@ 0x80
 800e964:	d139      	bne.n	800e9da <HAL_UART_DMAStop+0x98>
 800e966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e968:	2b21      	cmp	r3, #33	@ 0x21
 800e96a:	d136      	bne.n	800e9da <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	e853 3f00 	ldrex	r3, [r3]
 800e97a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e982:	637b      	str	r3, [r7, #52]	@ 0x34
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	3308      	adds	r3, #8
 800e98a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e98c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e98e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e994:	e841 2300 	strex	r3, r2, [r1]
 800e998:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d1e5      	bne.n	800e96c <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d015      	beq.n	800e9d4 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7f7 ff9d 	bl	80068ec <HAL_DMA_Abort>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00d      	beq.n	800e9d4 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7f8 f9b1 	bl	8006d24 <HAL_DMA_GetError>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b20      	cmp	r3, #32
 800e9c6:	d105      	bne.n	800e9d4 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2210      	movs	r2, #16
 800e9cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e044      	b.n	800ea5e <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 ffb3 	bl	800f940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9e4:	2b40      	cmp	r3, #64	@ 0x40
 800e9e6:	d139      	bne.n	800ea5c <HAL_UART_DMAStop+0x11a>
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ea:	2b22      	cmp	r3, #34	@ 0x22
 800e9ec:	d136      	bne.n	800ea5c <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	e853 3f00 	ldrex	r3, [r3]
 800e9fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	3308      	adds	r3, #8
 800ea0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea0e:	61ba      	str	r2, [r7, #24]
 800ea10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea12:	6979      	ldr	r1, [r7, #20]
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	e841 2300 	strex	r3, r2, [r1]
 800ea1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1e5      	bne.n	800e9ee <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d015      	beq.n	800ea56 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7f7 ff5c 	bl	80068ec <HAL_DMA_Abort>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00d      	beq.n	800ea56 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f8 f970 	bl	8006d24 <HAL_DMA_GetError>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b20      	cmp	r3, #32
 800ea48:	d105      	bne.n	800ea56 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2210      	movs	r2, #16
 800ea4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ea52:	2303      	movs	r3, #3
 800ea54:	e003      	b.n	800ea5e <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 ff98 	bl	800f98c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3740      	adds	r7, #64	@ 0x40
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
	...

0800ea68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b0ba      	sub	sp, #232	@ 0xe8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	69db      	ldr	r3, [r3, #28]
 800ea76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ea92:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ea96:	4013      	ands	r3, r2
 800ea98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ea9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d115      	bne.n	800ead0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800eaa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaa8:	f003 0320 	and.w	r3, r3, #32
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00f      	beq.n	800ead0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800eab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eab4:	f003 0320 	and.w	r3, r3, #32
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d009      	beq.n	800ead0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 82b1 	beq.w	800f028 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	4798      	blx	r3
      }
      return;
 800eace:	e2ab      	b.n	800f028 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ead0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 8117 	beq.w	800ed08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800eada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800eae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eaea:	4b85      	ldr	r3, [pc, #532]	@ (800ed00 <HAL_UART_IRQHandler+0x298>)
 800eaec:	4013      	ands	r3, r2
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f000 810a 	beq.w	800ed08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaf8:	f003 0301 	and.w	r3, r3, #1
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d011      	beq.n	800eb24 <HAL_UART_IRQHandler+0xbc>
 800eb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00b      	beq.n	800eb24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2201      	movs	r2, #1
 800eb12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb1a:	f043 0201 	orr.w	r2, r3, #1
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb28:	f003 0302 	and.w	r3, r3, #2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d011      	beq.n	800eb54 <HAL_UART_IRQHandler+0xec>
 800eb30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00b      	beq.n	800eb54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2202      	movs	r2, #2
 800eb42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb4a:	f043 0204 	orr.w	r2, r3, #4
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb58:	f003 0304 	and.w	r3, r3, #4
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d011      	beq.n	800eb84 <HAL_UART_IRQHandler+0x11c>
 800eb60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb64:	f003 0301 	and.w	r3, r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00b      	beq.n	800eb84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2204      	movs	r2, #4
 800eb72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb7a:	f043 0202 	orr.w	r2, r3, #2
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb88:	f003 0308 	and.w	r3, r3, #8
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d017      	beq.n	800ebc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800eb90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb94:	f003 0320 	and.w	r3, r3, #32
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d105      	bne.n	800eba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800eb9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2208      	movs	r2, #8
 800ebae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebb6:	f043 0208 	orr.w	r2, r3, #8
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ebc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d012      	beq.n	800ebf2 <HAL_UART_IRQHandler+0x18a>
 800ebcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00c      	beq.n	800ebf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ebe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebe8:	f043 0220 	orr.w	r2, r3, #32
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f000 8217 	beq.w	800f02c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ebfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec02:	f003 0320 	and.w	r3, r3, #32
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00d      	beq.n	800ec26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ec0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec0e:	f003 0320 	and.w	r3, r3, #32
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d007      	beq.n	800ec26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d003      	beq.n	800ec26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ec2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec3a:	2b40      	cmp	r3, #64	@ 0x40
 800ec3c:	d005      	beq.n	800ec4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ec42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d04f      	beq.n	800ecea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 fe9e 	bl	800f98c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec5a:	2b40      	cmp	r3, #64	@ 0x40
 800ec5c:	d141      	bne.n	800ece2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	3308      	adds	r3, #8
 800ec64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec6c:	e853 3f00 	ldrex	r3, [r3]
 800ec70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ec74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3308      	adds	r3, #8
 800ec86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ec8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ec8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ec96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ec9a:	e841 2300 	strex	r3, r2, [r1]
 800ec9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800eca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1d9      	bne.n	800ec5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d013      	beq.n	800ecda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb6:	4a13      	ldr	r2, [pc, #76]	@ (800ed04 <HAL_UART_IRQHandler+0x29c>)
 800ecb8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f7 fe84 	bl	80069cc <HAL_DMA_Abort_IT>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d017      	beq.n	800ecfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ecd4:	4610      	mov	r0, r2
 800ecd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecd8:	e00f      	b.n	800ecfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7f6 fe12 	bl	8005904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ece0:	e00b      	b.n	800ecfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7f6 fe0e 	bl	8005904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ece8:	e007      	b.n	800ecfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7f6 fe0a 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ecf8:	e198      	b.n	800f02c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecfa:	bf00      	nop
    return;
 800ecfc:	e196      	b.n	800f02c <HAL_UART_IRQHandler+0x5c4>
 800ecfe:	bf00      	nop
 800ed00:	04000120 	.word	0x04000120
 800ed04:	0800fca3 	.word	0x0800fca3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	f040 8166 	bne.w	800efde <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed16:	f003 0310 	and.w	r3, r3, #16
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 815f 	beq.w	800efde <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed24:	f003 0310 	and.w	r3, r3, #16
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 8158 	beq.w	800efde <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2210      	movs	r2, #16
 800ed34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed40:	2b40      	cmp	r3, #64	@ 0x40
 800ed42:	f040 80d0 	bne.w	800eee6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ed52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 80ab 	beq.w	800eeb2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ed62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ed66:	429a      	cmp	r2, r3
 800ed68:	f080 80a3 	bcs.w	800eeb2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ed72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed80:	f000 8086 	beq.w	800ee90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ed90:	e853 3f00 	ldrex	r3, [r3]
 800ed94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ed98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ed9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eda0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	461a      	mov	r2, r3
 800edaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800edae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800edb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800edba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800edbe:	e841 2300 	strex	r3, r2, [r1]
 800edc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800edc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1da      	bne.n	800ed84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3308      	adds	r3, #8
 800edd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800edd8:	e853 3f00 	ldrex	r3, [r3]
 800eddc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800edde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ede0:	f023 0301 	bic.w	r3, r3, #1
 800ede4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	3308      	adds	r3, #8
 800edee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800edf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800edf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800edfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800edfe:	e841 2300 	strex	r3, r2, [r1]
 800ee02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ee04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1e1      	bne.n	800edce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3308      	adds	r3, #8
 800ee10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee14:	e853 3f00 	ldrex	r3, [r3]
 800ee18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ee1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	3308      	adds	r3, #8
 800ee2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ee2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ee30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ee34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ee36:	e841 2300 	strex	r3, r2, [r1]
 800ee3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ee3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1e3      	bne.n	800ee0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2220      	movs	r2, #32
 800ee46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee58:	e853 3f00 	ldrex	r3, [r3]
 800ee5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ee5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee60:	f023 0310 	bic.w	r3, r3, #16
 800ee64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ee7a:	e841 2300 	strex	r3, r2, [r1]
 800ee7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ee80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1e4      	bne.n	800ee50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7f7 fd2e 	bl	80068ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2202      	movs	r2, #2
 800ee94:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f8d2 	bl	800f054 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800eeb0:	e0be      	b.n	800f030 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eeb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eebc:	429a      	cmp	r2, r3
 800eebe:	f040 80b7 	bne.w	800f030 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eec6:	69db      	ldr	r3, [r3, #28]
 800eec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eecc:	f040 80b0 	bne.w	800f030 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2202      	movs	r2, #2
 800eed4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eedc:	4619      	mov	r1, r3
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 f8b8 	bl	800f054 <HAL_UARTEx_RxEventCallback>
      return;
 800eee4:	e0a4      	b.n	800f030 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 8096 	beq.w	800f034 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ef08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f000 8091 	beq.w	800f034 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1a:	e853 3f00 	ldrex	r3, [r3]
 800ef1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ef26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ef34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef3c:	e841 2300 	strex	r3, r2, [r1]
 800ef40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ef42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e4      	bne.n	800ef12 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef52:	e853 3f00 	ldrex	r3, [r3]
 800ef56:	623b      	str	r3, [r7, #32]
   return(result);
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	f023 0301 	bic.w	r3, r3, #1
 800ef5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3308      	adds	r3, #8
 800ef68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ef6c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ef6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef74:	e841 2300 	strex	r3, r2, [r1]
 800ef78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1e3      	bne.n	800ef48 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2220      	movs	r2, #32
 800ef84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	e853 3f00 	ldrex	r3, [r3]
 800efa0:	60fb      	str	r3, [r7, #12]
   return(result);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f023 0310 	bic.w	r3, r3, #16
 800efa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	461a      	mov	r2, r3
 800efb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800efb6:	61fb      	str	r3, [r7, #28]
 800efb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efba:	69b9      	ldr	r1, [r7, #24]
 800efbc:	69fa      	ldr	r2, [r7, #28]
 800efbe:	e841 2300 	strex	r3, r2, [r1]
 800efc2:	617b      	str	r3, [r7, #20]
   return(result);
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e4      	bne.n	800ef94 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2202      	movs	r2, #2
 800efce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800efd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800efd4:	4619      	mov	r1, r3
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f83c 	bl	800f054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800efdc:	e02a      	b.n	800f034 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800efde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00e      	beq.n	800f008 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800efea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d008      	beq.n	800f008 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800effa:	2b00      	cmp	r3, #0
 800effc:	d01c      	beq.n	800f038 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	4798      	blx	r3
    }
    return;
 800f006:	e017      	b.n	800f038 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f010:	2b00      	cmp	r3, #0
 800f012:	d012      	beq.n	800f03a <HAL_UART_IRQHandler+0x5d2>
 800f014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00c      	beq.n	800f03a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fe50 	bl	800fcc6 <UART_EndTransmit_IT>
    return;
 800f026:	e008      	b.n	800f03a <HAL_UART_IRQHandler+0x5d2>
      return;
 800f028:	bf00      	nop
 800f02a:	e006      	b.n	800f03a <HAL_UART_IRQHandler+0x5d2>
    return;
 800f02c:	bf00      	nop
 800f02e:	e004      	b.n	800f03a <HAL_UART_IRQHandler+0x5d2>
      return;
 800f030:	bf00      	nop
 800f032:	e002      	b.n	800f03a <HAL_UART_IRQHandler+0x5d2>
      return;
 800f034:	bf00      	nop
 800f036:	e000      	b.n	800f03a <HAL_UART_IRQHandler+0x5d2>
    return;
 800f038:	bf00      	nop
  }

}
 800f03a:	37e8      	adds	r7, #232	@ 0xe8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f048:	bf00      	nop
 800f04a:	370c      	adds	r7, #12
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr

0800f054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	460b      	mov	r3, r1
 800f05e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f060:	bf00      	nop
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	689a      	ldr	r2, [r3, #8]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	691b      	ldr	r3, [r3, #16]
 800f080:	431a      	orrs	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	431a      	orrs	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	69db      	ldr	r3, [r3, #28]
 800f08c:	4313      	orrs	r3, r2
 800f08e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	4ba6      	ldr	r3, [pc, #664]	@ (800f330 <UART_SetConfig+0x2c4>)
 800f098:	4013      	ands	r3, r2
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	6812      	ldr	r2, [r2, #0]
 800f09e:	6979      	ldr	r1, [r7, #20]
 800f0a0:	430b      	orrs	r3, r1
 800f0a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68da      	ldr	r2, [r3, #12]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	430a      	orrs	r2, r1
 800f0b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a1b      	ldr	r3, [r3, #32]
 800f0c4:	697a      	ldr	r2, [r7, #20]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a94      	ldr	r2, [pc, #592]	@ (800f334 <UART_SetConfig+0x2c8>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d120      	bne.n	800f12a <UART_SetConfig+0xbe>
 800f0e8:	4b93      	ldr	r3, [pc, #588]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0ee:	f003 0303 	and.w	r3, r3, #3
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	d816      	bhi.n	800f124 <UART_SetConfig+0xb8>
 800f0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0fc <UART_SetConfig+0x90>)
 800f0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fc:	0800f10d 	.word	0x0800f10d
 800f100:	0800f119 	.word	0x0800f119
 800f104:	0800f113 	.word	0x0800f113
 800f108:	0800f11f 	.word	0x0800f11f
 800f10c:	2301      	movs	r3, #1
 800f10e:	77fb      	strb	r3, [r7, #31]
 800f110:	e150      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f112:	2302      	movs	r3, #2
 800f114:	77fb      	strb	r3, [r7, #31]
 800f116:	e14d      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f118:	2304      	movs	r3, #4
 800f11a:	77fb      	strb	r3, [r7, #31]
 800f11c:	e14a      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f11e:	2308      	movs	r3, #8
 800f120:	77fb      	strb	r3, [r7, #31]
 800f122:	e147      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f124:	2310      	movs	r3, #16
 800f126:	77fb      	strb	r3, [r7, #31]
 800f128:	e144      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4a83      	ldr	r2, [pc, #524]	@ (800f33c <UART_SetConfig+0x2d0>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d132      	bne.n	800f19a <UART_SetConfig+0x12e>
 800f134:	4b80      	ldr	r3, [pc, #512]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f13a:	f003 030c 	and.w	r3, r3, #12
 800f13e:	2b0c      	cmp	r3, #12
 800f140:	d828      	bhi.n	800f194 <UART_SetConfig+0x128>
 800f142:	a201      	add	r2, pc, #4	@ (adr r2, 800f148 <UART_SetConfig+0xdc>)
 800f144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f148:	0800f17d 	.word	0x0800f17d
 800f14c:	0800f195 	.word	0x0800f195
 800f150:	0800f195 	.word	0x0800f195
 800f154:	0800f195 	.word	0x0800f195
 800f158:	0800f189 	.word	0x0800f189
 800f15c:	0800f195 	.word	0x0800f195
 800f160:	0800f195 	.word	0x0800f195
 800f164:	0800f195 	.word	0x0800f195
 800f168:	0800f183 	.word	0x0800f183
 800f16c:	0800f195 	.word	0x0800f195
 800f170:	0800f195 	.word	0x0800f195
 800f174:	0800f195 	.word	0x0800f195
 800f178:	0800f18f 	.word	0x0800f18f
 800f17c:	2300      	movs	r3, #0
 800f17e:	77fb      	strb	r3, [r7, #31]
 800f180:	e118      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f182:	2302      	movs	r3, #2
 800f184:	77fb      	strb	r3, [r7, #31]
 800f186:	e115      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f188:	2304      	movs	r3, #4
 800f18a:	77fb      	strb	r3, [r7, #31]
 800f18c:	e112      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f18e:	2308      	movs	r3, #8
 800f190:	77fb      	strb	r3, [r7, #31]
 800f192:	e10f      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f194:	2310      	movs	r3, #16
 800f196:	77fb      	strb	r3, [r7, #31]
 800f198:	e10c      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a68      	ldr	r2, [pc, #416]	@ (800f340 <UART_SetConfig+0x2d4>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d120      	bne.n	800f1e6 <UART_SetConfig+0x17a>
 800f1a4:	4b64      	ldr	r3, [pc, #400]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f1ae:	2b30      	cmp	r3, #48	@ 0x30
 800f1b0:	d013      	beq.n	800f1da <UART_SetConfig+0x16e>
 800f1b2:	2b30      	cmp	r3, #48	@ 0x30
 800f1b4:	d814      	bhi.n	800f1e0 <UART_SetConfig+0x174>
 800f1b6:	2b20      	cmp	r3, #32
 800f1b8:	d009      	beq.n	800f1ce <UART_SetConfig+0x162>
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d810      	bhi.n	800f1e0 <UART_SetConfig+0x174>
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <UART_SetConfig+0x15c>
 800f1c2:	2b10      	cmp	r3, #16
 800f1c4:	d006      	beq.n	800f1d4 <UART_SetConfig+0x168>
 800f1c6:	e00b      	b.n	800f1e0 <UART_SetConfig+0x174>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	77fb      	strb	r3, [r7, #31]
 800f1cc:	e0f2      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f1ce:	2302      	movs	r3, #2
 800f1d0:	77fb      	strb	r3, [r7, #31]
 800f1d2:	e0ef      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f1d4:	2304      	movs	r3, #4
 800f1d6:	77fb      	strb	r3, [r7, #31]
 800f1d8:	e0ec      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f1da:	2308      	movs	r3, #8
 800f1dc:	77fb      	strb	r3, [r7, #31]
 800f1de:	e0e9      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f1e0:	2310      	movs	r3, #16
 800f1e2:	77fb      	strb	r3, [r7, #31]
 800f1e4:	e0e6      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a56      	ldr	r2, [pc, #344]	@ (800f344 <UART_SetConfig+0x2d8>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d120      	bne.n	800f232 <UART_SetConfig+0x1c6>
 800f1f0:	4b51      	ldr	r3, [pc, #324]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f1fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800f1fc:	d013      	beq.n	800f226 <UART_SetConfig+0x1ba>
 800f1fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800f200:	d814      	bhi.n	800f22c <UART_SetConfig+0x1c0>
 800f202:	2b80      	cmp	r3, #128	@ 0x80
 800f204:	d009      	beq.n	800f21a <UART_SetConfig+0x1ae>
 800f206:	2b80      	cmp	r3, #128	@ 0x80
 800f208:	d810      	bhi.n	800f22c <UART_SetConfig+0x1c0>
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d002      	beq.n	800f214 <UART_SetConfig+0x1a8>
 800f20e:	2b40      	cmp	r3, #64	@ 0x40
 800f210:	d006      	beq.n	800f220 <UART_SetConfig+0x1b4>
 800f212:	e00b      	b.n	800f22c <UART_SetConfig+0x1c0>
 800f214:	2300      	movs	r3, #0
 800f216:	77fb      	strb	r3, [r7, #31]
 800f218:	e0cc      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f21a:	2302      	movs	r3, #2
 800f21c:	77fb      	strb	r3, [r7, #31]
 800f21e:	e0c9      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f220:	2304      	movs	r3, #4
 800f222:	77fb      	strb	r3, [r7, #31]
 800f224:	e0c6      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f226:	2308      	movs	r3, #8
 800f228:	77fb      	strb	r3, [r7, #31]
 800f22a:	e0c3      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f22c:	2310      	movs	r3, #16
 800f22e:	77fb      	strb	r3, [r7, #31]
 800f230:	e0c0      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a44      	ldr	r2, [pc, #272]	@ (800f348 <UART_SetConfig+0x2dc>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d125      	bne.n	800f288 <UART_SetConfig+0x21c>
 800f23c:	4b3e      	ldr	r3, [pc, #248]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f24a:	d017      	beq.n	800f27c <UART_SetConfig+0x210>
 800f24c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f250:	d817      	bhi.n	800f282 <UART_SetConfig+0x216>
 800f252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f256:	d00b      	beq.n	800f270 <UART_SetConfig+0x204>
 800f258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f25c:	d811      	bhi.n	800f282 <UART_SetConfig+0x216>
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <UART_SetConfig+0x1fe>
 800f262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f266:	d006      	beq.n	800f276 <UART_SetConfig+0x20a>
 800f268:	e00b      	b.n	800f282 <UART_SetConfig+0x216>
 800f26a:	2300      	movs	r3, #0
 800f26c:	77fb      	strb	r3, [r7, #31]
 800f26e:	e0a1      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f270:	2302      	movs	r3, #2
 800f272:	77fb      	strb	r3, [r7, #31]
 800f274:	e09e      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f276:	2304      	movs	r3, #4
 800f278:	77fb      	strb	r3, [r7, #31]
 800f27a:	e09b      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f27c:	2308      	movs	r3, #8
 800f27e:	77fb      	strb	r3, [r7, #31]
 800f280:	e098      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f282:	2310      	movs	r3, #16
 800f284:	77fb      	strb	r3, [r7, #31]
 800f286:	e095      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a2f      	ldr	r2, [pc, #188]	@ (800f34c <UART_SetConfig+0x2e0>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d125      	bne.n	800f2de <UART_SetConfig+0x272>
 800f292:	4b29      	ldr	r3, [pc, #164]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f298:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f29c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f2a0:	d017      	beq.n	800f2d2 <UART_SetConfig+0x266>
 800f2a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f2a6:	d817      	bhi.n	800f2d8 <UART_SetConfig+0x26c>
 800f2a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2ac:	d00b      	beq.n	800f2c6 <UART_SetConfig+0x25a>
 800f2ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2b2:	d811      	bhi.n	800f2d8 <UART_SetConfig+0x26c>
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <UART_SetConfig+0x254>
 800f2b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2bc:	d006      	beq.n	800f2cc <UART_SetConfig+0x260>
 800f2be:	e00b      	b.n	800f2d8 <UART_SetConfig+0x26c>
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	77fb      	strb	r3, [r7, #31]
 800f2c4:	e076      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	77fb      	strb	r3, [r7, #31]
 800f2ca:	e073      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f2cc:	2304      	movs	r3, #4
 800f2ce:	77fb      	strb	r3, [r7, #31]
 800f2d0:	e070      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f2d2:	2308      	movs	r3, #8
 800f2d4:	77fb      	strb	r3, [r7, #31]
 800f2d6:	e06d      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f2d8:	2310      	movs	r3, #16
 800f2da:	77fb      	strb	r3, [r7, #31]
 800f2dc:	e06a      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a1b      	ldr	r2, [pc, #108]	@ (800f350 <UART_SetConfig+0x2e4>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d138      	bne.n	800f35a <UART_SetConfig+0x2ee>
 800f2e8:	4b13      	ldr	r3, [pc, #76]	@ (800f338 <UART_SetConfig+0x2cc>)
 800f2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f2f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f2f6:	d017      	beq.n	800f328 <UART_SetConfig+0x2bc>
 800f2f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f2fc:	d82a      	bhi.n	800f354 <UART_SetConfig+0x2e8>
 800f2fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f302:	d00b      	beq.n	800f31c <UART_SetConfig+0x2b0>
 800f304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f308:	d824      	bhi.n	800f354 <UART_SetConfig+0x2e8>
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d003      	beq.n	800f316 <UART_SetConfig+0x2aa>
 800f30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f312:	d006      	beq.n	800f322 <UART_SetConfig+0x2b6>
 800f314:	e01e      	b.n	800f354 <UART_SetConfig+0x2e8>
 800f316:	2300      	movs	r3, #0
 800f318:	77fb      	strb	r3, [r7, #31]
 800f31a:	e04b      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f31c:	2302      	movs	r3, #2
 800f31e:	77fb      	strb	r3, [r7, #31]
 800f320:	e048      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f322:	2304      	movs	r3, #4
 800f324:	77fb      	strb	r3, [r7, #31]
 800f326:	e045      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f328:	2308      	movs	r3, #8
 800f32a:	77fb      	strb	r3, [r7, #31]
 800f32c:	e042      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f32e:	bf00      	nop
 800f330:	efff69f3 	.word	0xefff69f3
 800f334:	40011000 	.word	0x40011000
 800f338:	40023800 	.word	0x40023800
 800f33c:	40004400 	.word	0x40004400
 800f340:	40004800 	.word	0x40004800
 800f344:	40004c00 	.word	0x40004c00
 800f348:	40005000 	.word	0x40005000
 800f34c:	40011400 	.word	0x40011400
 800f350:	40007800 	.word	0x40007800
 800f354:	2310      	movs	r3, #16
 800f356:	77fb      	strb	r3, [r7, #31]
 800f358:	e02c      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a72      	ldr	r2, [pc, #456]	@ (800f528 <UART_SetConfig+0x4bc>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d125      	bne.n	800f3b0 <UART_SetConfig+0x344>
 800f364:	4b71      	ldr	r3, [pc, #452]	@ (800f52c <UART_SetConfig+0x4c0>)
 800f366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f36a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f36e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f372:	d017      	beq.n	800f3a4 <UART_SetConfig+0x338>
 800f374:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f378:	d817      	bhi.n	800f3aa <UART_SetConfig+0x33e>
 800f37a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f37e:	d00b      	beq.n	800f398 <UART_SetConfig+0x32c>
 800f380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f384:	d811      	bhi.n	800f3aa <UART_SetConfig+0x33e>
 800f386:	2b00      	cmp	r3, #0
 800f388:	d003      	beq.n	800f392 <UART_SetConfig+0x326>
 800f38a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f38e:	d006      	beq.n	800f39e <UART_SetConfig+0x332>
 800f390:	e00b      	b.n	800f3aa <UART_SetConfig+0x33e>
 800f392:	2300      	movs	r3, #0
 800f394:	77fb      	strb	r3, [r7, #31]
 800f396:	e00d      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f398:	2302      	movs	r3, #2
 800f39a:	77fb      	strb	r3, [r7, #31]
 800f39c:	e00a      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f39e:	2304      	movs	r3, #4
 800f3a0:	77fb      	strb	r3, [r7, #31]
 800f3a2:	e007      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f3a4:	2308      	movs	r3, #8
 800f3a6:	77fb      	strb	r3, [r7, #31]
 800f3a8:	e004      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f3aa:	2310      	movs	r3, #16
 800f3ac:	77fb      	strb	r3, [r7, #31]
 800f3ae:	e001      	b.n	800f3b4 <UART_SetConfig+0x348>
 800f3b0:	2310      	movs	r3, #16
 800f3b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	69db      	ldr	r3, [r3, #28]
 800f3b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f3bc:	d15b      	bne.n	800f476 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f3be:	7ffb      	ldrb	r3, [r7, #31]
 800f3c0:	2b08      	cmp	r3, #8
 800f3c2:	d828      	bhi.n	800f416 <UART_SetConfig+0x3aa>
 800f3c4:	a201      	add	r2, pc, #4	@ (adr r2, 800f3cc <UART_SetConfig+0x360>)
 800f3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ca:	bf00      	nop
 800f3cc:	0800f3f1 	.word	0x0800f3f1
 800f3d0:	0800f3f9 	.word	0x0800f3f9
 800f3d4:	0800f401 	.word	0x0800f401
 800f3d8:	0800f417 	.word	0x0800f417
 800f3dc:	0800f407 	.word	0x0800f407
 800f3e0:	0800f417 	.word	0x0800f417
 800f3e4:	0800f417 	.word	0x0800f417
 800f3e8:	0800f417 	.word	0x0800f417
 800f3ec:	0800f40f 	.word	0x0800f40f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3f0:	f7fb fbf4 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 800f3f4:	61b8      	str	r0, [r7, #24]
        break;
 800f3f6:	e013      	b.n	800f420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3f8:	f7fb fc04 	bl	800ac04 <HAL_RCC_GetPCLK2Freq>
 800f3fc:	61b8      	str	r0, [r7, #24]
        break;
 800f3fe:	e00f      	b.n	800f420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f400:	4b4b      	ldr	r3, [pc, #300]	@ (800f530 <UART_SetConfig+0x4c4>)
 800f402:	61bb      	str	r3, [r7, #24]
        break;
 800f404:	e00c      	b.n	800f420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f406:	f7fb fb17 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800f40a:	61b8      	str	r0, [r7, #24]
        break;
 800f40c:	e008      	b.n	800f420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f40e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f412:	61bb      	str	r3, [r7, #24]
        break;
 800f414:	e004      	b.n	800f420 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	77bb      	strb	r3, [r7, #30]
        break;
 800f41e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d074      	beq.n	800f510 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	005a      	lsls	r2, r3, #1
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	085b      	lsrs	r3, r3, #1
 800f430:	441a      	add	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	fbb2 f3f3 	udiv	r3, r2, r3
 800f43a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	2b0f      	cmp	r3, #15
 800f440:	d916      	bls.n	800f470 <UART_SetConfig+0x404>
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f448:	d212      	bcs.n	800f470 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	f023 030f 	bic.w	r3, r3, #15
 800f452:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	085b      	lsrs	r3, r3, #1
 800f458:	b29b      	uxth	r3, r3
 800f45a:	f003 0307 	and.w	r3, r3, #7
 800f45e:	b29a      	uxth	r2, r3
 800f460:	89fb      	ldrh	r3, [r7, #14]
 800f462:	4313      	orrs	r3, r2
 800f464:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	89fa      	ldrh	r2, [r7, #14]
 800f46c:	60da      	str	r2, [r3, #12]
 800f46e:	e04f      	b.n	800f510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	77bb      	strb	r3, [r7, #30]
 800f474:	e04c      	b.n	800f510 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f476:	7ffb      	ldrb	r3, [r7, #31]
 800f478:	2b08      	cmp	r3, #8
 800f47a:	d828      	bhi.n	800f4ce <UART_SetConfig+0x462>
 800f47c:	a201      	add	r2, pc, #4	@ (adr r2, 800f484 <UART_SetConfig+0x418>)
 800f47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f482:	bf00      	nop
 800f484:	0800f4a9 	.word	0x0800f4a9
 800f488:	0800f4b1 	.word	0x0800f4b1
 800f48c:	0800f4b9 	.word	0x0800f4b9
 800f490:	0800f4cf 	.word	0x0800f4cf
 800f494:	0800f4bf 	.word	0x0800f4bf
 800f498:	0800f4cf 	.word	0x0800f4cf
 800f49c:	0800f4cf 	.word	0x0800f4cf
 800f4a0:	0800f4cf 	.word	0x0800f4cf
 800f4a4:	0800f4c7 	.word	0x0800f4c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4a8:	f7fb fb98 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 800f4ac:	61b8      	str	r0, [r7, #24]
        break;
 800f4ae:	e013      	b.n	800f4d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4b0:	f7fb fba8 	bl	800ac04 <HAL_RCC_GetPCLK2Freq>
 800f4b4:	61b8      	str	r0, [r7, #24]
        break;
 800f4b6:	e00f      	b.n	800f4d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f4b8:	4b1d      	ldr	r3, [pc, #116]	@ (800f530 <UART_SetConfig+0x4c4>)
 800f4ba:	61bb      	str	r3, [r7, #24]
        break;
 800f4bc:	e00c      	b.n	800f4d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f4be:	f7fb fabb 	bl	800aa38 <HAL_RCC_GetSysClockFreq>
 800f4c2:	61b8      	str	r0, [r7, #24]
        break;
 800f4c4:	e008      	b.n	800f4d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4ca:	61bb      	str	r3, [r7, #24]
        break;
 800f4cc:	e004      	b.n	800f4d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	77bb      	strb	r3, [r7, #30]
        break;
 800f4d6:	bf00      	nop
    }

    if (pclk != 0U)
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d018      	beq.n	800f510 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	085a      	lsrs	r2, r3, #1
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	441a      	add	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	2b0f      	cmp	r3, #15
 800f4f6:	d909      	bls.n	800f50c <UART_SetConfig+0x4a0>
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4fe:	d205      	bcs.n	800f50c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	b29a      	uxth	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	60da      	str	r2, [r3, #12]
 800f50a:	e001      	b.n	800f510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f51c:	7fbb      	ldrb	r3, [r7, #30]
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3720      	adds	r7, #32
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	40007c00 	.word	0x40007c00
 800f52c:	40023800 	.word	0x40023800
 800f530:	00f42400 	.word	0x00f42400

0800f534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f540:	f003 0308 	and.w	r3, r3, #8
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00a      	beq.n	800f55e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	430a      	orrs	r2, r1
 800f55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f562:	f003 0301 	and.w	r3, r3, #1
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00a      	beq.n	800f580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	430a      	orrs	r2, r1
 800f57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f584:	f003 0302 	and.w	r3, r3, #2
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00a      	beq.n	800f5a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	430a      	orrs	r2, r1
 800f5a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5a6:	f003 0304 	and.w	r3, r3, #4
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00a      	beq.n	800f5c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	430a      	orrs	r2, r1
 800f5c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5c8:	f003 0310 	and.w	r3, r3, #16
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00a      	beq.n	800f5e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	689b      	ldr	r3, [r3, #8]
 800f5d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	430a      	orrs	r2, r1
 800f5e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ea:	f003 0320 	and.w	r3, r3, #32
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00a      	beq.n	800f608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	430a      	orrs	r2, r1
 800f606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f610:	2b00      	cmp	r3, #0
 800f612:	d01a      	beq.n	800f64a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	430a      	orrs	r2, r1
 800f628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f62e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f632:	d10a      	bne.n	800f64a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	430a      	orrs	r2, r1
 800f648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00a      	beq.n	800f66c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	430a      	orrs	r2, r1
 800f66a:	605a      	str	r2, [r3, #4]
  }
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b08c      	sub	sp, #48	@ 0x30
 800f67c:	af02      	add	r7, sp, #8
 800f67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f688:	f7f6 faae 	bl	8005be8 <HAL_GetTick>
 800f68c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f003 0308 	and.w	r3, r3, #8
 800f698:	2b08      	cmp	r3, #8
 800f69a:	d12e      	bne.n	800f6fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f69c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 f83b 	bl	800f726 <UART_WaitOnFlagUntilTimeout>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d021      	beq.n	800f6fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	e853 3f00 	ldrex	r3, [r3]
 800f6c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6ca:	623b      	str	r3, [r7, #32]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	61fb      	str	r3, [r7, #28]
 800f6d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d8:	69b9      	ldr	r1, [r7, #24]
 800f6da:	69fa      	ldr	r2, [r7, #28]
 800f6dc:	e841 2300 	strex	r3, r2, [r1]
 800f6e0:	617b      	str	r3, [r7, #20]
   return(result);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1e6      	bne.n	800f6b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2220      	movs	r2, #32
 800f6ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	e011      	b.n	800f71e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2220      	movs	r2, #32
 800f6fe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2220      	movs	r2, #32
 800f704:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3728      	adds	r7, #40	@ 0x28
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b084      	sub	sp, #16
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	60f8      	str	r0, [r7, #12]
 800f72e:	60b9      	str	r1, [r7, #8]
 800f730:	603b      	str	r3, [r7, #0]
 800f732:	4613      	mov	r3, r2
 800f734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f736:	e04f      	b.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f73e:	d04b      	beq.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f740:	f7f6 fa52 	bl	8005be8 <HAL_GetTick>
 800f744:	4602      	mov	r2, r0
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	1ad3      	subs	r3, r2, r3
 800f74a:	69ba      	ldr	r2, [r7, #24]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d302      	bcc.n	800f756 <UART_WaitOnFlagUntilTimeout+0x30>
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f756:	2303      	movs	r3, #3
 800f758:	e04e      	b.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 0304 	and.w	r3, r3, #4
 800f764:	2b00      	cmp	r3, #0
 800f766:	d037      	beq.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	2b80      	cmp	r3, #128	@ 0x80
 800f76c:	d034      	beq.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	2b40      	cmp	r3, #64	@ 0x40
 800f772:	d031      	beq.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	69db      	ldr	r3, [r3, #28]
 800f77a:	f003 0308 	and.w	r3, r3, #8
 800f77e:	2b08      	cmp	r3, #8
 800f780:	d110      	bne.n	800f7a4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2208      	movs	r2, #8
 800f788:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 f8fe 	bl	800f98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2208      	movs	r2, #8
 800f794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	e029      	b.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	69db      	ldr	r3, [r3, #28]
 800f7aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f7b2:	d111      	bne.n	800f7d8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f7be:	68f8      	ldr	r0, [r7, #12]
 800f7c0:	f000 f8e4 	bl	800f98c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2220      	movs	r2, #32
 800f7c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f7d4:	2303      	movs	r3, #3
 800f7d6:	e00f      	b.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	69da      	ldr	r2, [r3, #28]
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	4013      	ands	r3, r2
 800f7e2:	68ba      	ldr	r2, [r7, #8]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	bf0c      	ite	eq
 800f7e8:	2301      	moveq	r3, #1
 800f7ea:	2300      	movne	r3, #0
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	79fb      	ldrb	r3, [r7, #7]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d0a0      	beq.n	800f738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b096      	sub	sp, #88	@ 0x58
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	4613      	mov	r3, r2
 800f80c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	68ba      	ldr	r2, [r7, #8]
 800f812:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	88fa      	ldrh	r2, [r7, #6]
 800f818:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2222      	movs	r2, #34	@ 0x22
 800f828:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f830:	2b00      	cmp	r3, #0
 800f832:	d028      	beq.n	800f886 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f838:	4a3e      	ldr	r2, [pc, #248]	@ (800f934 <UART_Start_Receive_DMA+0x134>)
 800f83a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f840:	4a3d      	ldr	r2, [pc, #244]	@ (800f938 <UART_Start_Receive_DMA+0x138>)
 800f842:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f848:	4a3c      	ldr	r2, [pc, #240]	@ (800f93c <UART_Start_Receive_DMA+0x13c>)
 800f84a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f850:	2200      	movs	r2, #0
 800f852:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	3324      	adds	r3, #36	@ 0x24
 800f85e:	4619      	mov	r1, r3
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f864:	461a      	mov	r2, r3
 800f866:	88fb      	ldrh	r3, [r7, #6]
 800f868:	f7f6 ffe0 	bl	800682c <HAL_DMA_Start_IT>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d009      	beq.n	800f886 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2210      	movs	r2, #16
 800f876:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2220      	movs	r2, #32
 800f87e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e051      	b.n	800f92a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	691b      	ldr	r3, [r3, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d018      	beq.n	800f8c0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f896:	e853 3f00 	ldrex	r3, [r3]
 800f89a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f89e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f8a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8b4:	e841 2300 	strex	r3, r2, [r1]
 800f8b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1e6      	bne.n	800f88e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	3308      	adds	r3, #8
 800f8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ca:	e853 3f00 	ldrex	r3, [r3]
 800f8ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d2:	f043 0301 	orr.w	r3, r3, #1
 800f8d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	3308      	adds	r3, #8
 800f8de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800f8e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f8e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8e8:	e841 2300 	strex	r3, r2, [r1]
 800f8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e5      	bne.n	800f8c0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	3308      	adds	r3, #8
 800f8fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	e853 3f00 	ldrex	r3, [r3]
 800f902:	613b      	str	r3, [r7, #16]
   return(result);
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f90a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	3308      	adds	r3, #8
 800f912:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f914:	623a      	str	r2, [r7, #32]
 800f916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f918:	69f9      	ldr	r1, [r7, #28]
 800f91a:	6a3a      	ldr	r2, [r7, #32]
 800f91c:	e841 2300 	strex	r3, r2, [r1]
 800f920:	61bb      	str	r3, [r7, #24]
   return(result);
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1e5      	bne.n	800f8f4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3758      	adds	r7, #88	@ 0x58
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	0800fa55 	.word	0x0800fa55
 800f938:	0800fbb3 	.word	0x0800fbb3
 800f93c:	0800fc25 	.word	0x0800fc25

0800f940 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f940:	b480      	push	{r7}
 800f942:	b089      	sub	sp, #36	@ 0x24
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	e853 3f00 	ldrex	r3, [r3]
 800f954:	60bb      	str	r3, [r7, #8]
   return(result);
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f95c:	61fb      	str	r3, [r7, #28]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	61bb      	str	r3, [r7, #24]
 800f968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96a:	6979      	ldr	r1, [r7, #20]
 800f96c:	69ba      	ldr	r2, [r7, #24]
 800f96e:	e841 2300 	strex	r3, r2, [r1]
 800f972:	613b      	str	r3, [r7, #16]
   return(result);
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1e6      	bne.n	800f948 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2220      	movs	r2, #32
 800f97e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f980:	bf00      	nop
 800f982:	3724      	adds	r7, #36	@ 0x24
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b095      	sub	sp, #84	@ 0x54
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f99c:	e853 3f00 	ldrex	r3, [r3]
 800f9a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f9a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f9b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f9ba:	e841 2300 	strex	r3, r2, [r1]
 800f9be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1e6      	bne.n	800f994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3308      	adds	r3, #8
 800f9cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	e853 3f00 	ldrex	r3, [r3]
 800f9d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	f023 0301 	bic.w	r3, r3, #1
 800f9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9ee:	e841 2300 	strex	r3, r2, [r1]
 800f9f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1e5      	bne.n	800f9c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d118      	bne.n	800fa34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	e853 3f00 	ldrex	r3, [r3]
 800fa0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	f023 0310 	bic.w	r3, r3, #16
 800fa16:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa20:	61bb      	str	r3, [r7, #24]
 800fa22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa24:	6979      	ldr	r1, [r7, #20]
 800fa26:	69ba      	ldr	r2, [r7, #24]
 800fa28:	e841 2300 	strex	r3, r2, [r1]
 800fa2c:	613b      	str	r3, [r7, #16]
   return(result);
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d1e6      	bne.n	800fa02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2220      	movs	r2, #32
 800fa38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800fa48:	bf00      	nop
 800fa4a:	3754      	adds	r7, #84	@ 0x54
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b09c      	sub	sp, #112	@ 0x70
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa60:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	69db      	ldr	r3, [r3, #28]
 800fa66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa6a:	d071      	beq.n	800fb50 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fa6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa7c:	e853 3f00 	ldrex	r3, [r3]
 800fa80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fa82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa88:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fa8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fa92:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fa9a:	e841 2300 	strex	r3, r2, [r1]
 800fa9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800faa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1e6      	bne.n	800fa74 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	3308      	adds	r3, #8
 800faac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fab0:	e853 3f00 	ldrex	r3, [r3]
 800fab4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab8:	f023 0301 	bic.w	r3, r3, #1
 800fabc:	667b      	str	r3, [r7, #100]	@ 0x64
 800fabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	3308      	adds	r3, #8
 800fac4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fac6:	643a      	str	r2, [r7, #64]	@ 0x40
 800fac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800facc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800face:	e841 2300 	strex	r3, r2, [r1]
 800fad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1e5      	bne.n	800faa6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	3308      	adds	r3, #8
 800fae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae2:	6a3b      	ldr	r3, [r7, #32]
 800fae4:	e853 3f00 	ldrex	r3, [r3]
 800fae8:	61fb      	str	r3, [r7, #28]
   return(result);
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800faf0:	663b      	str	r3, [r7, #96]	@ 0x60
 800faf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	3308      	adds	r3, #8
 800faf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fafa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fafc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb02:	e841 2300 	strex	r3, r2, [r1]
 800fb06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1e5      	bne.n	800fada <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb10:	2220      	movs	r2, #32
 800fb12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d118      	bne.n	800fb50 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	e853 3f00 	ldrex	r3, [r3]
 800fb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	f023 0310 	bic.w	r3, r3, #16
 800fb32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fb34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb3c:	61bb      	str	r3, [r7, #24]
 800fb3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb40:	6979      	ldr	r1, [r7, #20]
 800fb42:	69ba      	ldr	r2, [r7, #24]
 800fb44:	e841 2300 	strex	r3, r2, [r1]
 800fb48:	613b      	str	r3, [r7, #16]
   return(result);
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1e6      	bne.n	800fb1e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb52:	2200      	movs	r2, #0
 800fb54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d122      	bne.n	800fba4 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800fb5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb60:	2200      	movs	r2, #0
 800fb62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800fb70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fb76:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d204      	bcs.n	800fb88 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800fb7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb80:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800fb84:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fb8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fb9e:	f7ff fa59 	bl	800f054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fba2:	e002      	b.n	800fbaa <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800fba4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fba6:	f7f5 fe73 	bl	8005890 <HAL_UART_RxCpltCallback>
}
 800fbaa:	bf00      	nop
 800fbac:	3770      	adds	r7, #112	@ 0x70
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b084      	sub	sp, #16
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbbe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d123      	bne.n	800fc16 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fbd4:	085b      	lsrs	r3, r3, #1
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fbec:	897a      	ldrh	r2, [r7, #10]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d803      	bhi.n	800fbfa <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	897a      	ldrh	r2, [r7, #10]
 800fbf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	1ad3      	subs	r3, r2, r3
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f7ff fa20 	bl	800f054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc14:	e002      	b.n	800fc1c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f7f5 fe5e 	bl	80058d8 <HAL_UART_RxHalfCpltCallback>
}
 800fc1c:	bf00      	nop
 800fc1e:	3710      	adds	r7, #16
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b086      	sub	sp, #24
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc4a:	2b80      	cmp	r3, #128	@ 0x80
 800fc4c:	d109      	bne.n	800fc62 <UART_DMAError+0x3e>
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	2b21      	cmp	r3, #33	@ 0x21
 800fc52:	d106      	bne.n	800fc62 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2200      	movs	r2, #0
 800fc58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800fc5c:	6978      	ldr	r0, [r7, #20]
 800fc5e:	f7ff fe6f 	bl	800f940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc6c:	2b40      	cmp	r3, #64	@ 0x40
 800fc6e:	d109      	bne.n	800fc84 <UART_DMAError+0x60>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2b22      	cmp	r3, #34	@ 0x22
 800fc74:	d106      	bne.n	800fc84 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800fc7e:	6978      	ldr	r0, [r7, #20]
 800fc80:	f7ff fe84 	bl	800f98c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fc8a:	f043 0210 	orr.w	r2, r3, #16
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc94:	6978      	ldr	r0, [r7, #20]
 800fc96:	f7f5 fe35 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc9a:	bf00      	nop
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	f7f5 fe23 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcbe:	bf00      	nop
 800fcc0:	3710      	adds	r7, #16
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b088      	sub	sp, #32
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	e853 3f00 	ldrex	r3, [r3]
 800fcda:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fce2:	61fb      	str	r3, [r7, #28]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	461a      	mov	r2, r3
 800fcea:	69fb      	ldr	r3, [r7, #28]
 800fcec:	61bb      	str	r3, [r7, #24]
 800fcee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf0:	6979      	ldr	r1, [r7, #20]
 800fcf2:	69ba      	ldr	r2, [r7, #24]
 800fcf4:	e841 2300 	strex	r3, r2, [r1]
 800fcf8:	613b      	str	r3, [r7, #16]
   return(result);
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e6      	bne.n	800fcce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2220      	movs	r2, #32
 800fd04:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7ff f997 	bl	800f040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd12:	bf00      	nop
 800fd14:	3720      	adds	r7, #32
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
	...

0800fd1c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d121      	bne.n	800fd72 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	4b27      	ldr	r3, [pc, #156]	@ (800fdd0 <FMC_SDRAM_Init+0xb4>)
 800fd34:	4013      	ands	r3, r2
 800fd36:	683a      	ldr	r2, [r7, #0]
 800fd38:	6851      	ldr	r1, [r2, #4]
 800fd3a:	683a      	ldr	r2, [r7, #0]
 800fd3c:	6892      	ldr	r2, [r2, #8]
 800fd3e:	4311      	orrs	r1, r2
 800fd40:	683a      	ldr	r2, [r7, #0]
 800fd42:	68d2      	ldr	r2, [r2, #12]
 800fd44:	4311      	orrs	r1, r2
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	6912      	ldr	r2, [r2, #16]
 800fd4a:	4311      	orrs	r1, r2
 800fd4c:	683a      	ldr	r2, [r7, #0]
 800fd4e:	6952      	ldr	r2, [r2, #20]
 800fd50:	4311      	orrs	r1, r2
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	6992      	ldr	r2, [r2, #24]
 800fd56:	4311      	orrs	r1, r2
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	69d2      	ldr	r2, [r2, #28]
 800fd5c:	4311      	orrs	r1, r2
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	6a12      	ldr	r2, [r2, #32]
 800fd62:	4311      	orrs	r1, r2
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fd68:	430a      	orrs	r2, r1
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	e026      	b.n	800fdc0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	69d9      	ldr	r1, [r3, #28]
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	4319      	orrs	r1, r3
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd88:	430b      	orrs	r3, r1
 800fd8a:	431a      	orrs	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd0 <FMC_SDRAM_Init+0xb4>)
 800fd96:	4013      	ands	r3, r2
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	6851      	ldr	r1, [r2, #4]
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	6892      	ldr	r2, [r2, #8]
 800fda0:	4311      	orrs	r1, r2
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	68d2      	ldr	r2, [r2, #12]
 800fda6:	4311      	orrs	r1, r2
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	6912      	ldr	r2, [r2, #16]
 800fdac:	4311      	orrs	r1, r2
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	6952      	ldr	r2, [r2, #20]
 800fdb2:	4311      	orrs	r1, r2
 800fdb4:	683a      	ldr	r2, [r7, #0]
 800fdb6:	6992      	ldr	r2, [r2, #24]
 800fdb8:	430a      	orrs	r2, r1
 800fdba:	431a      	orrs	r2, r3
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	370c      	adds	r7, #12
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	ffff8000 	.word	0xffff8000

0800fdd4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d128      	bne.n	800fe38 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	1e59      	subs	r1, r3, #1
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	011b      	lsls	r3, r3, #4
 800fdfc:	4319      	orrs	r1, r3
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	021b      	lsls	r3, r3, #8
 800fe06:	4319      	orrs	r1, r3
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	031b      	lsls	r3, r3, #12
 800fe10:	4319      	orrs	r1, r3
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	3b01      	subs	r3, #1
 800fe18:	041b      	lsls	r3, r3, #16
 800fe1a:	4319      	orrs	r1, r3
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	695b      	ldr	r3, [r3, #20]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	051b      	lsls	r3, r3, #20
 800fe24:	4319      	orrs	r1, r3
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	699b      	ldr	r3, [r3, #24]
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	061b      	lsls	r3, r3, #24
 800fe2e:	430b      	orrs	r3, r1
 800fe30:	431a      	orrs	r2, r3
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	609a      	str	r2, [r3, #8]
 800fe36:	e02d      	b.n	800fe94 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	689a      	ldr	r2, [r3, #8]
 800fe3c:	4b19      	ldr	r3, [pc, #100]	@ (800fea4 <FMC_SDRAM_Timing_Init+0xd0>)
 800fe3e:	4013      	ands	r3, r2
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	68d2      	ldr	r2, [r2, #12]
 800fe44:	3a01      	subs	r2, #1
 800fe46:	0311      	lsls	r1, r2, #12
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	6952      	ldr	r2, [r2, #20]
 800fe4c:	3a01      	subs	r2, #1
 800fe4e:	0512      	lsls	r2, r2, #20
 800fe50:	430a      	orrs	r2, r1
 800fe52:	431a      	orrs	r2, r3
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	1e59      	subs	r1, r3, #1
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	011b      	lsls	r3, r3, #4
 800fe6e:	4319      	orrs	r1, r3
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	3b01      	subs	r3, #1
 800fe76:	021b      	lsls	r3, r3, #8
 800fe78:	4319      	orrs	r1, r3
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	041b      	lsls	r3, r3, #16
 800fe82:	4319      	orrs	r1, r3
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	699b      	ldr	r3, [r3, #24]
 800fe88:	3b01      	subs	r3, #1
 800fe8a:	061b      	lsls	r3, r3, #24
 800fe8c:	430b      	orrs	r3, r1
 800fe8e:	431a      	orrs	r2, r3
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3714      	adds	r7, #20
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
 800fea4:	ff0f0fff 	.word	0xff0f0fff

0800fea8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fea8:	b084      	sub	sp, #16
 800feaa:	b480      	push	{r7}
 800feac:	b085      	sub	sp, #20
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
 800feb2:	f107 001c 	add.w	r0, r7, #28
 800feb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800febe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fec0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fec2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fec6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800feca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fece:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fed2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fed4:	68fa      	ldr	r2, [r7, #12]
 800fed6:	4313      	orrs	r3, r2
 800fed8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	4b07      	ldr	r3, [pc, #28]	@ (800fefc <SDMMC_Init+0x54>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	431a      	orrs	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3714      	adds	r7, #20
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	b004      	add	sp, #16
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	ffff8100 	.word	0xffff8100

0800ff00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	370c      	adds	r7, #12
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ff1a:	b480      	push	{r7}
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2203      	movs	r2, #3
 800ff48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f003 0303 	and.w	r3, r3, #3
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ff92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ff98:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ff9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	68da      	ldr	r2, [r3, #12]
 800ffaa:	4b06      	ldr	r3, [pc, #24]	@ (800ffc4 <SDMMC_SendCommand+0x50>)
 800ffac:	4013      	ands	r3, r2
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	431a      	orrs	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3714      	adds	r7, #20
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr
 800ffc4:	fffff000 	.word	0xfffff000

0800ffc8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	b2db      	uxtb	r3, r3
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	370c      	adds	r7, #12
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ffe2:	b480      	push	{r7}
 800ffe4:	b085      	sub	sp, #20
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	3314      	adds	r3, #20
 800fff0:	461a      	mov	r2, r3
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	4413      	add	r3, r2
 800fff6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
}  
 800fffc:	4618      	mov	r0, r3
 800fffe:	3714      	adds	r7, #20
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010012:	2300      	movs	r3, #0
 8010014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	685a      	ldr	r2, [r3, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801002e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010034:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801003a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	4313      	orrs	r3, r2
 8010040:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010046:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	431a      	orrs	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010052:	2300      	movs	r3, #0

}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b088      	sub	sp, #32
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801006e:	2310      	movs	r3, #16
 8010070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010072:	2340      	movs	r3, #64	@ 0x40
 8010074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010076:	2300      	movs	r3, #0
 8010078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801007a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801007e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010080:	f107 0308 	add.w	r3, r7, #8
 8010084:	4619      	mov	r1, r3
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7ff ff74 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801008c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010090:	2110      	movs	r1, #16
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 f9d6 	bl	8010444 <SDMMC_GetCmdResp1>
 8010098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801009a:	69fb      	ldr	r3, [r7, #28]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3720      	adds	r7, #32
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b088      	sub	sp, #32
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80100b2:	2311      	movs	r3, #17
 80100b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100b6:	2340      	movs	r3, #64	@ 0x40
 80100b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100ba:	2300      	movs	r3, #0
 80100bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100c4:	f107 0308 	add.w	r3, r7, #8
 80100c8:	4619      	mov	r1, r3
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7ff ff52 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80100d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100d4:	2111      	movs	r1, #17
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f9b4 	bl	8010444 <SDMMC_GetCmdResp1>
 80100dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100de:	69fb      	ldr	r3, [r7, #28]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3720      	adds	r7, #32
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b088      	sub	sp, #32
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80100f6:	2312      	movs	r3, #18
 80100f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100fa:	2340      	movs	r3, #64	@ 0x40
 80100fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100fe:	2300      	movs	r3, #0
 8010100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010108:	f107 0308 	add.w	r3, r7, #8
 801010c:	4619      	mov	r1, r3
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f7ff ff30 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010118:	2112      	movs	r1, #18
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 f992 	bl	8010444 <SDMMC_GetCmdResp1>
 8010120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010122:	69fb      	ldr	r3, [r7, #28]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3720      	adds	r7, #32
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b088      	sub	sp, #32
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801013a:	2318      	movs	r3, #24
 801013c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801013e:	2340      	movs	r3, #64	@ 0x40
 8010140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010142:	2300      	movs	r3, #0
 8010144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801014a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801014c:	f107 0308 	add.w	r3, r7, #8
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff ff0e 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010158:	f241 3288 	movw	r2, #5000	@ 0x1388
 801015c:	2118      	movs	r1, #24
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 f970 	bl	8010444 <SDMMC_GetCmdResp1>
 8010164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010166:	69fb      	ldr	r3, [r7, #28]
}
 8010168:	4618      	mov	r0, r3
 801016a:	3720      	adds	r7, #32
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b088      	sub	sp, #32
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801017e:	2319      	movs	r3, #25
 8010180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010182:	2340      	movs	r3, #64	@ 0x40
 8010184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010186:	2300      	movs	r3, #0
 8010188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801018a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801018e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010190:	f107 0308 	add.w	r3, r7, #8
 8010194:	4619      	mov	r1, r3
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7ff feec 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801019c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101a0:	2119      	movs	r1, #25
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f94e 	bl	8010444 <SDMMC_GetCmdResp1>
 80101a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101aa:	69fb      	ldr	r3, [r7, #28]
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3720      	adds	r7, #32
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}

080101b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b088      	sub	sp, #32
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80101bc:	2300      	movs	r3, #0
 80101be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80101c0:	230c      	movs	r3, #12
 80101c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101c4:	2340      	movs	r3, #64	@ 0x40
 80101c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c8:	2300      	movs	r3, #0
 80101ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101d2:	f107 0308 	add.w	r3, r7, #8
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7ff fecb 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80101de:	4a05      	ldr	r2, [pc, #20]	@ (80101f4 <SDMMC_CmdStopTransfer+0x40>)
 80101e0:	210c      	movs	r1, #12
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f92e 	bl	8010444 <SDMMC_GetCmdResp1>
 80101e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ea:	69fb      	ldr	r3, [r7, #28]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3720      	adds	r7, #32
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	05f5e100 	.word	0x05f5e100

080101f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	@ 0x28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010208:	2307      	movs	r3, #7
 801020a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801020c:	2340      	movs	r3, #64	@ 0x40
 801020e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010210:	2300      	movs	r3, #0
 8010212:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010218:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801021a:	f107 0310 	add.w	r3, r7, #16
 801021e:	4619      	mov	r1, r3
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f7ff fea7 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010226:	f241 3288 	movw	r2, #5000	@ 0x1388
 801022a:	2107      	movs	r1, #7
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f000 f909 	bl	8010444 <SDMMC_GetCmdResp1>
 8010232:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010236:	4618      	mov	r0, r3
 8010238:	3728      	adds	r7, #40	@ 0x28
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b088      	sub	sp, #32
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010246:	2300      	movs	r3, #0
 8010248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801024e:	2300      	movs	r3, #0
 8010250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010252:	2300      	movs	r3, #0
 8010254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801025a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801025c:	f107 0308 	add.w	r3, r7, #8
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f7ff fe86 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fb23 	bl	80108b4 <SDMMC_GetCmdError>
 801026e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010270:	69fb      	ldr	r3, [r7, #28]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3720      	adds	r7, #32
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b088      	sub	sp, #32
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010282:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010288:	2308      	movs	r3, #8
 801028a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801028c:	2340      	movs	r3, #64	@ 0x40
 801028e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010290:	2300      	movs	r3, #0
 8010292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010294:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010298:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801029a:	f107 0308 	add.w	r3, r7, #8
 801029e:	4619      	mov	r1, r3
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7ff fe67 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 fab6 	bl	8010818 <SDMMC_GetCmdResp7>
 80102ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ae:	69fb      	ldr	r3, [r7, #28]
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3720      	adds	r7, #32
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80102c6:	2337      	movs	r3, #55	@ 0x37
 80102c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ca:	2340      	movs	r3, #64	@ 0x40
 80102cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102ce:	2300      	movs	r3, #0
 80102d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102d8:	f107 0308 	add.w	r3, r7, #8
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff fe48 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80102e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102e8:	2137      	movs	r1, #55	@ 0x37
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f000 f8aa 	bl	8010444 <SDMMC_GetCmdResp1>
 80102f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102f2:	69fb      	ldr	r3, [r7, #28]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3720      	adds	r7, #32
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b088      	sub	sp, #32
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	4b0d      	ldr	r3, [pc, #52]	@ (8010340 <SDMMC_CmdAppOperCommand+0x44>)
 801030a:	4313      	orrs	r3, r2
 801030c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801030e:	2329      	movs	r3, #41	@ 0x29
 8010310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010312:	2340      	movs	r3, #64	@ 0x40
 8010314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010316:	2300      	movs	r3, #0
 8010318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801031a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801031e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010320:	f107 0308 	add.w	r3, r7, #8
 8010324:	4619      	mov	r1, r3
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7ff fe24 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f9bf 	bl	80106b0 <SDMMC_GetCmdResp3>
 8010332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010334:	69fb      	ldr	r3, [r7, #28]
}
 8010336:	4618      	mov	r0, r3
 8010338:	3720      	adds	r7, #32
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	80100000 	.word	0x80100000

08010344 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b088      	sub	sp, #32
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801034c:	2300      	movs	r3, #0
 801034e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010350:	2302      	movs	r3, #2
 8010352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010354:	23c0      	movs	r3, #192	@ 0xc0
 8010356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010358:	2300      	movs	r3, #0
 801035a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801035c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010362:	f107 0308 	add.w	r3, r7, #8
 8010366:	4619      	mov	r1, r3
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff fe03 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 f956 	bl	8010620 <SDMMC_GetCmdResp2>
 8010374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010376:	69fb      	ldr	r3, [r7, #28]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3720      	adds	r7, #32
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b088      	sub	sp, #32
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801038e:	2309      	movs	r3, #9
 8010390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010392:	23c0      	movs	r3, #192	@ 0xc0
 8010394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010396:	2300      	movs	r3, #0
 8010398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801039a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801039e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103a0:	f107 0308 	add.w	r3, r7, #8
 80103a4:	4619      	mov	r1, r3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff fde4 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f937 	bl	8010620 <SDMMC_GetCmdResp2>
 80103b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b4:	69fb      	ldr	r3, [r7, #28]
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3720      	adds	r7, #32
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b088      	sub	sp, #32
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80103c8:	2300      	movs	r3, #0
 80103ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80103cc:	2303      	movs	r3, #3
 80103ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103d0:	2340      	movs	r3, #64	@ 0x40
 80103d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d4:	2300      	movs	r3, #0
 80103d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103de:	f107 0308 	add.w	r3, r7, #8
 80103e2:	4619      	mov	r1, r3
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff fdc5 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80103ea:	683a      	ldr	r2, [r7, #0]
 80103ec:	2103      	movs	r1, #3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f99c 	bl	801072c <SDMMC_GetCmdResp6>
 80103f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f6:	69fb      	ldr	r3, [r7, #28]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801040e:	230d      	movs	r3, #13
 8010410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010412:	2340      	movs	r3, #64	@ 0x40
 8010414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010416:	2300      	movs	r3, #0
 8010418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801041a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801041e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010420:	f107 0308 	add.w	r3, r7, #8
 8010424:	4619      	mov	r1, r3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff fda4 	bl	800ff74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801042c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010430:	210d      	movs	r1, #13
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f806 	bl	8010444 <SDMMC_GetCmdResp1>
 8010438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043a:	69fb      	ldr	r3, [r7, #28]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	460b      	mov	r3, r1
 801044e:	607a      	str	r2, [r7, #4]
 8010450:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010452:	4b70      	ldr	r3, [pc, #448]	@ (8010614 <SDMMC_GetCmdResp1+0x1d0>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a70      	ldr	r2, [pc, #448]	@ (8010618 <SDMMC_GetCmdResp1+0x1d4>)
 8010458:	fba2 2303 	umull	r2, r3, r2, r3
 801045c:	0a5a      	lsrs	r2, r3, #9
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	fb02 f303 	mul.w	r3, r2, r3
 8010464:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	1e5a      	subs	r2, r3, #1
 801046a:	61fa      	str	r2, [r7, #28]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d102      	bne.n	8010476 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010470:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010474:	e0c9      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801047a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010482:	2b00      	cmp	r3, #0
 8010484:	d0ef      	beq.n	8010466 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1ea      	bne.n	8010466 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b00      	cmp	r3, #0
 801049a:	d004      	beq.n	80104a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2204      	movs	r2, #4
 80104a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80104a2:	2304      	movs	r3, #4
 80104a4:	e0b1      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d004      	beq.n	80104bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2201      	movs	r2, #1
 80104b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80104b8:	2301      	movs	r3, #1
 80104ba:	e0a6      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	22c5      	movs	r2, #197	@ 0xc5
 80104c0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff fd80 	bl	800ffc8 <SDMMC_GetCommandResponse>
 80104c8:	4603      	mov	r3, r0
 80104ca:	461a      	mov	r2, r3
 80104cc:	7afb      	ldrb	r3, [r7, #11]
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d001      	beq.n	80104d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80104d2:	2301      	movs	r3, #1
 80104d4:	e099      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80104d6:	2100      	movs	r1, #0
 80104d8:	68f8      	ldr	r0, [r7, #12]
 80104da:	f7ff fd82 	bl	800ffe2 <SDMMC_GetResponse>
 80104de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80104e0:	697a      	ldr	r2, [r7, #20]
 80104e2:	4b4e      	ldr	r3, [pc, #312]	@ (801061c <SDMMC_GetCmdResp1+0x1d8>)
 80104e4:	4013      	ands	r3, r2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80104ea:	2300      	movs	r3, #0
 80104ec:	e08d      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	da02      	bge.n	80104fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80104f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80104f8:	e087      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010500:	2b00      	cmp	r3, #0
 8010502:	d001      	beq.n	8010508 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010504:	2340      	movs	r3, #64	@ 0x40
 8010506:	e080      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801050e:	2b00      	cmp	r3, #0
 8010510:	d001      	beq.n	8010516 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010512:	2380      	movs	r3, #128	@ 0x80
 8010514:	e079      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010524:	e071      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801052c:	2b00      	cmp	r3, #0
 801052e:	d002      	beq.n	8010536 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010534:	e069      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010540:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010544:	e061      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010554:	e059      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010564:	e051      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010574:	e049      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010580:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010584:	e041      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d002      	beq.n	8010596 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010594:	e039      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80105a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80105a4:	e031      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d002      	beq.n	80105b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80105b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80105b4:	e029      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d002      	beq.n	80105c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80105c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80105c4:	e021      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d002      	beq.n	80105d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80105d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80105d4:	e019      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d002      	beq.n	80105e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80105e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80105e4:	e011      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80105f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80105f4:	e009      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	f003 0308 	and.w	r3, r3, #8
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010600:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010604:	e001      	b.n	801060a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010606:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801060a:	4618      	mov	r0, r3
 801060c:	3720      	adds	r7, #32
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	2000001c 	.word	0x2000001c
 8010618:	10624dd3 	.word	0x10624dd3
 801061c:	fdffe008 	.word	0xfdffe008

08010620 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010628:	4b1f      	ldr	r3, [pc, #124]	@ (80106a8 <SDMMC_GetCmdResp2+0x88>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a1f      	ldr	r2, [pc, #124]	@ (80106ac <SDMMC_GetCmdResp2+0x8c>)
 801062e:	fba2 2303 	umull	r2, r3, r2, r3
 8010632:	0a5b      	lsrs	r3, r3, #9
 8010634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010638:	fb02 f303 	mul.w	r3, r2, r3
 801063c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	1e5a      	subs	r2, r3, #1
 8010642:	60fa      	str	r2, [r7, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d102      	bne.n	801064e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801064c:	e026      	b.n	801069c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010652:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801065a:	2b00      	cmp	r3, #0
 801065c:	d0ef      	beq.n	801063e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010664:	2b00      	cmp	r3, #0
 8010666:	d1ea      	bne.n	801063e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801066c:	f003 0304 	and.w	r3, r3, #4
 8010670:	2b00      	cmp	r3, #0
 8010672:	d004      	beq.n	801067e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2204      	movs	r2, #4
 8010678:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801067a:	2304      	movs	r3, #4
 801067c:	e00e      	b.n	801069c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010682:	f003 0301 	and.w	r3, r3, #1
 8010686:	2b00      	cmp	r3, #0
 8010688:	d004      	beq.n	8010694 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2201      	movs	r2, #1
 801068e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010690:	2301      	movs	r3, #1
 8010692:	e003      	b.n	801069c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	22c5      	movs	r2, #197	@ 0xc5
 8010698:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3714      	adds	r7, #20
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	2000001c 	.word	0x2000001c
 80106ac:	10624dd3 	.word	0x10624dd3

080106b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106b8:	4b1a      	ldr	r3, [pc, #104]	@ (8010724 <SDMMC_GetCmdResp3+0x74>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a1a      	ldr	r2, [pc, #104]	@ (8010728 <SDMMC_GetCmdResp3+0x78>)
 80106be:	fba2 2303 	umull	r2, r3, r2, r3
 80106c2:	0a5b      	lsrs	r3, r3, #9
 80106c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80106c8:	fb02 f303 	mul.w	r3, r2, r3
 80106cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	1e5a      	subs	r2, r3, #1
 80106d2:	60fa      	str	r2, [r7, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d102      	bne.n	80106de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80106dc:	e01b      	b.n	8010716 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d0ef      	beq.n	80106ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1ea      	bne.n	80106ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106fc:	f003 0304 	and.w	r3, r3, #4
 8010700:	2b00      	cmp	r3, #0
 8010702:	d004      	beq.n	801070e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2204      	movs	r2, #4
 8010708:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801070a:	2304      	movs	r3, #4
 801070c:	e003      	b.n	8010716 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	22c5      	movs	r2, #197	@ 0xc5
 8010712:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	2000001c 	.word	0x2000001c
 8010728:	10624dd3 	.word	0x10624dd3

0801072c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b088      	sub	sp, #32
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	460b      	mov	r3, r1
 8010736:	607a      	str	r2, [r7, #4]
 8010738:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801073a:	4b35      	ldr	r3, [pc, #212]	@ (8010810 <SDMMC_GetCmdResp6+0xe4>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	4a35      	ldr	r2, [pc, #212]	@ (8010814 <SDMMC_GetCmdResp6+0xe8>)
 8010740:	fba2 2303 	umull	r2, r3, r2, r3
 8010744:	0a5b      	lsrs	r3, r3, #9
 8010746:	f241 3288 	movw	r2, #5000	@ 0x1388
 801074a:	fb02 f303 	mul.w	r3, r2, r3
 801074e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	1e5a      	subs	r2, r3, #1
 8010754:	61fa      	str	r2, [r7, #28]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d102      	bne.n	8010760 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801075a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801075e:	e052      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010764:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801076c:	2b00      	cmp	r3, #0
 801076e:	d0ef      	beq.n	8010750 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1ea      	bne.n	8010750 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801077e:	f003 0304 	and.w	r3, r3, #4
 8010782:	2b00      	cmp	r3, #0
 8010784:	d004      	beq.n	8010790 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2204      	movs	r2, #4
 801078a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801078c:	2304      	movs	r3, #4
 801078e:	e03a      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010794:	f003 0301 	and.w	r3, r3, #1
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2201      	movs	r2, #1
 80107a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107a2:	2301      	movs	r3, #1
 80107a4:	e02f      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f7ff fc0e 	bl	800ffc8 <SDMMC_GetCommandResponse>
 80107ac:	4603      	mov	r3, r0
 80107ae:	461a      	mov	r2, r3
 80107b0:	7afb      	ldrb	r3, [r7, #11]
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d001      	beq.n	80107ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107b6:	2301      	movs	r3, #1
 80107b8:	e025      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	22c5      	movs	r2, #197	@ 0xc5
 80107be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80107c0:	2100      	movs	r1, #0
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	f7ff fc0d 	bl	800ffe2 <SDMMC_GetResponse>
 80107c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d106      	bne.n	80107e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	0c1b      	lsrs	r3, r3, #16
 80107d8:	b29a      	uxth	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80107de:	2300      	movs	r3, #0
 80107e0:	e011      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80107ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80107f0:	e009      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d002      	beq.n	8010802 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80107fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010800:	e001      	b.n	8010806 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010802:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010806:	4618      	mov	r0, r3
 8010808:	3720      	adds	r7, #32
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	2000001c 	.word	0x2000001c
 8010814:	10624dd3 	.word	0x10624dd3

08010818 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010818:	b480      	push	{r7}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010820:	4b22      	ldr	r3, [pc, #136]	@ (80108ac <SDMMC_GetCmdResp7+0x94>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a22      	ldr	r2, [pc, #136]	@ (80108b0 <SDMMC_GetCmdResp7+0x98>)
 8010826:	fba2 2303 	umull	r2, r3, r2, r3
 801082a:	0a5b      	lsrs	r3, r3, #9
 801082c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010830:	fb02 f303 	mul.w	r3, r2, r3
 8010834:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	1e5a      	subs	r2, r3, #1
 801083a:	60fa      	str	r2, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d102      	bne.n	8010846 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010840:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010844:	e02c      	b.n	80108a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801084a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010852:	2b00      	cmp	r3, #0
 8010854:	d0ef      	beq.n	8010836 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1ea      	bne.n	8010836 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010864:	f003 0304 	and.w	r3, r3, #4
 8010868:	2b00      	cmp	r3, #0
 801086a:	d004      	beq.n	8010876 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2204      	movs	r2, #4
 8010870:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010872:	2304      	movs	r3, #4
 8010874:	e014      	b.n	80108a0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801087a:	f003 0301 	and.w	r3, r3, #1
 801087e:	2b00      	cmp	r3, #0
 8010880:	d004      	beq.n	801088c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2201      	movs	r2, #1
 8010886:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010888:	2301      	movs	r3, #1
 801088a:	e009      	b.n	80108a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2240      	movs	r2, #64	@ 0x40
 801089c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801089e:	2300      	movs	r3, #0
  
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	2000001c 	.word	0x2000001c
 80108b0:	10624dd3 	.word	0x10624dd3

080108b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108bc:	4b11      	ldr	r3, [pc, #68]	@ (8010904 <SDMMC_GetCmdError+0x50>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a11      	ldr	r2, [pc, #68]	@ (8010908 <SDMMC_GetCmdError+0x54>)
 80108c2:	fba2 2303 	umull	r2, r3, r2, r3
 80108c6:	0a5b      	lsrs	r3, r3, #9
 80108c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108cc:	fb02 f303 	mul.w	r3, r2, r3
 80108d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	1e5a      	subs	r2, r3, #1
 80108d6:	60fa      	str	r2, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d102      	bne.n	80108e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108e0:	e009      	b.n	80108f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0f1      	beq.n	80108d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	22c5      	movs	r2, #197	@ 0xc5
 80108f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3714      	adds	r7, #20
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	2000001c 	.word	0x2000001c
 8010908:	10624dd3 	.word	0x10624dd3

0801090c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	f043 0201 	orr.w	r2, r3, #1
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	370c      	adds	r7, #12
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr

0801092e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801092e:	b480      	push	{r7}
 8010930:	b083      	sub	sp, #12
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	f023 0201 	bic.w	r2, r3, #1
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010942:	2300      	movs	r3, #0
}
 8010944:	4618      	mov	r0, r3
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010950:	b480      	push	{r7}
 8010952:	b085      	sub	sp, #20
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801095a:	2300      	movs	r3, #0
 801095c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	3301      	adds	r3, #1
 8010962:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801096a:	d901      	bls.n	8010970 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801096c:	2303      	movs	r3, #3
 801096e:	e01b      	b.n	80109a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	691b      	ldr	r3, [r3, #16]
 8010974:	2b00      	cmp	r3, #0
 8010976:	daf2      	bge.n	801095e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010978:	2300      	movs	r3, #0
 801097a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	019b      	lsls	r3, r3, #6
 8010980:	f043 0220 	orr.w	r2, r3, #32
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	3301      	adds	r3, #1
 801098c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010994:	d901      	bls.n	801099a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010996:	2303      	movs	r3, #3
 8010998:	e006      	b.n	80109a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	691b      	ldr	r3, [r3, #16]
 801099e:	f003 0320 	and.w	r3, r3, #32
 80109a2:	2b20      	cmp	r3, #32
 80109a4:	d0f0      	beq.n	8010988 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80109bc:	2300      	movs	r3, #0
 80109be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	3301      	adds	r3, #1
 80109c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109cc:	d901      	bls.n	80109d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80109ce:	2303      	movs	r3, #3
 80109d0:	e018      	b.n	8010a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	691b      	ldr	r3, [r3, #16]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	daf2      	bge.n	80109c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80109da:	2300      	movs	r3, #0
 80109dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2210      	movs	r2, #16
 80109e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	3301      	adds	r3, #1
 80109e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109f0:	d901      	bls.n	80109f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80109f2:	2303      	movs	r3, #3
 80109f4:	e006      	b.n	8010a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	f003 0310 	and.w	r3, r3, #16
 80109fe:	2b10      	cmp	r3, #16
 8010a00:	d0f0      	beq.n	80109e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b08b      	sub	sp, #44	@ 0x2c
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010a26:	88fb      	ldrh	r3, [r7, #6]
 8010a28:	089b      	lsrs	r3, r3, #2
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010a2e:	88fb      	ldrh	r3, [r7, #6]
 8010a30:	f003 0303 	and.w	r3, r3, #3
 8010a34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010a36:	2300      	movs	r3, #0
 8010a38:	623b      	str	r3, [r7, #32]
 8010a3a:	e014      	b.n	8010a66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a46:	601a      	str	r2, [r3, #0]
    pDest++;
 8010a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a50:	3301      	adds	r3, #1
 8010a52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a56:	3301      	adds	r3, #1
 8010a58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	3301      	adds	r3, #1
 8010a64:	623b      	str	r3, [r7, #32]
 8010a66:	6a3a      	ldr	r2, [r7, #32]
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d3e6      	bcc.n	8010a3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010a6e:	8bfb      	ldrh	r3, [r7, #30]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01e      	beq.n	8010ab2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010a74:	2300      	movs	r3, #0
 8010a76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a7e:	461a      	mov	r2, r3
 8010a80:	f107 0310 	add.w	r3, r7, #16
 8010a84:	6812      	ldr	r2, [r2, #0]
 8010a86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010a88:	693a      	ldr	r2, [r7, #16]
 8010a8a:	6a3b      	ldr	r3, [r7, #32]
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	00db      	lsls	r3, r3, #3
 8010a90:	fa22 f303 	lsr.w	r3, r2, r3
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a98:	701a      	strb	r2, [r3, #0]
      i++;
 8010a9a:	6a3b      	ldr	r3, [r7, #32]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010aa6:	8bfb      	ldrh	r3, [r7, #30]
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010aac:	8bfb      	ldrh	r3, [r7, #30]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1ea      	bne.n	8010a88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	372c      	adds	r7, #44	@ 0x2c
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	695b      	ldr	r3, [r3, #20]
 8010acc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	4013      	ands	r3, r2
 8010ad6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3714      	adds	r7, #20
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b085      	sub	sp, #20
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	460b      	mov	r3, r1
 8010af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8010af6:	78fb      	ldrb	r3, [r7, #3]
 8010af8:	015a      	lsls	r2, r3, #5
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	4413      	add	r3, r2
 8010afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	015a      	lsls	r2, r3, #5
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	4013      	ands	r3, r2
 8010b18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b1a:	68bb      	ldr	r3, [r7, #8]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	695b      	ldr	r3, [r3, #20]
 8010b34:	f003 0301 	and.w	r3, r3, #1
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010b62:	f023 0303 	bic.w	r3, r3, #3
 8010b66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	78fb      	ldrb	r3, [r7, #3]
 8010b72:	f003 0303 	and.w	r3, r3, #3
 8010b76:	68f9      	ldr	r1, [r7, #12]
 8010b78:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010b80:	78fb      	ldrb	r3, [r7, #3]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d107      	bne.n	8010b96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010b92:	6053      	str	r3, [r2, #4]
 8010b94:	e00c      	b.n	8010bb0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010b96:	78fb      	ldrb	r3, [r7, #3]
 8010b98:	2b02      	cmp	r3, #2
 8010b9a:	d107      	bne.n	8010bac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010ba8:	6053      	str	r3, [r2, #4]
 8010baa:	e001      	b.n	8010bb0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010bac:	2301      	movs	r3, #1
 8010bae:	e000      	b.n	8010bb2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010bb0:	2300      	movs	r3, #0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3714      	adds	r7, #20
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr

08010bbe <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010bbe:	b480      	push	{r7}
 8010bc0:	b085      	sub	sp, #20
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010bd0:	695b      	ldr	r3, [r3, #20]
 8010bd2:	b29b      	uxth	r3, r3
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b089      	sub	sp, #36	@ 0x24
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	460b      	mov	r3, r1
 8010bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	015a      	lsls	r2, r3, #5
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	4413      	add	r3, r2
 8010c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	0c9b      	lsrs	r3, r3, #18
 8010c08:	f003 0303 	and.w	r3, r3, #3
 8010c0c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	015a      	lsls	r2, r3, #5
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	4413      	add	r3, r2
 8010c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	0fdb      	lsrs	r3, r3, #31
 8010c1e:	f003 0301 	and.w	r3, r3, #1
 8010c22:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	015a      	lsls	r2, r3, #5
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	0fdb      	lsrs	r3, r3, #31
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	689b      	ldr	r3, [r3, #8]
 8010c3e:	f003 0320 	and.w	r3, r3, #32
 8010c42:	2b20      	cmp	r3, #32
 8010c44:	d10d      	bne.n	8010c62 <USB_HC_Halt+0x82>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d10a      	bne.n	8010c62 <USB_HC_Halt+0x82>
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d005      	beq.n	8010c5e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d002      	beq.n	8010c5e <USB_HC_Halt+0x7e>
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d101      	bne.n	8010c62 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e0d8      	b.n	8010e14 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <USB_HC_Halt+0x8e>
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	2b02      	cmp	r3, #2
 8010c6c:	d173      	bne.n	8010d56 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	015a      	lsls	r2, r3, #5
 8010c72:	69fb      	ldr	r3, [r7, #28]
 8010c74:	4413      	add	r3, r2
 8010c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	69ba      	ldr	r2, [r7, #24]
 8010c7e:	0151      	lsls	r1, r2, #5
 8010c80:	69fa      	ldr	r2, [r7, #28]
 8010c82:	440a      	add	r2, r1
 8010c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010c88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010c8c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	689b      	ldr	r3, [r3, #8]
 8010c92:	f003 0320 	and.w	r3, r3, #32
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d14a      	bne.n	8010d30 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c9e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d133      	bne.n	8010d0e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	015a      	lsls	r2, r3, #5
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	4413      	add	r3, r2
 8010cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	69ba      	ldr	r2, [r7, #24]
 8010cb6:	0151      	lsls	r1, r2, #5
 8010cb8:	69fa      	ldr	r2, [r7, #28]
 8010cba:	440a      	add	r2, r1
 8010cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010cc4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	015a      	lsls	r2, r3, #5
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	4413      	add	r3, r2
 8010cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	69ba      	ldr	r2, [r7, #24]
 8010cd6:	0151      	lsls	r1, r2, #5
 8010cd8:	69fa      	ldr	r2, [r7, #28]
 8010cda:	440a      	add	r2, r1
 8010cdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010ce0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ce4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010cf2:	d82e      	bhi.n	8010d52 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	015a      	lsls	r2, r3, #5
 8010cf8:	69fb      	ldr	r3, [r7, #28]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d0a:	d0ec      	beq.n	8010ce6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010d0c:	e081      	b.n	8010e12 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	69ba      	ldr	r2, [r7, #24]
 8010d1e:	0151      	lsls	r1, r2, #5
 8010d20:	69fa      	ldr	r2, [r7, #28]
 8010d22:	440a      	add	r2, r1
 8010d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010d2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010d2e:	e070      	b.n	8010e12 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	015a      	lsls	r2, r3, #5
 8010d34:	69fb      	ldr	r3, [r7, #28]
 8010d36:	4413      	add	r3, r2
 8010d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	69ba      	ldr	r2, [r7, #24]
 8010d40:	0151      	lsls	r1, r2, #5
 8010d42:	69fa      	ldr	r2, [r7, #28]
 8010d44:	440a      	add	r2, r1
 8010d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010d4e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010d50:	e05f      	b.n	8010e12 <USB_HC_Halt+0x232>
            break;
 8010d52:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010d54:	e05d      	b.n	8010e12 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8010d56:	69bb      	ldr	r3, [r7, #24]
 8010d58:	015a      	lsls	r2, r3, #5
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	69ba      	ldr	r2, [r7, #24]
 8010d66:	0151      	lsls	r1, r2, #5
 8010d68:	69fa      	ldr	r2, [r7, #28]
 8010d6a:	440a      	add	r2, r1
 8010d6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010d74:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010d7c:	691b      	ldr	r3, [r3, #16]
 8010d7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d133      	bne.n	8010dee <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	015a      	lsls	r2, r3, #5
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	69ba      	ldr	r2, [r7, #24]
 8010d96:	0151      	lsls	r1, r2, #5
 8010d98:	69fa      	ldr	r2, [r7, #28]
 8010d9a:	440a      	add	r2, r1
 8010d9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010da0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010da4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	015a      	lsls	r2, r3, #5
 8010daa:	69fb      	ldr	r3, [r7, #28]
 8010dac:	4413      	add	r3, r2
 8010dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	0151      	lsls	r1, r2, #5
 8010db8:	69fa      	ldr	r2, [r7, #28]
 8010dba:	440a      	add	r2, r1
 8010dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010dc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010dc4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010dd2:	d81d      	bhi.n	8010e10 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	015a      	lsls	r2, r3, #5
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	4413      	add	r3, r2
 8010ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010dea:	d0ec      	beq.n	8010dc6 <USB_HC_Halt+0x1e6>
 8010dec:	e011      	b.n	8010e12 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	015a      	lsls	r2, r3, #5
 8010df2:	69fb      	ldr	r3, [r7, #28]
 8010df4:	4413      	add	r3, r2
 8010df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	69ba      	ldr	r2, [r7, #24]
 8010dfe:	0151      	lsls	r1, r2, #5
 8010e00:	69fa      	ldr	r2, [r7, #28]
 8010e02:	440a      	add	r2, r1
 8010e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010e08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	e000      	b.n	8010e12 <USB_HC_Halt+0x232>
          break;
 8010e10:	bf00      	nop
    }
  }

  return HAL_OK;
 8010e12:	2300      	movs	r3, #0
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3724      	adds	r7, #36	@ 0x24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b088      	sub	sp, #32
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8010e30:	2300      	movs	r3, #0
 8010e32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff fd7a 	bl	801092e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010e3a:	2110      	movs	r1, #16
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7ff fd87 	bl	8010950 <USB_FlushTxFifo>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f7ff fdb1 	bl	80109b4 <USB_FlushRxFifo>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	61bb      	str	r3, [r7, #24]
 8010e60:	e01f      	b.n	8010ea2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	015a      	lsls	r2, r3, #5
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	4413      	add	r3, r2
 8010e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010e78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010e88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	015a      	lsls	r2, r3, #5
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	4413      	add	r3, r2
 8010e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010e96:	461a      	mov	r2, r3
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	61bb      	str	r3, [r7, #24]
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	2b0f      	cmp	r3, #15
 8010ea6:	d9dc      	bls.n	8010e62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	61bb      	str	r3, [r7, #24]
 8010eac:	e034      	b.n	8010f18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	015a      	lsls	r2, r3, #5
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	4413      	add	r3, r2
 8010eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010ec4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ecc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010ed4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	015a      	lsls	r2, r3, #5
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	4413      	add	r3, r2
 8010ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	3301      	adds	r3, #1
 8010eec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010ef4:	d80c      	bhi.n	8010f10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	015a      	lsls	r2, r3, #5
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	4413      	add	r3, r2
 8010efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010f0c:	d0ec      	beq.n	8010ee8 <USB_StopHost+0xc8>
 8010f0e:	e000      	b.n	8010f12 <USB_StopHost+0xf2>
        break;
 8010f10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	3301      	adds	r3, #1
 8010f16:	61bb      	str	r3, [r7, #24]
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	2b0f      	cmp	r3, #15
 8010f1c:	d9c7      	bls.n	8010eae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010f24:	461a      	mov	r2, r3
 8010f26:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7ff fce9 	bl	801090c <USB_EnableGlobalInt>

  return ret;
 8010f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3720      	adds	r7, #32
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}

08010f44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f48:	4904      	ldr	r1, [pc, #16]	@ (8010f5c <MX_FATFS_Init+0x18>)
 8010f4a:	4805      	ldr	r0, [pc, #20]	@ (8010f60 <MX_FATFS_Init+0x1c>)
 8010f4c:	f003 f9c4 	bl	80142d8 <FATFS_LinkDriver>
 8010f50:	4603      	mov	r3, r0
 8010f52:	461a      	mov	r2, r3
 8010f54:	4b03      	ldr	r3, [pc, #12]	@ (8010f64 <MX_FATFS_Init+0x20>)
 8010f56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010f58:	bf00      	nop
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	200017ac 	.word	0x200017ac
 8010f60:	0801b384 	.word	0x0801b384
 8010f64:	200017a8 	.word	0x200017a8

08010f68 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010f6c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b088      	sub	sp, #32
 8010f7c:	af02      	add	r7, sp, #8
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
 8010f84:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010f86:	2300      	movs	r3, #0
 8010f88:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	9300      	str	r3, [sp, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	68f9      	ldr	r1, [r7, #12]
 8010f94:	4806      	ldr	r0, [pc, #24]	@ (8010fb0 <BSP_SD_ReadBlocks+0x38>)
 8010f96:	f7fb f9e3 	bl	800c360 <HAL_SD_ReadBlocks>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	20000e70 	.word	0x20000e70

08010fb4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b088      	sub	sp, #32
 8010fb8:	af02      	add	r7, sp, #8
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
 8010fc0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	9300      	str	r3, [sp, #0]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	68f9      	ldr	r1, [r7, #12]
 8010fd0:	4806      	ldr	r0, [pc, #24]	@ (8010fec <BSP_SD_WriteBlocks+0x38>)
 8010fd2:	f7fb fba3 	bl	800c71c <HAL_SD_WriteBlocks>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	20000e70 	.word	0x20000e70

08010ff0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010ff4:	4805      	ldr	r0, [pc, #20]	@ (801100c <BSP_SD_GetCardState+0x1c>)
 8010ff6:	f7fb fee7 	bl	800cdc8 <HAL_SD_GetCardState>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b04      	cmp	r3, #4
 8010ffe:	bf14      	ite	ne
 8011000:	2301      	movne	r3, #1
 8011002:	2300      	moveq	r3, #0
 8011004:	b2db      	uxtb	r3, r3
}
 8011006:	4618      	mov	r0, r3
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	20000e70 	.word	0x20000e70

08011010 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011018:	6879      	ldr	r1, [r7, #4]
 801101a:	4803      	ldr	r0, [pc, #12]	@ (8011028 <BSP_SD_GetCardInfo+0x18>)
 801101c:	f7fb fea8 	bl	800cd70 <HAL_SD_GetCardInfo>
}
 8011020:	bf00      	nop
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	20000e70 	.word	0x20000e70

0801102c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011034:	f003 f99c 	bl	8014370 <osKernelSysTick>
 8011038:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801103a:	e006      	b.n	801104a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801103c:	f7ff ffd8 	bl	8010ff0 <BSP_SD_GetCardState>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d101      	bne.n	801104a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011046:	2300      	movs	r3, #0
 8011048:	e009      	b.n	801105e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801104a:	f003 f991 	bl	8014370 <osKernelSysTick>
 801104e:	4602      	mov	r2, r0
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	429a      	cmp	r2, r3
 8011058:	d8f0      	bhi.n	801103c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801105e:	4618      	mov	r0, r3
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
	...

08011068 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	71fb      	strb	r3, [r7, #7]
  // HAL 기반 카드 상태 확인 (BSP 우회)
  HAL_SD_CardStateTypeDef cardState = HAL_SD_GetCardState(&hsd1);
 8011072:	480e      	ldr	r0, [pc, #56]	@ (80110ac <SD_CheckStatus+0x44>)
 8011074:	f7fb fea8 	bl	800cdc8 <HAL_SD_GetCardState>
 8011078:	60f8      	str	r0, [r7, #12]
  
  // SD 카드 상태 확인
  
  if(cardState == HAL_SD_CARD_TRANSFER)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b04      	cmp	r3, #4
 801107e:	d103      	bne.n	8011088 <SD_CheckStatus+0x20>
  {
    // 카드가 TRANSFER 상태이면 초기화 완료로 간주
    Stat = 0;  // 모든 에러 플래그 클리어
 8011080:	4b0b      	ldr	r3, [pc, #44]	@ (80110b0 <SD_CheckStatus+0x48>)
 8011082:	2200      	movs	r2, #0
 8011084:	701a      	strb	r2, [r3, #0]
 8011086:	e00a      	b.n	801109e <SD_CheckStatus+0x36>
    // SD 카드 준비됨
  }
  else
  {
    // 카드가 준비되지 않은 상태
    Stat = STA_NOINIT;
 8011088:	4b09      	ldr	r3, [pc, #36]	@ (80110b0 <SD_CheckStatus+0x48>)
 801108a:	2201      	movs	r2, #1
 801108c:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[sd_diskio] SD card status: NOT_READY (0x%02X)", Stat);
 801108e:	4b08      	ldr	r3, [pc, #32]	@ (80110b0 <SD_CheckStatus+0x48>)
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	b2db      	uxtb	r3, r3
 8011094:	461a      	mov	r2, r3
 8011096:	4907      	ldr	r1, [pc, #28]	@ (80110b4 <SD_CheckStatus+0x4c>)
 8011098:	2002      	movs	r0, #2
 801109a:	f7f3 ffd9 	bl	8005050 <LOGGER_SendFormatted>
  }

  return Stat;
 801109e:	4b04      	ldr	r3, [pc, #16]	@ (80110b0 <SD_CheckStatus+0x48>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	b2db      	uxtb	r3, r3
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3710      	adds	r7, #16
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	20000e70 	.word	0x20000e70
 80110b0:	2000006d 	.word	0x2000006d
 80110b4:	0801b064 	.word	0x0801b064

080110b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80110b8:	b590      	push	{r4, r7, lr}
 80110ba:	b089      	sub	sp, #36	@ 0x24
 80110bc:	af00      	add	r7, sp, #0
 80110be:	4603      	mov	r3, r0
 80110c0:	71fb      	strb	r3, [r7, #7]
  LOG_INFO("[sd_diskio] SD_initialize called");
 80110c2:	493d      	ldr	r1, [pc, #244]	@ (80111b8 <SD_initialize+0x100>)
 80110c4:	2001      	movs	r0, #1
 80110c6:	f7f3 ffc3 	bl	8005050 <LOGGER_SendFormatted>
  
  // 초기 상태 설정
  Stat = STA_NOINIT;
 80110ca:	4b3c      	ldr	r3, [pc, #240]	@ (80111bc <SD_initialize+0x104>)
 80110cc:	2201      	movs	r2, #1
 80110ce:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  int kernel_running = osKernelRunning();
 80110d0:	f003 f942 	bl	8014358 <osKernelRunning>
 80110d4:	61f8      	str	r0, [r7, #28]
  LOG_INFO("[sd_diskio] FreeRTOS kernel running check: %d", kernel_running);
 80110d6:	69fa      	ldr	r2, [r7, #28]
 80110d8:	4939      	ldr	r1, [pc, #228]	@ (80111c0 <SD_initialize+0x108>)
 80110da:	2001      	movs	r0, #1
 80110dc:	f7f3 ffb8 	bl	8005050 <LOGGER_SendFormatted>
  if(kernel_running)
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d055      	beq.n	8011192 <SD_initialize+0xda>
  osKernelState_t kernel_state = osKernelGetState();
  LOG_INFO("[sd_diskio] FreeRTOS kernel state: %d (osKernelRunning=%d)", kernel_state, osKernelRunning);
  if(kernel_state == osKernelRunning)
#endif
  {
    LOG_INFO("[sd_diskio] FreeRTOS kernel is running - proceeding with SD check");
 80110e6:	4937      	ldr	r1, [pc, #220]	@ (80111c4 <SD_initialize+0x10c>)
 80110e8:	2001      	movs	r0, #1
 80110ea:	f7f3 ffb1 	bl	8005050 <LOGGER_SendFormatted>
    if(BSP_SD_Init() == MSD_OK)
    {
      Stat = SD_CheckStatus(lun);
    }
#else
    LOG_INFO("[sd_diskio] DISABLE_SD_INIT is active - using HAL-based check");
 80110ee:	4936      	ldr	r1, [pc, #216]	@ (80111c8 <SD_initialize+0x110>)
 80110f0:	2001      	movs	r0, #1
 80110f2:	f7f3 ffad 	bl	8005050 <LOGGER_SendFormatted>
    Stat = SD_CheckStatus(lun);
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7ff ffb5 	bl	8011068 <SD_CheckStatus>
 80110fe:	4603      	mov	r3, r0
 8011100:	461a      	mov	r2, r3
 8011102:	4b2e      	ldr	r3, [pc, #184]	@ (80111bc <SD_initialize+0x104>)
 8011104:	701a      	strb	r2, [r3, #0]

    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */
    LOG_INFO("[sd_diskio] Final Stat after SD_CheckStatus: 0x%02X", Stat);
 8011106:	4b2d      	ldr	r3, [pc, #180]	@ (80111bc <SD_initialize+0x104>)
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	b2db      	uxtb	r3, r3
 801110c:	461a      	mov	r2, r3
 801110e:	492f      	ldr	r1, [pc, #188]	@ (80111cc <SD_initialize+0x114>)
 8011110:	2001      	movs	r0, #1
 8011112:	f7f3 ff9d 	bl	8005050 <LOGGER_SendFormatted>

    if (Stat != STA_NOINIT)
 8011116:	4b29      	ldr	r3, [pc, #164]	@ (80111bc <SD_initialize+0x104>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	b2db      	uxtb	r3, r3
 801111c:	2b01      	cmp	r3, #1
 801111e:	d033      	beq.n	8011188 <SD_initialize+0xd0>
    {
      LOG_INFO("[sd_diskio] SD card ready - creating message queue...");
 8011120:	492b      	ldr	r1, [pc, #172]	@ (80111d0 <SD_initialize+0x118>)
 8011122:	2001      	movs	r0, #1
 8011124:	f7f3 ff94 	bl	8005050 <LOGGER_SendFormatted>
      if (SDQueueID == NULL)
 8011128:	4b2a      	ldr	r3, [pc, #168]	@ (80111d4 <SD_initialize+0x11c>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d115      	bne.n	801115c <SD_initialize+0xa4>
      {
 #if (osCMSIS <= 0x20000U)
        osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011130:	4b29      	ldr	r3, [pc, #164]	@ (80111d8 <SD_initialize+0x120>)
 8011132:	f107 040c 	add.w	r4, r7, #12
 8011136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801113c:	f107 030c 	add.w	r3, r7, #12
 8011140:	2100      	movs	r1, #0
 8011142:	4618      	mov	r0, r3
 8011144:	f003 f984 	bl	8014450 <osMessageCreate>
 8011148:	4603      	mov	r3, r0
 801114a:	4a22      	ldr	r2, [pc, #136]	@ (80111d4 <SD_initialize+0x11c>)
 801114c:	6013      	str	r3, [r2, #0]
#else
        SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
        LOG_INFO("[sd_diskio] Message queue created: %p", SDQueueID);
 801114e:	4b21      	ldr	r3, [pc, #132]	@ (80111d4 <SD_initialize+0x11c>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	461a      	mov	r2, r3
 8011154:	4921      	ldr	r1, [pc, #132]	@ (80111dc <SD_initialize+0x124>)
 8011156:	2001      	movs	r0, #1
 8011158:	f7f3 ff7a 	bl	8005050 <LOGGER_SendFormatted>
      }

      if (SDQueueID == NULL)
 801115c:	4b1d      	ldr	r3, [pc, #116]	@ (80111d4 <SD_initialize+0x11c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d10c      	bne.n	801117e <SD_initialize+0xc6>
      {
        LOG_ERROR("[sd_diskio] Failed to create message queue");
 8011164:	491e      	ldr	r1, [pc, #120]	@ (80111e0 <SD_initialize+0x128>)
 8011166:	2003      	movs	r0, #3
 8011168:	f7f3 ff72 	bl	8005050 <LOGGER_SendFormatted>
        Stat |= STA_NOINIT;
 801116c:	4b13      	ldr	r3, [pc, #76]	@ (80111bc <SD_initialize+0x104>)
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	b2db      	uxtb	r3, r3
 8011172:	f043 0301 	orr.w	r3, r3, #1
 8011176:	b2da      	uxtb	r2, r3
 8011178:	4b10      	ldr	r3, [pc, #64]	@ (80111bc <SD_initialize+0x104>)
 801117a:	701a      	strb	r2, [r3, #0]
 801117c:	e00d      	b.n	801119a <SD_initialize+0xe2>
      }
      else
      {
        LOG_INFO("[sd_diskio] SD initialization completed successfully");
 801117e:	4919      	ldr	r1, [pc, #100]	@ (80111e4 <SD_initialize+0x12c>)
 8011180:	2001      	movs	r0, #1
 8011182:	f7f3 ff65 	bl	8005050 <LOGGER_SendFormatted>
 8011186:	e008      	b.n	801119a <SD_initialize+0xe2>
      }
    }
    else
    {
      LOG_WARN("[sd_diskio] SD card not ready - initialization failed");
 8011188:	4917      	ldr	r1, [pc, #92]	@ (80111e8 <SD_initialize+0x130>)
 801118a:	2002      	movs	r0, #2
 801118c:	f7f3 ff60 	bl	8005050 <LOGGER_SendFormatted>
 8011190:	e003      	b.n	801119a <SD_initialize+0xe2>
    }
  }
  else
  {
    LOG_ERROR("[sd_diskio] FreeRTOS kernel not running - cannot initialize SD");
 8011192:	4916      	ldr	r1, [pc, #88]	@ (80111ec <SD_initialize+0x134>)
 8011194:	2003      	movs	r0, #3
 8011196:	f7f3 ff5b 	bl	8005050 <LOGGER_SendFormatted>
  }

  LOG_INFO("[sd_diskio] SD_initialize returning: 0x%02X", Stat);
 801119a:	4b08      	ldr	r3, [pc, #32]	@ (80111bc <SD_initialize+0x104>)
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	461a      	mov	r2, r3
 80111a2:	4913      	ldr	r1, [pc, #76]	@ (80111f0 <SD_initialize+0x138>)
 80111a4:	2001      	movs	r0, #1
 80111a6:	f7f3 ff53 	bl	8005050 <LOGGER_SendFormatted>
  return Stat;
 80111aa:	4b04      	ldr	r3, [pc, #16]	@ (80111bc <SD_initialize+0x104>)
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	b2db      	uxtb	r3, r3

}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3724      	adds	r7, #36	@ 0x24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd90      	pop	{r4, r7, pc}
 80111b8:	0801b094 	.word	0x0801b094
 80111bc:	2000006d 	.word	0x2000006d
 80111c0:	0801b0b8 	.word	0x0801b0b8
 80111c4:	0801b0e8 	.word	0x0801b0e8
 80111c8:	0801b12c 	.word	0x0801b12c
 80111cc:	0801b16c 	.word	0x0801b16c
 80111d0:	0801b1a0 	.word	0x0801b1a0
 80111d4:	200019e0 	.word	0x200019e0
 80111d8:	0801b308 	.word	0x0801b308
 80111dc:	0801b1d8 	.word	0x0801b1d8
 80111e0:	0801b200 	.word	0x0801b200
 80111e4:	0801b22c 	.word	0x0801b22c
 80111e8:	0801b264 	.word	0x0801b264
 80111ec:	0801b29c 	.word	0x0801b29c
 80111f0:	0801b2dc 	.word	0x0801b2dc

080111f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	4603      	mov	r3, r0
 80111fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80111fe:	79fb      	ldrb	r3, [r7, #7]
 8011200:	4618      	mov	r0, r3
 8011202:	f7ff ff31 	bl	8011068 <SD_CheckStatus>
 8011206:	4603      	mov	r3, r0
}
 8011208:	4618      	mov	r0, r3
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b088      	sub	sp, #32
 8011214:	af00      	add	r7, sp, #0
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
 801121a:	603b      	str	r3, [r7, #0]
 801121c:	4603      	mov	r3, r0
 801121e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011220:	2301      	movs	r3, #1
 8011222:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011224:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011228:	f7ff ff00 	bl	801102c <SD_CheckStatusWithTimeout>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	da01      	bge.n	8011236 <SD_read+0x26>
  {
    return res;
 8011232:	7ffb      	ldrb	r3, [r7, #31]
 8011234:	e00e      	b.n	8011254 <SD_read+0x44>
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned - using polling mode */
    // 폴링 모드로 SD 카드 읽기
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 8011236:	f247 5330 	movw	r3, #30000	@ 0x7530
 801123a:	683a      	ldr	r2, [r7, #0]
 801123c:	6879      	ldr	r1, [r7, #4]
 801123e:	68b8      	ldr	r0, [r7, #8]
 8011240:	f7ff fe9a 	bl	8010f78 <BSP_SD_ReadBlocks>
 8011244:	4603      	mov	r3, r0
 8011246:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8011248:	7fbb      	ldrb	r3, [r7, #30]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d101      	bne.n	8011252 <SD_read+0x42>
        // 읽기 성공
        res = RES_OK;
 801124e:	2300      	movs	r3, #0
 8011250:	77fb      	strb	r3, [r7, #31]

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011252:	7ffb      	ldrb	r3, [r7, #31]
}
 8011254:	4618      	mov	r0, r3
 8011256:	3720      	adds	r7, #32
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	60b9      	str	r1, [r7, #8]
 8011264:	607a      	str	r2, [r7, #4]
 8011266:	603b      	str	r3, [r7, #0]
 8011268:	4603      	mov	r3, r0
 801126a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801126c:	2301      	movs	r3, #1
 801126e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011270:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011274:	f7ff feda 	bl	801102c <SD_CheckStatusWithTimeout>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	da01      	bge.n	8011282 <SD_write+0x26>
  {
    return res;
 801127e:	7dfb      	ldrb	r3, [r7, #23]
 8011280:	e00e      	b.n	80112a0 <SD_write+0x44>
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  // BSP 폴링 모드 사용 (DMA 큐 대기 제거)
  // 폴링 모드로 SD 카드 쓰기
  ret = BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)sector, count, SD_TIMEOUT);
 8011282:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	6879      	ldr	r1, [r7, #4]
 801128a:	68b8      	ldr	r0, [r7, #8]
 801128c:	f7ff fe92 	bl	8010fb4 <BSP_SD_WriteBlocks>
 8011290:	4603      	mov	r3, r0
 8011292:	613b      	str	r3, [r7, #16]
  // 쓰기 결과 확인
  
  if(ret == MSD_OK)
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d101      	bne.n	801129e <SD_write+0x42>
  {
    // 폴링 방식이므로 큐 대기 불필요 - 즉시 성공 처리
    // 쓰기 완료
    res = RES_OK;
 801129a:	2300      	movs	r3, #0
 801129c:	75fb      	strb	r3, [r7, #23]
    }

  }
#endif

  return res;
 801129e:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3718      	adds	r7, #24
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b08c      	sub	sp, #48	@ 0x30
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	4603      	mov	r3, r0
 80112b0:	603a      	str	r2, [r7, #0]
 80112b2:	71fb      	strb	r3, [r7, #7]
 80112b4:	460b      	mov	r3, r1
 80112b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80112b8:	2301      	movs	r3, #1
 80112ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80112be:	4b25      	ldr	r3, [pc, #148]	@ (8011354 <SD_ioctl+0xac>)
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	b2db      	uxtb	r3, r3
 80112c4:	f003 0301 	and.w	r3, r3, #1
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d001      	beq.n	80112d0 <SD_ioctl+0x28>
 80112cc:	2303      	movs	r3, #3
 80112ce:	e03c      	b.n	801134a <SD_ioctl+0xa2>

  switch (cmd)
 80112d0:	79bb      	ldrb	r3, [r7, #6]
 80112d2:	2b03      	cmp	r3, #3
 80112d4:	d834      	bhi.n	8011340 <SD_ioctl+0x98>
 80112d6:	a201      	add	r2, pc, #4	@ (adr r2, 80112dc <SD_ioctl+0x34>)
 80112d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112dc:	080112ed 	.word	0x080112ed
 80112e0:	080112f5 	.word	0x080112f5
 80112e4:	0801130d 	.word	0x0801130d
 80112e8:	08011327 	.word	0x08011327
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112f2:	e028      	b.n	8011346 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80112f4:	f107 030c 	add.w	r3, r7, #12
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff fe89 	bl	8011010 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80112fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011304:	2300      	movs	r3, #0
 8011306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801130a:	e01c      	b.n	8011346 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801130c:	f107 030c 	add.w	r3, r7, #12
 8011310:	4618      	mov	r0, r3
 8011312:	f7ff fe7d 	bl	8011010 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011318:	b29a      	uxth	r2, r3
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011324:	e00f      	b.n	8011346 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011326:	f107 030c 	add.w	r3, r7, #12
 801132a:	4618      	mov	r0, r3
 801132c:	f7ff fe70 	bl	8011010 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011332:	0a5a      	lsrs	r2, r3, #9
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011338:	2300      	movs	r3, #0
 801133a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801133e:	e002      	b.n	8011346 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011340:	2304      	movs	r3, #4
 8011342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801134a:	4618      	mov	r0, r3
 801134c:	3730      	adds	r7, #48	@ 0x30
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	2000006d 	.word	0x2000006d

08011358 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 f804 	bl	801137c <USBH_HandleSof>
}
 8011374:	bf00      	nop
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b0b      	cmp	r3, #11
 801138c:	d10a      	bne.n	80113a4 <USBH_HandleSof+0x28>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011394:	2b00      	cmp	r3, #0
 8011396:	d005      	beq.n	80113a4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801139e:	699b      	ldr	r3, [r3, #24]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	4798      	blx	r3
  }
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2201      	movs	r2, #1
 80113b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80113bc:	2300      	movs	r3, #0
 80113be:	2200      	movs	r2, #0
 80113c0:	2101      	movs	r1, #1
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 f85b 	bl	801147e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 80113c8:	bf00      	nop
}
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b083      	sub	sp, #12
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2200      	movs	r2, #0
 80113dc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2201      	movs	r2, #1
 80113e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80113e8:	bf00      	nop
}
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2201      	movs	r2, #1
 8011400:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011414:	2300      	movs	r3, #0
 8011416:	2200      	movs	r2, #0
 8011418:	2101      	movs	r1, #1
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 f82f 	bl	801147e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3708      	adds	r7, #8
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b082      	sub	sp, #8
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2201      	movs	r2, #1
 8011436:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f005 fb4a 	bl	8016ae4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	791b      	ldrb	r3, [r3, #4]
 8011454:	4619      	mov	r1, r3
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f847 	bl	80114ea <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	795b      	ldrb	r3, [r3, #5]
 8011460:	4619      	mov	r1, r3
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f000 f841 	bl	80114ea <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011468:	2300      	movs	r3, #0
 801146a:	2200      	movs	r2, #0
 801146c:	2101      	movs	r1, #1
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f000 f805 	bl	801147e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011474:	2300      	movs	r3, #0
}
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 801147e:	b580      	push	{r7, lr}
 8011480:	b086      	sub	sp, #24
 8011482:	af00      	add	r7, sp, #0
 8011484:	60f8      	str	r0, [r7, #12]
 8011486:	607a      	str	r2, [r7, #4]
 8011488:	603b      	str	r3, [r7, #0]
 801148a:	460b      	mov	r3, r1
 801148c:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 801148e:	7afa      	ldrb	r2, [r7, #11]
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 801149c:	4618      	mov	r0, r3
 801149e:	f003 f8b3 	bl	8014608 <osMessageWaiting>
 80114a2:	4603      	mov	r3, r0
 80114a4:	f1c3 0310 	rsb	r3, r3, #16
 80114a8:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d009      	beq.n	80114c4 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	4619      	mov	r1, r3
 80114c0:	f002 ffee 	bl	80144a0 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 80114c4:	bf00      	nop
 80114c6:	3718      	adds	r7, #24
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80114d4:	2300      	movs	r3, #0
 80114d6:	2200      	movs	r2, #0
 80114d8:	2101      	movs	r1, #1
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7ff ffcf 	bl	801147e <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80114e0:	2300      	movs	r3, #0
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3708      	adds	r7, #8
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80114ea:	b480      	push	{r7}
 80114ec:	b083      	sub	sp, #12
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]
 80114f2:	460b      	mov	r3, r1
 80114f4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80114f6:	78fb      	ldrb	r3, [r7, #3]
 80114f8:	2b0f      	cmp	r3, #15
 80114fa:	d80d      	bhi.n	8011518 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80114fc:	78fb      	ldrb	r3, [r7, #3]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	33e0      	adds	r3, #224	@ 0xe0
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4413      	add	r3, r2
 8011506:	685a      	ldr	r2, [r3, #4]
 8011508:	78fb      	ldrb	r3, [r7, #3]
 801150a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801150e:	6879      	ldr	r1, [r7, #4]
 8011510:	33e0      	adds	r3, #224	@ 0xe0
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	440b      	add	r3, r1
 8011516:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	370c      	adds	r7, #12
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr
	...

08011528 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	4603      	mov	r3, r0
 8011530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011532:	79fb      	ldrb	r3, [r7, #7]
 8011534:	4a08      	ldr	r2, [pc, #32]	@ (8011558 <disk_status+0x30>)
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	79fa      	ldrb	r2, [r7, #7]
 8011540:	4905      	ldr	r1, [pc, #20]	@ (8011558 <disk_status+0x30>)
 8011542:	440a      	add	r2, r1
 8011544:	7a12      	ldrb	r2, [r2, #8]
 8011546:	4610      	mov	r0, r2
 8011548:	4798      	blx	r3
 801154a:	4603      	mov	r3, r0
 801154c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3710      	adds	r7, #16
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	20001a0c 	.word	0x20001a0c

0801155c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011566:	2300      	movs	r3, #0
 8011568:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801156a:	79fb      	ldrb	r3, [r7, #7]
 801156c:	4a0d      	ldr	r2, [pc, #52]	@ (80115a4 <disk_initialize+0x48>)
 801156e:	5cd3      	ldrb	r3, [r2, r3]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d111      	bne.n	8011598 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011574:	79fb      	ldrb	r3, [r7, #7]
 8011576:	4a0b      	ldr	r2, [pc, #44]	@ (80115a4 <disk_initialize+0x48>)
 8011578:	2101      	movs	r1, #1
 801157a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801157c:	79fb      	ldrb	r3, [r7, #7]
 801157e:	4a09      	ldr	r2, [pc, #36]	@ (80115a4 <disk_initialize+0x48>)
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	79fa      	ldrb	r2, [r7, #7]
 801158a:	4906      	ldr	r1, [pc, #24]	@ (80115a4 <disk_initialize+0x48>)
 801158c:	440a      	add	r2, r1
 801158e:	7a12      	ldrb	r2, [r2, #8]
 8011590:	4610      	mov	r0, r2
 8011592:	4798      	blx	r3
 8011594:	4603      	mov	r3, r0
 8011596:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011598:	7bfb      	ldrb	r3, [r7, #15]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	20001a0c 	.word	0x20001a0c

080115a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80115a8:	b590      	push	{r4, r7, lr}
 80115aa:	b087      	sub	sp, #28
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60b9      	str	r1, [r7, #8]
 80115b0:	607a      	str	r2, [r7, #4]
 80115b2:	603b      	str	r3, [r7, #0]
 80115b4:	4603      	mov	r3, r0
 80115b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	4a0a      	ldr	r2, [pc, #40]	@ (80115e4 <disk_read+0x3c>)
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	4413      	add	r3, r2
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	689c      	ldr	r4, [r3, #8]
 80115c4:	7bfb      	ldrb	r3, [r7, #15]
 80115c6:	4a07      	ldr	r2, [pc, #28]	@ (80115e4 <disk_read+0x3c>)
 80115c8:	4413      	add	r3, r2
 80115ca:	7a18      	ldrb	r0, [r3, #8]
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	68b9      	ldr	r1, [r7, #8]
 80115d2:	47a0      	blx	r4
 80115d4:	4603      	mov	r3, r0
 80115d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80115d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	371c      	adds	r7, #28
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd90      	pop	{r4, r7, pc}
 80115e2:	bf00      	nop
 80115e4:	20001a0c 	.word	0x20001a0c

080115e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b087      	sub	sp, #28
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60b9      	str	r1, [r7, #8]
 80115f0:	607a      	str	r2, [r7, #4]
 80115f2:	603b      	str	r3, [r7, #0]
 80115f4:	4603      	mov	r3, r0
 80115f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80115f8:	7bfb      	ldrb	r3, [r7, #15]
 80115fa:	4a0a      	ldr	r2, [pc, #40]	@ (8011624 <disk_write+0x3c>)
 80115fc:	009b      	lsls	r3, r3, #2
 80115fe:	4413      	add	r3, r2
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	68dc      	ldr	r4, [r3, #12]
 8011604:	7bfb      	ldrb	r3, [r7, #15]
 8011606:	4a07      	ldr	r2, [pc, #28]	@ (8011624 <disk_write+0x3c>)
 8011608:	4413      	add	r3, r2
 801160a:	7a18      	ldrb	r0, [r3, #8]
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	68b9      	ldr	r1, [r7, #8]
 8011612:	47a0      	blx	r4
 8011614:	4603      	mov	r3, r0
 8011616:	75fb      	strb	r3, [r7, #23]
  return res;
 8011618:	7dfb      	ldrb	r3, [r7, #23]
}
 801161a:	4618      	mov	r0, r3
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	bd90      	pop	{r4, r7, pc}
 8011622:	bf00      	nop
 8011624:	20001a0c 	.word	0x20001a0c

08011628 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	603a      	str	r2, [r7, #0]
 8011632:	71fb      	strb	r3, [r7, #7]
 8011634:	460b      	mov	r3, r1
 8011636:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011638:	79fb      	ldrb	r3, [r7, #7]
 801163a:	4a09      	ldr	r2, [pc, #36]	@ (8011660 <disk_ioctl+0x38>)
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	691b      	ldr	r3, [r3, #16]
 8011644:	79fa      	ldrb	r2, [r7, #7]
 8011646:	4906      	ldr	r1, [pc, #24]	@ (8011660 <disk_ioctl+0x38>)
 8011648:	440a      	add	r2, r1
 801164a:	7a10      	ldrb	r0, [r2, #8]
 801164c:	79b9      	ldrb	r1, [r7, #6]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	4798      	blx	r3
 8011652:	4603      	mov	r3, r0
 8011654:	73fb      	strb	r3, [r7, #15]
  return res;
 8011656:	7bfb      	ldrb	r3, [r7, #15]
}
 8011658:	4618      	mov	r0, r3
 801165a:	3710      	adds	r7, #16
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}
 8011660:	20001a0c 	.word	0x20001a0c

08011664 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3301      	adds	r3, #1
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011678:	021b      	lsls	r3, r3, #8
 801167a:	b21a      	sxth	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	b21b      	sxth	r3, r3
 8011682:	4313      	orrs	r3, r2
 8011684:	b21b      	sxth	r3, r3
 8011686:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011688:	89fb      	ldrh	r3, [r7, #14]
}
 801168a:	4618      	mov	r0, r3
 801168c:	3714      	adds	r7, #20
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011696:	b480      	push	{r7}
 8011698:	b085      	sub	sp, #20
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	3303      	adds	r3, #3
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	021b      	lsls	r3, r3, #8
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	3202      	adds	r2, #2
 80116ae:	7812      	ldrb	r2, [r2, #0]
 80116b0:	4313      	orrs	r3, r2
 80116b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	021b      	lsls	r3, r3, #8
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	3201      	adds	r2, #1
 80116bc:	7812      	ldrb	r2, [r2, #0]
 80116be:	4313      	orrs	r3, r2
 80116c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	021b      	lsls	r3, r3, #8
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	7812      	ldrb	r2, [r2, #0]
 80116ca:	4313      	orrs	r3, r2
 80116cc:	60fb      	str	r3, [r7, #12]
	return rv;
 80116ce:	68fb      	ldr	r3, [r7, #12]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3714      	adds	r7, #20
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr

080116dc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80116dc:	b480      	push	{r7}
 80116de:	b083      	sub	sp, #12
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	460b      	mov	r3, r1
 80116e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	1c5a      	adds	r2, r3, #1
 80116ec:	607a      	str	r2, [r7, #4]
 80116ee:	887a      	ldrh	r2, [r7, #2]
 80116f0:	b2d2      	uxtb	r2, r2
 80116f2:	701a      	strb	r2, [r3, #0]
 80116f4:	887b      	ldrh	r3, [r7, #2]
 80116f6:	0a1b      	lsrs	r3, r3, #8
 80116f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	1c5a      	adds	r2, r3, #1
 80116fe:	607a      	str	r2, [r7, #4]
 8011700:	887a      	ldrh	r2, [r7, #2]
 8011702:	b2d2      	uxtb	r2, r2
 8011704:	701a      	strb	r2, [r3, #0]
}
 8011706:	bf00      	nop
 8011708:	370c      	adds	r7, #12
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr

08011712 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011712:	b480      	push	{r7}
 8011714:	b083      	sub	sp, #12
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
 801171a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	607a      	str	r2, [r7, #4]
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	b2d2      	uxtb	r2, r2
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	0a1b      	lsrs	r3, r3, #8
 801172c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	607a      	str	r2, [r7, #4]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	b2d2      	uxtb	r2, r2
 8011738:	701a      	strb	r2, [r3, #0]
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	0a1b      	lsrs	r3, r3, #8
 801173e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	1c5a      	adds	r2, r3, #1
 8011744:	607a      	str	r2, [r7, #4]
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	b2d2      	uxtb	r2, r2
 801174a:	701a      	strb	r2, [r3, #0]
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	0a1b      	lsrs	r3, r3, #8
 8011750:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	1c5a      	adds	r2, r3, #1
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	b2d2      	uxtb	r2, r2
 801175c:	701a      	strb	r2, [r3, #0]
}
 801175e:	bf00      	nop
 8011760:	370c      	adds	r7, #12
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801176a:	b480      	push	{r7}
 801176c:	b087      	sub	sp, #28
 801176e:	af00      	add	r7, sp, #0
 8011770:	60f8      	str	r0, [r7, #12]
 8011772:	60b9      	str	r1, [r7, #8]
 8011774:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d00d      	beq.n	80117a0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011784:	693a      	ldr	r2, [r7, #16]
 8011786:	1c53      	adds	r3, r2, #1
 8011788:	613b      	str	r3, [r7, #16]
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	1c59      	adds	r1, r3, #1
 801178e:	6179      	str	r1, [r7, #20]
 8011790:	7812      	ldrb	r2, [r2, #0]
 8011792:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3b01      	subs	r3, #1
 8011798:	607b      	str	r3, [r7, #4]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1f1      	bne.n	8011784 <mem_cpy+0x1a>
	}
}
 80117a0:	bf00      	nop
 80117a2:	371c      	adds	r7, #28
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80117ac:	b480      	push	{r7}
 80117ae:	b087      	sub	sp, #28
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	1c5a      	adds	r2, r3, #1
 80117c0:	617a      	str	r2, [r7, #20]
 80117c2:	68ba      	ldr	r2, [r7, #8]
 80117c4:	b2d2      	uxtb	r2, r2
 80117c6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	3b01      	subs	r3, #1
 80117cc:	607b      	str	r3, [r7, #4]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1f3      	bne.n	80117bc <mem_set+0x10>
}
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop
 80117d8:	371c      	adds	r7, #28
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr

080117e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80117e2:	b480      	push	{r7}
 80117e4:	b089      	sub	sp, #36	@ 0x24
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	60f8      	str	r0, [r7, #12]
 80117ea:	60b9      	str	r1, [r7, #8]
 80117ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	61fb      	str	r3, [r7, #28]
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80117f6:	2300      	movs	r3, #0
 80117f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80117fa:	69fb      	ldr	r3, [r7, #28]
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	61fa      	str	r2, [r7, #28]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	4619      	mov	r1, r3
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	61ba      	str	r2, [r7, #24]
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	1acb      	subs	r3, r1, r3
 801180e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3b01      	subs	r3, #1
 8011814:	607b      	str	r3, [r7, #4]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <mem_cmp+0x40>
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d0eb      	beq.n	80117fa <mem_cmp+0x18>

	return r;
 8011822:	697b      	ldr	r3, [r7, #20]
}
 8011824:	4618      	mov	r0, r3
 8011826:	3724      	adds	r7, #36	@ 0x24
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801183a:	e002      	b.n	8011842 <chk_chr+0x12>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	3301      	adds	r3, #1
 8011840:	607b      	str	r3, [r7, #4]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <chk_chr+0x26>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	4293      	cmp	r3, r2
 8011854:	d1f2      	bne.n	801183c <chk_chr+0xc>
	return *str;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	781b      	ldrb	r3, [r3, #0]
}
 801185a:	4618      	mov	r0, r3
 801185c:	370c      	adds	r7, #12
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
	...

08011868 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011872:	2300      	movs	r3, #0
 8011874:	60bb      	str	r3, [r7, #8]
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	60fb      	str	r3, [r7, #12]
 801187a:	e029      	b.n	80118d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801187c:	4a27      	ldr	r2, [pc, #156]	@ (801191c <chk_lock+0xb4>)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	011b      	lsls	r3, r3, #4
 8011882:	4413      	add	r3, r2
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d01d      	beq.n	80118c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801188a:	4a24      	ldr	r2, [pc, #144]	@ (801191c <chk_lock+0xb4>)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	4413      	add	r3, r2
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	429a      	cmp	r2, r3
 801189a:	d116      	bne.n	80118ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801189c:	4a1f      	ldr	r2, [pc, #124]	@ (801191c <chk_lock+0xb4>)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	011b      	lsls	r3, r3, #4
 80118a2:	4413      	add	r3, r2
 80118a4:	3304      	adds	r3, #4
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d10c      	bne.n	80118ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118b0:	4a1a      	ldr	r2, [pc, #104]	@ (801191c <chk_lock+0xb4>)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	4413      	add	r3, r2
 80118b8:	3308      	adds	r3, #8
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d102      	bne.n	80118ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118c4:	e007      	b.n	80118d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80118c6:	2301      	movs	r3, #1
 80118c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	3301      	adds	r3, #1
 80118ce:	60fb      	str	r3, [r7, #12]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d9d2      	bls.n	801187c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d109      	bne.n	80118f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d102      	bne.n	80118e8 <chk_lock+0x80>
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	d101      	bne.n	80118ec <chk_lock+0x84>
 80118e8:	2300      	movs	r3, #0
 80118ea:	e010      	b.n	801190e <chk_lock+0xa6>
 80118ec:	2312      	movs	r3, #18
 80118ee:	e00e      	b.n	801190e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d108      	bne.n	8011908 <chk_lock+0xa0>
 80118f6:	4a09      	ldr	r2, [pc, #36]	@ (801191c <chk_lock+0xb4>)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	011b      	lsls	r3, r3, #4
 80118fc:	4413      	add	r3, r2
 80118fe:	330c      	adds	r3, #12
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011906:	d101      	bne.n	801190c <chk_lock+0xa4>
 8011908:	2310      	movs	r3, #16
 801190a:	e000      	b.n	801190e <chk_lock+0xa6>
 801190c:	2300      	movs	r3, #0
}
 801190e:	4618      	mov	r0, r3
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	200019ec 	.word	0x200019ec

08011920 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011926:	2300      	movs	r3, #0
 8011928:	607b      	str	r3, [r7, #4]
 801192a:	e002      	b.n	8011932 <enq_lock+0x12>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	3301      	adds	r3, #1
 8011930:	607b      	str	r3, [r7, #4]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d806      	bhi.n	8011946 <enq_lock+0x26>
 8011938:	4a09      	ldr	r2, [pc, #36]	@ (8011960 <enq_lock+0x40>)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	011b      	lsls	r3, r3, #4
 801193e:	4413      	add	r3, r2
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d1f2      	bne.n	801192c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b02      	cmp	r3, #2
 801194a:	bf14      	ite	ne
 801194c:	2301      	movne	r3, #1
 801194e:	2300      	moveq	r3, #0
 8011950:	b2db      	uxtb	r3, r3
}
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	200019ec 	.word	0x200019ec

08011964 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801196e:	2300      	movs	r3, #0
 8011970:	60fb      	str	r3, [r7, #12]
 8011972:	e01f      	b.n	80119b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011974:	4a41      	ldr	r2, [pc, #260]	@ (8011a7c <inc_lock+0x118>)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	4413      	add	r3, r2
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	429a      	cmp	r2, r3
 8011984:	d113      	bne.n	80119ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011986:	4a3d      	ldr	r2, [pc, #244]	@ (8011a7c <inc_lock+0x118>)
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	011b      	lsls	r3, r3, #4
 801198c:	4413      	add	r3, r2
 801198e:	3304      	adds	r3, #4
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011996:	429a      	cmp	r2, r3
 8011998:	d109      	bne.n	80119ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801199a:	4a38      	ldr	r2, [pc, #224]	@ (8011a7c <inc_lock+0x118>)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	4413      	add	r3, r2
 80119a2:	3308      	adds	r3, #8
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d006      	beq.n	80119bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	3301      	adds	r3, #1
 80119b2:	60fb      	str	r3, [r7, #12]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d9dc      	bls.n	8011974 <inc_lock+0x10>
 80119ba:	e000      	b.n	80119be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80119bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d132      	bne.n	8011a2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80119c4:	2300      	movs	r3, #0
 80119c6:	60fb      	str	r3, [r7, #12]
 80119c8:	e002      	b.n	80119d0 <inc_lock+0x6c>
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3301      	adds	r3, #1
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d806      	bhi.n	80119e4 <inc_lock+0x80>
 80119d6:	4a29      	ldr	r2, [pc, #164]	@ (8011a7c <inc_lock+0x118>)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	011b      	lsls	r3, r3, #4
 80119dc:	4413      	add	r3, r2
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1f2      	bne.n	80119ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b02      	cmp	r3, #2
 80119e8:	d101      	bne.n	80119ee <inc_lock+0x8a>
 80119ea:	2300      	movs	r3, #0
 80119ec:	e040      	b.n	8011a70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	4922      	ldr	r1, [pc, #136]	@ (8011a7c <inc_lock+0x118>)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	440b      	add	r3, r1
 80119fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	689a      	ldr	r2, [r3, #8]
 8011a00:	491e      	ldr	r1, [pc, #120]	@ (8011a7c <inc_lock+0x118>)
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	011b      	lsls	r3, r3, #4
 8011a06:	440b      	add	r3, r1
 8011a08:	3304      	adds	r3, #4
 8011a0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	695a      	ldr	r2, [r3, #20]
 8011a10:	491a      	ldr	r1, [pc, #104]	@ (8011a7c <inc_lock+0x118>)
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	011b      	lsls	r3, r3, #4
 8011a16:	440b      	add	r3, r1
 8011a18:	3308      	adds	r3, #8
 8011a1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011a1c:	4a17      	ldr	r2, [pc, #92]	@ (8011a7c <inc_lock+0x118>)
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	011b      	lsls	r3, r3, #4
 8011a22:	4413      	add	r3, r2
 8011a24:	330c      	adds	r3, #12
 8011a26:	2200      	movs	r2, #0
 8011a28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d009      	beq.n	8011a44 <inc_lock+0xe0>
 8011a30:	4a12      	ldr	r2, [pc, #72]	@ (8011a7c <inc_lock+0x118>)
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	011b      	lsls	r3, r3, #4
 8011a36:	4413      	add	r3, r2
 8011a38:	330c      	adds	r3, #12
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <inc_lock+0xe0>
 8011a40:	2300      	movs	r3, #0
 8011a42:	e015      	b.n	8011a70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d108      	bne.n	8011a5c <inc_lock+0xf8>
 8011a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8011a7c <inc_lock+0x118>)
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	011b      	lsls	r3, r3, #4
 8011a50:	4413      	add	r3, r2
 8011a52:	330c      	adds	r3, #12
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	3301      	adds	r3, #1
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	e001      	b.n	8011a60 <inc_lock+0xfc>
 8011a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011a60:	4906      	ldr	r1, [pc, #24]	@ (8011a7c <inc_lock+0x118>)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	011b      	lsls	r3, r3, #4
 8011a66:	440b      	add	r3, r1
 8011a68:	330c      	adds	r3, #12
 8011a6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	3301      	adds	r3, #1
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3714      	adds	r7, #20
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr
 8011a7c:	200019ec 	.word	0x200019ec

08011a80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	607b      	str	r3, [r7, #4]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d825      	bhi.n	8011ae0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011a94:	4a17      	ldr	r2, [pc, #92]	@ (8011af4 <dec_lock+0x74>)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	011b      	lsls	r3, r3, #4
 8011a9a:	4413      	add	r3, r2
 8011a9c:	330c      	adds	r3, #12
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011aa2:	89fb      	ldrh	r3, [r7, #14]
 8011aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011aa8:	d101      	bne.n	8011aae <dec_lock+0x2e>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011aae:	89fb      	ldrh	r3, [r7, #14]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <dec_lock+0x3a>
 8011ab4:	89fb      	ldrh	r3, [r7, #14]
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011aba:	4a0e      	ldr	r2, [pc, #56]	@ (8011af4 <dec_lock+0x74>)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	330c      	adds	r3, #12
 8011ac4:	89fa      	ldrh	r2, [r7, #14]
 8011ac6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011ac8:	89fb      	ldrh	r3, [r7, #14]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d105      	bne.n	8011ada <dec_lock+0x5a>
 8011ace:	4a09      	ldr	r2, [pc, #36]	@ (8011af4 <dec_lock+0x74>)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	011b      	lsls	r3, r3, #4
 8011ad4:	4413      	add	r3, r2
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011ada:	2300      	movs	r3, #0
 8011adc:	737b      	strb	r3, [r7, #13]
 8011ade:	e001      	b.n	8011ae4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011ae0:	2302      	movs	r3, #2
 8011ae2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011ae4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3714      	adds	r7, #20
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
 8011af2:	bf00      	nop
 8011af4:	200019ec 	.word	0x200019ec

08011af8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011b00:	2300      	movs	r3, #0
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	e010      	b.n	8011b28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b06:	4a0d      	ldr	r2, [pc, #52]	@ (8011b3c <clear_lock+0x44>)
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	4413      	add	r3, r2
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d105      	bne.n	8011b22 <clear_lock+0x2a>
 8011b16:	4a09      	ldr	r2, [pc, #36]	@ (8011b3c <clear_lock+0x44>)
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	011b      	lsls	r3, r3, #4
 8011b1c:	4413      	add	r3, r2
 8011b1e:	2200      	movs	r2, #0
 8011b20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	3301      	adds	r3, #1
 8011b26:	60fb      	str	r3, [r7, #12]
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d9eb      	bls.n	8011b06 <clear_lock+0xe>
	}
}
 8011b2e:	bf00      	nop
 8011b30:	bf00      	nop
 8011b32:	3714      	adds	r7, #20
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	200019ec 	.word	0x200019ec

08011b40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b086      	sub	sp, #24
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	78db      	ldrb	r3, [r3, #3]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d034      	beq.n	8011bbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	7858      	ldrb	r0, [r3, #1]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b64:	2301      	movs	r3, #1
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	f7ff fd3e 	bl	80115e8 <disk_write>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d002      	beq.n	8011b78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011b72:	2301      	movs	r3, #1
 8011b74:	73fb      	strb	r3, [r7, #15]
 8011b76:	e022      	b.n	8011bbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6a1b      	ldr	r3, [r3, #32]
 8011b82:	697a      	ldr	r2, [r7, #20]
 8011b84:	1ad2      	subs	r2, r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	699b      	ldr	r3, [r3, #24]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d217      	bcs.n	8011bbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	789b      	ldrb	r3, [r3, #2]
 8011b92:	613b      	str	r3, [r7, #16]
 8011b94:	e010      	b.n	8011bb8 <sync_window+0x78>
					wsect += fs->fsize;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	7858      	ldrb	r0, [r3, #1]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011baa:	2301      	movs	r3, #1
 8011bac:	697a      	ldr	r2, [r7, #20]
 8011bae:	f7ff fd1b 	bl	80115e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	3b01      	subs	r3, #1
 8011bb6:	613b      	str	r3, [r7, #16]
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d8eb      	bhi.n	8011b96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bda:	683a      	ldr	r2, [r7, #0]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d01b      	beq.n	8011c18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7ff ffad 	bl	8011b40 <sync_window>
 8011be6:	4603      	mov	r3, r0
 8011be8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d113      	bne.n	8011c18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	7858      	ldrb	r0, [r3, #1]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	f7ff fcd3 	bl	80115a8 <disk_read>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d004      	beq.n	8011c12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011c08:	f04f 33ff 	mov.w	r3, #4294967295
 8011c0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	683a      	ldr	r2, [r7, #0]
 8011c16:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
	...

08011c24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7ff ff87 	bl	8011b40 <sync_window>
 8011c32:	4603      	mov	r3, r0
 8011c34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c36:	7bfb      	ldrb	r3, [r7, #15]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d158      	bne.n	8011cee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d148      	bne.n	8011cd6 <sync_fs+0xb2>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	791b      	ldrb	r3, [r3, #4]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d144      	bne.n	8011cd6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3330      	adds	r3, #48	@ 0x30
 8011c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c54:	2100      	movs	r1, #0
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff fda8 	bl	80117ac <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3330      	adds	r3, #48	@ 0x30
 8011c60:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011c64:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ff fd37 	bl	80116dc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	3330      	adds	r3, #48	@ 0x30
 8011c72:	4921      	ldr	r1, [pc, #132]	@ (8011cf8 <sync_fs+0xd4>)
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff fd4c 	bl	8011712 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	3330      	adds	r3, #48	@ 0x30
 8011c7e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011c82:	491e      	ldr	r1, [pc, #120]	@ (8011cfc <sync_fs+0xd8>)
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ff fd44 	bl	8011712 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3330      	adds	r3, #48	@ 0x30
 8011c8e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	691b      	ldr	r3, [r3, #16]
 8011c96:	4619      	mov	r1, r3
 8011c98:	4610      	mov	r0, r2
 8011c9a:	f7ff fd3a 	bl	8011712 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	3330      	adds	r3, #48	@ 0x30
 8011ca2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	4619      	mov	r1, r3
 8011cac:	4610      	mov	r0, r2
 8011cae:	f7ff fd30 	bl	8011712 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	69db      	ldr	r3, [r3, #28]
 8011cb6:	1c5a      	adds	r2, r3, #1
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	7858      	ldrb	r0, [r3, #1]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cca:	2301      	movs	r3, #1
 8011ccc:	f7ff fc8c 	bl	80115e8 <disk_write>
			fs->fsi_flag = 0;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	785b      	ldrb	r3, [r3, #1]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	2100      	movs	r1, #0
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ff fca2 	bl	8011628 <disk_ioctl>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d001      	beq.n	8011cee <sync_fs+0xca>
 8011cea:	2301      	movs	r3, #1
 8011cec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	41615252 	.word	0x41615252
 8011cfc:	61417272 	.word	0x61417272

08011d00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	3b02      	subs	r3, #2
 8011d0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	3b02      	subs	r3, #2
 8011d16:	683a      	ldr	r2, [r7, #0]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d301      	bcc.n	8011d20 <clust2sect+0x20>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	e008      	b.n	8011d32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	895b      	ldrh	r3, [r3, #10]
 8011d24:	461a      	mov	r2, r3
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	fb03 f202 	mul.w	r2, r3, r2
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d30:	4413      	add	r3, r2
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr

08011d3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b086      	sub	sp, #24
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d904      	bls.n	8011d5e <get_fat+0x20>
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	695b      	ldr	r3, [r3, #20]
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d302      	bcc.n	8011d64 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011d5e:	2301      	movs	r3, #1
 8011d60:	617b      	str	r3, [r7, #20]
 8011d62:	e08e      	b.n	8011e82 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011d64:	f04f 33ff 	mov.w	r3, #4294967295
 8011d68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b03      	cmp	r3, #3
 8011d70:	d061      	beq.n	8011e36 <get_fat+0xf8>
 8011d72:	2b03      	cmp	r3, #3
 8011d74:	dc7b      	bgt.n	8011e6e <get_fat+0x130>
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d002      	beq.n	8011d80 <get_fat+0x42>
 8011d7a:	2b02      	cmp	r3, #2
 8011d7c:	d041      	beq.n	8011e02 <get_fat+0xc4>
 8011d7e:	e076      	b.n	8011e6e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	085b      	lsrs	r3, r3, #1
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	6a1a      	ldr	r2, [r3, #32]
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	0a5b      	lsrs	r3, r3, #9
 8011d96:	4413      	add	r3, r2
 8011d98:	4619      	mov	r1, r3
 8011d9a:	6938      	ldr	r0, [r7, #16]
 8011d9c:	f7ff ff14 	bl	8011bc8 <move_window>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d166      	bne.n	8011e74 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	1c5a      	adds	r2, r3, #1
 8011daa:	60fa      	str	r2, [r7, #12]
 8011dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011db0:	693a      	ldr	r2, [r7, #16]
 8011db2:	4413      	add	r3, r2
 8011db4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011db8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	6a1a      	ldr	r2, [r3, #32]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	0a5b      	lsrs	r3, r3, #9
 8011dc2:	4413      	add	r3, r2
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6938      	ldr	r0, [r7, #16]
 8011dc8:	f7ff fefe 	bl	8011bc8 <move_window>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d152      	bne.n	8011e78 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dd8:	693a      	ldr	r2, [r7, #16]
 8011dda:	4413      	add	r3, r2
 8011ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011de0:	021b      	lsls	r3, r3, #8
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	4313      	orrs	r3, r2
 8011de6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d002      	beq.n	8011df8 <get_fat+0xba>
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	091b      	lsrs	r3, r3, #4
 8011df6:	e002      	b.n	8011dfe <get_fat+0xc0>
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011dfe:	617b      	str	r3, [r7, #20]
			break;
 8011e00:	e03f      	b.n	8011e82 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	6a1a      	ldr	r2, [r3, #32]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	0a1b      	lsrs	r3, r3, #8
 8011e0a:	4413      	add	r3, r2
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	6938      	ldr	r0, [r7, #16]
 8011e10:	f7ff feda 	bl	8011bc8 <move_window>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d130      	bne.n	8011e7c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	005b      	lsls	r3, r3, #1
 8011e24:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011e28:	4413      	add	r3, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7ff fc1a 	bl	8011664 <ld_word>
 8011e30:	4603      	mov	r3, r0
 8011e32:	617b      	str	r3, [r7, #20]
			break;
 8011e34:	e025      	b.n	8011e82 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	6a1a      	ldr	r2, [r3, #32]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	09db      	lsrs	r3, r3, #7
 8011e3e:	4413      	add	r3, r2
 8011e40:	4619      	mov	r1, r3
 8011e42:	6938      	ldr	r0, [r7, #16]
 8011e44:	f7ff fec0 	bl	8011bc8 <move_window>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d118      	bne.n	8011e80 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011e5c:	4413      	add	r3, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff fc19 	bl	8011696 <ld_dword>
 8011e64:	4603      	mov	r3, r0
 8011e66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011e6a:	617b      	str	r3, [r7, #20]
			break;
 8011e6c:	e009      	b.n	8011e82 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e6e:	2301      	movs	r3, #1
 8011e70:	617b      	str	r3, [r7, #20]
 8011e72:	e006      	b.n	8011e82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e74:	bf00      	nop
 8011e76:	e004      	b.n	8011e82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e78:	bf00      	nop
 8011e7a:	e002      	b.n	8011e82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e7c:	bf00      	nop
 8011e7e:	e000      	b.n	8011e82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e80:	bf00      	nop
		}
	}

	return val;
 8011e82:	697b      	ldr	r3, [r7, #20]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3718      	adds	r7, #24
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b089      	sub	sp, #36	@ 0x24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e98:	2302      	movs	r3, #2
 8011e9a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	f240 80d9 	bls.w	8012056 <put_fat+0x1ca>
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	695b      	ldr	r3, [r3, #20]
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	f080 80d3 	bcs.w	8012056 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	2b03      	cmp	r3, #3
 8011eb6:	f000 8096 	beq.w	8011fe6 <put_fat+0x15a>
 8011eba:	2b03      	cmp	r3, #3
 8011ebc:	f300 80cb 	bgt.w	8012056 <put_fat+0x1ca>
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	d002      	beq.n	8011eca <put_fat+0x3e>
 8011ec4:	2b02      	cmp	r3, #2
 8011ec6:	d06e      	beq.n	8011fa6 <put_fat+0x11a>
 8011ec8:	e0c5      	b.n	8012056 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	61bb      	str	r3, [r7, #24]
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	085b      	lsrs	r3, r3, #1
 8011ed2:	69ba      	ldr	r2, [r7, #24]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	6a1a      	ldr	r2, [r3, #32]
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	0a5b      	lsrs	r3, r3, #9
 8011ee0:	4413      	add	r3, r2
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	68f8      	ldr	r0, [r7, #12]
 8011ee6:	f7ff fe6f 	bl	8011bc8 <move_window>
 8011eea:	4603      	mov	r3, r0
 8011eec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011eee:	7ffb      	ldrb	r3, [r7, #31]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f040 80a9 	bne.w	8012048 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011efc:	69bb      	ldr	r3, [r7, #24]
 8011efe:	1c59      	adds	r1, r3, #1
 8011f00:	61b9      	str	r1, [r7, #24]
 8011f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f06:	4413      	add	r3, r2
 8011f08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	f003 0301 	and.w	r3, r3, #1
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d00d      	beq.n	8011f30 <put_fat+0xa4>
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	b25b      	sxtb	r3, r3
 8011f1a:	f003 030f 	and.w	r3, r3, #15
 8011f1e:	b25a      	sxtb	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	b25b      	sxtb	r3, r3
 8011f24:	011b      	lsls	r3, r3, #4
 8011f26:	b25b      	sxtb	r3, r3
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	b25b      	sxtb	r3, r3
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	e001      	b.n	8011f34 <put_fat+0xa8>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	697a      	ldr	r2, [r7, #20]
 8011f36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	6a1a      	ldr	r2, [r3, #32]
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	0a5b      	lsrs	r3, r3, #9
 8011f46:	4413      	add	r3, r2
 8011f48:	4619      	mov	r1, r3
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	f7ff fe3c 	bl	8011bc8 <move_window>
 8011f50:	4603      	mov	r3, r0
 8011f52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f54:	7ffb      	ldrb	r3, [r7, #31]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d178      	bne.n	801204c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011f60:	69bb      	ldr	r3, [r7, #24]
 8011f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f66:	4413      	add	r3, r2
 8011f68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	f003 0301 	and.w	r3, r3, #1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d003      	beq.n	8011f7c <put_fat+0xf0>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	091b      	lsrs	r3, r3, #4
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	e00e      	b.n	8011f9a <put_fat+0x10e>
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	b25b      	sxtb	r3, r3
 8011f82:	f023 030f 	bic.w	r3, r3, #15
 8011f86:	b25a      	sxtb	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	0a1b      	lsrs	r3, r3, #8
 8011f8c:	b25b      	sxtb	r3, r3
 8011f8e:	f003 030f 	and.w	r3, r3, #15
 8011f92:	b25b      	sxtb	r3, r3
 8011f94:	4313      	orrs	r3, r2
 8011f96:	b25b      	sxtb	r3, r3
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	697a      	ldr	r2, [r7, #20]
 8011f9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	70da      	strb	r2, [r3, #3]
			break;
 8011fa4:	e057      	b.n	8012056 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	6a1a      	ldr	r2, [r3, #32]
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	0a1b      	lsrs	r3, r3, #8
 8011fae:	4413      	add	r3, r2
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f7ff fe08 	bl	8011bc8 <move_window>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fbc:	7ffb      	ldrb	r3, [r7, #31]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d146      	bne.n	8012050 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	005b      	lsls	r3, r3, #1
 8011fcc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011fd0:	4413      	add	r3, r2
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	b292      	uxth	r2, r2
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7ff fb7f 	bl	80116dc <st_word>
			fs->wflag = 1;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	70da      	strb	r2, [r3, #3]
			break;
 8011fe4:	e037      	b.n	8012056 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	6a1a      	ldr	r2, [r3, #32]
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	09db      	lsrs	r3, r3, #7
 8011fee:	4413      	add	r3, r2
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f7ff fde8 	bl	8011bc8 <move_window>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ffc:	7ffb      	ldrb	r3, [r7, #31]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d128      	bne.n	8012054 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012016:	4413      	add	r3, r2
 8012018:	4618      	mov	r0, r3
 801201a:	f7ff fb3c 	bl	8011696 <ld_dword>
 801201e:	4603      	mov	r3, r0
 8012020:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012024:	4323      	orrs	r3, r4
 8012026:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012036:	4413      	add	r3, r2
 8012038:	6879      	ldr	r1, [r7, #4]
 801203a:	4618      	mov	r0, r3
 801203c:	f7ff fb69 	bl	8011712 <st_dword>
			fs->wflag = 1;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2201      	movs	r2, #1
 8012044:	70da      	strb	r2, [r3, #3]
			break;
 8012046:	e006      	b.n	8012056 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012048:	bf00      	nop
 801204a:	e004      	b.n	8012056 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801204c:	bf00      	nop
 801204e:	e002      	b.n	8012056 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012050:	bf00      	nop
 8012052:	e000      	b.n	8012056 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012054:	bf00      	nop
		}
	}
	return res;
 8012056:	7ffb      	ldrb	r3, [r7, #31]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3724      	adds	r7, #36	@ 0x24
 801205c:	46bd      	mov	sp, r7
 801205e:	bd90      	pop	{r4, r7, pc}

08012060 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801206c:	2300      	movs	r3, #0
 801206e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d904      	bls.n	8012086 <remove_chain+0x26>
 801207c:	69bb      	ldr	r3, [r7, #24]
 801207e:	695b      	ldr	r3, [r3, #20]
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	429a      	cmp	r2, r3
 8012084:	d301      	bcc.n	801208a <remove_chain+0x2a>
 8012086:	2302      	movs	r3, #2
 8012088:	e04b      	b.n	8012122 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00c      	beq.n	80120aa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012090:	f04f 32ff 	mov.w	r2, #4294967295
 8012094:	6879      	ldr	r1, [r7, #4]
 8012096:	69b8      	ldr	r0, [r7, #24]
 8012098:	f7ff fef8 	bl	8011e8c <put_fat>
 801209c:	4603      	mov	r3, r0
 801209e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120a0:	7ffb      	ldrb	r3, [r7, #31]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d001      	beq.n	80120aa <remove_chain+0x4a>
 80120a6:	7ffb      	ldrb	r3, [r7, #31]
 80120a8:	e03b      	b.n	8012122 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120aa:	68b9      	ldr	r1, [r7, #8]
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7ff fe46 	bl	8011d3e <get_fat>
 80120b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d031      	beq.n	801211e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d101      	bne.n	80120c4 <remove_chain+0x64>
 80120c0:	2302      	movs	r3, #2
 80120c2:	e02e      	b.n	8012122 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ca:	d101      	bne.n	80120d0 <remove_chain+0x70>
 80120cc:	2301      	movs	r3, #1
 80120ce:	e028      	b.n	8012122 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120d0:	2200      	movs	r2, #0
 80120d2:	68b9      	ldr	r1, [r7, #8]
 80120d4:	69b8      	ldr	r0, [r7, #24]
 80120d6:	f7ff fed9 	bl	8011e8c <put_fat>
 80120da:	4603      	mov	r3, r0
 80120dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120de:	7ffb      	ldrb	r3, [r7, #31]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <remove_chain+0x88>
 80120e4:	7ffb      	ldrb	r3, [r7, #31]
 80120e6:	e01c      	b.n	8012122 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	691a      	ldr	r2, [r3, #16]
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	695b      	ldr	r3, [r3, #20]
 80120f0:	3b02      	subs	r3, #2
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d20b      	bcs.n	801210e <remove_chain+0xae>
			fs->free_clst++;
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	1c5a      	adds	r2, r3, #1
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	791b      	ldrb	r3, [r3, #4]
 8012104:	f043 0301 	orr.w	r3, r3, #1
 8012108:	b2da      	uxtb	r2, r3
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	695b      	ldr	r3, [r3, #20]
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	429a      	cmp	r2, r3
 801211a:	d3c6      	bcc.n	80120aa <remove_chain+0x4a>
 801211c:	e000      	b.n	8012120 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801211e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	3720      	adds	r7, #32
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801212a:	b580      	push	{r7, lr}
 801212c:	b088      	sub	sp, #32
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10d      	bne.n	801215c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d004      	beq.n	8012156 <create_chain+0x2c>
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	695b      	ldr	r3, [r3, #20]
 8012150:	69ba      	ldr	r2, [r7, #24]
 8012152:	429a      	cmp	r2, r3
 8012154:	d31b      	bcc.n	801218e <create_chain+0x64>
 8012156:	2301      	movs	r3, #1
 8012158:	61bb      	str	r3, [r7, #24]
 801215a:	e018      	b.n	801218e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7ff fded 	bl	8011d3e <get_fat>
 8012164:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d801      	bhi.n	8012170 <create_chain+0x46>
 801216c:	2301      	movs	r3, #1
 801216e:	e070      	b.n	8012252 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012176:	d101      	bne.n	801217c <create_chain+0x52>
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	e06a      	b.n	8012252 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	695b      	ldr	r3, [r3, #20]
 8012180:	68fa      	ldr	r2, [r7, #12]
 8012182:	429a      	cmp	r2, r3
 8012184:	d201      	bcs.n	801218a <create_chain+0x60>
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	e063      	b.n	8012252 <create_chain+0x128>
		scl = clst;
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	3301      	adds	r3, #1
 8012196:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	695b      	ldr	r3, [r3, #20]
 801219c:	69fa      	ldr	r2, [r7, #28]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d307      	bcc.n	80121b2 <create_chain+0x88>
				ncl = 2;
 80121a2:	2302      	movs	r3, #2
 80121a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121a6:	69fa      	ldr	r2, [r7, #28]
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d901      	bls.n	80121b2 <create_chain+0x88>
 80121ae:	2300      	movs	r3, #0
 80121b0:	e04f      	b.n	8012252 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121b2:	69f9      	ldr	r1, [r7, #28]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff fdc2 	bl	8011d3e <get_fat>
 80121ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d00e      	beq.n	80121e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d003      	beq.n	80121d0 <create_chain+0xa6>
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ce:	d101      	bne.n	80121d4 <create_chain+0xaa>
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	e03e      	b.n	8012252 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121d4:	69fa      	ldr	r2, [r7, #28]
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	429a      	cmp	r2, r3
 80121da:	d1da      	bne.n	8012192 <create_chain+0x68>
 80121dc:	2300      	movs	r3, #0
 80121de:	e038      	b.n	8012252 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121e2:	f04f 32ff 	mov.w	r2, #4294967295
 80121e6:	69f9      	ldr	r1, [r7, #28]
 80121e8:	6938      	ldr	r0, [r7, #16]
 80121ea:	f7ff fe4f 	bl	8011e8c <put_fat>
 80121ee:	4603      	mov	r3, r0
 80121f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80121f2:	7dfb      	ldrb	r3, [r7, #23]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d109      	bne.n	801220c <create_chain+0xe2>
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d006      	beq.n	801220c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80121fe:	69fa      	ldr	r2, [r7, #28]
 8012200:	6839      	ldr	r1, [r7, #0]
 8012202:	6938      	ldr	r0, [r7, #16]
 8012204:	f7ff fe42 	bl	8011e8c <put_fat>
 8012208:	4603      	mov	r3, r0
 801220a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801220c:	7dfb      	ldrb	r3, [r7, #23]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d116      	bne.n	8012240 <create_chain+0x116>
		fs->last_clst = ncl;
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	69fa      	ldr	r2, [r7, #28]
 8012216:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	691a      	ldr	r2, [r3, #16]
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	695b      	ldr	r3, [r3, #20]
 8012220:	3b02      	subs	r3, #2
 8012222:	429a      	cmp	r2, r3
 8012224:	d804      	bhi.n	8012230 <create_chain+0x106>
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	691b      	ldr	r3, [r3, #16]
 801222a:	1e5a      	subs	r2, r3, #1
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	791b      	ldrb	r3, [r3, #4]
 8012234:	f043 0301 	orr.w	r3, r3, #1
 8012238:	b2da      	uxtb	r2, r3
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	711a      	strb	r2, [r3, #4]
 801223e:	e007      	b.n	8012250 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012240:	7dfb      	ldrb	r3, [r7, #23]
 8012242:	2b01      	cmp	r3, #1
 8012244:	d102      	bne.n	801224c <create_chain+0x122>
 8012246:	f04f 33ff 	mov.w	r3, #4294967295
 801224a:	e000      	b.n	801224e <create_chain+0x124>
 801224c:	2301      	movs	r3, #1
 801224e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012250:	69fb      	ldr	r3, [r7, #28]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3720      	adds	r7, #32
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801225a:	b480      	push	{r7}
 801225c:	b087      	sub	sp, #28
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226e:	3304      	adds	r3, #4
 8012270:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	0a5b      	lsrs	r3, r3, #9
 8012276:	68fa      	ldr	r2, [r7, #12]
 8012278:	8952      	ldrh	r2, [r2, #10]
 801227a:	fbb3 f3f2 	udiv	r3, r3, r2
 801227e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	1d1a      	adds	r2, r3, #4
 8012284:	613a      	str	r2, [r7, #16]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <clmt_clust+0x3a>
 8012290:	2300      	movs	r3, #0
 8012292:	e010      	b.n	80122b6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012294:	697a      	ldr	r2, [r7, #20]
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	429a      	cmp	r2, r3
 801229a:	d307      	bcc.n	80122ac <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801229c:	697a      	ldr	r2, [r7, #20]
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	617b      	str	r3, [r7, #20]
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	3304      	adds	r3, #4
 80122a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122aa:	e7e9      	b.n	8012280 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80122ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	4413      	add	r3, r2
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	371c      	adds	r7, #28
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr

080122c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b086      	sub	sp, #24
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
 80122ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80122d8:	d204      	bcs.n	80122e4 <dir_sdi+0x22>
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	f003 031f 	and.w	r3, r3, #31
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d001      	beq.n	80122e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80122e4:	2302      	movs	r3, #2
 80122e6:	e063      	b.n	80123b0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	689b      	ldr	r3, [r3, #8]
 80122f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d106      	bne.n	8012308 <dir_sdi+0x46>
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	2b02      	cmp	r3, #2
 8012300:	d902      	bls.n	8012308 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012306:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d10c      	bne.n	8012328 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	095b      	lsrs	r3, r3, #5
 8012312:	693a      	ldr	r2, [r7, #16]
 8012314:	8912      	ldrh	r2, [r2, #8]
 8012316:	4293      	cmp	r3, r2
 8012318:	d301      	bcc.n	801231e <dir_sdi+0x5c>
 801231a:	2302      	movs	r3, #2
 801231c:	e048      	b.n	80123b0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	61da      	str	r2, [r3, #28]
 8012326:	e029      	b.n	801237c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	895b      	ldrh	r3, [r3, #10]
 801232c:	025b      	lsls	r3, r3, #9
 801232e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012330:	e019      	b.n	8012366 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6979      	ldr	r1, [r7, #20]
 8012336:	4618      	mov	r0, r3
 8012338:	f7ff fd01 	bl	8011d3e <get_fat>
 801233c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012344:	d101      	bne.n	801234a <dir_sdi+0x88>
 8012346:	2301      	movs	r3, #1
 8012348:	e032      	b.n	80123b0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d904      	bls.n	801235a <dir_sdi+0x98>
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	695b      	ldr	r3, [r3, #20]
 8012354:	697a      	ldr	r2, [r7, #20]
 8012356:	429a      	cmp	r2, r3
 8012358:	d301      	bcc.n	801235e <dir_sdi+0x9c>
 801235a:	2302      	movs	r3, #2
 801235c:	e028      	b.n	80123b0 <dir_sdi+0xee>
			ofs -= csz;
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	429a      	cmp	r2, r3
 801236c:	d2e1      	bcs.n	8012332 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801236e:	6979      	ldr	r1, [r7, #20]
 8012370:	6938      	ldr	r0, [r7, #16]
 8012372:	f7ff fcc5 	bl	8011d00 <clust2sect>
 8012376:	4602      	mov	r2, r0
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	697a      	ldr	r2, [r7, #20]
 8012380:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	69db      	ldr	r3, [r3, #28]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d101      	bne.n	801238e <dir_sdi+0xcc>
 801238a:	2302      	movs	r3, #2
 801238c:	e010      	b.n	80123b0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	69da      	ldr	r2, [r3, #28]
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	0a5b      	lsrs	r3, r3, #9
 8012396:	441a      	add	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a8:	441a      	add	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123ae:	2300      	movs	r3, #0
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3718      	adds	r7, #24
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	695b      	ldr	r3, [r3, #20]
 80123cc:	3320      	adds	r3, #32
 80123ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	69db      	ldr	r3, [r3, #28]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d003      	beq.n	80123e0 <dir_next+0x28>
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80123de:	d301      	bcc.n	80123e4 <dir_next+0x2c>
 80123e0:	2304      	movs	r3, #4
 80123e2:	e0aa      	b.n	801253a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	f040 8098 	bne.w	8012520 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	69db      	ldr	r3, [r3, #28]
 80123f4:	1c5a      	adds	r2, r3, #1
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	699b      	ldr	r3, [r3, #24]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10b      	bne.n	801241a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	095b      	lsrs	r3, r3, #5
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	8912      	ldrh	r2, [r2, #8]
 801240a:	4293      	cmp	r3, r2
 801240c:	f0c0 8088 	bcc.w	8012520 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	61da      	str	r2, [r3, #28]
 8012416:	2304      	movs	r3, #4
 8012418:	e08f      	b.n	801253a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	0a5b      	lsrs	r3, r3, #9
 801241e:	68fa      	ldr	r2, [r7, #12]
 8012420:	8952      	ldrh	r2, [r2, #10]
 8012422:	3a01      	subs	r2, #1
 8012424:	4013      	ands	r3, r2
 8012426:	2b00      	cmp	r3, #0
 8012428:	d17a      	bne.n	8012520 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	699b      	ldr	r3, [r3, #24]
 8012430:	4619      	mov	r1, r3
 8012432:	4610      	mov	r0, r2
 8012434:	f7ff fc83 	bl	8011d3e <get_fat>
 8012438:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	2b01      	cmp	r3, #1
 801243e:	d801      	bhi.n	8012444 <dir_next+0x8c>
 8012440:	2302      	movs	r3, #2
 8012442:	e07a      	b.n	801253a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801244a:	d101      	bne.n	8012450 <dir_next+0x98>
 801244c:	2301      	movs	r3, #1
 801244e:	e074      	b.n	801253a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	695b      	ldr	r3, [r3, #20]
 8012454:	697a      	ldr	r2, [r7, #20]
 8012456:	429a      	cmp	r2, r3
 8012458:	d358      	bcc.n	801250c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d104      	bne.n	801246a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2200      	movs	r2, #0
 8012464:	61da      	str	r2, [r3, #28]
 8012466:	2304      	movs	r3, #4
 8012468:	e067      	b.n	801253a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	699b      	ldr	r3, [r3, #24]
 8012470:	4619      	mov	r1, r3
 8012472:	4610      	mov	r0, r2
 8012474:	f7ff fe59 	bl	801212a <create_chain>
 8012478:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d101      	bne.n	8012484 <dir_next+0xcc>
 8012480:	2307      	movs	r3, #7
 8012482:	e05a      	b.n	801253a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	2b01      	cmp	r3, #1
 8012488:	d101      	bne.n	801248e <dir_next+0xd6>
 801248a:	2302      	movs	r3, #2
 801248c:	e055      	b.n	801253a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012494:	d101      	bne.n	801249a <dir_next+0xe2>
 8012496:	2301      	movs	r3, #1
 8012498:	e04f      	b.n	801253a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801249a:	68f8      	ldr	r0, [r7, #12]
 801249c:	f7ff fb50 	bl	8011b40 <sync_window>
 80124a0:	4603      	mov	r3, r0
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d001      	beq.n	80124aa <dir_next+0xf2>
 80124a6:	2301      	movs	r3, #1
 80124a8:	e047      	b.n	801253a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	3330      	adds	r3, #48	@ 0x30
 80124ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124b2:	2100      	movs	r1, #0
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7ff f979 	bl	80117ac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124ba:	2300      	movs	r3, #0
 80124bc:	613b      	str	r3, [r7, #16]
 80124be:	6979      	ldr	r1, [r7, #20]
 80124c0:	68f8      	ldr	r0, [r7, #12]
 80124c2:	f7ff fc1d 	bl	8011d00 <clust2sect>
 80124c6:	4602      	mov	r2, r0
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80124cc:	e012      	b.n	80124f4 <dir_next+0x13c>
						fs->wflag = 1;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2201      	movs	r2, #1
 80124d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7ff fb33 	bl	8011b40 <sync_window>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <dir_next+0x12c>
 80124e0:	2301      	movs	r3, #1
 80124e2:	e02a      	b.n	801253a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	3301      	adds	r3, #1
 80124e8:	613b      	str	r3, [r7, #16]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124ee:	1c5a      	adds	r2, r3, #1
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	895b      	ldrh	r3, [r3, #10]
 80124f8:	461a      	mov	r2, r3
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d3e6      	bcc.n	80124ce <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	1ad2      	subs	r2, r2, r3
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	697a      	ldr	r2, [r7, #20]
 8012510:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012512:	6979      	ldr	r1, [r7, #20]
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f7ff fbf3 	bl	8011d00 <clust2sect>
 801251a:	4602      	mov	r2, r0
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	68ba      	ldr	r2, [r7, #8]
 8012524:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012532:	441a      	add	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3718      	adds	r7, #24
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b086      	sub	sp, #24
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012552:	2100      	movs	r1, #0
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7ff feb4 	bl	80122c2 <dir_sdi>
 801255a:	4603      	mov	r3, r0
 801255c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801255e:	7dfb      	ldrb	r3, [r7, #23]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d12b      	bne.n	80125bc <dir_alloc+0x7a>
		n = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	69db      	ldr	r3, [r3, #28]
 801256c:	4619      	mov	r1, r3
 801256e:	68f8      	ldr	r0, [r7, #12]
 8012570:	f7ff fb2a 	bl	8011bc8 <move_window>
 8012574:	4603      	mov	r3, r0
 8012576:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012578:	7dfb      	ldrb	r3, [r7, #23]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d11d      	bne.n	80125ba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6a1b      	ldr	r3, [r3, #32]
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	2be5      	cmp	r3, #229	@ 0xe5
 8012586:	d004      	beq.n	8012592 <dir_alloc+0x50>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a1b      	ldr	r3, [r3, #32]
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d107      	bne.n	80125a2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	3301      	adds	r3, #1
 8012596:	613b      	str	r3, [r7, #16]
 8012598:	693a      	ldr	r2, [r7, #16]
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	429a      	cmp	r2, r3
 801259e:	d102      	bne.n	80125a6 <dir_alloc+0x64>
 80125a0:	e00c      	b.n	80125bc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125a2:	2300      	movs	r3, #0
 80125a4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125a6:	2101      	movs	r1, #1
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7ff ff05 	bl	80123b8 <dir_next>
 80125ae:	4603      	mov	r3, r0
 80125b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125b2:	7dfb      	ldrb	r3, [r7, #23]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d0d7      	beq.n	8012568 <dir_alloc+0x26>
 80125b8:	e000      	b.n	80125bc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80125ba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80125bc:	7dfb      	ldrb	r3, [r7, #23]
 80125be:	2b04      	cmp	r3, #4
 80125c0:	d101      	bne.n	80125c6 <dir_alloc+0x84>
 80125c2:	2307      	movs	r3, #7
 80125c4:	75fb      	strb	r3, [r7, #23]
	return res;
 80125c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3718      	adds	r7, #24
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	331a      	adds	r3, #26
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ff f840 	bl	8011664 <ld_word>
 80125e4:	4603      	mov	r3, r0
 80125e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b03      	cmp	r3, #3
 80125ee:	d109      	bne.n	8012604 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	3314      	adds	r3, #20
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7ff f835 	bl	8011664 <ld_word>
 80125fa:	4603      	mov	r3, r0
 80125fc:	041b      	lsls	r3, r3, #16
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	4313      	orrs	r3, r2
 8012602:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012604:	68fb      	ldr	r3, [r7, #12]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b084      	sub	sp, #16
 8012612:	af00      	add	r7, sp, #0
 8012614:	60f8      	str	r0, [r7, #12]
 8012616:	60b9      	str	r1, [r7, #8]
 8012618:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	331a      	adds	r3, #26
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	b292      	uxth	r2, r2
 8012622:	4611      	mov	r1, r2
 8012624:	4618      	mov	r0, r3
 8012626:	f7ff f859 	bl	80116dc <st_word>
	if (fs->fs_type == FS_FAT32) {
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	2b03      	cmp	r3, #3
 8012630:	d109      	bne.n	8012646 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	f103 0214 	add.w	r2, r3, #20
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	0c1b      	lsrs	r3, r3, #16
 801263c:	b29b      	uxth	r3, r3
 801263e:	4619      	mov	r1, r3
 8012640:	4610      	mov	r0, r2
 8012642:	f7ff f84b 	bl	80116dc <st_word>
	}
}
 8012646:	bf00      	nop
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b086      	sub	sp, #24
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801265c:	2100      	movs	r1, #0
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff fe2f 	bl	80122c2 <dir_sdi>
 8012664:	4603      	mov	r3, r0
 8012666:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <dir_find+0x24>
 801266e:	7dfb      	ldrb	r3, [r7, #23]
 8012670:	e03e      	b.n	80126f0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	69db      	ldr	r3, [r3, #28]
 8012676:	4619      	mov	r1, r3
 8012678:	6938      	ldr	r0, [r7, #16]
 801267a:	f7ff faa5 	bl	8011bc8 <move_window>
 801267e:	4603      	mov	r3, r0
 8012680:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d12f      	bne.n	80126e8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6a1b      	ldr	r3, [r3, #32]
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012690:	7bfb      	ldrb	r3, [r7, #15]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d102      	bne.n	801269c <dir_find+0x4e>
 8012696:	2304      	movs	r3, #4
 8012698:	75fb      	strb	r3, [r7, #23]
 801269a:	e028      	b.n	80126ee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6a1b      	ldr	r3, [r3, #32]
 80126a0:	330b      	adds	r3, #11
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6a1b      	ldr	r3, [r3, #32]
 80126b2:	330b      	adds	r3, #11
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	f003 0308 	and.w	r3, r3, #8
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10a      	bne.n	80126d4 <dir_find+0x86>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6a18      	ldr	r0, [r3, #32]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3324      	adds	r3, #36	@ 0x24
 80126c6:	220b      	movs	r2, #11
 80126c8:	4619      	mov	r1, r3
 80126ca:	f7ff f88a 	bl	80117e2 <mem_cmp>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d00b      	beq.n	80126ec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80126d4:	2100      	movs	r1, #0
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7ff fe6e 	bl	80123b8 <dir_next>
 80126dc:	4603      	mov	r3, r0
 80126de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d0c5      	beq.n	8012672 <dir_find+0x24>
 80126e6:	e002      	b.n	80126ee <dir_find+0xa0>
		if (res != FR_OK) break;
 80126e8:	bf00      	nop
 80126ea:	e000      	b.n	80126ee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126ec:	bf00      	nop

	return res;
 80126ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3718      	adds	r7, #24
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012706:	2101      	movs	r1, #1
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7ff ff1a 	bl	8012542 <dir_alloc>
 801270e:	4603      	mov	r3, r0
 8012710:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012712:	7bfb      	ldrb	r3, [r7, #15]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d11c      	bne.n	8012752 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	69db      	ldr	r3, [r3, #28]
 801271c:	4619      	mov	r1, r3
 801271e:	68b8      	ldr	r0, [r7, #8]
 8012720:	f7ff fa52 	bl	8011bc8 <move_window>
 8012724:	4603      	mov	r3, r0
 8012726:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012728:	7bfb      	ldrb	r3, [r7, #15]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d111      	bne.n	8012752 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6a1b      	ldr	r3, [r3, #32]
 8012732:	2220      	movs	r2, #32
 8012734:	2100      	movs	r1, #0
 8012736:	4618      	mov	r0, r3
 8012738:	f7ff f838 	bl	80117ac <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6a18      	ldr	r0, [r3, #32]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	3324      	adds	r3, #36	@ 0x24
 8012744:	220b      	movs	r2, #11
 8012746:	4619      	mov	r1, r3
 8012748:	f7ff f80f 	bl	801176a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	2201      	movs	r2, #1
 8012750:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012752:	7bfb      	ldrb	r3, [r7, #15]
}
 8012754:	4618      	mov	r0, r3
 8012756:	3710      	adds	r7, #16
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b088      	sub	sp, #32
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3324      	adds	r3, #36	@ 0x24
 8012770:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012772:	220b      	movs	r2, #11
 8012774:	2120      	movs	r1, #32
 8012776:	68b8      	ldr	r0, [r7, #8]
 8012778:	f7ff f818 	bl	80117ac <mem_set>
	si = i = 0; ni = 8;
 801277c:	2300      	movs	r3, #0
 801277e:	613b      	str	r3, [r7, #16]
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	61fb      	str	r3, [r7, #28]
 8012784:	2308      	movs	r3, #8
 8012786:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	1c5a      	adds	r2, r3, #1
 801278c:	61fa      	str	r2, [r7, #28]
 801278e:	68fa      	ldr	r2, [r7, #12]
 8012790:	4413      	add	r3, r2
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012796:	7efb      	ldrb	r3, [r7, #27]
 8012798:	2b20      	cmp	r3, #32
 801279a:	d94e      	bls.n	801283a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801279c:	7efb      	ldrb	r3, [r7, #27]
 801279e:	2b2f      	cmp	r3, #47	@ 0x2f
 80127a0:	d006      	beq.n	80127b0 <create_name+0x54>
 80127a2:	7efb      	ldrb	r3, [r7, #27]
 80127a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80127a6:	d110      	bne.n	80127ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80127a8:	e002      	b.n	80127b0 <create_name+0x54>
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	3301      	adds	r3, #1
 80127ae:	61fb      	str	r3, [r7, #28]
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	4413      	add	r3, r2
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80127ba:	d0f6      	beq.n	80127aa <create_name+0x4e>
 80127bc:	68fa      	ldr	r2, [r7, #12]
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	4413      	add	r3, r2
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80127c6:	d0f0      	beq.n	80127aa <create_name+0x4e>
			break;
 80127c8:	e038      	b.n	801283c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80127ca:	7efb      	ldrb	r3, [r7, #27]
 80127cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80127ce:	d003      	beq.n	80127d8 <create_name+0x7c>
 80127d0:	693a      	ldr	r2, [r7, #16]
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d30c      	bcc.n	80127f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	2b0b      	cmp	r3, #11
 80127dc:	d002      	beq.n	80127e4 <create_name+0x88>
 80127de:	7efb      	ldrb	r3, [r7, #27]
 80127e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80127e2:	d001      	beq.n	80127e8 <create_name+0x8c>
 80127e4:	2306      	movs	r3, #6
 80127e6:	e044      	b.n	8012872 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80127e8:	2308      	movs	r3, #8
 80127ea:	613b      	str	r3, [r7, #16]
 80127ec:	230b      	movs	r3, #11
 80127ee:	617b      	str	r3, [r7, #20]
			continue;
 80127f0:	e022      	b.n	8012838 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80127f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	da04      	bge.n	8012804 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80127fa:	7efb      	ldrb	r3, [r7, #27]
 80127fc:	3b80      	subs	r3, #128	@ 0x80
 80127fe:	4a1f      	ldr	r2, [pc, #124]	@ (801287c <create_name+0x120>)
 8012800:	5cd3      	ldrb	r3, [r2, r3]
 8012802:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012804:	7efb      	ldrb	r3, [r7, #27]
 8012806:	4619      	mov	r1, r3
 8012808:	481d      	ldr	r0, [pc, #116]	@ (8012880 <create_name+0x124>)
 801280a:	f7ff f811 	bl	8011830 <chk_chr>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <create_name+0xbc>
 8012814:	2306      	movs	r3, #6
 8012816:	e02c      	b.n	8012872 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012818:	7efb      	ldrb	r3, [r7, #27]
 801281a:	2b60      	cmp	r3, #96	@ 0x60
 801281c:	d905      	bls.n	801282a <create_name+0xce>
 801281e:	7efb      	ldrb	r3, [r7, #27]
 8012820:	2b7a      	cmp	r3, #122	@ 0x7a
 8012822:	d802      	bhi.n	801282a <create_name+0xce>
 8012824:	7efb      	ldrb	r3, [r7, #27]
 8012826:	3b20      	subs	r3, #32
 8012828:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	1c5a      	adds	r2, r3, #1
 801282e:	613a      	str	r2, [r7, #16]
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	4413      	add	r3, r2
 8012834:	7efa      	ldrb	r2, [r7, #27]
 8012836:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012838:	e7a6      	b.n	8012788 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801283a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801283c:	68fa      	ldr	r2, [r7, #12]
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	441a      	add	r2, r3
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d101      	bne.n	8012850 <create_name+0xf4>
 801284c:	2306      	movs	r3, #6
 801284e:	e010      	b.n	8012872 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	2be5      	cmp	r3, #229	@ 0xe5
 8012856:	d102      	bne.n	801285e <create_name+0x102>
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	2205      	movs	r2, #5
 801285c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801285e:	7efb      	ldrb	r3, [r7, #27]
 8012860:	2b20      	cmp	r3, #32
 8012862:	d801      	bhi.n	8012868 <create_name+0x10c>
 8012864:	2204      	movs	r2, #4
 8012866:	e000      	b.n	801286a <create_name+0x10e>
 8012868:	2200      	movs	r2, #0
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	330b      	adds	r3, #11
 801286e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012870:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012872:	4618      	mov	r0, r3
 8012874:	3720      	adds	r7, #32
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	0801b398 	.word	0x0801b398
 8012880:	0801b318 	.word	0x0801b318

08012884 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012898:	e002      	b.n	80128a0 <follow_path+0x1c>
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	3301      	adds	r3, #1
 801289e:	603b      	str	r3, [r7, #0]
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80128a6:	d0f8      	beq.n	801289a <follow_path+0x16>
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80128ae:	d0f4      	beq.n	801289a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	2200      	movs	r2, #0
 80128b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b1f      	cmp	r3, #31
 80128bc:	d80a      	bhi.n	80128d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2280      	movs	r2, #128	@ 0x80
 80128c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80128c6:	2100      	movs	r1, #0
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7ff fcfa 	bl	80122c2 <dir_sdi>
 80128ce:	4603      	mov	r3, r0
 80128d0:	75fb      	strb	r3, [r7, #23]
 80128d2:	e043      	b.n	801295c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80128d4:	463b      	mov	r3, r7
 80128d6:	4619      	mov	r1, r3
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f7ff ff3f 	bl	801275c <create_name>
 80128de:	4603      	mov	r3, r0
 80128e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80128e2:	7dfb      	ldrb	r3, [r7, #23]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d134      	bne.n	8012952 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f7ff feb0 	bl	801264e <dir_find>
 80128ee:	4603      	mov	r3, r0
 80128f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80128f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80128fa:	7dfb      	ldrb	r3, [r7, #23]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d00a      	beq.n	8012916 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012900:	7dfb      	ldrb	r3, [r7, #23]
 8012902:	2b04      	cmp	r3, #4
 8012904:	d127      	bne.n	8012956 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012906:	7afb      	ldrb	r3, [r7, #11]
 8012908:	f003 0304 	and.w	r3, r3, #4
 801290c:	2b00      	cmp	r3, #0
 801290e:	d122      	bne.n	8012956 <follow_path+0xd2>
 8012910:	2305      	movs	r3, #5
 8012912:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012914:	e01f      	b.n	8012956 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012916:	7afb      	ldrb	r3, [r7, #11]
 8012918:	f003 0304 	and.w	r3, r3, #4
 801291c:	2b00      	cmp	r3, #0
 801291e:	d11c      	bne.n	801295a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	799b      	ldrb	r3, [r3, #6]
 8012924:	f003 0310 	and.w	r3, r3, #16
 8012928:	2b00      	cmp	r3, #0
 801292a:	d102      	bne.n	8012932 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801292c:	2305      	movs	r3, #5
 801292e:	75fb      	strb	r3, [r7, #23]
 8012930:	e014      	b.n	801295c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	695b      	ldr	r3, [r3, #20]
 801293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012940:	4413      	add	r3, r2
 8012942:	4619      	mov	r1, r3
 8012944:	68f8      	ldr	r0, [r7, #12]
 8012946:	f7ff fe43 	bl	80125d0 <ld_clust>
 801294a:	4602      	mov	r2, r0
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012950:	e7c0      	b.n	80128d4 <follow_path+0x50>
			if (res != FR_OK) break;
 8012952:	bf00      	nop
 8012954:	e002      	b.n	801295c <follow_path+0xd8>
				break;
 8012956:	bf00      	nop
 8012958:	e000      	b.n	801295c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801295a:	bf00      	nop
			}
		}
	}

	return res;
 801295c:	7dfb      	ldrb	r3, [r7, #23]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3718      	adds	r7, #24
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}

08012966 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012966:	b480      	push	{r7}
 8012968:	b087      	sub	sp, #28
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801296e:	f04f 33ff 	mov.w	r3, #4294967295
 8012972:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d031      	beq.n	80129e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	617b      	str	r3, [r7, #20]
 8012982:	e002      	b.n	801298a <get_ldnumber+0x24>
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	3301      	adds	r3, #1
 8012988:	617b      	str	r3, [r7, #20]
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	2b20      	cmp	r3, #32
 8012990:	d903      	bls.n	801299a <get_ldnumber+0x34>
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	2b3a      	cmp	r3, #58	@ 0x3a
 8012998:	d1f4      	bne.n	8012984 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	2b3a      	cmp	r3, #58	@ 0x3a
 80129a0:	d11c      	bne.n	80129dc <get_ldnumber+0x76>
			tp = *path;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	60fa      	str	r2, [r7, #12]
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	3b30      	subs	r3, #48	@ 0x30
 80129b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	2b09      	cmp	r3, #9
 80129b8:	d80e      	bhi.n	80129d8 <get_ldnumber+0x72>
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d10a      	bne.n	80129d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d107      	bne.n	80129d8 <get_ldnumber+0x72>
					vol = (int)i;
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	3301      	adds	r3, #1
 80129d0:	617b      	str	r3, [r7, #20]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	697a      	ldr	r2, [r7, #20]
 80129d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	e002      	b.n	80129e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80129dc:	2300      	movs	r3, #0
 80129de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80129e0:	693b      	ldr	r3, [r7, #16]
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	371c      	adds	r7, #28
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr
	...

080129f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2200      	movs	r2, #0
 80129fe:	70da      	strb	r2, [r3, #3]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f04f 32ff 	mov.w	r2, #4294967295
 8012a06:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f7ff f8dc 	bl	8011bc8 <move_window>
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d001      	beq.n	8012a1a <check_fs+0x2a>
 8012a16:	2304      	movs	r3, #4
 8012a18:	e038      	b.n	8012a8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	3330      	adds	r3, #48	@ 0x30
 8012a1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fe fe1e 	bl	8011664 <ld_word>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d001      	beq.n	8012a38 <check_fs+0x48>
 8012a34:	2303      	movs	r3, #3
 8012a36:	e029      	b.n	8012a8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a3e:	2be9      	cmp	r3, #233	@ 0xe9
 8012a40:	d009      	beq.n	8012a56 <check_fs+0x66>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a48:	2beb      	cmp	r3, #235	@ 0xeb
 8012a4a:	d11e      	bne.n	8012a8a <check_fs+0x9a>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012a52:	2b90      	cmp	r3, #144	@ 0x90
 8012a54:	d119      	bne.n	8012a8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	3330      	adds	r3, #48	@ 0x30
 8012a5a:	3336      	adds	r3, #54	@ 0x36
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fe fe1a 	bl	8011696 <ld_dword>
 8012a62:	4603      	mov	r3, r0
 8012a64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012a68:	4a0a      	ldr	r2, [pc, #40]	@ (8012a94 <check_fs+0xa4>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d101      	bne.n	8012a72 <check_fs+0x82>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e00c      	b.n	8012a8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	3330      	adds	r3, #48	@ 0x30
 8012a76:	3352      	adds	r3, #82	@ 0x52
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7fe fe0c 	bl	8011696 <ld_dword>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	4a05      	ldr	r2, [pc, #20]	@ (8012a98 <check_fs+0xa8>)
 8012a82:	4293      	cmp	r3, r2
 8012a84:	d101      	bne.n	8012a8a <check_fs+0x9a>
 8012a86:	2300      	movs	r3, #0
 8012a88:	e000      	b.n	8012a8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012a8a:	2302      	movs	r3, #2
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	00544146 	.word	0x00544146
 8012a98:	33544146 	.word	0x33544146

08012a9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b096      	sub	sp, #88	@ 0x58
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	4613      	mov	r3, r2
 8012aa8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2200      	movs	r2, #0
 8012aae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f7ff ff58 	bl	8012966 <get_ldnumber>
 8012ab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	da01      	bge.n	8012ac2 <find_volume+0x26>
 8012abe:	230b      	movs	r3, #11
 8012ac0:	e22d      	b.n	8012f1e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012ac2:	4aa1      	ldr	r2, [pc, #644]	@ (8012d48 <find_volume+0x2ac>)
 8012ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012aca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d101      	bne.n	8012ad6 <find_volume+0x3a>
 8012ad2:	230c      	movs	r3, #12
 8012ad4:	e223      	b.n	8012f1e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012ada:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012adc:	79fb      	ldrb	r3, [r7, #7]
 8012ade:	f023 0301 	bic.w	r3, r3, #1
 8012ae2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d01a      	beq.n	8012b22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aee:	785b      	ldrb	r3, [r3, #1]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fe fd19 	bl	8011528 <disk_status>
 8012af6:	4603      	mov	r3, r0
 8012af8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012afc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b00:	f003 0301 	and.w	r3, r3, #1
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10c      	bne.n	8012b22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012b08:	79fb      	ldrb	r3, [r7, #7]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <find_volume+0x82>
 8012b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b12:	f003 0304 	and.w	r3, r3, #4
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d001      	beq.n	8012b1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012b1a:	230a      	movs	r3, #10
 8012b1c:	e1ff      	b.n	8012f1e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8012b1e:	2300      	movs	r3, #0
 8012b20:	e1fd      	b.n	8012f1e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b24:	2200      	movs	r2, #0
 8012b26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b2a:	b2da      	uxtb	r2, r3
 8012b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b32:	785b      	ldrb	r3, [r3, #1]
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7fe fd11 	bl	801155c <disk_initialize>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012b40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b44:	f003 0301 	and.w	r3, r3, #1
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d001      	beq.n	8012b50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012b4c:	2303      	movs	r3, #3
 8012b4e:	e1e6      	b.n	8012f1e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012b50:	79fb      	ldrb	r3, [r7, #7]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d007      	beq.n	8012b66 <find_volume+0xca>
 8012b56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012b5a:	f003 0304 	and.w	r3, r3, #4
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d001      	beq.n	8012b66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012b62:	230a      	movs	r3, #10
 8012b64:	e1db      	b.n	8012f1e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012b66:	2300      	movs	r3, #0
 8012b68:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012b6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012b6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012b6e:	f7ff ff3f 	bl	80129f0 <check_fs>
 8012b72:	4603      	mov	r3, r0
 8012b74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012b78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012b7c:	2b02      	cmp	r3, #2
 8012b7e:	d149      	bne.n	8012c14 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b80:	2300      	movs	r3, #0
 8012b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8012b84:	e01e      	b.n	8012bc4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012b8e:	011b      	lsls	r3, r3, #4
 8012b90:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012b94:	4413      	add	r3, r2
 8012b96:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9a:	3304      	adds	r3, #4
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d006      	beq.n	8012bb0 <find_volume+0x114>
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fe fd75 	bl	8011696 <ld_dword>
 8012bac:	4602      	mov	r2, r0
 8012bae:	e000      	b.n	8012bb2 <find_volume+0x116>
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	3358      	adds	r3, #88	@ 0x58
 8012bb8:	443b      	add	r3, r7
 8012bba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8012bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bc6:	2b03      	cmp	r3, #3
 8012bc8:	d9dd      	bls.n	8012b86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012bca:	2300      	movs	r3, #0
 8012bcc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8012bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d002      	beq.n	8012bda <find_volume+0x13e>
 8012bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012bdc:	009b      	lsls	r3, r3, #2
 8012bde:	3358      	adds	r3, #88	@ 0x58
 8012be0:	443b      	add	r3, r7
 8012be2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012be6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d005      	beq.n	8012bfa <find_volume+0x15e>
 8012bee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012bf0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012bf2:	f7ff fefd 	bl	80129f0 <check_fs>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	e000      	b.n	8012bfc <find_volume+0x160>
 8012bfa:	2303      	movs	r3, #3
 8012bfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d905      	bls.n	8012c14 <find_volume+0x178>
 8012c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8012c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012c10:	2b03      	cmp	r3, #3
 8012c12:	d9e2      	bls.n	8012bda <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012c14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012c18:	2b04      	cmp	r3, #4
 8012c1a:	d101      	bne.n	8012c20 <find_volume+0x184>
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e17e      	b.n	8012f1e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012c20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d901      	bls.n	8012c2c <find_volume+0x190>
 8012c28:	230d      	movs	r3, #13
 8012c2a:	e178      	b.n	8012f1e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c2e:	3330      	adds	r3, #48	@ 0x30
 8012c30:	330b      	adds	r3, #11
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7fe fd16 	bl	8011664 <ld_word>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c3e:	d001      	beq.n	8012c44 <find_volume+0x1a8>
 8012c40:	230d      	movs	r3, #13
 8012c42:	e16c      	b.n	8012f1e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c46:	3330      	adds	r3, #48	@ 0x30
 8012c48:	3316      	adds	r3, #22
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7fe fd0a 	bl	8011664 <ld_word>
 8012c50:	4603      	mov	r3, r0
 8012c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d106      	bne.n	8012c68 <find_volume+0x1cc>
 8012c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c5c:	3330      	adds	r3, #48	@ 0x30
 8012c5e:	3324      	adds	r3, #36	@ 0x24
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fe fd18 	bl	8011696 <ld_dword>
 8012c66:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c6c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c70:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c7a:	789b      	ldrb	r3, [r3, #2]
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d005      	beq.n	8012c8c <find_volume+0x1f0>
 8012c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c82:	789b      	ldrb	r3, [r3, #2]
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d001      	beq.n	8012c8c <find_volume+0x1f0>
 8012c88:	230d      	movs	r3, #13
 8012c8a:	e148      	b.n	8012f1e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c8e:	789b      	ldrb	r3, [r3, #2]
 8012c90:	461a      	mov	r2, r3
 8012c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c94:	fb02 f303 	mul.w	r3, r2, r3
 8012c98:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ca4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ca8:	895b      	ldrh	r3, [r3, #10]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d008      	beq.n	8012cc0 <find_volume+0x224>
 8012cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cb0:	895b      	ldrh	r3, [r3, #10]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cb6:	895b      	ldrh	r3, [r3, #10]
 8012cb8:	3b01      	subs	r3, #1
 8012cba:	4013      	ands	r3, r2
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <find_volume+0x228>
 8012cc0:	230d      	movs	r3, #13
 8012cc2:	e12c      	b.n	8012f1e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cc6:	3330      	adds	r3, #48	@ 0x30
 8012cc8:	3311      	adds	r3, #17
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7fe fcca 	bl	8011664 <ld_word>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cda:	891b      	ldrh	r3, [r3, #8]
 8012cdc:	f003 030f 	and.w	r3, r3, #15
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d001      	beq.n	8012cea <find_volume+0x24e>
 8012ce6:	230d      	movs	r3, #13
 8012ce8:	e119      	b.n	8012f1e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cec:	3330      	adds	r3, #48	@ 0x30
 8012cee:	3313      	adds	r3, #19
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7fe fcb7 	bl	8011664 <ld_word>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d106      	bne.n	8012d0e <find_volume+0x272>
 8012d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d02:	3330      	adds	r3, #48	@ 0x30
 8012d04:	3320      	adds	r3, #32
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fe fcc5 	bl	8011696 <ld_dword>
 8012d0c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d10:	3330      	adds	r3, #48	@ 0x30
 8012d12:	330e      	adds	r3, #14
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe fca5 	bl	8011664 <ld_word>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012d1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d101      	bne.n	8012d28 <find_volume+0x28c>
 8012d24:	230d      	movs	r3, #13
 8012d26:	e0fa      	b.n	8012f1e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012d28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d2c:	4413      	add	r3, r2
 8012d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d30:	8912      	ldrh	r2, [r2, #8]
 8012d32:	0912      	lsrs	r2, r2, #4
 8012d34:	b292      	uxth	r2, r2
 8012d36:	4413      	add	r3, r2
 8012d38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d204      	bcs.n	8012d4c <find_volume+0x2b0>
 8012d42:	230d      	movs	r3, #13
 8012d44:	e0eb      	b.n	8012f1e <find_volume+0x482>
 8012d46:	bf00      	nop
 8012d48:	200019e4 	.word	0x200019e4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012d4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d50:	1ad3      	subs	r3, r2, r3
 8012d52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d54:	8952      	ldrh	r2, [r2, #10]
 8012d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <find_volume+0x2ca>
 8012d62:	230d      	movs	r3, #13
 8012d64:	e0db      	b.n	8012f1e <find_volume+0x482>
		fmt = FS_FAT32;
 8012d66:	2303      	movs	r3, #3
 8012d68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d802      	bhi.n	8012d7c <find_volume+0x2e0>
 8012d76:	2302      	movs	r3, #2
 8012d78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d7e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d802      	bhi.n	8012d8c <find_volume+0x2f0>
 8012d86:	2301      	movs	r3, #1
 8012d88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d8e:	1c9a      	adds	r2, r3, #2
 8012d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d92:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012d98:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012d9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d9e:	441a      	add	r2, r3
 8012da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012da2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012da4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012da8:	441a      	add	r2, r3
 8012daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dac:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8012dae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	d11e      	bne.n	8012df4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db8:	3330      	adds	r3, #48	@ 0x30
 8012dba:	332a      	adds	r3, #42	@ 0x2a
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7fe fc51 	bl	8011664 <ld_word>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d001      	beq.n	8012dcc <find_volume+0x330>
 8012dc8:	230d      	movs	r3, #13
 8012dca:	e0a8      	b.n	8012f1e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dce:	891b      	ldrh	r3, [r3, #8]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d001      	beq.n	8012dd8 <find_volume+0x33c>
 8012dd4:	230d      	movs	r3, #13
 8012dd6:	e0a2      	b.n	8012f1e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dda:	3330      	adds	r3, #48	@ 0x30
 8012ddc:	332c      	adds	r3, #44	@ 0x2c
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fe fc59 	bl	8011696 <ld_dword>
 8012de4:	4602      	mov	r2, r0
 8012de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012de8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dec:	695b      	ldr	r3, [r3, #20]
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012df2:	e01f      	b.n	8012e34 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012df6:	891b      	ldrh	r3, [r3, #8]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d101      	bne.n	8012e00 <find_volume+0x364>
 8012dfc:	230d      	movs	r3, #13
 8012dfe:	e08e      	b.n	8012f1e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e02:	6a1a      	ldr	r2, [r3, #32]
 8012e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e06:	441a      	add	r2, r3
 8012e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e0a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d103      	bne.n	8012e1c <find_volume+0x380>
 8012e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e16:	695b      	ldr	r3, [r3, #20]
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	e00a      	b.n	8012e32 <find_volume+0x396>
 8012e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e1e:	695a      	ldr	r2, [r3, #20]
 8012e20:	4613      	mov	r3, r2
 8012e22:	005b      	lsls	r3, r3, #1
 8012e24:	4413      	add	r3, r2
 8012e26:	085a      	lsrs	r2, r3, #1
 8012e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e2a:	695b      	ldr	r3, [r3, #20]
 8012e2c:	f003 0301 	and.w	r3, r3, #1
 8012e30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012e32:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e36:	699a      	ldr	r2, [r3, #24]
 8012e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012e3a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8012e3e:	0a5b      	lsrs	r3, r3, #9
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d201      	bcs.n	8012e48 <find_volume+0x3ac>
 8012e44:	230d      	movs	r3, #13
 8012e46:	e06a      	b.n	8012f1e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e4e:	611a      	str	r2, [r3, #16]
 8012e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e52:	691a      	ldr	r2, [r3, #16]
 8012e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e56:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e5a:	2280      	movs	r2, #128	@ 0x80
 8012e5c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012e62:	2b03      	cmp	r3, #3
 8012e64:	d149      	bne.n	8012efa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e68:	3330      	adds	r3, #48	@ 0x30
 8012e6a:	3330      	adds	r3, #48	@ 0x30
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fe fbf9 	bl	8011664 <ld_word>
 8012e72:	4603      	mov	r3, r0
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d140      	bne.n	8012efa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012e80:	f7fe fea2 	bl	8011bc8 <move_window>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d137      	bne.n	8012efa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e92:	3330      	adds	r3, #48	@ 0x30
 8012e94:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7fe fbe3 	bl	8011664 <ld_word>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d127      	bne.n	8012efa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eac:	3330      	adds	r3, #48	@ 0x30
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7fe fbf1 	bl	8011696 <ld_dword>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8012f28 <find_volume+0x48c>)
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	d11e      	bne.n	8012efa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ebe:	3330      	adds	r3, #48	@ 0x30
 8012ec0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fe fbe6 	bl	8011696 <ld_dword>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	4a17      	ldr	r2, [pc, #92]	@ (8012f2c <find_volume+0x490>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d113      	bne.n	8012efa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ed4:	3330      	adds	r3, #48	@ 0x30
 8012ed6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fe fbdb 	bl	8011696 <ld_dword>
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ee4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ee8:	3330      	adds	r3, #48	@ 0x30
 8012eea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fe fbd1 	bl	8011696 <ld_dword>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ef8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012efc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012f00:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012f02:	4b0b      	ldr	r3, [pc, #44]	@ (8012f30 <find_volume+0x494>)
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	3301      	adds	r3, #1
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	4b09      	ldr	r3, [pc, #36]	@ (8012f30 <find_volume+0x494>)
 8012f0c:	801a      	strh	r2, [r3, #0]
 8012f0e:	4b08      	ldr	r3, [pc, #32]	@ (8012f30 <find_volume+0x494>)
 8012f10:	881a      	ldrh	r2, [r3, #0]
 8012f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f14:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012f16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012f18:	f7fe fdee 	bl	8011af8 <clear_lock>
#endif
	return FR_OK;
 8012f1c:	2300      	movs	r3, #0
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3758      	adds	r7, #88	@ 0x58
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	41615252 	.word	0x41615252
 8012f2c:	61417272 	.word	0x61417272
 8012f30:	200019e8 	.word	0x200019e8

08012f34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f3e:	2309      	movs	r3, #9
 8012f40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d01c      	beq.n	8012f82 <validate+0x4e>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d018      	beq.n	8012f82 <validate+0x4e>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d013      	beq.n	8012f82 <validate+0x4e>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	889a      	ldrh	r2, [r3, #4]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	88db      	ldrh	r3, [r3, #6]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d10c      	bne.n	8012f82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	785b      	ldrb	r3, [r3, #1]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fe fada 	bl	8011528 <disk_status>
 8012f74:	4603      	mov	r3, r0
 8012f76:	f003 0301 	and.w	r3, r3, #1
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <validate+0x4e>
			res = FR_OK;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012f82:	7bfb      	ldrb	r3, [r7, #15]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d102      	bne.n	8012f8e <validate+0x5a>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	e000      	b.n	8012f90 <validate+0x5c>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	6013      	str	r3, [r2, #0]
	return res;
 8012f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3710      	adds	r7, #16
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
	...

08012fa0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b088      	sub	sp, #32
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	4613      	mov	r3, r2
 8012fac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012fb2:	f107 0310 	add.w	r3, r7, #16
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff fcd5 	bl	8012966 <get_ldnumber>
 8012fbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	da01      	bge.n	8012fc8 <f_mount+0x28>
 8012fc4:	230b      	movs	r3, #11
 8012fc6:	e02b      	b.n	8013020 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012fc8:	4a17      	ldr	r2, [pc, #92]	@ (8013028 <f_mount+0x88>)
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d005      	beq.n	8012fe4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012fd8:	69b8      	ldr	r0, [r7, #24]
 8012fda:	f7fe fd8d 	bl	8011af8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d002      	beq.n	8012ff0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2200      	movs	r2, #0
 8012fee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	490d      	ldr	r1, [pc, #52]	@ (8013028 <f_mount+0x88>)
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d002      	beq.n	8013006 <f_mount+0x66>
 8013000:	79fb      	ldrb	r3, [r7, #7]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d001      	beq.n	801300a <f_mount+0x6a>
 8013006:	2300      	movs	r3, #0
 8013008:	e00a      	b.n	8013020 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801300a:	f107 010c 	add.w	r1, r7, #12
 801300e:	f107 0308 	add.w	r3, r7, #8
 8013012:	2200      	movs	r2, #0
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff fd41 	bl	8012a9c <find_volume>
 801301a:	4603      	mov	r3, r0
 801301c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3720      	adds	r7, #32
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	200019e4 	.word	0x200019e4

0801302c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b098      	sub	sp, #96	@ 0x60
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	4613      	mov	r3, r2
 8013038:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d101      	bne.n	8013044 <f_open+0x18>
 8013040:	2309      	movs	r3, #9
 8013042:	e1a9      	b.n	8013398 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801304a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801304c:	79fa      	ldrb	r2, [r7, #7]
 801304e:	f107 0110 	add.w	r1, r7, #16
 8013052:	f107 0308 	add.w	r3, r7, #8
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fd20 	bl	8012a9c <find_volume>
 801305c:	4603      	mov	r3, r0
 801305e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013062:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013066:	2b00      	cmp	r3, #0
 8013068:	f040 818d 	bne.w	8013386 <f_open+0x35a>
		dj.obj.fs = fs;
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013070:	68ba      	ldr	r2, [r7, #8]
 8013072:	f107 0314 	add.w	r3, r7, #20
 8013076:	4611      	mov	r1, r2
 8013078:	4618      	mov	r0, r3
 801307a:	f7ff fc03 	bl	8012884 <follow_path>
 801307e:	4603      	mov	r3, r0
 8013080:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013084:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013088:	2b00      	cmp	r3, #0
 801308a:	d118      	bne.n	80130be <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801308c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013090:	b25b      	sxtb	r3, r3
 8013092:	2b00      	cmp	r3, #0
 8013094:	da03      	bge.n	801309e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013096:	2306      	movs	r3, #6
 8013098:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801309c:	e00f      	b.n	80130be <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801309e:	79fb      	ldrb	r3, [r7, #7]
 80130a0:	2b01      	cmp	r3, #1
 80130a2:	bf8c      	ite	hi
 80130a4:	2301      	movhi	r3, #1
 80130a6:	2300      	movls	r3, #0
 80130a8:	b2db      	uxtb	r3, r3
 80130aa:	461a      	mov	r2, r3
 80130ac:	f107 0314 	add.w	r3, r7, #20
 80130b0:	4611      	mov	r1, r2
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fe fbd8 	bl	8011868 <chk_lock>
 80130b8:	4603      	mov	r3, r0
 80130ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80130be:	79fb      	ldrb	r3, [r7, #7]
 80130c0:	f003 031c 	and.w	r3, r3, #28
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d07f      	beq.n	80131c8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80130c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d017      	beq.n	8013100 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80130d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80130d4:	2b04      	cmp	r3, #4
 80130d6:	d10e      	bne.n	80130f6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80130d8:	f7fe fc22 	bl	8011920 <enq_lock>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d006      	beq.n	80130f0 <f_open+0xc4>
 80130e2:	f107 0314 	add.w	r3, r7, #20
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7ff fb06 	bl	80126f8 <dir_register>
 80130ec:	4603      	mov	r3, r0
 80130ee:	e000      	b.n	80130f2 <f_open+0xc6>
 80130f0:	2312      	movs	r3, #18
 80130f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80130f6:	79fb      	ldrb	r3, [r7, #7]
 80130f8:	f043 0308 	orr.w	r3, r3, #8
 80130fc:	71fb      	strb	r3, [r7, #7]
 80130fe:	e010      	b.n	8013122 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013100:	7ebb      	ldrb	r3, [r7, #26]
 8013102:	f003 0311 	and.w	r3, r3, #17
 8013106:	2b00      	cmp	r3, #0
 8013108:	d003      	beq.n	8013112 <f_open+0xe6>
					res = FR_DENIED;
 801310a:	2307      	movs	r3, #7
 801310c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013110:	e007      	b.n	8013122 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013112:	79fb      	ldrb	r3, [r7, #7]
 8013114:	f003 0304 	and.w	r3, r3, #4
 8013118:	2b00      	cmp	r3, #0
 801311a:	d002      	beq.n	8013122 <f_open+0xf6>
 801311c:	2308      	movs	r3, #8
 801311e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013122:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013126:	2b00      	cmp	r3, #0
 8013128:	d168      	bne.n	80131fc <f_open+0x1d0>
 801312a:	79fb      	ldrb	r3, [r7, #7]
 801312c:	f003 0308 	and.w	r3, r3, #8
 8013130:	2b00      	cmp	r3, #0
 8013132:	d063      	beq.n	80131fc <f_open+0x1d0>
				dw = GET_FATTIME();
 8013134:	f7fd ff18 	bl	8010f68 <get_fattime>
 8013138:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801313a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801313c:	330e      	adds	r3, #14
 801313e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013140:	4618      	mov	r0, r3
 8013142:	f7fe fae6 	bl	8011712 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013148:	3316      	adds	r3, #22
 801314a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801314c:	4618      	mov	r0, r3
 801314e:	f7fe fae0 	bl	8011712 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013154:	330b      	adds	r3, #11
 8013156:	2220      	movs	r2, #32
 8013158:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801315e:	4611      	mov	r1, r2
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff fa35 	bl	80125d0 <ld_clust>
 8013166:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801316c:	2200      	movs	r2, #0
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff fa4d 	bl	801260e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013176:	331c      	adds	r3, #28
 8013178:	2100      	movs	r1, #0
 801317a:	4618      	mov	r0, r3
 801317c:	f7fe fac9 	bl	8011712 <st_dword>
					fs->wflag = 1;
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	2201      	movs	r2, #1
 8013184:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013188:	2b00      	cmp	r3, #0
 801318a:	d037      	beq.n	80131fc <f_open+0x1d0>
						dw = fs->winsect;
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013190:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013192:	f107 0314 	add.w	r3, r7, #20
 8013196:	2200      	movs	r2, #0
 8013198:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801319a:	4618      	mov	r0, r3
 801319c:	f7fe ff60 	bl	8012060 <remove_chain>
 80131a0:	4603      	mov	r3, r0
 80131a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80131a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d126      	bne.n	80131fc <f_open+0x1d0>
							res = move_window(fs, dw);
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fe fd08 	bl	8011bc8 <move_window>
 80131b8:	4603      	mov	r3, r0
 80131ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131c2:	3a01      	subs	r2, #1
 80131c4:	60da      	str	r2, [r3, #12]
 80131c6:	e019      	b.n	80131fc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80131c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d115      	bne.n	80131fc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80131d0:	7ebb      	ldrb	r3, [r7, #26]
 80131d2:	f003 0310 	and.w	r3, r3, #16
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d003      	beq.n	80131e2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80131da:	2304      	movs	r3, #4
 80131dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80131e0:	e00c      	b.n	80131fc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80131e2:	79fb      	ldrb	r3, [r7, #7]
 80131e4:	f003 0302 	and.w	r3, r3, #2
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d007      	beq.n	80131fc <f_open+0x1d0>
 80131ec:	7ebb      	ldrb	r3, [r7, #26]
 80131ee:	f003 0301 	and.w	r3, r3, #1
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d002      	beq.n	80131fc <f_open+0x1d0>
						res = FR_DENIED;
 80131f6:	2307      	movs	r3, #7
 80131f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80131fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013200:	2b00      	cmp	r3, #0
 8013202:	d126      	bne.n	8013252 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013204:	79fb      	ldrb	r3, [r7, #7]
 8013206:	f003 0308 	and.w	r3, r3, #8
 801320a:	2b00      	cmp	r3, #0
 801320c:	d003      	beq.n	8013216 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801320e:	79fb      	ldrb	r3, [r7, #7]
 8013210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013214:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801321e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013224:	79fb      	ldrb	r3, [r7, #7]
 8013226:	2b01      	cmp	r3, #1
 8013228:	bf8c      	ite	hi
 801322a:	2301      	movhi	r3, #1
 801322c:	2300      	movls	r3, #0
 801322e:	b2db      	uxtb	r3, r3
 8013230:	461a      	mov	r2, r3
 8013232:	f107 0314 	add.w	r3, r7, #20
 8013236:	4611      	mov	r1, r2
 8013238:	4618      	mov	r0, r3
 801323a:	f7fe fb93 	bl	8011964 <inc_lock>
 801323e:	4602      	mov	r2, r0
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	691b      	ldr	r3, [r3, #16]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d102      	bne.n	8013252 <f_open+0x226>
 801324c:	2302      	movs	r3, #2
 801324e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013252:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013256:	2b00      	cmp	r3, #0
 8013258:	f040 8095 	bne.w	8013386 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013260:	4611      	mov	r1, r2
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff f9b4 	bl	80125d0 <ld_clust>
 8013268:	4602      	mov	r2, r0
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801326e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013270:	331c      	adds	r3, #28
 8013272:	4618      	mov	r0, r3
 8013274:	f7fe fa0f 	bl	8011696 <ld_dword>
 8013278:	4602      	mov	r2, r0
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2200      	movs	r2, #0
 8013282:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013284:	693a      	ldr	r2, [r7, #16]
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	88da      	ldrh	r2, [r3, #6]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	79fa      	ldrb	r2, [r7, #7]
 8013296:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2200      	movs	r2, #0
 801329c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2200      	movs	r2, #0
 80132a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2200      	movs	r2, #0
 80132a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	3330      	adds	r3, #48	@ 0x30
 80132ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132b2:	2100      	movs	r1, #0
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fe fa79 	bl	80117ac <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80132ba:	79fb      	ldrb	r3, [r7, #7]
 80132bc:	f003 0320 	and.w	r3, r3, #32
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d060      	beq.n	8013386 <f_open+0x35a>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d05c      	beq.n	8013386 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	68da      	ldr	r2, [r3, #12]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	895b      	ldrh	r3, [r3, #10]
 80132d8:	025b      	lsls	r3, r3, #9
 80132da:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80132e8:	e016      	b.n	8013318 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fe fd25 	bl	8011d3e <get_fat>
 80132f4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80132f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80132f8:	2b01      	cmp	r3, #1
 80132fa:	d802      	bhi.n	8013302 <f_open+0x2d6>
 80132fc:	2302      	movs	r3, #2
 80132fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013308:	d102      	bne.n	8013310 <f_open+0x2e4>
 801330a:	2301      	movs	r3, #1
 801330c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013310:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	657b      	str	r3, [r7, #84]	@ 0x54
 8013318:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801331c:	2b00      	cmp	r3, #0
 801331e:	d103      	bne.n	8013328 <f_open+0x2fc>
 8013320:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013324:	429a      	cmp	r2, r3
 8013326:	d8e0      	bhi.n	80132ea <f_open+0x2be>
				}
				fp->clust = clst;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801332c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801332e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013332:	2b00      	cmp	r3, #0
 8013334:	d127      	bne.n	8013386 <f_open+0x35a>
 8013336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801333c:	2b00      	cmp	r3, #0
 801333e:	d022      	beq.n	8013386 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013344:	4618      	mov	r0, r3
 8013346:	f7fe fcdb 	bl	8011d00 <clust2sect>
 801334a:	6478      	str	r0, [r7, #68]	@ 0x44
 801334c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801334e:	2b00      	cmp	r3, #0
 8013350:	d103      	bne.n	801335a <f_open+0x32e>
						res = FR_INT_ERR;
 8013352:	2302      	movs	r3, #2
 8013354:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013358:	e015      	b.n	8013386 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801335a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801335c:	0a5a      	lsrs	r2, r3, #9
 801335e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013360:	441a      	add	r2, r3
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	7858      	ldrb	r0, [r3, #1]
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	6a1a      	ldr	r2, [r3, #32]
 8013374:	2301      	movs	r3, #1
 8013376:	f7fe f917 	bl	80115a8 <disk_read>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <f_open+0x35a>
 8013380:	2301      	movs	r3, #1
 8013382:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013386:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801338a:	2b00      	cmp	r3, #0
 801338c:	d002      	beq.n	8013394 <f_open+0x368>
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	2200      	movs	r2, #0
 8013392:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013394:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013398:	4618      	mov	r0, r3
 801339a:	3760      	adds	r7, #96	@ 0x60
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b08c      	sub	sp, #48	@ 0x30
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	607a      	str	r2, [r7, #4]
 80133ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	2200      	movs	r2, #0
 80133b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	f107 0210 	add.w	r2, r7, #16
 80133be:	4611      	mov	r1, r2
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff fdb7 	bl	8012f34 <validate>
 80133c6:	4603      	mov	r3, r0
 80133c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80133cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d107      	bne.n	80133e4 <f_write+0x44>
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	7d5b      	ldrb	r3, [r3, #21]
 80133d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80133dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d002      	beq.n	80133ea <f_write+0x4a>
 80133e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80133e8:	e14b      	b.n	8013682 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	7d1b      	ldrb	r3, [r3, #20]
 80133ee:	f003 0302 	and.w	r3, r3, #2
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d101      	bne.n	80133fa <f_write+0x5a>
 80133f6:	2307      	movs	r3, #7
 80133f8:	e143      	b.n	8013682 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	699a      	ldr	r2, [r3, #24]
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	441a      	add	r2, r3
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	699b      	ldr	r3, [r3, #24]
 8013406:	429a      	cmp	r2, r3
 8013408:	f080 812d 	bcs.w	8013666 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	699b      	ldr	r3, [r3, #24]
 8013410:	43db      	mvns	r3, r3
 8013412:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013414:	e127      	b.n	8013666 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	699b      	ldr	r3, [r3, #24]
 801341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801341e:	2b00      	cmp	r3, #0
 8013420:	f040 80e3 	bne.w	80135ea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	699b      	ldr	r3, [r3, #24]
 8013428:	0a5b      	lsrs	r3, r3, #9
 801342a:	693a      	ldr	r2, [r7, #16]
 801342c:	8952      	ldrh	r2, [r2, #10]
 801342e:	3a01      	subs	r2, #1
 8013430:	4013      	ands	r3, r2
 8013432:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d143      	bne.n	80134c2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	699b      	ldr	r3, [r3, #24]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d10c      	bne.n	801345c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	689b      	ldr	r3, [r3, #8]
 8013446:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801344a:	2b00      	cmp	r3, #0
 801344c:	d11a      	bne.n	8013484 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2100      	movs	r1, #0
 8013452:	4618      	mov	r0, r3
 8013454:	f7fe fe69 	bl	801212a <create_chain>
 8013458:	62b8      	str	r0, [r7, #40]	@ 0x28
 801345a:	e013      	b.n	8013484 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013460:	2b00      	cmp	r3, #0
 8013462:	d007      	beq.n	8013474 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	699b      	ldr	r3, [r3, #24]
 8013468:	4619      	mov	r1, r3
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f7fe fef5 	bl	801225a <clmt_clust>
 8013470:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013472:	e007      	b.n	8013484 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013474:	68fa      	ldr	r2, [r7, #12]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	69db      	ldr	r3, [r3, #28]
 801347a:	4619      	mov	r1, r3
 801347c:	4610      	mov	r0, r2
 801347e:	f7fe fe54 	bl	801212a <create_chain>
 8013482:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 80f2 	beq.w	8013670 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801348c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801348e:	2b01      	cmp	r3, #1
 8013490:	d104      	bne.n	801349c <f_write+0xfc>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2202      	movs	r2, #2
 8013496:	755a      	strb	r2, [r3, #21]
 8013498:	2302      	movs	r3, #2
 801349a:	e0f2      	b.n	8013682 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134a2:	d104      	bne.n	80134ae <f_write+0x10e>
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2201      	movs	r2, #1
 80134a8:	755a      	strb	r2, [r3, #21]
 80134aa:	2301      	movs	r3, #1
 80134ac:	e0e9      	b.n	8013682 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d102      	bne.n	80134c2 <f_write+0x122>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	7d1b      	ldrb	r3, [r3, #20]
 80134c6:	b25b      	sxtb	r3, r3
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	da18      	bge.n	80134fe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	7858      	ldrb	r0, [r3, #1]
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	6a1a      	ldr	r2, [r3, #32]
 80134da:	2301      	movs	r3, #1
 80134dc:	f7fe f884 	bl	80115e8 <disk_write>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d004      	beq.n	80134f0 <f_write+0x150>
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2201      	movs	r2, #1
 80134ea:	755a      	strb	r2, [r3, #21]
 80134ec:	2301      	movs	r3, #1
 80134ee:	e0c8      	b.n	8013682 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	7d1b      	ldrb	r3, [r3, #20]
 80134f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134f8:	b2da      	uxtb	r2, r3
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80134fe:	693a      	ldr	r2, [r7, #16]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	69db      	ldr	r3, [r3, #28]
 8013504:	4619      	mov	r1, r3
 8013506:	4610      	mov	r0, r2
 8013508:	f7fe fbfa 	bl	8011d00 <clust2sect>
 801350c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d104      	bne.n	801351e <f_write+0x17e>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	2202      	movs	r2, #2
 8013518:	755a      	strb	r2, [r3, #21]
 801351a:	2302      	movs	r3, #2
 801351c:	e0b1      	b.n	8013682 <f_write+0x2e2>
			sect += csect;
 801351e:	697a      	ldr	r2, [r7, #20]
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	4413      	add	r3, r2
 8013524:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	0a5b      	lsrs	r3, r3, #9
 801352a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801352c:	6a3b      	ldr	r3, [r7, #32]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d03c      	beq.n	80135ac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013532:	69ba      	ldr	r2, [r7, #24]
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	4413      	add	r3, r2
 8013538:	693a      	ldr	r2, [r7, #16]
 801353a:	8952      	ldrh	r2, [r2, #10]
 801353c:	4293      	cmp	r3, r2
 801353e:	d905      	bls.n	801354c <f_write+0x1ac>
					cc = fs->csize - csect;
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	895b      	ldrh	r3, [r3, #10]
 8013544:	461a      	mov	r2, r3
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	7858      	ldrb	r0, [r3, #1]
 8013550:	6a3b      	ldr	r3, [r7, #32]
 8013552:	697a      	ldr	r2, [r7, #20]
 8013554:	69f9      	ldr	r1, [r7, #28]
 8013556:	f7fe f847 	bl	80115e8 <disk_write>
 801355a:	4603      	mov	r3, r0
 801355c:	2b00      	cmp	r3, #0
 801355e:	d004      	beq.n	801356a <f_write+0x1ca>
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2201      	movs	r2, #1
 8013564:	755a      	strb	r2, [r3, #21]
 8013566:	2301      	movs	r3, #1
 8013568:	e08b      	b.n	8013682 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6a1a      	ldr	r2, [r3, #32]
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	6a3a      	ldr	r2, [r7, #32]
 8013574:	429a      	cmp	r2, r3
 8013576:	d915      	bls.n	80135a4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6a1a      	ldr	r2, [r3, #32]
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	1ad3      	subs	r3, r2, r3
 8013586:	025b      	lsls	r3, r3, #9
 8013588:	69fa      	ldr	r2, [r7, #28]
 801358a:	4413      	add	r3, r2
 801358c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013590:	4619      	mov	r1, r3
 8013592:	f7fe f8ea 	bl	801176a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	7d1b      	ldrb	r3, [r3, #20]
 801359a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801359e:	b2da      	uxtb	r2, r3
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80135a4:	6a3b      	ldr	r3, [r7, #32]
 80135a6:	025b      	lsls	r3, r3, #9
 80135a8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80135aa:	e03f      	b.n	801362c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6a1b      	ldr	r3, [r3, #32]
 80135b0:	697a      	ldr	r2, [r7, #20]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d016      	beq.n	80135e4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	699a      	ldr	r2, [r3, #24]
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135be:	429a      	cmp	r2, r3
 80135c0:	d210      	bcs.n	80135e4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	7858      	ldrb	r0, [r3, #1]
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80135cc:	2301      	movs	r3, #1
 80135ce:	697a      	ldr	r2, [r7, #20]
 80135d0:	f7fd ffea 	bl	80115a8 <disk_read>
 80135d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d004      	beq.n	80135e4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2201      	movs	r2, #1
 80135de:	755a      	strb	r2, [r3, #21]
 80135e0:	2301      	movs	r3, #1
 80135e2:	e04e      	b.n	8013682 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	697a      	ldr	r2, [r7, #20]
 80135e8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135f2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80135f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80135f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d901      	bls.n	8013604 <f_write+0x264>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	699b      	ldr	r3, [r3, #24]
 801360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013612:	4413      	add	r3, r2
 8013614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013616:	69f9      	ldr	r1, [r7, #28]
 8013618:	4618      	mov	r0, r3
 801361a:	f7fe f8a6 	bl	801176a <mem_cpy>
		fp->flag |= FA_DIRTY;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	7d1b      	ldrb	r3, [r3, #20]
 8013622:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013626:	b2da      	uxtb	r2, r3
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801362c:	69fa      	ldr	r2, [r7, #28]
 801362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013630:	4413      	add	r3, r2
 8013632:	61fb      	str	r3, [r7, #28]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	699a      	ldr	r2, [r3, #24]
 8013638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363a:	441a      	add	r2, r3
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	619a      	str	r2, [r3, #24]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	68da      	ldr	r2, [r3, #12]
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	699b      	ldr	r3, [r3, #24]
 8013648:	429a      	cmp	r2, r3
 801364a:	bf38      	it	cc
 801364c:	461a      	movcc	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	60da      	str	r2, [r3, #12]
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013658:	441a      	add	r2, r3
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	601a      	str	r2, [r3, #0]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013662:	1ad3      	subs	r3, r2, r3
 8013664:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	f47f aed4 	bne.w	8013416 <f_write+0x76>
 801366e:	e000      	b.n	8013672 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013670:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	7d1b      	ldrb	r3, [r3, #20]
 8013676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801367a:	b2da      	uxtb	r2, r3
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	3730      	adds	r7, #48	@ 0x30
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}

0801368a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801368a:	b580      	push	{r7, lr}
 801368c:	b086      	sub	sp, #24
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f107 0208 	add.w	r2, r7, #8
 8013698:	4611      	mov	r1, r2
 801369a:	4618      	mov	r0, r3
 801369c:	f7ff fc4a 	bl	8012f34 <validate>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d168      	bne.n	801377c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	7d1b      	ldrb	r3, [r3, #20]
 80136ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d062      	beq.n	801377c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	7d1b      	ldrb	r3, [r3, #20]
 80136ba:	b25b      	sxtb	r3, r3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	da15      	bge.n	80136ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	7858      	ldrb	r0, [r3, #1]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a1a      	ldr	r2, [r3, #32]
 80136ce:	2301      	movs	r3, #1
 80136d0:	f7fd ff8a 	bl	80115e8 <disk_write>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d001      	beq.n	80136de <f_sync+0x54>
 80136da:	2301      	movs	r3, #1
 80136dc:	e04f      	b.n	801377e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	7d1b      	ldrb	r3, [r3, #20]
 80136e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80136e6:	b2da      	uxtb	r2, r3
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80136ec:	f7fd fc3c 	bl	8010f68 <get_fattime>
 80136f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80136f2:	68ba      	ldr	r2, [r7, #8]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136f8:	4619      	mov	r1, r3
 80136fa:	4610      	mov	r0, r2
 80136fc:	f7fe fa64 	bl	8011bc8 <move_window>
 8013700:	4603      	mov	r3, r0
 8013702:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013704:	7dfb      	ldrb	r3, [r7, #23]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d138      	bne.n	801377c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801370e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	330b      	adds	r3, #11
 8013714:	781a      	ldrb	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	330b      	adds	r3, #11
 801371a:	f042 0220 	orr.w	r2, r2, #32
 801371e:	b2d2      	uxtb	r2, r2
 8013720:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6818      	ldr	r0, [r3, #0]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	461a      	mov	r2, r3
 801372c:	68f9      	ldr	r1, [r7, #12]
 801372e:	f7fe ff6e 	bl	801260e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	f103 021c 	add.w	r2, r3, #28
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	4619      	mov	r1, r3
 801373e:	4610      	mov	r0, r2
 8013740:	f7fd ffe7 	bl	8011712 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	3316      	adds	r3, #22
 8013748:	6939      	ldr	r1, [r7, #16]
 801374a:	4618      	mov	r0, r3
 801374c:	f7fd ffe1 	bl	8011712 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	3312      	adds	r3, #18
 8013754:	2100      	movs	r1, #0
 8013756:	4618      	mov	r0, r3
 8013758:	f7fd ffc0 	bl	80116dc <st_word>
					fs->wflag = 1;
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	2201      	movs	r2, #1
 8013760:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	4618      	mov	r0, r3
 8013766:	f7fe fa5d 	bl	8011c24 <sync_fs>
 801376a:	4603      	mov	r3, r0
 801376c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	7d1b      	ldrb	r3, [r3, #20]
 8013772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013776:	b2da      	uxtb	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801377c:	7dfb      	ldrb	r3, [r7, #23]
}
 801377e:	4618      	mov	r0, r3
 8013780:	3718      	adds	r7, #24
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013786:	b580      	push	{r7, lr}
 8013788:	b084      	sub	sp, #16
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff ff7b 	bl	801368a <f_sync>
 8013794:	4603      	mov	r3, r0
 8013796:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013798:	7bfb      	ldrb	r3, [r7, #15]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d118      	bne.n	80137d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f107 0208 	add.w	r2, r7, #8
 80137a4:	4611      	mov	r1, r2
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ff fbc4 	bl	8012f34 <validate>
 80137ac:	4603      	mov	r3, r0
 80137ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80137b0:	7bfb      	ldrb	r3, [r7, #15]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10c      	bne.n	80137d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	691b      	ldr	r3, [r3, #16]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fe f960 	bl	8011a80 <dec_lock>
 80137c0:	4603      	mov	r3, r0
 80137c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80137c4:	7bfb      	ldrb	r3, [r7, #15]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d102      	bne.n	80137d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80137d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b096      	sub	sp, #88	@ 0x58
 80137de:	af00      	add	r7, sp, #0
 80137e0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80137e2:	f107 0108 	add.w	r1, r7, #8
 80137e6:	1d3b      	adds	r3, r7, #4
 80137e8:	2202      	movs	r2, #2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff f956 	bl	8012a9c <find_volume>
 80137f0:	4603      	mov	r3, r0
 80137f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80137fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137fe:	2b00      	cmp	r3, #0
 8013800:	f040 80ec 	bne.w	80139dc <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	f107 030c 	add.w	r3, r7, #12
 801380a:	4611      	mov	r1, r2
 801380c:	4618      	mov	r0, r3
 801380e:	f7ff f839 	bl	8012884 <follow_path>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801381c:	2b00      	cmp	r3, #0
 801381e:	d102      	bne.n	8013826 <f_mkdir+0x4c>
 8013820:	2308      	movs	r3, #8
 8013822:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013826:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801382a:	2b04      	cmp	r3, #4
 801382c:	f040 80d6 	bne.w	80139dc <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013830:	f107 030c 	add.w	r3, r7, #12
 8013834:	2100      	movs	r1, #0
 8013836:	4618      	mov	r0, r3
 8013838:	f7fe fc77 	bl	801212a <create_chain>
 801383c:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	895b      	ldrh	r3, [r3, #10]
 8013842:	025b      	lsls	r3, r3, #9
 8013844:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013846:	2300      	movs	r3, #0
 8013848:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801384c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801384e:	2b00      	cmp	r3, #0
 8013850:	d102      	bne.n	8013858 <f_mkdir+0x7e>
 8013852:	2307      	movs	r3, #7
 8013854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801385a:	2b01      	cmp	r3, #1
 801385c:	d102      	bne.n	8013864 <f_mkdir+0x8a>
 801385e:	2302      	movs	r3, #2
 8013860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386a:	d102      	bne.n	8013872 <f_mkdir+0x98>
 801386c:	2301      	movs	r3, #1
 801386e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013872:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013876:	2b00      	cmp	r3, #0
 8013878:	d106      	bne.n	8013888 <f_mkdir+0xae>
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	4618      	mov	r0, r3
 801387e:	f7fe f95f 	bl	8011b40 <sync_window>
 8013882:	4603      	mov	r3, r0
 8013884:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8013888:	f7fd fb6e 	bl	8010f68 <get_fattime>
 801388c:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801388e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013892:	2b00      	cmp	r3, #0
 8013894:	d16a      	bne.n	801396c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801389a:	4618      	mov	r0, r3
 801389c:	f7fe fa30 	bl	8011d00 <clust2sect>
 80138a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	3330      	adds	r3, #48	@ 0x30
 80138a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 80138a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138ac:	2100      	movs	r1, #0
 80138ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80138b0:	f7fd ff7c 	bl	80117ac <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80138b4:	220b      	movs	r2, #11
 80138b6:	2120      	movs	r1, #32
 80138b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80138ba:	f7fd ff77 	bl	80117ac <mem_set>
					dir[DIR_Name] = '.';
 80138be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138c0:	222e      	movs	r2, #46	@ 0x2e
 80138c2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80138c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138c6:	330b      	adds	r3, #11
 80138c8:	2210      	movs	r2, #16
 80138ca:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80138cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ce:	3316      	adds	r3, #22
 80138d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fd ff1d 	bl	8011712 <st_dword>
					st_clust(fs, dir, dcl);
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fe fe95 	bl	801260e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80138e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138e6:	3320      	adds	r3, #32
 80138e8:	2220      	movs	r2, #32
 80138ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7fd ff3c 	bl	801176a <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80138f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138f4:	3321      	adds	r3, #33	@ 0x21
 80138f6:	222e      	movs	r2, #46	@ 0x2e
 80138f8:	701a      	strb	r2, [r3, #0]
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	2b03      	cmp	r3, #3
 8013904:	d106      	bne.n	8013914 <f_mkdir+0x13a>
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801390a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801390c:	429a      	cmp	r2, r3
 801390e:	d101      	bne.n	8013914 <f_mkdir+0x13a>
 8013910:	2300      	movs	r3, #0
 8013912:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013914:	68b8      	ldr	r0, [r7, #8]
 8013916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013918:	3320      	adds	r3, #32
 801391a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801391c:	4619      	mov	r1, r3
 801391e:	f7fe fe76 	bl	801260e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	895b      	ldrh	r3, [r3, #10]
 8013926:	653b      	str	r3, [r7, #80]	@ 0x50
 8013928:	e01b      	b.n	8013962 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801392a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801392c:	1c5a      	adds	r2, r3, #1
 801392e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	2201      	movs	r2, #1
 8013938:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	4618      	mov	r0, r3
 801393e:	f7fe f8ff 	bl	8011b40 <sync_window>
 8013942:	4603      	mov	r3, r0
 8013944:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8013948:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10c      	bne.n	801396a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013954:	2100      	movs	r1, #0
 8013956:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013958:	f7fd ff28 	bl	80117ac <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801395c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801395e:	3b01      	subs	r3, #1
 8013960:	653b      	str	r3, [r7, #80]	@ 0x50
 8013962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1e0      	bne.n	801392a <f_mkdir+0x150>
 8013968:	e000      	b.n	801396c <f_mkdir+0x192>
					if (res != FR_OK) break;
 801396a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801396c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013970:	2b00      	cmp	r3, #0
 8013972:	d107      	bne.n	8013984 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013974:	f107 030c 	add.w	r3, r7, #12
 8013978:	4618      	mov	r0, r3
 801397a:	f7fe febd 	bl	80126f8 <dir_register>
 801397e:	4603      	mov	r3, r0
 8013980:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8013984:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013988:	2b00      	cmp	r3, #0
 801398a:	d120      	bne.n	80139ce <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801398e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013992:	3316      	adds	r3, #22
 8013994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013996:	4618      	mov	r0, r3
 8013998:	f7fd febb 	bl	8011712 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80139a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fe fe33 	bl	801260e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80139a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139aa:	330b      	adds	r3, #11
 80139ac:	2210      	movs	r2, #16
 80139ae:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	2201      	movs	r2, #1
 80139b4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80139b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d10e      	bne.n	80139dc <f_mkdir+0x202>
					res = sync_fs(fs);
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7fe f92f 	bl	8011c24 <sync_fs>
 80139c6:	4603      	mov	r3, r0
 80139c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80139cc:	e006      	b.n	80139dc <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80139ce:	f107 030c 	add.w	r3, r7, #12
 80139d2:	2200      	movs	r2, #0
 80139d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7fe fb42 	bl	8012060 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80139dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3758      	adds	r7, #88	@ 0x58
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80139e8:	b590      	push	{r4, r7, lr}
 80139ea:	b09d      	sub	sp, #116	@ 0x74
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	607a      	str	r2, [r7, #4]
 80139f2:	603b      	str	r3, [r7, #0]
 80139f4:	460b      	mov	r3, r1
 80139f6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80139f8:	2301      	movs	r3, #1
 80139fa:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80139fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013a00:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8013a02:	f107 030c 	add.w	r3, r7, #12
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fe ffad 	bl	8012966 <get_ldnumber>
 8013a0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	da02      	bge.n	8013a1a <f_mkfs+0x32>
 8013a14:	230b      	movs	r3, #11
 8013a16:	f000 bc0d 	b.w	8014234 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8013a1a:	4a94      	ldr	r2, [pc, #592]	@ (8013c6c <f_mkfs+0x284>)
 8013a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d005      	beq.n	8013a32 <f_mkfs+0x4a>
 8013a26:	4a91      	ldr	r2, [pc, #580]	@ (8013c6c <f_mkfs+0x284>)
 8013a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8013a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a34:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013a38:	2300      	movs	r3, #0
 8013a3a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8013a3e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fd fd8a 	bl	801155c <disk_initialize>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8013a4e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013a52:	f003 0301 	and.w	r3, r3, #1
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d001      	beq.n	8013a5e <f_mkfs+0x76>
 8013a5a:	2303      	movs	r3, #3
 8013a5c:	e3ea      	b.n	8014234 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013a5e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013a62:	f003 0304 	and.w	r3, r3, #4
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d001      	beq.n	8013a6e <f_mkfs+0x86>
 8013a6a:	230a      	movs	r3, #10
 8013a6c:	e3e2      	b.n	8014234 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013a6e:	f107 0214 	add.w	r2, r7, #20
 8013a72:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013a76:	2103      	movs	r1, #3
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fd fdd5 	bl	8011628 <disk_ioctl>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d10c      	bne.n	8013a9e <f_mkfs+0xb6>
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d009      	beq.n	8013a9e <f_mkfs+0xb6>
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013a90:	d805      	bhi.n	8013a9e <f_mkfs+0xb6>
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	1e5a      	subs	r2, r3, #1
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	4013      	ands	r3, r2
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d001      	beq.n	8013aa2 <f_mkfs+0xba>
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013aa6:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d003      	beq.n	8013ab6 <f_mkfs+0xce>
 8013aae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d309      	bcc.n	8013aca <f_mkfs+0xe2>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013abc:	d805      	bhi.n	8013aca <f_mkfs+0xe2>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	1e5a      	subs	r2, r3, #1
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4013      	ands	r3, r2
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d001      	beq.n	8013ace <f_mkfs+0xe6>
 8013aca:	2313      	movs	r3, #19
 8013acc:	e3b2      	b.n	8014234 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8013ace:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ad6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8013adc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8013ae8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aec:	fb02 f303 	mul.w	r3, r2, r3
 8013af0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8013af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <f_mkfs+0x114>
 8013af8:	230e      	movs	r3, #14
 8013afa:	e39b      	b.n	8014234 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8013afc:	f107 0210 	add.w	r2, r7, #16
 8013b00:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8013b04:	2101      	movs	r1, #1
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7fd fd8e 	bl	8011628 <disk_ioctl>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d001      	beq.n	8013b16 <f_mkfs+0x12e>
 8013b12:	2301      	movs	r3, #1
 8013b14:	e38e      	b.n	8014234 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8013b16:	7afb      	ldrb	r3, [r7, #11]
 8013b18:	f003 0308 	and.w	r3, r3, #8
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d001      	beq.n	8013b24 <f_mkfs+0x13c>
 8013b20:	2300      	movs	r3, #0
 8013b22:	e000      	b.n	8013b26 <f_mkfs+0x13e>
 8013b24:	233f      	movs	r3, #63	@ 0x3f
 8013b26:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d901      	bls.n	8013b34 <f_mkfs+0x14c>
 8013b30:	230e      	movs	r3, #14
 8013b32:	e37f      	b.n	8014234 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8013b34:	693a      	ldr	r2, [r7, #16]
 8013b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013b40:	d801      	bhi.n	8013b46 <f_mkfs+0x15e>
 8013b42:	230e      	movs	r3, #14
 8013b44:	e376      	b.n	8014234 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2b80      	cmp	r3, #128	@ 0x80
 8013b4a:	d901      	bls.n	8013b50 <f_mkfs+0x168>
 8013b4c:	2313      	movs	r3, #19
 8013b4e:	e371      	b.n	8014234 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8013b50:	7afb      	ldrb	r3, [r7, #11]
 8013b52:	f003 0302 	and.w	r3, r3, #2
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00d      	beq.n	8013b76 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013b5a:	7afb      	ldrb	r3, [r7, #11]
 8013b5c:	f003 0307 	and.w	r3, r3, #7
 8013b60:	2b02      	cmp	r3, #2
 8013b62:	d004      	beq.n	8013b6e <f_mkfs+0x186>
 8013b64:	7afb      	ldrb	r3, [r7, #11]
 8013b66:	f003 0301 	and.w	r3, r3, #1
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d103      	bne.n	8013b76 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8013b6e:	2303      	movs	r3, #3
 8013b70:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8013b74:	e009      	b.n	8013b8a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013b76:	7afb      	ldrb	r3, [r7, #11]
 8013b78:	f003 0301 	and.w	r3, r3, #1
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d101      	bne.n	8013b84 <f_mkfs+0x19c>
 8013b80:	2313      	movs	r3, #19
 8013b82:	e357      	b.n	8014234 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8013b84:	2302      	movs	r3, #2
 8013b86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8013b8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013b92:	2b03      	cmp	r3, #3
 8013b94:	d13c      	bne.n	8013c10 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8013b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d11b      	bne.n	8013bd4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	0c5b      	lsrs	r3, r3, #17
 8013ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8013baa:	e005      	b.n	8013bb8 <f_mkfs+0x1d0>
 8013bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bae:	3301      	adds	r3, #1
 8013bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8013bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8013c70 <f_mkfs+0x288>)
 8013bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d007      	beq.n	8013bd4 <f_mkfs+0x1ec>
 8013bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8013c70 <f_mkfs+0x288>)
 8013bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bcc:	461a      	mov	r2, r3
 8013bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d2eb      	bcs.n	8013bac <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8013bd4:	693a      	ldr	r2, [r7, #16]
 8013bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8013bdc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8013bde:	6a3b      	ldr	r3, [r7, #32]
 8013be0:	3302      	adds	r3, #2
 8013be2:	009a      	lsls	r2, r3, #2
 8013be4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013be6:	4413      	add	r3, r2
 8013be8:	1e5a      	subs	r2, r3, #1
 8013bea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8013bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8013bf2:	2320      	movs	r3, #32
 8013bf4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8013bfa:	6a3b      	ldr	r3, [r7, #32]
 8013bfc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013c00:	4293      	cmp	r3, r2
 8013c02:	d903      	bls.n	8013c0c <f_mkfs+0x224>
 8013c04:	6a3b      	ldr	r3, [r7, #32]
 8013c06:	4a1b      	ldr	r2, [pc, #108]	@ (8013c74 <f_mkfs+0x28c>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d952      	bls.n	8013cb2 <f_mkfs+0x2ca>
 8013c0c:	230e      	movs	r3, #14
 8013c0e:	e311      	b.n	8014234 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8013c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d11b      	bne.n	8013c4e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	0b1b      	lsrs	r3, r3, #12
 8013c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c20:	2301      	movs	r3, #1
 8013c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c24:	e005      	b.n	8013c32 <f_mkfs+0x24a>
 8013c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c28:	3301      	adds	r3, #1
 8013c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c2e:	005b      	lsls	r3, r3, #1
 8013c30:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c32:	4a11      	ldr	r2, [pc, #68]	@ (8013c78 <f_mkfs+0x290>)
 8013c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d007      	beq.n	8013c4e <f_mkfs+0x266>
 8013c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8013c78 <f_mkfs+0x290>)
 8013c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c46:	461a      	mov	r2, r3
 8013c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c4a:	4293      	cmp	r3, r2
 8013c4c:	d2eb      	bcs.n	8013c26 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8013c4e:	693a      	ldr	r2, [r7, #16]
 8013c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c56:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8013c58:	6a3b      	ldr	r3, [r7, #32]
 8013c5a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d90c      	bls.n	8013c7c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8013c62:	6a3b      	ldr	r3, [r7, #32]
 8013c64:	3302      	adds	r3, #2
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c6a:	e012      	b.n	8013c92 <f_mkfs+0x2aa>
 8013c6c:	200019e4 	.word	0x200019e4
 8013c70:	0801b418 	.word	0x0801b418
 8013c74:	0ffffff5 	.word	0x0ffffff5
 8013c78:	0801b428 	.word	0x0801b428
				} else {
					fmt = FS_FAT12;
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8013c82:	6a3a      	ldr	r2, [r7, #32]
 8013c84:	4613      	mov	r3, r2
 8013c86:	005b      	lsls	r3, r3, #1
 8013c88:	4413      	add	r3, r2
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	085b      	lsrs	r3, r3, #1
 8013c8e:	3303      	adds	r3, #3
 8013c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013c92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c96:	4413      	add	r3, r2
 8013c98:	1e5a      	subs	r2, r3, #1
 8013c9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8013ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ca8:	015a      	lsls	r2, r3, #5
 8013caa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8013cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb6:	4413      	add	r3, r2
 8013cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8013cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013cbe:	fb03 f202 	mul.w	r2, r3, r2
 8013cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cc4:	4413      	add	r3, r2
 8013cc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013cc8:	4413      	add	r3, r2
 8013cca:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8013ccc:	697a      	ldr	r2, [r7, #20]
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	1e5a      	subs	r2, r3, #1
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	425b      	negs	r3, r3
 8013cd8:	401a      	ands	r2, r3
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8013ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013ce4:	2b03      	cmp	r3, #3
 8013ce6:	d108      	bne.n	8013cfa <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8013ce8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cec:	4413      	add	r3, r2
 8013cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8013cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cf4:	4413      	add	r3, r2
 8013cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013cf8:	e006      	b.n	8013d08 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8013cfa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d02:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013d04:	4413      	add	r3, r2
 8013d06:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8013d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d0a:	011a      	lsls	r2, r3, #4
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	441a      	add	r2, r3
 8013d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d12:	1ad2      	subs	r2, r2, r3
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d901      	bls.n	8013d1e <f_mkfs+0x336>
 8013d1a:	230e      	movs	r3, #14
 8013d1c:	e28a      	b.n	8014234 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8013d1e:	693a      	ldr	r2, [r7, #16]
 8013d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d22:	1ad2      	subs	r2, r2, r3
 8013d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013d28:	fb01 f303 	mul.w	r3, r1, r3
 8013d2c:	1ad2      	subs	r2, r2, r3
 8013d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d30:	1ad2      	subs	r2, r2, r3
 8013d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d38:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8013d3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013d3e:	2b03      	cmp	r3, #3
 8013d40:	d10f      	bne.n	8013d62 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8013d42:	6a3b      	ldr	r3, [r7, #32]
 8013d44:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d80a      	bhi.n	8013d62 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d105      	bne.n	8013d5e <f_mkfs+0x376>
 8013d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d54:	085b      	lsrs	r3, r3, #1
 8013d56:	607b      	str	r3, [r7, #4]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d144      	bne.n	8013de8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8013d5e:	230e      	movs	r3, #14
 8013d60:	e268      	b.n	8014234 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8013d62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013d66:	2b02      	cmp	r3, #2
 8013d68:	d133      	bne.n	8013dd2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013d6a:	6a3b      	ldr	r3, [r7, #32]
 8013d6c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013d70:	4293      	cmp	r3, r2
 8013d72:	d91e      	bls.n	8013db2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d107      	bne.n	8013d8a <f_mkfs+0x3a2>
 8013d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d7c:	005b      	lsls	r3, r3, #1
 8013d7e:	2b40      	cmp	r3, #64	@ 0x40
 8013d80:	d803      	bhi.n	8013d8a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8013d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d84:	005b      	lsls	r3, r3, #1
 8013d86:	607b      	str	r3, [r7, #4]
 8013d88:	e033      	b.n	8013df2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8013d8a:	7afb      	ldrb	r3, [r7, #11]
 8013d8c:	f003 0302 	and.w	r3, r3, #2
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d003      	beq.n	8013d9c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013d94:	2303      	movs	r3, #3
 8013d96:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8013d9a:	e02a      	b.n	8013df2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d105      	bne.n	8013dae <f_mkfs+0x3c6>
 8013da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	607b      	str	r3, [r7, #4]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b80      	cmp	r3, #128	@ 0x80
 8013dac:	d91e      	bls.n	8013dec <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8013dae:	230e      	movs	r3, #14
 8013db0:	e240      	b.n	8014234 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013db2:	6a3b      	ldr	r3, [r7, #32]
 8013db4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013db8:	4293      	cmp	r3, r2
 8013dba:	d80a      	bhi.n	8013dd2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d105      	bne.n	8013dce <f_mkfs+0x3e6>
 8013dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	607b      	str	r3, [r7, #4]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b80      	cmp	r3, #128	@ 0x80
 8013dcc:	d910      	bls.n	8013df0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8013dce:	230e      	movs	r3, #14
 8013dd0:	e230      	b.n	8014234 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013dd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d10c      	bne.n	8013df4 <f_mkfs+0x40c>
 8013dda:	6a3b      	ldr	r3, [r7, #32]
 8013ddc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013de0:	4293      	cmp	r3, r2
 8013de2:	d907      	bls.n	8013df4 <f_mkfs+0x40c>
 8013de4:	230e      	movs	r3, #14
 8013de6:	e225      	b.n	8014234 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013de8:	bf00      	nop
 8013dea:	e6ce      	b.n	8013b8a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013dec:	bf00      	nop
 8013dee:	e6cc      	b.n	8013b8a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013df0:	bf00      	nop
			pau = au;
 8013df2:	e6ca      	b.n	8013b8a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8013df4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013df6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013df8:	461a      	mov	r2, r3
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013dfe:	f7fd fcd5 	bl	80117ac <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8013e02:	220b      	movs	r2, #11
 8013e04:	49b2      	ldr	r1, [pc, #712]	@ (80140d0 <f_mkfs+0x6e8>)
 8013e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013e08:	f7fd fcaf 	bl	801176a <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8013e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e0e:	330b      	adds	r3, #11
 8013e10:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8013e12:	4611      	mov	r1, r2
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7fd fc61 	bl	80116dc <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8013e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e1c:	330d      	adds	r3, #13
 8013e1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e20:	b2d2      	uxtb	r2, r2
 8013e22:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e26:	330e      	adds	r3, #14
 8013e28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e2a:	b292      	uxth	r2, r2
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fd fc54 	bl	80116dc <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8013e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e36:	3310      	adds	r3, #16
 8013e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013e3a:	b2d2      	uxtb	r2, r2
 8013e3c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e40:	f103 0211 	add.w	r2, r3, #17
 8013e44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013e48:	2b03      	cmp	r3, #3
 8013e4a:	d002      	beq.n	8013e52 <f_mkfs+0x46a>
 8013e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	e000      	b.n	8013e54 <f_mkfs+0x46c>
 8013e52:	2300      	movs	r3, #0
 8013e54:	4619      	mov	r1, r3
 8013e56:	4610      	mov	r0, r2
 8013e58:	f7fd fc40 	bl	80116dc <st_word>
		if (sz_vol < 0x10000) {
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e62:	d208      	bcs.n	8013e76 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e66:	3313      	adds	r3, #19
 8013e68:	693a      	ldr	r2, [r7, #16]
 8013e6a:	b292      	uxth	r2, r2
 8013e6c:	4611      	mov	r1, r2
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7fd fc34 	bl	80116dc <st_word>
 8013e74:	e006      	b.n	8013e84 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e78:	3320      	adds	r3, #32
 8013e7a:	693a      	ldr	r2, [r7, #16]
 8013e7c:	4611      	mov	r1, r2
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fd fc47 	bl	8011712 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e86:	3315      	adds	r3, #21
 8013e88:	22f8      	movs	r2, #248	@ 0xf8
 8013e8a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e8e:	3318      	adds	r3, #24
 8013e90:	213f      	movs	r1, #63	@ 0x3f
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fd fc22 	bl	80116dc <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e9a:	331a      	adds	r3, #26
 8013e9c:	21ff      	movs	r1, #255	@ 0xff
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fd fc1c 	bl	80116dc <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ea6:	331c      	adds	r3, #28
 8013ea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fd fc31 	bl	8011712 <st_dword>
		if (fmt == FS_FAT32) {
 8013eb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013eb4:	2b03      	cmp	r3, #3
 8013eb6:	d131      	bne.n	8013f1c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eba:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8013ebe:	f7fd f853 	bl	8010f68 <get_fattime>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f7fd fc23 	bl	8011712 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ece:	3324      	adds	r3, #36	@ 0x24
 8013ed0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7fd fc1d 	bl	8011712 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013eda:	332c      	adds	r3, #44	@ 0x2c
 8013edc:	2102      	movs	r1, #2
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7fd fc17 	bl	8011712 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ee6:	3330      	adds	r3, #48	@ 0x30
 8013ee8:	2101      	movs	r1, #1
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fd fbf6 	bl	80116dc <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef2:	3332      	adds	r3, #50	@ 0x32
 8013ef4:	2106      	movs	r1, #6
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fd fbf0 	bl	80116dc <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8013efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013efe:	3340      	adds	r3, #64	@ 0x40
 8013f00:	2280      	movs	r2, #128	@ 0x80
 8013f02:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f06:	3342      	adds	r3, #66	@ 0x42
 8013f08:	2229      	movs	r2, #41	@ 0x29
 8013f0a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0e:	3347      	adds	r3, #71	@ 0x47
 8013f10:	2213      	movs	r2, #19
 8013f12:	4970      	ldr	r1, [pc, #448]	@ (80140d4 <f_mkfs+0x6ec>)
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fd fc28 	bl	801176a <mem_cpy>
 8013f1a:	e020      	b.n	8013f5e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8013f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f1e:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8013f22:	f7fd f821 	bl	8010f68 <get_fattime>
 8013f26:	4603      	mov	r3, r0
 8013f28:	4619      	mov	r1, r3
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	f7fd fbf1 	bl	8011712 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8013f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f32:	3316      	adds	r3, #22
 8013f34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013f36:	b292      	uxth	r2, r2
 8013f38:	4611      	mov	r1, r2
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fd fbce 	bl	80116dc <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f42:	3324      	adds	r3, #36	@ 0x24
 8013f44:	2280      	movs	r2, #128	@ 0x80
 8013f46:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f4a:	3326      	adds	r3, #38	@ 0x26
 8013f4c:	2229      	movs	r2, #41	@ 0x29
 8013f4e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f52:	332b      	adds	r3, #43	@ 0x2b
 8013f54:	2213      	movs	r2, #19
 8013f56:	4960      	ldr	r1, [pc, #384]	@ (80140d8 <f_mkfs+0x6f0>)
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fd fc06 	bl	801176a <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f60:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013f64:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7fd fbb7 	bl	80116dc <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013f6e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013f72:	2301      	movs	r3, #1
 8013f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f78:	f7fd fb36 	bl	80115e8 <disk_write>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d001      	beq.n	8013f86 <f_mkfs+0x59e>
 8013f82:	2301      	movs	r3, #1
 8013f84:	e156      	b.n	8014234 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013f86:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013f8a:	2b03      	cmp	r3, #3
 8013f8c:	d140      	bne.n	8014010 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f90:	1d9a      	adds	r2, r3, #6
 8013f92:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013f96:	2301      	movs	r3, #1
 8013f98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013f9a:	f7fd fb25 	bl	80115e8 <disk_write>
			mem_set(buf, 0, ss);
 8013f9e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	2100      	movs	r1, #0
 8013fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fa6:	f7fd fc01 	bl	80117ac <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013faa:	494c      	ldr	r1, [pc, #304]	@ (80140dc <f_mkfs+0x6f4>)
 8013fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fae:	f7fd fbb0 	bl	8011712 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fb4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013fb8:	4949      	ldr	r1, [pc, #292]	@ (80140e0 <f_mkfs+0x6f8>)
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fd fba9 	bl	8011712 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fc2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	3b01      	subs	r3, #1
 8013fca:	4619      	mov	r1, r3
 8013fcc:	4610      	mov	r0, r2
 8013fce:	f7fd fba0 	bl	8011712 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013fd8:	2102      	movs	r1, #2
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7fd fb99 	bl	8011712 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fe2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013fe6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fd fb76 	bl	80116dc <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ff2:	1dda      	adds	r2, r3, #7
 8013ff4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013ffc:	f7fd faf4 	bl	80115e8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014002:	1c5a      	adds	r2, r3, #1
 8014004:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014008:	2301      	movs	r3, #1
 801400a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801400c:	f7fd faec 	bl	80115e8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014012:	2100      	movs	r1, #0
 8014014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014016:	f7fd fbc9 	bl	80117ac <mem_set>
		sect = b_fat;		/* FAT start sector */
 801401a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801401c:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801401e:	2300      	movs	r3, #0
 8014020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014022:	e04b      	b.n	80140bc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014024:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014028:	2b03      	cmp	r3, #3
 801402a:	d113      	bne.n	8014054 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 801402c:	f06f 0107 	mvn.w	r1, #7
 8014030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014032:	f7fd fb6e 	bl	8011712 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014038:	3304      	adds	r3, #4
 801403a:	f04f 31ff 	mov.w	r1, #4294967295
 801403e:	4618      	mov	r0, r3
 8014040:	f7fd fb67 	bl	8011712 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014046:	3308      	adds	r3, #8
 8014048:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 801404c:	4618      	mov	r0, r3
 801404e:	f7fd fb60 	bl	8011712 <st_dword>
 8014052:	e00b      	b.n	801406c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014054:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014058:	2b01      	cmp	r3, #1
 801405a:	d101      	bne.n	8014060 <f_mkfs+0x678>
 801405c:	4b21      	ldr	r3, [pc, #132]	@ (80140e4 <f_mkfs+0x6fc>)
 801405e:	e001      	b.n	8014064 <f_mkfs+0x67c>
 8014060:	f06f 0307 	mvn.w	r3, #7
 8014064:	4619      	mov	r1, r3
 8014066:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014068:	f7fd fb53 	bl	8011712 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 801406c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801406e:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014070:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014074:	4293      	cmp	r3, r2
 8014076:	bf28      	it	cs
 8014078:	4613      	movcs	r3, r2
 801407a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801407c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014082:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014084:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014086:	f7fd faaf 	bl	80115e8 <disk_write>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d001      	beq.n	8014094 <f_mkfs+0x6ac>
 8014090:	2301      	movs	r3, #1
 8014092:	e0cf      	b.n	8014234 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014094:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014096:	461a      	mov	r2, r3
 8014098:	2100      	movs	r1, #0
 801409a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801409c:	f7fd fb86 	bl	80117ac <mem_set>
				sect += n; nsect -= n;
 80140a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80140a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140a4:	4413      	add	r3, r2
 80140a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80140a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80140aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140ac:	1ad3      	subs	r3, r2, r3
 80140ae:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 80140b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1dc      	bne.n	8014070 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80140b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80140b8:	3301      	adds	r3, #1
 80140ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80140bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80140be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d3af      	bcc.n	8014024 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80140c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80140c8:	2b03      	cmp	r3, #3
 80140ca:	d10d      	bne.n	80140e8 <f_mkfs+0x700>
 80140cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140ce:	e00c      	b.n	80140ea <f_mkfs+0x702>
 80140d0:	0801b328 	.word	0x0801b328
 80140d4:	0801b334 	.word	0x0801b334
 80140d8:	0801b348 	.word	0x0801b348
 80140dc:	41615252 	.word	0x41615252
 80140e0:	61417272 	.word	0x61417272
 80140e4:	00fffff8 	.word	0x00fffff8
 80140e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80140ea:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80140ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80140ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140f0:	4293      	cmp	r3, r2
 80140f2:	bf28      	it	cs
 80140f4:	4613      	movcs	r3, r2
 80140f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80140f8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80140fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014100:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014102:	f7fd fa71 	bl	80115e8 <disk_write>
 8014106:	4603      	mov	r3, r0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d001      	beq.n	8014110 <f_mkfs+0x728>
 801410c:	2301      	movs	r3, #1
 801410e:	e091      	b.n	8014234 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014110:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014114:	4413      	add	r3, r2
 8014116:	667b      	str	r3, [r7, #100]	@ 0x64
 8014118:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801411a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801411c:	1ad3      	subs	r3, r2, r3
 801411e:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014122:	2b00      	cmp	r3, #0
 8014124:	d1e2      	bne.n	80140ec <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014126:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801412a:	2b03      	cmp	r3, #3
 801412c:	d103      	bne.n	8014136 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 801412e:	230c      	movs	r3, #12
 8014130:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014134:	e010      	b.n	8014158 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801413c:	d303      	bcc.n	8014146 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 801413e:	2306      	movs	r3, #6
 8014140:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014144:	e008      	b.n	8014158 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014146:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801414a:	2b02      	cmp	r3, #2
 801414c:	d101      	bne.n	8014152 <f_mkfs+0x76a>
 801414e:	2304      	movs	r3, #4
 8014150:	e000      	b.n	8014154 <f_mkfs+0x76c>
 8014152:	2301      	movs	r3, #1
 8014154:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014158:	7afb      	ldrb	r3, [r7, #11]
 801415a:	f003 0308 	and.w	r3, r3, #8
 801415e:	2b00      	cmp	r3, #0
 8014160:	d15b      	bne.n	801421a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014162:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014164:	461a      	mov	r2, r3
 8014166:	2100      	movs	r1, #0
 8014168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801416a:	f7fd fb1f 	bl	80117ac <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014170:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014174:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014178:	4618      	mov	r0, r3
 801417a:	f7fd faaf 	bl	80116dc <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014180:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014184:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	2200      	movs	r2, #0
 801418a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	3301      	adds	r3, #1
 8014190:	2201      	movs	r2, #1
 8014192:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	3302      	adds	r3, #2
 8014198:	2201      	movs	r2, #1
 801419a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	3303      	adds	r3, #3
 80141a0:	2200      	movs	r2, #0
 80141a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	3304      	adds	r3, #4
 80141a8:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80141ac:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80141ae:	693a      	ldr	r2, [r7, #16]
 80141b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b2:	441a      	add	r2, r3
 80141b4:	4b21      	ldr	r3, [pc, #132]	@ (801423c <f_mkfs+0x854>)
 80141b6:	fba3 1302 	umull	r1, r3, r3, r2
 80141ba:	1ad2      	subs	r2, r2, r3
 80141bc:	0852      	lsrs	r2, r2, #1
 80141be:	4413      	add	r3, r2
 80141c0:	0b5b      	lsrs	r3, r3, #13
 80141c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	3305      	adds	r3, #5
 80141c8:	22fe      	movs	r2, #254	@ 0xfe
 80141ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80141cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141ce:	089b      	lsrs	r3, r3, #2
 80141d0:	b2da      	uxtb	r2, r3
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	3306      	adds	r3, #6
 80141d6:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 80141da:	b2d2      	uxtb	r2, r2
 80141dc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80141de:	69bb      	ldr	r3, [r7, #24]
 80141e0:	3307      	adds	r3, #7
 80141e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80141e4:	b2d2      	uxtb	r2, r2
 80141e6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	3308      	adds	r3, #8
 80141ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fd fa8f 	bl	8011712 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	330c      	adds	r3, #12
 80141f8:	693a      	ldr	r2, [r7, #16]
 80141fa:	4611      	mov	r1, r2
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7fd fa88 	bl	8011712 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014202:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014206:	2301      	movs	r3, #1
 8014208:	2200      	movs	r2, #0
 801420a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801420c:	f7fd f9ec 	bl	80115e8 <disk_write>
 8014210:	4603      	mov	r3, r0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d001      	beq.n	801421a <f_mkfs+0x832>
 8014216:	2301      	movs	r3, #1
 8014218:	e00c      	b.n	8014234 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801421a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801421e:	2200      	movs	r2, #0
 8014220:	2100      	movs	r1, #0
 8014222:	4618      	mov	r0, r3
 8014224:	f7fd fa00 	bl	8011628 <disk_ioctl>
 8014228:	4603      	mov	r3, r0
 801422a:	2b00      	cmp	r3, #0
 801422c:	d001      	beq.n	8014232 <f_mkfs+0x84a>
 801422e:	2301      	movs	r3, #1
 8014230:	e000      	b.n	8014234 <f_mkfs+0x84c>

	return FR_OK;
 8014232:	2300      	movs	r3, #0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3774      	adds	r7, #116	@ 0x74
 8014238:	46bd      	mov	sp, r7
 801423a:	bd90      	pop	{r4, r7, pc}
 801423c:	0515565b 	.word	0x0515565b

08014240 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014240:	b480      	push	{r7}
 8014242:	b087      	sub	sp, #28
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	4613      	mov	r3, r2
 801424c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801424e:	2301      	movs	r3, #1
 8014250:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014252:	2300      	movs	r3, #0
 8014254:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014256:	4b1f      	ldr	r3, [pc, #124]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014258:	7a5b      	ldrb	r3, [r3, #9]
 801425a:	b2db      	uxtb	r3, r3
 801425c:	2b00      	cmp	r3, #0
 801425e:	d131      	bne.n	80142c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014260:	4b1c      	ldr	r3, [pc, #112]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014262:	7a5b      	ldrb	r3, [r3, #9]
 8014264:	b2db      	uxtb	r3, r3
 8014266:	461a      	mov	r2, r3
 8014268:	4b1a      	ldr	r3, [pc, #104]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 801426a:	2100      	movs	r1, #0
 801426c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801426e:	4b19      	ldr	r3, [pc, #100]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014270:	7a5b      	ldrb	r3, [r3, #9]
 8014272:	b2db      	uxtb	r3, r3
 8014274:	4a17      	ldr	r2, [pc, #92]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	4413      	add	r3, r2
 801427a:	68fa      	ldr	r2, [r7, #12]
 801427c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801427e:	4b15      	ldr	r3, [pc, #84]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014280:	7a5b      	ldrb	r3, [r3, #9]
 8014282:	b2db      	uxtb	r3, r3
 8014284:	461a      	mov	r2, r3
 8014286:	4b13      	ldr	r3, [pc, #76]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014288:	4413      	add	r3, r2
 801428a:	79fa      	ldrb	r2, [r7, #7]
 801428c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801428e:	4b11      	ldr	r3, [pc, #68]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 8014290:	7a5b      	ldrb	r3, [r3, #9]
 8014292:	b2db      	uxtb	r3, r3
 8014294:	1c5a      	adds	r2, r3, #1
 8014296:	b2d1      	uxtb	r1, r2
 8014298:	4a0e      	ldr	r2, [pc, #56]	@ (80142d4 <FATFS_LinkDriverEx+0x94>)
 801429a:	7251      	strb	r1, [r2, #9]
 801429c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801429e:	7dbb      	ldrb	r3, [r7, #22]
 80142a0:	3330      	adds	r3, #48	@ 0x30
 80142a2:	b2da      	uxtb	r2, r3
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	3301      	adds	r3, #1
 80142ac:	223a      	movs	r2, #58	@ 0x3a
 80142ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	3302      	adds	r3, #2
 80142b4:	222f      	movs	r2, #47	@ 0x2f
 80142b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	3303      	adds	r3, #3
 80142bc:	2200      	movs	r2, #0
 80142be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80142c0:	2300      	movs	r3, #0
 80142c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80142c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	371c      	adds	r7, #28
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop
 80142d4:	20001a0c 	.word	0x20001a0c

080142d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80142e2:	2200      	movs	r2, #0
 80142e4:	6839      	ldr	r1, [r7, #0]
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f7ff ffaa 	bl	8014240 <FATFS_LinkDriverEx>
 80142ec:	4603      	mov	r3, r0
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3708      	adds	r7, #8
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}

080142f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80142f6:	b480      	push	{r7}
 80142f8:	b085      	sub	sp, #20
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	4603      	mov	r3, r0
 80142fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014300:	2300      	movs	r3, #0
 8014302:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014308:	2b84      	cmp	r3, #132	@ 0x84
 801430a:	d005      	beq.n	8014318 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801430c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	4413      	add	r3, r2
 8014314:	3303      	adds	r3, #3
 8014316:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014318:	68fb      	ldr	r3, [r7, #12]
}
 801431a:	4618      	mov	r0, r3
 801431c:	3714      	adds	r7, #20
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr

08014326 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014326:	b480      	push	{r7}
 8014328:	b083      	sub	sp, #12
 801432a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801432c:	f3ef 8305 	mrs	r3, IPSR
 8014330:	607b      	str	r3, [r7, #4]
  return(result);
 8014332:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014334:	2b00      	cmp	r3, #0
 8014336:	bf14      	ite	ne
 8014338:	2301      	movne	r3, #1
 801433a:	2300      	moveq	r3, #0
 801433c:	b2db      	uxtb	r3, r3
}
 801433e:	4618      	mov	r0, r3
 8014340:	370c      	adds	r7, #12
 8014342:	46bd      	mov	sp, r7
 8014344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014348:	4770      	bx	lr

0801434a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801434e:	f001 f9cd 	bl	80156ec <vTaskStartScheduler>
  
  return osOK;
 8014352:	2300      	movs	r3, #0
}
 8014354:	4618      	mov	r0, r3
 8014356:	bd80      	pop	{r7, pc}

08014358 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801435c:	f001 fe2e 	bl	8015fbc <xTaskGetSchedulerState>
 8014360:	4603      	mov	r3, r0
 8014362:	2b01      	cmp	r3, #1
 8014364:	d101      	bne.n	801436a <osKernelRunning+0x12>
    return 0;
 8014366:	2300      	movs	r3, #0
 8014368:	e000      	b.n	801436c <osKernelRunning+0x14>
  else
    return 1;
 801436a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801436c:	4618      	mov	r0, r3
 801436e:	bd80      	pop	{r7, pc}

08014370 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014374:	f7ff ffd7 	bl	8014326 <inHandlerMode>
 8014378:	4603      	mov	r3, r0
 801437a:	2b00      	cmp	r3, #0
 801437c:	d003      	beq.n	8014386 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801437e:	f001 fad9 	bl	8015934 <xTaskGetTickCountFromISR>
 8014382:	4603      	mov	r3, r0
 8014384:	e002      	b.n	801438c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014386:	f001 fac5 	bl	8015914 <xTaskGetTickCount>
 801438a:	4603      	mov	r3, r0
  }
}
 801438c:	4618      	mov	r0, r3
 801438e:	bd80      	pop	{r7, pc}

08014390 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014392:	b089      	sub	sp, #36	@ 0x24
 8014394:	af04      	add	r7, sp, #16
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	695b      	ldr	r3, [r3, #20]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d020      	beq.n	80143e4 <osThreadCreate+0x54>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	699b      	ldr	r3, [r3, #24]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d01c      	beq.n	80143e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685c      	ldr	r4, [r3, #4]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	691e      	ldr	r6, [r3, #16]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ff ff9a 	bl	80142f6 <makeFreeRtosPriority>
 80143c2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	695b      	ldr	r3, [r3, #20]
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143cc:	9202      	str	r2, [sp, #8]
 80143ce:	9301      	str	r3, [sp, #4]
 80143d0:	9100      	str	r1, [sp, #0]
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	4632      	mov	r2, r6
 80143d6:	4629      	mov	r1, r5
 80143d8:	4620      	mov	r0, r4
 80143da:	f000 ffa5 	bl	8015328 <xTaskCreateStatic>
 80143de:	4603      	mov	r3, r0
 80143e0:	60fb      	str	r3, [r7, #12]
 80143e2:	e01c      	b.n	801441e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	685c      	ldr	r4, [r3, #4]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143f0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7ff ff7c 	bl	80142f6 <makeFreeRtosPriority>
 80143fe:	4602      	mov	r2, r0
 8014400:	f107 030c 	add.w	r3, r7, #12
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	9200      	str	r2, [sp, #0]
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	4632      	mov	r2, r6
 801440c:	4629      	mov	r1, r5
 801440e:	4620      	mov	r0, r4
 8014410:	f000 fff0 	bl	80153f4 <xTaskCreate>
 8014414:	4603      	mov	r3, r0
 8014416:	2b01      	cmp	r3, #1
 8014418:	d001      	beq.n	801441e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801441a:	2300      	movs	r3, #0
 801441c:	e000      	b.n	8014420 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801441e:	68fb      	ldr	r3, [r7, #12]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3714      	adds	r7, #20
 8014424:	46bd      	mov	sp, r7
 8014426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014428 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <osDelay+0x16>
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	e000      	b.n	8014440 <osDelay+0x18>
 801443e:	2301      	movs	r3, #1
 8014440:	4618      	mov	r0, r3
 8014442:	f001 f91b 	bl	801567c <vTaskDelay>
  
  return osOK;
 8014446:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014448:	4618      	mov	r0, r3
 801444a:	3710      	adds	r7, #16
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014450:	b590      	push	{r4, r7, lr}
 8014452:	b085      	sub	sp, #20
 8014454:	af02      	add	r7, sp, #8
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	689b      	ldr	r3, [r3, #8]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d011      	beq.n	8014486 <osMessageCreate+0x36>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d00d      	beq.n	8014486 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	6818      	ldr	r0, [r3, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6859      	ldr	r1, [r3, #4]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	689a      	ldr	r2, [r3, #8]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	2400      	movs	r4, #0
 801447c:	9400      	str	r4, [sp, #0]
 801447e:	f000 f9f9 	bl	8014874 <xQueueGenericCreateStatic>
 8014482:	4603      	mov	r3, r0
 8014484:	e008      	b.n	8014498 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6818      	ldr	r0, [r3, #0]
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	4619      	mov	r1, r3
 8014492:	f000 fa76 	bl	8014982 <xQueueGenericCreate>
 8014496:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014498:	4618      	mov	r0, r3
 801449a:	370c      	adds	r7, #12
 801449c:	46bd      	mov	sp, r7
 801449e:	bd90      	pop	{r4, r7, pc}

080144a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80144ac:	2300      	movs	r3, #0
 80144ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d101      	bne.n	80144be <osMessagePut+0x1e>
    ticks = 1;
 80144ba:	2301      	movs	r3, #1
 80144bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80144be:	f7ff ff32 	bl	8014326 <inHandlerMode>
 80144c2:	4603      	mov	r3, r0
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d018      	beq.n	80144fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80144c8:	f107 0210 	add.w	r2, r7, #16
 80144cc:	f107 0108 	add.w	r1, r7, #8
 80144d0:	2300      	movs	r3, #0
 80144d2:	68f8      	ldr	r0, [r7, #12]
 80144d4:	f000 fbc2 	bl	8014c5c <xQueueGenericSendFromISR>
 80144d8:	4603      	mov	r3, r0
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d001      	beq.n	80144e2 <osMessagePut+0x42>
      return osErrorOS;
 80144de:	23ff      	movs	r3, #255	@ 0xff
 80144e0:	e018      	b.n	8014514 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d014      	beq.n	8014512 <osMessagePut+0x72>
 80144e8:	4b0c      	ldr	r3, [pc, #48]	@ (801451c <osMessagePut+0x7c>)
 80144ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144ee:	601a      	str	r2, [r3, #0]
 80144f0:	f3bf 8f4f 	dsb	sy
 80144f4:	f3bf 8f6f 	isb	sy
 80144f8:	e00b      	b.n	8014512 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80144fa:	f107 0108 	add.w	r1, r7, #8
 80144fe:	2300      	movs	r3, #0
 8014500:	697a      	ldr	r2, [r7, #20]
 8014502:	68f8      	ldr	r0, [r7, #12]
 8014504:	f000 faa0 	bl	8014a48 <xQueueGenericSend>
 8014508:	4603      	mov	r3, r0
 801450a:	2b01      	cmp	r3, #1
 801450c:	d001      	beq.n	8014512 <osMessagePut+0x72>
      return osErrorOS;
 801450e:	23ff      	movs	r3, #255	@ 0xff
 8014510:	e000      	b.n	8014514 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014512:	2300      	movs	r3, #0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3718      	adds	r7, #24
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	e000ed04 	.word	0xe000ed04

08014520 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014520:	b590      	push	{r4, r7, lr}
 8014522:	b08b      	sub	sp, #44	@ 0x2c
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014530:	2300      	movs	r3, #0
 8014532:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d10a      	bne.n	8014550 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801453a:	2380      	movs	r3, #128	@ 0x80
 801453c:	617b      	str	r3, [r7, #20]
    return event;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	461c      	mov	r4, r3
 8014542:	f107 0314 	add.w	r3, r7, #20
 8014546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801454a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801454e:	e054      	b.n	80145fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014550:	2300      	movs	r3, #0
 8014552:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014554:	2300      	movs	r3, #0
 8014556:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801455e:	d103      	bne.n	8014568 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014560:	f04f 33ff 	mov.w	r3, #4294967295
 8014564:	627b      	str	r3, [r7, #36]	@ 0x24
 8014566:	e009      	b.n	801457c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d006      	beq.n	801457c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8014572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014574:	2b00      	cmp	r3, #0
 8014576:	d101      	bne.n	801457c <osMessageGet+0x5c>
      ticks = 1;
 8014578:	2301      	movs	r3, #1
 801457a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 801457c:	f7ff fed3 	bl	8014326 <inHandlerMode>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d01c      	beq.n	80145c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014586:	f107 0220 	add.w	r2, r7, #32
 801458a:	f107 0314 	add.w	r3, r7, #20
 801458e:	3304      	adds	r3, #4
 8014590:	4619      	mov	r1, r3
 8014592:	68b8      	ldr	r0, [r7, #8]
 8014594:	f000 fcee 	bl	8014f74 <xQueueReceiveFromISR>
 8014598:	4603      	mov	r3, r0
 801459a:	2b01      	cmp	r3, #1
 801459c:	d102      	bne.n	80145a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801459e:	2310      	movs	r3, #16
 80145a0:	617b      	str	r3, [r7, #20]
 80145a2:	e001      	b.n	80145a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80145a4:	2300      	movs	r3, #0
 80145a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80145a8:	6a3b      	ldr	r3, [r7, #32]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d01d      	beq.n	80145ea <osMessageGet+0xca>
 80145ae:	4b15      	ldr	r3, [pc, #84]	@ (8014604 <osMessageGet+0xe4>)
 80145b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	f3bf 8f4f 	dsb	sy
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	e014      	b.n	80145ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80145c0:	f107 0314 	add.w	r3, r7, #20
 80145c4:	3304      	adds	r3, #4
 80145c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145c8:	4619      	mov	r1, r3
 80145ca:	68b8      	ldr	r0, [r7, #8]
 80145cc:	f000 fbea 	bl	8014da4 <xQueueReceive>
 80145d0:	4603      	mov	r3, r0
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	d102      	bne.n	80145dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80145d6:	2310      	movs	r3, #16
 80145d8:	617b      	str	r3, [r7, #20]
 80145da:	e006      	b.n	80145ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80145dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d101      	bne.n	80145e6 <osMessageGet+0xc6>
 80145e2:	2300      	movs	r3, #0
 80145e4:	e000      	b.n	80145e8 <osMessageGet+0xc8>
 80145e6:	2340      	movs	r3, #64	@ 0x40
 80145e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	461c      	mov	r4, r3
 80145ee:	f107 0314 	add.w	r3, r7, #20
 80145f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80145f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	372c      	adds	r7, #44	@ 0x2c
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd90      	pop	{r4, r7, pc}
 8014602:	bf00      	nop
 8014604:	e000ed04 	.word	0xe000ed04

08014608 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014610:	f7ff fe89 	bl	8014326 <inHandlerMode>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d004      	beq.n	8014624 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f000 fd53 	bl	80150c6 <uxQueueMessagesWaitingFromISR>
 8014620:	4603      	mov	r3, r0
 8014622:	e003      	b.n	801462c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f000 fd2d 	bl	8015084 <uxQueueMessagesWaiting>
 801462a:	4603      	mov	r3, r0
  }
}
 801462c:	4618      	mov	r0, r3
 801462e:	3708      	adds	r7, #8
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}

08014634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014634:	b480      	push	{r7}
 8014636:	b083      	sub	sp, #12
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f103 0208 	add.w	r2, r3, #8
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f04f 32ff 	mov.w	r2, #4294967295
 801464c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f103 0208 	add.w	r2, r3, #8
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f103 0208 	add.w	r2, r3, #8
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2200      	movs	r2, #0
 8014666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014668:	bf00      	nop
 801466a:	370c      	adds	r7, #12
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr

08014674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014674:	b480      	push	{r7}
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014682:	bf00      	nop
 8014684:	370c      	adds	r7, #12
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801468e:	b480      	push	{r7}
 8014690:	b085      	sub	sp, #20
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
 8014696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	68fa      	ldr	r2, [r7, #12]
 80146a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	689a      	ldr	r2, [r3, #8]
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	683a      	ldr	r2, [r7, #0]
 80146b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	1c5a      	adds	r2, r3, #1
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	601a      	str	r2, [r3, #0]
}
 80146ca:	bf00      	nop
 80146cc:	3714      	adds	r7, #20
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr

080146d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80146d6:	b480      	push	{r7}
 80146d8:	b085      	sub	sp, #20
 80146da:	af00      	add	r7, sp, #0
 80146dc:	6078      	str	r0, [r7, #4]
 80146de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ec:	d103      	bne.n	80146f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	60fb      	str	r3, [r7, #12]
 80146f4:	e00c      	b.n	8014710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	3308      	adds	r3, #8
 80146fa:	60fb      	str	r3, [r7, #12]
 80146fc:	e002      	b.n	8014704 <vListInsert+0x2e>
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	60fb      	str	r3, [r7, #12]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	685b      	ldr	r3, [r3, #4]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	68ba      	ldr	r2, [r7, #8]
 801470c:	429a      	cmp	r2, r3
 801470e:	d2f6      	bcs.n	80146fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	683a      	ldr	r2, [r7, #0]
 801471e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	68fa      	ldr	r2, [r7, #12]
 8014724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	683a      	ldr	r2, [r7, #0]
 801472a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	687a      	ldr	r2, [r7, #4]
 8014730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	1c5a      	adds	r2, r3, #1
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	601a      	str	r2, [r3, #0]
}
 801473c:	bf00      	nop
 801473e:	3714      	adds	r7, #20
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014748:	b480      	push	{r7}
 801474a:	b085      	sub	sp, #20
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	691b      	ldr	r3, [r3, #16]
 8014754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	6892      	ldr	r2, [r2, #8]
 801475e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	687a      	ldr	r2, [r7, #4]
 8014766:	6852      	ldr	r2, [r2, #4]
 8014768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	687a      	ldr	r2, [r7, #4]
 8014770:	429a      	cmp	r2, r3
 8014772:	d103      	bne.n	801477c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	689a      	ldr	r2, [r3, #8]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	1e5a      	subs	r2, r3, #1
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
}
 8014790:	4618      	mov	r0, r3
 8014792:	3714      	adds	r7, #20
 8014794:	46bd      	mov	sp, r7
 8014796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479a:	4770      	bx	lr

0801479c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b084      	sub	sp, #16
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10d      	bne.n	80147cc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80147b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147b4:	b672      	cpsid	i
 80147b6:	f383 8811 	msr	BASEPRI, r3
 80147ba:	f3bf 8f6f 	isb	sy
 80147be:	f3bf 8f4f 	dsb	sy
 80147c2:	b662      	cpsie	i
 80147c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80147c6:	bf00      	nop
 80147c8:	bf00      	nop
 80147ca:	e7fd      	b.n	80147c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80147cc:	f001 fe16 	bl	80163fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681a      	ldr	r2, [r3, #0]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147d8:	68f9      	ldr	r1, [r7, #12]
 80147da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80147dc:	fb01 f303 	mul.w	r3, r1, r3
 80147e0:	441a      	add	r2, r3
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2200      	movs	r2, #0
 80147ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	681a      	ldr	r2, [r3, #0]
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147fc:	3b01      	subs	r3, #1
 80147fe:	68f9      	ldr	r1, [r7, #12]
 8014800:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014802:	fb01 f303 	mul.w	r3, r1, r3
 8014806:	441a      	add	r2, r3
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	22ff      	movs	r2, #255	@ 0xff
 8014810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	22ff      	movs	r2, #255	@ 0xff
 8014818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d114      	bne.n	801484c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	691b      	ldr	r3, [r3, #16]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d01a      	beq.n	8014860 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	3310      	adds	r3, #16
 801482e:	4618      	mov	r0, r3
 8014830:	f001 f9fa 	bl	8015c28 <xTaskRemoveFromEventList>
 8014834:	4603      	mov	r3, r0
 8014836:	2b00      	cmp	r3, #0
 8014838:	d012      	beq.n	8014860 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801483a:	4b0d      	ldr	r3, [pc, #52]	@ (8014870 <xQueueGenericReset+0xd4>)
 801483c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014840:	601a      	str	r2, [r3, #0]
 8014842:	f3bf 8f4f 	dsb	sy
 8014846:	f3bf 8f6f 	isb	sy
 801484a:	e009      	b.n	8014860 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	3310      	adds	r3, #16
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff feef 	bl	8014634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	3324      	adds	r3, #36	@ 0x24
 801485a:	4618      	mov	r0, r3
 801485c:	f7ff feea 	bl	8014634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014860:	f001 fe02 	bl	8016468 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014864:	2301      	movs	r3, #1
}
 8014866:	4618      	mov	r0, r3
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	e000ed04 	.word	0xe000ed04

08014874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014874:	b580      	push	{r7, lr}
 8014876:	b08e      	sub	sp, #56	@ 0x38
 8014878:	af02      	add	r7, sp, #8
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d10d      	bne.n	80148a4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8014888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801488c:	b672      	cpsid	i
 801488e:	f383 8811 	msr	BASEPRI, r3
 8014892:	f3bf 8f6f 	isb	sy
 8014896:	f3bf 8f4f 	dsb	sy
 801489a:	b662      	cpsie	i
 801489c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801489e:	bf00      	nop
 80148a0:	bf00      	nop
 80148a2:	e7fd      	b.n	80148a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d10d      	bne.n	80148c6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80148aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ae:	b672      	cpsid	i
 80148b0:	f383 8811 	msr	BASEPRI, r3
 80148b4:	f3bf 8f6f 	isb	sy
 80148b8:	f3bf 8f4f 	dsb	sy
 80148bc:	b662      	cpsie	i
 80148be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80148c0:	bf00      	nop
 80148c2:	bf00      	nop
 80148c4:	e7fd      	b.n	80148c2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d002      	beq.n	80148d2 <xQueueGenericCreateStatic+0x5e>
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d001      	beq.n	80148d6 <xQueueGenericCreateStatic+0x62>
 80148d2:	2301      	movs	r3, #1
 80148d4:	e000      	b.n	80148d8 <xQueueGenericCreateStatic+0x64>
 80148d6:	2300      	movs	r3, #0
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d10d      	bne.n	80148f8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80148dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e0:	b672      	cpsid	i
 80148e2:	f383 8811 	msr	BASEPRI, r3
 80148e6:	f3bf 8f6f 	isb	sy
 80148ea:	f3bf 8f4f 	dsb	sy
 80148ee:	b662      	cpsie	i
 80148f0:	623b      	str	r3, [r7, #32]
}
 80148f2:	bf00      	nop
 80148f4:	bf00      	nop
 80148f6:	e7fd      	b.n	80148f4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d102      	bne.n	8014904 <xQueueGenericCreateStatic+0x90>
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d101      	bne.n	8014908 <xQueueGenericCreateStatic+0x94>
 8014904:	2301      	movs	r3, #1
 8014906:	e000      	b.n	801490a <xQueueGenericCreateStatic+0x96>
 8014908:	2300      	movs	r3, #0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d10d      	bne.n	801492a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014912:	b672      	cpsid	i
 8014914:	f383 8811 	msr	BASEPRI, r3
 8014918:	f3bf 8f6f 	isb	sy
 801491c:	f3bf 8f4f 	dsb	sy
 8014920:	b662      	cpsie	i
 8014922:	61fb      	str	r3, [r7, #28]
}
 8014924:	bf00      	nop
 8014926:	bf00      	nop
 8014928:	e7fd      	b.n	8014926 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801492a:	2348      	movs	r3, #72	@ 0x48
 801492c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	2b48      	cmp	r3, #72	@ 0x48
 8014932:	d00d      	beq.n	8014950 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8014934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014938:	b672      	cpsid	i
 801493a:	f383 8811 	msr	BASEPRI, r3
 801493e:	f3bf 8f6f 	isb	sy
 8014942:	f3bf 8f4f 	dsb	sy
 8014946:	b662      	cpsie	i
 8014948:	61bb      	str	r3, [r7, #24]
}
 801494a:	bf00      	nop
 801494c:	bf00      	nop
 801494e:	e7fd      	b.n	801494c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014950:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00d      	beq.n	8014978 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801495e:	2201      	movs	r2, #1
 8014960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014964:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801496a:	9300      	str	r3, [sp, #0]
 801496c:	4613      	mov	r3, r2
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	68b9      	ldr	r1, [r7, #8]
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f000 f848 	bl	8014a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801497a:	4618      	mov	r0, r3
 801497c:	3730      	adds	r7, #48	@ 0x30
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}

08014982 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014982:	b580      	push	{r7, lr}
 8014984:	b08a      	sub	sp, #40	@ 0x28
 8014986:	af02      	add	r7, sp, #8
 8014988:	60f8      	str	r0, [r7, #12]
 801498a:	60b9      	str	r1, [r7, #8]
 801498c:	4613      	mov	r3, r2
 801498e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d10d      	bne.n	80149b2 <xQueueGenericCreate+0x30>
	__asm volatile
 8014996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801499a:	b672      	cpsid	i
 801499c:	f383 8811 	msr	BASEPRI, r3
 80149a0:	f3bf 8f6f 	isb	sy
 80149a4:	f3bf 8f4f 	dsb	sy
 80149a8:	b662      	cpsie	i
 80149aa:	613b      	str	r3, [r7, #16]
}
 80149ac:	bf00      	nop
 80149ae:	bf00      	nop
 80149b0:	e7fd      	b.n	80149ae <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d102      	bne.n	80149be <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80149b8:	2300      	movs	r3, #0
 80149ba:	61fb      	str	r3, [r7, #28]
 80149bc:	e004      	b.n	80149c8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	fb02 f303 	mul.w	r3, r2, r3
 80149c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	3348      	adds	r3, #72	@ 0x48
 80149cc:	4618      	mov	r0, r3
 80149ce:	f001 fe43 	bl	8016658 <pvPortMalloc>
 80149d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d011      	beq.n	80149fe <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	3348      	adds	r3, #72	@ 0x48
 80149e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80149e4:	69bb      	ldr	r3, [r7, #24]
 80149e6:	2200      	movs	r2, #0
 80149e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80149ec:	79fa      	ldrb	r2, [r7, #7]
 80149ee:	69bb      	ldr	r3, [r7, #24]
 80149f0:	9300      	str	r3, [sp, #0]
 80149f2:	4613      	mov	r3, r2
 80149f4:	697a      	ldr	r2, [r7, #20]
 80149f6:	68b9      	ldr	r1, [r7, #8]
 80149f8:	68f8      	ldr	r0, [r7, #12]
 80149fa:	f000 f805 	bl	8014a08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80149fe:	69bb      	ldr	r3, [r7, #24]
	}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3720      	adds	r7, #32
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
 8014a14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d103      	bne.n	8014a24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	69ba      	ldr	r2, [r7, #24]
 8014a20:	601a      	str	r2, [r3, #0]
 8014a22:	e002      	b.n	8014a2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	68fa      	ldr	r2, [r7, #12]
 8014a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	68ba      	ldr	r2, [r7, #8]
 8014a34:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014a36:	2101      	movs	r1, #1
 8014a38:	69b8      	ldr	r0, [r7, #24]
 8014a3a:	f7ff feaf 	bl	801479c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014a3e:	bf00      	nop
 8014a40:	3710      	adds	r7, #16
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}
	...

08014a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b08e      	sub	sp, #56	@ 0x38
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
 8014a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014a56:	2300      	movs	r3, #0
 8014a58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d10d      	bne.n	8014a80 <xQueueGenericSend+0x38>
	__asm volatile
 8014a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a68:	b672      	cpsid	i
 8014a6a:	f383 8811 	msr	BASEPRI, r3
 8014a6e:	f3bf 8f6f 	isb	sy
 8014a72:	f3bf 8f4f 	dsb	sy
 8014a76:	b662      	cpsie	i
 8014a78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014a7a:	bf00      	nop
 8014a7c:	bf00      	nop
 8014a7e:	e7fd      	b.n	8014a7c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d103      	bne.n	8014a8e <xQueueGenericSend+0x46>
 8014a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d101      	bne.n	8014a92 <xQueueGenericSend+0x4a>
 8014a8e:	2301      	movs	r3, #1
 8014a90:	e000      	b.n	8014a94 <xQueueGenericSend+0x4c>
 8014a92:	2300      	movs	r3, #0
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d10d      	bne.n	8014ab4 <xQueueGenericSend+0x6c>
	__asm volatile
 8014a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a9c:	b672      	cpsid	i
 8014a9e:	f383 8811 	msr	BASEPRI, r3
 8014aa2:	f3bf 8f6f 	isb	sy
 8014aa6:	f3bf 8f4f 	dsb	sy
 8014aaa:	b662      	cpsie	i
 8014aac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014aae:	bf00      	nop
 8014ab0:	bf00      	nop
 8014ab2:	e7fd      	b.n	8014ab0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	2b02      	cmp	r3, #2
 8014ab8:	d103      	bne.n	8014ac2 <xQueueGenericSend+0x7a>
 8014aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	d101      	bne.n	8014ac6 <xQueueGenericSend+0x7e>
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	e000      	b.n	8014ac8 <xQueueGenericSend+0x80>
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d10d      	bne.n	8014ae8 <xQueueGenericSend+0xa0>
	__asm volatile
 8014acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ad0:	b672      	cpsid	i
 8014ad2:	f383 8811 	msr	BASEPRI, r3
 8014ad6:	f3bf 8f6f 	isb	sy
 8014ada:	f3bf 8f4f 	dsb	sy
 8014ade:	b662      	cpsie	i
 8014ae0:	623b      	str	r3, [r7, #32]
}
 8014ae2:	bf00      	nop
 8014ae4:	bf00      	nop
 8014ae6:	e7fd      	b.n	8014ae4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014ae8:	f001 fa68 	bl	8015fbc <xTaskGetSchedulerState>
 8014aec:	4603      	mov	r3, r0
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d102      	bne.n	8014af8 <xQueueGenericSend+0xb0>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d101      	bne.n	8014afc <xQueueGenericSend+0xb4>
 8014af8:	2301      	movs	r3, #1
 8014afa:	e000      	b.n	8014afe <xQueueGenericSend+0xb6>
 8014afc:	2300      	movs	r3, #0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10d      	bne.n	8014b1e <xQueueGenericSend+0xd6>
	__asm volatile
 8014b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b06:	b672      	cpsid	i
 8014b08:	f383 8811 	msr	BASEPRI, r3
 8014b0c:	f3bf 8f6f 	isb	sy
 8014b10:	f3bf 8f4f 	dsb	sy
 8014b14:	b662      	cpsie	i
 8014b16:	61fb      	str	r3, [r7, #28]
}
 8014b18:	bf00      	nop
 8014b1a:	bf00      	nop
 8014b1c:	e7fd      	b.n	8014b1a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014b1e:	f001 fc6d 	bl	80163fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d302      	bcc.n	8014b34 <xQueueGenericSend+0xec>
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	2b02      	cmp	r3, #2
 8014b32:	d129      	bne.n	8014b88 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014b34:	683a      	ldr	r2, [r7, #0]
 8014b36:	68b9      	ldr	r1, [r7, #8]
 8014b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014b3a:	f000 fae5 	bl	8015108 <prvCopyDataToQueue>
 8014b3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d010      	beq.n	8014b6a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4a:	3324      	adds	r3, #36	@ 0x24
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f001 f86b 	bl	8015c28 <xTaskRemoveFromEventList>
 8014b52:	4603      	mov	r3, r0
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d013      	beq.n	8014b80 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014b58:	4b3f      	ldr	r3, [pc, #252]	@ (8014c58 <xQueueGenericSend+0x210>)
 8014b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b5e:	601a      	str	r2, [r3, #0]
 8014b60:	f3bf 8f4f 	dsb	sy
 8014b64:	f3bf 8f6f 	isb	sy
 8014b68:	e00a      	b.n	8014b80 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d007      	beq.n	8014b80 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014b70:	4b39      	ldr	r3, [pc, #228]	@ (8014c58 <xQueueGenericSend+0x210>)
 8014b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b76:	601a      	str	r2, [r3, #0]
 8014b78:	f3bf 8f4f 	dsb	sy
 8014b7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014b80:	f001 fc72 	bl	8016468 <vPortExitCritical>
				return pdPASS;
 8014b84:	2301      	movs	r3, #1
 8014b86:	e063      	b.n	8014c50 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d103      	bne.n	8014b96 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014b8e:	f001 fc6b 	bl	8016468 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014b92:	2300      	movs	r3, #0
 8014b94:	e05c      	b.n	8014c50 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d106      	bne.n	8014baa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014b9c:	f107 0314 	add.w	r3, r7, #20
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f001 f8a7 	bl	8015cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014baa:	f001 fc5d 	bl	8016468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014bae:	f000 fe03 	bl	80157b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014bb2:	f001 fc23 	bl	80163fc <vPortEnterCritical>
 8014bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014bbc:	b25b      	sxtb	r3, r3
 8014bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc2:	d103      	bne.n	8014bcc <xQueueGenericSend+0x184>
 8014bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014bd2:	b25b      	sxtb	r3, r3
 8014bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bd8:	d103      	bne.n	8014be2 <xQueueGenericSend+0x19a>
 8014bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bdc:	2200      	movs	r2, #0
 8014bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014be2:	f001 fc41 	bl	8016468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014be6:	1d3a      	adds	r2, r7, #4
 8014be8:	f107 0314 	add.w	r3, r7, #20
 8014bec:	4611      	mov	r1, r2
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f001 f896 	bl	8015d20 <xTaskCheckForTimeOut>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d124      	bne.n	8014c44 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014bfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014bfc:	f000 fb7c 	bl	80152f8 <prvIsQueueFull>
 8014c00:	4603      	mov	r3, r0
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d018      	beq.n	8014c38 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c08:	3310      	adds	r3, #16
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	4611      	mov	r1, r2
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f000 ffe2 	bl	8015bd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c16:	f000 fb07 	bl	8015228 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014c1a:	f000 fddb 	bl	80157d4 <xTaskResumeAll>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	f47f af7c 	bne.w	8014b1e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8014c26:	4b0c      	ldr	r3, [pc, #48]	@ (8014c58 <xQueueGenericSend+0x210>)
 8014c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c2c:	601a      	str	r2, [r3, #0]
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	f3bf 8f6f 	isb	sy
 8014c36:	e772      	b.n	8014b1e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c3a:	f000 faf5 	bl	8015228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014c3e:	f000 fdc9 	bl	80157d4 <xTaskResumeAll>
 8014c42:	e76c      	b.n	8014b1e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c46:	f000 faef 	bl	8015228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014c4a:	f000 fdc3 	bl	80157d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014c4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3738      	adds	r7, #56	@ 0x38
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}
 8014c58:	e000ed04 	.word	0xe000ed04

08014c5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b08e      	sub	sp, #56	@ 0x38
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	607a      	str	r2, [r7, #4]
 8014c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d10d      	bne.n	8014c90 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8014c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c78:	b672      	cpsid	i
 8014c7a:	f383 8811 	msr	BASEPRI, r3
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	b662      	cpsie	i
 8014c88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014c8a:	bf00      	nop
 8014c8c:	bf00      	nop
 8014c8e:	e7fd      	b.n	8014c8c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d103      	bne.n	8014c9e <xQueueGenericSendFromISR+0x42>
 8014c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d101      	bne.n	8014ca2 <xQueueGenericSendFromISR+0x46>
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	e000      	b.n	8014ca4 <xQueueGenericSendFromISR+0x48>
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d10d      	bne.n	8014cc4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8014ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cac:	b672      	cpsid	i
 8014cae:	f383 8811 	msr	BASEPRI, r3
 8014cb2:	f3bf 8f6f 	isb	sy
 8014cb6:	f3bf 8f4f 	dsb	sy
 8014cba:	b662      	cpsie	i
 8014cbc:	623b      	str	r3, [r7, #32]
}
 8014cbe:	bf00      	nop
 8014cc0:	bf00      	nop
 8014cc2:	e7fd      	b.n	8014cc0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	2b02      	cmp	r3, #2
 8014cc8:	d103      	bne.n	8014cd2 <xQueueGenericSendFromISR+0x76>
 8014cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d101      	bne.n	8014cd6 <xQueueGenericSendFromISR+0x7a>
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	e000      	b.n	8014cd8 <xQueueGenericSendFromISR+0x7c>
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10d      	bne.n	8014cf8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8014cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ce0:	b672      	cpsid	i
 8014ce2:	f383 8811 	msr	BASEPRI, r3
 8014ce6:	f3bf 8f6f 	isb	sy
 8014cea:	f3bf 8f4f 	dsb	sy
 8014cee:	b662      	cpsie	i
 8014cf0:	61fb      	str	r3, [r7, #28]
}
 8014cf2:	bf00      	nop
 8014cf4:	bf00      	nop
 8014cf6:	e7fd      	b.n	8014cf4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014cf8:	f001 fc68 	bl	80165cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8014d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d04:	b672      	cpsid	i
 8014d06:	f383 8811 	msr	BASEPRI, r3
 8014d0a:	f3bf 8f6f 	isb	sy
 8014d0e:	f3bf 8f4f 	dsb	sy
 8014d12:	b662      	cpsie	i
 8014d14:	61ba      	str	r2, [r7, #24]
 8014d16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014d18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d302      	bcc.n	8014d2e <xQueueGenericSendFromISR+0xd2>
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	2b02      	cmp	r3, #2
 8014d2c:	d12c      	bne.n	8014d88 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014d38:	683a      	ldr	r2, [r7, #0]
 8014d3a:	68b9      	ldr	r1, [r7, #8]
 8014d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d3e:	f000 f9e3 	bl	8015108 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014d42:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d4a:	d112      	bne.n	8014d72 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d016      	beq.n	8014d82 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d56:	3324      	adds	r3, #36	@ 0x24
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f000 ff65 	bl	8015c28 <xTaskRemoveFromEventList>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d00e      	beq.n	8014d82 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00b      	beq.n	8014d82 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	601a      	str	r2, [r3, #0]
 8014d70:	e007      	b.n	8014d82 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014d72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014d76:	3301      	adds	r3, #1
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	b25a      	sxtb	r2, r3
 8014d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014d82:	2301      	movs	r3, #1
 8014d84:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8014d86:	e001      	b.n	8014d8c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014d88:	2300      	movs	r3, #0
 8014d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3738      	adds	r7, #56	@ 0x38
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
	...

08014da4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b08c      	sub	sp, #48	@ 0x30
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014db0:	2300      	movs	r3, #0
 8014db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d10d      	bne.n	8014dda <xQueueReceive+0x36>
	__asm volatile
 8014dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc2:	b672      	cpsid	i
 8014dc4:	f383 8811 	msr	BASEPRI, r3
 8014dc8:	f3bf 8f6f 	isb	sy
 8014dcc:	f3bf 8f4f 	dsb	sy
 8014dd0:	b662      	cpsie	i
 8014dd2:	623b      	str	r3, [r7, #32]
}
 8014dd4:	bf00      	nop
 8014dd6:	bf00      	nop
 8014dd8:	e7fd      	b.n	8014dd6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d103      	bne.n	8014de8 <xQueueReceive+0x44>
 8014de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d101      	bne.n	8014dec <xQueueReceive+0x48>
 8014de8:	2301      	movs	r3, #1
 8014dea:	e000      	b.n	8014dee <xQueueReceive+0x4a>
 8014dec:	2300      	movs	r3, #0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d10d      	bne.n	8014e0e <xQueueReceive+0x6a>
	__asm volatile
 8014df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014df6:	b672      	cpsid	i
 8014df8:	f383 8811 	msr	BASEPRI, r3
 8014dfc:	f3bf 8f6f 	isb	sy
 8014e00:	f3bf 8f4f 	dsb	sy
 8014e04:	b662      	cpsie	i
 8014e06:	61fb      	str	r3, [r7, #28]
}
 8014e08:	bf00      	nop
 8014e0a:	bf00      	nop
 8014e0c:	e7fd      	b.n	8014e0a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014e0e:	f001 f8d5 	bl	8015fbc <xTaskGetSchedulerState>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d102      	bne.n	8014e1e <xQueueReceive+0x7a>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d101      	bne.n	8014e22 <xQueueReceive+0x7e>
 8014e1e:	2301      	movs	r3, #1
 8014e20:	e000      	b.n	8014e24 <xQueueReceive+0x80>
 8014e22:	2300      	movs	r3, #0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d10d      	bne.n	8014e44 <xQueueReceive+0xa0>
	__asm volatile
 8014e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e2c:	b672      	cpsid	i
 8014e2e:	f383 8811 	msr	BASEPRI, r3
 8014e32:	f3bf 8f6f 	isb	sy
 8014e36:	f3bf 8f4f 	dsb	sy
 8014e3a:	b662      	cpsie	i
 8014e3c:	61bb      	str	r3, [r7, #24]
}
 8014e3e:	bf00      	nop
 8014e40:	bf00      	nop
 8014e42:	e7fd      	b.n	8014e40 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014e44:	f001 fada 	bl	80163fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d01f      	beq.n	8014e94 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014e54:	68b9      	ldr	r1, [r7, #8]
 8014e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014e58:	f000 f9c0 	bl	80151dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e5e:	1e5a      	subs	r2, r3, #1
 8014e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e66:	691b      	ldr	r3, [r3, #16]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00f      	beq.n	8014e8c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e6e:	3310      	adds	r3, #16
 8014e70:	4618      	mov	r0, r3
 8014e72:	f000 fed9 	bl	8015c28 <xTaskRemoveFromEventList>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d007      	beq.n	8014e8c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8014f70 <xQueueReceive+0x1cc>)
 8014e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e82:	601a      	str	r2, [r3, #0]
 8014e84:	f3bf 8f4f 	dsb	sy
 8014e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e8c:	f001 faec 	bl	8016468 <vPortExitCritical>
				return pdPASS;
 8014e90:	2301      	movs	r3, #1
 8014e92:	e069      	b.n	8014f68 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d103      	bne.n	8014ea2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e9a:	f001 fae5 	bl	8016468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	e062      	b.n	8014f68 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d106      	bne.n	8014eb6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014ea8:	f107 0310 	add.w	r3, r7, #16
 8014eac:	4618      	mov	r0, r3
 8014eae:	f000 ff21 	bl	8015cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014eb6:	f001 fad7 	bl	8016468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014eba:	f000 fc7d 	bl	80157b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ebe:	f001 fa9d 	bl	80163fc <vPortEnterCritical>
 8014ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014ec8:	b25b      	sxtb	r3, r3
 8014eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ece:	d103      	bne.n	8014ed8 <xQueueReceive+0x134>
 8014ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014ede:	b25b      	sxtb	r3, r3
 8014ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee4:	d103      	bne.n	8014eee <xQueueReceive+0x14a>
 8014ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ee8:	2200      	movs	r2, #0
 8014eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014eee:	f001 fabb 	bl	8016468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014ef2:	1d3a      	adds	r2, r7, #4
 8014ef4:	f107 0310 	add.w	r3, r7, #16
 8014ef8:	4611      	mov	r1, r2
 8014efa:	4618      	mov	r0, r3
 8014efc:	f000 ff10 	bl	8015d20 <xTaskCheckForTimeOut>
 8014f00:	4603      	mov	r3, r0
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d123      	bne.n	8014f4e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f08:	f000 f9e0 	bl	80152cc <prvIsQueueEmpty>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d017      	beq.n	8014f42 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f14:	3324      	adds	r3, #36	@ 0x24
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	4611      	mov	r1, r2
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f000 fe5c 	bl	8015bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f22:	f000 f981 	bl	8015228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014f26:	f000 fc55 	bl	80157d4 <xTaskResumeAll>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d189      	bne.n	8014e44 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8014f30:	4b0f      	ldr	r3, [pc, #60]	@ (8014f70 <xQueueReceive+0x1cc>)
 8014f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f36:	601a      	str	r2, [r3, #0]
 8014f38:	f3bf 8f4f 	dsb	sy
 8014f3c:	f3bf 8f6f 	isb	sy
 8014f40:	e780      	b.n	8014e44 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f44:	f000 f970 	bl	8015228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f48:	f000 fc44 	bl	80157d4 <xTaskResumeAll>
 8014f4c:	e77a      	b.n	8014e44 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f50:	f000 f96a 	bl	8015228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f54:	f000 fc3e 	bl	80157d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f5a:	f000 f9b7 	bl	80152cc <prvIsQueueEmpty>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	f43f af6f 	beq.w	8014e44 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	3730      	adds	r7, #48	@ 0x30
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	e000ed04 	.word	0xe000ed04

08014f74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b08e      	sub	sp, #56	@ 0x38
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d10d      	bne.n	8014fa6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8014f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f8e:	b672      	cpsid	i
 8014f90:	f383 8811 	msr	BASEPRI, r3
 8014f94:	f3bf 8f6f 	isb	sy
 8014f98:	f3bf 8f4f 	dsb	sy
 8014f9c:	b662      	cpsie	i
 8014f9e:	623b      	str	r3, [r7, #32]
}
 8014fa0:	bf00      	nop
 8014fa2:	bf00      	nop
 8014fa4:	e7fd      	b.n	8014fa2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d103      	bne.n	8014fb4 <xQueueReceiveFromISR+0x40>
 8014fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d101      	bne.n	8014fb8 <xQueueReceiveFromISR+0x44>
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e000      	b.n	8014fba <xQueueReceiveFromISR+0x46>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d10d      	bne.n	8014fda <xQueueReceiveFromISR+0x66>
	__asm volatile
 8014fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc2:	b672      	cpsid	i
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	b662      	cpsie	i
 8014fd2:	61fb      	str	r3, [r7, #28]
}
 8014fd4:	bf00      	nop
 8014fd6:	bf00      	nop
 8014fd8:	e7fd      	b.n	8014fd6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014fda:	f001 faf7 	bl	80165cc <vPortValidateInterruptPriority>
	__asm volatile
 8014fde:	f3ef 8211 	mrs	r2, BASEPRI
 8014fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fe6:	b672      	cpsid	i
 8014fe8:	f383 8811 	msr	BASEPRI, r3
 8014fec:	f3bf 8f6f 	isb	sy
 8014ff0:	f3bf 8f4f 	dsb	sy
 8014ff4:	b662      	cpsie	i
 8014ff6:	61ba      	str	r2, [r7, #24]
 8014ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015002:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015006:	2b00      	cmp	r3, #0
 8015008:	d02f      	beq.n	801506a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801500c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015014:	68b9      	ldr	r1, [r7, #8]
 8015016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015018:	f000 f8e0 	bl	80151dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801501e:	1e5a      	subs	r2, r3, #1
 8015020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015022:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015024:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801502c:	d112      	bne.n	8015054 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015030:	691b      	ldr	r3, [r3, #16]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d016      	beq.n	8015064 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015038:	3310      	adds	r3, #16
 801503a:	4618      	mov	r0, r3
 801503c:	f000 fdf4 	bl	8015c28 <xTaskRemoveFromEventList>
 8015040:	4603      	mov	r3, r0
 8015042:	2b00      	cmp	r3, #0
 8015044:	d00e      	beq.n	8015064 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d00b      	beq.n	8015064 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2201      	movs	r2, #1
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	e007      	b.n	8015064 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015058:	3301      	adds	r3, #1
 801505a:	b2db      	uxtb	r3, r3
 801505c:	b25a      	sxtb	r2, r3
 801505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015064:	2301      	movs	r3, #1
 8015066:	637b      	str	r3, [r7, #52]	@ 0x34
 8015068:	e001      	b.n	801506e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801506a:	2300      	movs	r3, #0
 801506c:	637b      	str	r3, [r7, #52]	@ 0x34
 801506e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	f383 8811 	msr	BASEPRI, r3
}
 8015078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801507c:	4618      	mov	r0, r3
 801507e:	3738      	adds	r7, #56	@ 0x38
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d10d      	bne.n	80150ae <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015096:	b672      	cpsid	i
 8015098:	f383 8811 	msr	BASEPRI, r3
 801509c:	f3bf 8f6f 	isb	sy
 80150a0:	f3bf 8f4f 	dsb	sy
 80150a4:	b662      	cpsie	i
 80150a6:	60bb      	str	r3, [r7, #8]
}
 80150a8:	bf00      	nop
 80150aa:	bf00      	nop
 80150ac:	e7fd      	b.n	80150aa <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80150ae:	f001 f9a5 	bl	80163fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80150b8:	f001 f9d6 	bl	8016468 <vPortExitCritical>

	return uxReturn;
 80150bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80150be:	4618      	mov	r0, r3
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80150c6:	b480      	push	{r7}
 80150c8:	b087      	sub	sp, #28
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d10d      	bne.n	80150f4 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80150d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150dc:	b672      	cpsid	i
 80150de:	f383 8811 	msr	BASEPRI, r3
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	f3bf 8f4f 	dsb	sy
 80150ea:	b662      	cpsie	i
 80150ec:	60fb      	str	r3, [r7, #12]
}
 80150ee:	bf00      	nop
 80150f0:	bf00      	nop
 80150f2:	e7fd      	b.n	80150f0 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80150fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80150fc:	4618      	mov	r0, r3
 80150fe:	371c      	adds	r7, #28
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr

08015108 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b086      	sub	sp, #24
 801510c:	af00      	add	r7, sp, #0
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015114:	2300      	movs	r3, #0
 8015116:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801511c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015122:	2b00      	cmp	r3, #0
 8015124:	d10d      	bne.n	8015142 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d14d      	bne.n	80151ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	689b      	ldr	r3, [r3, #8]
 8015132:	4618      	mov	r0, r3
 8015134:	f000 ff60 	bl	8015ff8 <xTaskPriorityDisinherit>
 8015138:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2200      	movs	r2, #0
 801513e:	609a      	str	r2, [r3, #8]
 8015140:	e043      	b.n	80151ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d119      	bne.n	801517c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	6858      	ldr	r0, [r3, #4]
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015150:	461a      	mov	r2, r3
 8015152:	68b9      	ldr	r1, [r7, #8]
 8015154:	f002 f81d 	bl	8017192 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	685a      	ldr	r2, [r3, #4]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015160:	441a      	add	r2, r3
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	685a      	ldr	r2, [r3, #4]
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	689b      	ldr	r3, [r3, #8]
 801516e:	429a      	cmp	r2, r3
 8015170:	d32b      	bcc.n	80151ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	605a      	str	r2, [r3, #4]
 801517a:	e026      	b.n	80151ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	68d8      	ldr	r0, [r3, #12]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015184:	461a      	mov	r2, r3
 8015186:	68b9      	ldr	r1, [r7, #8]
 8015188:	f002 f803 	bl	8017192 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	68da      	ldr	r2, [r3, #12]
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015194:	425b      	negs	r3, r3
 8015196:	441a      	add	r2, r3
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	68da      	ldr	r2, [r3, #12]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d207      	bcs.n	80151b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	689a      	ldr	r2, [r3, #8]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151b0:	425b      	negs	r3, r3
 80151b2:	441a      	add	r2, r3
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2b02      	cmp	r3, #2
 80151bc:	d105      	bne.n	80151ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d002      	beq.n	80151ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	3b01      	subs	r3, #1
 80151c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	1c5a      	adds	r2, r3, #1
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80151d2:	697b      	ldr	r3, [r7, #20]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3718      	adds	r7, #24
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d018      	beq.n	8015220 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	68da      	ldr	r2, [r3, #12]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151f6:	441a      	add	r2, r3
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	68da      	ldr	r2, [r3, #12]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	689b      	ldr	r3, [r3, #8]
 8015204:	429a      	cmp	r2, r3
 8015206:	d303      	bcc.n	8015210 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	68d9      	ldr	r1, [r3, #12]
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015218:	461a      	mov	r2, r3
 801521a:	6838      	ldr	r0, [r7, #0]
 801521c:	f001 ffb9 	bl	8017192 <memcpy>
	}
}
 8015220:	bf00      	nop
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015230:	f001 f8e4 	bl	80163fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801523a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801523c:	e011      	b.n	8015262 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015242:	2b00      	cmp	r3, #0
 8015244:	d012      	beq.n	801526c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	3324      	adds	r3, #36	@ 0x24
 801524a:	4618      	mov	r0, r3
 801524c:	f000 fcec 	bl	8015c28 <xTaskRemoveFromEventList>
 8015250:	4603      	mov	r3, r0
 8015252:	2b00      	cmp	r3, #0
 8015254:	d001      	beq.n	801525a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015256:	f000 fdcb 	bl	8015df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801525a:	7bfb      	ldrb	r3, [r7, #15]
 801525c:	3b01      	subs	r3, #1
 801525e:	b2db      	uxtb	r3, r3
 8015260:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015266:	2b00      	cmp	r3, #0
 8015268:	dce9      	bgt.n	801523e <prvUnlockQueue+0x16>
 801526a:	e000      	b.n	801526e <prvUnlockQueue+0x46>
					break;
 801526c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	22ff      	movs	r2, #255	@ 0xff
 8015272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015276:	f001 f8f7 	bl	8016468 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801527a:	f001 f8bf 	bl	80163fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015284:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015286:	e011      	b.n	80152ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	691b      	ldr	r3, [r3, #16]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d012      	beq.n	80152b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	3310      	adds	r3, #16
 8015294:	4618      	mov	r0, r3
 8015296:	f000 fcc7 	bl	8015c28 <xTaskRemoveFromEventList>
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	d001      	beq.n	80152a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80152a0:	f000 fda6 	bl	8015df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80152a4:	7bbb      	ldrb	r3, [r7, #14]
 80152a6:	3b01      	subs	r3, #1
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80152ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	dce9      	bgt.n	8015288 <prvUnlockQueue+0x60>
 80152b4:	e000      	b.n	80152b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80152b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	22ff      	movs	r2, #255	@ 0xff
 80152bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80152c0:	f001 f8d2 	bl	8016468 <vPortExitCritical>
}
 80152c4:	bf00      	nop
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80152d4:	f001 f892 	bl	80163fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d102      	bne.n	80152e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80152e0:	2301      	movs	r3, #1
 80152e2:	60fb      	str	r3, [r7, #12]
 80152e4:	e001      	b.n	80152ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80152e6:	2300      	movs	r3, #0
 80152e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80152ea:	f001 f8bd 	bl	8016468 <vPortExitCritical>

	return xReturn;
 80152ee:	68fb      	ldr	r3, [r7, #12]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3710      	adds	r7, #16
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015300:	f001 f87c 	bl	80163fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801530c:	429a      	cmp	r2, r3
 801530e:	d102      	bne.n	8015316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015310:	2301      	movs	r3, #1
 8015312:	60fb      	str	r3, [r7, #12]
 8015314:	e001      	b.n	801531a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015316:	2300      	movs	r3, #0
 8015318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801531a:	f001 f8a5 	bl	8016468 <vPortExitCritical>

	return xReturn;
 801531e:	68fb      	ldr	r3, [r7, #12]
}
 8015320:	4618      	mov	r0, r3
 8015322:	3710      	adds	r7, #16
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08e      	sub	sp, #56	@ 0x38
 801532c:	af04      	add	r7, sp, #16
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015338:	2b00      	cmp	r3, #0
 801533a:	d10d      	bne.n	8015358 <xTaskCreateStatic+0x30>
	__asm volatile
 801533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015340:	b672      	cpsid	i
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	b662      	cpsie	i
 8015350:	623b      	str	r3, [r7, #32]
}
 8015352:	bf00      	nop
 8015354:	bf00      	nop
 8015356:	e7fd      	b.n	8015354 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10d      	bne.n	801537a <xTaskCreateStatic+0x52>
	__asm volatile
 801535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015362:	b672      	cpsid	i
 8015364:	f383 8811 	msr	BASEPRI, r3
 8015368:	f3bf 8f6f 	isb	sy
 801536c:	f3bf 8f4f 	dsb	sy
 8015370:	b662      	cpsie	i
 8015372:	61fb      	str	r3, [r7, #28]
}
 8015374:	bf00      	nop
 8015376:	bf00      	nop
 8015378:	e7fd      	b.n	8015376 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801537a:	2358      	movs	r3, #88	@ 0x58
 801537c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	2b58      	cmp	r3, #88	@ 0x58
 8015382:	d00d      	beq.n	80153a0 <xTaskCreateStatic+0x78>
	__asm volatile
 8015384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015388:	b672      	cpsid	i
 801538a:	f383 8811 	msr	BASEPRI, r3
 801538e:	f3bf 8f6f 	isb	sy
 8015392:	f3bf 8f4f 	dsb	sy
 8015396:	b662      	cpsie	i
 8015398:	61bb      	str	r3, [r7, #24]
}
 801539a:	bf00      	nop
 801539c:	bf00      	nop
 801539e:	e7fd      	b.n	801539c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80153a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80153a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d01e      	beq.n	80153e6 <xTaskCreateStatic+0xbe>
 80153a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d01b      	beq.n	80153e6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80153ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80153b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80153b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80153b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ba:	2202      	movs	r2, #2
 80153bc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80153c0:	2300      	movs	r3, #0
 80153c2:	9303      	str	r3, [sp, #12]
 80153c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153c6:	9302      	str	r3, [sp, #8]
 80153c8:	f107 0314 	add.w	r3, r7, #20
 80153cc:	9301      	str	r3, [sp, #4]
 80153ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	68b9      	ldr	r1, [r7, #8]
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f000 f850 	bl	801547e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80153de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80153e0:	f000 f8e2 	bl	80155a8 <prvAddNewTaskToReadyList>
 80153e4:	e001      	b.n	80153ea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80153e6:	2300      	movs	r3, #0
 80153e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80153ea:	697b      	ldr	r3, [r7, #20]
	}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3728      	adds	r7, #40	@ 0x28
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08c      	sub	sp, #48	@ 0x30
 80153f8:	af04      	add	r7, sp, #16
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	603b      	str	r3, [r7, #0]
 8015400:	4613      	mov	r3, r2
 8015402:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015404:	88fb      	ldrh	r3, [r7, #6]
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	4618      	mov	r0, r3
 801540a:	f001 f925 	bl	8016658 <pvPortMalloc>
 801540e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d00e      	beq.n	8015434 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015416:	2058      	movs	r0, #88	@ 0x58
 8015418:	f001 f91e 	bl	8016658 <pvPortMalloc>
 801541c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801541e:	69fb      	ldr	r3, [r7, #28]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d003      	beq.n	801542c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	697a      	ldr	r2, [r7, #20]
 8015428:	631a      	str	r2, [r3, #48]	@ 0x30
 801542a:	e005      	b.n	8015438 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801542c:	6978      	ldr	r0, [r7, #20]
 801542e:	f001 f9e5 	bl	80167fc <vPortFree>
 8015432:	e001      	b.n	8015438 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015434:	2300      	movs	r3, #0
 8015436:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015438:	69fb      	ldr	r3, [r7, #28]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d017      	beq.n	801546e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	2200      	movs	r2, #0
 8015442:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015446:	88fa      	ldrh	r2, [r7, #6]
 8015448:	2300      	movs	r3, #0
 801544a:	9303      	str	r3, [sp, #12]
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	9302      	str	r3, [sp, #8]
 8015450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015452:	9301      	str	r3, [sp, #4]
 8015454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	68b9      	ldr	r1, [r7, #8]
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f000 f80e 	bl	801547e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015462:	69f8      	ldr	r0, [r7, #28]
 8015464:	f000 f8a0 	bl	80155a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015468:	2301      	movs	r3, #1
 801546a:	61bb      	str	r3, [r7, #24]
 801546c:	e002      	b.n	8015474 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801546e:	f04f 33ff 	mov.w	r3, #4294967295
 8015472:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015474:	69bb      	ldr	r3, [r7, #24]
	}
 8015476:	4618      	mov	r0, r3
 8015478:	3720      	adds	r7, #32
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}

0801547e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801547e:	b580      	push	{r7, lr}
 8015480:	b088      	sub	sp, #32
 8015482:	af00      	add	r7, sp, #0
 8015484:	60f8      	str	r0, [r7, #12]
 8015486:	60b9      	str	r1, [r7, #8]
 8015488:	607a      	str	r2, [r7, #4]
 801548a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801548e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	009b      	lsls	r3, r3, #2
 8015494:	461a      	mov	r2, r3
 8015496:	21a5      	movs	r1, #165	@ 0xa5
 8015498:	f001 fdc6 	bl	8017028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80154a0:	6879      	ldr	r1, [r7, #4]
 80154a2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80154a6:	440b      	add	r3, r1
 80154a8:	009b      	lsls	r3, r3, #2
 80154aa:	4413      	add	r3, r2
 80154ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	f023 0307 	bic.w	r3, r3, #7
 80154b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	f003 0307 	and.w	r3, r3, #7
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d00d      	beq.n	80154dc <prvInitialiseNewTask+0x5e>
	__asm volatile
 80154c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154c4:	b672      	cpsid	i
 80154c6:	f383 8811 	msr	BASEPRI, r3
 80154ca:	f3bf 8f6f 	isb	sy
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	b662      	cpsie	i
 80154d4:	617b      	str	r3, [r7, #20]
}
 80154d6:	bf00      	nop
 80154d8:	bf00      	nop
 80154da:	e7fd      	b.n	80154d8 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d01f      	beq.n	8015522 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80154e2:	2300      	movs	r3, #0
 80154e4:	61fb      	str	r3, [r7, #28]
 80154e6:	e012      	b.n	801550e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80154e8:	68ba      	ldr	r2, [r7, #8]
 80154ea:	69fb      	ldr	r3, [r7, #28]
 80154ec:	4413      	add	r3, r2
 80154ee:	7819      	ldrb	r1, [r3, #0]
 80154f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154f2:	69fb      	ldr	r3, [r7, #28]
 80154f4:	4413      	add	r3, r2
 80154f6:	3334      	adds	r3, #52	@ 0x34
 80154f8:	460a      	mov	r2, r1
 80154fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80154fc:	68ba      	ldr	r2, [r7, #8]
 80154fe:	69fb      	ldr	r3, [r7, #28]
 8015500:	4413      	add	r3, r2
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d006      	beq.n	8015516 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	3301      	adds	r3, #1
 801550c:	61fb      	str	r3, [r7, #28]
 801550e:	69fb      	ldr	r3, [r7, #28]
 8015510:	2b0f      	cmp	r3, #15
 8015512:	d9e9      	bls.n	80154e8 <prvInitialiseNewTask+0x6a>
 8015514:	e000      	b.n	8015518 <prvInitialiseNewTask+0x9a>
			{
				break;
 8015516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801551a:	2200      	movs	r2, #0
 801551c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015520:	e003      	b.n	801552a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015524:	2200      	movs	r2, #0
 8015526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801552c:	2b06      	cmp	r3, #6
 801552e:	d901      	bls.n	8015534 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015530:	2306      	movs	r3, #6
 8015532:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015538:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801553c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801553e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015542:	2200      	movs	r2, #0
 8015544:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015548:	3304      	adds	r3, #4
 801554a:	4618      	mov	r0, r3
 801554c:	f7ff f892 	bl	8014674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015552:	3318      	adds	r3, #24
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff f88d 	bl	8014674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801555c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801555e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015562:	f1c3 0207 	rsb	r2, r3, #7
 8015566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801556c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801556e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015572:	2200      	movs	r2, #0
 8015574:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015578:	2200      	movs	r2, #0
 801557a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801557e:	2200      	movs	r2, #0
 8015580:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015584:	683a      	ldr	r2, [r7, #0]
 8015586:	68f9      	ldr	r1, [r7, #12]
 8015588:	69b8      	ldr	r0, [r7, #24]
 801558a:	f000 fe27 	bl	80161dc <pxPortInitialiseStack>
 801558e:	4602      	mov	r2, r0
 8015590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015596:	2b00      	cmp	r3, #0
 8015598:	d002      	beq.n	80155a0 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801559c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801559e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80155a0:	bf00      	nop
 80155a2:	3720      	adds	r7, #32
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}

080155a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80155b0:	f000 ff24 	bl	80163fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80155b4:	4b2a      	ldr	r3, [pc, #168]	@ (8015660 <prvAddNewTaskToReadyList+0xb8>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	3301      	adds	r3, #1
 80155ba:	4a29      	ldr	r2, [pc, #164]	@ (8015660 <prvAddNewTaskToReadyList+0xb8>)
 80155bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80155be:	4b29      	ldr	r3, [pc, #164]	@ (8015664 <prvAddNewTaskToReadyList+0xbc>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d109      	bne.n	80155da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80155c6:	4a27      	ldr	r2, [pc, #156]	@ (8015664 <prvAddNewTaskToReadyList+0xbc>)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80155cc:	4b24      	ldr	r3, [pc, #144]	@ (8015660 <prvAddNewTaskToReadyList+0xb8>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	2b01      	cmp	r3, #1
 80155d2:	d110      	bne.n	80155f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80155d4:	f000 fc32 	bl	8015e3c <prvInitialiseTaskLists>
 80155d8:	e00d      	b.n	80155f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80155da:	4b23      	ldr	r3, [pc, #140]	@ (8015668 <prvAddNewTaskToReadyList+0xc0>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d109      	bne.n	80155f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80155e2:	4b20      	ldr	r3, [pc, #128]	@ (8015664 <prvAddNewTaskToReadyList+0xbc>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d802      	bhi.n	80155f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80155f0:	4a1c      	ldr	r2, [pc, #112]	@ (8015664 <prvAddNewTaskToReadyList+0xbc>)
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80155f6:	4b1d      	ldr	r3, [pc, #116]	@ (801566c <prvAddNewTaskToReadyList+0xc4>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	3301      	adds	r3, #1
 80155fc:	4a1b      	ldr	r2, [pc, #108]	@ (801566c <prvAddNewTaskToReadyList+0xc4>)
 80155fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015604:	2201      	movs	r2, #1
 8015606:	409a      	lsls	r2, r3
 8015608:	4b19      	ldr	r3, [pc, #100]	@ (8015670 <prvAddNewTaskToReadyList+0xc8>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4313      	orrs	r3, r2
 801560e:	4a18      	ldr	r2, [pc, #96]	@ (8015670 <prvAddNewTaskToReadyList+0xc8>)
 8015610:	6013      	str	r3, [r2, #0]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015616:	4613      	mov	r3, r2
 8015618:	009b      	lsls	r3, r3, #2
 801561a:	4413      	add	r3, r2
 801561c:	009b      	lsls	r3, r3, #2
 801561e:	4a15      	ldr	r2, [pc, #84]	@ (8015674 <prvAddNewTaskToReadyList+0xcc>)
 8015620:	441a      	add	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	3304      	adds	r3, #4
 8015626:	4619      	mov	r1, r3
 8015628:	4610      	mov	r0, r2
 801562a:	f7ff f830 	bl	801468e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801562e:	f000 ff1b 	bl	8016468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015632:	4b0d      	ldr	r3, [pc, #52]	@ (8015668 <prvAddNewTaskToReadyList+0xc0>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d00e      	beq.n	8015658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801563a:	4b0a      	ldr	r3, [pc, #40]	@ (8015664 <prvAddNewTaskToReadyList+0xbc>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015644:	429a      	cmp	r2, r3
 8015646:	d207      	bcs.n	8015658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015648:	4b0b      	ldr	r3, [pc, #44]	@ (8015678 <prvAddNewTaskToReadyList+0xd0>)
 801564a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801564e:	601a      	str	r2, [r3, #0]
 8015650:	f3bf 8f4f 	dsb	sy
 8015654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015658:	bf00      	nop
 801565a:	3708      	adds	r7, #8
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}
 8015660:	20001b18 	.word	0x20001b18
 8015664:	20001a18 	.word	0x20001a18
 8015668:	20001b24 	.word	0x20001b24
 801566c:	20001b34 	.word	0x20001b34
 8015670:	20001b20 	.word	0x20001b20
 8015674:	20001a1c 	.word	0x20001a1c
 8015678:	e000ed04 	.word	0xe000ed04

0801567c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015684:	2300      	movs	r3, #0
 8015686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d01a      	beq.n	80156c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801568e:	4b15      	ldr	r3, [pc, #84]	@ (80156e4 <vTaskDelay+0x68>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d00d      	beq.n	80156b2 <vTaskDelay+0x36>
	__asm volatile
 8015696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801569a:	b672      	cpsid	i
 801569c:	f383 8811 	msr	BASEPRI, r3
 80156a0:	f3bf 8f6f 	isb	sy
 80156a4:	f3bf 8f4f 	dsb	sy
 80156a8:	b662      	cpsie	i
 80156aa:	60bb      	str	r3, [r7, #8]
}
 80156ac:	bf00      	nop
 80156ae:	bf00      	nop
 80156b0:	e7fd      	b.n	80156ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80156b2:	f000 f881 	bl	80157b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80156b6:	2100      	movs	r1, #0
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f000 fd29 	bl	8016110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80156be:	f000 f889 	bl	80157d4 <xTaskResumeAll>
 80156c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d107      	bne.n	80156da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80156ca:	4b07      	ldr	r3, [pc, #28]	@ (80156e8 <vTaskDelay+0x6c>)
 80156cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	f3bf 8f4f 	dsb	sy
 80156d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80156da:	bf00      	nop
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	20001b40 	.word	0x20001b40
 80156e8:	e000ed04 	.word	0xe000ed04

080156ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b08a      	sub	sp, #40	@ 0x28
 80156f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80156f2:	2300      	movs	r3, #0
 80156f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80156f6:	2300      	movs	r3, #0
 80156f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80156fa:	463a      	mov	r2, r7
 80156fc:	1d39      	adds	r1, r7, #4
 80156fe:	f107 0308 	add.w	r3, r7, #8
 8015702:	4618      	mov	r0, r3
 8015704:	f7ec f9ee 	bl	8001ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015708:	6839      	ldr	r1, [r7, #0]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	68ba      	ldr	r2, [r7, #8]
 801570e:	9202      	str	r2, [sp, #8]
 8015710:	9301      	str	r3, [sp, #4]
 8015712:	2300      	movs	r3, #0
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	2300      	movs	r3, #0
 8015718:	460a      	mov	r2, r1
 801571a:	4921      	ldr	r1, [pc, #132]	@ (80157a0 <vTaskStartScheduler+0xb4>)
 801571c:	4821      	ldr	r0, [pc, #132]	@ (80157a4 <vTaskStartScheduler+0xb8>)
 801571e:	f7ff fe03 	bl	8015328 <xTaskCreateStatic>
 8015722:	4603      	mov	r3, r0
 8015724:	4a20      	ldr	r2, [pc, #128]	@ (80157a8 <vTaskStartScheduler+0xbc>)
 8015726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015728:	4b1f      	ldr	r3, [pc, #124]	@ (80157a8 <vTaskStartScheduler+0xbc>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d002      	beq.n	8015736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015730:	2301      	movs	r3, #1
 8015732:	617b      	str	r3, [r7, #20]
 8015734:	e001      	b.n	801573a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015736:	2300      	movs	r3, #0
 8015738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	2b01      	cmp	r3, #1
 801573e:	d118      	bne.n	8015772 <vTaskStartScheduler+0x86>
	__asm volatile
 8015740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015744:	b672      	cpsid	i
 8015746:	f383 8811 	msr	BASEPRI, r3
 801574a:	f3bf 8f6f 	isb	sy
 801574e:	f3bf 8f4f 	dsb	sy
 8015752:	b662      	cpsie	i
 8015754:	613b      	str	r3, [r7, #16]
}
 8015756:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015758:	4b14      	ldr	r3, [pc, #80]	@ (80157ac <vTaskStartScheduler+0xc0>)
 801575a:	f04f 32ff 	mov.w	r2, #4294967295
 801575e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015760:	4b13      	ldr	r3, [pc, #76]	@ (80157b0 <vTaskStartScheduler+0xc4>)
 8015762:	2201      	movs	r2, #1
 8015764:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015766:	4b13      	ldr	r3, [pc, #76]	@ (80157b4 <vTaskStartScheduler+0xc8>)
 8015768:	2200      	movs	r2, #0
 801576a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801576c:	f000 fdc8 	bl	8016300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015770:	e011      	b.n	8015796 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015778:	d10d      	bne.n	8015796 <vTaskStartScheduler+0xaa>
	__asm volatile
 801577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801577e:	b672      	cpsid	i
 8015780:	f383 8811 	msr	BASEPRI, r3
 8015784:	f3bf 8f6f 	isb	sy
 8015788:	f3bf 8f4f 	dsb	sy
 801578c:	b662      	cpsie	i
 801578e:	60fb      	str	r3, [r7, #12]
}
 8015790:	bf00      	nop
 8015792:	bf00      	nop
 8015794:	e7fd      	b.n	8015792 <vTaskStartScheduler+0xa6>
}
 8015796:	bf00      	nop
 8015798:	3718      	adds	r7, #24
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
 801579e:	bf00      	nop
 80157a0:	0801b35c 	.word	0x0801b35c
 80157a4:	08015e09 	.word	0x08015e09
 80157a8:	20001b3c 	.word	0x20001b3c
 80157ac:	20001b38 	.word	0x20001b38
 80157b0:	20001b24 	.word	0x20001b24
 80157b4:	20001b1c 	.word	0x20001b1c

080157b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80157b8:	b480      	push	{r7}
 80157ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80157bc:	4b04      	ldr	r3, [pc, #16]	@ (80157d0 <vTaskSuspendAll+0x18>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	3301      	adds	r3, #1
 80157c2:	4a03      	ldr	r2, [pc, #12]	@ (80157d0 <vTaskSuspendAll+0x18>)
 80157c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80157c6:	bf00      	nop
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr
 80157d0:	20001b40 	.word	0x20001b40

080157d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80157da:	2300      	movs	r3, #0
 80157dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80157de:	2300      	movs	r3, #0
 80157e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80157e2:	4b43      	ldr	r3, [pc, #268]	@ (80158f0 <xTaskResumeAll+0x11c>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d10d      	bne.n	8015806 <xTaskResumeAll+0x32>
	__asm volatile
 80157ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ee:	b672      	cpsid	i
 80157f0:	f383 8811 	msr	BASEPRI, r3
 80157f4:	f3bf 8f6f 	isb	sy
 80157f8:	f3bf 8f4f 	dsb	sy
 80157fc:	b662      	cpsie	i
 80157fe:	603b      	str	r3, [r7, #0]
}
 8015800:	bf00      	nop
 8015802:	bf00      	nop
 8015804:	e7fd      	b.n	8015802 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015806:	f000 fdf9 	bl	80163fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801580a:	4b39      	ldr	r3, [pc, #228]	@ (80158f0 <xTaskResumeAll+0x11c>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	3b01      	subs	r3, #1
 8015810:	4a37      	ldr	r2, [pc, #220]	@ (80158f0 <xTaskResumeAll+0x11c>)
 8015812:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015814:	4b36      	ldr	r3, [pc, #216]	@ (80158f0 <xTaskResumeAll+0x11c>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d161      	bne.n	80158e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801581c:	4b35      	ldr	r3, [pc, #212]	@ (80158f4 <xTaskResumeAll+0x120>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d05d      	beq.n	80158e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015824:	e02e      	b.n	8015884 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015826:	4b34      	ldr	r3, [pc, #208]	@ (80158f8 <xTaskResumeAll+0x124>)
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	3318      	adds	r3, #24
 8015832:	4618      	mov	r0, r3
 8015834:	f7fe ff88 	bl	8014748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	3304      	adds	r3, #4
 801583c:	4618      	mov	r0, r3
 801583e:	f7fe ff83 	bl	8014748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015846:	2201      	movs	r2, #1
 8015848:	409a      	lsls	r2, r3
 801584a:	4b2c      	ldr	r3, [pc, #176]	@ (80158fc <xTaskResumeAll+0x128>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	4313      	orrs	r3, r2
 8015850:	4a2a      	ldr	r2, [pc, #168]	@ (80158fc <xTaskResumeAll+0x128>)
 8015852:	6013      	str	r3, [r2, #0]
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015858:	4613      	mov	r3, r2
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	4413      	add	r3, r2
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	4a27      	ldr	r2, [pc, #156]	@ (8015900 <xTaskResumeAll+0x12c>)
 8015862:	441a      	add	r2, r3
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	3304      	adds	r3, #4
 8015868:	4619      	mov	r1, r3
 801586a:	4610      	mov	r0, r2
 801586c:	f7fe ff0f 	bl	801468e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015874:	4b23      	ldr	r3, [pc, #140]	@ (8015904 <xTaskResumeAll+0x130>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801587a:	429a      	cmp	r2, r3
 801587c:	d302      	bcc.n	8015884 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801587e:	4b22      	ldr	r3, [pc, #136]	@ (8015908 <xTaskResumeAll+0x134>)
 8015880:	2201      	movs	r2, #1
 8015882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015884:	4b1c      	ldr	r3, [pc, #112]	@ (80158f8 <xTaskResumeAll+0x124>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d1cc      	bne.n	8015826 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d001      	beq.n	8015896 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015892:	f000 fb73 	bl	8015f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015896:	4b1d      	ldr	r3, [pc, #116]	@ (801590c <xTaskResumeAll+0x138>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d010      	beq.n	80158c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80158a2:	f000 f859 	bl	8015958 <xTaskIncrementTick>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80158ac:	4b16      	ldr	r3, [pc, #88]	@ (8015908 <xTaskResumeAll+0x134>)
 80158ae:	2201      	movs	r2, #1
 80158b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	3b01      	subs	r3, #1
 80158b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d1f1      	bne.n	80158a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80158be:	4b13      	ldr	r3, [pc, #76]	@ (801590c <xTaskResumeAll+0x138>)
 80158c0:	2200      	movs	r2, #0
 80158c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80158c4:	4b10      	ldr	r3, [pc, #64]	@ (8015908 <xTaskResumeAll+0x134>)
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d009      	beq.n	80158e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80158cc:	2301      	movs	r3, #1
 80158ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80158d0:	4b0f      	ldr	r3, [pc, #60]	@ (8015910 <xTaskResumeAll+0x13c>)
 80158d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158d6:	601a      	str	r2, [r3, #0]
 80158d8:	f3bf 8f4f 	dsb	sy
 80158dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80158e0:	f000 fdc2 	bl	8016468 <vPortExitCritical>

	return xAlreadyYielded;
 80158e4:	68bb      	ldr	r3, [r7, #8]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	20001b40 	.word	0x20001b40
 80158f4:	20001b18 	.word	0x20001b18
 80158f8:	20001ad8 	.word	0x20001ad8
 80158fc:	20001b20 	.word	0x20001b20
 8015900:	20001a1c 	.word	0x20001a1c
 8015904:	20001a18 	.word	0x20001a18
 8015908:	20001b2c 	.word	0x20001b2c
 801590c:	20001b28 	.word	0x20001b28
 8015910:	e000ed04 	.word	0xe000ed04

08015914 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015914:	b480      	push	{r7}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801591a:	4b05      	ldr	r3, [pc, #20]	@ (8015930 <xTaskGetTickCount+0x1c>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015920:	687b      	ldr	r3, [r7, #4]
}
 8015922:	4618      	mov	r0, r3
 8015924:	370c      	adds	r7, #12
 8015926:	46bd      	mov	sp, r7
 8015928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop
 8015930:	20001b1c 	.word	0x20001b1c

08015934 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801593a:	f000 fe47 	bl	80165cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801593e:	2300      	movs	r3, #0
 8015940:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015942:	4b04      	ldr	r3, [pc, #16]	@ (8015954 <xTaskGetTickCountFromISR+0x20>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015948:	683b      	ldr	r3, [r7, #0]
}
 801594a:	4618      	mov	r0, r3
 801594c:	3708      	adds	r7, #8
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}
 8015952:	bf00      	nop
 8015954:	20001b1c 	.word	0x20001b1c

08015958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b086      	sub	sp, #24
 801595c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801595e:	2300      	movs	r3, #0
 8015960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015962:	4b50      	ldr	r3, [pc, #320]	@ (8015aa4 <xTaskIncrementTick+0x14c>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	2b00      	cmp	r3, #0
 8015968:	f040 808b 	bne.w	8015a82 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801596c:	4b4e      	ldr	r3, [pc, #312]	@ (8015aa8 <xTaskIncrementTick+0x150>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	3301      	adds	r3, #1
 8015972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015974:	4a4c      	ldr	r2, [pc, #304]	@ (8015aa8 <xTaskIncrementTick+0x150>)
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d123      	bne.n	80159c8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8015980:	4b4a      	ldr	r3, [pc, #296]	@ (8015aac <xTaskIncrementTick+0x154>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d00d      	beq.n	80159a6 <xTaskIncrementTick+0x4e>
	__asm volatile
 801598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801598e:	b672      	cpsid	i
 8015990:	f383 8811 	msr	BASEPRI, r3
 8015994:	f3bf 8f6f 	isb	sy
 8015998:	f3bf 8f4f 	dsb	sy
 801599c:	b662      	cpsie	i
 801599e:	603b      	str	r3, [r7, #0]
}
 80159a0:	bf00      	nop
 80159a2:	bf00      	nop
 80159a4:	e7fd      	b.n	80159a2 <xTaskIncrementTick+0x4a>
 80159a6:	4b41      	ldr	r3, [pc, #260]	@ (8015aac <xTaskIncrementTick+0x154>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	60fb      	str	r3, [r7, #12]
 80159ac:	4b40      	ldr	r3, [pc, #256]	@ (8015ab0 <xTaskIncrementTick+0x158>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	4a3e      	ldr	r2, [pc, #248]	@ (8015aac <xTaskIncrementTick+0x154>)
 80159b2:	6013      	str	r3, [r2, #0]
 80159b4:	4a3e      	ldr	r2, [pc, #248]	@ (8015ab0 <xTaskIncrementTick+0x158>)
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	6013      	str	r3, [r2, #0]
 80159ba:	4b3e      	ldr	r3, [pc, #248]	@ (8015ab4 <xTaskIncrementTick+0x15c>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	3301      	adds	r3, #1
 80159c0:	4a3c      	ldr	r2, [pc, #240]	@ (8015ab4 <xTaskIncrementTick+0x15c>)
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	f000 fada 	bl	8015f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80159c8:	4b3b      	ldr	r3, [pc, #236]	@ (8015ab8 <xTaskIncrementTick+0x160>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	693a      	ldr	r2, [r7, #16]
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d348      	bcc.n	8015a64 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159d2:	4b36      	ldr	r3, [pc, #216]	@ (8015aac <xTaskIncrementTick+0x154>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d104      	bne.n	80159e6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159dc:	4b36      	ldr	r3, [pc, #216]	@ (8015ab8 <xTaskIncrementTick+0x160>)
 80159de:	f04f 32ff 	mov.w	r2, #4294967295
 80159e2:	601a      	str	r2, [r3, #0]
					break;
 80159e4:	e03e      	b.n	8015a64 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159e6:	4b31      	ldr	r3, [pc, #196]	@ (8015aac <xTaskIncrementTick+0x154>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	68db      	ldr	r3, [r3, #12]
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80159f6:	693a      	ldr	r2, [r7, #16]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d203      	bcs.n	8015a06 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80159fe:	4a2e      	ldr	r2, [pc, #184]	@ (8015ab8 <xTaskIncrementTick+0x160>)
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015a04:	e02e      	b.n	8015a64 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	3304      	adds	r3, #4
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7fe fe9c 	bl	8014748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d004      	beq.n	8015a22 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	3318      	adds	r3, #24
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7fe fe93 	bl	8014748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a26:	2201      	movs	r2, #1
 8015a28:	409a      	lsls	r2, r3
 8015a2a:	4b24      	ldr	r3, [pc, #144]	@ (8015abc <xTaskIncrementTick+0x164>)
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	4a22      	ldr	r2, [pc, #136]	@ (8015abc <xTaskIncrementTick+0x164>)
 8015a32:	6013      	str	r3, [r2, #0]
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a38:	4613      	mov	r3, r2
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	4413      	add	r3, r2
 8015a3e:	009b      	lsls	r3, r3, #2
 8015a40:	4a1f      	ldr	r2, [pc, #124]	@ (8015ac0 <xTaskIncrementTick+0x168>)
 8015a42:	441a      	add	r2, r3
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	3304      	adds	r3, #4
 8015a48:	4619      	mov	r1, r3
 8015a4a:	4610      	mov	r0, r2
 8015a4c:	f7fe fe1f 	bl	801468e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a54:	4b1b      	ldr	r3, [pc, #108]	@ (8015ac4 <xTaskIncrementTick+0x16c>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d3b9      	bcc.n	80159d2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8015a5e:	2301      	movs	r3, #1
 8015a60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a62:	e7b6      	b.n	80159d2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015a64:	4b17      	ldr	r3, [pc, #92]	@ (8015ac4 <xTaskIncrementTick+0x16c>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a6a:	4915      	ldr	r1, [pc, #84]	@ (8015ac0 <xTaskIncrementTick+0x168>)
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	4413      	add	r3, r2
 8015a72:	009b      	lsls	r3, r3, #2
 8015a74:	440b      	add	r3, r1
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	2b01      	cmp	r3, #1
 8015a7a:	d907      	bls.n	8015a8c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	617b      	str	r3, [r7, #20]
 8015a80:	e004      	b.n	8015a8c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015a82:	4b11      	ldr	r3, [pc, #68]	@ (8015ac8 <xTaskIncrementTick+0x170>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	3301      	adds	r3, #1
 8015a88:	4a0f      	ldr	r2, [pc, #60]	@ (8015ac8 <xTaskIncrementTick+0x170>)
 8015a8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8015acc <xTaskIncrementTick+0x174>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d001      	beq.n	8015a98 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8015a94:	2301      	movs	r3, #1
 8015a96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015a98:	697b      	ldr	r3, [r7, #20]
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3718      	adds	r7, #24
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}
 8015aa2:	bf00      	nop
 8015aa4:	20001b40 	.word	0x20001b40
 8015aa8:	20001b1c 	.word	0x20001b1c
 8015aac:	20001ad0 	.word	0x20001ad0
 8015ab0:	20001ad4 	.word	0x20001ad4
 8015ab4:	20001b30 	.word	0x20001b30
 8015ab8:	20001b38 	.word	0x20001b38
 8015abc:	20001b20 	.word	0x20001b20
 8015ac0:	20001a1c 	.word	0x20001a1c
 8015ac4:	20001a18 	.word	0x20001a18
 8015ac8:	20001b28 	.word	0x20001b28
 8015acc:	20001b2c 	.word	0x20001b2c

08015ad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b088      	sub	sp, #32
 8015ad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8015bc4 <vTaskSwitchContext+0xf4>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d003      	beq.n	8015ae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015ade:	4b3a      	ldr	r3, [pc, #232]	@ (8015bc8 <vTaskSwitchContext+0xf8>)
 8015ae0:	2201      	movs	r2, #1
 8015ae2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015ae4:	e069      	b.n	8015bba <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8015ae6:	4b38      	ldr	r3, [pc, #224]	@ (8015bc8 <vTaskSwitchContext+0xf8>)
 8015ae8:	2200      	movs	r2, #0
 8015aea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8015aec:	4b37      	ldr	r3, [pc, #220]	@ (8015bcc <vTaskSwitchContext+0xfc>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015af2:	61fb      	str	r3, [r7, #28]
 8015af4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8015af8:	61bb      	str	r3, [r7, #24]
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	69ba      	ldr	r2, [r7, #24]
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d111      	bne.n	8015b28 <vTaskSwitchContext+0x58>
 8015b04:	69fb      	ldr	r3, [r7, #28]
 8015b06:	3304      	adds	r3, #4
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	69ba      	ldr	r2, [r7, #24]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d10b      	bne.n	8015b28 <vTaskSwitchContext+0x58>
 8015b10:	69fb      	ldr	r3, [r7, #28]
 8015b12:	3308      	adds	r3, #8
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	69ba      	ldr	r2, [r7, #24]
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d105      	bne.n	8015b28 <vTaskSwitchContext+0x58>
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	330c      	adds	r3, #12
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	69ba      	ldr	r2, [r7, #24]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d008      	beq.n	8015b3a <vTaskSwitchContext+0x6a>
 8015b28:	4b28      	ldr	r3, [pc, #160]	@ (8015bcc <vTaskSwitchContext+0xfc>)
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	4b27      	ldr	r3, [pc, #156]	@ (8015bcc <vTaskSwitchContext+0xfc>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	3334      	adds	r3, #52	@ 0x34
 8015b32:	4619      	mov	r1, r3
 8015b34:	4610      	mov	r0, r2
 8015b36:	f7eb ffc2 	bl	8001abe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b3a:	4b25      	ldr	r3, [pc, #148]	@ (8015bd0 <vTaskSwitchContext+0x100>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	fab3 f383 	clz	r3, r3
 8015b46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015b48:	7afb      	ldrb	r3, [r7, #11]
 8015b4a:	f1c3 031f 	rsb	r3, r3, #31
 8015b4e:	617b      	str	r3, [r7, #20]
 8015b50:	4920      	ldr	r1, [pc, #128]	@ (8015bd4 <vTaskSwitchContext+0x104>)
 8015b52:	697a      	ldr	r2, [r7, #20]
 8015b54:	4613      	mov	r3, r2
 8015b56:	009b      	lsls	r3, r3, #2
 8015b58:	4413      	add	r3, r2
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	440b      	add	r3, r1
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d10d      	bne.n	8015b80 <vTaskSwitchContext+0xb0>
	__asm volatile
 8015b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b68:	b672      	cpsid	i
 8015b6a:	f383 8811 	msr	BASEPRI, r3
 8015b6e:	f3bf 8f6f 	isb	sy
 8015b72:	f3bf 8f4f 	dsb	sy
 8015b76:	b662      	cpsie	i
 8015b78:	607b      	str	r3, [r7, #4]
}
 8015b7a:	bf00      	nop
 8015b7c:	bf00      	nop
 8015b7e:	e7fd      	b.n	8015b7c <vTaskSwitchContext+0xac>
 8015b80:	697a      	ldr	r2, [r7, #20]
 8015b82:	4613      	mov	r3, r2
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	4413      	add	r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	4a12      	ldr	r2, [pc, #72]	@ (8015bd4 <vTaskSwitchContext+0x104>)
 8015b8c:	4413      	add	r3, r2
 8015b8e:	613b      	str	r3, [r7, #16]
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	685a      	ldr	r2, [r3, #4]
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	605a      	str	r2, [r3, #4]
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	685a      	ldr	r2, [r3, #4]
 8015b9e:	693b      	ldr	r3, [r7, #16]
 8015ba0:	3308      	adds	r3, #8
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d104      	bne.n	8015bb0 <vTaskSwitchContext+0xe0>
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	685a      	ldr	r2, [r3, #4]
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	605a      	str	r2, [r3, #4]
 8015bb0:	693b      	ldr	r3, [r7, #16]
 8015bb2:	685b      	ldr	r3, [r3, #4]
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	4a05      	ldr	r2, [pc, #20]	@ (8015bcc <vTaskSwitchContext+0xfc>)
 8015bb8:	6013      	str	r3, [r2, #0]
}
 8015bba:	bf00      	nop
 8015bbc:	3720      	adds	r7, #32
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20001b40 	.word	0x20001b40
 8015bc8:	20001b2c 	.word	0x20001b2c
 8015bcc:	20001a18 	.word	0x20001a18
 8015bd0:	20001b20 	.word	0x20001b20
 8015bd4:	20001a1c 	.word	0x20001a1c

08015bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d10d      	bne.n	8015c04 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8015be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bec:	b672      	cpsid	i
 8015bee:	f383 8811 	msr	BASEPRI, r3
 8015bf2:	f3bf 8f6f 	isb	sy
 8015bf6:	f3bf 8f4f 	dsb	sy
 8015bfa:	b662      	cpsie	i
 8015bfc:	60fb      	str	r3, [r7, #12]
}
 8015bfe:	bf00      	nop
 8015c00:	bf00      	nop
 8015c02:	e7fd      	b.n	8015c00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015c04:	4b07      	ldr	r3, [pc, #28]	@ (8015c24 <vTaskPlaceOnEventList+0x4c>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	3318      	adds	r3, #24
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7fe fd62 	bl	80146d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015c12:	2101      	movs	r1, #1
 8015c14:	6838      	ldr	r0, [r7, #0]
 8015c16:	f000 fa7b 	bl	8016110 <prvAddCurrentTaskToDelayedList>
}
 8015c1a:	bf00      	nop
 8015c1c:	3710      	adds	r7, #16
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	20001a18 	.word	0x20001a18

08015c28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b086      	sub	sp, #24
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	68db      	ldr	r3, [r3, #12]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d10d      	bne.n	8015c5a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8015c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c42:	b672      	cpsid	i
 8015c44:	f383 8811 	msr	BASEPRI, r3
 8015c48:	f3bf 8f6f 	isb	sy
 8015c4c:	f3bf 8f4f 	dsb	sy
 8015c50:	b662      	cpsie	i
 8015c52:	60fb      	str	r3, [r7, #12]
}
 8015c54:	bf00      	nop
 8015c56:	bf00      	nop
 8015c58:	e7fd      	b.n	8015c56 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c5a:	693b      	ldr	r3, [r7, #16]
 8015c5c:	3318      	adds	r3, #24
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fe fd72 	bl	8014748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c64:	4b1d      	ldr	r3, [pc, #116]	@ (8015cdc <xTaskRemoveFromEventList+0xb4>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d11c      	bne.n	8015ca6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	3304      	adds	r3, #4
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7fe fd69 	bl	8014748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c7a:	2201      	movs	r2, #1
 8015c7c:	409a      	lsls	r2, r3
 8015c7e:	4b18      	ldr	r3, [pc, #96]	@ (8015ce0 <xTaskRemoveFromEventList+0xb8>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	4313      	orrs	r3, r2
 8015c84:	4a16      	ldr	r2, [pc, #88]	@ (8015ce0 <xTaskRemoveFromEventList+0xb8>)
 8015c86:	6013      	str	r3, [r2, #0]
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c8c:	4613      	mov	r3, r2
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	4413      	add	r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	4a13      	ldr	r2, [pc, #76]	@ (8015ce4 <xTaskRemoveFromEventList+0xbc>)
 8015c96:	441a      	add	r2, r3
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	3304      	adds	r3, #4
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	4610      	mov	r0, r2
 8015ca0:	f7fe fcf5 	bl	801468e <vListInsertEnd>
 8015ca4:	e005      	b.n	8015cb2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	3318      	adds	r3, #24
 8015caa:	4619      	mov	r1, r3
 8015cac:	480e      	ldr	r0, [pc, #56]	@ (8015ce8 <xTaskRemoveFromEventList+0xc0>)
 8015cae:	f7fe fcee 	bl	801468e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cec <xTaskRemoveFromEventList+0xc4>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cbc:	429a      	cmp	r2, r3
 8015cbe:	d905      	bls.n	8015ccc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8015cf0 <xTaskRemoveFromEventList+0xc8>)
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	601a      	str	r2, [r3, #0]
 8015cca:	e001      	b.n	8015cd0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015cd0:	697b      	ldr	r3, [r7, #20]
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3718      	adds	r7, #24
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}
 8015cda:	bf00      	nop
 8015cdc:	20001b40 	.word	0x20001b40
 8015ce0:	20001b20 	.word	0x20001b20
 8015ce4:	20001a1c 	.word	0x20001a1c
 8015ce8:	20001ad8 	.word	0x20001ad8
 8015cec:	20001a18 	.word	0x20001a18
 8015cf0:	20001b2c 	.word	0x20001b2c

08015cf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015cfc:	4b06      	ldr	r3, [pc, #24]	@ (8015d18 <vTaskInternalSetTimeOutState+0x24>)
 8015cfe:	681a      	ldr	r2, [r3, #0]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015d04:	4b05      	ldr	r3, [pc, #20]	@ (8015d1c <vTaskInternalSetTimeOutState+0x28>)
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	605a      	str	r2, [r3, #4]
}
 8015d0c:	bf00      	nop
 8015d0e:	370c      	adds	r7, #12
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr
 8015d18:	20001b30 	.word	0x20001b30
 8015d1c:	20001b1c 	.word	0x20001b1c

08015d20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b088      	sub	sp, #32
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d10d      	bne.n	8015d4c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8015d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d34:	b672      	cpsid	i
 8015d36:	f383 8811 	msr	BASEPRI, r3
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	b662      	cpsie	i
 8015d44:	613b      	str	r3, [r7, #16]
}
 8015d46:	bf00      	nop
 8015d48:	bf00      	nop
 8015d4a:	e7fd      	b.n	8015d48 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d10d      	bne.n	8015d6e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8015d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d56:	b672      	cpsid	i
 8015d58:	f383 8811 	msr	BASEPRI, r3
 8015d5c:	f3bf 8f6f 	isb	sy
 8015d60:	f3bf 8f4f 	dsb	sy
 8015d64:	b662      	cpsie	i
 8015d66:	60fb      	str	r3, [r7, #12]
}
 8015d68:	bf00      	nop
 8015d6a:	bf00      	nop
 8015d6c:	e7fd      	b.n	8015d6a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8015d6e:	f000 fb45 	bl	80163fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d72:	4b1d      	ldr	r3, [pc, #116]	@ (8015de8 <xTaskCheckForTimeOut+0xc8>)
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	69ba      	ldr	r2, [r7, #24]
 8015d7e:	1ad3      	subs	r3, r2, r3
 8015d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d8a:	d102      	bne.n	8015d92 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	61fb      	str	r3, [r7, #28]
 8015d90:	e023      	b.n	8015dda <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	4b15      	ldr	r3, [pc, #84]	@ (8015dec <xTaskCheckForTimeOut+0xcc>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d007      	beq.n	8015dae <xTaskCheckForTimeOut+0x8e>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	69ba      	ldr	r2, [r7, #24]
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d302      	bcc.n	8015dae <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015da8:	2301      	movs	r3, #1
 8015daa:	61fb      	str	r3, [r7, #28]
 8015dac:	e015      	b.n	8015dda <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	697a      	ldr	r2, [r7, #20]
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d20b      	bcs.n	8015dd0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	1ad2      	subs	r2, r2, r3
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f7ff ff95 	bl	8015cf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	61fb      	str	r3, [r7, #28]
 8015dce:	e004      	b.n	8015dda <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015dd6:	2301      	movs	r3, #1
 8015dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015dda:	f000 fb45 	bl	8016468 <vPortExitCritical>

	return xReturn;
 8015dde:	69fb      	ldr	r3, [r7, #28]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3720      	adds	r7, #32
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	20001b1c 	.word	0x20001b1c
 8015dec:	20001b30 	.word	0x20001b30

08015df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015df0:	b480      	push	{r7}
 8015df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015df4:	4b03      	ldr	r3, [pc, #12]	@ (8015e04 <vTaskMissedYield+0x14>)
 8015df6:	2201      	movs	r2, #1
 8015df8:	601a      	str	r2, [r3, #0]
}
 8015dfa:	bf00      	nop
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	20001b2c 	.word	0x20001b2c

08015e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015e10:	f000 f854 	bl	8015ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015e14:	4b07      	ldr	r3, [pc, #28]	@ (8015e34 <prvIdleTask+0x2c>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	2b01      	cmp	r3, #1
 8015e1a:	d907      	bls.n	8015e2c <prvIdleTask+0x24>
			{
				taskYIELD();
 8015e1c:	4b06      	ldr	r3, [pc, #24]	@ (8015e38 <prvIdleTask+0x30>)
 8015e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015e22:	601a      	str	r2, [r3, #0]
 8015e24:	f3bf 8f4f 	dsb	sy
 8015e28:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015e2c:	f7eb fe40 	bl	8001ab0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015e30:	e7ee      	b.n	8015e10 <prvIdleTask+0x8>
 8015e32:	bf00      	nop
 8015e34:	20001a1c 	.word	0x20001a1c
 8015e38:	e000ed04 	.word	0xe000ed04

08015e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e42:	2300      	movs	r3, #0
 8015e44:	607b      	str	r3, [r7, #4]
 8015e46:	e00c      	b.n	8015e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	4613      	mov	r3, r2
 8015e4c:	009b      	lsls	r3, r3, #2
 8015e4e:	4413      	add	r3, r2
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	4a12      	ldr	r2, [pc, #72]	@ (8015e9c <prvInitialiseTaskLists+0x60>)
 8015e54:	4413      	add	r3, r2
 8015e56:	4618      	mov	r0, r3
 8015e58:	f7fe fbec 	bl	8014634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	3301      	adds	r3, #1
 8015e60:	607b      	str	r3, [r7, #4]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2b06      	cmp	r3, #6
 8015e66:	d9ef      	bls.n	8015e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e68:	480d      	ldr	r0, [pc, #52]	@ (8015ea0 <prvInitialiseTaskLists+0x64>)
 8015e6a:	f7fe fbe3 	bl	8014634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e6e:	480d      	ldr	r0, [pc, #52]	@ (8015ea4 <prvInitialiseTaskLists+0x68>)
 8015e70:	f7fe fbe0 	bl	8014634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e74:	480c      	ldr	r0, [pc, #48]	@ (8015ea8 <prvInitialiseTaskLists+0x6c>)
 8015e76:	f7fe fbdd 	bl	8014634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e7a:	480c      	ldr	r0, [pc, #48]	@ (8015eac <prvInitialiseTaskLists+0x70>)
 8015e7c:	f7fe fbda 	bl	8014634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e80:	480b      	ldr	r0, [pc, #44]	@ (8015eb0 <prvInitialiseTaskLists+0x74>)
 8015e82:	f7fe fbd7 	bl	8014634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e86:	4b0b      	ldr	r3, [pc, #44]	@ (8015eb4 <prvInitialiseTaskLists+0x78>)
 8015e88:	4a05      	ldr	r2, [pc, #20]	@ (8015ea0 <prvInitialiseTaskLists+0x64>)
 8015e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8015eb8 <prvInitialiseTaskLists+0x7c>)
 8015e8e:	4a05      	ldr	r2, [pc, #20]	@ (8015ea4 <prvInitialiseTaskLists+0x68>)
 8015e90:	601a      	str	r2, [r3, #0]
}
 8015e92:	bf00      	nop
 8015e94:	3708      	adds	r7, #8
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	20001a1c 	.word	0x20001a1c
 8015ea0:	20001aa8 	.word	0x20001aa8
 8015ea4:	20001abc 	.word	0x20001abc
 8015ea8:	20001ad8 	.word	0x20001ad8
 8015eac:	20001aec 	.word	0x20001aec
 8015eb0:	20001b04 	.word	0x20001b04
 8015eb4:	20001ad0 	.word	0x20001ad0
 8015eb8:	20001ad4 	.word	0x20001ad4

08015ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ec2:	e019      	b.n	8015ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015ec4:	f000 fa9a 	bl	80163fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ec8:	4b10      	ldr	r3, [pc, #64]	@ (8015f0c <prvCheckTasksWaitingTermination+0x50>)
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	68db      	ldr	r3, [r3, #12]
 8015ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	3304      	adds	r3, #4
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fe fc37 	bl	8014748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015eda:	4b0d      	ldr	r3, [pc, #52]	@ (8015f10 <prvCheckTasksWaitingTermination+0x54>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	3b01      	subs	r3, #1
 8015ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8015f10 <prvCheckTasksWaitingTermination+0x54>)
 8015ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8015f14 <prvCheckTasksWaitingTermination+0x58>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	3b01      	subs	r3, #1
 8015eea:	4a0a      	ldr	r2, [pc, #40]	@ (8015f14 <prvCheckTasksWaitingTermination+0x58>)
 8015eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015eee:	f000 fabb 	bl	8016468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f000 f810 	bl	8015f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ef8:	4b06      	ldr	r3, [pc, #24]	@ (8015f14 <prvCheckTasksWaitingTermination+0x58>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d1e1      	bne.n	8015ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015f00:	bf00      	nop
 8015f02:	bf00      	nop
 8015f04:	3708      	adds	r7, #8
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	bf00      	nop
 8015f0c:	20001aec 	.word	0x20001aec
 8015f10:	20001b18 	.word	0x20001b18
 8015f14:	20001b00 	.word	0x20001b00

08015f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d108      	bne.n	8015f3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f000 fc64 	bl	80167fc <vPortFree>
				vPortFree( pxTCB );
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f000 fc61 	bl	80167fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015f3a:	e01b      	b.n	8015f74 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015f42:	2b01      	cmp	r3, #1
 8015f44:	d103      	bne.n	8015f4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 fc58 	bl	80167fc <vPortFree>
	}
 8015f4c:	e012      	b.n	8015f74 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8015f54:	2b02      	cmp	r3, #2
 8015f56:	d00d      	beq.n	8015f74 <prvDeleteTCB+0x5c>
	__asm volatile
 8015f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f5c:	b672      	cpsid	i
 8015f5e:	f383 8811 	msr	BASEPRI, r3
 8015f62:	f3bf 8f6f 	isb	sy
 8015f66:	f3bf 8f4f 	dsb	sy
 8015f6a:	b662      	cpsie	i
 8015f6c:	60fb      	str	r3, [r7, #12]
}
 8015f6e:	bf00      	nop
 8015f70:	bf00      	nop
 8015f72:	e7fd      	b.n	8015f70 <prvDeleteTCB+0x58>
	}
 8015f74:	bf00      	nop
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}

08015f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b083      	sub	sp, #12
 8015f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f82:	4b0c      	ldr	r3, [pc, #48]	@ (8015fb4 <prvResetNextTaskUnblockTime+0x38>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d104      	bne.n	8015f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8015fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8015f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015f94:	e008      	b.n	8015fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f96:	4b07      	ldr	r3, [pc, #28]	@ (8015fb4 <prvResetNextTaskUnblockTime+0x38>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	68db      	ldr	r3, [r3, #12]
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	4a04      	ldr	r2, [pc, #16]	@ (8015fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8015fa6:	6013      	str	r3, [r2, #0]
}
 8015fa8:	bf00      	nop
 8015faa:	370c      	adds	r7, #12
 8015fac:	46bd      	mov	sp, r7
 8015fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb2:	4770      	bx	lr
 8015fb4:	20001ad0 	.word	0x20001ad0
 8015fb8:	20001b38 	.word	0x20001b38

08015fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8015ff0 <xTaskGetSchedulerState+0x34>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d102      	bne.n	8015fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	607b      	str	r3, [r7, #4]
 8015fce:	e008      	b.n	8015fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015fd0:	4b08      	ldr	r3, [pc, #32]	@ (8015ff4 <xTaskGetSchedulerState+0x38>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d102      	bne.n	8015fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015fd8:	2302      	movs	r3, #2
 8015fda:	607b      	str	r3, [r7, #4]
 8015fdc:	e001      	b.n	8015fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015fe2:	687b      	ldr	r3, [r7, #4]
	}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	370c      	adds	r7, #12
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr
 8015ff0:	20001b24 	.word	0x20001b24
 8015ff4:	20001b40 	.word	0x20001b40

08015ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b086      	sub	sp, #24
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016004:	2300      	movs	r3, #0
 8016006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d074      	beq.n	80160f8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801600e:	4b3d      	ldr	r3, [pc, #244]	@ (8016104 <xTaskPriorityDisinherit+0x10c>)
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	693a      	ldr	r2, [r7, #16]
 8016014:	429a      	cmp	r2, r3
 8016016:	d00d      	beq.n	8016034 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801601c:	b672      	cpsid	i
 801601e:	f383 8811 	msr	BASEPRI, r3
 8016022:	f3bf 8f6f 	isb	sy
 8016026:	f3bf 8f4f 	dsb	sy
 801602a:	b662      	cpsie	i
 801602c:	60fb      	str	r3, [r7, #12]
}
 801602e:	bf00      	nop
 8016030:	bf00      	nop
 8016032:	e7fd      	b.n	8016030 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016038:	2b00      	cmp	r3, #0
 801603a:	d10d      	bne.n	8016058 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 801603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016040:	b672      	cpsid	i
 8016042:	f383 8811 	msr	BASEPRI, r3
 8016046:	f3bf 8f6f 	isb	sy
 801604a:	f3bf 8f4f 	dsb	sy
 801604e:	b662      	cpsie	i
 8016050:	60bb      	str	r3, [r7, #8]
}
 8016052:	bf00      	nop
 8016054:	bf00      	nop
 8016056:	e7fd      	b.n	8016054 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801605c:	1e5a      	subs	r2, r3, #1
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801606a:	429a      	cmp	r2, r3
 801606c:	d044      	beq.n	80160f8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801606e:	693b      	ldr	r3, [r7, #16]
 8016070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016072:	2b00      	cmp	r3, #0
 8016074:	d140      	bne.n	80160f8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	3304      	adds	r3, #4
 801607a:	4618      	mov	r0, r3
 801607c:	f7fe fb64 	bl	8014748 <uxListRemove>
 8016080:	4603      	mov	r3, r0
 8016082:	2b00      	cmp	r3, #0
 8016084:	d115      	bne.n	80160b2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801608a:	491f      	ldr	r1, [pc, #124]	@ (8016108 <xTaskPriorityDisinherit+0x110>)
 801608c:	4613      	mov	r3, r2
 801608e:	009b      	lsls	r3, r3, #2
 8016090:	4413      	add	r3, r2
 8016092:	009b      	lsls	r3, r3, #2
 8016094:	440b      	add	r3, r1
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d10a      	bne.n	80160b2 <xTaskPriorityDisinherit+0xba>
 801609c:	693b      	ldr	r3, [r7, #16]
 801609e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160a0:	2201      	movs	r2, #1
 80160a2:	fa02 f303 	lsl.w	r3, r2, r3
 80160a6:	43da      	mvns	r2, r3
 80160a8:	4b18      	ldr	r3, [pc, #96]	@ (801610c <xTaskPriorityDisinherit+0x114>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	4013      	ands	r3, r2
 80160ae:	4a17      	ldr	r2, [pc, #92]	@ (801610c <xTaskPriorityDisinherit+0x114>)
 80160b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160be:	f1c3 0207 	rsb	r2, r3, #7
 80160c2:	693b      	ldr	r3, [r7, #16]
 80160c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ca:	2201      	movs	r2, #1
 80160cc:	409a      	lsls	r2, r3
 80160ce:	4b0f      	ldr	r3, [pc, #60]	@ (801610c <xTaskPriorityDisinherit+0x114>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	4313      	orrs	r3, r2
 80160d4:	4a0d      	ldr	r2, [pc, #52]	@ (801610c <xTaskPriorityDisinherit+0x114>)
 80160d6:	6013      	str	r3, [r2, #0]
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160dc:	4613      	mov	r3, r2
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	4413      	add	r3, r2
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	4a08      	ldr	r2, [pc, #32]	@ (8016108 <xTaskPriorityDisinherit+0x110>)
 80160e6:	441a      	add	r2, r3
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	3304      	adds	r3, #4
 80160ec:	4619      	mov	r1, r3
 80160ee:	4610      	mov	r0, r2
 80160f0:	f7fe facd 	bl	801468e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80160f4:	2301      	movs	r3, #1
 80160f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80160f8:	697b      	ldr	r3, [r7, #20]
	}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3718      	adds	r7, #24
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	20001a18 	.word	0x20001a18
 8016108:	20001a1c 	.word	0x20001a1c
 801610c:	20001b20 	.word	0x20001b20

08016110 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801611a:	4b29      	ldr	r3, [pc, #164]	@ (80161c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016120:	4b28      	ldr	r3, [pc, #160]	@ (80161c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	3304      	adds	r3, #4
 8016126:	4618      	mov	r0, r3
 8016128:	f7fe fb0e 	bl	8014748 <uxListRemove>
 801612c:	4603      	mov	r3, r0
 801612e:	2b00      	cmp	r3, #0
 8016130:	d10b      	bne.n	801614a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016132:	4b24      	ldr	r3, [pc, #144]	@ (80161c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016138:	2201      	movs	r2, #1
 801613a:	fa02 f303 	lsl.w	r3, r2, r3
 801613e:	43da      	mvns	r2, r3
 8016140:	4b21      	ldr	r3, [pc, #132]	@ (80161c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	4013      	ands	r3, r2
 8016146:	4a20      	ldr	r2, [pc, #128]	@ (80161c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016150:	d10a      	bne.n	8016168 <prvAddCurrentTaskToDelayedList+0x58>
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d007      	beq.n	8016168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016158:	4b1a      	ldr	r3, [pc, #104]	@ (80161c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	3304      	adds	r3, #4
 801615e:	4619      	mov	r1, r3
 8016160:	481a      	ldr	r0, [pc, #104]	@ (80161cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8016162:	f7fe fa94 	bl	801468e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016166:	e026      	b.n	80161b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016168:	68fa      	ldr	r2, [r7, #12]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	4413      	add	r3, r2
 801616e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016170:	4b14      	ldr	r3, [pc, #80]	@ (80161c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	68ba      	ldr	r2, [r7, #8]
 8016176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016178:	68ba      	ldr	r2, [r7, #8]
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	429a      	cmp	r2, r3
 801617e:	d209      	bcs.n	8016194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016180:	4b13      	ldr	r3, [pc, #76]	@ (80161d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016182:	681a      	ldr	r2, [r3, #0]
 8016184:	4b0f      	ldr	r3, [pc, #60]	@ (80161c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	3304      	adds	r3, #4
 801618a:	4619      	mov	r1, r3
 801618c:	4610      	mov	r0, r2
 801618e:	f7fe faa2 	bl	80146d6 <vListInsert>
}
 8016192:	e010      	b.n	80161b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016194:	4b0f      	ldr	r3, [pc, #60]	@ (80161d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016196:	681a      	ldr	r2, [r3, #0]
 8016198:	4b0a      	ldr	r3, [pc, #40]	@ (80161c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	3304      	adds	r3, #4
 801619e:	4619      	mov	r1, r3
 80161a0:	4610      	mov	r0, r2
 80161a2:	f7fe fa98 	bl	80146d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80161a6:	4b0c      	ldr	r3, [pc, #48]	@ (80161d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d202      	bcs.n	80161b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80161b0:	4a09      	ldr	r2, [pc, #36]	@ (80161d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	6013      	str	r3, [r2, #0]
}
 80161b6:	bf00      	nop
 80161b8:	3710      	adds	r7, #16
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	20001b1c 	.word	0x20001b1c
 80161c4:	20001a18 	.word	0x20001a18
 80161c8:	20001b20 	.word	0x20001b20
 80161cc:	20001b04 	.word	0x20001b04
 80161d0:	20001ad4 	.word	0x20001ad4
 80161d4:	20001ad0 	.word	0x20001ad0
 80161d8:	20001b38 	.word	0x20001b38

080161dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80161dc:	b480      	push	{r7}
 80161de:	b085      	sub	sp, #20
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	3b04      	subs	r3, #4
 80161ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80161f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	3b04      	subs	r3, #4
 80161fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	f023 0201 	bic.w	r2, r3, #1
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	3b04      	subs	r3, #4
 801620a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801620c:	4a0c      	ldr	r2, [pc, #48]	@ (8016240 <pxPortInitialiseStack+0x64>)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	3b14      	subs	r3, #20
 8016216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	3b04      	subs	r3, #4
 8016222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	f06f 0202 	mvn.w	r2, #2
 801622a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	3b20      	subs	r3, #32
 8016230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016232:	68fb      	ldr	r3, [r7, #12]
}
 8016234:	4618      	mov	r0, r3
 8016236:	3714      	adds	r7, #20
 8016238:	46bd      	mov	sp, r7
 801623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623e:	4770      	bx	lr
 8016240:	08016245 	.word	0x08016245

08016244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016244:	b480      	push	{r7}
 8016246:	b085      	sub	sp, #20
 8016248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801624a:	2300      	movs	r3, #0
 801624c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801624e:	4b15      	ldr	r3, [pc, #84]	@ (80162a4 <prvTaskExitError+0x60>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016256:	d00d      	beq.n	8016274 <prvTaskExitError+0x30>
	__asm volatile
 8016258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801625c:	b672      	cpsid	i
 801625e:	f383 8811 	msr	BASEPRI, r3
 8016262:	f3bf 8f6f 	isb	sy
 8016266:	f3bf 8f4f 	dsb	sy
 801626a:	b662      	cpsie	i
 801626c:	60fb      	str	r3, [r7, #12]
}
 801626e:	bf00      	nop
 8016270:	bf00      	nop
 8016272:	e7fd      	b.n	8016270 <prvTaskExitError+0x2c>
	__asm volatile
 8016274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016278:	b672      	cpsid	i
 801627a:	f383 8811 	msr	BASEPRI, r3
 801627e:	f3bf 8f6f 	isb	sy
 8016282:	f3bf 8f4f 	dsb	sy
 8016286:	b662      	cpsie	i
 8016288:	60bb      	str	r3, [r7, #8]
}
 801628a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801628c:	bf00      	nop
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d0fc      	beq.n	801628e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016294:	bf00      	nop
 8016296:	bf00      	nop
 8016298:	3714      	adds	r7, #20
 801629a:	46bd      	mov	sp, r7
 801629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a0:	4770      	bx	lr
 80162a2:	bf00      	nop
 80162a4:	20000070 	.word	0x20000070
	...

080162b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80162b0:	4b07      	ldr	r3, [pc, #28]	@ (80162d0 <pxCurrentTCBConst2>)
 80162b2:	6819      	ldr	r1, [r3, #0]
 80162b4:	6808      	ldr	r0, [r1, #0]
 80162b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ba:	f380 8809 	msr	PSP, r0
 80162be:	f3bf 8f6f 	isb	sy
 80162c2:	f04f 0000 	mov.w	r0, #0
 80162c6:	f380 8811 	msr	BASEPRI, r0
 80162ca:	4770      	bx	lr
 80162cc:	f3af 8000 	nop.w

080162d0 <pxCurrentTCBConst2>:
 80162d0:	20001a18 	.word	0x20001a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80162d4:	bf00      	nop
 80162d6:	bf00      	nop

080162d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80162d8:	4808      	ldr	r0, [pc, #32]	@ (80162fc <prvPortStartFirstTask+0x24>)
 80162da:	6800      	ldr	r0, [r0, #0]
 80162dc:	6800      	ldr	r0, [r0, #0]
 80162de:	f380 8808 	msr	MSP, r0
 80162e2:	f04f 0000 	mov.w	r0, #0
 80162e6:	f380 8814 	msr	CONTROL, r0
 80162ea:	b662      	cpsie	i
 80162ec:	b661      	cpsie	f
 80162ee:	f3bf 8f4f 	dsb	sy
 80162f2:	f3bf 8f6f 	isb	sy
 80162f6:	df00      	svc	0
 80162f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80162fa:	bf00      	nop
 80162fc:	e000ed08 	.word	0xe000ed08

08016300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b084      	sub	sp, #16
 8016304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016306:	4b37      	ldr	r3, [pc, #220]	@ (80163e4 <xPortStartScheduler+0xe4>)
 8016308:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	b2db      	uxtb	r3, r3
 8016310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	22ff      	movs	r2, #255	@ 0xff
 8016316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	b2db      	uxtb	r3, r3
 801631e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016320:	78fb      	ldrb	r3, [r7, #3]
 8016322:	b2db      	uxtb	r3, r3
 8016324:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016328:	b2da      	uxtb	r2, r3
 801632a:	4b2f      	ldr	r3, [pc, #188]	@ (80163e8 <xPortStartScheduler+0xe8>)
 801632c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801632e:	4b2f      	ldr	r3, [pc, #188]	@ (80163ec <xPortStartScheduler+0xec>)
 8016330:	2207      	movs	r2, #7
 8016332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016334:	e009      	b.n	801634a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016336:	4b2d      	ldr	r3, [pc, #180]	@ (80163ec <xPortStartScheduler+0xec>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	3b01      	subs	r3, #1
 801633c:	4a2b      	ldr	r2, [pc, #172]	@ (80163ec <xPortStartScheduler+0xec>)
 801633e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016340:	78fb      	ldrb	r3, [r7, #3]
 8016342:	b2db      	uxtb	r3, r3
 8016344:	005b      	lsls	r3, r3, #1
 8016346:	b2db      	uxtb	r3, r3
 8016348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801634a:	78fb      	ldrb	r3, [r7, #3]
 801634c:	b2db      	uxtb	r3, r3
 801634e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016352:	2b80      	cmp	r3, #128	@ 0x80
 8016354:	d0ef      	beq.n	8016336 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016356:	4b25      	ldr	r3, [pc, #148]	@ (80163ec <xPortStartScheduler+0xec>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	f1c3 0307 	rsb	r3, r3, #7
 801635e:	2b04      	cmp	r3, #4
 8016360:	d00d      	beq.n	801637e <xPortStartScheduler+0x7e>
	__asm volatile
 8016362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016366:	b672      	cpsid	i
 8016368:	f383 8811 	msr	BASEPRI, r3
 801636c:	f3bf 8f6f 	isb	sy
 8016370:	f3bf 8f4f 	dsb	sy
 8016374:	b662      	cpsie	i
 8016376:	60bb      	str	r3, [r7, #8]
}
 8016378:	bf00      	nop
 801637a:	bf00      	nop
 801637c:	e7fd      	b.n	801637a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801637e:	4b1b      	ldr	r3, [pc, #108]	@ (80163ec <xPortStartScheduler+0xec>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	021b      	lsls	r3, r3, #8
 8016384:	4a19      	ldr	r2, [pc, #100]	@ (80163ec <xPortStartScheduler+0xec>)
 8016386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016388:	4b18      	ldr	r3, [pc, #96]	@ (80163ec <xPortStartScheduler+0xec>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016390:	4a16      	ldr	r2, [pc, #88]	@ (80163ec <xPortStartScheduler+0xec>)
 8016392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	b2da      	uxtb	r2, r3
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801639c:	4b14      	ldr	r3, [pc, #80]	@ (80163f0 <xPortStartScheduler+0xf0>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4a13      	ldr	r2, [pc, #76]	@ (80163f0 <xPortStartScheduler+0xf0>)
 80163a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80163a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80163a8:	4b11      	ldr	r3, [pc, #68]	@ (80163f0 <xPortStartScheduler+0xf0>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	4a10      	ldr	r2, [pc, #64]	@ (80163f0 <xPortStartScheduler+0xf0>)
 80163ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80163b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80163b4:	f000 f8dc 	bl	8016570 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80163b8:	4b0e      	ldr	r3, [pc, #56]	@ (80163f4 <xPortStartScheduler+0xf4>)
 80163ba:	2200      	movs	r2, #0
 80163bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80163be:	f000 f8fb 	bl	80165b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80163c2:	4b0d      	ldr	r3, [pc, #52]	@ (80163f8 <xPortStartScheduler+0xf8>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	4a0c      	ldr	r2, [pc, #48]	@ (80163f8 <xPortStartScheduler+0xf8>)
 80163c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80163cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80163ce:	f7ff ff83 	bl	80162d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80163d2:	f7ff fb7d 	bl	8015ad0 <vTaskSwitchContext>
	prvTaskExitError();
 80163d6:	f7ff ff35 	bl	8016244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80163da:	2300      	movs	r3, #0
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3710      	adds	r7, #16
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	e000e400 	.word	0xe000e400
 80163e8:	20001b44 	.word	0x20001b44
 80163ec:	20001b48 	.word	0x20001b48
 80163f0:	e000ed20 	.word	0xe000ed20
 80163f4:	20000070 	.word	0x20000070
 80163f8:	e000ef34 	.word	0xe000ef34

080163fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
	__asm volatile
 8016402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016406:	b672      	cpsid	i
 8016408:	f383 8811 	msr	BASEPRI, r3
 801640c:	f3bf 8f6f 	isb	sy
 8016410:	f3bf 8f4f 	dsb	sy
 8016414:	b662      	cpsie	i
 8016416:	607b      	str	r3, [r7, #4]
}
 8016418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801641a:	4b11      	ldr	r3, [pc, #68]	@ (8016460 <vPortEnterCritical+0x64>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	3301      	adds	r3, #1
 8016420:	4a0f      	ldr	r2, [pc, #60]	@ (8016460 <vPortEnterCritical+0x64>)
 8016422:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016424:	4b0e      	ldr	r3, [pc, #56]	@ (8016460 <vPortEnterCritical+0x64>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2b01      	cmp	r3, #1
 801642a:	d112      	bne.n	8016452 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801642c:	4b0d      	ldr	r3, [pc, #52]	@ (8016464 <vPortEnterCritical+0x68>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	b2db      	uxtb	r3, r3
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00d      	beq.n	8016452 <vPortEnterCritical+0x56>
	__asm volatile
 8016436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801643a:	b672      	cpsid	i
 801643c:	f383 8811 	msr	BASEPRI, r3
 8016440:	f3bf 8f6f 	isb	sy
 8016444:	f3bf 8f4f 	dsb	sy
 8016448:	b662      	cpsie	i
 801644a:	603b      	str	r3, [r7, #0]
}
 801644c:	bf00      	nop
 801644e:	bf00      	nop
 8016450:	e7fd      	b.n	801644e <vPortEnterCritical+0x52>
	}
}
 8016452:	bf00      	nop
 8016454:	370c      	adds	r7, #12
 8016456:	46bd      	mov	sp, r7
 8016458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645c:	4770      	bx	lr
 801645e:	bf00      	nop
 8016460:	20000070 	.word	0x20000070
 8016464:	e000ed04 	.word	0xe000ed04

08016468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016468:	b480      	push	{r7}
 801646a:	b083      	sub	sp, #12
 801646c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801646e:	4b13      	ldr	r3, [pc, #76]	@ (80164bc <vPortExitCritical+0x54>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d10d      	bne.n	8016492 <vPortExitCritical+0x2a>
	__asm volatile
 8016476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801647a:	b672      	cpsid	i
 801647c:	f383 8811 	msr	BASEPRI, r3
 8016480:	f3bf 8f6f 	isb	sy
 8016484:	f3bf 8f4f 	dsb	sy
 8016488:	b662      	cpsie	i
 801648a:	607b      	str	r3, [r7, #4]
}
 801648c:	bf00      	nop
 801648e:	bf00      	nop
 8016490:	e7fd      	b.n	801648e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016492:	4b0a      	ldr	r3, [pc, #40]	@ (80164bc <vPortExitCritical+0x54>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	3b01      	subs	r3, #1
 8016498:	4a08      	ldr	r2, [pc, #32]	@ (80164bc <vPortExitCritical+0x54>)
 801649a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801649c:	4b07      	ldr	r3, [pc, #28]	@ (80164bc <vPortExitCritical+0x54>)
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d105      	bne.n	80164b0 <vPortExitCritical+0x48>
 80164a4:	2300      	movs	r3, #0
 80164a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	f383 8811 	msr	BASEPRI, r3
}
 80164ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80164b0:	bf00      	nop
 80164b2:	370c      	adds	r7, #12
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr
 80164bc:	20000070 	.word	0x20000070

080164c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80164c0:	f3ef 8009 	mrs	r0, PSP
 80164c4:	f3bf 8f6f 	isb	sy
 80164c8:	4b15      	ldr	r3, [pc, #84]	@ (8016520 <pxCurrentTCBConst>)
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	f01e 0f10 	tst.w	lr, #16
 80164d0:	bf08      	it	eq
 80164d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80164d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164da:	6010      	str	r0, [r2, #0]
 80164dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80164e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80164e4:	b672      	cpsid	i
 80164e6:	f380 8811 	msr	BASEPRI, r0
 80164ea:	f3bf 8f4f 	dsb	sy
 80164ee:	f3bf 8f6f 	isb	sy
 80164f2:	b662      	cpsie	i
 80164f4:	f7ff faec 	bl	8015ad0 <vTaskSwitchContext>
 80164f8:	f04f 0000 	mov.w	r0, #0
 80164fc:	f380 8811 	msr	BASEPRI, r0
 8016500:	bc09      	pop	{r0, r3}
 8016502:	6819      	ldr	r1, [r3, #0]
 8016504:	6808      	ldr	r0, [r1, #0]
 8016506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801650a:	f01e 0f10 	tst.w	lr, #16
 801650e:	bf08      	it	eq
 8016510:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016514:	f380 8809 	msr	PSP, r0
 8016518:	f3bf 8f6f 	isb	sy
 801651c:	4770      	bx	lr
 801651e:	bf00      	nop

08016520 <pxCurrentTCBConst>:
 8016520:	20001a18 	.word	0x20001a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016524:	bf00      	nop
 8016526:	bf00      	nop

08016528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
	__asm volatile
 801652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016532:	b672      	cpsid	i
 8016534:	f383 8811 	msr	BASEPRI, r3
 8016538:	f3bf 8f6f 	isb	sy
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	b662      	cpsie	i
 8016542:	607b      	str	r3, [r7, #4]
}
 8016544:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016546:	f7ff fa07 	bl	8015958 <xTaskIncrementTick>
 801654a:	4603      	mov	r3, r0
 801654c:	2b00      	cmp	r3, #0
 801654e:	d003      	beq.n	8016558 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016550:	4b06      	ldr	r3, [pc, #24]	@ (801656c <SysTick_Handler+0x44>)
 8016552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016556:	601a      	str	r2, [r3, #0]
 8016558:	2300      	movs	r3, #0
 801655a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	f383 8811 	msr	BASEPRI, r3
}
 8016562:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016564:	bf00      	nop
 8016566:	3708      	adds	r7, #8
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}
 801656c:	e000ed04 	.word	0xe000ed04

08016570 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016570:	b480      	push	{r7}
 8016572:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016574:	4b0b      	ldr	r3, [pc, #44]	@ (80165a4 <vPortSetupTimerInterrupt+0x34>)
 8016576:	2200      	movs	r2, #0
 8016578:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801657a:	4b0b      	ldr	r3, [pc, #44]	@ (80165a8 <vPortSetupTimerInterrupt+0x38>)
 801657c:	2200      	movs	r2, #0
 801657e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016580:	4b0a      	ldr	r3, [pc, #40]	@ (80165ac <vPortSetupTimerInterrupt+0x3c>)
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	4a0a      	ldr	r2, [pc, #40]	@ (80165b0 <vPortSetupTimerInterrupt+0x40>)
 8016586:	fba2 2303 	umull	r2, r3, r2, r3
 801658a:	099b      	lsrs	r3, r3, #6
 801658c:	4a09      	ldr	r2, [pc, #36]	@ (80165b4 <vPortSetupTimerInterrupt+0x44>)
 801658e:	3b01      	subs	r3, #1
 8016590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016592:	4b04      	ldr	r3, [pc, #16]	@ (80165a4 <vPortSetupTimerInterrupt+0x34>)
 8016594:	2207      	movs	r2, #7
 8016596:	601a      	str	r2, [r3, #0]
}
 8016598:	bf00      	nop
 801659a:	46bd      	mov	sp, r7
 801659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a0:	4770      	bx	lr
 80165a2:	bf00      	nop
 80165a4:	e000e010 	.word	0xe000e010
 80165a8:	e000e018 	.word	0xe000e018
 80165ac:	2000001c 	.word	0x2000001c
 80165b0:	10624dd3 	.word	0x10624dd3
 80165b4:	e000e014 	.word	0xe000e014

080165b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80165b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80165c8 <vPortEnableVFP+0x10>
 80165bc:	6801      	ldr	r1, [r0, #0]
 80165be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80165c2:	6001      	str	r1, [r0, #0]
 80165c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80165c6:	bf00      	nop
 80165c8:	e000ed88 	.word	0xe000ed88

080165cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80165cc:	b480      	push	{r7}
 80165ce:	b085      	sub	sp, #20
 80165d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80165d2:	f3ef 8305 	mrs	r3, IPSR
 80165d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	2b0f      	cmp	r3, #15
 80165dc:	d917      	bls.n	801660e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80165de:	4a1a      	ldr	r2, [pc, #104]	@ (8016648 <vPortValidateInterruptPriority+0x7c>)
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	4413      	add	r3, r2
 80165e4:	781b      	ldrb	r3, [r3, #0]
 80165e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80165e8:	4b18      	ldr	r3, [pc, #96]	@ (801664c <vPortValidateInterruptPriority+0x80>)
 80165ea:	781b      	ldrb	r3, [r3, #0]
 80165ec:	7afa      	ldrb	r2, [r7, #11]
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d20d      	bcs.n	801660e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80165f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f6:	b672      	cpsid	i
 80165f8:	f383 8811 	msr	BASEPRI, r3
 80165fc:	f3bf 8f6f 	isb	sy
 8016600:	f3bf 8f4f 	dsb	sy
 8016604:	b662      	cpsie	i
 8016606:	607b      	str	r3, [r7, #4]
}
 8016608:	bf00      	nop
 801660a:	bf00      	nop
 801660c:	e7fd      	b.n	801660a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801660e:	4b10      	ldr	r3, [pc, #64]	@ (8016650 <vPortValidateInterruptPriority+0x84>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016616:	4b0f      	ldr	r3, [pc, #60]	@ (8016654 <vPortValidateInterruptPriority+0x88>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	429a      	cmp	r2, r3
 801661c:	d90d      	bls.n	801663a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016622:	b672      	cpsid	i
 8016624:	f383 8811 	msr	BASEPRI, r3
 8016628:	f3bf 8f6f 	isb	sy
 801662c:	f3bf 8f4f 	dsb	sy
 8016630:	b662      	cpsie	i
 8016632:	603b      	str	r3, [r7, #0]
}
 8016634:	bf00      	nop
 8016636:	bf00      	nop
 8016638:	e7fd      	b.n	8016636 <vPortValidateInterruptPriority+0x6a>
	}
 801663a:	bf00      	nop
 801663c:	3714      	adds	r7, #20
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	e000e3f0 	.word	0xe000e3f0
 801664c:	20001b44 	.word	0x20001b44
 8016650:	e000ed0c 	.word	0xe000ed0c
 8016654:	20001b48 	.word	0x20001b48

08016658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b08a      	sub	sp, #40	@ 0x28
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016660:	2300      	movs	r3, #0
 8016662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016664:	f7ff f8a8 	bl	80157b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016668:	4b5f      	ldr	r3, [pc, #380]	@ (80167e8 <pvPortMalloc+0x190>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d101      	bne.n	8016674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016670:	f000 f924 	bl	80168bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016674:	4b5d      	ldr	r3, [pc, #372]	@ (80167ec <pvPortMalloc+0x194>)
 8016676:	681a      	ldr	r2, [r3, #0]
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	4013      	ands	r3, r2
 801667c:	2b00      	cmp	r3, #0
 801667e:	f040 8094 	bne.w	80167aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d020      	beq.n	80166ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016688:	2208      	movs	r2, #8
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	4413      	add	r3, r2
 801668e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f003 0307 	and.w	r3, r3, #7
 8016696:	2b00      	cmp	r3, #0
 8016698:	d017      	beq.n	80166ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f023 0307 	bic.w	r3, r3, #7
 80166a0:	3308      	adds	r3, #8
 80166a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f003 0307 	and.w	r3, r3, #7
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d00d      	beq.n	80166ca <pvPortMalloc+0x72>
	__asm volatile
 80166ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166b2:	b672      	cpsid	i
 80166b4:	f383 8811 	msr	BASEPRI, r3
 80166b8:	f3bf 8f6f 	isb	sy
 80166bc:	f3bf 8f4f 	dsb	sy
 80166c0:	b662      	cpsie	i
 80166c2:	617b      	str	r3, [r7, #20]
}
 80166c4:	bf00      	nop
 80166c6:	bf00      	nop
 80166c8:	e7fd      	b.n	80166c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d06c      	beq.n	80167aa <pvPortMalloc+0x152>
 80166d0:	4b47      	ldr	r3, [pc, #284]	@ (80167f0 <pvPortMalloc+0x198>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	687a      	ldr	r2, [r7, #4]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d867      	bhi.n	80167aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80166da:	4b46      	ldr	r3, [pc, #280]	@ (80167f4 <pvPortMalloc+0x19c>)
 80166dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80166de:	4b45      	ldr	r3, [pc, #276]	@ (80167f4 <pvPortMalloc+0x19c>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80166e4:	e004      	b.n	80166f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80166e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80166ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80166f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f2:	685b      	ldr	r3, [r3, #4]
 80166f4:	687a      	ldr	r2, [r7, #4]
 80166f6:	429a      	cmp	r2, r3
 80166f8:	d903      	bls.n	8016702 <pvPortMalloc+0xaa>
 80166fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d1f1      	bne.n	80166e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016702:	4b39      	ldr	r3, [pc, #228]	@ (80167e8 <pvPortMalloc+0x190>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016708:	429a      	cmp	r2, r3
 801670a:	d04e      	beq.n	80167aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801670c:	6a3b      	ldr	r3, [r7, #32]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	2208      	movs	r2, #8
 8016712:	4413      	add	r3, r2
 8016714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016718:	681a      	ldr	r2, [r3, #0]
 801671a:	6a3b      	ldr	r3, [r7, #32]
 801671c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016720:	685a      	ldr	r2, [r3, #4]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	1ad2      	subs	r2, r2, r3
 8016726:	2308      	movs	r3, #8
 8016728:	005b      	lsls	r3, r3, #1
 801672a:	429a      	cmp	r2, r3
 801672c:	d922      	bls.n	8016774 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801672e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	4413      	add	r3, r2
 8016734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016736:	69bb      	ldr	r3, [r7, #24]
 8016738:	f003 0307 	and.w	r3, r3, #7
 801673c:	2b00      	cmp	r3, #0
 801673e:	d00d      	beq.n	801675c <pvPortMalloc+0x104>
	__asm volatile
 8016740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016744:	b672      	cpsid	i
 8016746:	f383 8811 	msr	BASEPRI, r3
 801674a:	f3bf 8f6f 	isb	sy
 801674e:	f3bf 8f4f 	dsb	sy
 8016752:	b662      	cpsie	i
 8016754:	613b      	str	r3, [r7, #16]
}
 8016756:	bf00      	nop
 8016758:	bf00      	nop
 801675a:	e7fd      	b.n	8016758 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675e:	685a      	ldr	r2, [r3, #4]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	1ad2      	subs	r2, r2, r3
 8016764:	69bb      	ldr	r3, [r7, #24]
 8016766:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801676e:	69b8      	ldr	r0, [r7, #24]
 8016770:	f000 f906 	bl	8016980 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016774:	4b1e      	ldr	r3, [pc, #120]	@ (80167f0 <pvPortMalloc+0x198>)
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801677a:	685b      	ldr	r3, [r3, #4]
 801677c:	1ad3      	subs	r3, r2, r3
 801677e:	4a1c      	ldr	r2, [pc, #112]	@ (80167f0 <pvPortMalloc+0x198>)
 8016780:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016782:	4b1b      	ldr	r3, [pc, #108]	@ (80167f0 <pvPortMalloc+0x198>)
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	4b1c      	ldr	r3, [pc, #112]	@ (80167f8 <pvPortMalloc+0x1a0>)
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	429a      	cmp	r2, r3
 801678c:	d203      	bcs.n	8016796 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801678e:	4b18      	ldr	r3, [pc, #96]	@ (80167f0 <pvPortMalloc+0x198>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	4a19      	ldr	r2, [pc, #100]	@ (80167f8 <pvPortMalloc+0x1a0>)
 8016794:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016798:	685a      	ldr	r2, [r3, #4]
 801679a:	4b14      	ldr	r3, [pc, #80]	@ (80167ec <pvPortMalloc+0x194>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	431a      	orrs	r2, r3
 80167a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80167a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167a6:	2200      	movs	r2, #0
 80167a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80167aa:	f7ff f813 	bl	80157d4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80167ae:	69fb      	ldr	r3, [r7, #28]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d101      	bne.n	80167b8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80167b4:	f7eb f98e 	bl	8001ad4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80167b8:	69fb      	ldr	r3, [r7, #28]
 80167ba:	f003 0307 	and.w	r3, r3, #7
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d00d      	beq.n	80167de <pvPortMalloc+0x186>
	__asm volatile
 80167c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167c6:	b672      	cpsid	i
 80167c8:	f383 8811 	msr	BASEPRI, r3
 80167cc:	f3bf 8f6f 	isb	sy
 80167d0:	f3bf 8f4f 	dsb	sy
 80167d4:	b662      	cpsie	i
 80167d6:	60fb      	str	r3, [r7, #12]
}
 80167d8:	bf00      	nop
 80167da:	bf00      	nop
 80167dc:	e7fd      	b.n	80167da <pvPortMalloc+0x182>
	return pvReturn;
 80167de:	69fb      	ldr	r3, [r7, #28]
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	3728      	adds	r7, #40	@ 0x28
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	20011b54 	.word	0x20011b54
 80167ec:	20011b60 	.word	0x20011b60
 80167f0:	20011b58 	.word	0x20011b58
 80167f4:	20011b4c 	.word	0x20011b4c
 80167f8:	20011b5c 	.word	0x20011b5c

080167fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b086      	sub	sp, #24
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d04e      	beq.n	80168ac <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801680e:	2308      	movs	r3, #8
 8016810:	425b      	negs	r3, r3
 8016812:	697a      	ldr	r2, [r7, #20]
 8016814:	4413      	add	r3, r2
 8016816:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016818:	697b      	ldr	r3, [r7, #20]
 801681a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	685a      	ldr	r2, [r3, #4]
 8016820:	4b24      	ldr	r3, [pc, #144]	@ (80168b4 <vPortFree+0xb8>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	4013      	ands	r3, r2
 8016826:	2b00      	cmp	r3, #0
 8016828:	d10d      	bne.n	8016846 <vPortFree+0x4a>
	__asm volatile
 801682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801682e:	b672      	cpsid	i
 8016830:	f383 8811 	msr	BASEPRI, r3
 8016834:	f3bf 8f6f 	isb	sy
 8016838:	f3bf 8f4f 	dsb	sy
 801683c:	b662      	cpsie	i
 801683e:	60fb      	str	r3, [r7, #12]
}
 8016840:	bf00      	nop
 8016842:	bf00      	nop
 8016844:	e7fd      	b.n	8016842 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d00d      	beq.n	801686a <vPortFree+0x6e>
	__asm volatile
 801684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016852:	b672      	cpsid	i
 8016854:	f383 8811 	msr	BASEPRI, r3
 8016858:	f3bf 8f6f 	isb	sy
 801685c:	f3bf 8f4f 	dsb	sy
 8016860:	b662      	cpsie	i
 8016862:	60bb      	str	r3, [r7, #8]
}
 8016864:	bf00      	nop
 8016866:	bf00      	nop
 8016868:	e7fd      	b.n	8016866 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	685a      	ldr	r2, [r3, #4]
 801686e:	4b11      	ldr	r3, [pc, #68]	@ (80168b4 <vPortFree+0xb8>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	4013      	ands	r3, r2
 8016874:	2b00      	cmp	r3, #0
 8016876:	d019      	beq.n	80168ac <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d115      	bne.n	80168ac <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	685a      	ldr	r2, [r3, #4]
 8016884:	4b0b      	ldr	r3, [pc, #44]	@ (80168b4 <vPortFree+0xb8>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	43db      	mvns	r3, r3
 801688a:	401a      	ands	r2, r3
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016890:	f7fe ff92 	bl	80157b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	685a      	ldr	r2, [r3, #4]
 8016898:	4b07      	ldr	r3, [pc, #28]	@ (80168b8 <vPortFree+0xbc>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	4413      	add	r3, r2
 801689e:	4a06      	ldr	r2, [pc, #24]	@ (80168b8 <vPortFree+0xbc>)
 80168a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80168a2:	6938      	ldr	r0, [r7, #16]
 80168a4:	f000 f86c 	bl	8016980 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80168a8:	f7fe ff94 	bl	80157d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80168ac:	bf00      	nop
 80168ae:	3718      	adds	r7, #24
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	20011b60 	.word	0x20011b60
 80168b8:	20011b58 	.word	0x20011b58

080168bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80168bc:	b480      	push	{r7}
 80168be:	b085      	sub	sp, #20
 80168c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80168c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80168c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80168c8:	4b27      	ldr	r3, [pc, #156]	@ (8016968 <prvHeapInit+0xac>)
 80168ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	f003 0307 	and.w	r3, r3, #7
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d00c      	beq.n	80168f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	3307      	adds	r3, #7
 80168da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	f023 0307 	bic.w	r3, r3, #7
 80168e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80168e4:	68ba      	ldr	r2, [r7, #8]
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	1ad3      	subs	r3, r2, r3
 80168ea:	4a1f      	ldr	r2, [pc, #124]	@ (8016968 <prvHeapInit+0xac>)
 80168ec:	4413      	add	r3, r2
 80168ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80168f4:	4a1d      	ldr	r2, [pc, #116]	@ (801696c <prvHeapInit+0xb0>)
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80168fa:	4b1c      	ldr	r3, [pc, #112]	@ (801696c <prvHeapInit+0xb0>)
 80168fc:	2200      	movs	r2, #0
 80168fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	4413      	add	r3, r2
 8016906:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016908:	2208      	movs	r2, #8
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	1a9b      	subs	r3, r3, r2
 801690e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	f023 0307 	bic.w	r3, r3, #7
 8016916:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	4a15      	ldr	r2, [pc, #84]	@ (8016970 <prvHeapInit+0xb4>)
 801691c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801691e:	4b14      	ldr	r3, [pc, #80]	@ (8016970 <prvHeapInit+0xb4>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	2200      	movs	r2, #0
 8016924:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016926:	4b12      	ldr	r3, [pc, #72]	@ (8016970 <prvHeapInit+0xb4>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2200      	movs	r2, #0
 801692c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	1ad2      	subs	r2, r2, r3
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801693c:	4b0c      	ldr	r3, [pc, #48]	@ (8016970 <prvHeapInit+0xb4>)
 801693e:	681a      	ldr	r2, [r3, #0]
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	4a0a      	ldr	r2, [pc, #40]	@ (8016974 <prvHeapInit+0xb8>)
 801694a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	685b      	ldr	r3, [r3, #4]
 8016950:	4a09      	ldr	r2, [pc, #36]	@ (8016978 <prvHeapInit+0xbc>)
 8016952:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016954:	4b09      	ldr	r3, [pc, #36]	@ (801697c <prvHeapInit+0xc0>)
 8016956:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801695a:	601a      	str	r2, [r3, #0]
}
 801695c:	bf00      	nop
 801695e:	3714      	adds	r7, #20
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr
 8016968:	20001b4c 	.word	0x20001b4c
 801696c:	20011b4c 	.word	0x20011b4c
 8016970:	20011b54 	.word	0x20011b54
 8016974:	20011b5c 	.word	0x20011b5c
 8016978:	20011b58 	.word	0x20011b58
 801697c:	20011b60 	.word	0x20011b60

08016980 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016980:	b480      	push	{r7}
 8016982:	b085      	sub	sp, #20
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016988:	4b28      	ldr	r3, [pc, #160]	@ (8016a2c <prvInsertBlockIntoFreeList+0xac>)
 801698a:	60fb      	str	r3, [r7, #12]
 801698c:	e002      	b.n	8016994 <prvInsertBlockIntoFreeList+0x14>
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	429a      	cmp	r2, r3
 801699c:	d8f7      	bhi.n	801698e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	68ba      	ldr	r2, [r7, #8]
 80169a8:	4413      	add	r3, r2
 80169aa:	687a      	ldr	r2, [r7, #4]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d108      	bne.n	80169c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	685a      	ldr	r2, [r3, #4]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	441a      	add	r2, r3
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	68ba      	ldr	r2, [r7, #8]
 80169cc:	441a      	add	r2, r3
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d118      	bne.n	8016a08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	681a      	ldr	r2, [r3, #0]
 80169da:	4b15      	ldr	r3, [pc, #84]	@ (8016a30 <prvInsertBlockIntoFreeList+0xb0>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	429a      	cmp	r2, r3
 80169e0:	d00d      	beq.n	80169fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	685a      	ldr	r2, [r3, #4]
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	685b      	ldr	r3, [r3, #4]
 80169ec:	441a      	add	r2, r3
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	681a      	ldr	r2, [r3, #0]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	601a      	str	r2, [r3, #0]
 80169fc:	e008      	b.n	8016a10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80169fe:	4b0c      	ldr	r3, [pc, #48]	@ (8016a30 <prvInsertBlockIntoFreeList+0xb0>)
 8016a00:	681a      	ldr	r2, [r3, #0]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	601a      	str	r2, [r3, #0]
 8016a06:	e003      	b.n	8016a10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	681a      	ldr	r2, [r3, #0]
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016a10:	68fa      	ldr	r2, [r7, #12]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d002      	beq.n	8016a1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	687a      	ldr	r2, [r7, #4]
 8016a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016a1e:	bf00      	nop
 8016a20:	3714      	adds	r7, #20
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr
 8016a2a:	bf00      	nop
 8016a2c:	20011b4c 	.word	0x20011b4c
 8016a30:	20011b54 	.word	0x20011b54

08016a34 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b082      	sub	sp, #8
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7fa fc88 	bl	8011358 <USBH_LL_IncTimer>
}
 8016a48:	bf00      	nop
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7fa fcc8 	bl	80113f4 <USBH_LL_Connect>
}
 8016a64:	bf00      	nop
 8016a66:	3708      	adds	r7, #8
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7fa fcd5 	bl	801142a <USBH_LL_Disconnect>
}
 8016a80:	bf00      	nop
 8016a82:	3708      	adds	r7, #8
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	460b      	mov	r3, r1
 8016a92:	70fb      	strb	r3, [r7, #3]
 8016a94:	4613      	mov	r3, r2
 8016a96:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7fa fd14 	bl	80114cc <USBH_LL_NotifyURBChange>
#endif
}
 8016aa4:	bf00      	nop
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fa fc76 	bl	80113ac <USBH_LL_PortEnabled>
}
 8016ac0:	bf00      	nop
 8016ac2:	3708      	adds	r7, #8
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7fa fc7a 	bl	80113d0 <USBH_LL_PortDisabled>
}
 8016adc:	bf00      	nop
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aec:	2300      	movs	r3, #0
 8016aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7f1 fa0d 	bl	8007f1a <HAL_HCD_Stop>
 8016b00:	4603      	mov	r3, r0
 8016b02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016b04:	7bfb      	ldrb	r3, [r7, #15]
 8016b06:	4618      	mov	r0, r3
 8016b08:	f000 f808 	bl	8016b1c <USBH_Get_USB_Status>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3710      	adds	r7, #16
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
	...

08016b1c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b085      	sub	sp, #20
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	4603      	mov	r3, r0
 8016b24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016b26:	2300      	movs	r3, #0
 8016b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016b2a:	79fb      	ldrb	r3, [r7, #7]
 8016b2c:	2b03      	cmp	r3, #3
 8016b2e:	d817      	bhi.n	8016b60 <USBH_Get_USB_Status+0x44>
 8016b30:	a201      	add	r2, pc, #4	@ (adr r2, 8016b38 <USBH_Get_USB_Status+0x1c>)
 8016b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b36:	bf00      	nop
 8016b38:	08016b49 	.word	0x08016b49
 8016b3c:	08016b4f 	.word	0x08016b4f
 8016b40:	08016b55 	.word	0x08016b55
 8016b44:	08016b5b 	.word	0x08016b5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8016b4c:	e00b      	b.n	8016b66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8016b4e:	2302      	movs	r3, #2
 8016b50:	73fb      	strb	r3, [r7, #15]
    break;
 8016b52:	e008      	b.n	8016b66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8016b54:	2301      	movs	r3, #1
 8016b56:	73fb      	strb	r3, [r7, #15]
    break;
 8016b58:	e005      	b.n	8016b66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8016b5a:	2302      	movs	r3, #2
 8016b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8016b5e:	e002      	b.n	8016b66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8016b60:	2302      	movs	r3, #2
 8016b62:	73fb      	strb	r3, [r7, #15]
    break;
 8016b64:	bf00      	nop
  }
  return usb_status;
 8016b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b68:	4618      	mov	r0, r3
 8016b6a:	3714      	adds	r7, #20
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b72:	4770      	bx	lr

08016b74 <sbrk_aligned>:
 8016b74:	b570      	push	{r4, r5, r6, lr}
 8016b76:	4e0f      	ldr	r6, [pc, #60]	@ (8016bb4 <sbrk_aligned+0x40>)
 8016b78:	460c      	mov	r4, r1
 8016b7a:	6831      	ldr	r1, [r6, #0]
 8016b7c:	4605      	mov	r5, r0
 8016b7e:	b911      	cbnz	r1, 8016b86 <sbrk_aligned+0x12>
 8016b80:	f000 fab8 	bl	80170f4 <_sbrk_r>
 8016b84:	6030      	str	r0, [r6, #0]
 8016b86:	4621      	mov	r1, r4
 8016b88:	4628      	mov	r0, r5
 8016b8a:	f000 fab3 	bl	80170f4 <_sbrk_r>
 8016b8e:	1c43      	adds	r3, r0, #1
 8016b90:	d103      	bne.n	8016b9a <sbrk_aligned+0x26>
 8016b92:	f04f 34ff 	mov.w	r4, #4294967295
 8016b96:	4620      	mov	r0, r4
 8016b98:	bd70      	pop	{r4, r5, r6, pc}
 8016b9a:	1cc4      	adds	r4, r0, #3
 8016b9c:	f024 0403 	bic.w	r4, r4, #3
 8016ba0:	42a0      	cmp	r0, r4
 8016ba2:	d0f8      	beq.n	8016b96 <sbrk_aligned+0x22>
 8016ba4:	1a21      	subs	r1, r4, r0
 8016ba6:	4628      	mov	r0, r5
 8016ba8:	f000 faa4 	bl	80170f4 <_sbrk_r>
 8016bac:	3001      	adds	r0, #1
 8016bae:	d1f2      	bne.n	8016b96 <sbrk_aligned+0x22>
 8016bb0:	e7ef      	b.n	8016b92 <sbrk_aligned+0x1e>
 8016bb2:	bf00      	nop
 8016bb4:	20011f44 	.word	0x20011f44

08016bb8 <_malloc_r>:
 8016bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bbc:	1ccd      	adds	r5, r1, #3
 8016bbe:	f025 0503 	bic.w	r5, r5, #3
 8016bc2:	3508      	adds	r5, #8
 8016bc4:	2d0c      	cmp	r5, #12
 8016bc6:	bf38      	it	cc
 8016bc8:	250c      	movcc	r5, #12
 8016bca:	2d00      	cmp	r5, #0
 8016bcc:	4606      	mov	r6, r0
 8016bce:	db01      	blt.n	8016bd4 <_malloc_r+0x1c>
 8016bd0:	42a9      	cmp	r1, r5
 8016bd2:	d904      	bls.n	8016bde <_malloc_r+0x26>
 8016bd4:	230c      	movs	r3, #12
 8016bd6:	6033      	str	r3, [r6, #0]
 8016bd8:	2000      	movs	r0, #0
 8016bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016cb4 <_malloc_r+0xfc>
 8016be2:	f000 f869 	bl	8016cb8 <__malloc_lock>
 8016be6:	f8d8 3000 	ldr.w	r3, [r8]
 8016bea:	461c      	mov	r4, r3
 8016bec:	bb44      	cbnz	r4, 8016c40 <_malloc_r+0x88>
 8016bee:	4629      	mov	r1, r5
 8016bf0:	4630      	mov	r0, r6
 8016bf2:	f7ff ffbf 	bl	8016b74 <sbrk_aligned>
 8016bf6:	1c43      	adds	r3, r0, #1
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	d158      	bne.n	8016cae <_malloc_r+0xf6>
 8016bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8016c00:	4627      	mov	r7, r4
 8016c02:	2f00      	cmp	r7, #0
 8016c04:	d143      	bne.n	8016c8e <_malloc_r+0xd6>
 8016c06:	2c00      	cmp	r4, #0
 8016c08:	d04b      	beq.n	8016ca2 <_malloc_r+0xea>
 8016c0a:	6823      	ldr	r3, [r4, #0]
 8016c0c:	4639      	mov	r1, r7
 8016c0e:	4630      	mov	r0, r6
 8016c10:	eb04 0903 	add.w	r9, r4, r3
 8016c14:	f000 fa6e 	bl	80170f4 <_sbrk_r>
 8016c18:	4581      	cmp	r9, r0
 8016c1a:	d142      	bne.n	8016ca2 <_malloc_r+0xea>
 8016c1c:	6821      	ldr	r1, [r4, #0]
 8016c1e:	1a6d      	subs	r5, r5, r1
 8016c20:	4629      	mov	r1, r5
 8016c22:	4630      	mov	r0, r6
 8016c24:	f7ff ffa6 	bl	8016b74 <sbrk_aligned>
 8016c28:	3001      	adds	r0, #1
 8016c2a:	d03a      	beq.n	8016ca2 <_malloc_r+0xea>
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	442b      	add	r3, r5
 8016c30:	6023      	str	r3, [r4, #0]
 8016c32:	f8d8 3000 	ldr.w	r3, [r8]
 8016c36:	685a      	ldr	r2, [r3, #4]
 8016c38:	bb62      	cbnz	r2, 8016c94 <_malloc_r+0xdc>
 8016c3a:	f8c8 7000 	str.w	r7, [r8]
 8016c3e:	e00f      	b.n	8016c60 <_malloc_r+0xa8>
 8016c40:	6822      	ldr	r2, [r4, #0]
 8016c42:	1b52      	subs	r2, r2, r5
 8016c44:	d420      	bmi.n	8016c88 <_malloc_r+0xd0>
 8016c46:	2a0b      	cmp	r2, #11
 8016c48:	d917      	bls.n	8016c7a <_malloc_r+0xc2>
 8016c4a:	1961      	adds	r1, r4, r5
 8016c4c:	42a3      	cmp	r3, r4
 8016c4e:	6025      	str	r5, [r4, #0]
 8016c50:	bf18      	it	ne
 8016c52:	6059      	strne	r1, [r3, #4]
 8016c54:	6863      	ldr	r3, [r4, #4]
 8016c56:	bf08      	it	eq
 8016c58:	f8c8 1000 	streq.w	r1, [r8]
 8016c5c:	5162      	str	r2, [r4, r5]
 8016c5e:	604b      	str	r3, [r1, #4]
 8016c60:	4630      	mov	r0, r6
 8016c62:	f000 f82f 	bl	8016cc4 <__malloc_unlock>
 8016c66:	f104 000b 	add.w	r0, r4, #11
 8016c6a:	1d23      	adds	r3, r4, #4
 8016c6c:	f020 0007 	bic.w	r0, r0, #7
 8016c70:	1ac2      	subs	r2, r0, r3
 8016c72:	bf1c      	itt	ne
 8016c74:	1a1b      	subne	r3, r3, r0
 8016c76:	50a3      	strne	r3, [r4, r2]
 8016c78:	e7af      	b.n	8016bda <_malloc_r+0x22>
 8016c7a:	6862      	ldr	r2, [r4, #4]
 8016c7c:	42a3      	cmp	r3, r4
 8016c7e:	bf0c      	ite	eq
 8016c80:	f8c8 2000 	streq.w	r2, [r8]
 8016c84:	605a      	strne	r2, [r3, #4]
 8016c86:	e7eb      	b.n	8016c60 <_malloc_r+0xa8>
 8016c88:	4623      	mov	r3, r4
 8016c8a:	6864      	ldr	r4, [r4, #4]
 8016c8c:	e7ae      	b.n	8016bec <_malloc_r+0x34>
 8016c8e:	463c      	mov	r4, r7
 8016c90:	687f      	ldr	r7, [r7, #4]
 8016c92:	e7b6      	b.n	8016c02 <_malloc_r+0x4a>
 8016c94:	461a      	mov	r2, r3
 8016c96:	685b      	ldr	r3, [r3, #4]
 8016c98:	42a3      	cmp	r3, r4
 8016c9a:	d1fb      	bne.n	8016c94 <_malloc_r+0xdc>
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	6053      	str	r3, [r2, #4]
 8016ca0:	e7de      	b.n	8016c60 <_malloc_r+0xa8>
 8016ca2:	230c      	movs	r3, #12
 8016ca4:	6033      	str	r3, [r6, #0]
 8016ca6:	4630      	mov	r0, r6
 8016ca8:	f000 f80c 	bl	8016cc4 <__malloc_unlock>
 8016cac:	e794      	b.n	8016bd8 <_malloc_r+0x20>
 8016cae:	6005      	str	r5, [r0, #0]
 8016cb0:	e7d6      	b.n	8016c60 <_malloc_r+0xa8>
 8016cb2:	bf00      	nop
 8016cb4:	20011f48 	.word	0x20011f48

08016cb8 <__malloc_lock>:
 8016cb8:	4801      	ldr	r0, [pc, #4]	@ (8016cc0 <__malloc_lock+0x8>)
 8016cba:	f000 ba68 	b.w	801718e <__retarget_lock_acquire_recursive>
 8016cbe:	bf00      	nop
 8016cc0:	2001208c 	.word	0x2001208c

08016cc4 <__malloc_unlock>:
 8016cc4:	4801      	ldr	r0, [pc, #4]	@ (8016ccc <__malloc_unlock+0x8>)
 8016cc6:	f000 ba63 	b.w	8017190 <__retarget_lock_release_recursive>
 8016cca:	bf00      	nop
 8016ccc:	2001208c 	.word	0x2001208c

08016cd0 <std>:
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	b510      	push	{r4, lr}
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8016cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cde:	6083      	str	r3, [r0, #8]
 8016ce0:	8181      	strh	r1, [r0, #12]
 8016ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ce4:	81c2      	strh	r2, [r0, #14]
 8016ce6:	6183      	str	r3, [r0, #24]
 8016ce8:	4619      	mov	r1, r3
 8016cea:	2208      	movs	r2, #8
 8016cec:	305c      	adds	r0, #92	@ 0x5c
 8016cee:	f000 f99b 	bl	8017028 <memset>
 8016cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8016d28 <std+0x58>)
 8016cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8016d2c <std+0x5c>)
 8016cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8016d30 <std+0x60>)
 8016cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8016d34 <std+0x64>)
 8016d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8016d02:	4b0d      	ldr	r3, [pc, #52]	@ (8016d38 <std+0x68>)
 8016d04:	6224      	str	r4, [r4, #32]
 8016d06:	429c      	cmp	r4, r3
 8016d08:	d006      	beq.n	8016d18 <std+0x48>
 8016d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016d0e:	4294      	cmp	r4, r2
 8016d10:	d002      	beq.n	8016d18 <std+0x48>
 8016d12:	33d0      	adds	r3, #208	@ 0xd0
 8016d14:	429c      	cmp	r4, r3
 8016d16:	d105      	bne.n	8016d24 <std+0x54>
 8016d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d20:	f000 ba34 	b.w	801718c <__retarget_lock_init_recursive>
 8016d24:	bd10      	pop	{r4, pc}
 8016d26:	bf00      	nop
 8016d28:	08016f29 	.word	0x08016f29
 8016d2c:	08016f4b 	.word	0x08016f4b
 8016d30:	08016f83 	.word	0x08016f83
 8016d34:	08016fa7 	.word	0x08016fa7
 8016d38:	20011f4c 	.word	0x20011f4c

08016d3c <stdio_exit_handler>:
 8016d3c:	4a02      	ldr	r2, [pc, #8]	@ (8016d48 <stdio_exit_handler+0xc>)
 8016d3e:	4903      	ldr	r1, [pc, #12]	@ (8016d4c <stdio_exit_handler+0x10>)
 8016d40:	4803      	ldr	r0, [pc, #12]	@ (8016d50 <stdio_exit_handler+0x14>)
 8016d42:	f000 b869 	b.w	8016e18 <_fwalk_sglue>
 8016d46:	bf00      	nop
 8016d48:	20000074 	.word	0x20000074
 8016d4c:	08017b99 	.word	0x08017b99
 8016d50:	20000084 	.word	0x20000084

08016d54 <cleanup_stdio>:
 8016d54:	6841      	ldr	r1, [r0, #4]
 8016d56:	4b0c      	ldr	r3, [pc, #48]	@ (8016d88 <cleanup_stdio+0x34>)
 8016d58:	4299      	cmp	r1, r3
 8016d5a:	b510      	push	{r4, lr}
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	d001      	beq.n	8016d64 <cleanup_stdio+0x10>
 8016d60:	f000 ff1a 	bl	8017b98 <_fflush_r>
 8016d64:	68a1      	ldr	r1, [r4, #8]
 8016d66:	4b09      	ldr	r3, [pc, #36]	@ (8016d8c <cleanup_stdio+0x38>)
 8016d68:	4299      	cmp	r1, r3
 8016d6a:	d002      	beq.n	8016d72 <cleanup_stdio+0x1e>
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	f000 ff13 	bl	8017b98 <_fflush_r>
 8016d72:	68e1      	ldr	r1, [r4, #12]
 8016d74:	4b06      	ldr	r3, [pc, #24]	@ (8016d90 <cleanup_stdio+0x3c>)
 8016d76:	4299      	cmp	r1, r3
 8016d78:	d004      	beq.n	8016d84 <cleanup_stdio+0x30>
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d80:	f000 bf0a 	b.w	8017b98 <_fflush_r>
 8016d84:	bd10      	pop	{r4, pc}
 8016d86:	bf00      	nop
 8016d88:	20011f4c 	.word	0x20011f4c
 8016d8c:	20011fb4 	.word	0x20011fb4
 8016d90:	2001201c 	.word	0x2001201c

08016d94 <global_stdio_init.part.0>:
 8016d94:	b510      	push	{r4, lr}
 8016d96:	4b0b      	ldr	r3, [pc, #44]	@ (8016dc4 <global_stdio_init.part.0+0x30>)
 8016d98:	4c0b      	ldr	r4, [pc, #44]	@ (8016dc8 <global_stdio_init.part.0+0x34>)
 8016d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8016dcc <global_stdio_init.part.0+0x38>)
 8016d9c:	601a      	str	r2, [r3, #0]
 8016d9e:	4620      	mov	r0, r4
 8016da0:	2200      	movs	r2, #0
 8016da2:	2104      	movs	r1, #4
 8016da4:	f7ff ff94 	bl	8016cd0 <std>
 8016da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016dac:	2201      	movs	r2, #1
 8016dae:	2109      	movs	r1, #9
 8016db0:	f7ff ff8e 	bl	8016cd0 <std>
 8016db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016db8:	2202      	movs	r2, #2
 8016dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dbe:	2112      	movs	r1, #18
 8016dc0:	f7ff bf86 	b.w	8016cd0 <std>
 8016dc4:	20012084 	.word	0x20012084
 8016dc8:	20011f4c 	.word	0x20011f4c
 8016dcc:	08016d3d 	.word	0x08016d3d

08016dd0 <__sfp_lock_acquire>:
 8016dd0:	4801      	ldr	r0, [pc, #4]	@ (8016dd8 <__sfp_lock_acquire+0x8>)
 8016dd2:	f000 b9dc 	b.w	801718e <__retarget_lock_acquire_recursive>
 8016dd6:	bf00      	nop
 8016dd8:	2001208d 	.word	0x2001208d

08016ddc <__sfp_lock_release>:
 8016ddc:	4801      	ldr	r0, [pc, #4]	@ (8016de4 <__sfp_lock_release+0x8>)
 8016dde:	f000 b9d7 	b.w	8017190 <__retarget_lock_release_recursive>
 8016de2:	bf00      	nop
 8016de4:	2001208d 	.word	0x2001208d

08016de8 <__sinit>:
 8016de8:	b510      	push	{r4, lr}
 8016dea:	4604      	mov	r4, r0
 8016dec:	f7ff fff0 	bl	8016dd0 <__sfp_lock_acquire>
 8016df0:	6a23      	ldr	r3, [r4, #32]
 8016df2:	b11b      	cbz	r3, 8016dfc <__sinit+0x14>
 8016df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016df8:	f7ff bff0 	b.w	8016ddc <__sfp_lock_release>
 8016dfc:	4b04      	ldr	r3, [pc, #16]	@ (8016e10 <__sinit+0x28>)
 8016dfe:	6223      	str	r3, [r4, #32]
 8016e00:	4b04      	ldr	r3, [pc, #16]	@ (8016e14 <__sinit+0x2c>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d1f5      	bne.n	8016df4 <__sinit+0xc>
 8016e08:	f7ff ffc4 	bl	8016d94 <global_stdio_init.part.0>
 8016e0c:	e7f2      	b.n	8016df4 <__sinit+0xc>
 8016e0e:	bf00      	nop
 8016e10:	08016d55 	.word	0x08016d55
 8016e14:	20012084 	.word	0x20012084

08016e18 <_fwalk_sglue>:
 8016e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e1c:	4607      	mov	r7, r0
 8016e1e:	4688      	mov	r8, r1
 8016e20:	4614      	mov	r4, r2
 8016e22:	2600      	movs	r6, #0
 8016e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e28:	f1b9 0901 	subs.w	r9, r9, #1
 8016e2c:	d505      	bpl.n	8016e3a <_fwalk_sglue+0x22>
 8016e2e:	6824      	ldr	r4, [r4, #0]
 8016e30:	2c00      	cmp	r4, #0
 8016e32:	d1f7      	bne.n	8016e24 <_fwalk_sglue+0xc>
 8016e34:	4630      	mov	r0, r6
 8016e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e3a:	89ab      	ldrh	r3, [r5, #12]
 8016e3c:	2b01      	cmp	r3, #1
 8016e3e:	d907      	bls.n	8016e50 <_fwalk_sglue+0x38>
 8016e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e44:	3301      	adds	r3, #1
 8016e46:	d003      	beq.n	8016e50 <_fwalk_sglue+0x38>
 8016e48:	4629      	mov	r1, r5
 8016e4a:	4638      	mov	r0, r7
 8016e4c:	47c0      	blx	r8
 8016e4e:	4306      	orrs	r6, r0
 8016e50:	3568      	adds	r5, #104	@ 0x68
 8016e52:	e7e9      	b.n	8016e28 <_fwalk_sglue+0x10>

08016e54 <iprintf>:
 8016e54:	b40f      	push	{r0, r1, r2, r3}
 8016e56:	b507      	push	{r0, r1, r2, lr}
 8016e58:	4906      	ldr	r1, [pc, #24]	@ (8016e74 <iprintf+0x20>)
 8016e5a:	ab04      	add	r3, sp, #16
 8016e5c:	6808      	ldr	r0, [r1, #0]
 8016e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e62:	6881      	ldr	r1, [r0, #8]
 8016e64:	9301      	str	r3, [sp, #4]
 8016e66:	f000 fb6f 	bl	8017548 <_vfiprintf_r>
 8016e6a:	b003      	add	sp, #12
 8016e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e70:	b004      	add	sp, #16
 8016e72:	4770      	bx	lr
 8016e74:	20000080 	.word	0x20000080

08016e78 <sniprintf>:
 8016e78:	b40c      	push	{r2, r3}
 8016e7a:	b530      	push	{r4, r5, lr}
 8016e7c:	4b18      	ldr	r3, [pc, #96]	@ (8016ee0 <sniprintf+0x68>)
 8016e7e:	1e0c      	subs	r4, r1, #0
 8016e80:	681d      	ldr	r5, [r3, #0]
 8016e82:	b09d      	sub	sp, #116	@ 0x74
 8016e84:	da08      	bge.n	8016e98 <sniprintf+0x20>
 8016e86:	238b      	movs	r3, #139	@ 0x8b
 8016e88:	602b      	str	r3, [r5, #0]
 8016e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8016e8e:	b01d      	add	sp, #116	@ 0x74
 8016e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e94:	b002      	add	sp, #8
 8016e96:	4770      	bx	lr
 8016e98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016e9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ea0:	f04f 0300 	mov.w	r3, #0
 8016ea4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016ea6:	bf14      	ite	ne
 8016ea8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016eac:	4623      	moveq	r3, r4
 8016eae:	9304      	str	r3, [sp, #16]
 8016eb0:	9307      	str	r3, [sp, #28]
 8016eb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016eb6:	9002      	str	r0, [sp, #8]
 8016eb8:	9006      	str	r0, [sp, #24]
 8016eba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016ebe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016ec0:	ab21      	add	r3, sp, #132	@ 0x84
 8016ec2:	a902      	add	r1, sp, #8
 8016ec4:	4628      	mov	r0, r5
 8016ec6:	9301      	str	r3, [sp, #4]
 8016ec8:	f000 fa18 	bl	80172fc <_svfiprintf_r>
 8016ecc:	1c43      	adds	r3, r0, #1
 8016ece:	bfbc      	itt	lt
 8016ed0:	238b      	movlt	r3, #139	@ 0x8b
 8016ed2:	602b      	strlt	r3, [r5, #0]
 8016ed4:	2c00      	cmp	r4, #0
 8016ed6:	d0da      	beq.n	8016e8e <sniprintf+0x16>
 8016ed8:	9b02      	ldr	r3, [sp, #8]
 8016eda:	2200      	movs	r2, #0
 8016edc:	701a      	strb	r2, [r3, #0]
 8016ede:	e7d6      	b.n	8016e8e <sniprintf+0x16>
 8016ee0:	20000080 	.word	0x20000080

08016ee4 <siprintf>:
 8016ee4:	b40e      	push	{r1, r2, r3}
 8016ee6:	b510      	push	{r4, lr}
 8016ee8:	b09d      	sub	sp, #116	@ 0x74
 8016eea:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016eec:	9002      	str	r0, [sp, #8]
 8016eee:	9006      	str	r0, [sp, #24]
 8016ef0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016ef4:	480a      	ldr	r0, [pc, #40]	@ (8016f20 <siprintf+0x3c>)
 8016ef6:	9107      	str	r1, [sp, #28]
 8016ef8:	9104      	str	r1, [sp, #16]
 8016efa:	490a      	ldr	r1, [pc, #40]	@ (8016f24 <siprintf+0x40>)
 8016efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f00:	9105      	str	r1, [sp, #20]
 8016f02:	2400      	movs	r4, #0
 8016f04:	a902      	add	r1, sp, #8
 8016f06:	6800      	ldr	r0, [r0, #0]
 8016f08:	9301      	str	r3, [sp, #4]
 8016f0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016f0c:	f000 f9f6 	bl	80172fc <_svfiprintf_r>
 8016f10:	9b02      	ldr	r3, [sp, #8]
 8016f12:	701c      	strb	r4, [r3, #0]
 8016f14:	b01d      	add	sp, #116	@ 0x74
 8016f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f1a:	b003      	add	sp, #12
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop
 8016f20:	20000080 	.word	0x20000080
 8016f24:	ffff0208 	.word	0xffff0208

08016f28 <__sread>:
 8016f28:	b510      	push	{r4, lr}
 8016f2a:	460c      	mov	r4, r1
 8016f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f30:	f000 f8ce 	bl	80170d0 <_read_r>
 8016f34:	2800      	cmp	r0, #0
 8016f36:	bfab      	itete	ge
 8016f38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8016f3c:	181b      	addge	r3, r3, r0
 8016f3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f42:	bfac      	ite	ge
 8016f44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f46:	81a3      	strhlt	r3, [r4, #12]
 8016f48:	bd10      	pop	{r4, pc}

08016f4a <__swrite>:
 8016f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f4e:	461f      	mov	r7, r3
 8016f50:	898b      	ldrh	r3, [r1, #12]
 8016f52:	05db      	lsls	r3, r3, #23
 8016f54:	4605      	mov	r5, r0
 8016f56:	460c      	mov	r4, r1
 8016f58:	4616      	mov	r6, r2
 8016f5a:	d505      	bpl.n	8016f68 <__swrite+0x1e>
 8016f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f60:	2302      	movs	r3, #2
 8016f62:	2200      	movs	r2, #0
 8016f64:	f000 f8a2 	bl	80170ac <_lseek_r>
 8016f68:	89a3      	ldrh	r3, [r4, #12]
 8016f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f72:	81a3      	strh	r3, [r4, #12]
 8016f74:	4632      	mov	r2, r6
 8016f76:	463b      	mov	r3, r7
 8016f78:	4628      	mov	r0, r5
 8016f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f7e:	f000 b8c9 	b.w	8017114 <_write_r>

08016f82 <__sseek>:
 8016f82:	b510      	push	{r4, lr}
 8016f84:	460c      	mov	r4, r1
 8016f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f8a:	f000 f88f 	bl	80170ac <_lseek_r>
 8016f8e:	1c43      	adds	r3, r0, #1
 8016f90:	89a3      	ldrh	r3, [r4, #12]
 8016f92:	bf15      	itete	ne
 8016f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016f9e:	81a3      	strheq	r3, [r4, #12]
 8016fa0:	bf18      	it	ne
 8016fa2:	81a3      	strhne	r3, [r4, #12]
 8016fa4:	bd10      	pop	{r4, pc}

08016fa6 <__sclose>:
 8016fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016faa:	f000 b86f 	b.w	801708c <_close_r>

08016fae <_vsniprintf_r>:
 8016fae:	b530      	push	{r4, r5, lr}
 8016fb0:	4614      	mov	r4, r2
 8016fb2:	2c00      	cmp	r4, #0
 8016fb4:	b09b      	sub	sp, #108	@ 0x6c
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	461a      	mov	r2, r3
 8016fba:	da05      	bge.n	8016fc8 <_vsniprintf_r+0x1a>
 8016fbc:	238b      	movs	r3, #139	@ 0x8b
 8016fbe:	6003      	str	r3, [r0, #0]
 8016fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc4:	b01b      	add	sp, #108	@ 0x6c
 8016fc6:	bd30      	pop	{r4, r5, pc}
 8016fc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016fcc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016fd0:	f04f 0300 	mov.w	r3, #0
 8016fd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8016fd6:	bf14      	ite	ne
 8016fd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016fdc:	4623      	moveq	r3, r4
 8016fde:	9302      	str	r3, [sp, #8]
 8016fe0:	9305      	str	r3, [sp, #20]
 8016fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016fe6:	9100      	str	r1, [sp, #0]
 8016fe8:	9104      	str	r1, [sp, #16]
 8016fea:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016fee:	4669      	mov	r1, sp
 8016ff0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016ff2:	f000 f983 	bl	80172fc <_svfiprintf_r>
 8016ff6:	1c43      	adds	r3, r0, #1
 8016ff8:	bfbc      	itt	lt
 8016ffa:	238b      	movlt	r3, #139	@ 0x8b
 8016ffc:	602b      	strlt	r3, [r5, #0]
 8016ffe:	2c00      	cmp	r4, #0
 8017000:	d0e0      	beq.n	8016fc4 <_vsniprintf_r+0x16>
 8017002:	9b00      	ldr	r3, [sp, #0]
 8017004:	2200      	movs	r2, #0
 8017006:	701a      	strb	r2, [r3, #0]
 8017008:	e7dc      	b.n	8016fc4 <_vsniprintf_r+0x16>
	...

0801700c <vsniprintf>:
 801700c:	b507      	push	{r0, r1, r2, lr}
 801700e:	9300      	str	r3, [sp, #0]
 8017010:	4613      	mov	r3, r2
 8017012:	460a      	mov	r2, r1
 8017014:	4601      	mov	r1, r0
 8017016:	4803      	ldr	r0, [pc, #12]	@ (8017024 <vsniprintf+0x18>)
 8017018:	6800      	ldr	r0, [r0, #0]
 801701a:	f7ff ffc8 	bl	8016fae <_vsniprintf_r>
 801701e:	b003      	add	sp, #12
 8017020:	f85d fb04 	ldr.w	pc, [sp], #4
 8017024:	20000080 	.word	0x20000080

08017028 <memset>:
 8017028:	4402      	add	r2, r0
 801702a:	4603      	mov	r3, r0
 801702c:	4293      	cmp	r3, r2
 801702e:	d100      	bne.n	8017032 <memset+0xa>
 8017030:	4770      	bx	lr
 8017032:	f803 1b01 	strb.w	r1, [r3], #1
 8017036:	e7f9      	b.n	801702c <memset+0x4>

08017038 <strncpy>:
 8017038:	b510      	push	{r4, lr}
 801703a:	3901      	subs	r1, #1
 801703c:	4603      	mov	r3, r0
 801703e:	b132      	cbz	r2, 801704e <strncpy+0x16>
 8017040:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017044:	f803 4b01 	strb.w	r4, [r3], #1
 8017048:	3a01      	subs	r2, #1
 801704a:	2c00      	cmp	r4, #0
 801704c:	d1f7      	bne.n	801703e <strncpy+0x6>
 801704e:	441a      	add	r2, r3
 8017050:	2100      	movs	r1, #0
 8017052:	4293      	cmp	r3, r2
 8017054:	d100      	bne.n	8017058 <strncpy+0x20>
 8017056:	bd10      	pop	{r4, pc}
 8017058:	f803 1b01 	strb.w	r1, [r3], #1
 801705c:	e7f9      	b.n	8017052 <strncpy+0x1a>

0801705e <strstr>:
 801705e:	780a      	ldrb	r2, [r1, #0]
 8017060:	b570      	push	{r4, r5, r6, lr}
 8017062:	b96a      	cbnz	r2, 8017080 <strstr+0x22>
 8017064:	bd70      	pop	{r4, r5, r6, pc}
 8017066:	429a      	cmp	r2, r3
 8017068:	d109      	bne.n	801707e <strstr+0x20>
 801706a:	460c      	mov	r4, r1
 801706c:	4605      	mov	r5, r0
 801706e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017072:	2b00      	cmp	r3, #0
 8017074:	d0f6      	beq.n	8017064 <strstr+0x6>
 8017076:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801707a:	429e      	cmp	r6, r3
 801707c:	d0f7      	beq.n	801706e <strstr+0x10>
 801707e:	3001      	adds	r0, #1
 8017080:	7803      	ldrb	r3, [r0, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d1ef      	bne.n	8017066 <strstr+0x8>
 8017086:	4618      	mov	r0, r3
 8017088:	e7ec      	b.n	8017064 <strstr+0x6>
	...

0801708c <_close_r>:
 801708c:	b538      	push	{r3, r4, r5, lr}
 801708e:	4d06      	ldr	r5, [pc, #24]	@ (80170a8 <_close_r+0x1c>)
 8017090:	2300      	movs	r3, #0
 8017092:	4604      	mov	r4, r0
 8017094:	4608      	mov	r0, r1
 8017096:	602b      	str	r3, [r5, #0]
 8017098:	f7ed feef 	bl	8004e7a <_close>
 801709c:	1c43      	adds	r3, r0, #1
 801709e:	d102      	bne.n	80170a6 <_close_r+0x1a>
 80170a0:	682b      	ldr	r3, [r5, #0]
 80170a2:	b103      	cbz	r3, 80170a6 <_close_r+0x1a>
 80170a4:	6023      	str	r3, [r4, #0]
 80170a6:	bd38      	pop	{r3, r4, r5, pc}
 80170a8:	20012088 	.word	0x20012088

080170ac <_lseek_r>:
 80170ac:	b538      	push	{r3, r4, r5, lr}
 80170ae:	4d07      	ldr	r5, [pc, #28]	@ (80170cc <_lseek_r+0x20>)
 80170b0:	4604      	mov	r4, r0
 80170b2:	4608      	mov	r0, r1
 80170b4:	4611      	mov	r1, r2
 80170b6:	2200      	movs	r2, #0
 80170b8:	602a      	str	r2, [r5, #0]
 80170ba:	461a      	mov	r2, r3
 80170bc:	f7ed ff04 	bl	8004ec8 <_lseek>
 80170c0:	1c43      	adds	r3, r0, #1
 80170c2:	d102      	bne.n	80170ca <_lseek_r+0x1e>
 80170c4:	682b      	ldr	r3, [r5, #0]
 80170c6:	b103      	cbz	r3, 80170ca <_lseek_r+0x1e>
 80170c8:	6023      	str	r3, [r4, #0]
 80170ca:	bd38      	pop	{r3, r4, r5, pc}
 80170cc:	20012088 	.word	0x20012088

080170d0 <_read_r>:
 80170d0:	b538      	push	{r3, r4, r5, lr}
 80170d2:	4d07      	ldr	r5, [pc, #28]	@ (80170f0 <_read_r+0x20>)
 80170d4:	4604      	mov	r4, r0
 80170d6:	4608      	mov	r0, r1
 80170d8:	4611      	mov	r1, r2
 80170da:	2200      	movs	r2, #0
 80170dc:	602a      	str	r2, [r5, #0]
 80170de:	461a      	mov	r2, r3
 80170e0:	f7ed fe92 	bl	8004e08 <_read>
 80170e4:	1c43      	adds	r3, r0, #1
 80170e6:	d102      	bne.n	80170ee <_read_r+0x1e>
 80170e8:	682b      	ldr	r3, [r5, #0]
 80170ea:	b103      	cbz	r3, 80170ee <_read_r+0x1e>
 80170ec:	6023      	str	r3, [r4, #0]
 80170ee:	bd38      	pop	{r3, r4, r5, pc}
 80170f0:	20012088 	.word	0x20012088

080170f4 <_sbrk_r>:
 80170f4:	b538      	push	{r3, r4, r5, lr}
 80170f6:	4d06      	ldr	r5, [pc, #24]	@ (8017110 <_sbrk_r+0x1c>)
 80170f8:	2300      	movs	r3, #0
 80170fa:	4604      	mov	r4, r0
 80170fc:	4608      	mov	r0, r1
 80170fe:	602b      	str	r3, [r5, #0]
 8017100:	f7ed fef0 	bl	8004ee4 <_sbrk>
 8017104:	1c43      	adds	r3, r0, #1
 8017106:	d102      	bne.n	801710e <_sbrk_r+0x1a>
 8017108:	682b      	ldr	r3, [r5, #0]
 801710a:	b103      	cbz	r3, 801710e <_sbrk_r+0x1a>
 801710c:	6023      	str	r3, [r4, #0]
 801710e:	bd38      	pop	{r3, r4, r5, pc}
 8017110:	20012088 	.word	0x20012088

08017114 <_write_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	4d07      	ldr	r5, [pc, #28]	@ (8017134 <_write_r+0x20>)
 8017118:	4604      	mov	r4, r0
 801711a:	4608      	mov	r0, r1
 801711c:	4611      	mov	r1, r2
 801711e:	2200      	movs	r2, #0
 8017120:	602a      	str	r2, [r5, #0]
 8017122:	461a      	mov	r2, r3
 8017124:	f7ed fe8d 	bl	8004e42 <_write>
 8017128:	1c43      	adds	r3, r0, #1
 801712a:	d102      	bne.n	8017132 <_write_r+0x1e>
 801712c:	682b      	ldr	r3, [r5, #0]
 801712e:	b103      	cbz	r3, 8017132 <_write_r+0x1e>
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	bd38      	pop	{r3, r4, r5, pc}
 8017134:	20012088 	.word	0x20012088

08017138 <__errno>:
 8017138:	4b01      	ldr	r3, [pc, #4]	@ (8017140 <__errno+0x8>)
 801713a:	6818      	ldr	r0, [r3, #0]
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	20000080 	.word	0x20000080

08017144 <__libc_init_array>:
 8017144:	b570      	push	{r4, r5, r6, lr}
 8017146:	4d0d      	ldr	r5, [pc, #52]	@ (801717c <__libc_init_array+0x38>)
 8017148:	4c0d      	ldr	r4, [pc, #52]	@ (8017180 <__libc_init_array+0x3c>)
 801714a:	1b64      	subs	r4, r4, r5
 801714c:	10a4      	asrs	r4, r4, #2
 801714e:	2600      	movs	r6, #0
 8017150:	42a6      	cmp	r6, r4
 8017152:	d109      	bne.n	8017168 <__libc_init_array+0x24>
 8017154:	4d0b      	ldr	r5, [pc, #44]	@ (8017184 <__libc_init_array+0x40>)
 8017156:	4c0c      	ldr	r4, [pc, #48]	@ (8017188 <__libc_init_array+0x44>)
 8017158:	f000 feae 	bl	8017eb8 <_init>
 801715c:	1b64      	subs	r4, r4, r5
 801715e:	10a4      	asrs	r4, r4, #2
 8017160:	2600      	movs	r6, #0
 8017162:	42a6      	cmp	r6, r4
 8017164:	d105      	bne.n	8017172 <__libc_init_array+0x2e>
 8017166:	bd70      	pop	{r4, r5, r6, pc}
 8017168:	f855 3b04 	ldr.w	r3, [r5], #4
 801716c:	4798      	blx	r3
 801716e:	3601      	adds	r6, #1
 8017170:	e7ee      	b.n	8017150 <__libc_init_array+0xc>
 8017172:	f855 3b04 	ldr.w	r3, [r5], #4
 8017176:	4798      	blx	r3
 8017178:	3601      	adds	r6, #1
 801717a:	e7f2      	b.n	8017162 <__libc_init_array+0x1e>
 801717c:	0801b474 	.word	0x0801b474
 8017180:	0801b474 	.word	0x0801b474
 8017184:	0801b474 	.word	0x0801b474
 8017188:	0801b478 	.word	0x0801b478

0801718c <__retarget_lock_init_recursive>:
 801718c:	4770      	bx	lr

0801718e <__retarget_lock_acquire_recursive>:
 801718e:	4770      	bx	lr

08017190 <__retarget_lock_release_recursive>:
 8017190:	4770      	bx	lr

08017192 <memcpy>:
 8017192:	440a      	add	r2, r1
 8017194:	4291      	cmp	r1, r2
 8017196:	f100 33ff 	add.w	r3, r0, #4294967295
 801719a:	d100      	bne.n	801719e <memcpy+0xc>
 801719c:	4770      	bx	lr
 801719e:	b510      	push	{r4, lr}
 80171a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171a8:	4291      	cmp	r1, r2
 80171aa:	d1f9      	bne.n	80171a0 <memcpy+0xe>
 80171ac:	bd10      	pop	{r4, pc}
	...

080171b0 <_free_r>:
 80171b0:	b538      	push	{r3, r4, r5, lr}
 80171b2:	4605      	mov	r5, r0
 80171b4:	2900      	cmp	r1, #0
 80171b6:	d041      	beq.n	801723c <_free_r+0x8c>
 80171b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171bc:	1f0c      	subs	r4, r1, #4
 80171be:	2b00      	cmp	r3, #0
 80171c0:	bfb8      	it	lt
 80171c2:	18e4      	addlt	r4, r4, r3
 80171c4:	f7ff fd78 	bl	8016cb8 <__malloc_lock>
 80171c8:	4a1d      	ldr	r2, [pc, #116]	@ (8017240 <_free_r+0x90>)
 80171ca:	6813      	ldr	r3, [r2, #0]
 80171cc:	b933      	cbnz	r3, 80171dc <_free_r+0x2c>
 80171ce:	6063      	str	r3, [r4, #4]
 80171d0:	6014      	str	r4, [r2, #0]
 80171d2:	4628      	mov	r0, r5
 80171d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171d8:	f7ff bd74 	b.w	8016cc4 <__malloc_unlock>
 80171dc:	42a3      	cmp	r3, r4
 80171de:	d908      	bls.n	80171f2 <_free_r+0x42>
 80171e0:	6820      	ldr	r0, [r4, #0]
 80171e2:	1821      	adds	r1, r4, r0
 80171e4:	428b      	cmp	r3, r1
 80171e6:	bf01      	itttt	eq
 80171e8:	6819      	ldreq	r1, [r3, #0]
 80171ea:	685b      	ldreq	r3, [r3, #4]
 80171ec:	1809      	addeq	r1, r1, r0
 80171ee:	6021      	streq	r1, [r4, #0]
 80171f0:	e7ed      	b.n	80171ce <_free_r+0x1e>
 80171f2:	461a      	mov	r2, r3
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	b10b      	cbz	r3, 80171fc <_free_r+0x4c>
 80171f8:	42a3      	cmp	r3, r4
 80171fa:	d9fa      	bls.n	80171f2 <_free_r+0x42>
 80171fc:	6811      	ldr	r1, [r2, #0]
 80171fe:	1850      	adds	r0, r2, r1
 8017200:	42a0      	cmp	r0, r4
 8017202:	d10b      	bne.n	801721c <_free_r+0x6c>
 8017204:	6820      	ldr	r0, [r4, #0]
 8017206:	4401      	add	r1, r0
 8017208:	1850      	adds	r0, r2, r1
 801720a:	4283      	cmp	r3, r0
 801720c:	6011      	str	r1, [r2, #0]
 801720e:	d1e0      	bne.n	80171d2 <_free_r+0x22>
 8017210:	6818      	ldr	r0, [r3, #0]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	6053      	str	r3, [r2, #4]
 8017216:	4408      	add	r0, r1
 8017218:	6010      	str	r0, [r2, #0]
 801721a:	e7da      	b.n	80171d2 <_free_r+0x22>
 801721c:	d902      	bls.n	8017224 <_free_r+0x74>
 801721e:	230c      	movs	r3, #12
 8017220:	602b      	str	r3, [r5, #0]
 8017222:	e7d6      	b.n	80171d2 <_free_r+0x22>
 8017224:	6820      	ldr	r0, [r4, #0]
 8017226:	1821      	adds	r1, r4, r0
 8017228:	428b      	cmp	r3, r1
 801722a:	bf04      	itt	eq
 801722c:	6819      	ldreq	r1, [r3, #0]
 801722e:	685b      	ldreq	r3, [r3, #4]
 8017230:	6063      	str	r3, [r4, #4]
 8017232:	bf04      	itt	eq
 8017234:	1809      	addeq	r1, r1, r0
 8017236:	6021      	streq	r1, [r4, #0]
 8017238:	6054      	str	r4, [r2, #4]
 801723a:	e7ca      	b.n	80171d2 <_free_r+0x22>
 801723c:	bd38      	pop	{r3, r4, r5, pc}
 801723e:	bf00      	nop
 8017240:	20011f48 	.word	0x20011f48

08017244 <__ssputs_r>:
 8017244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017248:	688e      	ldr	r6, [r1, #8]
 801724a:	461f      	mov	r7, r3
 801724c:	42be      	cmp	r6, r7
 801724e:	680b      	ldr	r3, [r1, #0]
 8017250:	4682      	mov	sl, r0
 8017252:	460c      	mov	r4, r1
 8017254:	4690      	mov	r8, r2
 8017256:	d82d      	bhi.n	80172b4 <__ssputs_r+0x70>
 8017258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801725c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017260:	d026      	beq.n	80172b0 <__ssputs_r+0x6c>
 8017262:	6965      	ldr	r5, [r4, #20]
 8017264:	6909      	ldr	r1, [r1, #16]
 8017266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801726a:	eba3 0901 	sub.w	r9, r3, r1
 801726e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017272:	1c7b      	adds	r3, r7, #1
 8017274:	444b      	add	r3, r9
 8017276:	106d      	asrs	r5, r5, #1
 8017278:	429d      	cmp	r5, r3
 801727a:	bf38      	it	cc
 801727c:	461d      	movcc	r5, r3
 801727e:	0553      	lsls	r3, r2, #21
 8017280:	d527      	bpl.n	80172d2 <__ssputs_r+0x8e>
 8017282:	4629      	mov	r1, r5
 8017284:	f7ff fc98 	bl	8016bb8 <_malloc_r>
 8017288:	4606      	mov	r6, r0
 801728a:	b360      	cbz	r0, 80172e6 <__ssputs_r+0xa2>
 801728c:	6921      	ldr	r1, [r4, #16]
 801728e:	464a      	mov	r2, r9
 8017290:	f7ff ff7f 	bl	8017192 <memcpy>
 8017294:	89a3      	ldrh	r3, [r4, #12]
 8017296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801729a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801729e:	81a3      	strh	r3, [r4, #12]
 80172a0:	6126      	str	r6, [r4, #16]
 80172a2:	6165      	str	r5, [r4, #20]
 80172a4:	444e      	add	r6, r9
 80172a6:	eba5 0509 	sub.w	r5, r5, r9
 80172aa:	6026      	str	r6, [r4, #0]
 80172ac:	60a5      	str	r5, [r4, #8]
 80172ae:	463e      	mov	r6, r7
 80172b0:	42be      	cmp	r6, r7
 80172b2:	d900      	bls.n	80172b6 <__ssputs_r+0x72>
 80172b4:	463e      	mov	r6, r7
 80172b6:	6820      	ldr	r0, [r4, #0]
 80172b8:	4632      	mov	r2, r6
 80172ba:	4641      	mov	r1, r8
 80172bc:	f000 fd28 	bl	8017d10 <memmove>
 80172c0:	68a3      	ldr	r3, [r4, #8]
 80172c2:	1b9b      	subs	r3, r3, r6
 80172c4:	60a3      	str	r3, [r4, #8]
 80172c6:	6823      	ldr	r3, [r4, #0]
 80172c8:	4433      	add	r3, r6
 80172ca:	6023      	str	r3, [r4, #0]
 80172cc:	2000      	movs	r0, #0
 80172ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172d2:	462a      	mov	r2, r5
 80172d4:	f000 fd36 	bl	8017d44 <_realloc_r>
 80172d8:	4606      	mov	r6, r0
 80172da:	2800      	cmp	r0, #0
 80172dc:	d1e0      	bne.n	80172a0 <__ssputs_r+0x5c>
 80172de:	6921      	ldr	r1, [r4, #16]
 80172e0:	4650      	mov	r0, sl
 80172e2:	f7ff ff65 	bl	80171b0 <_free_r>
 80172e6:	230c      	movs	r3, #12
 80172e8:	f8ca 3000 	str.w	r3, [sl]
 80172ec:	89a3      	ldrh	r3, [r4, #12]
 80172ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172f2:	81a3      	strh	r3, [r4, #12]
 80172f4:	f04f 30ff 	mov.w	r0, #4294967295
 80172f8:	e7e9      	b.n	80172ce <__ssputs_r+0x8a>
	...

080172fc <_svfiprintf_r>:
 80172fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017300:	4698      	mov	r8, r3
 8017302:	898b      	ldrh	r3, [r1, #12]
 8017304:	061b      	lsls	r3, r3, #24
 8017306:	b09d      	sub	sp, #116	@ 0x74
 8017308:	4607      	mov	r7, r0
 801730a:	460d      	mov	r5, r1
 801730c:	4614      	mov	r4, r2
 801730e:	d510      	bpl.n	8017332 <_svfiprintf_r+0x36>
 8017310:	690b      	ldr	r3, [r1, #16]
 8017312:	b973      	cbnz	r3, 8017332 <_svfiprintf_r+0x36>
 8017314:	2140      	movs	r1, #64	@ 0x40
 8017316:	f7ff fc4f 	bl	8016bb8 <_malloc_r>
 801731a:	6028      	str	r0, [r5, #0]
 801731c:	6128      	str	r0, [r5, #16]
 801731e:	b930      	cbnz	r0, 801732e <_svfiprintf_r+0x32>
 8017320:	230c      	movs	r3, #12
 8017322:	603b      	str	r3, [r7, #0]
 8017324:	f04f 30ff 	mov.w	r0, #4294967295
 8017328:	b01d      	add	sp, #116	@ 0x74
 801732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801732e:	2340      	movs	r3, #64	@ 0x40
 8017330:	616b      	str	r3, [r5, #20]
 8017332:	2300      	movs	r3, #0
 8017334:	9309      	str	r3, [sp, #36]	@ 0x24
 8017336:	2320      	movs	r3, #32
 8017338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801733c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017340:	2330      	movs	r3, #48	@ 0x30
 8017342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80174e0 <_svfiprintf_r+0x1e4>
 8017346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801734a:	f04f 0901 	mov.w	r9, #1
 801734e:	4623      	mov	r3, r4
 8017350:	469a      	mov	sl, r3
 8017352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017356:	b10a      	cbz	r2, 801735c <_svfiprintf_r+0x60>
 8017358:	2a25      	cmp	r2, #37	@ 0x25
 801735a:	d1f9      	bne.n	8017350 <_svfiprintf_r+0x54>
 801735c:	ebba 0b04 	subs.w	fp, sl, r4
 8017360:	d00b      	beq.n	801737a <_svfiprintf_r+0x7e>
 8017362:	465b      	mov	r3, fp
 8017364:	4622      	mov	r2, r4
 8017366:	4629      	mov	r1, r5
 8017368:	4638      	mov	r0, r7
 801736a:	f7ff ff6b 	bl	8017244 <__ssputs_r>
 801736e:	3001      	adds	r0, #1
 8017370:	f000 80a7 	beq.w	80174c2 <_svfiprintf_r+0x1c6>
 8017374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017376:	445a      	add	r2, fp
 8017378:	9209      	str	r2, [sp, #36]	@ 0x24
 801737a:	f89a 3000 	ldrb.w	r3, [sl]
 801737e:	2b00      	cmp	r3, #0
 8017380:	f000 809f 	beq.w	80174c2 <_svfiprintf_r+0x1c6>
 8017384:	2300      	movs	r3, #0
 8017386:	f04f 32ff 	mov.w	r2, #4294967295
 801738a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801738e:	f10a 0a01 	add.w	sl, sl, #1
 8017392:	9304      	str	r3, [sp, #16]
 8017394:	9307      	str	r3, [sp, #28]
 8017396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801739a:	931a      	str	r3, [sp, #104]	@ 0x68
 801739c:	4654      	mov	r4, sl
 801739e:	2205      	movs	r2, #5
 80173a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173a4:	484e      	ldr	r0, [pc, #312]	@ (80174e0 <_svfiprintf_r+0x1e4>)
 80173a6:	f7e8 ff4b 	bl	8000240 <memchr>
 80173aa:	9a04      	ldr	r2, [sp, #16]
 80173ac:	b9d8      	cbnz	r0, 80173e6 <_svfiprintf_r+0xea>
 80173ae:	06d0      	lsls	r0, r2, #27
 80173b0:	bf44      	itt	mi
 80173b2:	2320      	movmi	r3, #32
 80173b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173b8:	0711      	lsls	r1, r2, #28
 80173ba:	bf44      	itt	mi
 80173bc:	232b      	movmi	r3, #43	@ 0x2b
 80173be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173c2:	f89a 3000 	ldrb.w	r3, [sl]
 80173c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80173c8:	d015      	beq.n	80173f6 <_svfiprintf_r+0xfa>
 80173ca:	9a07      	ldr	r2, [sp, #28]
 80173cc:	4654      	mov	r4, sl
 80173ce:	2000      	movs	r0, #0
 80173d0:	f04f 0c0a 	mov.w	ip, #10
 80173d4:	4621      	mov	r1, r4
 80173d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173da:	3b30      	subs	r3, #48	@ 0x30
 80173dc:	2b09      	cmp	r3, #9
 80173de:	d94b      	bls.n	8017478 <_svfiprintf_r+0x17c>
 80173e0:	b1b0      	cbz	r0, 8017410 <_svfiprintf_r+0x114>
 80173e2:	9207      	str	r2, [sp, #28]
 80173e4:	e014      	b.n	8017410 <_svfiprintf_r+0x114>
 80173e6:	eba0 0308 	sub.w	r3, r0, r8
 80173ea:	fa09 f303 	lsl.w	r3, r9, r3
 80173ee:	4313      	orrs	r3, r2
 80173f0:	9304      	str	r3, [sp, #16]
 80173f2:	46a2      	mov	sl, r4
 80173f4:	e7d2      	b.n	801739c <_svfiprintf_r+0xa0>
 80173f6:	9b03      	ldr	r3, [sp, #12]
 80173f8:	1d19      	adds	r1, r3, #4
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	9103      	str	r1, [sp, #12]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	bfbb      	ittet	lt
 8017402:	425b      	neglt	r3, r3
 8017404:	f042 0202 	orrlt.w	r2, r2, #2
 8017408:	9307      	strge	r3, [sp, #28]
 801740a:	9307      	strlt	r3, [sp, #28]
 801740c:	bfb8      	it	lt
 801740e:	9204      	strlt	r2, [sp, #16]
 8017410:	7823      	ldrb	r3, [r4, #0]
 8017412:	2b2e      	cmp	r3, #46	@ 0x2e
 8017414:	d10a      	bne.n	801742c <_svfiprintf_r+0x130>
 8017416:	7863      	ldrb	r3, [r4, #1]
 8017418:	2b2a      	cmp	r3, #42	@ 0x2a
 801741a:	d132      	bne.n	8017482 <_svfiprintf_r+0x186>
 801741c:	9b03      	ldr	r3, [sp, #12]
 801741e:	1d1a      	adds	r2, r3, #4
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	9203      	str	r2, [sp, #12]
 8017424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017428:	3402      	adds	r4, #2
 801742a:	9305      	str	r3, [sp, #20]
 801742c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80174f0 <_svfiprintf_r+0x1f4>
 8017430:	7821      	ldrb	r1, [r4, #0]
 8017432:	2203      	movs	r2, #3
 8017434:	4650      	mov	r0, sl
 8017436:	f7e8 ff03 	bl	8000240 <memchr>
 801743a:	b138      	cbz	r0, 801744c <_svfiprintf_r+0x150>
 801743c:	9b04      	ldr	r3, [sp, #16]
 801743e:	eba0 000a 	sub.w	r0, r0, sl
 8017442:	2240      	movs	r2, #64	@ 0x40
 8017444:	4082      	lsls	r2, r0
 8017446:	4313      	orrs	r3, r2
 8017448:	3401      	adds	r4, #1
 801744a:	9304      	str	r3, [sp, #16]
 801744c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017450:	4824      	ldr	r0, [pc, #144]	@ (80174e4 <_svfiprintf_r+0x1e8>)
 8017452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017456:	2206      	movs	r2, #6
 8017458:	f7e8 fef2 	bl	8000240 <memchr>
 801745c:	2800      	cmp	r0, #0
 801745e:	d036      	beq.n	80174ce <_svfiprintf_r+0x1d2>
 8017460:	4b21      	ldr	r3, [pc, #132]	@ (80174e8 <_svfiprintf_r+0x1ec>)
 8017462:	bb1b      	cbnz	r3, 80174ac <_svfiprintf_r+0x1b0>
 8017464:	9b03      	ldr	r3, [sp, #12]
 8017466:	3307      	adds	r3, #7
 8017468:	f023 0307 	bic.w	r3, r3, #7
 801746c:	3308      	adds	r3, #8
 801746e:	9303      	str	r3, [sp, #12]
 8017470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017472:	4433      	add	r3, r6
 8017474:	9309      	str	r3, [sp, #36]	@ 0x24
 8017476:	e76a      	b.n	801734e <_svfiprintf_r+0x52>
 8017478:	fb0c 3202 	mla	r2, ip, r2, r3
 801747c:	460c      	mov	r4, r1
 801747e:	2001      	movs	r0, #1
 8017480:	e7a8      	b.n	80173d4 <_svfiprintf_r+0xd8>
 8017482:	2300      	movs	r3, #0
 8017484:	3401      	adds	r4, #1
 8017486:	9305      	str	r3, [sp, #20]
 8017488:	4619      	mov	r1, r3
 801748a:	f04f 0c0a 	mov.w	ip, #10
 801748e:	4620      	mov	r0, r4
 8017490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017494:	3a30      	subs	r2, #48	@ 0x30
 8017496:	2a09      	cmp	r2, #9
 8017498:	d903      	bls.n	80174a2 <_svfiprintf_r+0x1a6>
 801749a:	2b00      	cmp	r3, #0
 801749c:	d0c6      	beq.n	801742c <_svfiprintf_r+0x130>
 801749e:	9105      	str	r1, [sp, #20]
 80174a0:	e7c4      	b.n	801742c <_svfiprintf_r+0x130>
 80174a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80174a6:	4604      	mov	r4, r0
 80174a8:	2301      	movs	r3, #1
 80174aa:	e7f0      	b.n	801748e <_svfiprintf_r+0x192>
 80174ac:	ab03      	add	r3, sp, #12
 80174ae:	9300      	str	r3, [sp, #0]
 80174b0:	462a      	mov	r2, r5
 80174b2:	4b0e      	ldr	r3, [pc, #56]	@ (80174ec <_svfiprintf_r+0x1f0>)
 80174b4:	a904      	add	r1, sp, #16
 80174b6:	4638      	mov	r0, r7
 80174b8:	f3af 8000 	nop.w
 80174bc:	1c42      	adds	r2, r0, #1
 80174be:	4606      	mov	r6, r0
 80174c0:	d1d6      	bne.n	8017470 <_svfiprintf_r+0x174>
 80174c2:	89ab      	ldrh	r3, [r5, #12]
 80174c4:	065b      	lsls	r3, r3, #25
 80174c6:	f53f af2d 	bmi.w	8017324 <_svfiprintf_r+0x28>
 80174ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174cc:	e72c      	b.n	8017328 <_svfiprintf_r+0x2c>
 80174ce:	ab03      	add	r3, sp, #12
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	462a      	mov	r2, r5
 80174d4:	4b05      	ldr	r3, [pc, #20]	@ (80174ec <_svfiprintf_r+0x1f0>)
 80174d6:	a904      	add	r1, sp, #16
 80174d8:	4638      	mov	r0, r7
 80174da:	f000 f9bb 	bl	8017854 <_printf_i>
 80174de:	e7ed      	b.n	80174bc <_svfiprintf_r+0x1c0>
 80174e0:	0801b436 	.word	0x0801b436
 80174e4:	0801b440 	.word	0x0801b440
 80174e8:	00000000 	.word	0x00000000
 80174ec:	08017245 	.word	0x08017245
 80174f0:	0801b43c 	.word	0x0801b43c

080174f4 <__sfputc_r>:
 80174f4:	6893      	ldr	r3, [r2, #8]
 80174f6:	3b01      	subs	r3, #1
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	b410      	push	{r4}
 80174fc:	6093      	str	r3, [r2, #8]
 80174fe:	da08      	bge.n	8017512 <__sfputc_r+0x1e>
 8017500:	6994      	ldr	r4, [r2, #24]
 8017502:	42a3      	cmp	r3, r4
 8017504:	db01      	blt.n	801750a <__sfputc_r+0x16>
 8017506:	290a      	cmp	r1, #10
 8017508:	d103      	bne.n	8017512 <__sfputc_r+0x1e>
 801750a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801750e:	f000 bb6b 	b.w	8017be8 <__swbuf_r>
 8017512:	6813      	ldr	r3, [r2, #0]
 8017514:	1c58      	adds	r0, r3, #1
 8017516:	6010      	str	r0, [r2, #0]
 8017518:	7019      	strb	r1, [r3, #0]
 801751a:	4608      	mov	r0, r1
 801751c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017520:	4770      	bx	lr

08017522 <__sfputs_r>:
 8017522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017524:	4606      	mov	r6, r0
 8017526:	460f      	mov	r7, r1
 8017528:	4614      	mov	r4, r2
 801752a:	18d5      	adds	r5, r2, r3
 801752c:	42ac      	cmp	r4, r5
 801752e:	d101      	bne.n	8017534 <__sfputs_r+0x12>
 8017530:	2000      	movs	r0, #0
 8017532:	e007      	b.n	8017544 <__sfputs_r+0x22>
 8017534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017538:	463a      	mov	r2, r7
 801753a:	4630      	mov	r0, r6
 801753c:	f7ff ffda 	bl	80174f4 <__sfputc_r>
 8017540:	1c43      	adds	r3, r0, #1
 8017542:	d1f3      	bne.n	801752c <__sfputs_r+0xa>
 8017544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017548 <_vfiprintf_r>:
 8017548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801754c:	460d      	mov	r5, r1
 801754e:	b09d      	sub	sp, #116	@ 0x74
 8017550:	4614      	mov	r4, r2
 8017552:	4698      	mov	r8, r3
 8017554:	4606      	mov	r6, r0
 8017556:	b118      	cbz	r0, 8017560 <_vfiprintf_r+0x18>
 8017558:	6a03      	ldr	r3, [r0, #32]
 801755a:	b90b      	cbnz	r3, 8017560 <_vfiprintf_r+0x18>
 801755c:	f7ff fc44 	bl	8016de8 <__sinit>
 8017560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017562:	07d9      	lsls	r1, r3, #31
 8017564:	d405      	bmi.n	8017572 <_vfiprintf_r+0x2a>
 8017566:	89ab      	ldrh	r3, [r5, #12]
 8017568:	059a      	lsls	r2, r3, #22
 801756a:	d402      	bmi.n	8017572 <_vfiprintf_r+0x2a>
 801756c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801756e:	f7ff fe0e 	bl	801718e <__retarget_lock_acquire_recursive>
 8017572:	89ab      	ldrh	r3, [r5, #12]
 8017574:	071b      	lsls	r3, r3, #28
 8017576:	d501      	bpl.n	801757c <_vfiprintf_r+0x34>
 8017578:	692b      	ldr	r3, [r5, #16]
 801757a:	b99b      	cbnz	r3, 80175a4 <_vfiprintf_r+0x5c>
 801757c:	4629      	mov	r1, r5
 801757e:	4630      	mov	r0, r6
 8017580:	f000 fb70 	bl	8017c64 <__swsetup_r>
 8017584:	b170      	cbz	r0, 80175a4 <_vfiprintf_r+0x5c>
 8017586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017588:	07dc      	lsls	r4, r3, #31
 801758a:	d504      	bpl.n	8017596 <_vfiprintf_r+0x4e>
 801758c:	f04f 30ff 	mov.w	r0, #4294967295
 8017590:	b01d      	add	sp, #116	@ 0x74
 8017592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017596:	89ab      	ldrh	r3, [r5, #12]
 8017598:	0598      	lsls	r0, r3, #22
 801759a:	d4f7      	bmi.n	801758c <_vfiprintf_r+0x44>
 801759c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801759e:	f7ff fdf7 	bl	8017190 <__retarget_lock_release_recursive>
 80175a2:	e7f3      	b.n	801758c <_vfiprintf_r+0x44>
 80175a4:	2300      	movs	r3, #0
 80175a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80175a8:	2320      	movs	r3, #32
 80175aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80175ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80175b2:	2330      	movs	r3, #48	@ 0x30
 80175b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017764 <_vfiprintf_r+0x21c>
 80175b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80175bc:	f04f 0901 	mov.w	r9, #1
 80175c0:	4623      	mov	r3, r4
 80175c2:	469a      	mov	sl, r3
 80175c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175c8:	b10a      	cbz	r2, 80175ce <_vfiprintf_r+0x86>
 80175ca:	2a25      	cmp	r2, #37	@ 0x25
 80175cc:	d1f9      	bne.n	80175c2 <_vfiprintf_r+0x7a>
 80175ce:	ebba 0b04 	subs.w	fp, sl, r4
 80175d2:	d00b      	beq.n	80175ec <_vfiprintf_r+0xa4>
 80175d4:	465b      	mov	r3, fp
 80175d6:	4622      	mov	r2, r4
 80175d8:	4629      	mov	r1, r5
 80175da:	4630      	mov	r0, r6
 80175dc:	f7ff ffa1 	bl	8017522 <__sfputs_r>
 80175e0:	3001      	adds	r0, #1
 80175e2:	f000 80a7 	beq.w	8017734 <_vfiprintf_r+0x1ec>
 80175e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80175e8:	445a      	add	r2, fp
 80175ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80175ec:	f89a 3000 	ldrb.w	r3, [sl]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	f000 809f 	beq.w	8017734 <_vfiprintf_r+0x1ec>
 80175f6:	2300      	movs	r3, #0
 80175f8:	f04f 32ff 	mov.w	r2, #4294967295
 80175fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017600:	f10a 0a01 	add.w	sl, sl, #1
 8017604:	9304      	str	r3, [sp, #16]
 8017606:	9307      	str	r3, [sp, #28]
 8017608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801760c:	931a      	str	r3, [sp, #104]	@ 0x68
 801760e:	4654      	mov	r4, sl
 8017610:	2205      	movs	r2, #5
 8017612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017616:	4853      	ldr	r0, [pc, #332]	@ (8017764 <_vfiprintf_r+0x21c>)
 8017618:	f7e8 fe12 	bl	8000240 <memchr>
 801761c:	9a04      	ldr	r2, [sp, #16]
 801761e:	b9d8      	cbnz	r0, 8017658 <_vfiprintf_r+0x110>
 8017620:	06d1      	lsls	r1, r2, #27
 8017622:	bf44      	itt	mi
 8017624:	2320      	movmi	r3, #32
 8017626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801762a:	0713      	lsls	r3, r2, #28
 801762c:	bf44      	itt	mi
 801762e:	232b      	movmi	r3, #43	@ 0x2b
 8017630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017634:	f89a 3000 	ldrb.w	r3, [sl]
 8017638:	2b2a      	cmp	r3, #42	@ 0x2a
 801763a:	d015      	beq.n	8017668 <_vfiprintf_r+0x120>
 801763c:	9a07      	ldr	r2, [sp, #28]
 801763e:	4654      	mov	r4, sl
 8017640:	2000      	movs	r0, #0
 8017642:	f04f 0c0a 	mov.w	ip, #10
 8017646:	4621      	mov	r1, r4
 8017648:	f811 3b01 	ldrb.w	r3, [r1], #1
 801764c:	3b30      	subs	r3, #48	@ 0x30
 801764e:	2b09      	cmp	r3, #9
 8017650:	d94b      	bls.n	80176ea <_vfiprintf_r+0x1a2>
 8017652:	b1b0      	cbz	r0, 8017682 <_vfiprintf_r+0x13a>
 8017654:	9207      	str	r2, [sp, #28]
 8017656:	e014      	b.n	8017682 <_vfiprintf_r+0x13a>
 8017658:	eba0 0308 	sub.w	r3, r0, r8
 801765c:	fa09 f303 	lsl.w	r3, r9, r3
 8017660:	4313      	orrs	r3, r2
 8017662:	9304      	str	r3, [sp, #16]
 8017664:	46a2      	mov	sl, r4
 8017666:	e7d2      	b.n	801760e <_vfiprintf_r+0xc6>
 8017668:	9b03      	ldr	r3, [sp, #12]
 801766a:	1d19      	adds	r1, r3, #4
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	9103      	str	r1, [sp, #12]
 8017670:	2b00      	cmp	r3, #0
 8017672:	bfbb      	ittet	lt
 8017674:	425b      	neglt	r3, r3
 8017676:	f042 0202 	orrlt.w	r2, r2, #2
 801767a:	9307      	strge	r3, [sp, #28]
 801767c:	9307      	strlt	r3, [sp, #28]
 801767e:	bfb8      	it	lt
 8017680:	9204      	strlt	r2, [sp, #16]
 8017682:	7823      	ldrb	r3, [r4, #0]
 8017684:	2b2e      	cmp	r3, #46	@ 0x2e
 8017686:	d10a      	bne.n	801769e <_vfiprintf_r+0x156>
 8017688:	7863      	ldrb	r3, [r4, #1]
 801768a:	2b2a      	cmp	r3, #42	@ 0x2a
 801768c:	d132      	bne.n	80176f4 <_vfiprintf_r+0x1ac>
 801768e:	9b03      	ldr	r3, [sp, #12]
 8017690:	1d1a      	adds	r2, r3, #4
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	9203      	str	r2, [sp, #12]
 8017696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801769a:	3402      	adds	r4, #2
 801769c:	9305      	str	r3, [sp, #20]
 801769e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017774 <_vfiprintf_r+0x22c>
 80176a2:	7821      	ldrb	r1, [r4, #0]
 80176a4:	2203      	movs	r2, #3
 80176a6:	4650      	mov	r0, sl
 80176a8:	f7e8 fdca 	bl	8000240 <memchr>
 80176ac:	b138      	cbz	r0, 80176be <_vfiprintf_r+0x176>
 80176ae:	9b04      	ldr	r3, [sp, #16]
 80176b0:	eba0 000a 	sub.w	r0, r0, sl
 80176b4:	2240      	movs	r2, #64	@ 0x40
 80176b6:	4082      	lsls	r2, r0
 80176b8:	4313      	orrs	r3, r2
 80176ba:	3401      	adds	r4, #1
 80176bc:	9304      	str	r3, [sp, #16]
 80176be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176c2:	4829      	ldr	r0, [pc, #164]	@ (8017768 <_vfiprintf_r+0x220>)
 80176c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80176c8:	2206      	movs	r2, #6
 80176ca:	f7e8 fdb9 	bl	8000240 <memchr>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	d03f      	beq.n	8017752 <_vfiprintf_r+0x20a>
 80176d2:	4b26      	ldr	r3, [pc, #152]	@ (801776c <_vfiprintf_r+0x224>)
 80176d4:	bb1b      	cbnz	r3, 801771e <_vfiprintf_r+0x1d6>
 80176d6:	9b03      	ldr	r3, [sp, #12]
 80176d8:	3307      	adds	r3, #7
 80176da:	f023 0307 	bic.w	r3, r3, #7
 80176de:	3308      	adds	r3, #8
 80176e0:	9303      	str	r3, [sp, #12]
 80176e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176e4:	443b      	add	r3, r7
 80176e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80176e8:	e76a      	b.n	80175c0 <_vfiprintf_r+0x78>
 80176ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80176ee:	460c      	mov	r4, r1
 80176f0:	2001      	movs	r0, #1
 80176f2:	e7a8      	b.n	8017646 <_vfiprintf_r+0xfe>
 80176f4:	2300      	movs	r3, #0
 80176f6:	3401      	adds	r4, #1
 80176f8:	9305      	str	r3, [sp, #20]
 80176fa:	4619      	mov	r1, r3
 80176fc:	f04f 0c0a 	mov.w	ip, #10
 8017700:	4620      	mov	r0, r4
 8017702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017706:	3a30      	subs	r2, #48	@ 0x30
 8017708:	2a09      	cmp	r2, #9
 801770a:	d903      	bls.n	8017714 <_vfiprintf_r+0x1cc>
 801770c:	2b00      	cmp	r3, #0
 801770e:	d0c6      	beq.n	801769e <_vfiprintf_r+0x156>
 8017710:	9105      	str	r1, [sp, #20]
 8017712:	e7c4      	b.n	801769e <_vfiprintf_r+0x156>
 8017714:	fb0c 2101 	mla	r1, ip, r1, r2
 8017718:	4604      	mov	r4, r0
 801771a:	2301      	movs	r3, #1
 801771c:	e7f0      	b.n	8017700 <_vfiprintf_r+0x1b8>
 801771e:	ab03      	add	r3, sp, #12
 8017720:	9300      	str	r3, [sp, #0]
 8017722:	462a      	mov	r2, r5
 8017724:	4b12      	ldr	r3, [pc, #72]	@ (8017770 <_vfiprintf_r+0x228>)
 8017726:	a904      	add	r1, sp, #16
 8017728:	4630      	mov	r0, r6
 801772a:	f3af 8000 	nop.w
 801772e:	4607      	mov	r7, r0
 8017730:	1c78      	adds	r0, r7, #1
 8017732:	d1d6      	bne.n	80176e2 <_vfiprintf_r+0x19a>
 8017734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017736:	07d9      	lsls	r1, r3, #31
 8017738:	d405      	bmi.n	8017746 <_vfiprintf_r+0x1fe>
 801773a:	89ab      	ldrh	r3, [r5, #12]
 801773c:	059a      	lsls	r2, r3, #22
 801773e:	d402      	bmi.n	8017746 <_vfiprintf_r+0x1fe>
 8017740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017742:	f7ff fd25 	bl	8017190 <__retarget_lock_release_recursive>
 8017746:	89ab      	ldrh	r3, [r5, #12]
 8017748:	065b      	lsls	r3, r3, #25
 801774a:	f53f af1f 	bmi.w	801758c <_vfiprintf_r+0x44>
 801774e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017750:	e71e      	b.n	8017590 <_vfiprintf_r+0x48>
 8017752:	ab03      	add	r3, sp, #12
 8017754:	9300      	str	r3, [sp, #0]
 8017756:	462a      	mov	r2, r5
 8017758:	4b05      	ldr	r3, [pc, #20]	@ (8017770 <_vfiprintf_r+0x228>)
 801775a:	a904      	add	r1, sp, #16
 801775c:	4630      	mov	r0, r6
 801775e:	f000 f879 	bl	8017854 <_printf_i>
 8017762:	e7e4      	b.n	801772e <_vfiprintf_r+0x1e6>
 8017764:	0801b436 	.word	0x0801b436
 8017768:	0801b440 	.word	0x0801b440
 801776c:	00000000 	.word	0x00000000
 8017770:	08017523 	.word	0x08017523
 8017774:	0801b43c 	.word	0x0801b43c

08017778 <_printf_common>:
 8017778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801777c:	4616      	mov	r6, r2
 801777e:	4698      	mov	r8, r3
 8017780:	688a      	ldr	r2, [r1, #8]
 8017782:	690b      	ldr	r3, [r1, #16]
 8017784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017788:	4293      	cmp	r3, r2
 801778a:	bfb8      	it	lt
 801778c:	4613      	movlt	r3, r2
 801778e:	6033      	str	r3, [r6, #0]
 8017790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017794:	4607      	mov	r7, r0
 8017796:	460c      	mov	r4, r1
 8017798:	b10a      	cbz	r2, 801779e <_printf_common+0x26>
 801779a:	3301      	adds	r3, #1
 801779c:	6033      	str	r3, [r6, #0]
 801779e:	6823      	ldr	r3, [r4, #0]
 80177a0:	0699      	lsls	r1, r3, #26
 80177a2:	bf42      	ittt	mi
 80177a4:	6833      	ldrmi	r3, [r6, #0]
 80177a6:	3302      	addmi	r3, #2
 80177a8:	6033      	strmi	r3, [r6, #0]
 80177aa:	6825      	ldr	r5, [r4, #0]
 80177ac:	f015 0506 	ands.w	r5, r5, #6
 80177b0:	d106      	bne.n	80177c0 <_printf_common+0x48>
 80177b2:	f104 0a19 	add.w	sl, r4, #25
 80177b6:	68e3      	ldr	r3, [r4, #12]
 80177b8:	6832      	ldr	r2, [r6, #0]
 80177ba:	1a9b      	subs	r3, r3, r2
 80177bc:	42ab      	cmp	r3, r5
 80177be:	dc26      	bgt.n	801780e <_printf_common+0x96>
 80177c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80177c4:	6822      	ldr	r2, [r4, #0]
 80177c6:	3b00      	subs	r3, #0
 80177c8:	bf18      	it	ne
 80177ca:	2301      	movne	r3, #1
 80177cc:	0692      	lsls	r2, r2, #26
 80177ce:	d42b      	bmi.n	8017828 <_printf_common+0xb0>
 80177d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80177d4:	4641      	mov	r1, r8
 80177d6:	4638      	mov	r0, r7
 80177d8:	47c8      	blx	r9
 80177da:	3001      	adds	r0, #1
 80177dc:	d01e      	beq.n	801781c <_printf_common+0xa4>
 80177de:	6823      	ldr	r3, [r4, #0]
 80177e0:	6922      	ldr	r2, [r4, #16]
 80177e2:	f003 0306 	and.w	r3, r3, #6
 80177e6:	2b04      	cmp	r3, #4
 80177e8:	bf02      	ittt	eq
 80177ea:	68e5      	ldreq	r5, [r4, #12]
 80177ec:	6833      	ldreq	r3, [r6, #0]
 80177ee:	1aed      	subeq	r5, r5, r3
 80177f0:	68a3      	ldr	r3, [r4, #8]
 80177f2:	bf0c      	ite	eq
 80177f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177f8:	2500      	movne	r5, #0
 80177fa:	4293      	cmp	r3, r2
 80177fc:	bfc4      	itt	gt
 80177fe:	1a9b      	subgt	r3, r3, r2
 8017800:	18ed      	addgt	r5, r5, r3
 8017802:	2600      	movs	r6, #0
 8017804:	341a      	adds	r4, #26
 8017806:	42b5      	cmp	r5, r6
 8017808:	d11a      	bne.n	8017840 <_printf_common+0xc8>
 801780a:	2000      	movs	r0, #0
 801780c:	e008      	b.n	8017820 <_printf_common+0xa8>
 801780e:	2301      	movs	r3, #1
 8017810:	4652      	mov	r2, sl
 8017812:	4641      	mov	r1, r8
 8017814:	4638      	mov	r0, r7
 8017816:	47c8      	blx	r9
 8017818:	3001      	adds	r0, #1
 801781a:	d103      	bne.n	8017824 <_printf_common+0xac>
 801781c:	f04f 30ff 	mov.w	r0, #4294967295
 8017820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017824:	3501      	adds	r5, #1
 8017826:	e7c6      	b.n	80177b6 <_printf_common+0x3e>
 8017828:	18e1      	adds	r1, r4, r3
 801782a:	1c5a      	adds	r2, r3, #1
 801782c:	2030      	movs	r0, #48	@ 0x30
 801782e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017832:	4422      	add	r2, r4
 8017834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801783c:	3302      	adds	r3, #2
 801783e:	e7c7      	b.n	80177d0 <_printf_common+0x58>
 8017840:	2301      	movs	r3, #1
 8017842:	4622      	mov	r2, r4
 8017844:	4641      	mov	r1, r8
 8017846:	4638      	mov	r0, r7
 8017848:	47c8      	blx	r9
 801784a:	3001      	adds	r0, #1
 801784c:	d0e6      	beq.n	801781c <_printf_common+0xa4>
 801784e:	3601      	adds	r6, #1
 8017850:	e7d9      	b.n	8017806 <_printf_common+0x8e>
	...

08017854 <_printf_i>:
 8017854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017858:	7e0f      	ldrb	r7, [r1, #24]
 801785a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801785c:	2f78      	cmp	r7, #120	@ 0x78
 801785e:	4691      	mov	r9, r2
 8017860:	4680      	mov	r8, r0
 8017862:	460c      	mov	r4, r1
 8017864:	469a      	mov	sl, r3
 8017866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801786a:	d807      	bhi.n	801787c <_printf_i+0x28>
 801786c:	2f62      	cmp	r7, #98	@ 0x62
 801786e:	d80a      	bhi.n	8017886 <_printf_i+0x32>
 8017870:	2f00      	cmp	r7, #0
 8017872:	f000 80d1 	beq.w	8017a18 <_printf_i+0x1c4>
 8017876:	2f58      	cmp	r7, #88	@ 0x58
 8017878:	f000 80b8 	beq.w	80179ec <_printf_i+0x198>
 801787c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017884:	e03a      	b.n	80178fc <_printf_i+0xa8>
 8017886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801788a:	2b15      	cmp	r3, #21
 801788c:	d8f6      	bhi.n	801787c <_printf_i+0x28>
 801788e:	a101      	add	r1, pc, #4	@ (adr r1, 8017894 <_printf_i+0x40>)
 8017890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017894:	080178ed 	.word	0x080178ed
 8017898:	08017901 	.word	0x08017901
 801789c:	0801787d 	.word	0x0801787d
 80178a0:	0801787d 	.word	0x0801787d
 80178a4:	0801787d 	.word	0x0801787d
 80178a8:	0801787d 	.word	0x0801787d
 80178ac:	08017901 	.word	0x08017901
 80178b0:	0801787d 	.word	0x0801787d
 80178b4:	0801787d 	.word	0x0801787d
 80178b8:	0801787d 	.word	0x0801787d
 80178bc:	0801787d 	.word	0x0801787d
 80178c0:	080179ff 	.word	0x080179ff
 80178c4:	0801792b 	.word	0x0801792b
 80178c8:	080179b9 	.word	0x080179b9
 80178cc:	0801787d 	.word	0x0801787d
 80178d0:	0801787d 	.word	0x0801787d
 80178d4:	08017a21 	.word	0x08017a21
 80178d8:	0801787d 	.word	0x0801787d
 80178dc:	0801792b 	.word	0x0801792b
 80178e0:	0801787d 	.word	0x0801787d
 80178e4:	0801787d 	.word	0x0801787d
 80178e8:	080179c1 	.word	0x080179c1
 80178ec:	6833      	ldr	r3, [r6, #0]
 80178ee:	1d1a      	adds	r2, r3, #4
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	6032      	str	r2, [r6, #0]
 80178f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80178fc:	2301      	movs	r3, #1
 80178fe:	e09c      	b.n	8017a3a <_printf_i+0x1e6>
 8017900:	6833      	ldr	r3, [r6, #0]
 8017902:	6820      	ldr	r0, [r4, #0]
 8017904:	1d19      	adds	r1, r3, #4
 8017906:	6031      	str	r1, [r6, #0]
 8017908:	0606      	lsls	r6, r0, #24
 801790a:	d501      	bpl.n	8017910 <_printf_i+0xbc>
 801790c:	681d      	ldr	r5, [r3, #0]
 801790e:	e003      	b.n	8017918 <_printf_i+0xc4>
 8017910:	0645      	lsls	r5, r0, #25
 8017912:	d5fb      	bpl.n	801790c <_printf_i+0xb8>
 8017914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017918:	2d00      	cmp	r5, #0
 801791a:	da03      	bge.n	8017924 <_printf_i+0xd0>
 801791c:	232d      	movs	r3, #45	@ 0x2d
 801791e:	426d      	negs	r5, r5
 8017920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017924:	4858      	ldr	r0, [pc, #352]	@ (8017a88 <_printf_i+0x234>)
 8017926:	230a      	movs	r3, #10
 8017928:	e011      	b.n	801794e <_printf_i+0xfa>
 801792a:	6821      	ldr	r1, [r4, #0]
 801792c:	6833      	ldr	r3, [r6, #0]
 801792e:	0608      	lsls	r0, r1, #24
 8017930:	f853 5b04 	ldr.w	r5, [r3], #4
 8017934:	d402      	bmi.n	801793c <_printf_i+0xe8>
 8017936:	0649      	lsls	r1, r1, #25
 8017938:	bf48      	it	mi
 801793a:	b2ad      	uxthmi	r5, r5
 801793c:	2f6f      	cmp	r7, #111	@ 0x6f
 801793e:	4852      	ldr	r0, [pc, #328]	@ (8017a88 <_printf_i+0x234>)
 8017940:	6033      	str	r3, [r6, #0]
 8017942:	bf14      	ite	ne
 8017944:	230a      	movne	r3, #10
 8017946:	2308      	moveq	r3, #8
 8017948:	2100      	movs	r1, #0
 801794a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801794e:	6866      	ldr	r6, [r4, #4]
 8017950:	60a6      	str	r6, [r4, #8]
 8017952:	2e00      	cmp	r6, #0
 8017954:	db05      	blt.n	8017962 <_printf_i+0x10e>
 8017956:	6821      	ldr	r1, [r4, #0]
 8017958:	432e      	orrs	r6, r5
 801795a:	f021 0104 	bic.w	r1, r1, #4
 801795e:	6021      	str	r1, [r4, #0]
 8017960:	d04b      	beq.n	80179fa <_printf_i+0x1a6>
 8017962:	4616      	mov	r6, r2
 8017964:	fbb5 f1f3 	udiv	r1, r5, r3
 8017968:	fb03 5711 	mls	r7, r3, r1, r5
 801796c:	5dc7      	ldrb	r7, [r0, r7]
 801796e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017972:	462f      	mov	r7, r5
 8017974:	42bb      	cmp	r3, r7
 8017976:	460d      	mov	r5, r1
 8017978:	d9f4      	bls.n	8017964 <_printf_i+0x110>
 801797a:	2b08      	cmp	r3, #8
 801797c:	d10b      	bne.n	8017996 <_printf_i+0x142>
 801797e:	6823      	ldr	r3, [r4, #0]
 8017980:	07df      	lsls	r7, r3, #31
 8017982:	d508      	bpl.n	8017996 <_printf_i+0x142>
 8017984:	6923      	ldr	r3, [r4, #16]
 8017986:	6861      	ldr	r1, [r4, #4]
 8017988:	4299      	cmp	r1, r3
 801798a:	bfde      	ittt	le
 801798c:	2330      	movle	r3, #48	@ 0x30
 801798e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017996:	1b92      	subs	r2, r2, r6
 8017998:	6122      	str	r2, [r4, #16]
 801799a:	f8cd a000 	str.w	sl, [sp]
 801799e:	464b      	mov	r3, r9
 80179a0:	aa03      	add	r2, sp, #12
 80179a2:	4621      	mov	r1, r4
 80179a4:	4640      	mov	r0, r8
 80179a6:	f7ff fee7 	bl	8017778 <_printf_common>
 80179aa:	3001      	adds	r0, #1
 80179ac:	d14a      	bne.n	8017a44 <_printf_i+0x1f0>
 80179ae:	f04f 30ff 	mov.w	r0, #4294967295
 80179b2:	b004      	add	sp, #16
 80179b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179b8:	6823      	ldr	r3, [r4, #0]
 80179ba:	f043 0320 	orr.w	r3, r3, #32
 80179be:	6023      	str	r3, [r4, #0]
 80179c0:	4832      	ldr	r0, [pc, #200]	@ (8017a8c <_printf_i+0x238>)
 80179c2:	2778      	movs	r7, #120	@ 0x78
 80179c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80179c8:	6823      	ldr	r3, [r4, #0]
 80179ca:	6831      	ldr	r1, [r6, #0]
 80179cc:	061f      	lsls	r7, r3, #24
 80179ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80179d2:	d402      	bmi.n	80179da <_printf_i+0x186>
 80179d4:	065f      	lsls	r7, r3, #25
 80179d6:	bf48      	it	mi
 80179d8:	b2ad      	uxthmi	r5, r5
 80179da:	6031      	str	r1, [r6, #0]
 80179dc:	07d9      	lsls	r1, r3, #31
 80179de:	bf44      	itt	mi
 80179e0:	f043 0320 	orrmi.w	r3, r3, #32
 80179e4:	6023      	strmi	r3, [r4, #0]
 80179e6:	b11d      	cbz	r5, 80179f0 <_printf_i+0x19c>
 80179e8:	2310      	movs	r3, #16
 80179ea:	e7ad      	b.n	8017948 <_printf_i+0xf4>
 80179ec:	4826      	ldr	r0, [pc, #152]	@ (8017a88 <_printf_i+0x234>)
 80179ee:	e7e9      	b.n	80179c4 <_printf_i+0x170>
 80179f0:	6823      	ldr	r3, [r4, #0]
 80179f2:	f023 0320 	bic.w	r3, r3, #32
 80179f6:	6023      	str	r3, [r4, #0]
 80179f8:	e7f6      	b.n	80179e8 <_printf_i+0x194>
 80179fa:	4616      	mov	r6, r2
 80179fc:	e7bd      	b.n	801797a <_printf_i+0x126>
 80179fe:	6833      	ldr	r3, [r6, #0]
 8017a00:	6825      	ldr	r5, [r4, #0]
 8017a02:	6961      	ldr	r1, [r4, #20]
 8017a04:	1d18      	adds	r0, r3, #4
 8017a06:	6030      	str	r0, [r6, #0]
 8017a08:	062e      	lsls	r6, r5, #24
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	d501      	bpl.n	8017a12 <_printf_i+0x1be>
 8017a0e:	6019      	str	r1, [r3, #0]
 8017a10:	e002      	b.n	8017a18 <_printf_i+0x1c4>
 8017a12:	0668      	lsls	r0, r5, #25
 8017a14:	d5fb      	bpl.n	8017a0e <_printf_i+0x1ba>
 8017a16:	8019      	strh	r1, [r3, #0]
 8017a18:	2300      	movs	r3, #0
 8017a1a:	6123      	str	r3, [r4, #16]
 8017a1c:	4616      	mov	r6, r2
 8017a1e:	e7bc      	b.n	801799a <_printf_i+0x146>
 8017a20:	6833      	ldr	r3, [r6, #0]
 8017a22:	1d1a      	adds	r2, r3, #4
 8017a24:	6032      	str	r2, [r6, #0]
 8017a26:	681e      	ldr	r6, [r3, #0]
 8017a28:	6862      	ldr	r2, [r4, #4]
 8017a2a:	2100      	movs	r1, #0
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	f7e8 fc07 	bl	8000240 <memchr>
 8017a32:	b108      	cbz	r0, 8017a38 <_printf_i+0x1e4>
 8017a34:	1b80      	subs	r0, r0, r6
 8017a36:	6060      	str	r0, [r4, #4]
 8017a38:	6863      	ldr	r3, [r4, #4]
 8017a3a:	6123      	str	r3, [r4, #16]
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a42:	e7aa      	b.n	801799a <_printf_i+0x146>
 8017a44:	6923      	ldr	r3, [r4, #16]
 8017a46:	4632      	mov	r2, r6
 8017a48:	4649      	mov	r1, r9
 8017a4a:	4640      	mov	r0, r8
 8017a4c:	47d0      	blx	sl
 8017a4e:	3001      	adds	r0, #1
 8017a50:	d0ad      	beq.n	80179ae <_printf_i+0x15a>
 8017a52:	6823      	ldr	r3, [r4, #0]
 8017a54:	079b      	lsls	r3, r3, #30
 8017a56:	d413      	bmi.n	8017a80 <_printf_i+0x22c>
 8017a58:	68e0      	ldr	r0, [r4, #12]
 8017a5a:	9b03      	ldr	r3, [sp, #12]
 8017a5c:	4298      	cmp	r0, r3
 8017a5e:	bfb8      	it	lt
 8017a60:	4618      	movlt	r0, r3
 8017a62:	e7a6      	b.n	80179b2 <_printf_i+0x15e>
 8017a64:	2301      	movs	r3, #1
 8017a66:	4632      	mov	r2, r6
 8017a68:	4649      	mov	r1, r9
 8017a6a:	4640      	mov	r0, r8
 8017a6c:	47d0      	blx	sl
 8017a6e:	3001      	adds	r0, #1
 8017a70:	d09d      	beq.n	80179ae <_printf_i+0x15a>
 8017a72:	3501      	adds	r5, #1
 8017a74:	68e3      	ldr	r3, [r4, #12]
 8017a76:	9903      	ldr	r1, [sp, #12]
 8017a78:	1a5b      	subs	r3, r3, r1
 8017a7a:	42ab      	cmp	r3, r5
 8017a7c:	dcf2      	bgt.n	8017a64 <_printf_i+0x210>
 8017a7e:	e7eb      	b.n	8017a58 <_printf_i+0x204>
 8017a80:	2500      	movs	r5, #0
 8017a82:	f104 0619 	add.w	r6, r4, #25
 8017a86:	e7f5      	b.n	8017a74 <_printf_i+0x220>
 8017a88:	0801b447 	.word	0x0801b447
 8017a8c:	0801b458 	.word	0x0801b458

08017a90 <__sflush_r>:
 8017a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a98:	0716      	lsls	r6, r2, #28
 8017a9a:	4605      	mov	r5, r0
 8017a9c:	460c      	mov	r4, r1
 8017a9e:	d454      	bmi.n	8017b4a <__sflush_r+0xba>
 8017aa0:	684b      	ldr	r3, [r1, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	dc02      	bgt.n	8017aac <__sflush_r+0x1c>
 8017aa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	dd48      	ble.n	8017b3e <__sflush_r+0xae>
 8017aac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017aae:	2e00      	cmp	r6, #0
 8017ab0:	d045      	beq.n	8017b3e <__sflush_r+0xae>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017ab8:	682f      	ldr	r7, [r5, #0]
 8017aba:	6a21      	ldr	r1, [r4, #32]
 8017abc:	602b      	str	r3, [r5, #0]
 8017abe:	d030      	beq.n	8017b22 <__sflush_r+0x92>
 8017ac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017ac2:	89a3      	ldrh	r3, [r4, #12]
 8017ac4:	0759      	lsls	r1, r3, #29
 8017ac6:	d505      	bpl.n	8017ad4 <__sflush_r+0x44>
 8017ac8:	6863      	ldr	r3, [r4, #4]
 8017aca:	1ad2      	subs	r2, r2, r3
 8017acc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ace:	b10b      	cbz	r3, 8017ad4 <__sflush_r+0x44>
 8017ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ad2:	1ad2      	subs	r2, r2, r3
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ad8:	6a21      	ldr	r1, [r4, #32]
 8017ada:	4628      	mov	r0, r5
 8017adc:	47b0      	blx	r6
 8017ade:	1c43      	adds	r3, r0, #1
 8017ae0:	89a3      	ldrh	r3, [r4, #12]
 8017ae2:	d106      	bne.n	8017af2 <__sflush_r+0x62>
 8017ae4:	6829      	ldr	r1, [r5, #0]
 8017ae6:	291d      	cmp	r1, #29
 8017ae8:	d82b      	bhi.n	8017b42 <__sflush_r+0xb2>
 8017aea:	4a2a      	ldr	r2, [pc, #168]	@ (8017b94 <__sflush_r+0x104>)
 8017aec:	40ca      	lsrs	r2, r1
 8017aee:	07d6      	lsls	r6, r2, #31
 8017af0:	d527      	bpl.n	8017b42 <__sflush_r+0xb2>
 8017af2:	2200      	movs	r2, #0
 8017af4:	6062      	str	r2, [r4, #4]
 8017af6:	04d9      	lsls	r1, r3, #19
 8017af8:	6922      	ldr	r2, [r4, #16]
 8017afa:	6022      	str	r2, [r4, #0]
 8017afc:	d504      	bpl.n	8017b08 <__sflush_r+0x78>
 8017afe:	1c42      	adds	r2, r0, #1
 8017b00:	d101      	bne.n	8017b06 <__sflush_r+0x76>
 8017b02:	682b      	ldr	r3, [r5, #0]
 8017b04:	b903      	cbnz	r3, 8017b08 <__sflush_r+0x78>
 8017b06:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b0a:	602f      	str	r7, [r5, #0]
 8017b0c:	b1b9      	cbz	r1, 8017b3e <__sflush_r+0xae>
 8017b0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b12:	4299      	cmp	r1, r3
 8017b14:	d002      	beq.n	8017b1c <__sflush_r+0x8c>
 8017b16:	4628      	mov	r0, r5
 8017b18:	f7ff fb4a 	bl	80171b0 <_free_r>
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b20:	e00d      	b.n	8017b3e <__sflush_r+0xae>
 8017b22:	2301      	movs	r3, #1
 8017b24:	4628      	mov	r0, r5
 8017b26:	47b0      	blx	r6
 8017b28:	4602      	mov	r2, r0
 8017b2a:	1c50      	adds	r0, r2, #1
 8017b2c:	d1c9      	bne.n	8017ac2 <__sflush_r+0x32>
 8017b2e:	682b      	ldr	r3, [r5, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d0c6      	beq.n	8017ac2 <__sflush_r+0x32>
 8017b34:	2b1d      	cmp	r3, #29
 8017b36:	d001      	beq.n	8017b3c <__sflush_r+0xac>
 8017b38:	2b16      	cmp	r3, #22
 8017b3a:	d11e      	bne.n	8017b7a <__sflush_r+0xea>
 8017b3c:	602f      	str	r7, [r5, #0]
 8017b3e:	2000      	movs	r0, #0
 8017b40:	e022      	b.n	8017b88 <__sflush_r+0xf8>
 8017b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b46:	b21b      	sxth	r3, r3
 8017b48:	e01b      	b.n	8017b82 <__sflush_r+0xf2>
 8017b4a:	690f      	ldr	r7, [r1, #16]
 8017b4c:	2f00      	cmp	r7, #0
 8017b4e:	d0f6      	beq.n	8017b3e <__sflush_r+0xae>
 8017b50:	0793      	lsls	r3, r2, #30
 8017b52:	680e      	ldr	r6, [r1, #0]
 8017b54:	bf08      	it	eq
 8017b56:	694b      	ldreq	r3, [r1, #20]
 8017b58:	600f      	str	r7, [r1, #0]
 8017b5a:	bf18      	it	ne
 8017b5c:	2300      	movne	r3, #0
 8017b5e:	eba6 0807 	sub.w	r8, r6, r7
 8017b62:	608b      	str	r3, [r1, #8]
 8017b64:	f1b8 0f00 	cmp.w	r8, #0
 8017b68:	dde9      	ble.n	8017b3e <__sflush_r+0xae>
 8017b6a:	6a21      	ldr	r1, [r4, #32]
 8017b6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017b6e:	4643      	mov	r3, r8
 8017b70:	463a      	mov	r2, r7
 8017b72:	4628      	mov	r0, r5
 8017b74:	47b0      	blx	r6
 8017b76:	2800      	cmp	r0, #0
 8017b78:	dc08      	bgt.n	8017b8c <__sflush_r+0xfc>
 8017b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b82:	81a3      	strh	r3, [r4, #12]
 8017b84:	f04f 30ff 	mov.w	r0, #4294967295
 8017b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b8c:	4407      	add	r7, r0
 8017b8e:	eba8 0800 	sub.w	r8, r8, r0
 8017b92:	e7e7      	b.n	8017b64 <__sflush_r+0xd4>
 8017b94:	20400001 	.word	0x20400001

08017b98 <_fflush_r>:
 8017b98:	b538      	push	{r3, r4, r5, lr}
 8017b9a:	690b      	ldr	r3, [r1, #16]
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	460c      	mov	r4, r1
 8017ba0:	b913      	cbnz	r3, 8017ba8 <_fflush_r+0x10>
 8017ba2:	2500      	movs	r5, #0
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	bd38      	pop	{r3, r4, r5, pc}
 8017ba8:	b118      	cbz	r0, 8017bb2 <_fflush_r+0x1a>
 8017baa:	6a03      	ldr	r3, [r0, #32]
 8017bac:	b90b      	cbnz	r3, 8017bb2 <_fflush_r+0x1a>
 8017bae:	f7ff f91b 	bl	8016de8 <__sinit>
 8017bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d0f3      	beq.n	8017ba2 <_fflush_r+0xa>
 8017bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017bbc:	07d0      	lsls	r0, r2, #31
 8017bbe:	d404      	bmi.n	8017bca <_fflush_r+0x32>
 8017bc0:	0599      	lsls	r1, r3, #22
 8017bc2:	d402      	bmi.n	8017bca <_fflush_r+0x32>
 8017bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017bc6:	f7ff fae2 	bl	801718e <__retarget_lock_acquire_recursive>
 8017bca:	4628      	mov	r0, r5
 8017bcc:	4621      	mov	r1, r4
 8017bce:	f7ff ff5f 	bl	8017a90 <__sflush_r>
 8017bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017bd4:	07da      	lsls	r2, r3, #31
 8017bd6:	4605      	mov	r5, r0
 8017bd8:	d4e4      	bmi.n	8017ba4 <_fflush_r+0xc>
 8017bda:	89a3      	ldrh	r3, [r4, #12]
 8017bdc:	059b      	lsls	r3, r3, #22
 8017bde:	d4e1      	bmi.n	8017ba4 <_fflush_r+0xc>
 8017be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017be2:	f7ff fad5 	bl	8017190 <__retarget_lock_release_recursive>
 8017be6:	e7dd      	b.n	8017ba4 <_fflush_r+0xc>

08017be8 <__swbuf_r>:
 8017be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bea:	460e      	mov	r6, r1
 8017bec:	4614      	mov	r4, r2
 8017bee:	4605      	mov	r5, r0
 8017bf0:	b118      	cbz	r0, 8017bfa <__swbuf_r+0x12>
 8017bf2:	6a03      	ldr	r3, [r0, #32]
 8017bf4:	b90b      	cbnz	r3, 8017bfa <__swbuf_r+0x12>
 8017bf6:	f7ff f8f7 	bl	8016de8 <__sinit>
 8017bfa:	69a3      	ldr	r3, [r4, #24]
 8017bfc:	60a3      	str	r3, [r4, #8]
 8017bfe:	89a3      	ldrh	r3, [r4, #12]
 8017c00:	071a      	lsls	r2, r3, #28
 8017c02:	d501      	bpl.n	8017c08 <__swbuf_r+0x20>
 8017c04:	6923      	ldr	r3, [r4, #16]
 8017c06:	b943      	cbnz	r3, 8017c1a <__swbuf_r+0x32>
 8017c08:	4621      	mov	r1, r4
 8017c0a:	4628      	mov	r0, r5
 8017c0c:	f000 f82a 	bl	8017c64 <__swsetup_r>
 8017c10:	b118      	cbz	r0, 8017c1a <__swbuf_r+0x32>
 8017c12:	f04f 37ff 	mov.w	r7, #4294967295
 8017c16:	4638      	mov	r0, r7
 8017c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c1a:	6823      	ldr	r3, [r4, #0]
 8017c1c:	6922      	ldr	r2, [r4, #16]
 8017c1e:	1a98      	subs	r0, r3, r2
 8017c20:	6963      	ldr	r3, [r4, #20]
 8017c22:	b2f6      	uxtb	r6, r6
 8017c24:	4283      	cmp	r3, r0
 8017c26:	4637      	mov	r7, r6
 8017c28:	dc05      	bgt.n	8017c36 <__swbuf_r+0x4e>
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	f7ff ffb3 	bl	8017b98 <_fflush_r>
 8017c32:	2800      	cmp	r0, #0
 8017c34:	d1ed      	bne.n	8017c12 <__swbuf_r+0x2a>
 8017c36:	68a3      	ldr	r3, [r4, #8]
 8017c38:	3b01      	subs	r3, #1
 8017c3a:	60a3      	str	r3, [r4, #8]
 8017c3c:	6823      	ldr	r3, [r4, #0]
 8017c3e:	1c5a      	adds	r2, r3, #1
 8017c40:	6022      	str	r2, [r4, #0]
 8017c42:	701e      	strb	r6, [r3, #0]
 8017c44:	6962      	ldr	r2, [r4, #20]
 8017c46:	1c43      	adds	r3, r0, #1
 8017c48:	429a      	cmp	r2, r3
 8017c4a:	d004      	beq.n	8017c56 <__swbuf_r+0x6e>
 8017c4c:	89a3      	ldrh	r3, [r4, #12]
 8017c4e:	07db      	lsls	r3, r3, #31
 8017c50:	d5e1      	bpl.n	8017c16 <__swbuf_r+0x2e>
 8017c52:	2e0a      	cmp	r6, #10
 8017c54:	d1df      	bne.n	8017c16 <__swbuf_r+0x2e>
 8017c56:	4621      	mov	r1, r4
 8017c58:	4628      	mov	r0, r5
 8017c5a:	f7ff ff9d 	bl	8017b98 <_fflush_r>
 8017c5e:	2800      	cmp	r0, #0
 8017c60:	d0d9      	beq.n	8017c16 <__swbuf_r+0x2e>
 8017c62:	e7d6      	b.n	8017c12 <__swbuf_r+0x2a>

08017c64 <__swsetup_r>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4b29      	ldr	r3, [pc, #164]	@ (8017d0c <__swsetup_r+0xa8>)
 8017c68:	4605      	mov	r5, r0
 8017c6a:	6818      	ldr	r0, [r3, #0]
 8017c6c:	460c      	mov	r4, r1
 8017c6e:	b118      	cbz	r0, 8017c78 <__swsetup_r+0x14>
 8017c70:	6a03      	ldr	r3, [r0, #32]
 8017c72:	b90b      	cbnz	r3, 8017c78 <__swsetup_r+0x14>
 8017c74:	f7ff f8b8 	bl	8016de8 <__sinit>
 8017c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c7c:	0719      	lsls	r1, r3, #28
 8017c7e:	d422      	bmi.n	8017cc6 <__swsetup_r+0x62>
 8017c80:	06da      	lsls	r2, r3, #27
 8017c82:	d407      	bmi.n	8017c94 <__swsetup_r+0x30>
 8017c84:	2209      	movs	r2, #9
 8017c86:	602a      	str	r2, [r5, #0]
 8017c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c8c:	81a3      	strh	r3, [r4, #12]
 8017c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c92:	e033      	b.n	8017cfc <__swsetup_r+0x98>
 8017c94:	0758      	lsls	r0, r3, #29
 8017c96:	d512      	bpl.n	8017cbe <__swsetup_r+0x5a>
 8017c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c9a:	b141      	cbz	r1, 8017cae <__swsetup_r+0x4a>
 8017c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ca0:	4299      	cmp	r1, r3
 8017ca2:	d002      	beq.n	8017caa <__swsetup_r+0x46>
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	f7ff fa83 	bl	80171b0 <_free_r>
 8017caa:	2300      	movs	r3, #0
 8017cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8017cae:	89a3      	ldrh	r3, [r4, #12]
 8017cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017cb4:	81a3      	strh	r3, [r4, #12]
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	6063      	str	r3, [r4, #4]
 8017cba:	6923      	ldr	r3, [r4, #16]
 8017cbc:	6023      	str	r3, [r4, #0]
 8017cbe:	89a3      	ldrh	r3, [r4, #12]
 8017cc0:	f043 0308 	orr.w	r3, r3, #8
 8017cc4:	81a3      	strh	r3, [r4, #12]
 8017cc6:	6923      	ldr	r3, [r4, #16]
 8017cc8:	b94b      	cbnz	r3, 8017cde <__swsetup_r+0x7a>
 8017cca:	89a3      	ldrh	r3, [r4, #12]
 8017ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017cd4:	d003      	beq.n	8017cde <__swsetup_r+0x7a>
 8017cd6:	4621      	mov	r1, r4
 8017cd8:	4628      	mov	r0, r5
 8017cda:	f000 f887 	bl	8017dec <__smakebuf_r>
 8017cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ce2:	f013 0201 	ands.w	r2, r3, #1
 8017ce6:	d00a      	beq.n	8017cfe <__swsetup_r+0x9a>
 8017ce8:	2200      	movs	r2, #0
 8017cea:	60a2      	str	r2, [r4, #8]
 8017cec:	6962      	ldr	r2, [r4, #20]
 8017cee:	4252      	negs	r2, r2
 8017cf0:	61a2      	str	r2, [r4, #24]
 8017cf2:	6922      	ldr	r2, [r4, #16]
 8017cf4:	b942      	cbnz	r2, 8017d08 <__swsetup_r+0xa4>
 8017cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017cfa:	d1c5      	bne.n	8017c88 <__swsetup_r+0x24>
 8017cfc:	bd38      	pop	{r3, r4, r5, pc}
 8017cfe:	0799      	lsls	r1, r3, #30
 8017d00:	bf58      	it	pl
 8017d02:	6962      	ldrpl	r2, [r4, #20]
 8017d04:	60a2      	str	r2, [r4, #8]
 8017d06:	e7f4      	b.n	8017cf2 <__swsetup_r+0x8e>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	e7f7      	b.n	8017cfc <__swsetup_r+0x98>
 8017d0c:	20000080 	.word	0x20000080

08017d10 <memmove>:
 8017d10:	4288      	cmp	r0, r1
 8017d12:	b510      	push	{r4, lr}
 8017d14:	eb01 0402 	add.w	r4, r1, r2
 8017d18:	d902      	bls.n	8017d20 <memmove+0x10>
 8017d1a:	4284      	cmp	r4, r0
 8017d1c:	4623      	mov	r3, r4
 8017d1e:	d807      	bhi.n	8017d30 <memmove+0x20>
 8017d20:	1e43      	subs	r3, r0, #1
 8017d22:	42a1      	cmp	r1, r4
 8017d24:	d008      	beq.n	8017d38 <memmove+0x28>
 8017d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d2e:	e7f8      	b.n	8017d22 <memmove+0x12>
 8017d30:	4402      	add	r2, r0
 8017d32:	4601      	mov	r1, r0
 8017d34:	428a      	cmp	r2, r1
 8017d36:	d100      	bne.n	8017d3a <memmove+0x2a>
 8017d38:	bd10      	pop	{r4, pc}
 8017d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d42:	e7f7      	b.n	8017d34 <memmove+0x24>

08017d44 <_realloc_r>:
 8017d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d48:	4607      	mov	r7, r0
 8017d4a:	4614      	mov	r4, r2
 8017d4c:	460d      	mov	r5, r1
 8017d4e:	b921      	cbnz	r1, 8017d5a <_realloc_r+0x16>
 8017d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d54:	4611      	mov	r1, r2
 8017d56:	f7fe bf2f 	b.w	8016bb8 <_malloc_r>
 8017d5a:	b92a      	cbnz	r2, 8017d68 <_realloc_r+0x24>
 8017d5c:	f7ff fa28 	bl	80171b0 <_free_r>
 8017d60:	4625      	mov	r5, r4
 8017d62:	4628      	mov	r0, r5
 8017d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d68:	f000 f89e 	bl	8017ea8 <_malloc_usable_size_r>
 8017d6c:	4284      	cmp	r4, r0
 8017d6e:	4606      	mov	r6, r0
 8017d70:	d802      	bhi.n	8017d78 <_realloc_r+0x34>
 8017d72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017d76:	d8f4      	bhi.n	8017d62 <_realloc_r+0x1e>
 8017d78:	4621      	mov	r1, r4
 8017d7a:	4638      	mov	r0, r7
 8017d7c:	f7fe ff1c 	bl	8016bb8 <_malloc_r>
 8017d80:	4680      	mov	r8, r0
 8017d82:	b908      	cbnz	r0, 8017d88 <_realloc_r+0x44>
 8017d84:	4645      	mov	r5, r8
 8017d86:	e7ec      	b.n	8017d62 <_realloc_r+0x1e>
 8017d88:	42b4      	cmp	r4, r6
 8017d8a:	4622      	mov	r2, r4
 8017d8c:	4629      	mov	r1, r5
 8017d8e:	bf28      	it	cs
 8017d90:	4632      	movcs	r2, r6
 8017d92:	f7ff f9fe 	bl	8017192 <memcpy>
 8017d96:	4629      	mov	r1, r5
 8017d98:	4638      	mov	r0, r7
 8017d9a:	f7ff fa09 	bl	80171b0 <_free_r>
 8017d9e:	e7f1      	b.n	8017d84 <_realloc_r+0x40>

08017da0 <__swhatbuf_r>:
 8017da0:	b570      	push	{r4, r5, r6, lr}
 8017da2:	460c      	mov	r4, r1
 8017da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017da8:	2900      	cmp	r1, #0
 8017daa:	b096      	sub	sp, #88	@ 0x58
 8017dac:	4615      	mov	r5, r2
 8017dae:	461e      	mov	r6, r3
 8017db0:	da0d      	bge.n	8017dce <__swhatbuf_r+0x2e>
 8017db2:	89a3      	ldrh	r3, [r4, #12]
 8017db4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017db8:	f04f 0100 	mov.w	r1, #0
 8017dbc:	bf14      	ite	ne
 8017dbe:	2340      	movne	r3, #64	@ 0x40
 8017dc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017dc4:	2000      	movs	r0, #0
 8017dc6:	6031      	str	r1, [r6, #0]
 8017dc8:	602b      	str	r3, [r5, #0]
 8017dca:	b016      	add	sp, #88	@ 0x58
 8017dcc:	bd70      	pop	{r4, r5, r6, pc}
 8017dce:	466a      	mov	r2, sp
 8017dd0:	f000 f848 	bl	8017e64 <_fstat_r>
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	dbec      	blt.n	8017db2 <__swhatbuf_r+0x12>
 8017dd8:	9901      	ldr	r1, [sp, #4]
 8017dda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017dde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017de2:	4259      	negs	r1, r3
 8017de4:	4159      	adcs	r1, r3
 8017de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017dea:	e7eb      	b.n	8017dc4 <__swhatbuf_r+0x24>

08017dec <__smakebuf_r>:
 8017dec:	898b      	ldrh	r3, [r1, #12]
 8017dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017df0:	079d      	lsls	r5, r3, #30
 8017df2:	4606      	mov	r6, r0
 8017df4:	460c      	mov	r4, r1
 8017df6:	d507      	bpl.n	8017e08 <__smakebuf_r+0x1c>
 8017df8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017dfc:	6023      	str	r3, [r4, #0]
 8017dfe:	6123      	str	r3, [r4, #16]
 8017e00:	2301      	movs	r3, #1
 8017e02:	6163      	str	r3, [r4, #20]
 8017e04:	b003      	add	sp, #12
 8017e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e08:	ab01      	add	r3, sp, #4
 8017e0a:	466a      	mov	r2, sp
 8017e0c:	f7ff ffc8 	bl	8017da0 <__swhatbuf_r>
 8017e10:	9f00      	ldr	r7, [sp, #0]
 8017e12:	4605      	mov	r5, r0
 8017e14:	4639      	mov	r1, r7
 8017e16:	4630      	mov	r0, r6
 8017e18:	f7fe fece 	bl	8016bb8 <_malloc_r>
 8017e1c:	b948      	cbnz	r0, 8017e32 <__smakebuf_r+0x46>
 8017e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e22:	059a      	lsls	r2, r3, #22
 8017e24:	d4ee      	bmi.n	8017e04 <__smakebuf_r+0x18>
 8017e26:	f023 0303 	bic.w	r3, r3, #3
 8017e2a:	f043 0302 	orr.w	r3, r3, #2
 8017e2e:	81a3      	strh	r3, [r4, #12]
 8017e30:	e7e2      	b.n	8017df8 <__smakebuf_r+0xc>
 8017e32:	89a3      	ldrh	r3, [r4, #12]
 8017e34:	6020      	str	r0, [r4, #0]
 8017e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e3a:	81a3      	strh	r3, [r4, #12]
 8017e3c:	9b01      	ldr	r3, [sp, #4]
 8017e3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017e42:	b15b      	cbz	r3, 8017e5c <__smakebuf_r+0x70>
 8017e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e48:	4630      	mov	r0, r6
 8017e4a:	f000 f81d 	bl	8017e88 <_isatty_r>
 8017e4e:	b128      	cbz	r0, 8017e5c <__smakebuf_r+0x70>
 8017e50:	89a3      	ldrh	r3, [r4, #12]
 8017e52:	f023 0303 	bic.w	r3, r3, #3
 8017e56:	f043 0301 	orr.w	r3, r3, #1
 8017e5a:	81a3      	strh	r3, [r4, #12]
 8017e5c:	89a3      	ldrh	r3, [r4, #12]
 8017e5e:	431d      	orrs	r5, r3
 8017e60:	81a5      	strh	r5, [r4, #12]
 8017e62:	e7cf      	b.n	8017e04 <__smakebuf_r+0x18>

08017e64 <_fstat_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4d07      	ldr	r5, [pc, #28]	@ (8017e84 <_fstat_r+0x20>)
 8017e68:	2300      	movs	r3, #0
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	4608      	mov	r0, r1
 8017e6e:	4611      	mov	r1, r2
 8017e70:	602b      	str	r3, [r5, #0]
 8017e72:	f7ed f80e 	bl	8004e92 <_fstat>
 8017e76:	1c43      	adds	r3, r0, #1
 8017e78:	d102      	bne.n	8017e80 <_fstat_r+0x1c>
 8017e7a:	682b      	ldr	r3, [r5, #0]
 8017e7c:	b103      	cbz	r3, 8017e80 <_fstat_r+0x1c>
 8017e7e:	6023      	str	r3, [r4, #0]
 8017e80:	bd38      	pop	{r3, r4, r5, pc}
 8017e82:	bf00      	nop
 8017e84:	20012088 	.word	0x20012088

08017e88 <_isatty_r>:
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4d06      	ldr	r5, [pc, #24]	@ (8017ea4 <_isatty_r+0x1c>)
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	4604      	mov	r4, r0
 8017e90:	4608      	mov	r0, r1
 8017e92:	602b      	str	r3, [r5, #0]
 8017e94:	f7ed f80d 	bl	8004eb2 <_isatty>
 8017e98:	1c43      	adds	r3, r0, #1
 8017e9a:	d102      	bne.n	8017ea2 <_isatty_r+0x1a>
 8017e9c:	682b      	ldr	r3, [r5, #0]
 8017e9e:	b103      	cbz	r3, 8017ea2 <_isatty_r+0x1a>
 8017ea0:	6023      	str	r3, [r4, #0]
 8017ea2:	bd38      	pop	{r3, r4, r5, pc}
 8017ea4:	20012088 	.word	0x20012088

08017ea8 <_malloc_usable_size_r>:
 8017ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017eac:	1f18      	subs	r0, r3, #4
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	bfbc      	itt	lt
 8017eb2:	580b      	ldrlt	r3, [r1, r0]
 8017eb4:	18c0      	addlt	r0, r0, r3
 8017eb6:	4770      	bx	lr

08017eb8 <_init>:
 8017eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eba:	bf00      	nop
 8017ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ebe:	bc08      	pop	{r3}
 8017ec0:	469e      	mov	lr, r3
 8017ec2:	4770      	bx	lr

08017ec4 <_fini>:
 8017ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec6:	bf00      	nop
 8017ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eca:	bc08      	pop	{r3}
 8017ecc:	469e      	mov	lr, r3
 8017ece:	4770      	bx	lr
